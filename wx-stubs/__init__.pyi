# -*- coding: utf-8 -*-
from typing import Any, ContextManager, Optional, Union, TypeAlias

from .ActivateEvent import Reason
from .ConfigBase import EntryType
from .DateTime import Country, Month, Tm
from .HelpEvent import Origin
from .StandardPaths import FileLayout
from .StockPreferencesPage import Kind

FontFamily: TypeAlias = int  # Enumeration

FONTFAMILY_DEFAULT: int

FONTFAMILY_DECORATIVE: int

FONTFAMILY_ROMAN: int

FONTFAMILY_SCRIPT: int

FONTFAMILY_SWISS: int

FONTFAMILY_MODERN: int

FONTFAMILY_TELETYPE: int

FONTFAMILY_MAX: int

FONTFAMILY_UNKNOWN: int

FontWeight: TypeAlias = int  # Enumeration

FONTWEIGHT_INVALID: int

FONTWEIGHT_THIN: int

FONTWEIGHT_EXTRALIGHT: int

FONTWEIGHT_LIGHT: int

FONTWEIGHT_NORMAL: int

FONTWEIGHT_MEDIUM: int

FONTWEIGHT_SEMIBOLD: int

FONTWEIGHT_BOLD: int

FONTWEIGHT_EXTRABOLD: int

FONTWEIGHT_HEAVY: int

FONTWEIGHT_EXTRAHEAVY: int

FONTWEIGHT_MAX: int

StockCursor: TypeAlias = int  # Enumeration

CURSOR_NONE: int

CURSOR_ARROW: int

CURSOR_RIGHT_ARROW: int

CURSOR_BULLSEYE: int

CURSOR_CHAR: int

CURSOR_CROSS: int

CURSOR_HAND: int

CURSOR_IBEAM: int

CURSOR_LEFT_BUTTON: int

CURSOR_MAGNIFIER: int

CURSOR_MIDDLE_BUTTON: int

CURSOR_NO_ENTRY: int

CURSOR_PAINT_BRUSH: int

CURSOR_PENCIL: int

CURSOR_POINT_LEFT: int

CURSOR_POINT_RIGHT: int

CURSOR_QUESTION_ARROW: int

CURSOR_RIGHT_BUTTON: int

CURSOR_SIZENESW: int

CURSOR_SIZENS: int

CURSOR_SIZENWSE: int

CURSOR_SIZEWE: int

CURSOR_SIZING: int

CURSOR_SPRAYCAN: int

CURSOR_WAIT: int

CURSOR_WATCH: int

CURSOR_BLANK: int

CURSOR_DEFAULT: int

CURSOR_COPY_ARROW: int

CURSOR_ARROWWAIT: int

CURSOR_MAX: int

StandardID: TypeAlias = int  # Enumeration

ID_AUTO_LOWEST: int

ID_ANY: int

ID_AUTO_HIGHEST: int

ID_NONE: int

ID_SEPARATOR: int

ID_LOWEST: int

ID_OPEN: int

ID_CLOSE: int

ID_NEW: int

ID_SAVE: int

ID_SAVEAS: int

ID_REVERT: int

ID_EXIT: int

ID_UNDO: int

ID_REDO: int

ID_HELP: int

ID_PRINT: int

ID_PRINT_SETUP: int

ID_PAGE_SETUP: int

ID_PREVIEW: int

ID_ABOUT: int

ID_HELP_CONTENTS: int

ID_HELP_INDEX: int

ID_HELP_SEARCH: int

ID_HELP_COMMANDS: int

ID_HELP_PROCEDURES: int

ID_HELP_CONTEXT: int

ID_CLOSE_ALL: int

ID_PREFERENCES: int

ID_EDIT: int

ID_CUT: int

ID_COPY: int

ID_PASTE: int

ID_CLEAR: int

ID_FIND: int

ID_DUPLICATE: int

ID_SELECTALL: int

ID_DELETE: int

ID_REPLACE: int

ID_REPLACE_ALL: int

ID_PROPERTIES: int

ID_VIEW_DETAILS: int

ID_VIEW_LARGEICONS: int

ID_VIEW_SMALLICONS: int

ID_VIEW_LIST: int

ID_VIEW_SORTDATE: int

ID_VIEW_SORTNAME: int

ID_VIEW_SORTSIZE: int

ID_VIEW_SORTTYPE: int

ID_FILE: int

ID_FILE1: int

ID_FILE2: int

ID_FILE3: int

ID_FILE4: int

ID_FILE5: int

ID_FILE6: int

ID_FILE7: int

ID_FILE8: int

ID_FILE9: int

ID_OK: int

ID_CANCEL: int

ID_APPLY: int

ID_YES: int

ID_NO: int

ID_STATIC: int

ID_FORWARD: int

ID_BACKWARD: int

ID_DEFAULT: int

ID_MORE: int

ID_SETUP: int

ID_RESET: int

ID_CONTEXT_HELP: int

ID_YESTOALL: int

ID_NOTOALL: int

ID_ABORT: int

ID_RETRY: int

ID_IGNORE: int

ID_ADD: int

ID_REMOVE: int

ID_UP: int

ID_DOWN: int

ID_HOME: int

ID_REFRESH: int

ID_STOP: int

ID_INDEX: int

ID_BOLD: int

ID_ITALIC: int

ID_JUSTIFY_CENTER: int

ID_JUSTIFY_FILL: int

ID_JUSTIFY_RIGHT: int

ID_JUSTIFY_LEFT: int

ID_UNDERLINE: int

ID_INDENT: int

ID_UNINDENT: int

ID_ZOOM_100: int

ID_ZOOM_FIT: int

ID_ZOOM_IN: int

ID_ZOOM_OUT: int

ID_UNDELETE: int

ID_REVERT_TO_SAVED: int

ID_CDROM: int

ID_CONVERT: int

ID_EXECUTE: int

ID_FLOPPY: int

ID_HARDDISK: int

ID_BOTTOM: int

ID_FIRST: int

ID_LAST: int

ID_TOP: int

ID_INFO: int

ID_JUMP_TO: int

ID_NETWORK: int

ID_SELECT_COLOR: int

ID_SELECT_FONT: int

ID_SORT_ASCENDING: int

ID_SORT_DESCENDING: int

ID_SPELL_CHECK: int

ID_STRIKETHROUGH: int

ID_SYSTEM_MENU: int

ID_CLOSE_FRAME: int

ID_MOVE_FRAME: int

ID_RESIZE_FRAME: int

ID_MAXIMIZE_FRAME: int

ID_ICONIZE_FRAME: int

ID_RESTORE_FRAME: int

ID_MDI_WINDOW_FIRST: int

ID_MDI_WINDOW_CASCADE: int

ID_MDI_WINDOW_TILE_HORZ: int

ID_MDI_WINDOW_TILE_VERT: int

ID_MDI_WINDOW_ARRANGE_ICONS: int

ID_MDI_WINDOW_PREV: int

ID_MDI_WINDOW_NEXT: int

ID_MDI_WINDOW_LAST: int

ID_FILEDLGG: int

ID_FILECTRL: int

ID_HIGHEST: int

FontEncoding: TypeAlias = int  # Enumeration

FONTENCODING_SYSTEM: int

FONTENCODING_DEFAULT: int

FONTENCODING_ISO8859_1: int

FONTENCODING_ISO8859_2: int

FONTENCODING_ISO8859_3: int

FONTENCODING_ISO8859_4: int

FONTENCODING_ISO8859_5: int

FONTENCODING_ISO8859_6: int

FONTENCODING_ISO8859_7: int

FONTENCODING_ISO8859_8: int

FONTENCODING_ISO8859_9: int

FONTENCODING_ISO8859_10: int

FONTENCODING_ISO8859_11: int

FONTENCODING_ISO8859_12: int

FONTENCODING_ISO8859_13: int

FONTENCODING_ISO8859_14: int

FONTENCODING_ISO8859_15: int

FONTENCODING_ISO8859_MAX: int

FONTENCODING_KOI8: int

FONTENCODING_KOI8_U: int

FONTENCODING_ALTERNATIVE: int

FONTENCODING_BULGARIAN: int

FONTENCODING_CP437: int

FONTENCODING_CP850: int

FONTENCODING_CP852: int

FONTENCODING_CP855: int

FONTENCODING_CP866: int

FONTENCODING_CP874: int

FONTENCODING_CP932: int

FONTENCODING_CP936: int

FONTENCODING_CP949: int

FONTENCODING_CP950: int

FONTENCODING_CP1250: int

FONTENCODING_CP1251: int

FONTENCODING_CP1252: int

FONTENCODING_CP1253: int

FONTENCODING_CP1254: int

FONTENCODING_CP1255: int

FONTENCODING_CP1256: int

FONTENCODING_CP1257: int

FONTENCODING_CP1258: int

FONTENCODING_CP1361: int

FONTENCODING_CP12_MAX: int

FONTENCODING_UTF7: int

FONTENCODING_UTF8: int

FONTENCODING_EUC_JP: int

FONTENCODING_UTF16BE: int

FONTENCODING_UTF16LE: int

FONTENCODING_UTF32BE: int

FONTENCODING_UTF32LE: int

FONTENCODING_MACROMAN: int

FONTENCODING_MACJAPANESE: int

FONTENCODING_MACCHINESETRAD: int

FONTENCODING_MACKOREAN: int

FONTENCODING_MACARABIC: int

FONTENCODING_MACHEBREW: int

FONTENCODING_MACGREEK: int

FONTENCODING_MACCYRILLIC: int

FONTENCODING_MACDEVANAGARI: int

FONTENCODING_MACGURMUKHI: int

FONTENCODING_MACGUJARATI: int

FONTENCODING_MACORIYA: int

FONTENCODING_MACBENGALI: int

FONTENCODING_MACTAMIL: int

FONTENCODING_MACTELUGU: int

FONTENCODING_MACKANNADA: int

FONTENCODING_MACMALAJALAM: int

FONTENCODING_MACSINHALESE: int

FONTENCODING_MACBURMESE: int

FONTENCODING_MACKHMER: int

FONTENCODING_MACTHAI: int

FONTENCODING_MACLAOTIAN: int

FONTENCODING_MACGEORGIAN: int

FONTENCODING_MACARMENIAN: int

FONTENCODING_MACCHINESESIMP: int

FONTENCODING_MACTIBETAN: int

FONTENCODING_MACMONGOLIAN: int

FONTENCODING_MACETHIOPIC: int

FONTENCODING_MACCENTRALEUR: int

FONTENCODING_MACVIATNAMESE: int

FONTENCODING_MACARABICEXT: int

FONTENCODING_MACSYMBOL: int

FONTENCODING_MACDINGBATS: int

FONTENCODING_MACTURKISH: int

FONTENCODING_MACCROATIAN: int

FONTENCODING_MACICELANDIC: int

FONTENCODING_MACROMANIAN: int

FONTENCODING_MACCELTIC: int

FONTENCODING_MACGAELIC: int

FONTENCODING_MACKEYBOARD: int

FONTENCODING_ISO2022_JP: int

FONTENCODING_MAX: int

FONTENCODING_MACMIN: int

FONTENCODING_MACMAX: int

FONTENCODING_UTF16: int

FONTENCODING_UTF32: int

FONTENCODING_UNICODE: int

FONTENCODING_GB2312: int

FONTENCODING_BIG5: int

FONTENCODING_SHIFT_JIS: int

FONTENCODING_EUC_KR: int

FONTENCODING_JOHAB: int

FONTENCODING_VIETNAMESE: int

FontStyle: TypeAlias = int  # Enumeration

FONTSTYLE_NORMAL: int

FONTSTYLE_ITALIC: int

FONTSTYLE_SLANT: int

FONTSTYLE_MAX: int

def Abort() -> None:
    """ 

`wx.``Abort`()[¶](#wx.Abort "Permalink to this definition")
Exits the program immediately.


This is a simple wrapper for the standard abort() function.



New in version 2.9.4.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def AutoBufferedPaintDCFactory(window: 'Window') -> 'DC':
    """ 

`wx.``AutoBufferedPaintDCFactory`(*window*)[¶](#wx.AutoBufferedPaintDCFactory "Permalink to this definition")
Check if the window is natively double buffered and will return a  [wx.PaintDC](wx.PaintDC.html#wx-paintdc) if it is, a  [wx.BufferedPaintDC](wx.BufferedPaintDC.html#wx-bufferedpaintdc) otherwise.


It is the caller’s responsibility to delete the  [wx.DC](wx.DC.html#wx-dc) pointer when finished with it.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.DC](wx.DC.html#wx-dc)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def BeginBusyCursor(cursor: 'Cursor'=HOURGLASS_CURSOR) -> None:
    """ 

`wx.``BeginBusyCursor`(*cursor=HOURGLASS\_CURSOR*)[¶](#wx.BeginBusyCursor "Permalink to this definition")
Changes the cursor to the given cursor for all windows in the application.


Use [`wx.EndBusyCursor`](#wx.EndBusyCursor "wx.EndBusyCursor") to revert the cursor back to its previous state. These two calls can be nested, and a counter ensures that only the outer calls take effect.



Parameters
**cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – 





See also


[`wx.IsBusy`](#wx.IsBusy "wx.IsBusy") ,  [wx.BusyCursor](wx.BusyCursor.html#wx-busycursor)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def Bell() -> None:
    """ 

`wx.``Bell`()[¶](#wx.Bell "Permalink to this definition")
Ring the system bell.



Note


This function is categorized as a GUI one and so is not thread-safe.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def BitmapFromBuffer(width, height, dataBuffer, alphaBuffer=None) -> None:
    """ 

`wx.``BitmapFromBuffer`(*width*, *height*, *dataBuffer*, *alphaBuffer=None*)[¶](#wx.BitmapFromBuffer "Permalink to this definition")
A compatibility wrapper for [`wx.Bitmap.FromBuffer`](wx.Bitmap.html#wx.Bitmap.FromBuffer "wx.Bitmap.FromBuffer") and [`wx.Bitmap.FromBufferAndAlpha`](wx.Bitmap.html#wx.Bitmap.FromBufferAndAlpha "wx.Bitmap.FromBufferAndAlpha")




        Source: https://docs.wxpython.org/wx.functions.html
    """


def BitmapFromBufferRGBA(width, height, dataBuffer) -> None:
    """ 

`wx.``BitmapFromBufferRGBA`(*width*, *height*, *dataBuffer*)[¶](#wx.BitmapFromBufferRGBA "Permalink to this definition")
A compatibility wrapper for [`wx.Bitmap.FromBufferRGBA`](wx.Bitmap.html#wx.Bitmap.FromBufferRGBA "wx.Bitmap.FromBufferRGBA")




        Source: https://docs.wxpython.org/wx.functions.html
    """


def BitmapFromImage(image) -> None:
    """ 

`wx.``BitmapFromImage`(*image*)[¶](#wx.BitmapFromImage "Permalink to this definition")
A compatibility wrapper for the wx.Bitmap(wx.Image) constructor




        Source: https://docs.wxpython.org/wx.functions.html
    """


def CallAfter(callableObj, *args, **kw) -> None:
    """ 

`wx.``CallAfter`(*callableObj*, *\*args*, *\*\*kw*)[¶](#wx.CallAfter "Permalink to this definition")
Call the specified function after the current and pending event
handlers have been completed. This is also good for making GUI
method calls from non-GUI threads. Any extra positional or
keyword args are passed on to the callable when it is called.



Parameters
* **callableObj** (*PyObject*) – the callable object
* **args** – arguments to be passed to the callable object
* **kw** – keywords to be passed to the callable object





See also


 [wx.CallLater](wx.CallLater.html#wx-calllater)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def CheckOsVersion(majorVsn, minorVsn=0, microVsn=0) -> bool:
    """ 

`wx.``CheckOsVersion`(*majorVsn*, *minorVsn=0*, *microVsn=0*)[¶](#wx.CheckOsVersion "Permalink to this definition")
Returns `True` if the version of the operating system on which the program is running under is the same or later than the given version.



Parameters
* **majorVsn** (*int*) –
* **minorVsn** (*int*) –
* **microVsn** (*int*) –



Return type
*bool*





New in version 4.1/wxWidgets-3.1.0.




See also


[`wx.GetOsVersion`](#wx.GetOsVersion "wx.GetOsVersion") , `PlatformInfo`





        Source: https://docs.wxpython.org/wx.functions.html
    """


def ClientDisplayRect() -> tuple:
    """ 

`wx.``ClientDisplayRect`()[¶](#wx.ClientDisplayRect "Permalink to this definition")
Returns the dimensions of the work area on the display.


This is the same as [`wx.GetClientDisplayRect`](#wx.GetClientDisplayRect "wx.GetClientDisplayRect") but allows retrieving the individual components instead of the entire rectangle.


Any of the output pointers can be `None` if the corresponding value is not needed by the caller.



Return type
*tuple*



Returns
( *x*, *y*, *width*, *height* )





See also


 [wx.Display](wx.Display.html#wx-display)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def ColourDisplay() -> bool:
    """ 

`wx.``ColourDisplay`()[¶](#wx.ColourDisplay "Permalink to this definition")
Returns `True` if the display is colour, `False` otherwise.



Return type
*bool*





Note


Use of this function is not recommended in the new code as it only works for the primary display. Use *Display.GetDepth()* to retrieve the depth of the appropriate display and compare it with 1 instead.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def date2pydate(date) -> None:
    """ 

`wx.``date2pydate`(*date*)[¶](#wx.date2pydate "Permalink to this definition")
Convert a [`DateTime`](wx.DateTime.html#wx.DateTime "wx.DateTime") object to a Python datetime.




        Source: https://docs.wxpython.org/wx.functions.html
    """


def DateTimeFromDMY(day, month, year=DateTime.Inv_Year, hour=0, minute=0, second=0, millisecond=0) -> None:
    """ 

`wx.``DateTimeFromDMY`(*day*, *month*, *year=DateTime.Inv\_Year*, *hour=0*, *minute=0*, *second=0*, *millisecond=0*)[¶](#wx.DateTimeFromDMY "Permalink to this definition")
Compatibility wrapper for [`DateTime.FromDMY`](wx.DateTime.html#wx.DateTime.FromDMY "wx.DateTime.FromDMY")




        Source: https://docs.wxpython.org/wx.functions.html
    """


def DateTimeFromHMS(hour, minute=0, second=0, millisecond=0) -> None:
    """ 

`wx.``DateTimeFromHMS`(*hour*, *minute=0*, *second=0*, *millisecond=0*)[¶](#wx.DateTimeFromHMS "Permalink to this definition")
Compatibility wrapper for [`DateTime.FromHMS`](wx.DateTime.html#wx.DateTime.FromHMS "wx.DateTime.FromHMS")




        Source: https://docs.wxpython.org/wx.functions.html
    """


def DateTimeFromJDN(jdn) -> None:
    """ 

`wx.``DateTimeFromJDN`(*jdn*)[¶](#wx.DateTimeFromJDN "Permalink to this definition")
Compatibility wrapper for [`DateTime.FromJDN`](wx.DateTime.html#wx.DateTime.FromJDN "wx.DateTime.FromJDN")




        Source: https://docs.wxpython.org/wx.functions.html
    """


def DateTimeFromTimeT(timet) -> None:
    """ 

`wx.``DateTimeFromTimeT`(*timet*)[¶](#wx.DateTimeFromTimeT "Permalink to this definition")
Compatibility wrapper for [`DateTime.FromTimeT`](wx.DateTime.html#wx.DateTime.FromTimeT "wx.DateTime.FromTimeT")




        Source: https://docs.wxpython.org/wx.functions.html
    """


def DecToHex(*args, **kw) -> None:
    """ 

`wx.``DecToHex`(*\*args*, *\*\*kw*)[¶](#wx.DecToHex "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DecToHex** *(dec, buf)*


Convert decimal integer to 2-character hexadecimal string.



Parameters
* **dec** (*int*) – A number to be converted.
* **buf** (*wx.Char*) – A pointer to the buffer that receives hexadecimal string (not prefixed by `0x` ). This buffer should be large enough to hold at least 3 characters: 2 hexadecimal digits and the terminating null character.





Note


Returned string is composed of uppercase hexdecimal characters.





---

  



**DecToHex** *(dec)*


Convert decimal integer to 2-character hexadecimal string.



Parameters
**dec** (*int*) – A number to be converted.



Return type
`string`



Returns
String containing hexadecimal string, not prefixed by `0x` , composed of uppercase characters.






---

  



**DecToHex** *(dec, ch1, ch2)*


Returns 2 characters of hexadecimal representation of a given number.



Parameters
* **dec** (*int*) – A number to be converted.
* **ch1** (*int*) – Pointer to the variable that receives 1st hexadecimal character. It must not be `None`.
* **ch2** (*int*) – Pointer to the variable that receives 2nd hexadecimal character. It must not be `None`.





Note


Returned characters are uppercase.





---

  





        Source: https://docs.wxpython.org/wx.functions.html
    """


def DirSelector(message=DirSelectorPromptStr, default_path="", style=0, pos=DefaultPosition, parent=None) -> str:
    """ 

`wx.``DirSelector`(*message=DirSelectorPromptStr*, *default\_path=""*, *style=0*, *pos=DefaultPosition*, *parent=None*)[¶](#wx.DirSelector "Permalink to this definition")
Pops up a directory selector dialog.


The arguments have the same meaning as those of [`DirDialog.__init__`](wx.DirDialog.html#wx.DirDialog.__init__ "wx.DirDialog.__init__") . The message is displayed at the top, and the default\_path, if specified, is set as the initial selection.


The application must check for an empty return value (if the user pressed Cancel). For example:



```
selector = wx.DirSelector("Choose a folder")
if selector.strip():
    # Do something with the folder name
    print selector

```



Parameters
* **message** (*string*) –
* **default\_path** (*string*) –
* **style** (*long*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
`string`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def DisableAsserts() -> None:
    """ 

`wx.``DisableAsserts`()[¶](#wx.DisableAsserts "Permalink to this definition")
Disable the condition checks in the assertions.


This is the same as calling *wx.SetAssertHandler* with `None` handler.



New in version 2.9.0.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def DisplayDepth() -> int:
    """ 

`wx.``DisplayDepth`()[¶](#wx.DisplayDepth "Permalink to this definition")
Returns the depth of the display (a value of 1 denotes a monochrome display).



Return type
*int*





Note


Use of this function is not recommended in the new code as it only works for the primary display. Use *Display.GetDepth()* to retrieve the depth of the appropriate display instead.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def DisplaySize() -> tuple:
    """ 

`wx.``DisplaySize`()[¶](#wx.DisplaySize "Permalink to this definition")
Returns the display size in pixels.


Either of output pointers can be `None` if the caller is not interested in the corresponding value.



Return type
*tuple*



Returns
( *width*, *height* )





Note


Use of this function is not recommended in the new code as it only works for the primary display. Use [`wx.Display.GetGeometry`](wx.Display.html#wx.Display.GetGeometry "wx.Display.GetGeometry") to retrieve the size of the appropriate display instead.




See also


[`wx.GetDisplaySize`](#wx.GetDisplaySize "wx.GetDisplaySize") ,  [wx.Display](wx.Display.html#wx-display)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def DisplaySizeMM() -> tuple:
    """ 

`wx.``DisplaySizeMM`()[¶](#wx.DisplaySizeMM "Permalink to this definition")
Returns the display size in millimeters.


Either of output pointers can be `None` if the caller is not interested in the corresponding value.



Return type
*tuple*



Returns
( *width*, *height* )





See also


[`wx.GetDisplaySizeMM`](#wx.GetDisplaySizeMM "wx.GetDisplaySizeMM") ,  [wx.Display](wx.Display.html#wx-display)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def DumpWindow(window: 'Window') -> str:
    """ 

`wx.``DumpWindow`(*window*)[¶](#wx.DumpWindow "Permalink to this definition")
Return a string with human-readable platform-specific description of the window useful for diagnostic purposes.


The string returned from this function doesn’t have any fixed form and can vary between different wxWidgets ports and versions, but contains some useful description of the window and uniquely identifies it. This can be useful to include in debug or tracing messages.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Window pointer which is allowed to be `None`.



Return type
`string`





New in version 4.1/wxWidgets-3.1.6.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def EmptyBitmap(width, height, depth=BITMAP_SCREEN_DEPTH) -> None:
    """ 

`wx.``EmptyBitmap`(*width*, *height*, *depth=BITMAP\_SCREEN\_DEPTH*)[¶](#wx.EmptyBitmap "Permalink to this definition")
A compatibility wrapper for the wx.Bitmap(width, height, depth) constructor




        Source: https://docs.wxpython.org/wx.functions.html
    """


def EmptyBitmapRGBA(width, height, red=0, green=0, blue=0, alpha=0) -> None:
    """ 

`wx.``EmptyBitmapRGBA`(*width*, *height*, *red=0*, *green=0*, *blue=0*, *alpha=0*)[¶](#wx.EmptyBitmapRGBA "Permalink to this definition")
A compatibility wrapper for [`wx.Bitmap.FromRGBA`](wx.Bitmap.html#wx.Bitmap.FromRGBA "wx.Bitmap.FromRGBA")




        Source: https://docs.wxpython.org/wx.functions.html
    """


def EmptyIcon() -> None:
    """ 

`wx.``EmptyIcon`()[¶](#wx.EmptyIcon "Permalink to this definition")
A compatibility wrapper for the [`Icon`](wx.Icon.html#wx.Icon "wx.Icon") constructor




        Source: https://docs.wxpython.org/wx.functions.html
    """


def EmptyImage(width=0, height=0, clear=True) -> None:
    """ 

`wx.``EmptyImage`(*width=0*, *height=0*, *clear=True*)[¶](#wx.EmptyImage "Permalink to this definition")
A compatibility wrapper for the wx.Image(width, height) constructor




        Source: https://docs.wxpython.org/wx.functions.html
    """


def EnableTopLevelWindows(enable: bool=True) -> None:
    """ 

`wx.``EnableTopLevelWindows`(*enable=True*)[¶](#wx.EnableTopLevelWindows "Permalink to this definition")
This function enables or disables all top level windows.


It is used by [`wx.SafeYield`](#wx.SafeYield "wx.SafeYield") .



Parameters
**enable** (*bool*) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def EndBusyCursor() -> None:
    """ 

`wx.``EndBusyCursor`()[¶](#wx.EndBusyCursor "Permalink to this definition")
Changes the cursor back to the original cursor, for all windows in the application.


Use with [`wx.BeginBusyCursor`](#wx.BeginBusyCursor "wx.BeginBusyCursor") .



See also


[`wx.IsBusy`](#wx.IsBusy "wx.IsBusy") ,  [wx.BusyCursor](wx.BusyCursor.html#wx-busycursor)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def Execute(command, flags=EXEC_ASYNC, callback=None, env=None) -> int:
    """ 

`wx.``Execute`(*command*, *flags=EXEC\_ASYNC*, *callback=None*, *env=None*)[¶](#wx.Execute "Permalink to this definition")
Executes another program in Unix or Windows.


In the overloaded versions of this function, if *flags* parameter contains `EXEC_ASYNC` flag (the default), flow of control immediately returns. If it contains `EXEC_SYNC` , the current application waits until the other program has terminated.


In the case of synchronous execution, the return value is the exit code of the process (which terminates by the moment the function returns) and will be -1 if the process couldn’t be started and typically 0 if the process terminated successfully. Also, while waiting for the process to terminate, [`wx.Execute`](#wx.Execute "wx.Execute") will call [`wx.Yield`](#wx.Yield "wx.Yield") . Because of this, by default this function disables all application windows to avoid unexpected reentrancies which could result from the users interaction with the program while the child process is running. If you are sure that it is safe to not disable the program windows, you may pass `EXEC_NODISABLE` flag to prevent this automatic disabling from happening.


For asynchronous execution, however, the return value is the process id and zero value indicates that the command could not be executed. As an added complication, the return value of -1 in this case indicates that we didn’t launch a new process, but connected to the running one (this can only happen when using `DDE` under Windows for command execution). In particular, in this case only, the calling code will not get the notification about process termination.


If *callback* isn’t `None` and if execution is asynchronous, [`wx.Process.OnTerminate`](wx.Process.html#wx.Process.OnTerminate "wx.Process.OnTerminate") will be called when the process finishes. Specifying this parameter also allows you to redirect the standard input and/or output of the process being launched by calling [`wx.Process.Redirect`](wx.Process.html#wx.Process.Redirect "wx.Process.Redirect") .


Under Windows, when launching a console process its console is shown by default but hidden if its `IO` is redirected. Both of these default behaviours may be overridden: if `EXEC_HIDE_CONSOLE` is specified, the console will never be shown. If `EXEC_SHOW_CONSOLE` is used, the console will be shown even if the child process `IO` is redirected. Neither of these flags affect non-console Windows applications or does anything under the other systems.


Under Unix the flag `EXEC_MAKE_GROUP_LEADER` may be used to ensure that the new process is a group leader (this will create a new session if needed). Calling [`wx.Kill`](#wx.Kill "wx.Kill") passing `wx.KILL_CHILDREN` will kill this process as well as all of its children (except those which have started their own session). Under MSW, this flag can be used with console processes only and corresponds to the native `CREATE_NEW_PROCESS_GROUP` flag.


The `EXEC_NOEVENTS` flag prevents processing of any events from taking place while the child process is running. It should be only used for very short-lived processes as otherwise the application windows risk becoming unresponsive from the users point of view. As this flag only makes sense with `EXEC_SYNC` , `EXEC_BLOCK` equal to the sum of both of these flags is provided as a convenience.



Parameters
* **command** (*string*) – The command to execute and any parameters to pass to it as a single string, i.e. “emacs file.txt”.
* **flags** (*int*) – Must include either `wx.EXEC_ASYNC` or `wx.EXEC_SYNC` and can also include `wx.EXEC_SHOW_CONSOLE`, `wx.EXEC_HIDE_CONSOLE`, `wx.EXEC_MAKE_GROUP_LEADER` (in either case) or `wx.EXEC_NODISABLE` and `wx.EXEC_NOEVENTS` or `wx.EXEC_BLOCK`, which is equal to their combination, in `wx.EXEC_SYNC` case.
* **callback** ([*wx.Process*](wx.Process.html#wx.Process "wx.Process")) – An optional pointer to  [wx.Process](wx.Process.html#wx-process).
* **env** (*ExecuteEnv*) – An optional pointer to additional parameters for the child process, such as its initial working directory and environment variables. This parameter is available in wxWidgets 2.9.2 and later only.



Return type
*long*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def Exit() -> None:
    """ 

`wx.``Exit`()[¶](#wx.Exit "Permalink to this definition")
Exits application after calling `wx.App.OnExit` .


Should only be used in an emergency: normally the top-level frame should be deleted (after deleting all other frames) to terminate the application. See  [wx.CloseEvent](wx.CloseEvent.html#wx-closeevent) and  [wx.App](wx.App.html#wx-app).




        Source: https://docs.wxpython.org/wx.functions.html
    """


def FFont(pointSize, family, flags=FONTFLAG_DEFAULT, faceName="", encoding=FONTENCODING_DEFAULT) -> None:
    """ 

`wx.``FFont`(*pointSize*, *family*, *flags=FONTFLAG\_DEFAULT*, *faceName=""*, *encoding=FONTENCODING\_DEFAULT*)[¶](#wx.FFont "Permalink to this definition")


        Source: https://docs.wxpython.org/wx.functions.html
    """


def FileSelector(message, default_path="", default_filename="", default_extension="", wildcard=FileSelectorDefaultWildcardStr, flags=0, parent=None, x=DefaultCoord, y=DefaultCoord) -> str:
    """ 

`wx.``FileSelector`(*message*, *default\_path=""*, *default\_filename=""*, *default\_extension=""*, *wildcard=FileSelectorDefaultWildcardStr*, *flags=0*, *parent=None*, *x=DefaultCoord*, *y=DefaultCoord*)[¶](#wx.FileSelector "Permalink to this definition")
Pops up a file selector box.


In Windows, this is the common file selector dialog. In X, this is a file selector box with the same functionality. The path and filename are distinct elements of a full file pathname. If path is empty, the current directory will be used. If filename is empty, no default filename will be supplied. The wildcard determines what files are displayed in the file selector, and file extension supplies a type extension for the required filename. Flags may be a combination of `wx.FD_OPEN`, `wx.FD_SAVE`, `wx.FD_OVERWRITE_PROMPT` or `wx.FD_FILE_MUST_EXIST`.


Both the Unix and Windows versions implement a wildcard filter. Typing a filename containing wildcards (, ?) in the filename text item, and clicking on Ok, will result in only those files matching the pattern being displayed.


The wildcard may be a specification for multiple types of file with a description for each, such as:



```
wildcard = "BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif"

```


The application must check for an empty return value (the user pressed Cancel). For example:



```
filename = wx.FileSelector("Choose a file to open")

if filename.strip():
    # work with the file
    print filename

# else: cancelled by user

```



Parameters
* **message** (*string*) –
* **default\_path** (*string*) –
* **default\_filename** (*string*) –
* **default\_extension** (*string*) –
* **wildcard** (*string*) –
* **flags** (*int*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **x** (*int*) –
* **y** (*int*) –



Return type
`string`





Note


`wx.FD_MULTIPLE` can only be used with  [wx.FileDialog](wx.FileDialog.html#wx-filedialog) and not here since this function only returns a single file name.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def FileSelectorEx(message=FileSelectorPromptStr, default_path="", default_filename="", indexDefaultExtension=None, wildcard=FileSelectorDefaultWildcardStr, flags=0, parent=None, x=DefaultCoord, y=DefaultCoord) -> str:
    """ 

`wx.``FileSelectorEx`(*message=FileSelectorPromptStr*, *default\_path=""*, *default\_filename=""*, *indexDefaultExtension=None*, *wildcard=FileSelectorDefaultWildcardStr*, *flags=0*, *parent=None*, *x=DefaultCoord*, *y=DefaultCoord*)[¶](#wx.FileSelectorEx "Permalink to this definition")
An extended version of [`wx.FileSelector`](#wx.FileSelector "wx.FileSelector")



Parameters
* **message** (*string*) –
* **default\_path** (*string*) –
* **default\_filename** (*string*) –
* **indexDefaultExtension** (*int*) –
* **wildcard** (*string*) –
* **flags** (*int*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **x** (*int*) –
* **y** (*int*) –



Return type
`string`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def FindMenuItemId(frame, menuString, itemString) -> int:
    """ 

`wx.``FindMenuItemId`(*frame*, *menuString*, *itemString*)[¶](#wx.FindMenuItemId "Permalink to this definition")
Find a menu item identifier associated with the given frame’s menu bar.



Parameters
* **frame** ([*wx.Frame*](wx.Frame.html#wx.Frame "wx.Frame")) –
* **menuString** (*string*) –
* **itemString** (*string*) –



Return type
*int*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def FindWindowAtPoint(pt: Union[tuple[int, int], 'Point']) -> 'Window':
    """ 

`wx.``FindWindowAtPoint`(*pt*)[¶](#wx.FindWindowAtPoint "Permalink to this definition")
Find the deepest window at the given mouse position in screen coordinates, returning the window if found, or `None` if not.


This function takes child windows at the given position into account even if they are disabled. The hidden children are however skipped by it.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Window](wx.Window.html#wx-window)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def FindWindowAtPointer() -> tuple:
    """ 

`wx.``FindWindowAtPointer`()[¶](#wx.FindWindowAtPointer "Permalink to this definition")
Find the deepest window at the mouse pointer position, returning the window and current pointer position in screen coordinates.



Return type
*tuple*



Returns
(  [wx.Window](wx.Window.html#wx-window), *pt* )






        Source: https://docs.wxpython.org/wx.functions.html
    """


def FindWindowById(id, parent=None) -> 'Window':
    """ 

`wx.``FindWindowById`(*id*, *parent=None*)[¶](#wx.FindWindowById "Permalink to this definition")

> FindWindowById(id, parent=None) . Window
> 
> 
> Find the first window in the application with the given id. If parent
> is None, the search will start from all top-level frames and dialog
> boxes; if non-None, the search will be limited to the given window
> hierarchy. The search is recursive in both cases.



Return type
 [wx.Window](wx.Window.html#wx-window)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def FindWindowByLabel(label, parent=None) -> 'Window':
    """ 

`wx.``FindWindowByLabel`(*label*, *parent=None*)[¶](#wx.FindWindowByLabel "Permalink to this definition")
Find a window by its label. Depending on the type of window, the label may be a window title or panel item label. If *parent* is `None`, the search will start from all top-level frames and dialog boxes; if not `None`, the search will be limited to the given window hierarchy. The search is recursive in both cases.



Parameters
* **label** (*string*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
 [wx.Window](wx.Window.html#wx-window)





Deprecated


Replaced by [`wx.Window.FindWindowByLabel`](wx.Window.html#wx.Window.FindWindowByLabel "wx.Window.FindWindowByLabel") .





        Source: https://docs.wxpython.org/wx.functions.html
    """


def FindWindowByName(name, parent=None) -> 'Window':
    """ 

`wx.``FindWindowByName`(*name*, *parent=None*)[¶](#wx.FindWindowByName "Permalink to this definition")
Find a window by its name (as given in a window constructor or *Create* function call). If *parent* is `None`, the search will start from all top-level frames and dialog boxes; if not `None`, the search will be limited to the given window hierarchy. The search is recursive in both cases.


If no such named window is found, [`wx.FindWindowByLabel`](#wx.FindWindowByLabel "wx.FindWindowByLabel") is called.



Parameters
* **name** (*string*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
 [wx.Window](wx.Window.html#wx-window)





Deprecated


Replaced by [`wx.Window.FindWindowByName`](wx.Window.html#wx.Window.FindWindowByName "wx.Window.FindWindowByName") .





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetAccelFromString(label) -> None:
    """ 

`wx.``GetAccelFromString`(*label*)[¶](#wx.GetAccelFromString "Permalink to this definition")


        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetActiveWindow() -> 'Window':
    """ 

`wx.``GetActiveWindow`()[¶](#wx.GetActiveWindow "Permalink to this definition")
Gets the currently active window (implemented for MSW and GTK only currently, always returns `None` in the other ports).



Return type
 [wx.Window](wx.Window.html#wx-window)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetApp() -> 'App':
    """ 

`wx.``GetApp`()[¶](#wx.GetApp "Permalink to this definition")
Returns the current application object.



Return type
 [wx.AppConsole](wx.AppConsole.html#wx-appconsole)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetBatteryState() -> 'BatteryState':
    """ 

`wx.``GetBatteryState`()[¶](#wx.GetBatteryState "Permalink to this definition")
Returns battery state as one of `BATTERY_NORMAL_STATE` , `BATTERY_LOW_STATE` , `BATTERY_CRITICAL_STATE` , `BATTERY_SHUTDOWN_STATE` or `BATTERY_UNKNOWN_STATE` .



> `BATTERY_UNKNOWN_STATE` is also the default on platforms where this feature is not implemented (currently everywhere but MS Windows).



Return type
 [wx.BatteryState](wx.BatteryState.enumeration.html#wx-batterystate)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetClientDisplayRect() -> 'Rect':
    """ 

`wx.``GetClientDisplayRect`()[¶](#wx.GetClientDisplayRect "Permalink to this definition")
Returns the dimensions of the work area on the display.


On Windows this means the area not covered by the taskbar, etc. Other platforms are currently defaulting to the whole display until a way is found to provide this info for all window managers, etc.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)





See also


 [wx.Display](wx.Display.html#wx-display)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetColourFromUser(parent, colInit, caption="", data=None) -> 'Colour':
    """ 

`wx.``GetColourFromUser`(*parent*, *colInit*, *caption=""*, *data=None*)[¶](#wx.GetColourFromUser "Permalink to this definition")
Shows the colour selection dialog and returns the colour selected by user or invalid colour (use [`wx.Colour.IsOk`](wx.Colour.html#wx.Colour.IsOk "wx.Colour.IsOk") to test whether a colour is valid) if the dialog was cancelled.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window for the colour selection dialog.
* **colInit** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – If given, this will be the colour initially selected in the dialog.
* **caption** (*string*) – If given, this will be used for the dialog caption.
* **data** ([*wx.ColourData*](wx.ColourData.html#wx.ColourData "wx.ColourData")) – Optional object storing additional colour dialog settings, such as custom colours. If none is provided the same settings as the last time are used.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetCpuArchitectureName() -> str:
    """ 

`wx.``GetCpuArchitectureName`()[¶](#wx.GetCpuArchitectureName "Permalink to this definition")
Returns the `CPU` architecture name.


This can be, for example, “x86\_64”, “arm64”, or “i86pc”. The name for the same `CPU` running on the same hardware can vary across operating systems.


The returned string may be empty if the `CPU` architecture couldn’t be recognized.



Return type
`string`





New in version 4.1/wxWidgets-3.1.5.




See also


[`wx.GetNativeCpuArchitectureName`](#wx.GetNativeCpuArchitectureName "wx.GetNativeCpuArchitectureName")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetDisplayPPI() -> 'Size':
    """ 

`wx.``GetDisplayPPI`()[¶](#wx.GetDisplayPPI "Permalink to this definition")
Returns the display resolution in pixels per inch.


The `x` component of the returned  [wx.Size](wx.Size.html#wx-size) object contains the horizontal resolution and the `y` one – the vertical resolution.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.0.




Note


Use of this function is not recommended in the new code as it only works for the primary display. Use [`wx.Display.GetPPI`](wx.Display.html#wx.Display.GetPPI "wx.Display.GetPPI") to retrieve the resolution of the appropriate display instead.




See also


 [wx.Display](wx.Display.html#wx-display)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetDisplaySize() -> 'Size':
    """ 

`wx.``GetDisplaySize`()[¶](#wx.GetDisplaySize "Permalink to this definition")
Returns the display size in pixels.



Return type
 [wx.Size](wx.Size.html#wx-size)





Note


Use of this function is not recommended in the new code as it only works for the primary display. Use [`wx.Display.GetGeometry`](wx.Display.html#wx.Display.GetGeometry "wx.Display.GetGeometry") to retrieve the size of the appropriate display instead.




See also


 [wx.Display](wx.Display.html#wx-display)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetDisplaySizeMM() -> 'Size':
    """ 

`wx.``GetDisplaySizeMM`()[¶](#wx.GetDisplaySizeMM "Permalink to this definition")
Returns the display size in millimeters.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


 [wx.Display](wx.Display.html#wx-display)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetEmailAddress() -> str:
    """ 

`wx.``GetEmailAddress`()[¶](#wx.GetEmailAddress "Permalink to this definition")
Copies the user’s email address into the supplied buffer, by concatenating the values returned by [`wx.GetFullHostName`](#wx.GetFullHostName "wx.GetFullHostName") and [`wx.GetUserId`](#wx.GetUserId "wx.GetUserId") .



Return type
`string`



Returns
`True` if successful, `False` otherwise.






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetFontFromUser(parent, fontInit, caption="") -> 'Font':
    """ 

`wx.``GetFontFromUser`(*parent*, *fontInit*, *caption=""*)[¶](#wx.GetFontFromUser "Permalink to this definition")
Shows the font selection dialog and returns the font selected by user or invalid font (use [`wx.Font.IsOk`](wx.Font.html#wx.Font.IsOk "wx.Font.IsOk") to test whether a font is valid) if the dialog was cancelled.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window for the font selection dialog.
* **fontInit** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – If given, this will be the font initially selected in the dialog.
* **caption** (*string*) – If given, this will be used for the dialog caption.



Return type
 [wx.Font](wx.Font.html#wx-font)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetFullHostName() -> str:
    """ 

`wx.``GetFullHostName`()[¶](#wx.GetFullHostName "Permalink to this definition")
Returns the `FQDN` (fully qualified domain host name) or an empty string on error.



Return type
`string`





See also


[`wx.GetHostName`](#wx.GetHostName "wx.GetHostName")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetHomeDir() -> str:
    """ 

`wx.``GetHomeDir`()[¶](#wx.GetHomeDir "Permalink to this definition")
Return the (current) user’s home directory.



Return type
`string`





See also


[`wx.GetUserHome`](#wx.GetUserHome "wx.GetUserHome") ,  [wx.StandardPaths](wx.StandardPaths.html#wx-standardpaths)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetHostName() -> str:
    """ 

`wx.``GetHostName`()[¶](#wx.GetHostName "Permalink to this definition")
Copies the current host machine’s name into the supplied buffer.


Please note that the returned name is *not* fully qualified, i.e. it does not include the domain name.



Return type
`string`



Returns
The hostname if successful or an empty string otherwise.





See also


[`wx.GetFullHostName`](#wx.GetFullHostName "wx.GetFullHostName")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetKeyState(key: KeyCode) -> bool:
    """ 

`wx.``GetKeyState`(*key*)[¶](#wx.GetKeyState "Permalink to this definition")
For normal keys, returns `True` if the specified key is currently down.


For togglable keys (Caps Lock, Num Lock and Scroll Lock), returns `True` if the key is toggled such that its `LED` indicator is lit. There is currently no way to test whether togglable keys are up or down.


Even though there are virtual key codes defined for mouse buttons, they cannot be used with this function currently.


In wxGTK, this function can be only used with modifier keys ( `WXK_ALT` , `WXK_CONTROL` and `WXK_SHIFT` ) when not using X11 backend currently.



Parameters
**key** ([*KeyCode*](wx.KeyCode.enumeration.html "KeyCode")) – 



Return type
*bool*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetLibraryVersionInfo() -> 'VersionInfo':
    """ 

`wx.``GetLibraryVersionInfo`()[¶](#wx.GetLibraryVersionInfo "Permalink to this definition")
Get wxWidgets version information.



Return type
 [wx.VersionInfo](wx.VersionInfo.html#wx-versioninfo)





New in version 2.9.2.




See also


 [wx.VersionInfo](wx.VersionInfo.html#wx-versioninfo)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetLocale() -> 'Locale':
    """ 

`wx.``GetLocale`()[¶](#wx.GetLocale "Permalink to this definition")
Get the current locale object (note that it may be `None`!)



Return type
 [wx.Locale](wx.Locale.html#wx-locale)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetMousePosition() -> 'Point':
    """ 

`wx.``GetMousePosition`()[¶](#wx.GetMousePosition "Permalink to this definition")
Returns the mouse position in screen coordinates.



Return type
 [wx.Point](wx.Point.html#wx-point)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetMouseState() -> 'MouseState':
    """ 

`wx.``GetMouseState`()[¶](#wx.GetMouseState "Permalink to this definition")
Returns the current state of the mouse.


Returns a  [wx.MouseState](wx.MouseState.html#wx-mousestate) instance that contains the current position of the mouse pointer in screen coordinates, as well as boolean values indicating the up/down status of the mouse buttons and the modifier keys.



Return type
 [wx.MouseState](wx.MouseState.html#wx-mousestate)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetNativeCpuArchitectureName() -> str:
    """ 

`wx.``GetNativeCpuArchitectureName`()[¶](#wx.GetNativeCpuArchitectureName "Permalink to this definition")
In some situations the current process and native `CPU` architecture may be different.


This returns the native `CPU` architecture regardless of the current process `CPU` architecture.


Common examples for `CPU` architecture differences are the following:


* Win32 process in x64 Windows (WoW)
* Win32 or x64 process on `ARM64` Windows (WoW64)
* x86\_64 process on `ARM64` macOS (Rosetta 2)


The returned string may be empty if the `CPU` architecture couldn’t be recognized.



Return type
`string`





New in version 4.1/wxWidgets-3.1.6.




See also


[`wx.GetCpuArchitectureName`](#wx.GetCpuArchitectureName "wx.GetCpuArchitectureName")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetNumberFromUser(message, prompt, caption, value, min=0, max=100, parent=None, pos=DefaultPosition) -> int:
    """ 

`wx.``GetNumberFromUser`(*message*, *prompt*, *caption*, *value*, *min=0*, *max=100*, *parent=None*, *pos=DefaultPosition*)[¶](#wx.GetNumberFromUser "Permalink to this definition")
Shows a dialog asking the user for numeric input.


The dialogs title is set to `caption` , it contains a (possibly) multiline `message` above the single line `prompt` and the zone for entering the number.


The number entered must be in the range `min` to `max` (both of which should be positive) and `value` is the initial value of it. If the user enters an invalid value, it is forced to fall into the specified range. If the user cancels the dialog, the function returns -1. If it is important to distinguish between cancelling the dialog and actually entering -1 in it, i.e. if -1 is a valid input value, this convenience function can’t be used and  [wx.NumberEntryDialog](wx.NumberEntryDialog.html#wx-numberentrydialog) should be used directly instead.


Dialog is centered on its `parent` unless an explicit position is given in `pos` .



Parameters
* **message** (*string*) –
* **prompt** (*string*) –
* **caption** (*string*) –
* **value** (*long*) –
* **min** (*long*) –
* **max** (*long*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –



Return type
*long*





See also


 [wx.NumberEntryDialog](wx.NumberEntryDialog.html#wx-numberentrydialog)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetOsDescription() -> str:
    """ 

`wx.``GetOsDescription`()[¶](#wx.GetOsDescription "Permalink to this definition")
Returns the string containing the description of the current platform in a user-readable form.


For example, this function may return strings like “Windows 10 (build 10240), 64-bit edition” or “Linux 4.1.4 i386”.



Return type
`string`





See also


[`wx.GetOsVersion`](#wx.GetOsVersion "wx.GetOsVersion")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetOsVersion(micro: Optional[int]=None) -> tuple:
    """ 

`wx.``GetOsVersion`(*micro=None*)[¶](#wx.GetOsVersion "Permalink to this definition")
Gets the version and the operating system `ID` for currently running OS.


The returned OperatingSystemId value can be used for a basic categorization of the OS family; the major, minor, and micro version numbers allows detecting a specific system.


If on Unix-like systems the version can’t be detected all three version numbers will have a value of -1.


On systems where only the micro version can’t be detected or doesn’t make sense, it will have a value of 0.


For Unix-like systems ( `OS_UNIX` ) the major, minor, and micro version integers will contain the kernel’s major, minor, and micro version numbers (as returned by the ‘uname -r’ command); e.g. “4”, “1”, and “4” if the machine is using kernel 4.1.4.


For macOS systems ( `OS_MAC` ) the major and minor version integers are the natural version numbers associated with the OS; e.g. “10”, “11” and “2” if the machine is using macOS El Capitan 10.11.2.


For Windows-like systems ( `OS_WINDOWS` ) the major, minor and micro (equal to the build number) version integers will contain the following values:









| Windows OS name | Major version | Minor version | Build number |
| --- | --- | --- | --- |
| Windows 11 | 10 | 0 | >= 22000 |
| Windows Server 2022 | 10 | 0 | >= 22000 |
| Windows 10 | 10 | 0 |  |
| Windows Server 2016 | 10 | 0 |  |
| Windows 8.1 | 6 | 3 |  |
| Windows Server 2012 `R2` | 6 | 3 |  |
| Windows 8 | 6 | 2 |  |
| Windows Server 2012 | 6 | 2 |  |
| Windows 7 | 6 | 1 |  |
| Windows 2008 `R2` | 6 | 1 |  |
| Windows Vista | 6 | 0 |  |
| Windows Server 2008 | 6 | 0 |  |
| Windows Server 2003 `R2` | 5 | 2 |  |
| Windows Server 2003 | 5 | 2 |  |
| Windows XP | 5 | 1 |  |



  


See the`MSDN <<http://msdn.microsoft.com/en-us/library/ms724832(VS.85).aspx>>`\_ for more info about the values above.



Parameters
**micro** (*int*) – 



Return type
*tuple*



Returns
(  [wx.OperatingSystemId](wx.OperatingSystemId.enumeration.html#wx-operatingsystemid), *major*, *minor* )





See also


[`wx.GetOsDescription`](#wx.GetOsDescription "wx.GetOsDescription") , `PlatformInfo`





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetPasswordFromUser(message, caption=GetPasswordFromUserPromptStr, default_value="", parent=None, x=DefaultCoord, y=DefaultCoord, centre=True) -> str:
    """ 

`wx.``GetPasswordFromUser`(*message*, *caption=GetPasswordFromUserPromptStr*, *default\_value=""*, *parent=None*, *x=DefaultCoord*, *y=DefaultCoord*, *centre=True*)[¶](#wx.GetPasswordFromUser "Permalink to this definition")
Similar to [`wx.GetTextFromUser`](#wx.GetTextFromUser "wx.GetTextFromUser") but the text entered in the dialog is not shown on screen but replaced with stars.


This is intended to be used for entering passwords as the function name implies.



Parameters
* **message** (*string*) –
* **caption** (*string*) –
* **default\_value** (*string*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **x** (*int*) –
* **y** (*int*) –
* **centre** (*bool*) –



Return type
`string`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetPowerType() -> 'PowerType':
    """ 

`wx.``GetPowerType`()[¶](#wx.GetPowerType "Permalink to this definition")
Returns the type of power source as one of `POWER_SOCKET` , `POWER_BATTERY` or `POWER_UNKNOWN` .



> `POWER_UNKNOWN` is also the default on platforms where this feature is not implemented (currently everywhere but MS Windows).



Return type
 [wx.PowerType](wx.PowerType.enumeration.html#wx-powertype)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetProcessId() -> int:
    """ 

`wx.``GetProcessId`()[¶](#wx.GetProcessId "Permalink to this definition")
Returns the number uniquely identifying the current process in the system.


If an error occurs, 0 is returned.



Return type
*int*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetSingleChoice(*args, **kw) -> str:
    """ 

`wx.``GetSingleChoice`(*\*args*, *\*\*kw*)[¶](#wx.GetSingleChoice "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetSingleChoice** *(message, caption, aChoices, parent=None, x=DefaultCoord, y=DefaultCoord, centre=True, width=CHOICE\_WIDTH, height=CHOICE\_HEIGHT, initialSelection=0)*


Pops up a dialog box containing a message, OK/Cancel buttons and a single-selection listbox.


The user may choose an item and press `wx.OK` to return a string or Cancel to return the empty string. Use *wx.GetSingleChoiceIndex* if empty string is a valid choice and if you want to be able to detect pressing Cancel reliably.


You may pass the list of strings to choose from either using `choices` which is an array of *n* strings for the listbox or by using a single `aChoices` parameter of type list of strings .


If `centre` is `True`, the message text (which may include new line characters) is centred; if `False`, the message is left-justified.




---

  



**GetSingleChoice** *(message, caption, choices, initialSelection, parent=None)*



Parameters
* **message** (*string*) –
* **caption** (*string*) –
* **choices** (*list of strings*) –
* **initialSelection** (*int*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
`string`






---

  





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetStockLabel(id, flags=STOCK_WITH_MNEMONIC) -> str:
    """ 

`wx.``GetStockLabel`(*id*, *flags=STOCK\_WITH\_MNEMONIC*)[¶](#wx.GetStockLabel "Permalink to this definition")
Returns label that should be used for given *id* element.



Parameters
* **id** (*wx.WindowID*) – Given id of the  [wx.MenuItem](wx.MenuItem.html#wx-menuitem),  [wx.Button](wx.Button.html#wx-button),  [wx.ToolBar](wx.ToolBar.html#wx-toolbar) tool, etc.
* **flags** (*long*) – Combination of the elements of StockLabelQueryFlag.



Return type
`string`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetTextFromUser(message, caption=GetTextFromUserPromptStr, default_value="", parent=None, x=DefaultCoord, y=DefaultCoord, centre=True) -> str:
    """ 

`wx.``GetTextFromUser`(*message*, *caption=GetTextFromUserPromptStr*, *default\_value=""*, *parent=None*, *x=DefaultCoord*, *y=DefaultCoord*, *centre=True*)[¶](#wx.GetTextFromUser "Permalink to this definition")
Pop up a dialog box with title set to *caption*, `message` , and a `default_value` .


The user may type in text and press `wx.OK` to return this text, or press Cancel to return the empty string.


If `centre` is `True`, the message text (which may include new line characters) is centred; if `False`, the message is left-justified.


This function is a wrapper around  [wx.TextEntryDialog](wx.TextEntryDialog.html#wx-textentrydialog) and while it is usually more convenient to use, using the dialog directly is more flexible, e.g. it allows you to specify the `TE_MULTILINE` to allow the user enter multiple lines of text while this function is limited to single line entry only.



Parameters
* **message** (*string*) –
* **caption** (*string*) –
* **default\_value** (*string*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **x** (*int*) –
* **y** (*int*) –
* **centre** (*bool*) –



Return type
`string`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetTopLevelParent(window: 'Window') -> 'Window':
    """ 

`wx.``GetTopLevelParent`(*window*)[¶](#wx.GetTopLevelParent "Permalink to this definition")
Returns the first top level parent of the given window, or in other words, the frame or dialog containing it, or `None`.


Notice that if *window* is itself already a `TLW`, it is returned directly.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.Window](wx.Window.html#wx-window)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetTopLevelWindows() -> 'WindowList':
    """ 

`wx.``GetTopLevelWindows`()[¶](#wx.GetTopLevelWindows "Permalink to this definition")
Returns a list-like object of the the application’s top-level windows, (frames,dialogs, etc.)



Return type
`WindowList`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetTranslation(*args, **kw) -> str:
    """ 

`wx.``GetTranslation`(*\*args*, *\*\*kw*)[¶](#wx.GetTranslation "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetTranslation** *(string, domain=””, context=””)*


This function returns the translation of `string` in the current `locale()` .


If the string is not found in any of the loaded message catalogs (see *Internationalization* ), the original string is returned. If you enable logging of trace messages with “i18n” mask (using [`wx.Log.AddTraceMask`](wx.Log.html#wx.Log.AddTraceMask "wx.Log.AddTraceMask") ) and debug logging is enabled (see *Debugging* ), a message is also logged in this case – which helps to find the strings which were not yet translated.


If *domain* is specified then only that domain/catalog is searched for a matching string. As this function is used very often, an alternative (and also common in Unix world) syntax is provided: the *wx.\_* macro is defined to do the same thing as [`wx.GetTranslation`](#wx.GetTranslation "wx.GetTranslation") .


If *context* is not empty (notice that this argument is only available starting from wxWidgets 3.1.1), item translation is looked up in the specified context. This allows having different translations for the same string appearing in different contexts, e.g. it may be necessary to translate the same English “Open” verb differently depending on the object it applies to. To do this, you need to use `msgctxt` in the source message catalog and specify different contexts for the different occurrences of the string and then use the same contexts in the calls to this function (or `GETTEXT_IN_CONTEXT` or `GETTEXT_IN_CONTEXT_PLURAL` macros).


This function is thread-safe.



Parameters
* **string** (*string*) –
* **domain** (*string*) –
* **context** (*string*) –



Return type
`string`





Note


This function is not suitable for literal strings using `T` macro since this macro is not recognised by `xgettext` , and so such strings are not extracted to the message catalog. Instead, use the *wx.\_* and `PLURAL` macro for all literal strings.




See also


GetTranslation(const String&, String&, unsigned, String&)





---

  



**GetTranslation** *(string, plural, n, domain=””, context=””)*


This is an overloaded version of GetTranslation(const String&, String&), please see its documentation for general information.


This version is used when retrieving translation of string that has different singular and plural forms in English or different plural forms in some other language. Like GetTranslation(const String&,const String&), the `string` parameter must contain the singular form of the string to be converted and is used as the key for the search in the catalog. The *plural* parameter is the plural form (in English). The parameter *n* is used to determine the plural form. If no message catalog is found, `string` is returned if “n == 1”, otherwise *plural* is returned.


See `GNU` gettext Manual for additional information on plural forms handling: <http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms> For a shorter alternative see the `PLURAL` macro.


This function is thread-safe.



Parameters
* **string** (*string*) –
* **plural** (*string*) –
* **n** –
* **domain** (*string*) –
* **context** (*string*) –



Return type
`string`






---

  





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetUserHome(user: str="") -> str:
    """ 

`wx.``GetUserHome`(*user=""*)[¶](#wx.GetUserHome "Permalink to this definition")
Returns the home directory for the given user.


If the *user* is empty (default value), this function behaves like [`wx.GetHomeDir`](#wx.GetHomeDir "wx.GetHomeDir") (i.e. returns the current user home directory).


If the home directory couldn’t be determined, an empty string is returned.



Parameters
**user** (*string*) – 



Return type
`string`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetUserId() -> str:
    """ 

`wx.``GetUserId`()[¶](#wx.GetUserId "Permalink to this definition")
This function returns the “user id” also known as “login name” under Unix (i.e.


something like “jsmith”). It uniquely identifies the current user (on this system). Under Windows or NT, this function first looks in the environment variables `USER` and `LOGNAME`; if neither of these is found, the entry **UserId** in the **wxWidgets** section of the WIN.INI file is tried.



Return type
`string`



Returns
The login name if successful or an empty string otherwise.





See also


[`wx.GetUserName`](#wx.GetUserName "wx.GetUserName")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def GetUserName() -> str:
    """ 

`wx.``GetUserName`()[¶](#wx.GetUserName "Permalink to this definition")
This function returns the full user name (something like “Mr. John Smith”).


Under Windows or NT, this function looks for the entry UserName in the wxWidgets section of the WIN.INI file. If PenWindows is running, the entry Current in the section User of the PENWIN.INI file is used.



Return type
`string`



Returns
The full user name if successful or an empty string otherwise.





See also


[`wx.GetUserId`](#wx.GetUserId "wx.GetUserId")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def HandleFatalExceptions(doIt: bool=True) -> bool:
    """ 

`wx.``HandleFatalExceptions`(*doIt=True*)[¶](#wx.HandleFatalExceptions "Permalink to this definition")
If *doIt* is `True`, the fatal exceptions (also known as general protection faults under Windows or segmentation violations in the Unix world) will be caught and passed to `wx.App.OnFatalException` .


By default, i.e. before this function is called, they will be handled in the normal way which usually just means that the application will be terminated. Calling [`wx.HandleFatalExceptions`](#wx.HandleFatalExceptions "wx.HandleFatalExceptions") with *doIt* equal to `False` will restore this default behaviour.


Notice that this function is only available if `USE_ON_FATAL_EXCEPTION` is 1 and under Windows platform this requires a compiler with support for `SEH` (structured exception handling) which currently means only Microsoft Visual C++.



Parameters
**doIt** (*bool*) – 



Return type
*bool*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def HelpController(parentWindow=None) -> None:
    """ 

`wx.``HelpController`(*parentWindow=None*)[¶](#wx.HelpController "Permalink to this definition")
Rather than being an alias for some class, the Python version of
`HelpController` is a factory function that creates and returns an
instance of the best Help Controller for the platform.




        Source: https://docs.wxpython.org/wx.functions.html
    """


def HexToDec(*args, **kw) -> int:
    """ 

`wx.``HexToDec`(*\*args*, *\*\*kw*)[¶](#wx.HexToDec "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**HexToDec** *(buf)*


Convert 2-character hexadecimal string to decimal integer.



Parameters
**buf** (*string*) – String containing uppercase hexadecimal characters, not prefixed by `0x` . Its length must be at least 2 characters. If it is longer than 2 characters, only first two will be converted to the number.



Return type
*int*



Returns
An integer number between 0 and 255 that is equivalent to the number in *buf*, or `-1` if *buf* is not a hexadecimal string.






---

  



**HexToDec** *(buf)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**buf** (*int*) – 



Return type
*int*






---

  





        Source: https://docs.wxpython.org/wx.functions.html
    """


def ImageFromBitmap(bitmap) -> None:
    """ 

`wx.``ImageFromBitmap`(*bitmap*)[¶](#wx.ImageFromBitmap "Permalink to this definition")
Create a [`Image`](wx.Image.html#wx.Image "wx.Image") from a [`wx.Bitmap`](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")




        Source: https://docs.wxpython.org/wx.functions.html
    """


def ImageFromBuffer(width, height, dataBuffer, alphaBuffer=None) -> None:
    """ 

`wx.``ImageFromBuffer`(*width*, *height*, *dataBuffer*, *alphaBuffer=None*)[¶](#wx.ImageFromBuffer "Permalink to this definition")
Creates a [`Image`](wx.Image.html#wx.Image "wx.Image") from the data in *dataBuffer*. The *dataBuffer*
parameter must be a Python object that implements the buffer interface,
such as a string, array, etc. The *dataBuffer* object is expected to
contain a series of RGB bytes and be width\*height\*3 bytes long. A buffer
object can optionally be supplied for the image’s alpha channel data, and
it is expected to be width\*height bytes long.


The [`Image`](wx.Image.html#wx.Image "wx.Image") will be created with its data and alpha pointers initialized
to the memory address pointed to by the buffer objects, thus saving the
time needed to copy the image data from the buffer object to the [`Image`](wx.Image.html#wx.Image "wx.Image").
While this has advantages, it also has the shoot-yourself-in-the-foot
risks associated with sharing a C pointer between two objects.


To help alleviate the risk a reference to the data and alpha buffer
objects are kept with the [`Image`](wx.Image.html#wx.Image "wx.Image"), so that they won’t get deleted until
after the wx.Image is deleted. However please be aware that it is not
guaranteed that an object won’t move its memory buffer to a new location
when it needs to resize its contents. If that happens then the [`Image`](wx.Image.html#wx.Image "wx.Image")
will end up referring to an invalid memory location and could cause the
application to crash. Therefore care should be taken to not manipulate
the objects used for the data and alpha buffers in a way that would cause
them to change size.




        Source: https://docs.wxpython.org/wx.functions.html
    """


def ImageFromData(width, height, data) -> None:
    """ 

`wx.``ImageFromData`(*width*, *height*, *data*)[¶](#wx.ImageFromData "Permalink to this definition")
Compatibility wrapper for creating an image from RGB data




        Source: https://docs.wxpython.org/wx.functions.html
    """


def ImageFromDataWithAlpha(width, height, data, alpha) -> None:
    """ 

`wx.``ImageFromDataWithAlpha`(*width*, *height*, *data*, *alpha*)[¶](#wx.ImageFromDataWithAlpha "Permalink to this definition")
Compatibility wrapper for creating an image from RGB and Alpha data




        Source: https://docs.wxpython.org/wx.functions.html
    """


def ImageFromStream(stream, type=BITMAP_TYPE_ANY, index=-1) -> None:
    """ 

`wx.``ImageFromStream`(*stream*, *type=BITMAP\_TYPE\_ANY*, *index=-1*)[¶](#wx.ImageFromStream "Permalink to this definition")
Load an image from a stream (file-like object)




        Source: https://docs.wxpython.org/wx.functions.html
    """


def InfoMessageBox(parent: 'Window') -> None:
    """ 

`wx.``InfoMessageBox`(*parent*)[¶](#wx.InfoMessageBox "Permalink to this definition")
Shows a message box with the information about the wxWidgets build used, including its version, most important build parameters and the version of the underlying GUI toolkit.


This is mainly used for diagnostic purposes and can be invoked by Ctrl-Alt-middle clicking on any  [wx.Window](wx.Window.html#wx-window) which doesn’t otherwise handle this event.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 





New in version 2.9.0.




See also


[`wx.GetLibraryVersionInfo`](#wx.GetLibraryVersionInfo "wx.GetLibraryVersionInfo")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def InitAllImageHandlers() -> None:
    """ 

`wx.``InitAllImageHandlers`()[¶](#wx.InitAllImageHandlers "Permalink to this definition")
Initializes all available image handlers.


This function calls [`wx.Image.AddHandler`](wx.Image.html#wx.Image.AddHandler "wx.Image.AddHandler") for all the available image handlers (see [Available image handlers](wx.Image.html#wx-image) for the full list). Calling it is the simplest way to initialize  [wx.Image](wx.Image.html#wx-image) but it creates and registers even the handlers your program may not use. If you want to avoid the overhead of doing this you need to call [`wx.Image.AddHandler`](wx.Image.html#wx.Image.AddHandler "wx.Image.AddHandler") manually just for the handlers that you do want to use.



See also


 [wx.Image](wx.Image.html#wx-image),  [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def IntersectRect(r1, r2) -> Any:
    """ 

`wx.``IntersectRect`(*r1*, *r2*)[¶](#wx.IntersectRect "Permalink to this definition")

> Calculate and return the intersection of r1 and r2. Returns None if there
> is no intersection.



Return type
*PyObject*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def IsBusy() -> bool:
    """ 

`wx.``IsBusy`()[¶](#wx.IsBusy "Permalink to this definition")
Returns `True` if between two [`wx.BeginBusyCursor`](#wx.BeginBusyCursor "wx.BeginBusyCursor") and [`wx.EndBusyCursor`](#wx.EndBusyCursor "wx.EndBusyCursor") calls.



Return type
*bool*





See also


 [wx.BusyCursor](wx.BusyCursor.html#wx-busycursor).





        Source: https://docs.wxpython.org/wx.functions.html
    """


def IsDragResultOk(res: DragResult) -> bool:
    """ 

`wx.``IsDragResultOk`(*res*)[¶](#wx.IsDragResultOk "Permalink to this definition")
Returns `True` if res indicates that something was done during a DnD operation, i.e.


is neither error nor none nor cancel.



Parameters
**res** ([*DragResult*](wx.DragResult.enumeration.html "DragResult")) – 



Return type
*bool*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def IsMainThread() -> bool:
    """ 

`wx.``IsMainThread`()[¶](#wx.IsMainThread "Permalink to this definition")
Returns `True` if the current thread is what considers the GUI thread.



Return type
*bool*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def IsPlatform64Bit() -> bool:
    """ 

`wx.``IsPlatform64Bit`()[¶](#wx.IsPlatform64Bit "Permalink to this definition")
Returns `True` if the operating system the program is running under is 64 bit.


The check is performed at run-time and may differ from the value available at compile-time (at compile-time you can just check if `sizeof(void*) == 8` ) since the program could be running in emulation mode or in a mixed 32/64 bit system.



Return type
*bool*





Note


This function is not 100% reliable on some systems given the fact that there isn’t always a standard way to do a reliable check on the OS bitness.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def IsPlatformLittleEndian() -> bool:
    """ 

`wx.``IsPlatformLittleEndian`()[¶](#wx.IsPlatformLittleEndian "Permalink to this definition")
Returns `True` if the current platform is little endian (instead of big endian).


The check is performed at run-time.



Return type
*bool*





See also


Byte Order Functions and Macros





        Source: https://docs.wxpython.org/wx.functions.html
    """


def IsRunningUnderWine() -> bool:
    """ 

`wx.``IsRunningUnderWine`()[¶](#wx.IsRunningUnderWine "Permalink to this definition")
Returns `True` only for MSW programs running under Wine.


This function can be used to check for some functionality not implemented when using Wine.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.6.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def Kill(pid, sig=SIGTERM, rc=None, flags=KILL_NOCHILDREN) -> int:
    """ 

`wx.``Kill`(*pid*, *sig=SIGTERM*, *rc=None*, *flags=KILL\_NOCHILDREN*)[¶](#wx.Kill "Permalink to this definition")
Equivalent to the Unix kill function: send the given signal *sig* to the process with `PID` *pid*.


The valid signal values are:



```
           # Signal enumeration

           wx.SIGNONE  # verify if the process exists under Unix
           wx.SIGHUP
           wx.SIGINT
           wx.SIGQUIT
           wx.SIGILL
           wx.SIGTRAP
           wx.SIGABRT
           wx.SIGEMT
           wx.SIGFPE
           wx.SIGKILL  # forcefully kill, dangerous!
           wx.SIGBUS
           wx.SIGSEGV
           wx.SIGSYS
           wx.SIGPIPE
           wx.SIGALRM
           wx.SIGTERM  # terminate the process gently



``SIGNONE`` ,   ``SIGKILL``   and   ``SIGTERM``   have the same meaning under both Unix and Windows but all the other signals are equivalent to   ``SIGTERM``   under Windows. Moreover, under Windows,   ``SIGTERM``   is implemented by posting a message to the application window, so it only works if the application does have windows. If it doesn't, as is notably always the case for the console applications, you need to use   ``SIGKILL``   to actually kill the process. Of course, this doesn't allow the process to shut down gracefully and so should be avoided if possible.

```


Returns 0 on success, -1 on failure. If the *rc* parameter is not `None`, it will be filled with a value from the `KillError` enum:



```
# KillError enumeration

wx.KILL_OK             # no error
wx.KILL_BAD_SIGNAL     # no such signal
wx.KILL_ACCESS_DENIED  # permission denied
wx.KILL_NO_PROCESS     # no such process
wx.KILL_ERROR          # another, unspecified error

```


The *flags* parameter can be `wx.KILL_NOCHILDREN` (the default), or `wx.KILL_CHILDREN`, in which case the child processes of this process will be killed too. Note that under Unix, for `wx.KILL_CHILDREN` to work you should have created the process by passing `wx.EXEC_MAKE_GROUP_LEADER` to [`wx.Execute`](#wx.Execute "wx.Execute") .



Parameters
* **pid** (*long*) –
* **sig** ([*Signal*](wx.Signal.enumeration.html "Signal")) –
* **rc** ([*KillError*](wx.KillError.enumeration.html "KillError")) –
* **flags** (*int*) –



Return type
*int*





See also


[`wx.Process.Kill`](wx.Process.html#wx.Process.Kill "wx.Process.Kill") , [`wx.Process.Exists`](wx.Process.html#wx.Process.Exists "wx.Process.Exists") , External Program Execution Sample





        Source: https://docs.wxpython.org/wx.functions.html
    """


def LaunchDefaultApplication(document, flags=0) -> bool:
    """ 

`wx.``LaunchDefaultApplication`(*document*, *flags=0*)[¶](#wx.LaunchDefaultApplication "Permalink to this definition")
Opens the *document* in the application associated with the files of this type.


The *flags* parameter is currently not used


Returns `True` if the application was successfully launched.



Parameters
* **document** (*string*) –
* **flags** (*int*) –



Return type
*bool*





See also


[`wx.LaunchDefaultBrowser`](#wx.LaunchDefaultBrowser "wx.LaunchDefaultBrowser") , [`wx.Execute`](#wx.Execute "wx.Execute")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def LaunchDefaultBrowser(url, flags=0) -> bool:
    """ 

`wx.``LaunchDefaultBrowser`(*url*, *flags=0*)[¶](#wx.LaunchDefaultBrowser "Permalink to this definition")
Opens the *url* in user’s default browser.


If the *flags* parameter contains `BROWSER_NEW_WINDOW` flag, a new window is opened for the URL (currently this is only supported under Windows).


And unless the *flags* parameter contains `BROWSER_NOBUSYCURSOR` flag, a busy cursor is shown while the browser is being launched (using  [wx.BusyCursor](wx.BusyCursor.html#wx-busycursor)).


The parameter *url* is interpreted as follows:


* if it has a valid scheme (e.g. `"file:"` , `"http:"` or `"mailto:"` ) it is passed to the appropriate browser configured in the user system.
* if it has no valid scheme (e.g. it’s a local file path without the `"file:"` prefix), then `FileExists` and `DirExists` are used to test if it’s a local file/directory; if it is, then the browser is called with the *url* parameter eventually prefixed by `"file:"` .
* if it has no valid scheme and it’s not a local file/directory, then `"http:"` is prepended and the browser is called.


Returns `True` if the application was successfully launched.



Parameters
* **url** (*string*) –
* **flags** (*int*) –



Return type
*bool*





Note


For some configurations of the running user, the application which is launched to open the given URL may be URL-dependent (e.g. a browser may be used for local URLs while another one may be used for remote URLs).




See also


[`wx.LaunchDefaultApplication`](#wx.LaunchDefaultApplication "wx.LaunchDefaultApplication") , [`wx.Execute`](#wx.Execute "wx.Execute")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def LoadFileSelector(what, extension, default_name="", parent=None) -> str:
    """ 

`wx.``LoadFileSelector`(*what*, *extension*, *default\_name=""*, *parent=None*)[¶](#wx.LoadFileSelector "Permalink to this definition")
Shows a file dialog asking the user for a file name for opening a file.



Parameters
* **what** (*string*) –
* **extension** (*string*) –
* **default\_name** (*string*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
`string`





See also


[`wx.FileSelector`](#wx.FileSelector "wx.FileSelector") ,  [wx.FileDialog](wx.FileDialog.html#wx-filedialog)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogDebug(message: str) -> None:
    """ 

`wx.``LogDebug`(*message*)[¶](#wx.LogDebug "Permalink to this definition")
The right functions for debug output.


They only do something in debug mode (when the preprocessor symbol `__WXDEBUG__` is defined) and expand to nothing in release mode (otherwise).



Parameters
**message** (`String`) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogError(message: str) -> None:
    """ 

`wx.``LogError`(*message*)[¶](#wx.LogError "Permalink to this definition")
The functions to use for error messages, i.e.


the messages that must be shown to the user. The default processing is to pop up a message box to inform the user about it.



Parameters
**message** (`String`) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogFatalError(message: str) -> None:
    """ 

`wx.``LogFatalError`(*message*)[¶](#wx.LogFatalError "Permalink to this definition")
Like [`wx.LogError`](#wx.LogError "wx.LogError") , but also terminates the program with the exit code 3.


Using *abort()* standard function also terminates the program with this exit code.



Parameters
**message** (`String`) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogGeneric(level, message) -> None:
    """ 

`wx.``LogGeneric`(*level*, *message*)[¶](#wx.LogGeneric "Permalink to this definition")
Logs a message with the given LogLevel.


E.g. using `LOG_Message` as first argument, this function behaves like [`wx.LogMessage`](#wx.LogMessage "wx.LogMessage") .



Parameters
* **level** (*wx.LogLevel*) –
* **message** (`String`) –






        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogInfo(formatString) -> None:
    """ 

`wx.``LogInfo`(*formatString*)[¶](#wx.LogInfo "Permalink to this definition")
For low priority messages.


They are handled in the same way as messages logged by [`wx.LogMessage`](#wx.LogMessage "wx.LogMessage") by the default logger but could be handled differently by the custom loggers.



Parameters
* **formatString** (*int*) –
* **``** –






        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogMessage(message: str) -> None:
    """ 

`wx.``LogMessage`(*message*)[¶](#wx.LogMessage "Permalink to this definition")
For all normal, informational messages.


They also appear in a message box by default (but it can be changed).



Parameters
**message** (`String`) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogStatus(*args, **kw) -> None:
    """ 

`wx.``LogStatus`(*\*args*, *\*\*kw*)[¶](#wx.LogStatus "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**LogStatus** *(frame, message)*


Messages logged by this function will appear in the statusbar of the *frame* or of the top level application window by default (i.e.


when using the second version of the functions).


If the target frame doesn’t have a statusbar, the message will be lost.



Parameters
* **frame** ([*wx.Frame*](wx.Frame.html#wx.Frame "wx.Frame")) –
* **message** (`String`) –






---

  



**LogStatus** *(message)*



Parameters
**message** (`String`) – 






---

  





        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogSysError(message: str) -> None:
    """ 

`wx.``LogSysError`(*message*)[¶](#wx.LogSysError "Permalink to this definition")
Mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.


It logs the specified message text as well as the last system error code (`errno` or *GetLastError()* depending on the platform) and the corresponding error message. The second form of this function takes the error code explicitly as the first argument.



Parameters
**message** (`String`) – 





See also


[`wx.SysErrorCode`](#wx.SysErrorCode "wx.SysErrorCode") , [`wx.SysErrorMsgStr`](#wx.SysErrorMsgStr "wx.SysErrorMsgStr")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogVerbose(message: str) -> None:
    """ 

`wx.``LogVerbose`(*message*)[¶](#wx.LogVerbose "Permalink to this definition")
For verbose output.


Messages generated by these functions are suppressed by default, even if the log level is higher than `wx.LOG_Info` and need to be explicitly activated by calling [`wx.Log.SetVerbose`](wx.Log.html#wx.Log.SetVerbose "wx.Log.SetVerbose") .


Notice that this is done automatically by wxWidgets, unless the standard command line handling is overridden, if `--verbose` option is specified on the program command line, so using these functions provides a simple way of having some diagnostic messages not shown by default but which can be easily shown by the user if needed.



Parameters
**message** (`String`) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def LogWarning(message: str) -> None:
    """ 

`wx.``LogWarning`(*message*)[¶](#wx.LogWarning "Permalink to this definition")
For warnings - they are also normally shown to the user, but don’t interrupt the program work.



Parameters
**message** (`String`) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def MacThemeColour(themeBrushID) -> 'Colour':
    """ 

`wx.``MacThemeColour`(*themeBrushID*)[¶](#wx.MacThemeColour "Permalink to this definition")

Return type
 [wx.Colour](wx.Colour.html#wx-colour)






        Source: https://docs.wxpython.org/wx.functions.html
    """


def MessageBox(message, caption=MessageBoxCaptionStr, style=OK|CENTRE, parent=None, x=DefaultCoord, y=DefaultCoord) -> int:
    """ 

`wx.``MessageBox`(*message*, *caption=MessageBoxCaptionStr*, *style=OK|CENTRE*, *parent=None*, *x=DefaultCoord*, *y=DefaultCoord*)[¶](#wx.MessageBox "Permalink to this definition")
Show a general purpose message dialog.


This is a convenient function which is usually used instead of using  [wx.MessageDialog](wx.MessageDialog.html#wx-messagedialog) directly. Notice however that some of the features, such as extended text and custom labels for the message box buttons, are not provided by this function but only by  [wx.MessageDialog](wx.MessageDialog.html#wx-messagedialog).


The return value is one of: `YES` , `NO` , `CANCEL` , `OK` or `HELP` (notice that this return value is **different** from the return value of [`wx.MessageDialog.ShowModal`](wx.MessageDialog.html#wx.MessageDialog.ShowModal "wx.MessageDialog.ShowModal") ).


For example:



```
answer = wx.MessageBox("Quit program?", "Confirm",
                       wx.YES_NO | wx.CANCEL, main_frame)
if answer == wx.YES:
    main_frame.Close()

```


*message* may contain newline characters, in which case the message will be split into separate lines, to cater for large messages.



Parameters
* **message** (*string*) – Message to show in the dialog.
* **caption** (*string*) – The dialog title.
* **style** (*int*) – Combination of style flags described in  [wx.MessageDialog](wx.MessageDialog.html#wx-messagedialog) documentation.
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **x** (*int*) – Horizontal dialog position (ignored under MSW). Use `wx.DefaultCoord` for *x* and *y* to let the system position the window.
* **y** (*int*) – Vertical dialog position (ignored under MSW).



Return type
*int*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def MicroSleep(microseconds: int) -> None:
    """ 

`wx.``MicroSleep`(*microseconds*)[¶](#wx.MicroSleep "Permalink to this definition")
Sleeps for the specified number of microseconds.


The microsecond resolution may not, in fact, be available on all platforms (currently only Unix platforms with nanosleep(2) may provide it) in which case this is the same as calling [`wx.MilliSleep`](#wx.MilliSleep "wx.MilliSleep") with the argument of *microseconds/1000*.



Parameters
**microseconds** (*long*) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def MilliSleep(milliseconds: int) -> None:
    """ 

`wx.``MilliSleep`(*milliseconds*)[¶](#wx.MilliSleep "Permalink to this definition")
Sleeps for the specified number of milliseconds.


Notice that usage of this function is encouraged instead of calling usleep(3) directly because the standard *usleep()* function is not `MT` safe.



Parameters
**milliseconds** (*long*) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def NewEventType() -> int:
    """ 

`wx.``NewEventType`()[¶](#wx.NewEventType "Permalink to this definition")
Generates a new unique event type.


Usually this function is only used by `DEFINE_EVENT` and not called directly.



Return type
*wx.EventType*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def NewId() -> int:
    """ 

`wx.``NewId`()[¶](#wx.NewId "Permalink to this definition")
Generates an integer identifier unique to this run of the program.



Return type
*wx.WindowID*





Deprecated


IDs generated by this function can possibly conflict with IDs used elsewhere in the application code. It is recommended to instead use the `wx.ID_ANY` `ID` to assign generated IDs for the controls, menu items and etc. that you create in the application. These IDs are guaranteed to not conflict with the other IDs that are in use in the application. For those cases where you need to create an `ID` that can be used more than once then please see [`wx.NewIdRef`](#wx.NewIdRef "wx.NewIdRef").




See also


[`wx.RegisterId`](#wx.RegisterId "wx.RegisterId")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def NewIdRef(count=1) -> int:
    """ 

`wx.``NewIdRef`(*count=1*)[¶](#wx.NewIdRef "Permalink to this definition")
Reserves a new Window ID (or range of WindowIDs) and returns a
[`wx.WindowIDRef`](wx.WindowIDRef.html#wx.WindowIDRef "wx.WindowIDRef") object (or list of them) that will help
manage the reservation of that ID.


This function is intended to be a drop-in replacement of the old
and deprecated [`wx.NewId`](#wx.NewId "wx.NewId") function, with the added benefit
that the ID should never conflict with an in-use ID or other IDs
generated by this function.




        Source: https://docs.wxpython.org/wx.functions.html
    """


def Now() -> str:
    """ 

`wx.``Now`()[¶](#wx.Now "Permalink to this definition")
Returns a string representing the current date and time.



Return type
`string`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def PostEvent(dest, event) -> None:
    """ 

`wx.``PostEvent`(*dest*, *event*)[¶](#wx.PostEvent "Permalink to this definition")
In a GUI application, this function posts *event* to the specified *dest* object using [`wx.EvtHandler.AddPendingEvent`](wx.EvtHandler.html#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") .


Otherwise, it dispatches *event* immediately using [`wx.EvtHandler.ProcessEvent`](wx.EvtHandler.html#wx.EvtHandler.ProcessEvent "wx.EvtHandler.ProcessEvent") . See the respective documentation for details (and caveats). Because of limitation of [`wx.EvtHandler.AddPendingEvent`](wx.EvtHandler.html#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") this function is not thread-safe for event objects having *String* fields, use [`wx.QueueEvent`](#wx.QueueEvent "wx.QueueEvent") instead.



Parameters
* **dest** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) –
* **event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) –






        Source: https://docs.wxpython.org/wx.functions.html
    """


def pydate2wxdate(date) -> None:
    """ 

`wx.``pydate2wxdate`(*date*)[¶](#wx.pydate2wxdate "Permalink to this definition")
Convert a Python date or datetime to a [`DateTime`](wx.DateTime.html#wx.DateTime "wx.DateTime") object




        Source: https://docs.wxpython.org/wx.functions.html
    """


def QueueEvent(dest, event) -> None:
    """ 

`wx.``QueueEvent`(*dest*, *event*)[¶](#wx.QueueEvent "Permalink to this definition")
Queue an event for processing on the given object.


This is a wrapper around [`wx.EvtHandler.QueueEvent`](wx.EvtHandler.html#wx.EvtHandler.QueueEvent "wx.EvtHandler.QueueEvent") , see its documentation for more details.



Parameters
* **dest** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – The object to queue the event on, can’t be `NULL` .
* **event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – The heap-allocated and non- `NULL` event to queue, the function takes ownership of it.






        Source: https://docs.wxpython.org/wx.functions.html
    """


def RegisterId(id: int) -> None:
    """ 

`wx.``RegisterId`(*id*)[¶](#wx.RegisterId "Permalink to this definition")
Ensures that Ids subsequently generated by [`wx.NewId`](#wx.NewId "wx.NewId") do not clash with the given *id*.



Parameters
**id** (*wx.WindowID*) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def SafeShowMessage(title, text) -> bool:
    """ 

`wx.``SafeShowMessage`(*title*, *text*)[¶](#wx.SafeShowMessage "Permalink to this definition")
This function shows a message to the user in a safe way and should be safe to call even before the application has been initialized or if it is currently in some other strange state (for example, about to crash).


Under Windows this function shows a message box using a native dialog instead of [`wx.MessageBox`](#wx.MessageBox "wx.MessageBox") (which might be unsafe to call), elsewhere it simply prints the message to the standard output using the title as prefix.



Parameters
* **title** (*string*) – The title of the message box shown to the user or the prefix of the message string.
* **text** (*string*) – The text to show to the user.



Return type
*bool*



Returns
`True` If a message box was actually shown or `False` if the message was logged to the console because there is no safe to show it currently (the return value is only available since wxWidgets 3.1.5, the function doesn’t return anything in the previous versions).





See also


[`wx.LogFatalError`](#wx.LogFatalError "wx.LogFatalError")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def SafeYield(win=None, onlyIfNeeded=False) -> bool:
    """ 

`wx.``SafeYield`(*win=None*, *onlyIfNeeded=False*)[¶](#wx.SafeYield "Permalink to this definition")
Calls [`wx.App.SafeYield`](wx.PyApp.html#wx.PyApp.SafeYield "wx.PyApp.SafeYield") .



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **onlyIfNeeded** (*bool*) –



Return type
*bool*






        Source: https://docs.wxpython.org/wx.functions.html
    """


def SaveFileSelector(what, extension, default_name="", parent=None) -> str:
    """ 

`wx.``SaveFileSelector`(*what*, *extension*, *default\_name=""*, *parent=None*)[¶](#wx.SaveFileSelector "Permalink to this definition")
Shows a file dialog asking the user for a file name for saving a file.



Parameters
* **what** (*string*) –
* **extension** (*string*) –
* **default\_name** (*string*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
`string`





See also


[`wx.FileSelector`](#wx.FileSelector "wx.FileSelector") ,  [wx.FileDialog](wx.FileDialog.html#wx-filedialog)





        Source: https://docs.wxpython.org/wx.functions.html
    """


def SecureZeroMemory(p, n) -> None:
    """ 

`wx.``SecureZeroMemory`(*p*, *n*)[¶](#wx.SecureZeroMemory "Permalink to this definition")
Fills the memory block with zeros in a way that is guaranteed not to be optimized away by the compiler.



Parameters
* **p** – Pointer to the memory block to be zeroed, must be not `None`.
* **n** (*int*) – The number of bytes to zero.





New in version 4.1/wxWidgets-3.1.6.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def SetCursor(cursor: 'Cursor') -> None:
    """ 

`wx.``SetCursor`(*cursor*)[¶](#wx.SetCursor "Permalink to this definition")
Globally sets the cursor; only has an effect on Windows, Mac and GTK+.


You should call this function with NullCursor to restore the system cursor.



Parameters
**cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – 





See also


 [wx.Cursor](wx.Cursor.html#wx-cursor), [`wx.Window.SetCursor`](wx.Window.html#wx.Window.SetCursor "wx.Window.SetCursor")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def Shell(command: str="") -> bool:
    """ 

`wx.``Shell`(*command=""*)[¶](#wx.Shell "Permalink to this definition")
Executes a command in an interactive shell window.


If no command is specified, then just the shell is spawned.



Parameters
**command** (*string*) – 



Return type
*bool*





See also


[`wx.Execute`](#wx.Execute "wx.Execute") , External Program Execution Sample





        Source: https://docs.wxpython.org/wx.functions.html
    """


def Shutdown(flags: int=SHUTDOWN_POWEROFF) -> bool:
    """ 

`wx.``Shutdown`(*flags=SHUTDOWN\_POWEROFF*)[¶](#wx.Shutdown "Permalink to this definition")
This function shuts down or reboots the computer depending on the value of the *flags*.



Parameters
**flags** (*int*) – One of `SHUTDOWN_POWEROFF` , `SHUTDOWN_REBOOT` or `SHUTDOWN_LOGOFF` (currently implemented only for MSW) possibly combined with `SHUTDOWN_FORCE` which forces shutdown under MSW by forcefully terminating all the applications. As doing this can result in a data loss, this flag shouldn’t be used unless really necessary.



Return type
*bool*



Returns
`True` on success, `False` if an error occurred.





Note


Note that performing the shutdown requires the corresponding access rights (superuser under Unix, `SE_SHUTDOWN` privilege under Windows) and that this function is only implemented under Unix and MSW.





        Source: https://docs.wxpython.org/wx.functions.html
    """


def Sleep(secs: int) -> None:
    """ 

`wx.``Sleep`(*secs*)[¶](#wx.Sleep "Permalink to this definition")
Sleeps for the specified number of seconds.



Parameters
**secs** (*int*) – 






        Source: https://docs.wxpython.org/wx.functions.html
    """


def StripMenuCodes(str, flags=Strip_All) -> str:
    """ 

`wx.``StripMenuCodes`(*str*, *flags=Strip\_All*)[¶](#wx.StripMenuCodes "Permalink to this definition")
Strips any menu codes from *str* and returns the result.


By default, the functions strips both the mnemonics character ( `'&'` ) which is used to indicate a keyboard shortkey, and the accelerators, which are used only in the menu items and are separated from the main text by the `\t` (`TAB`) character. By using *flags* of `Strip_Mnemonics` or `Strip_Accel` to strip only the former or the latter part, respectively.


Notice that in most cases `wx.MenuItem.GetLabelFromText` or [`wx.Control.GetLabelText`](wx.Control.html#wx.Control.GetLabelText "wx.Control.GetLabelText") can be used instead.



Parameters
* **str** (*string*) –
* **flags** (*int*) –



Return type
`string`






        Source: https://docs.wxpython.org/wx.functions.html
    """


def SysErrorCode() -> int:
    """ 

`wx.``SysErrorCode`()[¶](#wx.SysErrorCode "Permalink to this definition")
Returns the error code from the last system call.


This function uses `errno` on Unix platforms and `GetLastError` under Win32.



Return type
*int*





See also


[`wx.SysErrorMsgStr`](#wx.SysErrorMsgStr "wx.SysErrorMsgStr") , [`wx.LogSysError`](#wx.LogSysError "wx.LogSysError")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def SysErrorMsg(errCode: int=0) -> str:
    """ 

`wx.``SysErrorMsg`(*errCode=0*)[¶](#wx.SysErrorMsg "Permalink to this definition")
Returns the error message corresponding to the given system error code.


If *errCode* is 0 (default), the last error code (as returned by [`wx.SysErrorCode`](#wx.SysErrorCode "wx.SysErrorCode") ) is used.


Use [`wx.SysErrorMsgStr`](#wx.SysErrorMsgStr "wx.SysErrorMsgStr") instead of this function especially in a multi-threaded application.



Parameters
**errCode** (*long*) – 



Return type
`string`





See also


[`wx.SysErrorCode`](#wx.SysErrorCode "wx.SysErrorCode") , [`wx.LogSysError`](#wx.LogSysError "wx.LogSysError")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def SysErrorMsgStr(errCode: int=0) -> str:
    """ 

`wx.``SysErrorMsgStr`(*errCode=0*)[¶](#wx.SysErrorMsgStr "Permalink to this definition")
Returns the error message corresponding to the given system error code.


If *errCode* is 0 (default), the last error code (as returned by [`wx.SysErrorCode`](#wx.SysErrorCode "wx.SysErrorCode") ) is used.


Use this function instead of [`wx.SysErrorMsg`](#wx.SysErrorMsg "wx.SysErrorMsg") , as the latter one is not thread-safe.



Parameters
**errCode** (*long*) – 



Return type
`string`





New in version 4.1/wxWidgets-3.1.0.




See also


[`wx.SysErrorCode`](#wx.SysErrorCode "wx.SysErrorCode") , [`wx.LogSysError`](#wx.LogSysError "wx.LogSysError")





        Source: https://docs.wxpython.org/wx.functions.html
    """


def Trap() -> None:
    """ 

`wx.``Trap`()[¶](#wx.Trap "Permalink to this definition")
Generate a debugger exception meaning that the control is passed to the debugger if one is attached to the process.


Otherwise the program just terminates abnormally.


If `DEBUG_LEVEL` is 0 (which is not the default) this function does nothing.




        Source: https://docs.wxpython.org/wx.functions.html
    """


def version() -> str:
    """ 

`wx.``version`()[¶](#wx.version "Permalink to this definition")
Returns a string containing version and port info




        Source: https://docs.wxpython.org/wx.functions.html
    """


def WakeUpIdle() -> None:
    """ 

`wx.``WakeUpIdle`()[¶](#wx.WakeUpIdle "Permalink to this definition")
This function wakes up the (internal and platform dependent) idle system, i.e.


it will force the system to send an idle event even if the system currently *is* idle and thus would not send any idle event until after some other event would get sent. This is also useful for sending events between two threads and is used by the corresponding functions [`wx.PostEvent`](#wx.PostEvent "wx.PostEvent") and [`wx.EvtHandler.AddPendingEvent`](wx.EvtHandler.html#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") .




        Source: https://docs.wxpython.org/wx.functions.html
    """


def Yield() -> bool:
    """ 

`wx.``Yield`()[¶](#wx.Yield "Permalink to this definition")
Calls [`wx.AppConsole.Yield`](wx.AppConsole.html#wx.AppConsole.Yield "wx.AppConsole.Yield") if there is an existing application object.


Does nothing if there is no application (which typically only happens early during the program startup or late during its shutdown).



Return type
*bool*





See also


*EvtLoopBase.Yield()*





        Source: https://docs.wxpython.org/wx.functions.html
    """


def YieldIfNeeded() -> None:
    """ 

`wx.``YieldIfNeeded`()[¶](#wx.YieldIfNeeded "Permalink to this definition")
Convenience function for wx.GetApp().Yield(True)




        Source: https://docs.wxpython.org/wx.functions.html
    """


KILL_CHILDREN: int

EXEC_ASYNC: int

EXEC_SYNC: int

EXEC_SHOW_CONSOLE: int

EXEC_HIDE_CONSOLE: int

EXEC_MAKE_GROUP_LEADER: int

EXEC_NODISABLE: int

EXEC_NOEVENTS: int

EXEC_BLOCK: int

FD_OPEN: int

FD_SAVE: int

FD_OVERWRITE_PROMPT: int

FD_FILE_MUST_EXIST: int

FD_MULTIPLE: int

OK: int

KILL_NOCHILDREN: int

_MenuItem: TypeAlias = MenuItem

class AcceleratorEntry:
    """ **Possible constructors**:



```
AcceleratorEntry(flags=0, keyCode=0, cmd=0, item=None)

AcceleratorEntry(entry)

```


An object used by an application wishing to create an accelerator
table (see AcceleratorTable).


  


        Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AcceleratorEntry.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, flags=0, keyCode=0, cmd=0, item=None)*


Constructor.



Parameters
* **flags** (*int*) – A combination of the  [wx.AcceleratorEntryFlags](wx.AcceleratorEntryFlags.enumeration.html#wx-acceleratorentryflags) values, which indicates which modifier keys are held down.
* **keyCode** (*int*) – The keycode to be detected. See  [wx.KeyCode](wx.KeyCode.enumeration.html#wx-keycode) for a full list of keycodes.
* **cmd** (*int*) – The menu or control command identifier (`ID`).
* **item** ([*wx.MenuItem*](wx.MenuItem.html#wx.MenuItem "wx.MenuItem")) – The menu item associated with this accelerator.






---

  



**\_\_init\_\_** *(self, entry)*


Copy constructor.



Parameters
**entry** ([*wx.AcceleratorEntry*](#wx.AcceleratorEntry "wx.AcceleratorEntry")) – 






---

  





            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def FromString(self, str: str) -> bool:
        """ 

`FromString`(*self*, *str*)[¶](#wx.AcceleratorEntry.FromString "Permalink to this definition")
Parses the given string and sets the accelerator accordingly.



Parameters
**str** (*string*) – This string may be either in the same format as returned by *wx.ToString* , i.e. contain the accelerator itself only, or have the format of a full menu item text with i.e. `Label TAB Accelerator` . In the latter case, the part of the string before the `TAB` is ignored. Notice that the latter format is only supported for the compatibility with the previous wxWidgets versions and the new code should pass only the accelerator string itself to this function.



Return type
*bool*



Returns
`True` if the given string correctly initialized this object (i.e. if [`IsOk`](#wx.AcceleratorEntry.IsOk "wx.AcceleratorEntry.IsOk") returns `True` after this call)






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def GetCommand(self) -> int:
        """ 

`GetCommand`(*self*)[¶](#wx.AcceleratorEntry.GetCommand "Permalink to this definition")
Returns the command identifier for the accelerator table entry.



Return type
*int*






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def GetFlags(self) -> int:
        """ 

`GetFlags`(*self*)[¶](#wx.AcceleratorEntry.GetFlags "Permalink to this definition")
Returns the flags for the accelerator table entry.



Return type
*int*






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def GetKeyCode(self) -> int:
        """ 

`GetKeyCode`(*self*)[¶](#wx.AcceleratorEntry.GetKeyCode "Permalink to this definition")
Returns the keycode for the accelerator table entry.



Return type
*int*






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def GetMenuItem(self) -> 'MenuItem':
        """ 

`GetMenuItem`(*self*)[¶](#wx.AcceleratorEntry.GetMenuItem "Permalink to this definition")
Returns the menu item associated with this accelerator entry.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.AcceleratorEntry.IsOk "Permalink to this definition")
Returns `True` if this object is correctly initialized.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def Set(self, flags, keyCode, cmd, item=None) -> None:
        """ 

`Set`(*self*, *flags*, *keyCode*, *cmd*, *item=None*)[¶](#wx.AcceleratorEntry.Set "Permalink to this definition")
Sets the accelerator entry parameters.



Parameters
* **flags** (*int*) – A combination of the  [wx.AcceleratorEntryFlags](wx.AcceleratorEntryFlags.enumeration.html#wx-acceleratorentryflags) values, which indicates which modifier keys are held down.
* **keyCode** (*int*) – The keycode to be detected. See  [wx.KeyCode](wx.KeyCode.enumeration.html#wx-keycode) for a full list of keycodes.
* **cmd** (*int*) – The menu or control command identifier (`ID`).
* **item** ([*wx.MenuItem*](wx.MenuItem.html#wx.MenuItem "wx.MenuItem")) – The menu item associated with this accelerator.






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def ToRawString(self) -> str:
        """ 

`ToRawString`(*self*)[¶](#wx.AcceleratorEntry.ToRawString "Permalink to this definition")
Returns a textual representation of this accelerator which is appropriate for saving in configuration files.


Unlike the string returned by *wx.ToString* , this one is never translated so, while it’s not suitable for showing to the user, it can be used to uniquely identify the accelerator independently of the user language.


The returned string can still be parsed by *wx.FromString* .



Return type
`string`





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def ToString(self) -> str:
        """ 

`ToString`(*self*)[¶](#wx.AcceleratorEntry.ToString "Permalink to this definition")
Returns a textual representation of this accelerator.


The returned string is of the form `[Alt+][Ctrl+][RawCtrl+][Shift+]Key` where the modifier keys are present only if the corresponding flag is set.



Return type
`string`






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.AcceleratorEntry.__ne__ "Permalink to this definition")

Parameters
**entry** ([*wx.AcceleratorEntry*](#wx.AcceleratorEntry "wx.AcceleratorEntry")) – 






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.AcceleratorEntry.__eq__ "Permalink to this definition")

Parameters
**entry** ([*wx.AcceleratorEntry*](#wx.AcceleratorEntry "wx.AcceleratorEntry")) – 






            Source: https://docs.wxpython.org/wx.AcceleratorEntry.html
        """

    Command: int  # `Command`[¶](#wx.AcceleratorEntry.Command "Permalink to this definition")See [`GetCommand`](#wx.AcceleratorEntry.GetCommand "wx.AcceleratorEntry.GetCommand")
    Flags: int  # `Flags`[¶](#wx.AcceleratorEntry.Flags "Permalink to this definition")See [`GetFlags`](#wx.AcceleratorEntry.GetFlags "wx.AcceleratorEntry.GetFlags")
    KeyCode: int  # `KeyCode`[¶](#wx.AcceleratorEntry.KeyCode "Permalink to this definition")See [`GetKeyCode`](#wx.AcceleratorEntry.GetKeyCode "wx.AcceleratorEntry.GetKeyCode")
    MenuItem: '_MenuItem'  # `MenuItem`[¶](#wx.AcceleratorEntry.MenuItem "Permalink to this definition")See [`GetMenuItem`](#wx.AcceleratorEntry.GetMenuItem "wx.AcceleratorEntry.GetMenuItem")



class AcceleratorTable(Object):
    """ **Possible constructors**:



```
AcceleratorTable()

AcceleratorTable(entries)

```


An accelerator table allows the application to specify a table of
keyboard shortcuts for menu or button commands.


  


        Source: https://docs.wxpython.org/wx.AcceleratorTable.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AcceleratorTable.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, entries)*



> Constructs an AcceleratorTable from a sequence of items
> where each item is either a wx.AcceleratorEntry or a
> corresponding 3-element tuple like (modifiers, keyCode, cmd).




---

  





            Source: https://docs.wxpython.org/wx.AcceleratorTable.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.AcceleratorTable.IsOk "Permalink to this definition")
Returns `True` if the accelerator table is valid.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AcceleratorTable.html
        """



_Window: TypeAlias = Window

class Accessible(Object):
    """ **Possible constructors**:



```
Accessible(win=None)

```


The Accessible class allows wxWidgets applications, and wxWidgets
itself, to return extended information about user interface elements
to client applications such as screen readers.


  


        Source: https://docs.wxpython.org/wx.Accessible.html
    """
    def __init__(self, win: Optional['Window']=None) -> None:
        """ 

`__init__`(*self*, *win=None*)[¶](#wx.Accessible.__init__ "Permalink to this definition")
Constructor, taking an optional window.


The object can be associated with a window later.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def DoDefaultAction(self, childId: int) -> int:
        """ 

`DoDefaultAction`(*self*, *childId*)[¶](#wx.Accessible.DoDefaultAction "Permalink to this definition")
Performs the default action for the object.


*childId* is 0 (the action for this object) or greater than 0 (the action for a child).



Parameters
**childId** (*int*) – 



Return type
 [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus)



Returns
`wx.ACC_NOT_SUPPORTED` if there is no default action for this window (e.g. an edit control).






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetChild(self, childId: int) -> tuple:
        """ 

`GetChild`(*self*, *childId*)[¶](#wx.Accessible.GetChild "Permalink to this definition")
Gets the specified child (starting from 1).


If *child* is `None` and the return value is `wx.ACC_OK`, this means that the child is a simple element and not an accessible object.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *child* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetChildCount(self) -> tuple:
        """ 

`GetChildCount`(*self*)[¶](#wx.Accessible.GetChildCount "Permalink to this definition")
Returns the number of children in *childCount*.



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *childCount* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetDefaultAction(self, childId: int) -> tuple:
        """ 

`GetDefaultAction`(*self*, *childId*)[¶](#wx.Accessible.GetDefaultAction "Permalink to this definition")
Gets the default action for this object (0) or a child (greater than 0).


Return `wx.ACC_OK` even if there is no action. *actionName* is the action, or the empty string if there is no action. The retrieved string describes the action that is performed on an object, not what the object does as a result. For example, a toolbar button that prints a document has a default action of “Press” rather than “Prints
the current document.”



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *actionName* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetDescription(self, childId: int) -> tuple:
        """ 

`GetDescription`(*self*, *childId*)[¶](#wx.Accessible.GetDescription "Permalink to this definition")
Returns the description for this object or a child.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *description* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetFocus(self, childId: int) -> tuple:
        """ 

`GetFocus`(*self*, *childId*)[¶](#wx.Accessible.GetFocus "Permalink to this definition")
Gets the window with the keyboard focus.


If childId is 0 and child is `None`, no object in this subhierarchy has the focus. If this object has the focus, child should be ‘this’.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *child* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetHelpText(self, childId: int) -> tuple:
        """ 

`GetHelpText`(*self*, *childId*)[¶](#wx.Accessible.GetHelpText "Permalink to this definition")
Returns help text for this object or a child, similar to tooltip text.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *helpText* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetKeyboardShortcut(self, childId: int) -> tuple:
        """ 

`GetKeyboardShortcut`(*self*, *childId*)[¶](#wx.Accessible.GetKeyboardShortcut "Permalink to this definition")
Returns the keyboard shortcut for this object or child.


Returns e.g. `ALT+K`.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *shortcut* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetLocation(self, elementId: int) -> tuple:
        """ 

`GetLocation`(*self*, *elementId*)[¶](#wx.Accessible.GetLocation "Permalink to this definition")
Returns the rectangle for this object (id is 0) or a child element (id is greater than 0).


*rect* is in screen coordinates.



Parameters
**elementId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *rect* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetName(self, childId: int) -> tuple:
        """ 

`GetName`(*self*, *childId*)[¶](#wx.Accessible.GetName "Permalink to this definition")
Gets the name of the specified object.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *name* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetParent(self) -> tuple:
        """ 

`GetParent`(*self*)[¶](#wx.Accessible.GetParent "Permalink to this definition")
Returns the parent of this object, or `None`.



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *parent* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetRole(self, childId: int) -> tuple:
        """ 

`GetRole`(*self*, *childId*)[¶](#wx.Accessible.GetRole "Permalink to this definition")
Returns a role constant describing this object.


See AccRole for a list of these roles.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *role* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetSelections(self) -> tuple:
        """ 

`GetSelections`(*self*)[¶](#wx.Accessible.GetSelections "Permalink to this definition")
Gets a variant representing the selected children of this object.


Acceptable values are:


* a null variant ( `IsNull()` returns `True`) if no children are selected
* a `void*` pointer to a  [wx.Accessible](#wx-accessible) of selected child object
* an integer representing the selected child element, or 0 if this object is selected ( `GetType()` `==` `"long"` )
* a list variant ( `GetType()` `==` `"list"` ) if multiple child objects are selected



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *selections* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetState(self, childId: int) -> tuple:
        """ 

`GetState`(*self*, *childId*)[¶](#wx.Accessible.GetState "Permalink to this definition")
Returns a state constant.


See AccStatus for a list of these states.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *state* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetValue(self, childId: int) -> tuple:
        """ 

`GetValue`(*self*, *childId*)[¶](#wx.Accessible.GetValue "Permalink to this definition")
Returns a localized string representing the value for the object or child.



Parameters
**childId** (*int*) – 



Return type
*tuple*



Returns
(  [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus), *strValue* )






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.Accessible.GetWindow "Permalink to this definition")
Returns the window associated with this object.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def HitTest(self, pt, childId, childObject) -> int:
        """ 

`HitTest`(*self*, *pt*, *childId*, *childObject*)[¶](#wx.Accessible.HitTest "Permalink to this definition")
Returns a status value and object id to indicate whether the given point was on this or a child object.


Can return either a child object, or an integer representing the child element, starting from 1.


*pt* is in screen coordinates.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **childId** (*int*) –
* **childObject** ([*Accessible*](#wx.Accessible "wx.Accessible")) –



Return type
 [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus)






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def Navigate(self, navDir, fromId, toId, toObject) -> int:
        """ 

`Navigate`(*self*, *navDir*, *fromId*, *toId*, *toObject*)[¶](#wx.Accessible.Navigate "Permalink to this definition")
Navigates from *fromId* to *toId* or to *toObject*.



Parameters
* **navDir** ([*NavDir*](wx.NavDir.enumeration.html "NavDir")) –
* **fromId** (*int*) –
* **toId** (*int*) –
* **toObject** ([*Accessible*](#wx.Accessible "wx.Accessible")) –



Return type
 [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus)






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    @staticmethod
    def NotifyEvent(eventType, window, objectType, objectId) -> None:
        """ 

*static* `NotifyEvent`(*eventType*, *window*, *objectType*, *objectId*)[¶](#wx.Accessible.NotifyEvent "Permalink to this definition")
Allows the application to send an event when something changes in an accessible object.



Parameters
* **eventType** (*int*) –
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **objectType** ([*AccObject*](wx.AccObject.enumeration.html "AccObject")) –
* **objectId** (*int*) –






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def Select(self, childId, selectFlags) -> int:
        """ 

`Select`(*self*, *childId*, *selectFlags*)[¶](#wx.Accessible.Select "Permalink to this definition")
Selects the object or child.


See AccSelectionFlags for a list of the selection actions.



Parameters
* **childId** (*int*) –
* **selectFlags** ([*AccSelectionFlags*](wx.AccSelectionFlags.enumeration.html "AccSelectionFlags")) –



Return type
 [wx.AccStatus](wx.AccStatus.enumeration.html#wx-accstatus)






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    def SetWindow(self, window: 'Window') -> None:
        """ 

`SetWindow`(*self*, *window*)[¶](#wx.Accessible.SetWindow "Permalink to this definition")
Sets the window associated with this object.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.Accessible.html
        """

    Window: '_Window'  # `Window`[¶](#wx.Accessible.Window "Permalink to this definition")See [`GetWindow`](#wx.Accessible.GetWindow "wx.Accessible.GetWindow") and [`SetWindow`](#wx.Accessible.SetWindow "wx.Accessible.SetWindow")



ACC_NOT_SUPPORTED: int

ACC_OK: int

class ActivateEvent(Event):
    """ **Possible constructors**:



```
ActivateEvent(eventType=wxEVT_NULL, active=True, id=0,
              ActivationReason=Reason_Unknown)

```


An activate event is sent when a window or application is being
activated or deactivated.


  


        Source: https://docs.wxpython.org/wx.ActivateEvent.html
    """
    def __init__(self, eventType=wxEVT_NULL, active=True, id=0, ActivationReason=Reason_Unknown) -> None:
        """ 

`__init__`(*self*, *eventType=wxEVT\_NULL*, *active=True*, *id=0*, *ActivationReason=Reason\_Unknown*)[¶](#wx.ActivateEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **eventType** (*wx.EventType*) –
* **active** (*bool*) –
* **id** (*int*) –
* **ActivationReason** ([*Reason*](wx.ActivateEvent.Reason.enumeration.html "Reason")) –






            Source: https://docs.wxpython.org/wx.ActivateEvent.html
        """

    def GetActivationReason(self) -> 'Reason':
        """ 

`GetActivationReason`(*self*)[¶](#wx.ActivateEvent.GetActivationReason "Permalink to this definition")
Allows checking if the window was activated by clicking it with the mouse or in some other way.


This method is currently only implemented in wxMSW and returns `Reason_Mouse` there if the window was activated by a mouse click and `Reason_Unknown` if it was activated in any other way (e.g. from keyboard or programmatically).


Under all the other platforms, `Reason_Unknown` is always returned.



Return type
 [wx.ActivateEvent.Reason](wx.ActivateEvent.Reason.enumeration.html#wx-activateevent-reason)





New in version 3.0.





            Source: https://docs.wxpython.org/wx.ActivateEvent.html
        """

    def GetActive(self) -> bool:
        """ 

`GetActive`(*self*)[¶](#wx.ActivateEvent.GetActive "Permalink to this definition")
Returns `True` if the application or window is being activated, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ActivateEvent.html
        """

    Active: bool  # `Active`[¶](#wx.ActivateEvent.Active "Permalink to this definition")See [`GetActive`](#wx.ActivateEvent.GetActive "wx.ActivateEvent.GetActive")



EVT_ACTIVATE: int  # Process a  wxEVT_ACTIVATE   event.

EVT_ACTIVATE_APP: int  # Process a  wxEVT_ACTIVATE_APP   event. This event is received by the App-derived instance only.

EVT_HIBERNATE: int  # Process a hibernate event, supplying the member function. This event applies to   wx.App  only, and only on Windows SmartPhone and PocketPC. It is generated when the system is low on memory; the application should free up as much memory as possible, and restore full working state when it receives a  wxEVT_ACTIVATE   or   wxEVT_ACTIVATE_APP   event. ^^

class ActivityIndicator(Control):
    """ **Possible constructors**:



```
ActivityIndicator()

ActivityIndicator(parent, winid=ID_ANY, pos=DefaultPosition,
                  size=DefaultSize, style=0, name="activityindicator")

```


Small control showing an animation indicating that the program is
currently busy performing some background task.


  


        Source: https://docs.wxpython.org/wx.ActivityIndicator.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ActivityIndicator.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Use [`Create`](#wx.ActivityIndicator.Create "wx.ActivityIndicator.Create") to really create the control after using this constructor.




---

  



**\_\_init\_\_** *(self, parent, winid=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=”activityindicator”)*


Constructor fully creating the control.


The arguments have the usual meanings and only *parent* is typically required.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winid** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.ActivityIndicator.html
        """

    def Create(self, parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name="activityindicator") -> bool:
        """ 

`Create`(*self*, *parent*, *winid=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name="activityindicator"*)[¶](#wx.ActivityIndicator.Create "Permalink to this definition")
Create the control initialized using the default constructor.


This method can be used to finish the control creation if it hadn’t been done already by using the non-default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winid** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ActivityIndicator.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ActivityIndicator.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ActivityIndicator.html
        """

    def IsRunning(self) -> bool:
        """ 

`IsRunning`(*self*)[¶](#wx.ActivityIndicator.IsRunning "Permalink to this definition")
Returns `True` if the control is currently showing activity.


Returns `False` initially, `True` once [`Start`](#wx.ActivityIndicator.Start "wx.ActivityIndicator.Start") is called and `False` again after calling [`Stop`](#wx.ActivityIndicator.Stop "wx.ActivityIndicator.Stop") .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ActivityIndicator.html
        """

    def Start(self) -> None:
        """ 

`Start`(*self*)[¶](#wx.ActivityIndicator.Start "Permalink to this definition")
Starts animation of the indicator.


Does nothing if the indicator is already running.




            Source: https://docs.wxpython.org/wx.ActivityIndicator.html
        """

    def Stop(self) -> None:
        """ 

`Stop`(*self*)[¶](#wx.ActivityIndicator.Stop "Permalink to this definition")
Stops the animation of the indicator.


Notice that the animation is stopped even if [`Start`](#wx.ActivityIndicator.Start "wx.ActivityIndicator.Start") had been called multiple times before, i.e. the calls are not cumulative.




            Source: https://docs.wxpython.org/wx.ActivityIndicator.html
        """



class AffineMatrix2D(AffineMatrix2DBase):
    """ **Possible constructors**:



```
AffineMatrix2D()

```


A 3x2 matrix representing an affine `2D` transformation.


  


        Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.AffineMatrix2D.__init__ "Permalink to this definition")
Default constructor.


The matrix elements are initialize to the identity matrix.




            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def Concat(self, t: 'AffineMatrix2DBase') -> None:
        """ 

`Concat`(*self*, *t*)[¶](#wx.AffineMatrix2D.Concat "Permalink to this definition")
Concatenate this matrix with another one.


The parameter matrix is the multiplicand.



Parameters
**t** ([*wx.AffineMatrix2DBase*](wx.AffineMatrix2DBase.html#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – The multiplicand.





```
#           | t.m_11  t.m_12  0 |   | m_11  m_12   0 |
# matrix' = | t.m_21  t.m_22  0 | x | m_21  m_22   0 |
#           | t.m_tx  t.m_ty  1 |   | m_tx  m_ty   1 |

```




            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.AffineMatrix2D.Get "Permalink to this definition")
Get the component values of the matrix.



Return type
*tuple*



Returns
( *mat2D*, *tr* )






            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def Invert(self) -> bool:
        """ 

`Invert`(*self*)[¶](#wx.AffineMatrix2D.Invert "Permalink to this definition")
Invert this matrix.


If the matrix is not invertible, i.e. if its determinant is 0, returns `False` and doesn’t modify it.



```
#           | m_11  m_12  0 |
# Invert    | m_21  m_22  0 |
#           | m_tx  m_ty  1 |

```



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def IsEqual(self, t: 'AffineMatrix2DBase') -> None:
        """ 

`IsEqual`(*self*, *t*)[¶](#wx.AffineMatrix2D.IsEqual "Permalink to this definition")
Check that this matrix is identical with *t*.



Parameters
**t** ([*wx.AffineMatrix2DBase*](wx.AffineMatrix2DBase.html#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – The matrix compared with this.






            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def IsIdentity(self) -> bool:
        """ 

`IsIdentity`(*self*)[¶](#wx.AffineMatrix2D.IsIdentity "Permalink to this definition")
Check if this is the identity matrix.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def Mirror(self, direction: int=HORIZONTAL) -> None:
        """ 

`Mirror`(*self*, *direction=HORIZONTAL*)[¶](#wx.AffineMatrix2D.Mirror "Permalink to this definition")
Add mirroring to this matrix.



Parameters
**direction** (*int*) – The direction(s) used for mirroring. One of `wx.HORIZONTAL`, `wx.VERTICAL` or their combination `wx.BOTH`.






            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def Rotate(self, cRadians: 'Double') -> None:
        """ 

`Rotate`(*self*, *cRadians*)[¶](#wx.AffineMatrix2D.Rotate "Permalink to this definition")
Add clockwise rotation to this matrix.



Parameters
**cRadians** (*wx.Double*) – Rotation angle in radians, clockwise.





```
#           | cos    sin   0 |   | self.11  self.12   0 |
# matrix' = | -sin   cos   0 | x | self.21  self.22   0 |
#           |  0      0    1 |   | self.tx  self.ty   1 |

```




            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def Scale(self, xScale, yScale) -> None:
        """ 

`Scale`(*self*, *xScale*, *yScale*)[¶](#wx.AffineMatrix2D.Scale "Permalink to this definition")
Add scaling to this matrix.



Parameters
* **xScale** (*wx.Double*) – Scaling in x direction.
* **yScale** (*wx.Double*) – Scaling in y direction.





```
#           | xScale   0      0 |   | self.11  self.12   0 |
# matrix' = |   0    yScale   0 | x | self.21  self.22   0 |
#           |   0      0      1 |   | self.tx  self.ty   1 |

```




            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def Set(self, mat2D, tr) -> None:
        """ 

`Set`(*self*, *mat2D*, *tr*)[¶](#wx.AffineMatrix2D.Set "Permalink to this definition")
Set all elements of this matrix.



Parameters
* **mat2D** ([*wx.Matrix2D*](wx.Matrix2D.html#wx.Matrix2D "wx.Matrix2D")) – The rotational components of the matrix (upper 2 x 2).
* **tr** (*Point2DDouble*) – The translational components of the matrix.






            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def TransformDistance(self, *args, **kw) -> 'Point2DDouble':
        """ 

`TransformDistance`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AffineMatrix2D.TransformDistance "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**TransformDistance** *(self, p)*


Applies the linear part of this matrix, i.e. without translation.



Parameters
**p** (*Point2DDouble*) – The source receiving the transformations.



Return type
*Point2DDouble*





```
#                                   | self.11  self.12   0 |
# dist' = | src.self.x  src._my  0 | x | self.21  self.22   0 |
#                                   | self.tx  self.ty   1 |

```



Returns
The source with the transformations applied.






---

  



**TransformDistance** *(self, dx, dy)*



Parameters
* **dx** (*wx.Double*) –
* **dy** (*wx.Double*) –



Return type
*tuple*



Returns
( *dx*, *dy* )






---

  





            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def TransformPoint(self, *args, **kw) -> 'Point2DDouble':
        """ 

`TransformPoint`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AffineMatrix2D.TransformPoint "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**TransformPoint** *(self, p)*


Applies this matrix to the point.



Parameters
**p** (*Point2DDouble*) – The point receiving the transformations.



Return type
*Point2DDouble*





```
#                                    | self.11  self.12   0 |
# point' = | src.self.x  src._my  1 | x | self.21  self.22   0 |
#                                    | self.tx  self.ty   1 |

```



Returns
The point with the transformations applied.






---

  



**TransformPoint** *(self, x, y)*



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –



Return type
*tuple*



Returns
( *x*, *y* )






---

  





            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def Translate(self, dx, dy) -> None:
        """ 

`Translate`(*self*, *dx*, *dy*)[¶](#wx.AffineMatrix2D.Translate "Permalink to this definition")
Add the translation to this matrix.



Parameters
* **dx** (*wx.Double*) – The translation in x direction.
* **dy** (*wx.Double*) – The translation in y direction.





```
#           |  1   0   0 |   | self.11  self.12   0 |
# matrix' = |  0   1   0 | x | self.21  self.22   0 |
#           | dx  dy   1 |   | self.tx  self.ty   1 |

```




            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.AffineMatrix2D.__ne__ "Permalink to this definition")
Check that this matrix differs from *t*.



Parameters
**t** ([*wx.AffineMatrix2DBase*](wx.AffineMatrix2DBase.html#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – The matrix compared with this.






            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.AffineMatrix2D.__eq__ "Permalink to this definition")
Check that this matrix is identical with *t*.



Parameters
**t** ([*wx.AffineMatrix2DBase*](wx.AffineMatrix2DBase.html#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – The matrix compared with this.






            Source: https://docs.wxpython.org/wx.AffineMatrix2D.html
        """



HORIZONTAL: int

VERTICAL: int

BOTH: int

class AffineMatrix2DBase:
    """ **Possible constructors**:



```
AffineMatrix2DBase()

```


A 2x3 matrix representing an affine `2D` transformation.


  


        Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.AffineMatrix2DBase.__init__ "Permalink to this definition")
Default constructor.


The matrix elements are initialize to the identity matrix.




            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def Concat(self, t: 'AffineMatrix2DBase') -> None:
        """ 

`Concat`(*self*, *t*)[¶](#wx.AffineMatrix2DBase.Concat "Permalink to this definition")
Concatenate this matrix with another one.


The parameter matrix is the multiplicand.



Parameters
**t** ([*wx.AffineMatrix2DBase*](#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – The multiplicand.





```
#           | t.m_11  t.m_12  0 |   | m_11  m_12   0 |
# matrix' = | t.m_21  t.m_22  0 | x | m_21  m_22   0 |
#           | t.m_tx  t.m_ty  1 |   | m_tx  m_ty   1 |

```




            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.AffineMatrix2DBase.Get "Permalink to this definition")
Get the component values of the matrix.



Return type
*tuple*



Returns
( *mat2D*, *tr* )






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def Invert(self) -> bool:
        """ 

`Invert`(*self*)[¶](#wx.AffineMatrix2DBase.Invert "Permalink to this definition")
Invert this matrix.


If the matrix is not invertible, i.e. if its determinant is 0, returns `False` and doesn’t modify it.



```
#           | m_11  m_12  0 |
# Invert    | m_21  m_22  0 |
#           | m_tx  m_ty  1 |

```



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def IsEqual(self, t: 'AffineMatrix2DBase') -> bool:
        """ 

`IsEqual`(*self*, *t*)[¶](#wx.AffineMatrix2DBase.IsEqual "Permalink to this definition")
Check that this matrix is identical with *t*.



Parameters
**t** ([*wx.AffineMatrix2DBase*](#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – The matrix compared with this.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def IsIdentity(self) -> bool:
        """ 

`IsIdentity`(*self*)[¶](#wx.AffineMatrix2DBase.IsIdentity "Permalink to this definition")
Check if this is the identity matrix.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def Mirror(self, direction: int=HORIZONTAL) -> None:
        """ 

`Mirror`(*self*, *direction=HORIZONTAL*)[¶](#wx.AffineMatrix2DBase.Mirror "Permalink to this definition")
Add mirroring to this matrix.



Parameters
**direction** (*int*) – The direction(s) used for mirroring. One of `wx.HORIZONTAL`, `wx.VERTICAL` or their combination `wx.BOTH`.






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def Rotate(self, cRadians: 'Double') -> None:
        """ 

`Rotate`(*self*, *cRadians*)[¶](#wx.AffineMatrix2DBase.Rotate "Permalink to this definition")
Add clockwise rotation to this matrix.



Parameters
**cRadians** (*wx.Double*) – Rotation angle in radians, clockwise.






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def Scale(self, xScale, yScale) -> None:
        """ 

`Scale`(*self*, *xScale*, *yScale*)[¶](#wx.AffineMatrix2DBase.Scale "Permalink to this definition")
Add scaling to this matrix.



Parameters
* **xScale** (*wx.Double*) – Scaling in x direction.
* **yScale** (*wx.Double*) – Scaling in y direction.






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def Set(self, mat2D, tr) -> None:
        """ 

`Set`(*self*, *mat2D*, *tr*)[¶](#wx.AffineMatrix2DBase.Set "Permalink to this definition")
Set all elements of this matrix.



Parameters
* **mat2D** ([*wx.Matrix2D*](wx.Matrix2D.html#wx.Matrix2D "wx.Matrix2D")) – The rotational components of the matrix (upper 2 x 2).
* **tr** (*Point2DDouble*) – The translational components of the matrix.






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def TransformDistance(self, *args, **kw) -> 'Point2DDouble':
        """ 

`TransformDistance`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AffineMatrix2DBase.TransformDistance "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**TransformDistance** *(self, p)*


Applies the linear part of this matrix, i.e. without translation.



Parameters
**p** (*Point2DDouble*) – The source receiving the transformations.



Return type
*Point2DDouble*



Returns
The source with the transformations applied.






---

  



**TransformDistance** *(self, dx, dy)*



Parameters
* **dx** (*wx.Double*) –
* **dy** (*wx.Double*) –



Return type
*tuple*



Returns
( *dx*, *dy* )






---

  





            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def TransformPoint(self, *args, **kw) -> 'Point2DDouble':
        """ 

`TransformPoint`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AffineMatrix2DBase.TransformPoint "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**TransformPoint** *(self, p)*


Applies this matrix to the point.



Parameters
**p** (*Point2DDouble*) – The point receiving the transformations.



Return type
*Point2DDouble*



Returns
The point with the transformations applied.






---

  



**TransformPoint** *(self, x, y)*



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –



Return type
*tuple*



Returns
( *x*, *y* )






---

  





            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def Translate(self, dx, dy) -> None:
        """ 

`Translate`(*self*, *dx*, *dy*)[¶](#wx.AffineMatrix2DBase.Translate "Permalink to this definition")
Add the translation to this matrix.



Parameters
* **dx** (*wx.Double*) – The translation in x direction.
* **dy** (*wx.Double*) – The translation in y direction.






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.AffineMatrix2DBase.__ne__ "Permalink to this definition")
Check that this matrix differs from *t*.



Parameters
**t** ([*wx.AffineMatrix2DBase*](#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – The matrix compared with this.






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.AffineMatrix2DBase.__eq__ "Permalink to this definition")
Check that this matrix is identical with *t*.



Parameters
**t** ([*wx.AffineMatrix2DBase*](#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – The matrix compared with this.






            Source: https://docs.wxpython.org/wx.AffineMatrix2DBase.html
        """



class AlphaPixelData:
    """ **Possible constructors**:



```
AlphaPixelData(bmp)

AlphaPixelData(bmp, rect)

AlphaPixelData(bmp, pt, sz)

```


A class providing direct access to a [`wx.Bitmap`](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")’s
internal data including the alpha channel (`RGBA`).


  


        Source: https://docs.wxpython.org/wx.AlphaPixelData.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AlphaPixelData.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, bmp)*



Parameters
**bmp** (`Bitmap`) – 






---

  



**\_\_init\_\_** *(self, bmp, rect)*



Parameters
* **bmp** (`Bitmap`) –
* **rect** (`Rect`) –






---

  



**\_\_init\_\_** *(self, bmp, pt, sz)*



Parameters
* **bmp** (`Bitmap`) –
* **pt** (`Point`) –
* **sz** (`Size`) –






---

  





            Source: https://docs.wxpython.org/wx.AlphaPixelData.html
        """

    def GetPixels(self) -> 'AlphaPixelData_Accessor':
        """ 

`GetPixels`(*self*)[¶](#wx.AlphaPixelData.GetPixels "Permalink to this definition")

Return type
 [wx.AlphaPixelData\_Accessor](wx.AlphaPixelData_Accessor.html#wx-alphapixeldata-accessor)






            Source: https://docs.wxpython.org/wx.AlphaPixelData.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.AlphaPixelData.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.AlphaPixelData.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.AlphaPixelData.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.AlphaPixelData.html
        """

    Pixels: 'AlphaPixelData_Accessor'  # `Pixels`[¶](#wx.AlphaPixelData.Pixels "Permalink to this definition")See [`GetPixels`](#wx.AlphaPixelData.GetPixels "wx.AlphaPixelData.GetPixels")



_Mask: TypeAlias = Mask

_Palette: TypeAlias = Palette

_Size: TypeAlias = Size

class Bitmap(GDIObject):
    """ **Possible constructors**:



```
Bitmap()

Bitmap(bitmap)

Bitmap(bits, width, height, depth=1)

Bitmap(width, height, depth=BITMAP_SCREEN_DEPTH)

Bitmap(sz, depth=BITMAP_SCREEN_DEPTH)

Bitmap(width, height, dc)

Bitmap(name, type=BITMAP_TYPE_ANY)

Bitmap(img, depth=BITMAP_SCREEN_DEPTH)

Bitmap(img, dc)

Bitmap(listOfBytes)

```


This class encapsulates the concept of a platform-dependent bitmap,
either monochrome or colour or colour with alpha channel support.


  


        Source: https://docs.wxpython.org/wx.Bitmap.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Bitmap.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Constructs a bitmap object with no data; an assignment or another member function such as [`Create`](#wx.Bitmap.Create "wx.Bitmap.Create") or [`LoadFile`](#wx.Bitmap.LoadFile "wx.Bitmap.LoadFile") must be called subsequently.




---

  



**\_\_init\_\_** *(self, bitmap)*


Copy constructor, uses [reference counting](refcount_overview.html#reference-counting).


To make a real copy, you can use:



```
newBitmap = oldBitmap.GetSubBitmap(
                      wx.Rect(0, 0, oldBitmap.GetWidth(), oldBitmap.GetHeight()))

```



Parameters
**bitmap** ([*wx.Bitmap*](#wx.Bitmap "wx.Bitmap")) – 






---

  



**\_\_init\_\_** *(self, bits, width, height, depth=1)*


Creates a bitmap from the given array *bits*.


You should only use this function for monochrome bitmaps (depth 1) in portable programs: in this case the bits parameter should contain an `XBM` image.


For other bit depths, the behaviour is platform dependent: under Windows, the data is passed without any changes to the underlying CreateBitmap() API. Under other platforms, only monochrome bitmaps may be created using this constructor and  [wx.Image](wx.Image.html#wx-image) should be used for creating colour bitmaps from static data.



Parameters
* **bits** (*string*) – Specifies an array of pixel values.
* **width** (*int*) – Specifies the width of the bitmap.
* **height** (*int*) – Specifies the height of the bitmap.
* **depth** (*int*) – Specifies the depth of the bitmap. If this is omitted, then a value of 1 (monochrome bitmap) is used.






---

  



**\_\_init\_\_** *(self, width, height, depth=BITMAP\_SCREEN\_DEPTH)*


Creates a new bitmap.


A depth of `BITMAP_SCREEN_DEPTH` indicates the depth of the current screen or visual.


Some platforms only support 1 for monochrome and `BITMAP_SCREEN_DEPTH` for the current colour setting.


A depth of 32 including an alpha channel is supported under MSW, Mac and GTK+.



Parameters
* **width** (*int*) – The width of the bitmap in pixels, must be strictly positive.
* **height** (*int*) – The height of the bitmap in pixels, must be strictly positive.
* **depth** (*int*) – The number of bits used to represent each bitmap pixel.






---

  



**\_\_init\_\_** *(self, sz, depth=BITMAP\_SCREEN\_DEPTH)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **depth** (*int*) –






---

  



**\_\_init\_\_** *(self, width, height, dc)*


Create a bitmap compatible with the given DC, inheriting its magnification factor.



Parameters
* **width** (*int*) – The width of the bitmap in pixels, must be strictly positive.
* **height** (*int*) – The height of the bitmap in pixels, must be strictly positive.
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – DC from which the scaling factor is inherited





New in version 4.1/wxWidgets-3.1.7: (previously available only in wxMSW and wxOSX ports).





---

  



**\_\_init\_\_** *(self, name, type=BITMAP\_TYPE\_ANY)*


Loads a bitmap from a file or resource.



Parameters
* **name** (*string*) – This can refer to a resource name or a filename under MS Windows and X. Its meaning is determined by the *type* parameter.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – May be one of the  [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype) values and indicates which type of bitmap should be loaded. See the note in the class detailed description. Note that the `BITMAP_DEFAULT_TYPE` constant has different value under different wxWidgets ports. See the bitmap.h header for the value it takes for a specific port.





See also


[`LoadFile`](#wx.Bitmap.LoadFile "wx.Bitmap.LoadFile")





---

  



**\_\_init\_\_** *(self, img, depth=BITMAP\_SCREEN\_DEPTH)*


Creates this bitmap object from the given image.


This has to be done to actually display an image as you cannot draw an image directly on a window.


The resulting bitmap will use the provided colour depth (or that of the current system if depth is `BITMAP_SCREEN_DEPTH`) which entails that a colour reduction may take place.


On Windows, if there is a palette present (set with SetPalette), it will be used when creating the  [wx.Bitmap](#wx-bitmap) (most useful in 8-bit display mode). On other platforms, the palette is currently ignored.



Parameters
* **img** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – Platform-independent  [wx.Image](wx.Image.html#wx-image) object.
* **depth** (*int*) – Specifies the depth of the bitmap. If this is omitted, the display depth of the screen is used.






---

  



**\_\_init\_\_** *(self, img, dc)*


Creates a bitmap compatible with the given DC from the given image.


This constructor initializes the bitmap with the data of the given image, which must be valid, but inherits the scaling factor from the given device context instead of simply using the default factor of 1.



Parameters
* **img** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – Platform-independent  [wx.Image](wx.Image.html#wx-image) object.
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – DC from which the scaling factor is inherited





New in version 4.1/wxWidgets-3.1.7: (previously this constructor overload was only available in wxMSW port)





---

  



**\_\_init\_\_** *(self, listOfBytes)*


Construct a Bitmap from a list of strings formatted as XPM data.




---

  





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def ConvertToDisabled(self, brightness: int=255) -> 'Bitmap':
        """ 

`ConvertToDisabled`(*self*, *brightness=255*)[¶](#wx.Bitmap.ConvertToDisabled "Permalink to this definition")
Returns disabled (dimmed) version of the bitmap.


This method is not available when `USE_IMAGE == 0` .



Parameters
**brightness** (*int*) – 



Return type
 [wx.Bitmap](#wx-bitmap)





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def ConvertToImage(self) -> 'Image':
        """ 

`ConvertToImage`(*self*)[¶](#wx.Bitmap.ConvertToImage "Permalink to this definition")
Creates an image from a platform-dependent bitmap.


This preserves mask information so that bitmaps and images can be converted back and forth without loss in that respect.



Return type
 [wx.Image](wx.Image.html#wx-image)






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def CopyFromBuffer(self, data, format=BitmapBufferFormat_RGB, stride=-1) -> None:
        """ 

`CopyFromBuffer`(*self*, *data*, *format=BitmapBufferFormat\_RGB*, *stride=-1*)[¶](#wx.Bitmap.CopyFromBuffer "Permalink to this definition")
Copy data from a buffer object to replace the bitmap pixel data.
Default format is plain `RGB`, but other formats are now supported as
well. The following symbols are used to specify the format of the
bytes in the buffer:



> | wx.BitmapBufferFormat\_RGB | A simple sequence of `RGB` bytes |
> | --- | --- |
> | wx.BitmapBufferFormat\_RGBA | A simple sequence of `RGBA` bytes |
> | wx.BitmapBufferFormat\_ARGB32 | A sequence of 32-bit values in native endian order, with alpha in the upper 8 bits, followed by red, green, and blue. |
> | wx.BitmapBufferFormat\_RGB32 | Same as above but the alpha byte is ignored. |




            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def CopyFromIcon(self, icon: 'Icon') -> bool:
        """ 

`CopyFromIcon`(*self*, *icon*)[¶](#wx.Bitmap.CopyFromIcon "Permalink to this definition")
Creates the bitmap from an icon.



Parameters
**icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def CopyToBuffer(self, data, format=BitmapBufferFormat_RGB, stride=-1) -> None:
        """ 

`CopyToBuffer`(*self*, *data*, *format=BitmapBufferFormat\_RGB*, *stride=-1*)[¶](#wx.Bitmap.CopyToBuffer "Permalink to this definition")
Copy pixel data to a buffer object. See [`CopyFromBuffer`](#wx.Bitmap.CopyFromBuffer "wx.Bitmap.CopyFromBuffer") for buffer
format details.




            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def Create(self, *args, **kw) -> bool:
        """ 

`Create`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Bitmap.Create "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Create** *(self, width, height, depth=BITMAP\_SCREEN\_DEPTH)*


Creates a fresh bitmap.


If the final argument is omitted, the display depth of the screen is used.



Parameters
* **width** (*int*) – The width of the bitmap in pixels, must be strictly positive.
* **height** (*int*) – The height of the bitmap in pixels, must be strictly positive.
* **depth** (*int*) – The number of bits used to represent each bitmap pixel.



Return type
*bool*



Returns
`True` if the creation was successful.






---

  



**Create** *(self, sz, depth=BITMAP\_SCREEN\_DEPTH)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **depth** (*int*) –



Return type
*bool*






---

  



**Create** *(self, width, height, dc)*


Create a bitmap compatible with the given DC, inheriting its magnification factor.



Parameters
* **width** (*int*) – The width of the bitmap in pixels, must be strictly positive.
* **height** (*int*) – The height of the bitmap in pixels, must be strictly positive.
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – DC from which the scaling factor is inherited



Return type
*bool*



Returns
`True` if the creation was successful.





New in version 4.1/wxWidgets-3.1.0.





---

  





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def CreateScaled(self, width, height, depth, logicalScale) -> bool:
        """ 

`CreateScaled`(*self*, *width*, *height*, *depth*, *logicalScale*)[¶](#wx.Bitmap.CreateScaled "Permalink to this definition")
Create a bitmap with a scale factor.


This is an older synonym for [`CreateWithDIPSize`](#wx.Bitmap.CreateWithDIPSize "wx.Bitmap.CreateWithDIPSize") , use the new function in the new code.



Parameters
* **width** (*int*) – The width of the bitmap in pixels, must be strictly positive.
* **height** (*int*) – The height of the bitmap in pixels, must be strictly positive.
* **depth** (*int*) – The number of bits used to represent each bitmap pixel.
* **logicalScale** (*float*) – Scale factor used by the bitmap, see [`SetScaleFactor`](#wx.Bitmap.SetScaleFactor "wx.Bitmap.SetScaleFactor") .



Return type
*bool*



Returns
`True` if the creation was successful.





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def CreateWithDIPSize(self, *args, **kw) -> bool:
        """ 

`CreateWithDIPSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Bitmap.CreateWithDIPSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreateWithDIPSize** *(self, size, scale, depth=BITMAP\_SCREEN\_DEPTH)*


Create a bitmap specifying its size in DPI-independent pixels and the scale factor to use.


The physical size of the bitmap is obtained by multiplying the given *size* by *scale* and rounding it to the closest integer.


After using this function the following postconditions are `True`:


* [`GetSize`](#wx.Bitmap.GetSize "wx.Bitmap.GetSize") returns *size* multiplied by *scale*
* [`GetDIPSize`](#wx.Bitmap.GetDIPSize "wx.Bitmap.GetDIPSize") returns *size*
* [`GetScaleFactor`](#wx.Bitmap.GetScaleFactor "wx.Bitmap.GetScaleFactor") returns *scale*



Parameters
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The size of the bitmap in DPI-independent pixels. Both width and height must be strictly positive.
* **scale** (*float*) – Scale factor used by the bitmap, see [`SetScaleFactor`](#wx.Bitmap.SetScaleFactor "wx.Bitmap.SetScaleFactor") .
* **depth** (*int*) – The number of bits used to represent each bitmap pixel.



Return type
*bool*



Returns
`True` if the creation was successful.





New in version 4.1/wxWidgets-3.1.6.





---

  



**CreateWithDIPSize** *(self, width, height, scale, depth=BITMAP\_SCREEN\_DEPTH)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **scale** (*float*) –
* **depth** (*int*) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    @staticmethod
    def FromBuffer(width, height, data) -> 'Bitmap':
        """ 

*static* `FromBuffer`(*width*, *height*, *data*)[¶](#wx.Bitmap.FromBuffer "Permalink to this definition")
Creates a [`wx.Bitmap`](#wx.Bitmap "wx.Bitmap") from in-memory data. The data parameter
must be a Python object that implements the buffer interface, such
as a string, bytearray, etc. The data object is expected to contain
a series of `RGB` bytes and be at least `(width  height  3)` bytes long.


Unlike [`wx.ImageFromBuffer`](wx.functions.html#wx.ImageFromBuffer "wx.ImageFromBuffer") the bitmap created with this function
does not share the memory block with the buffer object. This is
because the native pixel buffer format varies on different
platforms, and so instead an efficient as possible copy of the
data is made from the buffer object to the bitmap’s native pixel
buffer.



Return type
 [wx.Bitmap](#wx-bitmap)






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    @staticmethod
    def FromBufferAndAlpha(width, height, data, alpha) -> 'Bitmap':
        """ 

*static* `FromBufferAndAlpha`(*width*, *height*, *data*, *alpha*)[¶](#wx.Bitmap.FromBufferAndAlpha "Permalink to this definition")
Creates a [`wx.Bitmap`](#wx.Bitmap "wx.Bitmap") from in-memory data. The data and alpha
parameters must be a Python object that implements the buffer
interface, such as a string, bytearray, etc. The data object
is expected to contain a series of `RGB` bytes and be at least
`(width  height  3)` bytes long, while the alpha object is expected
to be `(width  height)` bytes long and represents the image’s alpha
channel. On Windows and Mac the `RGB` values will be
‘premultiplied’ by the alpha values. (The other platforms do
the multiplication themselves.)


Unlike [`wx.ImageFromBuffer`](wx.functions.html#wx.ImageFromBuffer "wx.ImageFromBuffer") the bitmap created with this function
does not share the memory block with the buffer object. This is
because the native pixel buffer format varies on different
platforms, and so instead an efficient as possible copy of the
data is made from the buffer object to the bitmap’s native pixel
buffer.



Return type
 [wx.Bitmap](#wx-bitmap)






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    @staticmethod
    def FromBufferRGBA(width, height, data) -> 'Bitmap':
        """ 

*static* `FromBufferRGBA`(*width*, *height*, *data*)[¶](#wx.Bitmap.FromBufferRGBA "Permalink to this definition")
Creates a [`wx.Bitmap`](#wx.Bitmap "wx.Bitmap") from in-memory data. The data parameter
must be a Python object that implements the buffer interface, such
as a string, bytearray, etc. The data object is expected to contain
a series of `RGBA` bytes and be at least `(width  height  4)` bytes long.
On Windows and Mac the `RGB` values will be ‘premultiplied’ by the
alpha values. (The other platforms do the multiplication themselves.)


Unlike [`wx.ImageFromBuffer`](wx.functions.html#wx.ImageFromBuffer "wx.ImageFromBuffer") the bitmap created with this function
does not share the memory block with the buffer object. This is
because the native pixel buffer format varies on different
platforms, and so instead an efficient as possible copy of the
data is made from the buffer object to the bitmap’s native pixel
buffer.



Return type
 [wx.Bitmap](#wx-bitmap)






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    @staticmethod
    def FromPNGData(data) -> 'Bitmap':
        """ 

*static* `FromPNGData`(*data*)[¶](#wx.Bitmap.FromPNGData "Permalink to this definition")
Like [`NewFromPNGData`](#wx.Bitmap.NewFromPNGData "wx.Bitmap.NewFromPNGData"), but with a simpler API accepting a Python
buffer-compatible object.



Return type
 [wx.Bitmap](#wx-bitmap)






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    @staticmethod
    def FromRGBA(width, height, red=0, green=0, blue=0, alpha=0) -> 'Bitmap':
        """ 

*static* `FromRGBA`(*width*, *height*, *red=0*, *green=0*, *blue=0*, *alpha=0*)[¶](#wx.Bitmap.FromRGBA "Permalink to this definition")
Creates a new empty 32-bit [`wx.Bitmap`](#wx.Bitmap "wx.Bitmap") where every pixel has been
initialized with the given `RGBA` values.



Return type
 [wx.Bitmap](#wx-bitmap)






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetDIPSize(self) -> 'Size':
        """ 

`GetDIPSize`(*self*)[¶](#wx.Bitmap.GetDIPSize "Permalink to this definition")
Returns the size of bitmap in DPI-independent units.


This assumes that the bitmap was created using the value of scale factor corresponding to the current `DPI` (see [`CreateWithDIPSize`](#wx.Bitmap.CreateWithDIPSize "wx.Bitmap.CreateWithDIPSize") and [`SetScaleFactor`](#wx.Bitmap.SetScaleFactor "wx.Bitmap.SetScaleFactor") ) and returns its physical size divided by this scale factor.


Unlike [`GetLogicalSize`](#wx.Bitmap.GetLogicalSize "wx.Bitmap.GetLogicalSize") , this function returns the same value under all platforms and so its result should *not* be used as window or device context coordinates.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetDepth(self) -> int:
        """ 

`GetDepth`(*self*)[¶](#wx.Bitmap.GetDepth "Permalink to this definition")
Gets the colour depth of the bitmap.


A value of 1 indicates a monochrome bitmap.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetHandle(self) -> int:
        """ 

`GetHandle`(*self*)[¶](#wx.Bitmap.GetHandle "Permalink to this definition")
MSW-only method to fetch the windows handle for the bitmap.



Return type
*long*






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetHeight(self) -> int:
        """ 

`GetHeight`(*self*)[¶](#wx.Bitmap.GetHeight "Permalink to this definition")
Returns the height of the bitmap in physical pixels.



Return type
*int*





See also


[`GetWidth`](#wx.Bitmap.GetWidth "wx.Bitmap.GetWidth") , [`GetSize`](#wx.Bitmap.GetSize "wx.Bitmap.GetSize") , [`GetLogicalHeight`](#wx.Bitmap.GetLogicalHeight "wx.Bitmap.GetLogicalHeight")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetLogicalHeight(self) -> float:
        """ 

`GetLogicalHeight`(*self*)[¶](#wx.Bitmap.GetLogicalHeight "Permalink to this definition")
Returns the height of the bitmap in logical pixels.


See [`GetLogicalSize`](#wx.Bitmap.GetLogicalSize "wx.Bitmap.GetLogicalSize") for more information.



Return type
*float*





New in version 4.1/wxWidgets-3.1.6.




See also


[`GetLogicalWidth`](#wx.Bitmap.GetLogicalWidth "wx.Bitmap.GetLogicalWidth") , [`GetWidth`](#wx.Bitmap.GetWidth "wx.Bitmap.GetWidth")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetLogicalSize(self) -> 'Size':
        """ 

`GetLogicalSize`(*self*)[¶](#wx.Bitmap.GetLogicalSize "Permalink to this definition")
Returns the size of the bitmap in logical pixels.


For the platforms using DPI-independent pixels, i.e. those where `HAS_DPI_INDEPENDENT_PIXELS` is defined, such as wxOSX or wxGTK 3, this function returns the physical size of the bitmap, as returned by [`GetSize`](#wx.Bitmap.GetSize "wx.Bitmap.GetSize") , divided by its scale factor, as returned by [`GetScaleFactor`](#wx.Bitmap.GetScaleFactor "wx.Bitmap.GetScaleFactor") , while for the other platforms, it simply returns the same thing as [`GetSize`](#wx.Bitmap.GetSize "wx.Bitmap.GetSize") .


This ensures that the result of this function is always expressed in the pixel coordinates appropriate for the current platform, i.e. its return value is always in logical pixels, used for window and  [wx.DC](wx.DC.html#wx-dc) coordinates, whether these pixels are the same as physical pixels, which are returned by [`GetSize`](#wx.Bitmap.GetSize "wx.Bitmap.GetSize") , or not.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.5.




See also


[`GetLogicalWidth`](#wx.Bitmap.GetLogicalWidth "wx.Bitmap.GetLogicalWidth") , [`GetLogicalHeight`](#wx.Bitmap.GetLogicalHeight "wx.Bitmap.GetLogicalHeight") , [`GetSize`](#wx.Bitmap.GetSize "wx.Bitmap.GetSize")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetLogicalWidth(self) -> float:
        """ 

`GetLogicalWidth`(*self*)[¶](#wx.Bitmap.GetLogicalWidth "Permalink to this definition")
Returns the width of the bitmap in logical pixels.


See [`GetLogicalSize`](#wx.Bitmap.GetLogicalSize "wx.Bitmap.GetLogicalSize") for more information.



Return type
*float*





New in version 4.1/wxWidgets-3.1.6.




See also


[`GetLogicalHeight`](#wx.Bitmap.GetLogicalHeight "wx.Bitmap.GetLogicalHeight") , [`GetWidth`](#wx.Bitmap.GetWidth "wx.Bitmap.GetWidth")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetMask(self) -> 'Mask':
        """ 

`GetMask`(*self*)[¶](#wx.Bitmap.GetMask "Permalink to this definition")
Gets the associated mask (if any) which may have been loaded from a file or set for the bitmap.



Return type
 [wx.Mask](wx.Mask.html#wx-mask)





See also


[`SetMask`](#wx.Bitmap.SetMask "wx.Bitmap.SetMask") ,  [wx.Mask](wx.Mask.html#wx-mask)





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetPalette(self) -> 'Palette':
        """ 

`GetPalette`(*self*)[¶](#wx.Bitmap.GetPalette "Permalink to this definition")
Gets the associated palette (if any) which may have been loaded from a file or set for the bitmap.



Return type
 [wx.Palette](wx.Palette.html#wx-palette)





See also


 [wx.Palette](wx.Palette.html#wx-palette)





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetScaleFactor(self) -> float:
        """ 

`GetScaleFactor`(*self*)[¶](#wx.Bitmap.GetScaleFactor "Permalink to this definition")
Returns the scale factor of this bitmap.


Scale factor is 1 by default, but can be greater to indicate that the size of bitmap in logical, DPI-independent pixels is smaller than its actual size in physical pixels. Bitmaps with scale factor greater than 1 must be used in high `DPI` to appear sharp on the screen.


Note that the scale factor is only used in the ports where logical pixels are not the same as physical ones, such as wxOSX or `GTK3`, and this function always returns 1 under the other platforms.



Return type
*float*





New in version 2.9.5.




See also


[`SetScaleFactor`](#wx.Bitmap.SetScaleFactor "wx.Bitmap.SetScaleFactor") , [`GetLogicalWidth`](#wx.Bitmap.GetLogicalWidth "wx.Bitmap.GetLogicalWidth") , [`GetLogicalHeight`](#wx.Bitmap.GetLogicalHeight "wx.Bitmap.GetLogicalHeight") , [`GetLogicalSize`](#wx.Bitmap.GetLogicalSize "wx.Bitmap.GetLogicalSize")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetScaledHeight(self) -> float:
        """ 

`GetScaledHeight`(*self*)[¶](#wx.Bitmap.GetScaledHeight "Permalink to this definition")
Returns the height of the bitmap in logical pixels.


This is an older synonym for [`GetLogicalHeight`](#wx.Bitmap.GetLogicalHeight "wx.Bitmap.GetLogicalHeight") , use the new function in the new code.



Return type
*float*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetScaledSize(self) -> 'Size':
        """ 

`GetScaledSize`(*self*)[¶](#wx.Bitmap.GetScaledSize "Permalink to this definition")
Returns the size of the bitmap in logical pixels.


This is an older synonym for [`GetLogicalSize`](#wx.Bitmap.GetLogicalSize "wx.Bitmap.GetLogicalSize") , use the new function in the new code.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetScaledWidth(self) -> float:
        """ 

`GetScaledWidth`(*self*)[¶](#wx.Bitmap.GetScaledWidth "Permalink to this definition")
Returns the width of the bitmap in logical pixels.


This is an older synonym for [`GetLogicalWidth`](#wx.Bitmap.GetLogicalWidth "wx.Bitmap.GetLogicalWidth") , use the new function in the new code.



Return type
*float*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.Bitmap.GetSize "Permalink to this definition")
Returns the size of the bitmap in physical pixels.


The return value of this function doesn’t depend on the scale factor, it is always the physical size of the bitmap, i.e. corresponding to the actual number of pixels in it.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.0.




See also


[`GetHeight`](#wx.Bitmap.GetHeight "wx.Bitmap.GetHeight") , [`GetWidth`](#wx.Bitmap.GetWidth "wx.Bitmap.GetWidth") , [`GetLogicalSize`](#wx.Bitmap.GetLogicalSize "wx.Bitmap.GetLogicalSize")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetSubBitmap(self, rect: 'Rect') -> 'Bitmap':
        """ 

`GetSubBitmap`(*self*, *rect*)[¶](#wx.Bitmap.GetSubBitmap "Permalink to this definition")
Returns a sub bitmap of the current one as long as the rect belongs entirely to the bitmap.


This function preserves bit depth and mask information.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
 [wx.Bitmap](#wx-bitmap)






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.Bitmap.GetWidth "Permalink to this definition")
Returns the width of the bitmap in physical pixels.



Return type
*int*





See also


[`GetHeight`](#wx.Bitmap.GetHeight "wx.Bitmap.GetHeight") , [`GetSize`](#wx.Bitmap.GetSize "wx.Bitmap.GetSize") , [`GetLogicalWidth`](#wx.Bitmap.GetLogicalWidth "wx.Bitmap.GetLogicalWidth")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def HasAlpha(self) -> bool:
        """ 

`HasAlpha`(*self*)[¶](#wx.Bitmap.HasAlpha "Permalink to this definition")
Returns `True` if the bitmap has an alpha channel.


Note that the fact that a bitmap has an alpha channel doesn’t necessarily mean that it has any transparency, as all of its pixels could be using `wx.ALPHA_OPAQUE` value. To actually examine the alpha values, the bitmap can be converted to  [wx.Image](wx.Image.html#wx-image).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Bitmap.IsOk "Permalink to this definition")
Returns `True` if bitmap data is present.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def LoadFile(self, name, type=BITMAP_TYPE_ANY) -> bool:
        """ 

`LoadFile`(*self*, *name*, *type=BITMAP\_TYPE\_ANY*)[¶](#wx.Bitmap.LoadFile "Permalink to this definition")
Loads a bitmap from a file or resource.



Parameters
* **name** (*string*) – Either a filename or a Windows resource name. The meaning of name is determined by the *type* parameter.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – One of the  [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype) values; see the note in the class detailed description. Note that the `BITMAP_DEFAULT_TYPE` constant has different value under different wxWidgets ports. See the bitmap.h header for the value it takes for a specific port.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





Note


A palette may be associated with the bitmap if one exists (especially for colour Windows bitmaps), and if the code supports it. You can check if one has been created by using the [`GetPalette`](#wx.Bitmap.GetPalette "wx.Bitmap.GetPalette") member.




See also


[`SaveFile`](#wx.Bitmap.SaveFile "wx.Bitmap.SaveFile")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    @staticmethod
    def NewFromPNGData(data, size) -> 'Bitmap':
        """ 

*static* `NewFromPNGData`(*data*, *size*)[¶](#wx.Bitmap.NewFromPNGData "Permalink to this definition")
Loads a bitmap from the memory containing image data in `PNG` format.


This helper function provides the simplest way to create a wx.Bitmap from
in-memory `PNG` image data.



Parameters
* **data** –
* **size** (*int*) –



Return type
 [wx.Bitmap](#wx-bitmap)






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    @staticmethod
    def Rescale(bmp, sizeNeeded) -> None:
        """ 

*static* `Rescale`(*bmp*, *sizeNeeded*)[¶](#wx.Bitmap.Rescale "Permalink to this definition")
Rescale the given bitmap to the requested size.


This function is just a convenient wrapper for [`wx.Image.Rescale`](wx.Image.html#wx.Image.Rescale "wx.Image.Rescale") used to resize the given *bmp* to the requested size. If you need more control over resizing, e.g. to specify the quality option different from `IMAGE_QUALITY_NEAREST` used by this function, please use the  [wx.Image](wx.Image.html#wx-image) function directly instead.


Both the bitmap itself and size must be valid.



Parameters
* **bmp** ([*wx.Bitmap*](#wx.Bitmap "wx.Bitmap")) –
* **sizeNeeded** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def ResetAlpha(self) -> None:
        """ 

`ResetAlpha`(*self*)[¶](#wx.Bitmap.ResetAlpha "Permalink to this definition")
Remove alpha channel from the bitmap.


This is the same as calling [`UseAlpha`](#wx.Bitmap.UseAlpha "wx.Bitmap.UseAlpha") with `False` argument.




            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SaveFile(self, name, type, palette=None) -> bool:
        """ 

`SaveFile`(*self*, *name*, *type*, *palette=None*)[¶](#wx.Bitmap.SaveFile "Permalink to this definition")
Saves a bitmap in the named file.



Parameters
* **name** (*string*) – A filename. The meaning of name is determined by the type parameter.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – One of the  [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype) values; see the note in the class detailed description.
* **palette** ([*wx.Palette*](wx.Palette.html#wx.Palette "wx.Palette")) – An optional palette used for saving the bitmap.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





Note


Depending on how wxWidgets has been configured, not all formats may be available.




See also


[`LoadFile`](#wx.Bitmap.LoadFile "wx.Bitmap.LoadFile")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetDepth(self, depth: int) -> None:
        """ 

`SetDepth`(*self*, *depth*)[¶](#wx.Bitmap.SetDepth "Permalink to this definition")
Sets the depth member (does not affect the bitmap data).



Parameters
**depth** (*int*) – Bitmap depth.





Deprecated


This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetHandle(self, handle) -> None:
        """ 

`SetHandle`(*self*, *handle*)[¶](#wx.Bitmap.SetHandle "Permalink to this definition")
MSW-only method to set the windows handle for the bitmap.




            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetHeight(self, height: int) -> None:
        """ 

`SetHeight`(*self*, *height*)[¶](#wx.Bitmap.SetHeight "Permalink to this definition")
Sets the height member (does not affect the bitmap data).



Parameters
**height** (*int*) – Bitmap height in pixels.





Deprecated


This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetMask(self, mask: 'Mask') -> None:
        """ 

`SetMask`(*self*, *mask*)[¶](#wx.Bitmap.SetMask "Permalink to this definition")
Sets the mask for this bitmap.



Parameters
**mask** ([*wx.Mask*](wx.Mask.html#wx.Mask "wx.Mask")) – 





Note


The bitmap object owns the mask once this has been called.




Note


A mask can be set also for bitmap with an alpha channel but doing so under wxMSW is not recommended because performance of drawing such bitmap is not very good.




See also


[`GetMask`](#wx.Bitmap.GetMask "wx.Bitmap.GetMask") ,  [wx.Mask](wx.Mask.html#wx-mask)





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetMaskColour(self, colour) -> None:
        """ 

`SetMaskColour`(*self*, *colour*)[¶](#wx.Bitmap.SetMaskColour "Permalink to this definition")
Create a mask for this bitmap based on the pixels with the given colour.




            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetPalette(self, palette: 'Palette') -> None:
        """ 

`SetPalette`(*self*, *palette*)[¶](#wx.Bitmap.SetPalette "Permalink to this definition")
Sets the associated palette.


(Not implemented under GTK+).



Parameters
**palette** ([*wx.Palette*](wx.Palette.html#wx.Palette "wx.Palette")) – The palette to set.





See also


 [wx.Palette](wx.Palette.html#wx-palette)





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetScaleFactor(self, scale: float) -> None:
        """ 

`SetScaleFactor`(*self*, *scale*)[¶](#wx.Bitmap.SetScaleFactor "Permalink to this definition")
Sets the bitmap scale factor.


This doesn’t change the bitmap actual size or its contents, but changes its scale factor, so that it appears in a smaller size when it is drawn on screen: e.g. setting *scale* to 2 means that the bitmap will be twice smaller (in each direction) when drawn on screen in the ports in which logical and physical pixels differ (i.e. wxOSX and `GTK3`, but not wxMSW).


When creating a new bitmap, [`CreateWithDIPSize`](#wx.Bitmap.CreateWithDIPSize "wx.Bitmap.CreateWithDIPSize") can be used to specify the correct scale factor from the beginning.



Parameters
**scale** (*float*) – 





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetSize(self, size) -> None:
        """ 

`SetSize`(*self*, *size*)[¶](#wx.Bitmap.SetSize "Permalink to this definition")
Set the bitmap size (does not alter the existing native bitmap data or image size).




            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.Bitmap.SetWidth "Permalink to this definition")
Sets the width member (does not affect the bitmap data).



Parameters
**width** (*int*) – Bitmap width in pixels.





Deprecated


This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time.





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def UseAlpha(self, use: bool=True) -> None:
        """ 

`UseAlpha`(*self*, *use=True*)[¶](#wx.Bitmap.UseAlpha "Permalink to this definition")
Enable or disable use of alpha channel in this bitmap.


This function is only useful for 32bpp bitmaps and changes their format to use, or not use, the fourth byte of the pixel data for the alpha channel.


It currently is only implemented in wxMSW and wxOSX and simply always returns `False` under the other platforms.



Parameters
**use** (*bool*) – 



Returns
`True` if the operation succeeded, `False` otherwise, e.g. when trying to enable alpha channel support for a non-32bpp bitmap or if this operation is simply not supported by the current platform.





See also


[`HasAlpha`](#wx.Bitmap.HasAlpha "wx.Bitmap.HasAlpha") , [`ResetAlpha`](#wx.Bitmap.ResetAlpha "wx.Bitmap.ResetAlpha")





            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Bitmap.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Bitmap.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Bitmap.html
        """

    DIPSize: 'Size'  # `DIPSize`[¶](#wx.Bitmap.DIPSize "Permalink to this definition")See [`GetDIPSize`](#wx.Bitmap.GetDIPSize "wx.Bitmap.GetDIPSize")
    Depth: int  # `Depth`[¶](#wx.Bitmap.Depth "Permalink to this definition")See [`GetDepth`](#wx.Bitmap.GetDepth "wx.Bitmap.GetDepth") and [`SetDepth`](#wx.Bitmap.SetDepth "wx.Bitmap.SetDepth")
    Handle: int  # `Handle`[¶](#wx.Bitmap.Handle "Permalink to this definition")See [`GetHandle`](#wx.Bitmap.GetHandle "wx.Bitmap.GetHandle") and [`SetHandle`](#wx.Bitmap.SetHandle "wx.Bitmap.SetHandle")
    Height: int  # `Height`[¶](#wx.Bitmap.Height "Permalink to this definition")See [`GetHeight`](#wx.Bitmap.GetHeight "wx.Bitmap.GetHeight") and [`SetHeight`](#wx.Bitmap.SetHeight "wx.Bitmap.SetHeight")
    LogicalHeight: float  # `LogicalHeight`[¶](#wx.Bitmap.LogicalHeight "Permalink to this definition")See [`GetLogicalHeight`](#wx.Bitmap.GetLogicalHeight "wx.Bitmap.GetLogicalHeight")
    LogicalSize: 'Size'  # `LogicalSize`[¶](#wx.Bitmap.LogicalSize "Permalink to this definition")See [`GetLogicalSize`](#wx.Bitmap.GetLogicalSize "wx.Bitmap.GetLogicalSize")
    LogicalWidth: float  # `LogicalWidth`[¶](#wx.Bitmap.LogicalWidth "Permalink to this definition")See [`GetLogicalWidth`](#wx.Bitmap.GetLogicalWidth "wx.Bitmap.GetLogicalWidth")
    Mask: '_Mask'  # `Mask`[¶](#wx.Bitmap.Mask "Permalink to this definition")See [`GetMask`](#wx.Bitmap.GetMask "wx.Bitmap.GetMask") and [`SetMask`](#wx.Bitmap.SetMask "wx.Bitmap.SetMask")
    Palette: '_Palette'  # `Palette`[¶](#wx.Bitmap.Palette "Permalink to this definition")See [`GetPalette`](#wx.Bitmap.GetPalette "wx.Bitmap.GetPalette") and [`SetPalette`](#wx.Bitmap.SetPalette "wx.Bitmap.SetPalette")
    ScaleFactor: float  # `ScaleFactor`[¶](#wx.Bitmap.ScaleFactor "Permalink to this definition")See [`GetScaleFactor`](#wx.Bitmap.GetScaleFactor "wx.Bitmap.GetScaleFactor") and [`SetScaleFactor`](#wx.Bitmap.SetScaleFactor "wx.Bitmap.SetScaleFactor")
    ScaledHeight: float  # `ScaledHeight`[¶](#wx.Bitmap.ScaledHeight "Permalink to this definition")See [`GetScaledHeight`](#wx.Bitmap.GetScaledHeight "wx.Bitmap.GetScaledHeight")
    ScaledSize: 'Size'  # `ScaledSize`[¶](#wx.Bitmap.ScaledSize "Permalink to this definition")See [`GetScaledSize`](#wx.Bitmap.GetScaledSize "wx.Bitmap.GetScaledSize")
    ScaledWidth: float  # `ScaledWidth`[¶](#wx.Bitmap.ScaledWidth "Permalink to this definition")See [`GetScaledWidth`](#wx.Bitmap.GetScaledWidth "wx.Bitmap.GetScaledWidth")
    Size: '_Size'  # `Size`[¶](#wx.Bitmap.Size "Permalink to this definition")See [`GetSize`](#wx.Bitmap.GetSize "wx.Bitmap.GetSize") and [`SetSize`](#wx.Bitmap.SetSize "wx.Bitmap.SetSize")
    Width: int  # `Width`[¶](#wx.Bitmap.Width "Permalink to this definition")See [`GetWidth`](#wx.Bitmap.GetWidth "wx.Bitmap.GetWidth") and [`SetWidth`](#wx.Bitmap.SetWidth "wx.Bitmap.SetWidth")



ALPHA_OPAQUE: int

class AlphaPixelData_Accessor:
    """ **Possible constructors**:



```
AlphaPixelData_Accessor(data)

AlphaPixelData_Accessor(bmp, data)

AlphaPixelData_Accessor()

```


  


        Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AlphaPixelData_Accessor.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, data)*



Parameters
**data** (`AlphaPixelData`) – 






---

  



**\_\_init\_\_** *(self, bmp, data)*



Parameters
* **bmp** (`Bitmap`) –
* **data** (`AlphaPixelData`) –






---

  



**\_\_init\_\_** *(self)*




---

  





            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def Get(self) -> Any:
        """ 

`Get`(*self*)[¶](#wx.AlphaPixelData_Accessor.Get "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.AlphaPixelData_Accessor.IsOk "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def MoveTo(self, data, x, y) -> None:
        """ 

`MoveTo`(*self*, *data*, *x*, *y*)[¶](#wx.AlphaPixelData_Accessor.MoveTo "Permalink to this definition")

Parameters
* **data** (`AlphaPixelData`) –
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def Offset(self, data, x, y) -> None:
        """ 

`Offset`(*self*, *data*, *x*, *y*)[¶](#wx.AlphaPixelData_Accessor.Offset "Permalink to this definition")

Parameters
* **data** (`AlphaPixelData`) –
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def OffsetX(self, data, x) -> None:
        """ 

`OffsetX`(*self*, *data*, *x*)[¶](#wx.AlphaPixelData_Accessor.OffsetX "Permalink to this definition")

Parameters
* **data** (`AlphaPixelData`) –
* **x** (*int*) –






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def OffsetY(self, data, y) -> None:
        """ 

`OffsetY`(*self*, *data*, *y*)[¶](#wx.AlphaPixelData_Accessor.OffsetY "Permalink to this definition")

Parameters
* **data** (`AlphaPixelData`) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def Reset(self, data: AlphaPixelData) -> None:
        """ 

`Reset`(*self*, *data*)[¶](#wx.AlphaPixelData_Accessor.Reset "Permalink to this definition")

Parameters
**data** (`AlphaPixelData`) – 






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def Set(self, red, green, blue, alpha) -> None:
        """ 

`Set`(*self*, *red*, *green*, *blue*, *alpha*)[¶](#wx.AlphaPixelData_Accessor.Set "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.AlphaPixelData_Accessor.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.AlphaPixelData_Accessor.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """

    def nextPixel(self) -> None:
        """ 

`nextPixel`(*self*)[¶](#wx.AlphaPixelData_Accessor.nextPixel "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.AlphaPixelData_Accessor.html
        """



_Bitmap: TypeAlias = Bitmap

class AnyButton(Control):
    """ **Possible constructors**:



```
AnyButton()

```


A class for common button functionality used as the base for the
various button classes.


  


        Source: https://docs.wxpython.org/wx.AnyButton.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.AnyButton.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def GetBitmap(self) -> 'Bitmap':
        """ 

`GetBitmap`(*self*)[¶](#wx.AnyButton.GetBitmap "Permalink to this definition")
Return the bitmap shown by the button.


The returned bitmap may be invalid only if the button doesn’t show any images.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





New in version 2.9.1.




See also


[`SetBitmap`](#wx.AnyButton.SetBitmap "wx.AnyButton.SetBitmap")





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def GetBitmapCurrent(self) -> 'Bitmap':
        """ 

`GetBitmapCurrent`(*self*)[¶](#wx.AnyButton.GetBitmapCurrent "Permalink to this definition")
Returns the bitmap used when the mouse is over the button.


The returned bitmap is only valid if [`SetBitmapCurrent`](#wx.AnyButton.SetBitmapCurrent "wx.AnyButton.SetBitmapCurrent") had been previously called.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





New in version 2.9.1: (available as *BitmapButton.GetBitmapHover()* in previous versions)





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def GetBitmapDisabled(self) -> 'Bitmap':
        """ 

`GetBitmapDisabled`(*self*)[¶](#wx.AnyButton.GetBitmapDisabled "Permalink to this definition")
Returns the bitmap used for the disabled state.


The returned bitmap is only valid if [`SetBitmapDisabled`](#wx.AnyButton.SetBitmapDisabled "wx.AnyButton.SetBitmapDisabled") had been previously called.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





New in version 2.9.1: (available in  [wx.BitmapButton](wx.BitmapButton.html#wx-bitmapbutton) only in previous versions)





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def GetBitmapFocus(self) -> 'Bitmap':
        """ 

`GetBitmapFocus`(*self*)[¶](#wx.AnyButton.GetBitmapFocus "Permalink to this definition")
Returns the bitmap used for the focused state.


The returned bitmap is only valid if [`SetBitmapFocus`](#wx.AnyButton.SetBitmapFocus "wx.AnyButton.SetBitmapFocus") had been previously called.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





New in version 2.9.1: (available in  [wx.BitmapButton](wx.BitmapButton.html#wx-bitmapbutton) only in previous versions)





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def GetBitmapLabel(self) -> 'Bitmap':
        """ 

`GetBitmapLabel`(*self*)[¶](#wx.AnyButton.GetBitmapLabel "Permalink to this definition")
Returns the bitmap for the normal state.


This is exactly the same as [`GetBitmap`](#wx.AnyButton.GetBitmap "wx.AnyButton.GetBitmap") but uses a name backwards-compatible with  [wx.BitmapButton](wx.BitmapButton.html#wx-bitmapbutton).



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





New in version 2.9.1: (available in  [wx.BitmapButton](wx.BitmapButton.html#wx-bitmapbutton) only in previous versions)




See also


[`SetBitmap`](#wx.AnyButton.SetBitmap "wx.AnyButton.SetBitmap") , [`SetBitmapLabel`](#wx.AnyButton.SetBitmapLabel "wx.AnyButton.SetBitmapLabel")





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def GetBitmapMargins(self) -> 'Size':
        """ 

`GetBitmapMargins`(*self*)[¶](#wx.AnyButton.GetBitmapMargins "Permalink to this definition")
Get the margins between the bitmap and the text of the button.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.1.




See also


[`SetBitmapMargins`](#wx.AnyButton.SetBitmapMargins "wx.AnyButton.SetBitmapMargins")





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def GetBitmapPressed(self) -> 'Bitmap':
        """ 

`GetBitmapPressed`(*self*)[¶](#wx.AnyButton.GetBitmapPressed "Permalink to this definition")
Returns the bitmap used when the button is pressed.


The returned bitmap is only valid if [`SetBitmapPressed`](#wx.AnyButton.SetBitmapPressed "wx.AnyButton.SetBitmapPressed") had been previously called.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





New in version 2.9.1: (available as *BitmapButton.GetBitmapSelected()* in previous versions)





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def SetBitmap(self, bitmap, dir=LEFT) -> None:
        """ 

`SetBitmap`(*self*, *bitmap*, *dir=LEFT*)[¶](#wx.AnyButton.SetBitmap "Permalink to this definition")
Sets the bitmap to display in the button.


The bitmap is displayed together with the button label. This method sets up a single bitmap which is used in all button states, use [`SetBitmapDisabled`](#wx.AnyButton.SetBitmapDisabled "wx.AnyButton.SetBitmapDisabled") , [`SetBitmapPressed`](#wx.AnyButton.SetBitmapPressed "wx.AnyButton.SetBitmapPressed") , [`SetBitmapCurrent`](#wx.AnyButton.SetBitmapCurrent "wx.AnyButton.SetBitmapCurrent") or [`SetBitmapFocus`](#wx.AnyButton.SetBitmapFocus "wx.AnyButton.SetBitmapFocus") to change the individual images used in different states.



Parameters
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – The bitmap bundle containing the resolution-dependent bitmaps to display in the button. At default `DPI`, the size of the bitmap is determined by the default bundle size, i.e. the value returned from [`wx.BitmapBundle.GetDefaultSize`](wx.BitmapBundle.html#wx.BitmapBundle.GetDefaultSize "wx.BitmapBundle.GetDefaultSize") . If the bitmap bundle is invalid, any currently shown bitmaps are removed from the button.
* **dir** ([*Direction*](wx.DataObject.Direction.enumeration.html "Direction")) – The position of the bitmap inside the button. By default it is positioned to the left of the text, near to the left button border. Other possible values include `wx.RIGHT`, `wx.TOP` and `wx.BOTTOM`.





New in version 2.9.1.




See also


[`SetBitmapPosition`](#wx.AnyButton.SetBitmapPosition "wx.AnyButton.SetBitmapPosition") , [`SetBitmapMargins`](#wx.AnyButton.SetBitmapMargins "wx.AnyButton.SetBitmapMargins")





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def SetBitmapCurrent(self, bitmap: 'BitmapBundle') -> None:
        """ 

`SetBitmapCurrent`(*self*, *bitmap*)[¶](#wx.AnyButton.SetBitmapCurrent "Permalink to this definition")
Sets the bitmap to be shown when the mouse is over the button.


If *bitmap* is invalid, the normal bitmap will be used in the current state.



Parameters
**bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 





New in version 2.9.1: (available as *BitmapButton.SetBitmapHover()* in previous versions)




See also


[`GetBitmapCurrent`](#wx.AnyButton.GetBitmapCurrent "wx.AnyButton.GetBitmapCurrent")





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def SetBitmapDisabled(self, bitmap: 'BitmapBundle') -> None:
        """ 

`SetBitmapDisabled`(*self*, *bitmap*)[¶](#wx.AnyButton.SetBitmapDisabled "Permalink to this definition")
Sets the bitmap for the disabled button appearance.


If *bitmap* is invalid, the disabled bitmap is set to the automatically generated greyed out version of the normal bitmap, i.e. the same bitmap as is used by default if this method is not called at all. Use [`SetBitmap`](#wx.AnyButton.SetBitmap "wx.AnyButton.SetBitmap") with an invalid bitmap to remove the bitmap completely (for all states).



Parameters
**bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 





New in version 2.9.1: (available in  [wx.BitmapButton](wx.BitmapButton.html#wx-bitmapbutton) only in previous versions)




See also


[`GetBitmapDisabled`](#wx.AnyButton.GetBitmapDisabled "wx.AnyButton.GetBitmapDisabled") , [`SetBitmapLabel`](#wx.AnyButton.SetBitmapLabel "wx.AnyButton.SetBitmapLabel") , [`SetBitmapPressed`](#wx.AnyButton.SetBitmapPressed "wx.AnyButton.SetBitmapPressed") , [`SetBitmapFocus`](#wx.AnyButton.SetBitmapFocus "wx.AnyButton.SetBitmapFocus")





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def SetBitmapFocus(self, bitmap: 'BitmapBundle') -> None:
        """ 

`SetBitmapFocus`(*self*, *bitmap*)[¶](#wx.AnyButton.SetBitmapFocus "Permalink to this definition")
Sets the bitmap for the button appearance when it has the keyboard focus.


If *bitmap* is invalid, the normal bitmap will be used in the focused state.



Parameters
**bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 





New in version 2.9.1: (available in  [wx.BitmapButton](wx.BitmapButton.html#wx-bitmapbutton) only in previous versions)




See also


[`GetBitmapFocus`](#wx.AnyButton.GetBitmapFocus "wx.AnyButton.GetBitmapFocus") , [`SetBitmapLabel`](#wx.AnyButton.SetBitmapLabel "wx.AnyButton.SetBitmapLabel") , [`SetBitmapPressed`](#wx.AnyButton.SetBitmapPressed "wx.AnyButton.SetBitmapPressed") , [`SetBitmapDisabled`](#wx.AnyButton.SetBitmapDisabled "wx.AnyButton.SetBitmapDisabled")





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def SetBitmapLabel(self, bitmap: 'BitmapBundle') -> None:
        """ 

`SetBitmapLabel`(*self*, *bitmap*)[¶](#wx.AnyButton.SetBitmapLabel "Permalink to this definition")
Sets the bitmap label for the button.



Parameters
**bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 





New in version 2.9.1: (available in  [wx.BitmapButton](wx.BitmapButton.html#wx-bitmapbutton) only in previous versions)




Note


This is the bitmap used for the unselected state, and for all other states if no other bitmaps are provided.




See also


[`SetBitmap`](#wx.AnyButton.SetBitmap "wx.AnyButton.SetBitmap") , [`GetBitmapLabel`](#wx.AnyButton.GetBitmapLabel "wx.AnyButton.GetBitmapLabel")





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def SetBitmapMargins(self, *args, **kw) -> None:
        """ 

`SetBitmapMargins`(*self*, *\*args*, *\*\*kw*)[¶](#wx.AnyButton.SetBitmapMargins "Permalink to this definition")
Set the margins between the bitmap and the text of the button.


This method is currently only implemented under MSW. If it is not called, default margin is used around the bitmap.



New in version 2.9.1.




See also


[`SetBitmap`](#wx.AnyButton.SetBitmap "wx.AnyButton.SetBitmap") , [`SetBitmapPosition`](#wx.AnyButton.SetBitmapPosition "wx.AnyButton.SetBitmapPosition")



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetBitmapMargins** *(self, x, y)*



Parameters
* **x** (*int*) –
* **y** (*int*) –






---

  



**SetBitmapMargins** *(self, sz)*



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def SetBitmapPosition(self, dir: int) -> None:
        """ 

`SetBitmapPosition`(*self*, *dir*)[¶](#wx.AnyButton.SetBitmapPosition "Permalink to this definition")
Set the position at which the bitmap is displayed.


This method should only be called if the button does have an associated bitmap.



Parameters
**dir** ([*Direction*](wx.DataObject.Direction.enumeration.html "Direction")) – Direction in which the bitmap should be positioned, one of `wx.LEFT`, `wx.RIGHT`, `wx.TOP` or `wx.BOTTOM`.





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    def SetBitmapPressed(self, bitmap: 'BitmapBundle') -> None:
        """ 

`SetBitmapPressed`(*self*, *bitmap*)[¶](#wx.AnyButton.SetBitmapPressed "Permalink to this definition")
Sets the bitmap for the selected (depressed) button appearance.



Parameters
**bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 





New in version 2.9.1: (available as *BitmapButton.SetBitmapSelected()* in previous versions)





            Source: https://docs.wxpython.org/wx.AnyButton.html
        """

    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.AnyButton.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.AnyButton.GetBitmap "wx.AnyButton.GetBitmap") and [`SetBitmap`](#wx.AnyButton.SetBitmap "wx.AnyButton.SetBitmap")
    BitmapCurrent: 'Bitmap'  # `BitmapCurrent`[¶](#wx.AnyButton.BitmapCurrent "Permalink to this definition")See [`GetBitmapCurrent`](#wx.AnyButton.GetBitmapCurrent "wx.AnyButton.GetBitmapCurrent") and [`SetBitmapCurrent`](#wx.AnyButton.SetBitmapCurrent "wx.AnyButton.SetBitmapCurrent")
    BitmapDisabled: 'Bitmap'  # `BitmapDisabled`[¶](#wx.AnyButton.BitmapDisabled "Permalink to this definition")See [`GetBitmapDisabled`](#wx.AnyButton.GetBitmapDisabled "wx.AnyButton.GetBitmapDisabled") and [`SetBitmapDisabled`](#wx.AnyButton.SetBitmapDisabled "wx.AnyButton.SetBitmapDisabled")
    BitmapFocus: 'Bitmap'  # `BitmapFocus`[¶](#wx.AnyButton.BitmapFocus "Permalink to this definition")See [`GetBitmapFocus`](#wx.AnyButton.GetBitmapFocus "wx.AnyButton.GetBitmapFocus") and [`SetBitmapFocus`](#wx.AnyButton.SetBitmapFocus "wx.AnyButton.SetBitmapFocus")
    BitmapLabel: 'Bitmap'  # `BitmapLabel`[¶](#wx.AnyButton.BitmapLabel "Permalink to this definition")See [`GetBitmapLabel`](#wx.AnyButton.GetBitmapLabel "wx.AnyButton.GetBitmapLabel") and [`SetBitmapLabel`](#wx.AnyButton.SetBitmapLabel "wx.AnyButton.SetBitmapLabel")
    BitmapMargins: 'Size'  # `BitmapMargins`[¶](#wx.AnyButton.BitmapMargins "Permalink to this definition")See [`GetBitmapMargins`](#wx.AnyButton.GetBitmapMargins "wx.AnyButton.GetBitmapMargins") and [`SetBitmapMargins`](#wx.AnyButton.SetBitmapMargins "wx.AnyButton.SetBitmapMargins")
    BitmapPressed: 'Bitmap'  # `BitmapPressed`[¶](#wx.AnyButton.BitmapPressed "Permalink to this definition")See [`GetBitmapPressed`](#wx.AnyButton.GetBitmapPressed "wx.AnyButton.GetBitmapPressed") and [`SetBitmapPressed`](#wx.AnyButton.SetBitmapPressed "wx.AnyButton.SetBitmapPressed")



RIGHT: int

TOP: int

BOTTOM: int

LEFT: int

class App(PyApp,AppConsole):
    """ The `wx.App` class represents the application and is used to:



> * bootstrap the wxPython system and initialize the underlying
> gui toolkit
> * set and get application-wide properties
> * implement the native windowing system main message or event loop,
> and to dispatch events to window instances
> * etc.


Every wx application must have a single `wx.App` instance, and all
creation of UI objects should be delayed until after the `wx.App` object
has been created in order to ensure that the gui platform and wxWidgets
have been fully initialized.


Normally you would derive from this class and implement an `OnInit`
method that creates a frame and then calls `self.SetTopWindow(frame)`,
however `wx.App` is also usable on its own without derivation.



Note


In Python the wrapper for the C++ class `wxApp` has been renamed tp
[`wx.PyApp`](wx.PyApp.html#wx.PyApp "wx.PyApp"). This `wx.App` class derives from `wx.PyApp`, and is
responsible for handling the Python-specific needs for bootstrapping the
wxWidgets library and other Python integration related requirements.



  


        Source: https://docs.wxpython.org/wx.App.html
    """
    def __init__(self, redirect=False, filename=None, useBestVisual=False, clearSigInt=True) -> None:
        """ 

`__init__`(*self*, *redirect=False*, *filename=None*, *useBestVisual=False*, *clearSigInt=True*)[¶](#wx.App.__init__ "Permalink to this definition")
Construct a `wx.App` object.



Parameters
* **redirect** – Should `sys.stdout` and `sys.stderr` be
redirected? Defaults to False. If `filename` is None
then output will be redirected to a window that pops up
as needed. (You can control what kind of window is created
for the output by resetting the class variable
`outputWindowClass` to a class of your choosing.)
* **filename** – The name of a file to redirect output to, if
redirect is True.
* **useBestVisual** – Should the app try to use the best
available visual provided by the system (only relevant on
systems that have more than one visual.) This parameter
must be used instead of calling `SetUseBestVisual` later
on because it must be set before the underlying GUI
toolkit is initialized.
* **clearSigInt** – Should SIGINT be cleared? This allows the
app to terminate upon a Ctrl-C in the console like other
GUI apps will.





Note


You should override OnInit to do application
initialization to ensure that the system, toolkit and
wxWidgets are fully initialized.





            Source: https://docs.wxpython.org/wx.App.html
        """

    @staticmethod
    def Get() -> 'App':
        """ 

*static* `Get`()[¶](#wx.App.Get "Permalink to this definition")
A staticmethod returning the currently active application object.
Essentially just a more pythonic version of `GetApp`.




            Source: https://docs.wxpython.org/wx.App.html
        """

    def InitLocale(self) -> None:
        """ 

`InitLocale`(*self*)[¶](#wx.App.InitLocale "Permalink to this definition")
Starting with version 3.8 on Windows, Python is now setting the locale
to what is defined by the system as the default locale. This causes
problems with wxWidgets which expects to be able to manage the locale
via the wx.Locale class, so the locale will be reset here to be the
default “C” locale settings.


If you have troubles from the default behavior of this method you can
override it in a derived class to behave differently. Please report
the problem you encountered.




            Source: https://docs.wxpython.org/wx.App.html
        """

    def MainLoop(self) -> None:
        """ 

`MainLoop`(*self*)[¶](#wx.App.MainLoop "Permalink to this definition")
Execute the main GUI event loop




            Source: https://docs.wxpython.org/wx.App.html
        """

    def OnPreInit(self) -> None:
        """ 

`OnPreInit`(*self*)[¶](#wx.App.OnPreInit "Permalink to this definition")
Things that must be done after \_BootstrapApp has done its thing, but
would be nice if they were already done by the time that OnInit is
called. This can be overridden in derived classes, but be sure to call
this method from there.




            Source: https://docs.wxpython.org/wx.App.html
        """

    def RedirectStdio(self, filename=None) -> None:
        """ 

`RedirectStdio`(*self*, *filename=None*)[¶](#wx.App.RedirectStdio "Permalink to this definition")
Redirect sys.stdout and sys.stderr to a file or a popup window.




            Source: https://docs.wxpython.org/wx.App.html
        """

    def ResetLocale(self) -> None:
        """ 

`ResetLocale`(*self*)[¶](#wx.App.ResetLocale "Permalink to this definition")
This method is now a NOP and will be deprecated.




            Source: https://docs.wxpython.org/wx.App.html
        """

    def RestoreStdio(self) -> None:
        """ 

`RestoreStdio`(*self*)[¶](#wx.App.RestoreStdio "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.App.html
        """

    def SetOutputWindowAttributes(self, title=None, pos=None, size=None) -> None:
        """ 

`SetOutputWindowAttributes`(*self*, *title=None*, *pos=None*, *size=None*)[¶](#wx.App.SetOutputWindowAttributes "Permalink to this definition")
Set the title, position and/or size of the output window if the stdio
has been redirected. This should be called before any output would
cause the output window to be created.




            Source: https://docs.wxpython.org/wx.App.html
        """

    def SetTopWindow(self, frame) -> None:
        """ 

`SetTopWindow`(*self*, *frame*)[¶](#wx.App.SetTopWindow "Permalink to this definition")
Set the “main” top level window, which will be used for the parent of
the on-demand output window as well as for dialogs that do not have
an explicit parent set.




            Source: https://docs.wxpython.org/wx.App.html
        """

    def __del__(self) -> None:
        """ 

`__del__`(*self*)[¶](#wx.App.__del__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.App.html
        """



class PyApp(AppConsole):
    """ **Possible constructors**:



```
PyApp()

```


The App class represents the application itself when USE\_GUI=1.


  


        Source: https://docs.wxpython.org/wx.PyApp.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.PyApp.__init__ "Permalink to this definition")
Constructor.


Called implicitly with a definition of a  [wx.App](wx.App.html#wx-app) object.




            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    @staticmethod
    def GTKAllowDiagnosticsControl() -> None:
        """ 

*static* `GTKAllowDiagnosticsControl`()[¶](#wx.PyApp.GTKAllowDiagnosticsControl "Permalink to this definition")
Allows wxWidgets to selectively suppress some GTK messages.


This function can be called to allow wxWidgets to control GTK message logging. You must *not* call it if your application calls the `g_log_set_writer_func()` function itself, as this function can be only called once.


It is recommended to call this function in your overridden version of `wx.App.OnInit` to allow wxWidgets to suppress some spurious GTK error messages, e.g. the ones that happen whenever  [wx.Notebook](wx.Notebook.html#wx-notebook) pages are removed with the current GTK versions.



New in version 4.2/wxWidgets-3.2.1.




Availability


Only available for GTK.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    @staticmethod
    def GTKSuppressDiagnostics(flags: int=-1) -> None:
        """ 

*static* `GTKSuppressDiagnostics`(*flags=-1*)[¶](#wx.PyApp.GTKSuppressDiagnostics "Permalink to this definition")
Disables the printing of various GTK messages.


This function can be called to suppress GTK diagnostic messages that are output on the standard error stream by default.


The default value of the argument disables all messages, but you can pass in a mask flag to specifically disable only particular categories of messages.


Note that this function only works when using glib 2.50 (released in September 2016) or later and does nothing with the older versions of the library.



Parameters
**flags** (*int*) – The mask for the types of messages to suppress. Refer to the glib documentation for the `GLogLevelFlags` enum, which defines the various message types.




GTK port.



New in version 4.1/wxWidgets-3.1.6.




Availability


Only available for GTK.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def GetAssertMode(self) -> 'AppAssertMode':
        """ 

`GetAssertMode`(*self*)[¶](#wx.PyApp.GetAssertMode "Permalink to this definition")
Returns the current mode for how the application responds to asserts.



Return type
 [wx.AppAssertMode](wx.AppAssertMode.enumeration.html#wx-appassertmode)






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    @staticmethod
    def GetComCtl32Version() -> int:
        """ 

*static* `GetComCtl32Version`()[¶](#wx.PyApp.GetComCtl32Version "Permalink to this definition")

> Returns 400, 470, 471, etc. for comctl32.dll 4.00, 4.70, 4.71 or 0 if
> it wasn’t found at all. Raises an exception on non-Windows platforms.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def GetDisplayMode(self) -> 'VideoMode':
        """ 

`GetDisplayMode`(*self*)[¶](#wx.PyApp.GetDisplayMode "Permalink to this definition")
Get display mode that is used use.


This is only used in framebuffer wxWidgets ports such as wxDFB.



Return type
 [wx.VideoMode](wx.VideoMode.html#wx-videomode)






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def GetExitOnFrameDelete(self) -> bool:
        """ 

`GetExitOnFrameDelete`(*self*)[¶](#wx.PyApp.GetExitOnFrameDelete "Permalink to this definition")
Returns `True` if the application will exit when the top-level frame is deleted.



Return type
*bool*





See also


[`SetExitOnFrameDelete`](#wx.PyApp.SetExitOnFrameDelete "wx.PyApp.SetExitOnFrameDelete")





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def GetLayoutDirection(self) -> int:
        """ 

`GetLayoutDirection`(*self*)[¶](#wx.PyApp.GetLayoutDirection "Permalink to this definition")
Return the layout direction for the current locale or `Layout_Default` if it’s unknown.



Return type
 [wx.LayoutDirection](wx.LayoutDirection.enumeration.html#wx-layoutdirection)






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    @staticmethod
    def GetMainTopWindow() -> 'Window':
        """ 

*static* `GetMainTopWindow`()[¶](#wx.PyApp.GetMainTopWindow "Permalink to this definition")
Returns a pointer to the top application window if any.


This function is safe to call even before creating, or after destroying, the application object, as it simply returns `None` if it doesn’t exist. Otherwise it’s equivalent to calling TheApp-> [`GetTopWindow`](#wx.PyApp.GetTopWindow "wx.PyApp.GetTopWindow") .



Return type
 [wx.Window](wx.Window.html#wx-window)





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def GetTopWindow(self) -> 'Window':
        """ 

`GetTopWindow`(*self*)[¶](#wx.PyApp.GetTopWindow "Permalink to this definition")
Returns a pointer to the top window.



Return type
 [wx.Window](wx.Window.html#wx-window)





Note


If the top window hasn’t been set using [`SetTopWindow`](#wx.PyApp.SetTopWindow "wx.PyApp.SetTopWindow") , this function will find the first top-level window (frame or dialog or instance of  [wx.TopLevelWindow](wx.TopLevelWindow.html#wx-toplevelwindow)) from the internal top level window list and return that.




See also


[`SetTopWindow`](#wx.PyApp.SetTopWindow "wx.PyApp.SetTopWindow")





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def GetUseBestVisual(self) -> bool:
        """ 

`GetUseBestVisual`(*self*)[¶](#wx.PyApp.GetUseBestVisual "Permalink to this definition")
Returns `True` if the application will use the best visual on systems that support different visuals, `False` otherwise.



Return type
*bool*





See also


[`SetUseBestVisual`](#wx.PyApp.SetUseBestVisual "wx.PyApp.SetUseBestVisual")





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def IsActive(self) -> bool:
        """ 

`IsActive`(*self*)[¶](#wx.PyApp.IsActive "Permalink to this definition")
Returns `True` if the application is active, i.e. if one of its windows is currently in the foreground.


If this function returns `False` and you need to attract users attention to the application, you may use [`wx.TopLevelWindow.RequestUserAttention`](wx.TopLevelWindow.html#wx.TopLevelWindow.RequestUserAttention "wx.TopLevelWindow.RequestUserAttention") to do it.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    @staticmethod
    def IsDisplayAvailable() -> bool:
        """ 

*static* `IsDisplayAvailable`()[¶](#wx.PyApp.IsDisplayAvailable "Permalink to this definition")

> Returns True if the application is able to connect to the system’s
> display, or whatever the equivallent is for the platform.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def MacHideApp(self) -> None:
        """ 

`MacHideApp`(*self*)[¶](#wx.PyApp.MacHideApp "Permalink to this definition")
Hide all application windows just as the user can do with the
system Hide command. Mac only.




            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def MacNewFile(self) -> None:
        """ 

`MacNewFile`(*self*)[¶](#wx.PyApp.MacNewFile "Permalink to this definition")
Called in response of an “open-application” Apple event.


Override this to create a new document in your app.



Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def MacOpenFile(self, fileName: str) -> None:
        """ 

`MacOpenFile`(*self*, *fileName*)[¶](#wx.PyApp.MacOpenFile "Permalink to this definition")
Called in response of an “open-document” Apple event.



Parameters
**fileName** (*string*) – 





Deprecated


This function is kept mostly for backwards compatibility. Please override [`wx.App.MacOpenFiles`](#wx.PyApp.MacOpenFiles "wx.PyApp.MacOpenFiles") method instead in any new code.




Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def MacOpenFiles(self, fileNames: list[str]) -> None:
        """ 

`MacOpenFiles`(*self*, *fileNames*)[¶](#wx.PyApp.MacOpenFiles "Permalink to this definition")
Called in response of an openFiles message.


You need to override this method in order to open one or more document files after the user double clicked on it or if the files and/or folders were dropped on either the application in the dock or the application icon in Finder.


By default this method calls MacOpenFile for each file/folder.



Parameters
**fileNames** (*list of strings*) – 





New in version 2.9.3.




Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def MacOpenURL(self, url: str) -> None:
        """ 

`MacOpenURL`(*self*, *url*)[¶](#wx.PyApp.MacOpenURL "Permalink to this definition")
Called in response of a “get-url” Apple event.



Parameters
**url** (*string*) – 





Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def MacPrintFile(self, fileName: str) -> None:
        """ 

`MacPrintFile`(*self*, *fileName*)[¶](#wx.PyApp.MacPrintFile "Permalink to this definition")
Called in response of a “print-document” Apple event.



Parameters
**fileName** (*string*) – 





Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def MacReopenApp(self) -> None:
        """ 

`MacReopenApp`(*self*)[¶](#wx.PyApp.MacReopenApp "Permalink to this definition")
Called in response of a “reopen-application” Apple event.



Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def OSXEnableAutomaticTabbing(self, enable: bool) -> None:
        """ 

`OSXEnableAutomaticTabbing`(*self*, *enable*)[¶](#wx.PyApp.OSXEnableAutomaticTabbing "Permalink to this definition")
Enable the automatic tabbing features of macOS.


This feature is native to the operating system. When it is enabled, macOS will automatically place windows inside tabs and show a tab bar in the application. Entries are also added to the View menu to show/hide the tab bar.



Parameters
**enable** (*bool*) – 





New in version 4.1/wxWidgets-3.1.4.




Note


Requires macOS 10.12+, does nothing under earlier OS versions.




Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def OSXIsGUIApplication(self) -> bool:
        """ 

`OSXIsGUIApplication`(*self*)[¶](#wx.PyApp.OSXIsGUIApplication "Permalink to this definition")
May be overridden to indicate that the application is not a foreground GUI application under macOS.


This method is called during the application startup and returns `True` by default. In this case, wxWidgets ensures that the application is ran as a foreground, GUI application so that the user can interact with it normally, even if it is not bundled. If this is undesired, i.e. if the application doesn’t need to be brought to the foreground, this method can be overridden to return `False`.


Notice that overriding it doesn’t make any difference for the bundled applications which are always foreground unless `LSBackgroundOnly` key is specified in the `Info.plist` file.



Return type
*bool*





New in version 4.0/wxWidgets-3.0.1.




Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def SafeYield(self, win, onlyIfNeeded) -> bool:
        """ 

`SafeYield`(*self*, *win*, *onlyIfNeeded*)[¶](#wx.PyApp.SafeYield "Permalink to this definition")
This function is similar to [`wx.Yield`](wx.functions.html#wx.Yield "wx.Yield") , except that it disables the user input to all program windows before calling [`wx.AppConsole.Yield`](wx.AppConsole.html#wx.AppConsole.Yield "wx.AppConsole.Yield") and re-enables it again afterwards.


If *win* is not `None`, this window will remain enabled, allowing the implementation of some limited user interaction. Returns the result of the call to [`wx.AppConsole.Yield`](wx.AppConsole.html#wx.AppConsole.Yield "wx.AppConsole.Yield") .



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **onlyIfNeeded** (*bool*) –



Return type
*bool*





See also


[`wx.SafeYield`](wx.functions.html#wx.SafeYield "wx.SafeYield")





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def SafeYieldFor(self, win, eventsToProcess) -> bool:
        """ 

`SafeYieldFor`(*self*, *win*, *eventsToProcess*)[¶](#wx.PyApp.SafeYieldFor "Permalink to this definition")
Works like [`wx.SafeYield`](wx.functions.html#wx.SafeYield "wx.SafeYield") with *onlyIfNeeded* == `True` except that it allows the caller to specify a mask of events to be processed.


See *AppConsole.YieldFor* for more info.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **eventsToProcess** (*long*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def SetAssertMode(self, wxAppAssertMode: AppAssertMode) -> None:
        """ 

`SetAssertMode`(*self*, *wxAppAssertMode*)[¶](#wx.PyApp.SetAssertMode "Permalink to this definition")

> Set the mode indicating how the application responds to assertion
> statements. Valid settings are a combination of these flags:
> 
> 
> 
> > * wx.``wx.APP\_ASSERT\_SUPPRESS``
> > * wx.``wx.APP\_ASSERT\_EXCEPTION``
> > * wx.``wx.APP\_ASSERT\_DIALOG``
> > * wx.``wx.APP\_ASSERT\_LOG``
> 
> 
> The default behavior is to raise a wx.wxAssertionError exception.



Parameters
**wxAppAssertMode** ([*AppAssertMode*](wx.AppAssertMode.enumeration.html "AppAssertMode")) – 






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def SetDisplayMode(self, info: 'VideoMode') -> bool:
        """ 

`SetDisplayMode`(*self*, *info*)[¶](#wx.PyApp.SetDisplayMode "Permalink to this definition")
Set display mode to use.


This is only used in framebuffer wxWidgets ports such as wxDFB.



Parameters
**info** ([*wx.VideoMode*](wx.VideoMode.html#wx.VideoMode "wx.VideoMode")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def SetExitOnFrameDelete(self, flag: bool) -> None:
        """ 

`SetExitOnFrameDelete`(*self*, *flag*)[¶](#wx.PyApp.SetExitOnFrameDelete "Permalink to this definition")
Allows the programmer to specify whether the application will exit when the top-level frame is deleted.



Parameters
**flag** (*bool*) – If `True` (the default), the application will exit when the top-level frame is deleted. If `False`, the application will continue to run.





See also


[`GetExitOnFrameDelete`](#wx.PyApp.GetExitOnFrameDelete "wx.PyApp.GetExitOnFrameDelete") , [Application Shutdown](app_overview.html#application-shutdown)





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def SetNativeTheme(self, theme: str) -> bool:
        """ 

`SetNativeTheme`(*self*, *theme*)[¶](#wx.PyApp.SetNativeTheme "Permalink to this definition")
Allows runtime switching of the UI environment theme.


Currently implemented for GTK2-only. Return `True` if theme was successfully changed.



Parameters
**theme** (*string*) – The name of the new theme or an absolute path to a gtkrc-theme-file



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def SetTopWindow(self, window: 'Window') -> None:
        """ 

`SetTopWindow`(*self*, *window*)[¶](#wx.PyApp.SetTopWindow "Permalink to this definition")
Sets the ‘top’ window.


You can call this from within [`OnInit`](wx.AppConsole.html#wx.AppConsole.OnInit "wx.AppConsole.OnInit") to let wxWidgets know which is the main window. You don’t have to set the top window; it is only a convenience so that (for example) certain dialogs without parents can use a specific window as the top window.


If no top window is specified by the application, wxWidgets just uses the first frame or dialog (or better, any  [wx.TopLevelWindow](wx.TopLevelWindow.html#wx-toplevelwindow)) in its top-level window list, when it needs to use the top window. If you previously called [`SetTopWindow`](#wx.PyApp.SetTopWindow "wx.PyApp.SetTopWindow") and now you need to restore this automatic behaviour you can call:



```
wx.App.SetTopWindow(None)

```



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The new top window.





See also


[`GetTopWindow`](#wx.PyApp.GetTopWindow "wx.PyApp.GetTopWindow") , [`OnInit`](wx.AppConsole.html#wx.AppConsole.OnInit "wx.AppConsole.OnInit")





            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    def SetUseBestVisual(self, flag, forceTrueColour=False) -> None:
        """ 

`SetUseBestVisual`(*self*, *flag*, *forceTrueColour=False*)[¶](#wx.PyApp.SetUseBestVisual "Permalink to this definition")
Allows the programmer to specify whether the application will use the best visual on systems that support several visual on the same display.


This is typically the case under Solaris and `IRIX`, where the default visual is only 8-bit whereas certain applications are supposed to run in TrueColour mode.


Note that this function has to be called in the constructor of the  [wx.App](wx.App.html#wx-app) instance and won’t have any effect when called later on. This function currently only has effect under GTK.



Parameters
* **flag** (*bool*) – If `True`, the app will use the best visual.
* **forceTrueColour** (*bool*) – If `True` then the application will try to force using a TrueColour visual and abort the app if none is found.






            Source: https://docs.wxpython.org/wx.PyApp.html
        """

    AssertMode: 'AppAssertMode'  # `AssertMode`[¶](#wx.PyApp.AssertMode "Permalink to this definition")See [`GetAssertMode`](#wx.PyApp.GetAssertMode "wx.PyApp.GetAssertMode") and [`SetAssertMode`](#wx.PyApp.SetAssertMode "wx.PyApp.SetAssertMode")
    DisplayMode: 'VideoMode'  # `DisplayMode`[¶](#wx.PyApp.DisplayMode "Permalink to this definition")See [`GetDisplayMode`](#wx.PyApp.GetDisplayMode "wx.PyApp.GetDisplayMode") and [`SetDisplayMode`](#wx.PyApp.SetDisplayMode "wx.PyApp.SetDisplayMode")
    ExitOnFrameDelete: bool  # `ExitOnFrameDelete`[¶](#wx.PyApp.ExitOnFrameDelete "Permalink to this definition")See [`GetExitOnFrameDelete`](#wx.PyApp.GetExitOnFrameDelete "wx.PyApp.GetExitOnFrameDelete") and [`SetExitOnFrameDelete`](#wx.PyApp.SetExitOnFrameDelete "wx.PyApp.SetExitOnFrameDelete")
    LayoutDirection: int  # `LayoutDirection`[¶](#wx.PyApp.LayoutDirection "Permalink to this definition")See [`GetLayoutDirection`](#wx.PyApp.GetLayoutDirection "wx.PyApp.GetLayoutDirection")
    TopWindow: 'Window'  # `TopWindow`[¶](#wx.PyApp.TopWindow "Permalink to this definition")See [`GetTopWindow`](#wx.PyApp.GetTopWindow "wx.PyApp.GetTopWindow") and [`SetTopWindow`](#wx.PyApp.SetTopWindow "wx.PyApp.SetTopWindow")
    UseBestVisual: bool  # `UseBestVisual`[¶](#wx.PyApp.UseBestVisual "Permalink to this definition")See [`GetUseBestVisual`](#wx.PyApp.GetUseBestVisual "wx.PyApp.GetUseBestVisual") and [`SetUseBestVisual`](#wx.PyApp.SetUseBestVisual "wx.PyApp.SetUseBestVisual")



class AppConsole(EvtHandler,EventFilter):
    """ This class is essential for writing console-only or hybrid apps
without having to define USE\_GUI=0.


  


        Source: https://docs.wxpython.org/wx.AppConsole.html
    """
    def DeletePendingEvents(self) -> None:
        """ 

`DeletePendingEvents`(*self*)[¶](#wx.AppConsole.DeletePendingEvents "Permalink to this definition")
Deletes the pending events of all EvtHandlers of this application.


See [`wx.EvtHandler.DeletePendingEvents`](wx.EvtHandler.html#wx.EvtHandler.DeletePendingEvents "wx.EvtHandler.DeletePendingEvents") for warnings about deleting the pending events.




            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def ExitMainLoop(self) -> None:
        """ 

`ExitMainLoop`(*self*)[¶](#wx.AppConsole.ExitMainLoop "Permalink to this definition")
Call this to explicitly exit the main message (event) loop.


You should normally exit the main loop (and the application) by deleting the top window.


This function simply calls *EvtLoopBase.Exit()* on the active loop.




            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def FilterEvent(self, event: 'Event') -> int:
        """ 

`FilterEvent`(*self*, *event*)[¶](#wx.AppConsole.FilterEvent "Permalink to this definition")
Overridden  [wx.EventFilter](wx.EventFilter.html#wx-eventfilter) method.


This function is called before processing any event and allows the application to preempt the processing of some events, see  [wx.EventFilter](wx.EventFilter.html#wx-eventfilter) documentation for more information.


 [wx.App](wx.App.html#wx-app) implementation of this method always return -1 indicating that the event should be processed normally.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def GetAppDisplayName(self) -> str:
        """ 

`GetAppDisplayName`(*self*)[¶](#wx.AppConsole.GetAppDisplayName "Permalink to this definition")
Returns the user-readable application name.


The difference between this string and the one returned by [`GetAppName`](#wx.AppConsole.GetAppName "wx.AppConsole.GetAppName") is that this one is meant to be shown to the user and so should be used for the window titles, page headers and so on while the other one should be only used internally, e.g. for the file names or configuration file keys.


If the application name for display had been previously set by [`SetAppDisplayName`](#wx.AppConsole.SetAppDisplayName "wx.AppConsole.SetAppDisplayName") , it will be returned by this function. Otherwise, if [`SetAppName`](#wx.AppConsole.SetAppName "wx.AppConsole.SetAppName") had been called its value will be returned; also as is. Finally if none was called, this function returns the program name capitalized using `String.Capitalize` .



Return type
`string`





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def GetAppName(self) -> str:
        """ 

`GetAppName`(*self*)[¶](#wx.AppConsole.GetAppName "Permalink to this definition")
Returns the application name.


If [`SetAppName`](#wx.AppConsole.SetAppName "wx.AppConsole.SetAppName") had been called, returns the string passed to it. Otherwise returns the program name, i.e. the value of `argv` `[0]` passed to the `main()` function.



Return type
`string`





See also


[`GetAppDisplayName`](#wx.AppConsole.GetAppDisplayName "wx.AppConsole.GetAppDisplayName")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def GetClassName(self) -> str:
        """ 

`GetClassName`(*self*)[¶](#wx.AppConsole.GetClassName "Permalink to this definition")
Gets the class name of the application.


The class name may be used in a platform specific manner to refer to the application.



Return type
`string`





See also


[`SetClassName`](#wx.AppConsole.SetClassName "wx.AppConsole.SetClassName")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    @staticmethod
    def GetInstance() -> 'AppConsole':
        """ 

*static* `GetInstance`()[¶](#wx.AppConsole.GetInstance "Permalink to this definition")
Returns the one and only global application object.


Usually *wx.TheApp* is used instead.



Return type
 [wx.AppConsole](#wx-appconsole)





See also


[`SetInstance`](#wx.AppConsole.SetInstance "wx.AppConsole.SetInstance") , `wx.App.GetGUIInstance`





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def GetMainLoop(self) -> 'EventLoopBase':
        """ 

`GetMainLoop`(*self*)[¶](#wx.AppConsole.GetMainLoop "Permalink to this definition")
Returns the main event loop instance, i.e. the event loop which is started by [`OnRun`](#wx.AppConsole.OnRun "wx.AppConsole.OnRun") and which dispatches all events sent from the native toolkit to the application (except when new event loops are temporarily set-up).


The returned value maybe `None`. Put initialization code which needs a not `None` main event loop into [`OnEventLoopEnter`](#wx.AppConsole.OnEventLoopEnter "wx.AppConsole.OnEventLoopEnter") .



Return type
 [wx.EventLoopBase](wx.EventLoopBase.html#wx-eventloopbase)






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def GetTraits(self) -> 'AppTraits':
        """ 

`GetTraits`(*self*)[¶](#wx.AppConsole.GetTraits "Permalink to this definition")
Returns a pointer to the  [wx.AppTraits](wx.AppTraits.html#wx-apptraits) object for the application.


If you want to customize the  [wx.AppTraits](wx.AppTraits.html#wx-apptraits) object, you must override the `CreateTraits` function.



Return type
 [wx.AppTraits](wx.AppTraits.html#wx-apptraits)






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def GetVendorDisplayName(self) -> str:
        """ 

`GetVendorDisplayName`(*self*)[¶](#wx.AppConsole.GetVendorDisplayName "Permalink to this definition")
Returns the user-readable vendor name.


The difference between this string and the one returned by [`GetVendorName`](#wx.AppConsole.GetVendorName "wx.AppConsole.GetVendorName") is that this one is meant to be shown to the user and so should be used for the window titles, page headers and so on while the other one should be only used internally, e.g. for the file names or configuration file keys.


By default, returns the same string as [`GetVendorName`](#wx.AppConsole.GetVendorName "wx.AppConsole.GetVendorName") .



Return type
`string`





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def GetVendorName(self) -> str:
        """ 

`GetVendorName`(*self*)[¶](#wx.AppConsole.GetVendorName "Permalink to this definition")
Returns the application’s vendor name.



Return type
`string`






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def HasPendingEvents(self) -> bool:
        """ 

`HasPendingEvents`(*self*)[¶](#wx.AppConsole.HasPendingEvents "Permalink to this definition")
Returns `True` if there are pending events on the internal pending event list.


Whenever [`wx.EvtHandler.QueueEvent`](wx.EvtHandler.html#wx.EvtHandler.QueueEvent "wx.EvtHandler.QueueEvent") or [`wx.EvtHandler.AddPendingEvent`](wx.EvtHandler.html#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") are called (not only for  [wx.App](wx.App.html#wx-app) itself, but for any event handler of the application!), the internal  [wx.App](wx.App.html#wx-app)’s list of handlers with pending events is updated and this function will return `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    @staticmethod
    def IsMainLoopRunning() -> bool:
        """ 

*static* `IsMainLoopRunning`()[¶](#wx.AppConsole.IsMainLoopRunning "Permalink to this definition")
Returns `True` if the main event loop is currently running, i.e. if the application is inside [`OnRun`](#wx.AppConsole.OnRun "wx.AppConsole.OnRun") .


This can be useful to test whether events can be dispatched. For example, if this function returns `False`, non-blocking sockets cannot be used because the events from them would never be processed.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def IsScheduledForDestruction(self, object: 'Object') -> bool:
        """ 

`IsScheduledForDestruction`(*self*, *object*)[¶](#wx.AppConsole.IsScheduledForDestruction "Permalink to this definition")
Check if the object had been scheduled for destruction with [`ScheduleForDestruction`](#wx.AppConsole.ScheduleForDestruction "wx.AppConsole.ScheduleForDestruction") .


This function may be useful as an optimization to avoid doing something with an object which will be soon destroyed in any case.



Parameters
**object** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def MainLoop(self) -> int:
        """ 

`MainLoop`(*self*)[¶](#wx.AppConsole.MainLoop "Permalink to this definition")
Called by wxWidgets on creation of the application.


Override this if you wish to provide your own (environment-dependent) main loop.



Return type
*int*



Returns
0 under X, and the wParam of the `WM_QUIT` message under Windows.






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def OnEventLoopEnter(self, loop: 'EventLoopBase') -> None:
        """ 

`OnEventLoopEnter`(*self*, *loop*)[¶](#wx.AppConsole.OnEventLoopEnter "Permalink to this definition")
Called by [`wx.EventLoopBase.SetActive`](wx.EventLoopBase.html#wx.EventLoopBase.SetActive "wx.EventLoopBase.SetActive") : you can override this function and put here the code which needs an active event loop.


Note that this function is called whenever an event loop is activated; you may want to use [`wx.EventLoopBase.IsMain`](wx.EventLoopBase.html#wx.EventLoopBase.IsMain "wx.EventLoopBase.IsMain") to perform initialization specific for the app’s main event loop.



Parameters
**loop** ([*wx.EventLoopBase*](wx.EventLoopBase.html#wx.EventLoopBase "wx.EventLoopBase")) – 





See also


[`OnEventLoopExit`](#wx.AppConsole.OnEventLoopExit "wx.AppConsole.OnEventLoopExit")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def OnEventLoopExit(self, loop: 'EventLoopBase') -> None:
        """ 

`OnEventLoopExit`(*self*, *loop*)[¶](#wx.AppConsole.OnEventLoopExit "Permalink to this definition")
Called by [`wx.EventLoopBase.OnExit`](wx.EventLoopBase.html#wx.EventLoopBase.OnExit "wx.EventLoopBase.OnExit") for each event loop which is exited.



Parameters
**loop** ([*wx.EventLoopBase*](wx.EventLoopBase.html#wx.EventLoopBase "wx.EventLoopBase")) – 





See also


[`OnEventLoopEnter`](#wx.AppConsole.OnEventLoopEnter "wx.AppConsole.OnEventLoopEnter")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def OnExit(self) -> int:
        """ 

`OnExit`(*self*)[¶](#wx.AppConsole.OnExit "Permalink to this definition")
Override this member function for any processing which needs to be done as the application is about to exit.


OnExit is called after destroying all application windows and controls, but before wxWidgets cleanup. Note that it is not called at all if [`OnInit`](#wx.AppConsole.OnInit "wx.AppConsole.OnInit") failed.


The return value of this function is currently ignored, return the same value as returned by the base class method if you override it.



Return type
*int*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def OnInit(self) -> bool:
        """ 

`OnInit`(*self*)[¶](#wx.AppConsole.OnInit "Permalink to this definition")
This must be provided by the application, and will usually create the application’s main window, optionally calling SetTopWindow().


You may use [`OnExit`](#wx.AppConsole.OnExit "wx.AppConsole.OnExit") to clean up anything initialized here, provided that the function returns `True`.


Notice that if you want to use the command line processing provided by wxWidgets you have to call the base class version in the derived class [`OnInit`](#wx.AppConsole.OnInit "wx.AppConsole.OnInit") .


Return `True` to continue processing, `False` to exit the application immediately.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def OnRun(self) -> int:
        """ 

`OnRun`(*self*)[¶](#wx.AppConsole.OnRun "Permalink to this definition")
This virtual function is where the execution of a program written in wxWidgets starts.


The default implementation just enters the main loop and starts handling the events until it terminates, either because [`ExitMainLoop`](#wx.AppConsole.ExitMainLoop "wx.AppConsole.ExitMainLoop") has been explicitly called or because the last frame has been deleted and GetExitOnFrameDelete() flag is `True` (this is the default).


The return value of this function becomes the exit code of the program, so it should return 0 in case of successful termination.



Return type
*int*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def ProcessPendingEvents(self) -> None:
        """ 

`ProcessPendingEvents`(*self*)[¶](#wx.AppConsole.ProcessPendingEvents "Permalink to this definition")
Process all pending events; it is necessary to call this function to process events posted with [`wx.EvtHandler.QueueEvent`](wx.EvtHandler.html#wx.EvtHandler.QueueEvent "wx.EvtHandler.QueueEvent") or [`wx.EvtHandler.AddPendingEvent`](wx.EvtHandler.html#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") .


This happens during each event loop iteration (see  [wx.EventLoopBase](wx.EventLoopBase.html#wx-eventloopbase)) in GUI mode but it may be also called directly.


Note that this function does not only process the pending events for the  [wx.App](wx.App.html#wx-app) object itself (which derives from  [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler)) but also the pending events for *any* event handler of this application.


This function will immediately return and do nothing if [`SuspendProcessingOfPendingEvents`](#wx.AppConsole.SuspendProcessingOfPendingEvents "wx.AppConsole.SuspendProcessingOfPendingEvents") was called.




            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def ResumeProcessingOfPendingEvents(self) -> None:
        """ 

`ResumeProcessingOfPendingEvents`(*self*)[¶](#wx.AppConsole.ResumeProcessingOfPendingEvents "Permalink to this definition")
Resume processing of the pending events previously stopped because of a call to [`SuspendProcessingOfPendingEvents`](#wx.AppConsole.SuspendProcessingOfPendingEvents "wx.AppConsole.SuspendProcessingOfPendingEvents") .




            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def ScheduleForDestruction(self, object: 'Object') -> None:
        """ 

`ScheduleForDestruction`(*self*, *object*)[¶](#wx.AppConsole.ScheduleForDestruction "Permalink to this definition")
Delayed objects destruction.


In applications using events it may be unsafe for an event handler to delete the object which generated the event because more events may be still pending for the same object. In this case the handler may call [`ScheduleForDestruction`](#wx.AppConsole.ScheduleForDestruction "wx.AppConsole.ScheduleForDestruction") instead. Schedule the object for destruction in the near future.


Notice that if the application is not using an event loop, i.e. if [`UsesEventLoop`](#wx.AppConsole.UsesEventLoop "wx.AppConsole.UsesEventLoop") returns `False`, this method will simply delete the object immediately.


Examples of using this function inside wxWidgets itself include deleting the top level windows when they are closed and sockets when they are disconnected.



Parameters
**object** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) – 






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def SetAppDisplayName(self, name: str) -> None:
        """ 

`SetAppDisplayName`(*self*, *name*)[¶](#wx.AppConsole.SetAppDisplayName "Permalink to this definition")
Set the application name to be used in the user-visible places such as window titles.


See [`GetAppDisplayName`](#wx.AppConsole.GetAppDisplayName "wx.AppConsole.GetAppDisplayName") for more about the differences between the display name and name.


Notice that if this function is called, the name is used as is, without any capitalization as done by default by [`GetAppDisplayName`](#wx.AppConsole.GetAppDisplayName "wx.AppConsole.GetAppDisplayName") .



Parameters
**name** (*string*) – 






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def SetAppName(self, name: str) -> None:
        """ 

`SetAppName`(*self*, *name*)[¶](#wx.AppConsole.SetAppName "Permalink to this definition")
Sets the name of the application.


This name should be used for file names, configuration file entries and other internal strings. For the user-visible strings, such as the window titles, the application display name set by [`SetAppDisplayName`](#wx.AppConsole.SetAppDisplayName "wx.AppConsole.SetAppDisplayName") is used instead.


By default the application name is set to the name of its executable file.



Parameters
**name** (*string*) – 





See also


[`GetAppName`](#wx.AppConsole.GetAppName "wx.AppConsole.GetAppName")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def SetCLocale(self) -> None:
        """ 

`SetCLocale`(*self*)[¶](#wx.AppConsole.SetCLocale "Permalink to this definition")
Sets the C locale to the default locale for the current environment.


It is advised to call this to ensure that the underlying toolkit uses the locale in which the numbers and monetary amounts are shown in the format expected by user and so on.


Calling this function is roughly equivalent to calling



```
setlocale(LC_ALL, "")

```


but performs additional toolkit-specific tasks under some platforms and so should be used instead of `setlocale()` itself. Alternatively, you can use  [wx.Locale](wx.Locale.html#wx-locale) to change the locale with more control.


Notice that this does *not* change the global C++ locale, you need to do it explicitly if you want, e.g.


but be warned that locale support in C++ standard library can be poor or worse under some platforms.



New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def SetClassName(self, name: str) -> None:
        """ 

`SetClassName`(*self*, *name*)[¶](#wx.AppConsole.SetClassName "Permalink to this definition")
Sets the class name of the application.


This may be used in a platform specific manner to refer to the application.



Parameters
**name** (*string*) – 





See also


[`GetClassName`](#wx.AppConsole.GetClassName "wx.AppConsole.GetClassName")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    @staticmethod
    def SetInstance(app: 'AppConsole') -> None:
        """ 

*static* `SetInstance`(*app*)[¶](#wx.AppConsole.SetInstance "Permalink to this definition")
Allows external code to modify global *wx.TheApp* , but you should really know what you’re doing if you call it.



Parameters
**app** ([*wx.AppConsole*](#wx.AppConsole "wx.AppConsole")) – Replacement for the global application object.





See also


[`GetInstance`](#wx.AppConsole.GetInstance "wx.AppConsole.GetInstance")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def SetVendorDisplayName(self, name: str) -> None:
        """ 

`SetVendorDisplayName`(*self*, *name*)[¶](#wx.AppConsole.SetVendorDisplayName "Permalink to this definition")
Set the vendor name to be used in the user-visible places.


See [`GetVendorDisplayName`](#wx.AppConsole.GetVendorDisplayName "wx.AppConsole.GetVendorDisplayName") for more about the differences between the display name and name.



Parameters
**name** (*string*) – 






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def SetVendorName(self, name: str) -> None:
        """ 

`SetVendorName`(*self*, *name*)[¶](#wx.AppConsole.SetVendorName "Permalink to this definition")
Sets the name of application’s vendor.


The name will be used in registry access. A default name is set by wxWidgets.



Parameters
**name** (*string*) – 





See also


[`GetVendorName`](#wx.AppConsole.GetVendorName "wx.AppConsole.GetVendorName")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def SuspendProcessingOfPendingEvents(self) -> None:
        """ 

`SuspendProcessingOfPendingEvents`(*self*)[¶](#wx.AppConsole.SuspendProcessingOfPendingEvents "Permalink to this definition")
Temporary suspends processing of the pending events.



See also


[`ResumeProcessingOfPendingEvents`](#wx.AppConsole.ResumeProcessingOfPendingEvents "wx.AppConsole.ResumeProcessingOfPendingEvents")





            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def UsesEventLoop(self) -> bool:
        """ 

`UsesEventLoop`(*self*)[¶](#wx.AppConsole.UsesEventLoop "Permalink to this definition")
Returns `True` if the application is using an event loop.


This function always returns `True` for the GUI applications which must use an event loop but by default only returns `True` for the console programs if an event loop is already running as it can’t know whether one will be created in the future.


Thus, it only makes sense to override it in console applications which do use an event loop, to return `True` instead of checking if there is a currently active event loop.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    def Yield(self, onlyIfNeeded: bool=False) -> bool:
        """ 

`Yield`(*self*, *onlyIfNeeded=False*)[¶](#wx.AppConsole.Yield "Permalink to this definition")
Yields control to pending messages in the event loop.


This method is a convenient wrapper for *EvtLoopBase.Yield().* If the main loop is currently running, it calls this method on it. Otherwise it creates a temporary event loop and uses it instead, which can be useful to process pending messages during the program startup, before the main loop is created.


Use extreme caution when calling this function as, just as *EvtLoopBase.Yield(),* it can result in unexpected reentrances.



Parameters
**onlyIfNeeded** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppConsole.html
        """

    AppDisplayName: str  # `AppDisplayName`[¶](#wx.AppConsole.AppDisplayName "Permalink to this definition")See [`GetAppDisplayName`](#wx.AppConsole.GetAppDisplayName "wx.AppConsole.GetAppDisplayName") and [`SetAppDisplayName`](#wx.AppConsole.SetAppDisplayName "wx.AppConsole.SetAppDisplayName")
    AppName: str  # `AppName`[¶](#wx.AppConsole.AppName "Permalink to this definition")See [`GetAppName`](#wx.AppConsole.GetAppName "wx.AppConsole.GetAppName") and [`SetAppName`](#wx.AppConsole.SetAppName "wx.AppConsole.SetAppName")
    ClassName: str  # `ClassName`[¶](#wx.AppConsole.ClassName "Permalink to this definition")See [`GetClassName`](#wx.AppConsole.GetClassName "wx.AppConsole.GetClassName") and [`SetClassName`](#wx.AppConsole.SetClassName "wx.AppConsole.SetClassName")
    Traits: 'AppTraits'  # `Traits`[¶](#wx.AppConsole.Traits "Permalink to this definition")See [`GetTraits`](#wx.AppConsole.GetTraits "wx.AppConsole.GetTraits")
    VendorDisplayName: str  # `VendorDisplayName`[¶](#wx.AppConsole.VendorDisplayName "Permalink to this definition")See [`GetVendorDisplayName`](#wx.AppConsole.GetVendorDisplayName "wx.AppConsole.GetVendorDisplayName") and [`SetVendorDisplayName`](#wx.AppConsole.SetVendorDisplayName "wx.AppConsole.SetVendorDisplayName")
    VendorName: str  # `VendorName`[¶](#wx.AppConsole.VendorName "Permalink to this definition")See [`GetVendorName`](#wx.AppConsole.GetVendorName "wx.AppConsole.GetVendorName") and [`SetVendorName`](#wx.AppConsole.SetVendorName "wx.AppConsole.SetVendorName")



_StandardPaths: TypeAlias = StandardPaths

class AppTraits:
    """ The AppTraits class defines various configurable aspects of a App.


  


        Source: https://docs.wxpython.org/wx.AppTraits.html
    """
    def CreateConfig(self) -> 'ConfigBase':
        """ 

`CreateConfig`(*self*)[¶](#wx.AppTraits.CreateConfig "Permalink to this definition")
Called by wxWidgets to create the default configuration object for the application.


The default version creates a registry-based *RegConfig* class under MSW and  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig) under all other platforms.


The `wx.App.GetAppName` and `wx.App.GetVendorName` methods are used to determine the registry key or file name.



Return type
 [wx.ConfigBase](wx.ConfigBase.html#wx-configbase)






            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def CreateEventLoop(self) -> 'EventLoopBase':
        """ 

`CreateEventLoop`(*self*)[¶](#wx.AppTraits.CreateEventLoop "Permalink to this definition")
Used by wxWidgets to create the main event loop used by `wx.App.OnRun` .


The default implementation of this method in GUIAppTraits returns the usual platform-specific GUI event loop. The version in ConsoleAppTraits returns a console-specific event loop which can be used to handle timer and socket events in console programs under Unix and MSW or `None` under the other platforms where console event loops are not supported yet.



Return type
 [wx.EventLoopBase](wx.EventLoopBase.html#wx-eventloopbase)






            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def CreateLogTarget(self) -> 'Log':
        """ 

`CreateLogTarget`(*self*)[¶](#wx.AppTraits.CreateLogTarget "Permalink to this definition")
Creates a  [wx.Log](wx.Log.html#wx-log) class for the application to use for logging errors.


The default implementation returns a new  [wx.LogGui](wx.LogGui.html#wx-loggui) class.



Return type
 [wx.Log](wx.Log.html#wx-log)





See also


 [wx.Log](wx.Log.html#wx-log)





            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def GetAssertStackTrace(self) -> str:
        """ 

`GetAssertStackTrace`(*self*)[¶](#wx.AppTraits.GetAssertStackTrace "Permalink to this definition")
Helper function mostly useful for derived classes [`ShowAssertDialog`](#wx.AppTraits.ShowAssertDialog "wx.AppTraits.ShowAssertDialog") implementation.


Returns the stack frame as a plain (and possibly empty) *String* .


This function is only available when `USE_STACKWALKER` is 1.



Return type
`string`





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def GetDesktopEnvironment(self) -> str:
        """ 

`GetDesktopEnvironment`(*self*)[¶](#wx.AppTraits.GetDesktopEnvironment "Permalink to this definition")
This method returns the name of the desktop environment currently running in a Unix desktop.


Currently only “KDE” or “GNOME” are supported and the code uses the X11 session protocol vendor name to figure out, which desktop environment is running. The method returns an empty string otherwise and on all other platforms.



Return type
`string`






            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def GetStandardPaths(self) -> 'StandardPaths':
        """ 

`GetStandardPaths`(*self*)[¶](#wx.AppTraits.GetStandardPaths "Permalink to this definition")
Returns the  [wx.StandardPaths](wx.StandardPaths.html#wx-standardpaths) object for the application.


It’s normally the same for Base and GUI except in the case of Mac and Cocoa.



Return type
 [wx.StandardPaths](wx.StandardPaths.html#wx-standardpaths)





Note


The returned reference is to a `StandardPathsBase` class but you can consider it to be equivalent to  [wx.StandardPaths](wx.StandardPaths.html#wx-standardpaths) (which is documented).





            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def GetToolkitVersion(self) -> tuple:
        """ 

`GetToolkitVersion`(*self*)[¶](#wx.AppTraits.GetToolkitVersion "Permalink to this definition")
Returns the wxWidgets port `ID` used by the running program and eventually fills the given pointers with the values of the major, minor, and micro digits of the native toolkit currently used.


The version numbers returned are thus detected at run-time and not compile-time (except when this is not possible e.g. Motif).


E.g. if your program is using wxGTK port this function will return `wx.PORT_GTK` and put in given pointers the versions of the GTK library in use. See *PlatformInfo* for more details.


If a micro version is not available it will have a value of 0.



Return type
*tuple*



Returns
(  [wx.PortId](wx.PortId.enumeration.html#wx-portid), *major*, *minor*, *micro* )






            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def HasStderr(self) -> bool:
        """ 

`HasStderr`(*self*)[¶](#wx.AppTraits.HasStderr "Permalink to this definition")
Returns `True` if `fprintf(stderr)` goes somewhere, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def IsUsingUniversalWidgets(self) -> bool:
        """ 

`IsUsingUniversalWidgets`(*self*)[¶](#wx.AppTraits.IsUsingUniversalWidgets "Permalink to this definition")
Returns `True` if the library was built as wxUniversal.


Always returns `False` for Base-only apps.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def SafeMessageBox(self, text, title) -> bool:
        """ 

`SafeMessageBox`(*self*, *text*, *title*)[¶](#wx.AppTraits.SafeMessageBox "Permalink to this definition")
Shows a message box with the given text and title if possible.


In some ports, e.g. wxMSW, a message box will always be shown, while in the other ones it will be only done if the GUI is available (e.g. X11 display was successfully opened for X11-based ports) and the function simply returns `False` without doing anything otherwise.


This function is safe in the sense that it can always be called, even before creating  [wx.App](wx.App.html#wx-app), similarly to [`wx.SafeShowMessage`](wx.functions.html#wx.SafeShowMessage "wx.SafeShowMessage") which is implemented by calling this function and then logging the message to standard error stream if it returned `False`.



Parameters
* **text** (*string*) – The text to show to the user.
* **title** (*string*) – The title of the message box shown to the user.



Return type
*bool*



Returns
`True` if the message box was shown or `False` otherwise.





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    def ShowAssertDialog(self, msg: str) -> bool:
        """ 

`ShowAssertDialog`(*self*, *msg*)[¶](#wx.AppTraits.ShowAssertDialog "Permalink to this definition")
Shows the assert dialog with the specified message in GUI mode or just prints the string to stderr in console mode.


Returns `True` to suppress subsequent asserts, `False` to continue as before.



Parameters
**msg** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.AppTraits.html
        """

    AssertStackTrace: str  # `AssertStackTrace`[¶](#wx.AppTraits.AssertStackTrace "Permalink to this definition")See [`GetAssertStackTrace`](#wx.AppTraits.GetAssertStackTrace "wx.AppTraits.GetAssertStackTrace")
    DesktopEnvironment: str  # `DesktopEnvironment`[¶](#wx.AppTraits.DesktopEnvironment "Permalink to this definition")See [`GetDesktopEnvironment`](#wx.AppTraits.GetDesktopEnvironment "wx.AppTraits.GetDesktopEnvironment")
    StandardPaths: '_StandardPaths'  # `StandardPaths`[¶](#wx.AppTraits.StandardPaths "Permalink to this definition")See [`GetStandardPaths`](#wx.AppTraits.GetStandardPaths "wx.AppTraits.GetStandardPaths")
    ToolkitVersion: tuple  # `ToolkitVersion`[¶](#wx.AppTraits.ToolkitVersion "Permalink to this definition")See [`GetToolkitVersion`](#wx.AppTraits.GetToolkitVersion "wx.AppTraits.GetToolkitVersion")



PORT_GTK: int

class ArchiveFSHandler(FileSystemHandler):
    """ **Possible constructors**:



```
ArchiveFSHandler()

```


A file system handler for accessing files inside of archives.


  


        Source: https://docs.wxpython.org/wx.ArchiveFSHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ArchiveFSHandler.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ArchiveFSHandler.html
        """

    def Cleanup(self) -> None:
        """ 

`Cleanup`(*self*)[¶](#wx.ArchiveFSHandler.Cleanup "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ArchiveFSHandler.html
        """



class ArtProvider(Object):
    """ ArtProvider class is used to customize the look of wxWidgets
application.


  


        Source: https://docs.wxpython.org/wx.ArtProvider.html
    """
    def CreateBitmap(self, id, client, size) -> 'Bitmap':
        """ 

`CreateBitmap`(*self*, *id*, *client*, *size*)[¶](#wx.ArtProvider.CreateBitmap "Permalink to this definition")
Derived art provider classes may override this method to create requested art resource.


For bitmaps available in more than one size, `CreateBitmapBundle` should be overridden instead.


Note that returned bitmaps are cached by  [wx.ArtProvider](#wx-artprovider) and it is therefore not necessary to optimize [`CreateBitmap`](#wx.ArtProvider.CreateBitmap "wx.ArtProvider.CreateBitmap") for speed (e.g. you may create  [wx.Bitmap](wx.Bitmap.html#wx-bitmap) objects from XPMs here).



Parameters
* **id** (*wx.ArtID*) – ArtID unique identifier of the bitmap.
* **client** (*wx.ArtClient*) – ArtClient identifier of the client (i.e. who is asking for the bitmap). This only serves as a hint.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Preferred size of the bitmap. The function may return a bitmap of different dimensions, it will be automatically rescaled to meet client’s request.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





Note


This is not part of  [wx.ArtProvider](#wx-artprovider)’s public API, use [`wx.ArtProvider.GetBitmap`](#wx.ArtProvider.GetBitmap "wx.ArtProvider.GetBitmap") or [`wx.ArtProvider.GetIconBundle`](#wx.ArtProvider.GetIconBundle "wx.ArtProvider.GetIconBundle") or [`wx.ArtProvider.GetIcon`](#wx.ArtProvider.GetIcon "wx.ArtProvider.GetIcon") to query  [wx.ArtProvider](#wx-artprovider) for a resource.




See also


[`CreateIconBundle`](#wx.ArtProvider.CreateIconBundle "wx.ArtProvider.CreateIconBundle")





            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    def CreateIconBundle(self, id, client) -> 'IconBundle':
        """ 

`CreateIconBundle`(*self*, *id*, *client*)[¶](#wx.ArtProvider.CreateIconBundle "Permalink to this definition")
This method is similar to [`CreateBitmap`](#wx.ArtProvider.CreateBitmap "wx.ArtProvider.CreateBitmap") but can be used when a bitmap (or an icon) exists in several sizes.



Parameters
* **id** (*wx.ArtID*) –
* **client** (*wx.ArtClient*) –



Return type
 [wx.IconBundle](wx.IconBundle.html#wx-iconbundle)






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def Delete(provider: 'ArtProvider') -> bool:
        """ 

*static* `Delete`(*provider*)[¶](#wx.ArtProvider.Delete "Permalink to this definition")
Delete the given *provider*.



Parameters
**provider** ([*wx.ArtProvider*](#wx.ArtProvider "wx.ArtProvider")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetBitmap(id, client=ART_OTHER, size=DefaultSize) -> 'Bitmap':
        """ 

*static* `GetBitmap`(*id*, *client=ART\_OTHER*, *size=DefaultSize*)[¶](#wx.ArtProvider.GetBitmap "Permalink to this definition")
Query registered providers for bitmap with given `ID`.


Note that applications using wxWidgets 3.1.6 or later should prefer calling [`GetBitmapBundle`](#wx.ArtProvider.GetBitmapBundle "wx.ArtProvider.GetBitmapBundle") .



Parameters
* **id** (*wx.ArtID*) – ArtID unique identifier of the bitmap.
* **client** (*wx.ArtClient*) – ArtClient identifier of the client (i.e. who is asking for the bitmap).
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Size of the returned bitmap or DefaultSize if size doesn’t matter.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)



Returns
The bitmap if one of registered providers recognizes the `ID` or NullBitmap otherwise.






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetBitmapBundle(id, client=ART_OTHER, size=DefaultSize) -> 'BitmapBundle':
        """ 

*static* `GetBitmapBundle`(*id*, *client=ART\_OTHER*, *size=DefaultSize*)[¶](#wx.ArtProvider.GetBitmapBundle "Permalink to this definition")
Query registered providers for a bundle of bitmaps with given `ID`.



Parameters
* **id** (*wx.ArtID*) – ArtID unique identifier of the bitmap.
* **client** (*wx.ArtClient*) – ArtClient identifier of the client (i.e. who is asking for the bitmap).
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Default size for the returned bundle, i.e. the size of the bitmap in normal `DPI` (this implies that [`wx.Window.FromDIP`](wx.Window.html#wx.Window.FromDIP "wx.Window.FromDIP") must *not* be used with it).



Return type
 [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle)



Returns
If any of the registered providers recognizes the `ID` in its `CreateBitmapBundle` , this bundle is returned. Otherwise, if any of providers returns a valid bitmap from [`CreateBitmap`](#wx.ArtProvider.CreateBitmap "wx.ArtProvider.CreateBitmap") , the bundle containing only this bitmap is returned. Otherwise, an empty bundle is returned.





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetDIPSizeHint(client: 'ArtClient') -> 'Size':
        """ 

*static* `GetDIPSizeHint`(*client*)[¶](#wx.ArtProvider.GetDIPSizeHint "Permalink to this definition")
Returns a suitable size hint for the given *ArtClient* in DIPs.


Return the size used by the topmost  [wx.ArtProvider](#wx-artprovider) for the given *client*. *DefaultSize* may be returned if the client doesn’t have a specified size, like `wx.ART_OTHER` for example.



Parameters
**client** (*wx.ArtClient*) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`GetNativeDIPSizeHint`](#wx.ArtProvider.GetNativeDIPSizeHint "wx.ArtProvider.GetNativeDIPSizeHint")





            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetIcon(id, client=ART_OTHER, size=DefaultSize) -> 'Icon':
        """ 

*static* `GetIcon`(*id*, *client=ART\_OTHER*, *size=DefaultSize*)[¶](#wx.ArtProvider.GetIcon "Permalink to this definition")
Same as [`wx.ArtProvider.GetBitmap`](#wx.ArtProvider.GetBitmap "wx.ArtProvider.GetBitmap") , but return a  [wx.Icon](wx.Icon.html#wx-icon) object (or `wx.NullIcon` on failure).



Parameters
* **id** (*wx.ArtID*) –
* **client** (*wx.ArtClient*) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetIconBundle(id, client=ART_OTHER) -> 'IconBundle':
        """ 

*static* `GetIconBundle`(*id*, *client=ART\_OTHER*)[¶](#wx.ArtProvider.GetIconBundle "Permalink to this definition")
Query registered providers for icon bundle with given `ID`.



Parameters
* **id** (*wx.ArtID*) – ArtID unique identifier of the icon bundle.
* **client** (*wx.ArtClient*) – ArtClient identifier of the client (i.e. who is asking for the icon bundle).



Return type
 [wx.IconBundle](wx.IconBundle.html#wx-iconbundle)



Returns
The icon bundle if one of registered providers recognizes the `ID` or NullIconBundle otherwise.






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetMessageBoxIcon(flags: int) -> 'Icon':
        """ 

*static* `GetMessageBoxIcon`(*flags*)[¶](#wx.ArtProvider.GetMessageBoxIcon "Permalink to this definition")
Helper used by several generic classes: return the icon corresponding to the standard ICON\_INFORMATION/WARNING/ERROR/QUESTION flags (only one can be set)



Parameters
**flags** (*int*) – 



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetMessageBoxIconId(flags: int) -> int:
        """ 

*static* `GetMessageBoxIconId`(*flags*)[¶](#wx.ArtProvider.GetMessageBoxIconId "Permalink to this definition")
Helper used by [`GetMessageBoxIcon`](#wx.ArtProvider.GetMessageBoxIcon "wx.ArtProvider.GetMessageBoxIcon") : return the art id corresponding to the standard ICON\_INFORMATION/WARNING/ERROR/QUESTION flags (only one can be set)



Parameters
**flags** (*int*) – 



Return type
*wx.ArtID*






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetNativeDIPSizeHint(client: 'ArtClient') -> 'Size':
        """ 

*static* `GetNativeDIPSizeHint`(*client*)[¶](#wx.ArtProvider.GetNativeDIPSizeHint "Permalink to this definition")
Returns native icon size for use specified by *client* hint in DIPs.


If the platform has no commonly used default for this use or if *client* is not recognized, returns DefaultSize.



Parameters
**client** (*wx.ArtClient*) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.6.




Note


In some cases, a platform may have *several* appropriate native sizes (for example, `wx.ART_FRAME_ICON` for frame icons). In that case, this method returns only one of them, picked reasonably.





            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetNativeSizeHint(client, win=None) -> 'Size':
        """ 

*static* `GetNativeSizeHint`(*client*, *win=None*)[¶](#wx.ArtProvider.GetNativeSizeHint "Permalink to this definition")
Returns native icon size for use specified by *client* hint.


This function does the same thing as [`GetNativeDIPSizeHint`](#wx.ArtProvider.GetNativeDIPSizeHint "wx.ArtProvider.GetNativeDIPSizeHint") , but uses *win* to convert the returned value to logical pixels. If *win* is `None`, default `DPI` scaling (i.e. that of the primary display) is used.



Parameters
* **client** (*wx.ArtClient*) –
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.0: (*win* parameter is available only since 3.1.6)





            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def GetSizeHint(client, win=None) -> 'Size':
        """ 

*static* `GetSizeHint`(*client*, *win=None*)[¶](#wx.ArtProvider.GetSizeHint "Permalink to this definition")
Returns a suitable size hint for the given *ArtClient*.


This function does the same thing as [`GetDIPSizeHint`](#wx.ArtProvider.GetDIPSizeHint "wx.ArtProvider.GetDIPSizeHint") , but uses *win* to convert the returned value to logical pixels. If *win* is `None`, default `DPI` scaling (i.e. that of the primary display) is used.


Note that *win* parameter is only available since wxWidgets 3.1.6.



Parameters
* **client** (*wx.ArtClient*) –
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def HasNativeProvider() -> bool:
        """ 

*static* `HasNativeProvider`()[¶](#wx.ArtProvider.HasNativeProvider "Permalink to this definition")
Returns `True` if the platform uses native icons provider that should take precedence over any customizations.


This is `True` for any platform that has user-customizable icon themes, currently only wxGTK.


A typical use for this method is to decide whether a custom art provider should be plugged in using [`Push`](#wx.ArtProvider.Push "wx.ArtProvider.Push") or [`PushBack`](#wx.ArtProvider.PushBack "wx.ArtProvider.PushBack") .



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def Pop() -> bool:
        """ 

*static* `Pop`()[¶](#wx.ArtProvider.Pop "Permalink to this definition")
Remove latest added provider and delete it.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def Push(provider: 'ArtProvider') -> None:
        """ 

*static* `Push`(*provider*)[¶](#wx.ArtProvider.Push "Permalink to this definition")
Register new art provider and add it to the top of providers stack (i.e.


it will be queried as the first provider).



Parameters
**provider** ([*wx.ArtProvider*](#wx.ArtProvider "wx.ArtProvider")) – 





See also


[`PushBack`](#wx.ArtProvider.PushBack "wx.ArtProvider.PushBack")





            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def PushBack(provider: 'ArtProvider') -> None:
        """ 

*static* `PushBack`(*provider*)[¶](#wx.ArtProvider.PushBack "Permalink to this definition")
Register new art provider and add it to the bottom of providers stack.


In other words, it will be queried as the last one, after all others, including the default provider.



Parameters
**provider** ([*wx.ArtProvider*](#wx.ArtProvider "wx.ArtProvider")) – 





New in version 2.9.0.




See also


[`Push`](#wx.ArtProvider.Push "wx.ArtProvider.Push")





            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """

    @staticmethod
    def Remove(provider: 'ArtProvider') -> bool:
        """ 

*static* `Remove`(*provider*)[¶](#wx.ArtProvider.Remove "Permalink to this definition")
Remove a provider from the stack if it is on it.


The provider is not deleted, unlike when using [`Delete`](#wx.ArtProvider.Delete "wx.ArtProvider.Delete") .



Parameters
**provider** ([*wx.ArtProvider*](#wx.ArtProvider "wx.ArtProvider")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ArtProvider.html
        """



ART_ERROR: int

ART_GOTO_LAST: int

ART_FILE_SAVE_AS: int

ART_QUESTION: int

ART_PRINT: int

ART_DELETE: int

ART_WARNING: int

ART_HELP: int

ART_COPY: int

ART_INFORMATION: int

ART_TIP: int

ART_CUT: int

ART_ADD_BOOKMARK: int

ART_REPORT_VIEW: int

ART_PASTE: int

ART_DEL_BOOKMARK: int

ART_LIST_VIEW: int

ART_UNDO: int

ART_HELP_SIDE_PANEL: int

ART_NEW_DIR: int

ART_REDO: int

ART_HELP_SETTINGS: int

ART_FOLDER: int

ART_PLUS: int

ART_HELP_BOOK: int

ART_FOLDER_OPEN: int

ART_MINUS: int

ART_HELP_FOLDER: int

ART_GO_DIR_UP: int

ART_CLOSE: int

ART_HELP_PAGE: int

ART_EXECUTABLE_FILE: int

ART_QUIT: int

ART_GO_BACK: int

ART_NORMAL_FILE: int

ART_FIND: int

ART_GO_FORWARD: int

ART_TICK_MARK: int

ART_FIND_AND_REPLACE: int

ART_GO_UP: int

ART_CROSS_MARK: int

ART_HARDDISK: int

ART_GO_DOWN: int

ART_MISSING_IMAGE: int

ART_FLOPPY: int

ART_GO_TO_PARENT: int

ART_NEW: int

ART_CDROM: int

ART_GO_HOME: int

ART_FILE_OPEN: int

ART_GOTO_FIRST: int

ART_FILE_SAVE: int

ART_OTHER: int

ART_FRAME_ICON: int

class AutoBufferedPaintDC(BufferedPaintDC):
    """ **Possible constructors**:



```
AutoBufferedPaintDC(window)

```


This DC derivative can be used inside of an EVT\_PAINT() event
handler to achieve double-buffered drawing.


  


        Source: https://docs.wxpython.org/wx.AutoBufferedPaintDC.html
    """
    def __init__(self, window: 'Window') -> None:
        """ 

`__init__`(*self*, *window*)[¶](#wx.AutoBufferedPaintDC.__init__ "Permalink to this definition")
Constructor.


Pass a pointer to the window on which you wish to paint.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.AutoBufferedPaintDC.html
        """



BG_STYLE_PAINT: int

_Brush: TypeAlias = Brush

_Font: TypeAlias = Font

_FontMetrics: TypeAlias = FontMetrics

_GraphicsContext: TypeAlias = GraphicsContext

_Pen: TypeAlias = Pen

class DC(Object):
    """ A DC is a “device context” onto which graphics and text can be
drawn.


  


        Source: https://docs.wxpython.org/wx.DC.html
    """
    def Blit(self, xdest, ydest, width, height, source, xsrc, ysrc, logicalFunc=COPY, useMask=False, xsrcMask=DefaultCoord, ysrcMask=DefaultCoord) -> bool:
        """ 

`Blit`(*self*, *xdest*, *ydest*, *width*, *height*, *source*, *xsrc*, *ysrc*, *logicalFunc=COPY*, *useMask=False*, *xsrcMask=DefaultCoord*, *ysrcMask=DefaultCoord*)[¶](#wx.DC.Blit "Permalink to this definition")
Copy from a source DC to this DC.


With this method you can specify the destination coordinates and the size of area to copy which will be the same for both the source and target DCs. If you need to apply scaling while copying, use [`StretchBlit`](#wx.DC.StretchBlit "wx.DC.StretchBlit") .


Notice that source DC coordinates *xsrc* and *ysrc* are interpreted using the current source DC coordinate system, i.e. the scale, origin position and axis directions are taken into account when transforming them to physical (pixel) coordinates.



Parameters
* **xdest** (*int*) – Destination device context x position.
* **ydest** (*int*) – Destination device context y position.
* **width** (*int*) – Width of source area to be copied.
* **height** (*int*) – Height of source area to be copied.
* **source** ([*wx.DC*](#wx.DC "wx.DC")) – Source device context.
* **xsrc** (*int*) – Source device context x position.
* **ysrc** (*int*) – Source device context y position.
* **logicalFunc** ([*RasterOperationMode*](wx.RasterOperationMode.enumeration.html "RasterOperationMode")) – Logical function to use, see [`SetLogicalFunction`](#wx.DC.SetLogicalFunction "wx.DC.SetLogicalFunction") .
* **useMask** (*bool*) – If `True`, Blit does a transparent blit using the mask that is associated with the bitmap selected into the source device context. The Windows implementation does the following if MaskBlt cannot be used:

	+ Creates a temporary bitmap and copies the destination area into it.
	+ Copies the source area into the temporary bitmap using the specified logical function.
	+ Sets the masked area in the temporary bitmap to `wx.BLACK` by ANDing the mask bitmap with the temp bitmap with the foreground colour set to `wx.WHITE` and the bg colour set to `wx.BLACK`.
	+ Sets the unmasked area in the destination area to `wx.BLACK` by ANDing the mask bitmap with the destination area with the foreground colour set to `wx.BLACK` and the background colour set to `wx.WHITE`.
	+ ORs the temporary bitmap with the destination area.
	+ Deletes the temporary bitmap.
This sequence of operations ensures that the source’s transparent area need not be black, and logical functions are supported.



> **Note:** on Windows, blitting with masks can be speeded up considerably by compiling wxWidgets with the `USE_DC_CACHEING` option enabled. You can also influence whether MaskBlt or the explicit mask blitting code above is used, by using  [wx.SystemOptions](wx.SystemOptions.html#wx-systemoptions) and setting the `no-maskblt` option to 1.
* **xsrcMask** (*int*) – Source x position on the mask. If both xsrcMask and ysrcMask are `-1` , xsrc and ysrc will be assumed for the mask source position. Currently only implemented on Windows.
* **ysrcMask** (*int*) – Source y position on the mask. If both xsrcMask and ysrcMask are `-1` , xsrc and ysrc will be assumed for the mask source position. Currently only implemented on Windows.



Return type
*bool*





Note


There is partial support for [`Blit`](#wx.DC.Blit "wx.DC.Blit") in  [wx.PostScriptDC](wx.PostScriptDC.html#wx-postscriptdc), under X.




See also


[`StretchBlit`](#wx.DC.StretchBlit "wx.DC.StretchBlit") ,  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc),  [wx.Bitmap](wx.Bitmap.html#wx-bitmap),  [wx.Mask](wx.Mask.html#wx-mask)





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def CalcBoundingBox(self, x, y) -> None:
        """ 

`CalcBoundingBox`(*self*, *x*, *y*)[¶](#wx.DC.CalcBoundingBox "Permalink to this definition")
Adds the specified point to the bounding box which can be retrieved with [`MinX`](#wx.DC.MinX "wx.DC.MinX") , [`MaxX`](#wx.DC.MaxX "wx.DC.MaxX") and [`MinY`](#wx.DC.MinY "wx.DC.MinY") , [`MaxY`](#wx.DC.MaxY "wx.DC.MaxY") functions.



Parameters
* **x** (*int*) –
* **y** (*int*) –





See also


[`ResetBoundingBox`](#wx.DC.ResetBoundingBox "wx.DC.ResetBoundingBox")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def CanDrawBitmap(self) -> bool:
        """ 

`CanDrawBitmap`(*self*)[¶](#wx.DC.CanDrawBitmap "Permalink to this definition")
Does the DC support drawing bitmaps?



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def CanGetTextExtent(self) -> bool:
        """ 

`CanGetTextExtent`(*self*)[¶](#wx.DC.CanGetTextExtent "Permalink to this definition")
Does the DC support calculating the size required to draw text?



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def CanUseTransformMatrix(self) -> bool:
        """ 

`CanUseTransformMatrix`(*self*)[¶](#wx.DC.CanUseTransformMatrix "Permalink to this definition")
Check if the use of transformation matrix is supported by the current system.


This function returns `True` for MSW and GTK+ 3 platforms and since 3.1.1 also for  [wx.GCDC](wx.GCDC.html#wx-gcdc) in all ports.



Return type
*bool*





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.DC.Clear "Permalink to this definition")
Clears the device context using the current background brush.


Note that [`SetBackground`](#wx.DC.SetBackground "wx.DC.SetBackground") method must be used to set the brush used by [`Clear`](#wx.DC.Clear "wx.DC.Clear") , the brush used for filling the shapes set by [`SetBrush`](#wx.DC.SetBrush "wx.DC.SetBrush") is ignored by it.


If no background brush was set, solid white brush is used to clear the device context.




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def CopyAttributes(self, dc: 'DC') -> None:
        """ 

`CopyAttributes`(*self*, *dc*)[¶](#wx.DC.CopyAttributes "Permalink to this definition")
Copy attributes from another DC.


The copied attributes currently are:


* Font
* Text foreground and background colours
* Background brush
* Layout direction


Note that the scaling factor is not considered to be an attribute of  [wx.DC](#wx-dc) and is *not* copied by this function.



Parameters
**dc** ([*wx.DC*](#wx.DC "wx.DC")) – A valid (i.e. its [`IsOk`](#wx.DC.IsOk "wx.DC.IsOk") must return `True`) source device context.






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def CrossHair(self, *args, **kw) -> None:
        """ 

`CrossHair`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.CrossHair "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CrossHair** *(self, x, y)*


Displays a cross hair using the current pen.


This is a vertical and horizontal line the height and width of the window, centred on the given point.



Parameters
* **x** (*int*) –
* **y** (*int*) –






---

  



**CrossHair** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DestroyClippingRegion(self) -> None:
        """ 

`DestroyClippingRegion`(*self*)[¶](#wx.DC.DestroyClippingRegion "Permalink to this definition")
Destroys the current clipping region so that none of the DC is clipped.



See also


[`SetClippingRegion`](#wx.DC.SetClippingRegion "wx.DC.SetClippingRegion")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DeviceToLogical(self, *args, **kw) -> 'Point':
        """ 

`DeviceToLogical`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DeviceToLogical "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DeviceToLogical** *(self, x, y)*


Converts device (*x*, *y*) coordinates to logical coordinates taking into account all applied transformations like the current mapping mode, scale factors, device origin, axes orientation, affine transformation.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
 [wx.Point](wx.Point.html#wx-point)





New in version 4.1/wxWidgets-3.1.5.





---

  



**DeviceToLogical** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)





New in version 4.1/wxWidgets-3.1.5.





---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DeviceToLogicalRel(self, *args, **kw) -> 'Size':
        """ 

`DeviceToLogicalRel`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DeviceToLogicalRel "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DeviceToLogicalRel** *(self, x, y)*


Converts device *x*, *y* coordinates to relative logical coordinates taking into account all applied transformations like the current mapping mode, scale factors, affine transformation.


Use this for converting distances like e.g. width and height.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.5.





---

  



**DeviceToLogicalRel** *(self, dim)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**dim** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.5.





---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DeviceToLogicalX(self, x: int) -> 'Coord':
        """ 

`DeviceToLogicalX`(*self*, *x*)[¶](#wx.DC.DeviceToLogicalX "Permalink to this definition")
Convert *device* X coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.



Parameters
**x** (*int*) – 



Return type
*wx.Coord*





Note


Affine transformation applied to the coordinate system with [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix") is not taken into account.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DeviceToLogicalXRel(self, x: int) -> 'Coord':
        """ 

`DeviceToLogicalXRel`(*self*, *x*)[¶](#wx.DC.DeviceToLogicalXRel "Permalink to this definition")
Convert *device* X coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.


Use this for converting a horizontal distance like for example a width.



Parameters
**x** (*int*) – 



Return type
*wx.Coord*





Note


Affine transformation applied to the coordinate system with [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix") is not taken into account.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DeviceToLogicalY(self, y: int) -> 'Coord':
        """ 

`DeviceToLogicalY`(*self*, *y*)[¶](#wx.DC.DeviceToLogicalY "Permalink to this definition")
Converts *device* Y coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.



Parameters
**y** (*int*) – 



Return type
*wx.Coord*





Note


Affine transformation applied to the coordinate system with [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix") is not taken into account.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DeviceToLogicalYRel(self, y: int) -> 'Coord':
        """ 

`DeviceToLogicalYRel`(*self*, *y*)[¶](#wx.DC.DeviceToLogicalYRel "Permalink to this definition")
Convert *device* Y coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.


Use this for converting a vertical distance like for example a height.



Parameters
**y** (*int*) – 



Return type
*wx.Coord*





Note


Affine transformation applied to the coordinate system with [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix") is not taken into account.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawArc(self, *args, **kw) -> None:
        """ 

`DrawArc`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawArc "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawArc** *(self, xStart, yStart, xEnd, yEnd, xc, yc)*


Draws an arc from the given start to the given end point.


The arc drawn is an arc of the circle centered at ( *xc*, *yc*). Its start point is (*xStart*, *yStart*) whereas its end point is the point of intersection of the line passing by (*xc*, *yc*) and (*xEnd*, *yEnd*) with the circle passing by (*xStart*, *yStart*).


The arc is drawn in a counter-clockwise direction between the start and the end points.


The current pen is used for the outline and the current brush for filling the shape. Notice that unless the brush is transparent, the lines connecting the centre of the circle to the end points of the arc are drawn as well.



Parameters
* **xStart** (*int*) –
* **yStart** (*int*) –
* **xEnd** (*int*) –
* **yEnd** (*int*) –
* **xc** (*int*) –
* **yc** (*int*) –





Note


[`DrawEllipticArc`](#wx.DC.DrawEllipticArc "wx.DC.DrawEllipticArc") has more clear semantics and it is recommended to use it instead of this function.





---

  



**DrawArc** *(self, ptStart, ptEnd, centre)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **ptStart** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **ptEnd** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **centre** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawBitmap(self, *args, **kw) -> None:
        """ 

`DrawBitmap`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawBitmap "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawBitmap** *(self, bitmap, x, y, useMask=False)*


Draw a bitmap on the device context at the specified point.


If *useMask* is `True` and the bitmap has a transparency mask, the bitmap will be drawn transparently.


When drawing a mono-bitmap, the current text foreground colour will be used to draw the foreground of the bitmap (all bits set to 1), and the current text background colour to draw the background (all bits set to 0).



Parameters
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **x** (*int*) –
* **y** (*int*) –
* **useMask** (*bool*) –





See also


[`SetTextForeground`](#wx.DC.SetTextForeground "wx.DC.SetTextForeground") , [`SetTextBackground`](#wx.DC.SetTextBackground "wx.DC.SetTextBackground") ,  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc)





---

  



**DrawBitmap** *(self, bmp, pt, useMask=False)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **bmp** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **useMask** (*bool*) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawCheckMark(self, *args, **kw) -> None:
        """ 

`DrawCheckMark`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawCheckMark "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawCheckMark** *(self, x, y, width, height)*


Draws a check mark inside the given rectangle.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –






---

  



**DrawCheckMark** *(self, rect)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawCircle(self, *args, **kw) -> None:
        """ 

`DrawCircle`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawCircle "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawCircle** *(self, x, y, radius)*


Draws a circle with the given centre and radius.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **radius** (*int*) –





See also


[`DrawEllipse`](#wx.DC.DrawEllipse "wx.DC.DrawEllipse")





---

  



**DrawCircle** *(self, pt, radius)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **radius** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawEllipse(self, *args, **kw) -> None:
        """ 

`DrawEllipse`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawEllipse "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawEllipse** *(self, x, y, width, height)*


Draws an ellipse contained in the rectangle specified either with the given top left corner and the given size or directly.


The current pen is used for the outline and the current brush for filling the shape.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –





See also


[`DrawCircle`](#wx.DC.DrawCircle "wx.DC.DrawCircle")





---

  



**DrawEllipse** *(self, pt, size)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  



**DrawEllipse** *(self, rect)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawEllipseList(self, ellipses, pens=None, brushes=None) -> None:
        """ 

`DrawEllipseList`(*self*, *ellipses*, *pens=None*, *brushes=None*)[¶](#wx.DC.DrawEllipseList "Permalink to this definition")
Draw a list of ellipses as quickly as possible.



Parameters
* **ellipses** – A sequence of 4-element sequences representing
each ellipse to draw, (x,y, w,h).
* **pens** – If None, then the current pen is used. If a
single pen then it will be used for all ellipses.
If a list of pens then there should be one for each
ellipse in ellipses.
* **brushes** – A brush or brushes to be used to fill the ellipses,
with similar semantics as the pens parameter.






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawEllipticArc(self, *args, **kw) -> None:
        """ 

`DrawEllipticArc`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawEllipticArc "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawEllipticArc** *(self, x, y, width, height, start, end)*


Draws an arc of an ellipse.


The current pen is used for drawing the arc and the current brush is used for drawing the pie.


*x* and *y* specify the x and y coordinates of the upper-left corner of the rectangle that contains the ellipse.


*width* and *height* specify the width and height of the rectangle that contains the ellipse.


*start* and *end* specify the end points of the arc relative to the three-o’clock position from the center of the rectangle. Angles are specified in degrees with 0 degree angle corresponding to the positive horizontal axis (3 o’clock) direction.


Independently of whether *start* is greater than or less than *end*, the arc is drawn in the counter-clockwise direction. Also, if *start* is equal to *end*, a complete ellipse is drawn.


Notice that unlike [`DrawArc`](#wx.DC.DrawArc "wx.DC.DrawArc") , this function does not draw the lines to the arc ends, even when using non-transparent brush.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –
* **start** (*float*) –
* **end** (*float*) –






---

  



**DrawEllipticArc** *(self, pt, sz, sa, ea)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **sa** (*float*) –
* **ea** (*float*) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawIcon(self, *args, **kw) -> None:
        """ 

`DrawIcon`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawIcon "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawIcon** *(self, icon, x, y)*


Draw an icon on the display (does nothing if the device context is PostScript).


This can be the simplest way of drawing bitmaps on a window.



Parameters
* **icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) –
* **x** (*int*) –
* **y** (*int*) –






---

  



**DrawIcon** *(self, icon, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) –
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawLabel(self, *args, **kw) -> 'Rect':
        """ 

`DrawLabel`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawLabel "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawLabel** *(self, text, bitmap, rect, alignment=ALIGN\_LEFT|ALIGN\_TOP, indexAccel=-1)*


Draw optional bitmap and the text into the given rectangle and aligns it as specified by alignment parameter; it also will emphasize the character with the given index if it is != -1 and return the bounding rectangle if required.



Parameters
* **text** (*string*) –
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **alignment** (*int*) –
* **indexAccel** (*int*) –



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






---

  



**DrawLabel** *(self, text, rect, alignment=ALIGN\_LEFT|ALIGN\_TOP, indexAccel=-1)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **text** (*string*) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **alignment** (*int*) –
* **indexAccel** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawLine(self, *args, **kw) -> None:
        """ 

`DrawLine`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawLine "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawLine** *(self, x1, y1, x2, y2)*


Draws a line from the first point to the second.


The current pen is used for drawing the line. Note that the point (*x2*, *y2*) is not part of the line and is not drawn by this function (this is consistent with the behaviour of many other toolkits).



Parameters
* **x1** (*int*) –
* **y1** (*int*) –
* **x2** (*int*) –
* **y2** (*int*) –






---

  



**DrawLine** *(self, pt1, pt2)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt1** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **pt2** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawLineList(self, lines, pens=None) -> None:
        """ 

`DrawLineList`(*self*, *lines*, *pens=None*)[¶](#wx.DC.DrawLineList "Permalink to this definition")
Draw a list of lines as quickly as possible.



Parameters
* **lines** – A sequence of 4-element sequences representing
each line to draw, (x1,y1, x2,y2).
* **pens** – If None, then the current pen is used. If a
single pen then it will be used for all lines. If
a list of pens then there should be one for each line
in lines.






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawLines(self, points, xoffset=0, yoffset=0) -> None:
        """ 

`DrawLines`(*self*, *points*, *xoffset=0*, *yoffset=0*)[¶](#wx.DC.DrawLines "Permalink to this definition")
This method uses a list of Points, adding the optional offset coordinate.


The programmer is responsible for deleting the list of points.




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawLinesFromBuffer(self, pyBuff: Any) -> None:
        """ 

`DrawLinesFromBuffer`(*self*, *pyBuff*)[¶](#wx.DC.DrawLinesFromBuffer "Permalink to this definition")
Implementation of DrawLines that can use numpy arrays, or anything else that uses the
python buffer protocol directly without any element conversion. This provides a
significant performance increase over the standard DrawLines function.


The pyBuff argument needs to provide an array of C integers organized as
x, y point pairs. The size of a C integer is platform dependent.
With numpy, the intc data type will provide the appropriate element size.


If called with an object that doesn’t support
the python buffer protocol, or if the underlying element size does not
match the size of a C integer, a TypeError exception is raised. If
the buffer provided has float data with the same element size as a
C integer, no error will be raised, but the lines will not be drawn
in the appropriate places.



Parameters
**pyBuff** – A python buffer containing integer pairs






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawPoint(self, *args, **kw) -> None:
        """ 

`DrawPoint`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawPoint "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawPoint** *(self, x, y)*


Draws a point using the color of the current pen.


Note that the other properties of the pen are not used, such as width.



Parameters
* **x** (*int*) –
* **y** (*int*) –






---

  



**DrawPoint** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawPointList(self, points, pens=None) -> None:
        """ 

`DrawPointList`(*self*, *points*, *pens=None*)[¶](#wx.DC.DrawPointList "Permalink to this definition")
Draw a list of points as quickly as possible.



Parameters
* **points** – A sequence of 2-element sequences representing
each point to draw, (x,y).
* **pens** – If None, then the current pen is used. If a single
pen then it will be used for all points. If a list of
pens then there should be one for each point in points.






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawPolygon(self, points, xoffset=0, yoffset=0, fill_style=ODDEVEN_RULE) -> None:
        """ 

`DrawPolygon`(*self*, *points*, *xoffset=0*, *yoffset=0*, *fill\_style=ODDEVEN\_RULE*)[¶](#wx.DC.DrawPolygon "Permalink to this definition")
This method draws a filled polygon using a list of Points, adding the optional offset coordinate.


The first and last points are automatically closed.


The last argument specifies the fill rule: `wx.ODDEVEN_RULE` (the default) or `wx.WINDING_RULE`.


The current pen is used for drawing the outline, and the current brush for filling the shape. Using a transparent brush suppresses filling.


The programmer is responsible for deleting the list of points.




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawPolygonList(self, polygons, pens=None, brushes=None) -> None:
        """ 

`DrawPolygonList`(*self*, *polygons*, *pens=None*, *brushes=None*)[¶](#wx.DC.DrawPolygonList "Permalink to this definition")
Draw a list of polygons, each of which is a list of points.



Parameters
* **polygons** – A sequence of sequences of sequences.
[[(x1,y1),(x2,y2),(x3,y3)…], [(x1,y1),(x2,y2),(x3,y3)…]]
* **pens** – If None, then the current pen is used. If a
single pen then it will be used for all polygons.
If a list of pens then there should be one for each
polygon.
* **brushes** – A brush or brushes to be used to fill the polygons,
with similar semantics as the pens parameter.






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawRectangle(self, *args, **kw) -> None:
        """ 

`DrawRectangle`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawRectangle "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawRectangle** *(self, x, y, width, height)*


Draws a rectangle with the given corner coordinate and size.


Normally, *x* and *y* specify the top left corner coordinates and both *width* and *height* are positive, however they are also allowed to be negative, in which case the corresponding corner coordinate refers to the right or bottom corner instead.


The current pen is used for the outline and the current brush for filling the shape.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –






---

  



**DrawRectangle** *(self, pt, sz)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  



**DrawRectangle** *(self, rect)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawRectangleList(self, rectangles, pens=None, brushes=None) -> None:
        """ 

`DrawRectangleList`(*self*, *rectangles*, *pens=None*, *brushes=None*)[¶](#wx.DC.DrawRectangleList "Permalink to this definition")
Draw a list of rectangles as quickly as possible.



Parameters
* **rectangles** – A sequence of 4-element sequences representing
each rectangle to draw, (x,y, w,h).
* **pens** – If None, then the current pen is used. If a
single pen then it will be used for all rectangles.
If a list of pens then there should be one for each
rectangle in rectangles.
* **brushes** – A brush or brushes to be used to fill the rectagles,
with similar semantics as the pens parameter.






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawRotatedText(self, *args, **kw) -> None:
        """ 

`DrawRotatedText`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawRotatedText "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawRotatedText** *(self, text, x, y, angle)*


Draws the text rotated by *angle* degrees (positive angles are counterclockwise; the full angle is 360 degrees).


Notice that, as with [`DrawText`](#wx.DC.DrawText "wx.DC.DrawText") , the *text* can contain multiple lines separated by the new line ( `'\n'` ) characters.



Parameters
* **text** (*string*) –
* **x** (*int*) –
* **y** (*int*) –
* **angle** (*float*) –





Note


Under MSW only TrueType fonts can be drawn by this function. In particular, a font different from `NORMAL_FONT` should be used as the latter is not a TrueType font. `SWISS_FONT` is an example of a font which is.




See also


[`DrawText`](#wx.DC.DrawText "wx.DC.DrawText")





---

  



**DrawRotatedText** *(self, text, point, angle)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **text** (*string*) –
* **point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **angle** (*float*) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawRoundedRectangle(self, *args, **kw) -> None:
        """ 

`DrawRoundedRectangle`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawRoundedRectangle "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawRoundedRectangle** *(self, x, y, width, height, radius)*


Draws a rectangle with the given top left corner, and with the given size.


The corners are quarter-circles using the given radius. The current pen is used for the outline and the current brush for filling the shape.


If *radius* is positive, the value is assumed to be the radius of the rounded corner. If *radius* is negative, the absolute value is assumed to be the *proportion* of the smallest dimension of the rectangle. This means that the corner can be a sensible size relative to the size of the rectangle, and also avoids the strange effects X produces when the corners are too big for the rectangle.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –
* **radius** (*float*) –






---

  



**DrawRoundedRectangle** *(self, pt, sz, radius)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **radius** (*float*) –






---

  



**DrawRoundedRectangle** *(self, rect, radius)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **radius** (*float*) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawSpline(self, *args, **kw) -> None:
        """ 

`DrawSpline`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawSpline "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawSpline** *(self, points)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.




---

  



**DrawSpline** *(self, x1, y1, x2, y2, x3, y3)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.




---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawText(self, *args, **kw) -> None:
        """ 

`DrawText`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.DrawText "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawText** *(self, text, x, y)*


Draws a text string at the specified point, using the current text font, and the current text foreground and background colours.


The coordinates refer to the top-left corner of the rectangle bounding the string. See [`GetTextExtent`](#wx.DC.GetTextExtent "wx.DC.GetTextExtent") for how to get the dimensions of a text string, which can be used to position the text more precisely and [`DrawLabel`](#wx.DC.DrawLabel "wx.DC.DrawLabel") if you need to align the string differently.


Starting from wxWidgets 2.9.2 *text* parameter can be a multi-line string, i.e. contain new line characters, and will be rendered correctly.



Parameters
* **text** (*string*) –
* **x** (*int*) –
* **y** (*int*) –





Note


The current [logical function](#wx-dc) is ignored by this function.





---

  



**DrawText** *(self, text, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **text** (*string*) –
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def DrawTextList(self, textList, coords, foregrounds=None, backgrounds=None) -> None:
        """ 

`DrawTextList`(*self*, *textList*, *coords*, *foregrounds=None*, *backgrounds=None*)[¶](#wx.DC.DrawTextList "Permalink to this definition")
Draw a list of strings using a list of coordinants for positioning each string.



Parameters
* **textList** – A list of strings
* **coords** – A list of (x,y) positions
* **foregrounds** – A list of [`wx.Colour`](wx.Colour.html#wx.Colour "wx.Colour") objects to use for the
foregrounds of the strings.
* **backgrounds** – A list of [`wx.Colour`](wx.Colour.html#wx.Colour "wx.Colour") objects to use for the
backgrounds of the strings.





`NOTE`: Make sure you set background mode to wx.Solid (DC.SetBackgroundMode)If you want backgrounds to do anything.






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def EndDoc(self) -> None:
        """ 

`EndDoc`(*self*)[¶](#wx.DC.EndDoc "Permalink to this definition")
Ends a document (only relevant when outputting to a printer).




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def EndPage(self) -> None:
        """ 

`EndPage`(*self*)[¶](#wx.DC.EndPage "Permalink to this definition")
Ends a document page (only relevant when outputting to a printer).




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def FloodFill(self, *args, **kw) -> bool:
        """ 

`FloodFill`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.FloodFill "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FloodFill** *(self, x, y, colour, style=FLOOD\_SURFACE)*


Flood fills the device context starting from the given point, using the current brush colour, and using a style:


* `wx.FLOOD_SURFACE`: The flooding occurs until a colour other than the given colour is encountered.
* `wx.FLOOD_BORDER`: The area to be flooded is bounded by the given colour.


Currently this method is not implemented in wxOSX and does nothing there.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **style** ([*FloodFillStyle*](wx.FloodFillStyle.enumeration.html "FloodFillStyle")) –



Return type
*bool*



Returns
`False` if the operation failed.





Note


The present implementation for non-Windows platforms may fail to find colour borders if the pixels do not match the colour exactly. However the function will still return `True`.




Note


This method shouldn’t be used with  [wx.PaintDC](wx.PaintDC.html#wx-paintdc) under non-Windows platforms as it uses [`GetPixel`](#wx.DC.GetPixel "wx.DC.GetPixel") internally and this may give wrong results, notably in wxGTK. If you need to flood fill  [wx.PaintDC](wx.PaintDC.html#wx-paintdc), create a temporary  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc), flood fill it and then blit it to, or draw as a bitmap on,  [wx.PaintDC](wx.PaintDC.html#wx-paintdc). See the example of doing this in the drawing sample and  [wx.BufferedPaintDC](wx.BufferedPaintDC.html#wx-bufferedpaintdc) class.





---

  



**FloodFill** *(self, pt, col, style=FLOOD\_SURFACE)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **style** ([*FloodFillStyle*](wx.FloodFillStyle.enumeration.html "FloodFillStyle")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def FromDIP(self, *args, **kw) -> 'Size':
        """ 

`FromDIP`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.FromDIP "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FromDIP** *(self, sz)*


Convert DPI-independent pixel values to the value in pixels appropriate for the DC.


See *Window.FromDIP(const* Size& sz) for more info about converting device independent pixel values.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.7.





---

  



**FromDIP** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**FromDIP** *(self, d)*


Convert DPI-independent value in pixels to the value in pixels appropriate for the DC.


This is the same as FromDIP(const Size& sz) overload, but assumes that the resolution is the same in horizontal and vertical directions.



Parameters
**d** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.7.





---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetAsBitmap(self, subrect: Optional['Rect']=None) -> 'Bitmap':
        """ 

`GetAsBitmap`(*self*, *subrect=None*)[¶](#wx.DC.GetAsBitmap "Permalink to this definition")
If supported by the platform and the type of DC, fetch the contents of the DC, or a subset of it, as a bitmap.



Parameters
**subrect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetBackground(self) -> 'Brush':
        """ 

`GetBackground`(*self*)[¶](#wx.DC.GetBackground "Permalink to this definition")
Gets the brush used for painting the background.



Return type
 [wx.Brush](wx.Brush.html#wx-brush)





See also


[`wx.DC.SetBackground`](#wx.DC.SetBackground "wx.DC.SetBackground")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetBackgroundMode(self) -> int:
        """ 

`GetBackgroundMode`(*self*)[¶](#wx.DC.GetBackgroundMode "Permalink to this definition")
Returns the current background mode: `BRUSHSTYLE_SOLID` or `BRUSHSTYLE_TRANSPARENT` .



Return type
*int*





See also


[`SetBackgroundMode`](#wx.DC.SetBackgroundMode "wx.DC.SetBackgroundMode")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetBoundingBox(self) -> None:
        """ 

`GetBoundingBox`(*self*)[¶](#wx.DC.GetBoundingBox "Permalink to this definition")
Returns the min and max points used in drawing commands so far.




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetBrush(self) -> 'Brush':
        """ 

`GetBrush`(*self*)[¶](#wx.DC.GetBrush "Permalink to this definition")
Gets the current brush.



Return type
 [wx.Brush](wx.Brush.html#wx-brush)





See also


[`wx.DC.SetBrush`](#wx.DC.SetBrush "wx.DC.SetBrush")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetCGContext(self) -> int:
        """ 

`GetCGContext`(*self*)[¶](#wx.DC.GetCGContext "Permalink to this definition")

Return type
*wx.UIntPtr*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetCharHeight(self) -> 'Coord':
        """ 

`GetCharHeight`(*self*)[¶](#wx.DC.GetCharHeight "Permalink to this definition")
Gets the character height of the currently set font.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetCharWidth(self) -> 'Coord':
        """ 

`GetCharWidth`(*self*)[¶](#wx.DC.GetCharWidth "Permalink to this definition")
Gets the average character width of the currently set font.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetClippingBox(self) -> tuple:
        """ 

`GetClippingBox`(*self*)[¶](#wx.DC.GetClippingBox "Permalink to this definition")
Gets the rectangle surrounding the current clipping region.


If no clipping region is set this function returns the extent of the device context.



Return type
*tuple*



Returns
( *bool*, *x*, *y*, *width*, *height* )





Note


Clipping region is given in logical coordinates.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetClippingRect(self) -> None:
        """ 

`GetClippingRect`(*self*)[¶](#wx.DC.GetClippingRect "Permalink to this definition")
Returns the rectangle surrounding the current clipping region as a wx.Rect.




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetContentScaleFactor(self) -> float:
        """ 

`GetContentScaleFactor`(*self*)[¶](#wx.DC.GetContentScaleFactor "Permalink to this definition")
Returns the factor used for converting logical pixels to physical ones.


Returns the same value as [`wx.Window.GetContentScaleFactor`](wx.Window.html#wx.Window.GetContentScaleFactor "wx.Window.GetContentScaleFactor") for the device contexts associated with a window and the same value as [`wx.Bitmap.GetScaleFactor`](wx.Bitmap.html#wx.Bitmap.GetScaleFactor "wx.Bitmap.GetScaleFactor") for the associated bitmap for  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc).



Return type
*float*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetDepth(self) -> int:
        """ 

`GetDepth`(*self*)[¶](#wx.DC.GetDepth "Permalink to this definition")
Returns the depth (number of bits/pixel) of this DC.



Return type
*int*





See also


[`wx.DisplayDepth`](wx.functions.html#wx.DisplayDepth "wx.DisplayDepth")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetDeviceOrigin(self) -> 'Point':
        """ 

`GetDeviceOrigin`(*self*)[¶](#wx.DC.GetDeviceOrigin "Permalink to this definition")
Returns the current device origin.



Return type
 [wx.Point](wx.Point.html#wx-point)





See also


[`SetDeviceOrigin`](#wx.DC.SetDeviceOrigin "wx.DC.SetDeviceOrigin")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetFont(self) -> 'Font':
        """ 

`GetFont`(*self*)[¶](#wx.DC.GetFont "Permalink to this definition")
Gets the current font.


Notice that even although each device context object has some default font after creation, this method would return a `wx.NullFont` initially and only after calling [`SetFont`](#wx.DC.SetFont "wx.DC.SetFont") a valid font is returned.



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetFontMetrics(self) -> 'FontMetrics':
        """ 

`GetFontMetrics`(*self*)[¶](#wx.DC.GetFontMetrics "Permalink to this definition")
Returns the various font characteristics.


This method allows retrieving some of the font characteristics not returned by [`GetTextExtent`](#wx.DC.GetTextExtent "wx.DC.GetTextExtent") , notably internal leading and average character width.


Currently this method returns correct results only under wxMSW, in the other ports the internal leading will always be 0 and the average character width will be computed as the width of the character ‘x’.



Return type
 [wx.FontMetrics](wx.FontMetrics.html#wx-fontmetrics)





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetGdkDrawable(self) -> int:
        """ 

`GetGdkDrawable`(*self*)[¶](#wx.DC.GetGdkDrawable "Permalink to this definition")

Return type
*wx.UIntPtr*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetGraphicsContext(self) -> 'GraphicsContext':
        """ 

`GetGraphicsContext`(*self*)[¶](#wx.DC.GetGraphicsContext "Permalink to this definition")
If supported by the platform and the `  [wx.DC](#wx-dc) ` implementation, this method will return the `  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) ` associated with the DC.


Otherwise `None` is returned.



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetHDC(self) -> int:
        """ 

`GetHDC`(*self*)[¶](#wx.DC.GetHDC "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetHandle(self) -> int:
        """ 

`GetHandle`(*self*)[¶](#wx.DC.GetHandle "Permalink to this definition")
Returns a value that can be used as a handle to the native drawing context, if this  [wx.DC](#wx-dc) has something that could be thought of in that way.


(Not all of them do.)


For example, on Windows the return value is an `HDC`, on macOS it is a CGContextRef and on wxGTK it will be a GdkDrawable. If the DC is a  [wx.GCDC](wx.GCDC.html#wx-gcdc) then the return value will be the value returned from [`wx.GraphicsContext.GetNativeContext`](wx.GraphicsContext.html#wx.GraphicsContext.GetNativeContext "wx.GraphicsContext.GetNativeContext") . A value of `None` is returned if the DC does not have anything that fits the handle concept.



Return type
*wx.UIntPtr*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetLayoutDirection(self) -> int:
        """ 

`GetLayoutDirection`(*self*)[¶](#wx.DC.GetLayoutDirection "Permalink to this definition")
Gets the current layout direction of the device context.


On platforms where RTL layout is supported, the return value will either be `Layout_LeftToRight` or `Layout_RightToLeft` . If RTL layout is not supported, the return value will be `Layout_Default` .



Return type
 [wx.LayoutDirection](wx.LayoutDirection.enumeration.html#wx-layoutdirection)





See also


[`SetLayoutDirection`](#wx.DC.SetLayoutDirection "wx.DC.SetLayoutDirection")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetLogicalFunction(self) -> 'RasterOperationMode':
        """ 

`GetLogicalFunction`(*self*)[¶](#wx.DC.GetLogicalFunction "Permalink to this definition")
Gets the current logical function.



Return type
 [wx.RasterOperationMode](wx.RasterOperationMode.enumeration.html#wx-rasteroperationmode)





See also


[`SetLogicalFunction`](#wx.DC.SetLogicalFunction "wx.DC.SetLogicalFunction")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetLogicalOrigin(self) -> tuple:
        """ 

`GetLogicalOrigin`(*self*)[¶](#wx.DC.GetLogicalOrigin "Permalink to this definition")
Return the coordinates of the logical point (0, 0).



Return type
*tuple*



Returns
( *x*, *y* )





See also


[`SetLogicalOrigin`](#wx.DC.SetLogicalOrigin "wx.DC.SetLogicalOrigin")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetLogicalScale(self) -> tuple:
        """ 

`GetLogicalScale`(*self*)[¶](#wx.DC.GetLogicalScale "Permalink to this definition")
Return the scale set by the last call to [`SetLogicalScale`](#wx.DC.SetLogicalScale "wx.DC.SetLogicalScale") .



Return type
*tuple*



Returns
( *x*, *y* )






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetMapMode(self) -> 'MappingMode':
        """ 

`GetMapMode`(*self*)[¶](#wx.DC.GetMapMode "Permalink to this definition")
Gets the current mapping mode for the device context.



Return type
 [wx.MappingMode](wx.MappingMode.enumeration.html#wx-mappingmode)





See also


[`SetMapMode`](#wx.DC.SetMapMode "wx.DC.SetMapMode")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetFullMultiLineTextExtent(self, string, font=None) -> tuple:
        """ 

`GetFullMultiLineTextExtent`(*self*, *string*, *font=None*)[¶](#wx.DC.GetFullMultiLineTextExtent "Permalink to this definition")
Gets the dimensions of the string as it would be drawn.


The `string` parameter is the string to measure. The return value
is a tuple of integer values consisting of `widget`, `height` and
`heightLine`. The `heightLine` is the the height of a single line.


If the optional parameter `font` is specified and valid, then it is
used for the text extent calculation. Otherwise the currently selected
font is.



Note


This function works with both single-line and multi-line strings.




See also


[`wx.Font`](wx.Font.html#wx.Font "wx.Font"), [`SetFont`](#wx.DC.SetFont "wx.DC.SetFont"),
`GetTextExtent`




Parameters
* **string** (*string*) –
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –



Return type
*tuple*



Returns
( *w*, *h*, *heightLine* )






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetMultiLineTextExtent(self, st: Any) -> None:
        """ 

`GetMultiLineTextExtent`(*self*, *st*)[¶](#wx.DC.GetMultiLineTextExtent "Permalink to this definition")
Return the dimensions of the given string’s text extent using the
currently selected font, taking into account multiple lines if
present in the string.



Parameters
**st** – The string to be measured





See also


[`GetFullMultiLineTextExtent`](#wx.DC.GetFullMultiLineTextExtent "wx.DC.GetFullMultiLineTextExtent")




Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetPPI(self) -> 'Size':
        """ 

`GetPPI`(*self*)[¶](#wx.DC.GetPPI "Permalink to this definition")
Returns the resolution of the device in pixels per inch.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetPartialTextExtents(self, text) -> None:
        """ 

`GetPartialTextExtents`(*self*, *text*)[¶](#wx.DC.GetPartialTextExtents "Permalink to this definition")
Fills the *widths* array with the widths from the beginning of *text* to the corresponding character of *text*.


The generic version simply builds a running total of the widths of each character using [`GetTextExtent`](#wx.DC.GetTextExtent "wx.DC.GetTextExtent") , however if the various platforms have a native API function that is faster or more accurate than the generic implementation then it should be used instead.




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetPen(self) -> 'Pen':
        """ 

`GetPen`(*self*)[¶](#wx.DC.GetPen "Permalink to this definition")
Gets the current pen.



Return type
 [wx.Pen](wx.Pen.html#wx-pen)





See also


[`SetPen`](#wx.DC.SetPen "wx.DC.SetPen")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetPixel(self, x, y) -> 'Colour':
        """ 

`GetPixel`(*self*, *x*, *y*)[¶](#wx.DC.GetPixel "Permalink to this definition")

> Gets the colour at the specified location on the DC.
> 
> 
> This method isn’t available for `wx.PostScriptDC` or `wx.MetafileDC` nor
> for any DC in wxOSX port, and simply returns `wx.NullColour` there.
> 
> 
> 
> Note
> 
> 
> Setting a pixel can be done using DrawPoint().
> 
> 
> 
> 
> Note
> 
> 
> This method shouldn’t be used with `wx.PaintDC` as accessing the
> DC while drawing can result in unexpected results, notably in wxGTK.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.DC.GetSize "Permalink to this definition")
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetSizeMM(self) -> 'Size':
        """ 

`GetSizeMM`(*self*)[¶](#wx.DC.GetSizeMM "Permalink to this definition")
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetTextBackground(self) -> 'Colour':
        """ 

`GetTextBackground`(*self*)[¶](#wx.DC.GetTextBackground "Permalink to this definition")
Gets the current text background colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





See also


[`SetTextBackground`](#wx.DC.SetTextBackground "wx.DC.SetTextBackground")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetFullTextExtent(self, string, font=None) -> tuple:
        """ 

`GetFullTextExtent`(*self*, *string*, *font=None*)[¶](#wx.DC.GetFullTextExtent "Permalink to this definition")
Gets the dimensions of the string as it would be drawn.


The `string` parameter is the string to measure. The return value
is a tuple of integer values consisting of `widget`, `height`,
`decent` and `externalLeading`. The `descent` is the dimension
from the baseline of the font to the bottom of the descender, and
`externalLeading` is any extra vertical space added to the font by the
font designer (usually is zero).


If the optional parameter `font` is specified and valid, then it is
used for the text extent calculation. Otherwise the currently selected
font is.



See also


[`wx.Font`](wx.Font.html#wx.Font "wx.Font"), [`SetFont`](#wx.DC.SetFont "wx.DC.SetFont"),
`GetMultiLineTextExtent`




Parameters
* **string** (*string*) –
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –



Return type
*tuple*



Returns
( *w*, *h*, *descent*, *externalLeading* )






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetTextExtent(self, st: Any) -> 'Size':
        """ 

`GetTextExtent`(*self*, *st*)[¶](#wx.DC.GetTextExtent "Permalink to this definition")
Return the dimensions of the given string’s text extent using the
currently selected font.



Parameters
**st** – The string to be measured





See also


[`GetFullTextExtent`](#wx.DC.GetFullTextExtent "wx.DC.GetFullTextExtent")




Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetTextForeground(self) -> 'Colour':
        """ 

`GetTextForeground`(*self*)[¶](#wx.DC.GetTextForeground "Permalink to this definition")
Gets the current text foreground colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





See also


[`SetTextForeground`](#wx.DC.SetTextForeground "wx.DC.SetTextForeground")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetTransformMatrix(self) -> 'AffineMatrix2D':
        """ 

`GetTransformMatrix`(*self*)[¶](#wx.DC.GetTransformMatrix "Permalink to this definition")
Return the transformation matrix used by this device context.


By default the transformation matrix is the identity matrix.



Return type
 [wx.AffineMatrix2D](wx.AffineMatrix2D.html#wx-affinematrix2d)





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GetUserScale(self) -> None:
        """ 

`GetUserScale`(*self*)[¶](#wx.DC.GetUserScale "Permalink to this definition")
Gets the current user scale factor.




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GradientFillConcentric(self, *args, **kw) -> None:
        """ 

`GradientFillConcentric`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.GradientFillConcentric "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GradientFillConcentric** *(self, rect, initialColour, destColour)*


Fill the area specified by rect with a radial gradient, starting from *initialColour* at the centre of the circle and fading to *destColour* on the circle outside.


The circle is placed at the centre of *rect*.



Parameters
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **initialColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **destColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –





Note


Currently this function is very slow, don’t use it for real-time drawing.





---

  



**GradientFillConcentric** *(self, rect, initialColour, destColour, circleCenter)*


Fill the area specified by rect with a radial gradient, starting from *initialColour* at the centre of the circle and fading to *destColour* on the circle outside.


*circleCenter* are the relative coordinates of centre of the circle in the specified *rect*.



Parameters
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **initialColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **destColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **circleCenter** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –





Note


Currently this function is very slow, don’t use it for real-time drawing.





---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def GradientFillLinear(self, rect, initialColour, destColour, nDirection=RIGHT) -> None:
        """ 

`GradientFillLinear`(*self*, *rect*, *initialColour*, *destColour*, *nDirection=RIGHT*)[¶](#wx.DC.GradientFillLinear "Permalink to this definition")
Fill the area specified by *rect* with a linear gradient, starting from *initialColour* and eventually fading to *destColour*.


The *nDirection* specifies the direction of the colour change, default is to use *initialColour* on the left part of the rectangle and *destColour* on the right one.



Parameters
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **initialColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **destColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **nDirection** ([*Direction*](wx.Direction.enumeration.html "Direction")) –






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.DC.IsOk "Permalink to this definition")
Returns `True` if the DC is ok to use.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def LogicalToDevice(self, *args, **kw) -> 'Point':
        """ 

`LogicalToDevice`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.LogicalToDevice "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**LogicalToDevice** *(self, x, y)*


Converts logical (*x*, *y*) coordinates to device coordinates taking into account all applied transformations like the current mapping mode, scale factors, device origin, axes orientation, affine transformation.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
 [wx.Point](wx.Point.html#wx-point)





New in version 4.1/wxWidgets-3.1.5.





---

  



**LogicalToDevice** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)





New in version 4.1/wxWidgets-3.1.5.





---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def LogicalToDeviceRel(self, *args, **kw) -> 'Size':
        """ 

`LogicalToDeviceRel`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.LogicalToDeviceRel "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**LogicalToDeviceRel** *(self, x, y)*


Converts logical *x*, *y* coordinates to relative device coordinates taking into account all applied transformations like the current mapping mode, scale factors, affine transformation.


Use this for converting distances like e.g. width and height.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.5.





---

  



**LogicalToDeviceRel** *(self, dim)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**dim** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.5.





---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def LogicalToDeviceX(self, x: int) -> 'Coord':
        """ 

`LogicalToDeviceX`(*self*, *x*)[¶](#wx.DC.LogicalToDeviceX "Permalink to this definition")
Converts logical X coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.



Parameters
**x** (*int*) – 



Return type
*wx.Coord*





Note


Affine transformation applied to the coordinate system with [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix") is not taken into account.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def LogicalToDeviceXRel(self, x: int) -> 'Coord':
        """ 

`LogicalToDeviceXRel`(*self*, *x*)[¶](#wx.DC.LogicalToDeviceXRel "Permalink to this definition")
Converts logical X coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.


Use this for converting a horizontal distance like for example a width.



Parameters
**x** (*int*) – 



Return type
*wx.Coord*





Note


Affine transformation applied to the coordinate system with [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix") is not taken into account.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def LogicalToDeviceY(self, y: int) -> 'Coord':
        """ 

`LogicalToDeviceY`(*self*, *y*)[¶](#wx.DC.LogicalToDeviceY "Permalink to this definition")
Converts logical Y coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.



Parameters
**y** (*int*) – 



Return type
*wx.Coord*





Note


Affine transformation applied to the coordinate system with [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix") is not taken into account.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def LogicalToDeviceYRel(self, y: int) -> 'Coord':
        """ 

`LogicalToDeviceYRel`(*self*, *y*)[¶](#wx.DC.LogicalToDeviceYRel "Permalink to this definition")
Converts logical Y coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.


Use this for converting a vertical distance like for example a height.



Parameters
**y** (*int*) – 



Return type
*wx.Coord*





Note


Affine transformation applied to the coordinate system with [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix") is not taken into account.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def MaxX(self) -> 'Coord':
        """ 

`MaxX`(*self*)[¶](#wx.DC.MaxX "Permalink to this definition")
Gets the maximum horizontal extent used in drawing commands so far.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def MaxY(self) -> 'Coord':
        """ 

`MaxY`(*self*)[¶](#wx.DC.MaxY "Permalink to this definition")
Gets the maximum vertical extent used in drawing commands so far.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def MinX(self) -> 'Coord':
        """ 

`MinX`(*self*)[¶](#wx.DC.MinX "Permalink to this definition")
Gets the minimum horizontal extent used in drawing commands so far.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def MinY(self) -> 'Coord':
        """ 

`MinY`(*self*)[¶](#wx.DC.MinY "Permalink to this definition")
Gets the minimum vertical extent used in drawing commands so far.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def ResetBoundingBox(self) -> None:
        """ 

`ResetBoundingBox`(*self*)[¶](#wx.DC.ResetBoundingBox "Permalink to this definition")
Resets the bounding box: after a call to this function, the bounding box doesn’t contain anything.



See also


[`CalcBoundingBox`](#wx.DC.CalcBoundingBox "wx.DC.CalcBoundingBox")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def ResetTransformMatrix(self) -> None:
        """ 

`ResetTransformMatrix`(*self*)[¶](#wx.DC.ResetTransformMatrix "Permalink to this definition")
Revert the transformation matrix to identity matrix.



New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetAxisOrientation(self, xLeftRight, yBottomUp) -> None:
        """ 

`SetAxisOrientation`(*self*, *xLeftRight*, *yBottomUp*)[¶](#wx.DC.SetAxisOrientation "Permalink to this definition")
Sets the x and y axis orientation (i.e. the direction from lowest to highest values on the axis).


The default orientation is x axis from left to right and y axis from top down.



Parameters
* **xLeftRight** (*bool*) – True to set the x axis orientation to the natural left to right orientation, `False` to invert it.
* **yBottomUp** (*bool*) – True to set the y axis orientation to the natural bottom up orientation, `False` to invert it.






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetBackground(self, brush: 'Brush') -> None:
        """ 

`SetBackground`(*self*, *brush*)[¶](#wx.DC.SetBackground "Permalink to this definition")
Sets the current background brush for the DC.



Parameters
**brush** ([*wx.Brush*](wx.Brush.html#wx.Brush "wx.Brush")) – 






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetBackgroundMode(self, mode: int) -> None:
        """ 

`SetBackgroundMode`(*self*, *mode*)[¶](#wx.DC.SetBackgroundMode "Permalink to this definition")
Change the current background mode.


This setting determines whether text will be drawn with a background colour or not.


Default is `BRUSHSTYLE_TRANSPARENT` , i.e. text background is not drawn.



Parameters
**mode** (*int*) – one of `BRUSHSTYLE_SOLID` and `BRUSHSTYLE_TRANSPARENT` .






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetBrush(self, brush: 'Brush') -> None:
        """ 

`SetBrush`(*self*, *brush*)[¶](#wx.DC.SetBrush "Permalink to this definition")
Sets the current brush for the DC.


If the argument is `wx.NullBrush` (or another invalid brush; see [`wx.Brush.IsOk`](wx.Brush.html#wx.Brush.IsOk "wx.Brush.IsOk") ), the current brush is selected out of the device context (leaving  [wx.DC](#wx-dc) without any valid brush), allowing the current brush to be destroyed safely.



Parameters
**brush** ([*wx.Brush*](wx.Brush.html#wx.Brush "wx.Brush")) – 





See also


 [wx.Brush](wx.Brush.html#wx-brush),  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc) (for the interpretation of colours when drawing into a monochrome bitmap)





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetClippingRegion(self, *args, **kw) -> None:
        """ 

`SetClippingRegion`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.SetClippingRegion "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetClippingRegion** *(self, x, y, width, height)*


Sets the clipping region for this device context to the intersection of the given region described by the parameters of this method and the previously set clipping region.


The clipping region is an area to which drawing is restricted. Possible uses for the clipping region are for clipping text or for speeding up window redraws when only a known area of the screen is damaged.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –





Note


* Clipping region should be given in logical coordinates.
* Calling this function can only make the clipping region smaller, never larger.
* You need to call [`DestroyClippingRegion`](#wx.DC.DestroyClippingRegion "wx.DC.DestroyClippingRegion") first if you want to set the clipping region exactly to the region specified.
* If resulting clipping region is empty, then all drawing on the DC is clipped out (all changes made by drawing operations are masked out).




See also


[`DestroyClippingRegion`](#wx.DC.DestroyClippingRegion "wx.DC.DestroyClippingRegion") ,  [wx.Region](wx.Region.html#wx-region)





---

  



**SetClippingRegion** *(self, pt, sz)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  



**SetClippingRegion** *(self, rect)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetDeviceClippingRegion(self, region: 'Region') -> None:
        """ 

`SetDeviceClippingRegion`(*self*, *region*)[¶](#wx.DC.SetDeviceClippingRegion "Permalink to this definition")
Sets the clipping region for this device context.


Unlike [`SetClippingRegion`](#wx.DC.SetClippingRegion "wx.DC.SetClippingRegion") , this function works with physical coordinates and not with the logical ones.



Parameters
**region** ([*wx.Region*](wx.Region.html#wx.Region "wx.Region")) – 






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetDeviceOrigin(self, x, y) -> None:
        """ 

`SetDeviceOrigin`(*self*, *x*, *y*)[¶](#wx.DC.SetDeviceOrigin "Permalink to this definition")
Sets the device origin (i.e. the origin in pixels after scaling has been applied).


This function may be useful in Windows printing operations for placing a graphic on a page.



Parameters
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetFont(self, font: 'Font') -> None:
        """ 

`SetFont`(*self*, *font*)[¶](#wx.DC.SetFont "Permalink to this definition")
Sets the current font for the DC.


The *font* parameter should be valid, although in wxMSW port (only) the argument `wx.NullFont` is also accepted and resets the device context font to the default value used by the system (which is not generally useful).



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 





See also


 [wx.Font](wx.Font.html#wx-font)





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetGraphicsContext(self, ctx: 'GraphicsContext') -> None:
        """ 

`SetGraphicsContext`(*self*, *ctx*)[¶](#wx.DC.SetGraphicsContext "Permalink to this definition")
Associate a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) with the DC.


Ignored if not supported by the specific `  [wx.DC](#wx-dc) ` implementation. It is unlikely that this will need to be used in application code.



Parameters
**ctx** ([*wx.GraphicsContext*](wx.GraphicsContext.html#wx.GraphicsContext "wx.GraphicsContext")) – 






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetLayoutDirection(self, dir: int) -> None:
        """ 

`SetLayoutDirection`(*self*, *dir*)[¶](#wx.DC.SetLayoutDirection "Permalink to this definition")
Sets the current layout direction for the device context.



Parameters
**dir** ([*LayoutDirection*](wx.LayoutDirection.enumeration.html "LayoutDirection")) – May be either `Layout_Default` , `Layout_LeftToRight` or `Layout_RightToLeft` .





See also


[`GetLayoutDirection`](#wx.DC.GetLayoutDirection "wx.DC.GetLayoutDirection")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetLogicalFunction(self, function: RasterOperationMode) -> None:
        """ 

`SetLogicalFunction`(*self*, *function*)[¶](#wx.DC.SetLogicalFunction "Permalink to this definition")
Sets the current logical function for the device context.


It determines how a *source* pixel (from a pen or brush colour, or source device context if using [`Blit`](#wx.DC.Blit "wx.DC.Blit") ) combines with a *destination* pixel in the current device context. Text drawing is not affected by this function.


See  [wx.RasterOperationMode](wx.RasterOperationMode.enumeration.html#wx-rasteroperationmode) enumeration values for more info.


The default is `COPY` , which simply draws with the current colour. The others combine the current colour and the background using a logical operation.



Parameters
**function** ([*RasterOperationMode*](wx.RasterOperationMode.enumeration.html "RasterOperationMode")) – 





Note


This function is not fully supported in all ports, due to the limitations of the underlying drawing model. Notably, `INVERT` which was commonly used for drawing rubber bands or other moving outlines in the past, is not, and will not, be supported by `GTK3` and Mac. The suggested alternative is to draw temporarily objects normally and refresh the (affected part of the) window to remove them later.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetLogicalOrigin(self, x, y) -> None:
        """ 

`SetLogicalOrigin`(*self*, *x*, *y*)[¶](#wx.DC.SetLogicalOrigin "Permalink to this definition")
Change the offset used for translating  [wx.DC](#wx-dc) coordinates.



Parameters
* **x** (*int*) –
* **y** (*int*) –





See also


[`SetLogicalOrigin`](#wx.DC.SetLogicalOrigin "wx.DC.SetLogicalOrigin") , [`SetDeviceOrigin`](#wx.DC.SetDeviceOrigin "wx.DC.SetDeviceOrigin")





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetLogicalScale(self, x, y) -> None:
        """ 

`SetLogicalScale`(*self*, *x*, *y*)[¶](#wx.DC.SetLogicalScale "Permalink to this definition")
Set the scale to use for translating  [wx.DC](#wx-dc) coordinates to the physical pixels.


The effect of calling this function is similar to that of calling [`SetUserScale`](#wx.DC.SetUserScale "wx.DC.SetUserScale") .



Parameters
* **x** (*float*) –
* **y** (*float*) –






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetMapMode(self, mode: MappingMode) -> None:
        """ 

`SetMapMode`(*self*, *mode*)[¶](#wx.DC.SetMapMode "Permalink to this definition")
The mapping mode of the device context defines the unit of measurement used to convert *logical* units to *device* units.


Note that in X, text drawing isn’t handled consistently with the mapping mode; a font is always specified in point size. However, setting the user scale (see [`SetUserScale`](#wx.DC.SetUserScale "wx.DC.SetUserScale") ) scales the text appropriately. In Windows, scalable TrueType fonts are always used; in X, results depend on availability of fonts, but usually a reasonable match is found.


The coordinate origin is always at the top left of the screen/printer.


Drawing to a Windows printer device context uses the current mapping mode, but mapping mode is currently ignored for PostScript output.



Parameters
**mode** ([*MappingMode*](wx.MappingMode.enumeration.html "MappingMode")) – 






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetPalette(self, palette: 'Palette') -> None:
        """ 

`SetPalette`(*self*, *palette*)[¶](#wx.DC.SetPalette "Permalink to this definition")
If this is a window DC or memory DC, assigns the given palette to the window or bitmap associated with the DC.


If the argument is `wx.NullPalette` , the current palette is selected out of the device context, and the original palette restored.



Parameters
**palette** ([*wx.Palette*](wx.Palette.html#wx.Palette "wx.Palette")) – 





See also


 [wx.Palette](wx.Palette.html#wx-palette)





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetPen(self, pen: 'Pen') -> None:
        """ 

`SetPen`(*self*, *pen*)[¶](#wx.DC.SetPen "Permalink to this definition")
Sets the current pen for the DC.


If the argument is `wx.NullPen` (or another invalid pen; see [`wx.Pen.IsOk`](wx.Pen.html#wx.Pen.IsOk "wx.Pen.IsOk") ), the current pen is selected out of the device context (leaving  [wx.DC](#wx-dc) without any valid pen), allowing the current pen to be destroyed safely.



Parameters
**pen** ([*wx.Pen*](wx.Pen.html#wx.Pen "wx.Pen")) – 





See also


 [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc) for the interpretation of colours when drawing into a monochrome bitmap.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetTextBackground(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetTextBackground`(*self*, *colour*)[¶](#wx.DC.SetTextBackground "Permalink to this definition")
Sets the current text background colour for the DC.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetTextForeground(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetTextForeground`(*self*, *colour*)[¶](#wx.DC.SetTextForeground "Permalink to this definition")
Sets the current text foreground colour for the DC.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 





See also


 [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc) for the interpretation of colours when drawing into a monochrome bitmap.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetTransformMatrix(self, matrix: 'AffineMatrix2D') -> bool:
        """ 

`SetTransformMatrix`(*self*, *matrix*)[¶](#wx.DC.SetTransformMatrix "Permalink to this definition")
Set the transformation matrix.


If transformation matrix is supported on the current system, the specified *matrix* will be used to transform between  [wx.DC](#wx-dc) and physical coordinates. Otherwise the function returns `False` and doesn’t change the coordinate mapping.



Parameters
**matrix** ([*wx.AffineMatrix2D*](wx.AffineMatrix2D.html#wx.AffineMatrix2D "wx.AffineMatrix2D")) – 



Return type
*bool*





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def SetUserScale(self, xScale, yScale) -> None:
        """ 

`SetUserScale`(*self*, *xScale*, *yScale*)[¶](#wx.DC.SetUserScale "Permalink to this definition")
Sets the user scaling factor, useful for applications which require ‘zooming’.



Parameters
* **xScale** (*float*) –
* **yScale** (*float*) –






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def StartDoc(self, message: str) -> bool:
        """ 

`StartDoc`(*self*, *message*)[¶](#wx.DC.StartDoc "Permalink to this definition")
Starts a document (only relevant when outputting to a printer).


*message* is a message to show while printing.



Parameters
**message** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def StartPage(self) -> None:
        """ 

`StartPage`(*self*)[¶](#wx.DC.StartPage "Permalink to this definition")
Starts a document page (only relevant when outputting to a printer).




            Source: https://docs.wxpython.org/wx.DC.html
        """

    def StretchBlit(self, xdest, ydest, dstWidth, dstHeight, source, xsrc, ysrc, srcWidth, srcHeight, logicalFunc=COPY, useMask=False, xsrcMask=DefaultCoord, ysrcMask=DefaultCoord) -> bool:
        """ 

`StretchBlit`(*self*, *xdest*, *ydest*, *dstWidth*, *dstHeight*, *source*, *xsrc*, *ysrc*, *srcWidth*, *srcHeight*, *logicalFunc=COPY*, *useMask=False*, *xsrcMask=DefaultCoord*, *ysrcMask=DefaultCoord*)[¶](#wx.DC.StretchBlit "Permalink to this definition")
Copy from a source DC to this DC possibly changing the scale.


Unlike [`Blit`](#wx.DC.Blit "wx.DC.Blit") , this method allows specifying different source and destination region sizes, meaning that it can stretch or shrink it while copying. The same can be achieved by changing the scale of the source or target DC but calling this method is simpler and can also be more efficient if the platform provides a native implementation of it.


The meaning of its other parameters is the same as with [`Blit`](#wx.DC.Blit "wx.DC.Blit") , in particular all source coordinates are interpreted using the source DC coordinate system, i.e. are affected by its scale, origin translation and axis direction.



Parameters
* **xdest** (*int*) – Destination device context x position.
* **ydest** (*int*) – Destination device context y position.
* **dstWidth** (*int*) – Width of destination area.
* **dstHeight** (*int*) – Height of destination area.
* **source** ([*wx.DC*](#wx.DC "wx.DC")) – Source device context.
* **xsrc** (*int*) – Source device context x position.
* **ysrc** (*int*) – Source device context y position.
* **srcWidth** (*int*) – Width of source area to be copied.
* **srcHeight** (*int*) – Height of source area to be copied.
* **logicalFunc** ([*RasterOperationMode*](wx.RasterOperationMode.enumeration.html "RasterOperationMode")) – Logical function to use, see [`SetLogicalFunction`](#wx.DC.SetLogicalFunction "wx.DC.SetLogicalFunction") .
* **useMask** (*bool*) – If `True`, Blit does a transparent blit using the mask that is associated with the bitmap selected into the source device context. The Windows implementation does the following if MaskBlt cannot be used:

	+ Creates a temporary bitmap and copies the destination area into it.
	+ Copies the source area into the temporary bitmap using the specified logical function.
	+ Sets the masked area in the temporary bitmap to `wx.BLACK` by ANDing the mask bitmap with the temp bitmap with the foreground colour set to `wx.WHITE` and the bg colour set to `wx.BLACK`.
	+ Sets the unmasked area in the destination area to `wx.BLACK` by ANDing the mask bitmap with the destination area with the foreground colour set to `wx.BLACK` and the background colour set to `wx.WHITE`.
	+ ORs the temporary bitmap with the destination area.
	+ Deletes the temporary bitmap.
This sequence of operations ensures that the source’s transparent area need not be black, and logical functions are supported.



> **Note:** on Windows, blitting with masks can be speeded up considerably by compiling wxWidgets with the `USE_DC_CACHEING` option enabled. You can also influence whether MaskBlt or the explicit mask blitting code above is used, by using  [wx.SystemOptions](wx.SystemOptions.html#wx-systemoptions) and setting the `no-maskblt` option to 1.
* **xsrcMask** (*int*) – Source x position on the mask. If both xsrcMask and ysrcMask are DefaultCoord, *xsrc* and *ysrc* will be assumed for the mask source position. Currently only implemented on Windows.
* **ysrcMask** (*int*) – Source y position on the mask. If both xsrcMask and ysrcMask are DefaultCoord, *xsrc* and *ysrc* will be assumed for the mask source position. Currently only implemented on Windows.



Return type
*bool*




[`Blit`](#wx.DC.Blit "wx.DC.Blit") in  [wx.PostScriptDC](wx.PostScriptDC.html#wx-postscriptdc), under X.


See  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc) for typical usage.



New in version 2.9.0.




See also


[`Blit`](#wx.DC.Blit "wx.DC.Blit") ,  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc),  [wx.Bitmap](wx.Bitmap.html#wx-bitmap),  [wx.Mask](wx.Mask.html#wx-mask)





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def ToDIP(self, *args, **kw) -> 'Size':
        """ 

`ToDIP`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DC.ToDIP "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ToDIP** *(self, sz)*


Convert pixel values of the current DC to DPI-independent pixel values.


See *Window.ToDIP(const* Size& sz) for more info about converting device independent pixel values.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.7.





---

  



**ToDIP** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**ToDIP** *(self, d)*


Convert pixel values of the current DC to DPI-independent pixel values.


This is the same as ToDIP(const Size& sz) overload, but assumes that the resolution is the same in horizontal and vertical directions.



Parameters
**d** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.7.





---

  





            Source: https://docs.wxpython.org/wx.DC.html
        """

    def _DrawEllipseList(self, pyCoords, pyPens, pyBrushes) -> Any:
        """ 

`_DrawEllipseList`(*self*, *pyCoords*, *pyPens*, *pyBrushes*)[¶](#wx.DC._DrawEllipseList "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def _DrawLineList(self, pyCoords, pyPens, pyBrushes) -> Any:
        """ 

`_DrawLineList`(*self*, *pyCoords*, *pyPens*, *pyBrushes*)[¶](#wx.DC._DrawLineList "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def _DrawLinesFromBuffer(self, pyBuff) -> Any:
        """ 

`_DrawLinesFromBuffer`(*self*, *pyBuff*)[¶](#wx.DC._DrawLinesFromBuffer "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def _DrawPointList(self, pyCoords, pyPens, pyBrushes) -> Any:
        """ 

`_DrawPointList`(*self*, *pyCoords*, *pyPens*, *pyBrushes*)[¶](#wx.DC._DrawPointList "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def _DrawPolygonList(self, pyCoords, pyPens, pyBrushes) -> Any:
        """ 

`_DrawPolygonList`(*self*, *pyCoords*, *pyPens*, *pyBrushes*)[¶](#wx.DC._DrawPolygonList "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def _DrawRectangleList(self, pyCoords, pyPens, pyBrushes) -> Any:
        """ 

`_DrawRectangleList`(*self*, *pyCoords*, *pyPens*, *pyBrushes*)[¶](#wx.DC._DrawRectangleList "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def _DrawTextList(self, textList, pyPoints, foregroundList, backgroundList) -> Any:
        """ 

`_DrawTextList`(*self*, *textList*, *pyPoints*, *foregroundList*, *backgroundList*)[¶](#wx.DC._DrawTextList "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.DC.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.DC.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DC.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.DC.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DC.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.DC.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.DC.html
        """

    def EndDrawing(self) -> None:
        """ 
        """

    AsBitmap: 'Bitmap'  # `AsBitmap`[¶](#wx.DC.AsBitmap "Permalink to this definition")See [`GetAsBitmap`](#wx.DC.GetAsBitmap "wx.DC.GetAsBitmap")
    Background: 'Brush'  # `Background`[¶](#wx.DC.Background "Permalink to this definition")See [`GetBackground`](#wx.DC.GetBackground "wx.DC.GetBackground") and [`SetBackground`](#wx.DC.SetBackground "wx.DC.SetBackground")
    BackgroundMode: int  # `BackgroundMode`[¶](#wx.DC.BackgroundMode "Permalink to this definition")See [`GetBackgroundMode`](#wx.DC.GetBackgroundMode "wx.DC.GetBackgroundMode") and [`SetBackgroundMode`](#wx.DC.SetBackgroundMode "wx.DC.SetBackgroundMode")
    BoundingBox: None  # `BoundingBox`[¶](#wx.DC.BoundingBox "Permalink to this definition")See [`GetBoundingBox`](#wx.DC.GetBoundingBox "wx.DC.GetBoundingBox")
    Brush: '_Brush'  # `Brush`[¶](#wx.DC.Brush "Permalink to this definition")See [`GetBrush`](#wx.DC.GetBrush "wx.DC.GetBrush") and [`SetBrush`](#wx.DC.SetBrush "wx.DC.SetBrush")
    CGContext: int  # `CGContext`[¶](#wx.DC.CGContext "Permalink to this definition")See [`GetCGContext`](#wx.DC.GetCGContext "wx.DC.GetCGContext")
    CharHeight: 'Coord'  # `CharHeight`[¶](#wx.DC.CharHeight "Permalink to this definition")See [`GetCharHeight`](#wx.DC.GetCharHeight "wx.DC.GetCharHeight")
    CharWidth: 'Coord'  # `CharWidth`[¶](#wx.DC.CharWidth "Permalink to this definition")See [`GetCharWidth`](#wx.DC.GetCharWidth "wx.DC.GetCharWidth")
    ClippingRect: None  # `ClippingRect`[¶](#wx.DC.ClippingRect "Permalink to this definition")See [`GetClippingRect`](#wx.DC.GetClippingRect "wx.DC.GetClippingRect")
    ContentScaleFactor: float  # `ContentScaleFactor`[¶](#wx.DC.ContentScaleFactor "Permalink to this definition")See [`GetContentScaleFactor`](#wx.DC.GetContentScaleFactor "wx.DC.GetContentScaleFactor")
    Depth: int  # `Depth`[¶](#wx.DC.Depth "Permalink to this definition")See [`GetDepth`](#wx.DC.GetDepth "wx.DC.GetDepth")
    DeviceOrigin: 'Point'  # `DeviceOrigin`[¶](#wx.DC.DeviceOrigin "Permalink to this definition")See [`GetDeviceOrigin`](#wx.DC.GetDeviceOrigin "wx.DC.GetDeviceOrigin") and [`SetDeviceOrigin`](#wx.DC.SetDeviceOrigin "wx.DC.SetDeviceOrigin")
    Font: '_Font'  # `Font`[¶](#wx.DC.Font "Permalink to this definition")See [`GetFont`](#wx.DC.GetFont "wx.DC.GetFont") and [`SetFont`](#wx.DC.SetFont "wx.DC.SetFont")
    FontMetrics: '_FontMetrics'  # `FontMetrics`[¶](#wx.DC.FontMetrics "Permalink to this definition")See [`GetFontMetrics`](#wx.DC.GetFontMetrics "wx.DC.GetFontMetrics")
    GdkDrawable: int  # `GdkDrawable`[¶](#wx.DC.GdkDrawable "Permalink to this definition")See [`GetGdkDrawable`](#wx.DC.GetGdkDrawable "wx.DC.GetGdkDrawable")
    GraphicsContext: '_GraphicsContext'  # `GraphicsContext`[¶](#wx.DC.GraphicsContext "Permalink to this definition")See [`GetGraphicsContext`](#wx.DC.GetGraphicsContext "wx.DC.GetGraphicsContext") and [`SetGraphicsContext`](#wx.DC.SetGraphicsContext "wx.DC.SetGraphicsContext")
    HDC: int  # `HDC`[¶](#wx.DC.HDC "Permalink to this definition")See [`GetHDC`](#wx.DC.GetHDC "wx.DC.GetHDC")
    Handle: int  # `Handle`[¶](#wx.DC.Handle "Permalink to this definition")See [`GetHandle`](#wx.DC.GetHandle "wx.DC.GetHandle")
    LayoutDirection: int  # `LayoutDirection`[¶](#wx.DC.LayoutDirection "Permalink to this definition")See [`GetLayoutDirection`](#wx.DC.GetLayoutDirection "wx.DC.GetLayoutDirection") and [`SetLayoutDirection`](#wx.DC.SetLayoutDirection "wx.DC.SetLayoutDirection")
    LogicalFunction: 'RasterOperationMode'  # `LogicalFunction`[¶](#wx.DC.LogicalFunction "Permalink to this definition")See [`GetLogicalFunction`](#wx.DC.GetLogicalFunction "wx.DC.GetLogicalFunction") and [`SetLogicalFunction`](#wx.DC.SetLogicalFunction "wx.DC.SetLogicalFunction")
    MapMode: 'MappingMode'  # `MapMode`[¶](#wx.DC.MapMode "Permalink to this definition")See [`GetMapMode`](#wx.DC.GetMapMode "wx.DC.GetMapMode") and [`SetMapMode`](#wx.DC.SetMapMode "wx.DC.SetMapMode")
    MultiLineTextExtent: None  # `MultiLineTextExtent`[¶](#wx.DC.MultiLineTextExtent "Permalink to this definition")See [`GetMultiLineTextExtent`](#wx.DC.GetMultiLineTextExtent "wx.DC.GetMultiLineTextExtent")
    PPI: 'Size'  # `PPI`[¶](#wx.DC.PPI "Permalink to this definition")See [`GetPPI`](#wx.DC.GetPPI "wx.DC.GetPPI")
    Pen: '_Pen'  # `Pen`[¶](#wx.DC.Pen "Permalink to this definition")See [`GetPen`](#wx.DC.GetPen "wx.DC.GetPen") and [`SetPen`](#wx.DC.SetPen "wx.DC.SetPen")
    Pixel: 'Colour'  # `Pixel`[¶](#wx.DC.Pixel "Permalink to this definition")See [`GetPixel`](#wx.DC.GetPixel "wx.DC.GetPixel")
    Size: '_Size'  # `Size`[¶](#wx.DC.Size "Permalink to this definition")See [`GetSize`](#wx.DC.GetSize "wx.DC.GetSize")
    SizeMM: 'Size'  # `SizeMM`[¶](#wx.DC.SizeMM "Permalink to this definition")See [`GetSizeMM`](#wx.DC.GetSizeMM "wx.DC.GetSizeMM")
    TextBackground: 'Colour'  # `TextBackground`[¶](#wx.DC.TextBackground "Permalink to this definition")See [`GetTextBackground`](#wx.DC.GetTextBackground "wx.DC.GetTextBackground") and [`SetTextBackground`](#wx.DC.SetTextBackground "wx.DC.SetTextBackground")
    TextExtent: None  # `TextExtent`[¶](#wx.DC.TextExtent "Permalink to this definition")See [`GetTextExtent`](#wx.DC.GetTextExtent "wx.DC.GetTextExtent")
    TextForeground: 'Colour'  # `TextForeground`[¶](#wx.DC.TextForeground "Permalink to this definition")See [`GetTextForeground`](#wx.DC.GetTextForeground "wx.DC.GetTextForeground") and [`SetTextForeground`](#wx.DC.SetTextForeground "wx.DC.SetTextForeground")
    TransformMatrix: 'AffineMatrix2D'  # `TransformMatrix`[¶](#wx.DC.TransformMatrix "Permalink to this definition")See [`GetTransformMatrix`](#wx.DC.GetTransformMatrix "wx.DC.GetTransformMatrix") and [`SetTransformMatrix`](#wx.DC.SetTransformMatrix "wx.DC.SetTransformMatrix")



BLACK: 'Colour'

WHITE: 'Colour'

ODDEVEN_RULE: int

WINDING_RULE: int

FLOOD_SURFACE: int

FLOOD_BORDER: int

class PostScriptDC(DC):
    """ **Possible constructors**:



```
PostScriptDC()

PostScriptDC(printData)

```


This defines the wxWidgets Encapsulated PostScript device context,
which can write PostScript files on any platform.


  


        Source: https://docs.wxpython.org/wx.PostScriptDC.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PostScriptDC.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, printData)*


Constructs a PostScript printer device context from a  [wx.PrintData](wx.PrintData.html#wx-printdata) object.



Parameters
**printData** ([*wx.PrintData*](wx.PrintData.html#wx.PrintData "wx.PrintData")) – 






---

  





            Source: https://docs.wxpython.org/wx.PostScriptDC.html
        """



class MetafileDC(DC):
    """ **Possible constructors**:



```
MetafileDC(filename="")

```


This is a type of device context that allows a metafile object to be
created (Windows only), and has most of the characteristics of a
normal DC.


  


        Source: https://docs.wxpython.org/wx.MetafileDC.html
    """
    def __init__(self, filename: str="") -> None:
        """ 

`__init__`(*self*, *filename=""*)[¶](#wx.MetafileDC.__init__ "Permalink to this definition")
Constructor.


If no filename is passed, the metafile is created in memory.



Parameters
**filename** (*string*) – 






            Source: https://docs.wxpython.org/wx.MetafileDC.html
        """

    def Close(self) -> 'Metafile':
        """ 

`Close`(*self*)[¶](#wx.MetafileDC.Close "Permalink to this definition")
This must be called after the device context is finished with.


A metafile is returned, and ownership of it passes to the calling application (so it should be destroyed explicitly).



Return type
 [wx.Metafile](wx.Metafile.html#wx-metafile)






            Source: https://docs.wxpython.org/wx.MetafileDC.html
        """



NullColour: int

class PaintDC(ClientDC):
    """ **Possible constructors**:



```
PaintDC(window)

```


A PaintDC must be constructed if an application wishes to paint on
the client area of a window from within an EVT\_PAINT() event handler.


  


        Source: https://docs.wxpython.org/wx.PaintDC.html
    """
    def __init__(self, window: 'Window') -> None:
        """ 

`__init__`(*self*, *window*)[¶](#wx.PaintDC.__init__ "Permalink to this definition")
Constructor.


Pass a pointer to the window on which you wish to paint.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.PaintDC.html
        """



class BitmapBundle:
    """ **Possible constructors**:



```
BitmapBundle()

BitmapBundle(bitmap)

BitmapBundle(icon)

BitmapBundle(image)

BitmapBundle(other)

```


Contains representations of the same bitmap in different resolutions.


  


        Source: https://docs.wxpython.org/wx.BitmapBundle.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.BitmapBundle.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor constructs an empty bundle.


An empty bundle can’t be used for anything, but can be assigned something else later.




---

  



**\_\_init\_\_** *(self, bitmap)*


Conversion constructor from a single bitmap.


This constructor does the same thing as [`FromBitmap`](#wx.BitmapBundle.FromBitmap "wx.BitmapBundle.FromBitmap") and only exists for interoperability with the existing code using  [wx.Bitmap](wx.Bitmap.html#wx-bitmap).



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 






---

  



**\_\_init\_\_** *(self, icon)*


Conversion constructor from a single icon.


This constructor does the same thing as [`FromBitmap`](#wx.BitmapBundle.FromBitmap "wx.BitmapBundle.FromBitmap") and only exists for interoperability with the existing code using  [wx.Icon](wx.Icon.html#wx-icon).



Parameters
**icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – 






---

  



**\_\_init\_\_** *(self, image)*


Conversion constructor from a single image.


Similarly to the constructor from  [wx.Bitmap](wx.Bitmap.html#wx-bitmap), this constructor only exists for interoperability with the existing code using  [wx.Image](wx.Image.html#wx-image) and can be replaced with more readable [`FromImage`](#wx.BitmapBundle.FromImage "wx.BitmapBundle.FromImage") in the new code.



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 






---

  



**\_\_init\_\_** *(self, other)*


Copy constructor creates a copy of another bundle.



Parameters
**other** ([*wx.BitmapBundle*](#wx.BitmapBundle "wx.BitmapBundle")) – 






---

  





            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.BitmapBundle.Clear "Permalink to this definition")
Clear the existing bundle contents.


After calling this function [`IsOk`](#wx.BitmapBundle.IsOk "wx.BitmapBundle.IsOk") returns `False`.


This is the same as assigning a default-constructed bitmap bundle to this object but slightly more explicit.



New in version 4.1/wxWidgets-3.1.7.





            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromBitmap(bitmap: 'Bitmap') -> 'BitmapBundle':
        """ 

*static* `FromBitmap`(*bitmap*)[¶](#wx.BitmapBundle.FromBitmap "Permalink to this definition")
Create a bundle from a single bitmap.


This is only useful for compatibility with the existing code using  [wx.Bitmap](wx.Bitmap.html#wx-bitmap).


If *bitmap* is invalid, empty bundle is returned.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromBitmaps(*args, **kw) -> 'BitmapBundle':
        """ 

*static* `FromBitmaps`(*\*args*, *\*\*kw*)[¶](#wx.BitmapBundle.FromBitmaps "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FromBitmaps** *(bitmaps)*


Create a bundle from the given collection of bitmaps.


If the *bitmaps* vector is empty, an invalid, empty bundle is returned, otherwise initialize the bundle with all the bitmaps in this vector which must be themselves valid.



Parameters
**bitmaps** (*Vector*) – 



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






---

  



**FromBitmaps** *(bitmap1, bitmap2)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **bitmap1** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **bitmap2** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






---

  





            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromFiles(*args, **kw) -> 'BitmapBundle':
        """ 

*static* `FromFiles`(*\*args*, *\*\*kw*)[¶](#wx.BitmapBundle.FromFiles "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FromFiles** *(path, filename, extension=”png”)*


Create a bundle from bitmaps stored as files.


Looking in *path* for files using *filename* as prefix and potentionally a suffix with scale, e.g. “\_2x” or “@2x”



Parameters
* **path** (*string*) – Path of the directory containing the files
* **filename** (*string*) – Bitmap’s filename without any scale suffix
* **extension** (*string*) – File extension, without leading dot ( `png` by default)



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






---

  



**FromFiles** *(fullpathname)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**fullpathname** (*string*) – 



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






---

  





            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromIconBundle(iconBundle: 'IconBundle') -> 'BitmapBundle':
        """ 

*static* `FromIconBundle`(*iconBundle*)[¶](#wx.BitmapBundle.FromIconBundle "Permalink to this definition")
Create a bundle from an icon bundle.


If *iconBundle* is invalid or empty, empty bundle is returned.



Parameters
**iconBundle** ([*wx.IconBundle*](wx.IconBundle.html#wx.IconBundle "wx.IconBundle")) – 



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)





New in version 4.1/wxWidgets-3.1.7.





            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromImage(image: 'Image') -> 'BitmapBundle':
        """ 

*static* `FromImage`(*image*)[¶](#wx.BitmapBundle.FromImage "Permalink to this definition")
Create a bundle from a single image.


This is only useful for compatibility with the existing code using  [wx.Image](wx.Image.html#wx-image).


If *image* is invalid, empty bundle is returned.



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromImpl(impl: 'BitmapBundleImpl') -> 'BitmapBundle':
        """ 

*static* `FromImpl`(*impl*)[¶](#wx.BitmapBundle.FromImpl "Permalink to this definition")
Create a bundle from a custom bitmap bundle implementation.


This function can be used to create bundles implementing custom logic for creating the bitmaps, e.g. creating them on the fly rather than using predefined bitmaps.


See  [wx.BitmapBundleImpl](wx.BitmapBundleImpl.html#wx-bitmapbundleimpl).



Parameters
**impl** ([*wx.BitmapBundleImpl*](wx.BitmapBundleImpl.html#wx.BitmapBundleImpl "wx.BitmapBundleImpl")) – A valid, i.e. non-null, pointer. This function takes ownership of it, so the caller must *not* call DecRef() on it.



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromResources(name: str) -> 'BitmapBundle':
        """ 

*static* `FromResources`(*name*)[¶](#wx.BitmapBundle.FromResources "Permalink to this definition")
Create a bundle from the bitmaps in the application resources.


This function can only be used on the platforms supporting storing bitmaps in resources, and currently only works under MSW and MacOS and returns an empty bundle on the other platforms.


Under MSW, for this function to create a valid bundle, you must have `RCDATA` resource with the given *name* in your application resource file (with the extension *name* as prefix and suffix with the scale, e.g. “\_2x” or “\_1\_5x” (for 150% `DPI`) will be also loaded as part of the bundle.



Parameters
**name** (*string*) – 



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)





See also


[`FromSVGResource`](#wx.BitmapBundle.FromSVGResource "wx.BitmapBundle.FromSVGResource")





            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromSVG(*args, **kw) -> 'BitmapBundle':
        """ 

*static* `FromSVG`(*\*args*, *\*\*kw*)[¶](#wx.BitmapBundle.FromSVG "Permalink to this definition")
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FromSVG** *(data, sizeDef)*



Parameters
* **data** (*int*) –
* **sizeDef** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






---

  



**FromSVG** *(data, len, sizeDef)*



Parameters
* **data** (*wx.Byte*) –
* **len** (*int*) –
* **sizeDef** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






---

  





            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromSVGFile(path, sizeDef) -> 'BitmapBundle':
        """ 

*static* `FromSVGFile`(*path*, *sizeDef*)[¶](#wx.BitmapBundle.FromSVGFile "Permalink to this definition")
Create a bundle from the `SVG` image loaded from the given file.


This function loads the `SVG` data from the given *path* and calls [`FromSVG`](#wx.BitmapBundle.FromSVG "wx.BitmapBundle.FromSVG") with it. As it is just a wrapper for [`FromSVG`](#wx.BitmapBundle.FromSVG "wx.BitmapBundle.FromSVG") , please see that function documentation for more information about `SVG` support.



Parameters
* **path** (*string*) – Path to the `SVG` file. Notice that it should a local file, not an URL.
* **sizeDef** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The default size to return from [`GetDefaultSize`](#wx.BitmapBundle.GetDefaultSize "wx.BitmapBundle.GetDefaultSize") for this bundle.



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    @staticmethod
    def FromSVGResource(name, sizeDef) -> 'BitmapBundle':
        """ 

*static* `FromSVGResource`(*name*, *sizeDef*)[¶](#wx.BitmapBundle.FromSVGResource "Permalink to this definition")
Create a bundle from the `SVG` image loaded from an application resource.


Available only on the platforms supporting images in resources, i.e., MSW and MacOS.



Parameters
* **name** (*string*) – On MSW, it must be a resource with `RT_RCDATA` type. On MacOS, it must be a file with an extension “svg” placed in the “Resources” subdirectory of the application bundle.
* **sizeDef** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The default size to return from [`GetDefaultSize`](#wx.BitmapBundle.GetDefaultSize "wx.BitmapBundle.GetDefaultSize") for this bundle.



Return type
 [wx.BitmapBundle](#wx-bitmapbundle)





See also


[`FromResources`](#wx.BitmapBundle.FromResources "wx.BitmapBundle.FromResources") , [`FromSVGFile`](#wx.BitmapBundle.FromSVGFile "wx.BitmapBundle.FromSVGFile")





            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def GetBitmap(self, size: Union[tuple[int, int], 'Size']) -> 'Bitmap':
        """ 

`GetBitmap`(*self*, *size*)[¶](#wx.BitmapBundle.GetBitmap "Permalink to this definition")
Get bitmap of the specified size, creating a new bitmap from the closest available size by rescaling it if necessary.


This function is mostly used by wxWidgets itself and not the application. As all bitmaps created by it dynamically are currently cached, avoid calling it for many different sizes if you do use it, as this will create many bitmaps that will never be deleted and will consume resources until the application termination.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The size of the bitmap to return, in physical pixels. If this parameter is DefaultSize, default bundle size is used.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def GetBitmapFor(self, window: 'Window') -> 'Bitmap':
        """ 

`GetBitmapFor`(*self*, *window*)[¶](#wx.BitmapBundle.GetBitmapFor "Permalink to this definition")
Get bitmap of the size appropriate for the `DPI` scaling used by the given window.


This helper function simply combines [`GetPreferredBitmapSizeFor`](#wx.BitmapBundle.GetPreferredBitmapSizeFor "wx.BitmapBundle.GetPreferredBitmapSizeFor") and [`GetBitmap`](#wx.BitmapBundle.GetBitmap "wx.BitmapBundle.GetBitmap") , i.e. it returns a (normally unscaled) bitmap from the bundle of the closest size to the size that should be used at the `DPI` scaling of the provided window.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Non-null and fully created window.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def GetDefaultSize(self) -> 'Size':
        """ 

`GetDefaultSize`(*self*)[¶](#wx.BitmapBundle.GetDefaultSize "Permalink to this definition")
Get the size of the bitmap represented by this bundle in default resolution or, equivalently, at 100% scaling.


When creating the bundle from a number of bitmaps, this will be just the size of the smallest bitmap in it.


Note that this function is mostly used by wxWidgets itself and not the application.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def GetIcon(self, size: Union[tuple[int, int], 'Size']) -> 'Icon':
        """ 

`GetIcon`(*self*, *size*)[¶](#wx.BitmapBundle.GetIcon "Permalink to this definition")
Get icon of the specified size.


This is just a convenient wrapper for [`GetBitmap`](#wx.BitmapBundle.GetBitmap "wx.BitmapBundle.GetBitmap") and simply converts the returned bitmap to  [wx.Icon](wx.Icon.html#wx-icon).



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def GetIconFor(self, window: 'Window') -> 'Icon':
        """ 

`GetIconFor`(*self*, *window*)[¶](#wx.BitmapBundle.GetIconFor "Permalink to this definition")
Get icon of the size appropriate for the `DPI` scaling used by the given window.


This is similar to [`GetBitmapFor`](#wx.BitmapBundle.GetBitmapFor "wx.BitmapBundle.GetBitmapFor") , but returns a  [wx.Icon](wx.Icon.html#wx-icon), as [`GetIcon`](#wx.BitmapBundle.GetIcon "wx.BitmapBundle.GetIcon") does.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Non-null and fully created window.



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def GetPreferredBitmapSizeAtScale(self, scale: float) -> 'Size':
        """ 

`GetPreferredBitmapSizeAtScale`(*self*, *scale*)[¶](#wx.BitmapBundle.GetPreferredBitmapSizeAtScale "Permalink to this definition")
Get the size that would be best to use for this bundle at the given `DPI` scaling factor.


For bundles containing some number of the fixed-size bitmaps, this function returns the size of an existing bitmap closest to the ideal size at the given scale, i.e. [`GetDefaultSize`](#wx.BitmapBundle.GetDefaultSize "wx.BitmapBundle.GetDefaultSize") multiplied by *scale*.


Passing a size returned by this function to [`GetBitmap`](#wx.BitmapBundle.GetBitmap "wx.BitmapBundle.GetBitmap") ensures that bitmap doesn’t need to be rescaled, which typically significantly lowers its quality.



Parameters
**scale** (*float*) – 



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def GetPreferredBitmapSizeFor(self, window: 'Window') -> 'Size':
        """ 

`GetPreferredBitmapSizeFor`(*self*, *window*)[¶](#wx.BitmapBundle.GetPreferredBitmapSizeFor "Permalink to this definition")
Get the size that would be best to use for this bundle at the `DPI` scaling factor used by the given window.


This is just a convenient wrapper for [`GetPreferredBitmapSizeAtScale`](#wx.BitmapBundle.GetPreferredBitmapSizeAtScale "wx.BitmapBundle.GetPreferredBitmapSizeAtScale") calling that function with the result of [`wx.Window.GetDPIScaleFactor`](wx.Window.html#wx.Window.GetDPIScaleFactor "wx.Window.GetDPIScaleFactor") .



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Non-null and fully created window.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def GetPreferredLogicalSizeFor(self, window: 'Window') -> 'Size':
        """ 

`GetPreferredLogicalSizeFor`(*self*, *window*)[¶](#wx.BitmapBundle.GetPreferredLogicalSizeFor "Permalink to this definition")
Get the size that would be best to use for this bundle at the `DPI` scaling factor used by the given window in logical size.


This is just call [`GetPreferredBitmapSizeAtScale`](#wx.BitmapBundle.GetPreferredBitmapSizeAtScale "wx.BitmapBundle.GetPreferredBitmapSizeAtScale") with the result of [`wx.Window.GetDPIScaleFactor`](wx.Window.html#wx.Window.GetDPIScaleFactor "wx.Window.GetDPIScaleFactor") and convert returned value with [`wx.Window.FromPhys`](wx.Window.html#wx.Window.FromPhys "wx.Window.FromPhys") .



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Non-null and fully created window.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.BitmapBundle.IsOk "Permalink to this definition")
Check if bitmap bundle is non-empty.


Return `True` if the bundle contains any bitmaps or `False` if it is empty.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    def IsSameAs(self, other: 'BitmapBundle') -> bool:
        """ 

`IsSameAs`(*self*, *other*)[¶](#wx.BitmapBundle.IsSameAs "Permalink to this definition")
Check if the two bundles refer to the same object.


Bundles are considered to be same only if they actually use the same underlying object, i.e. are copies of each other. If the two bundles were independently constructed, they’re *not* considered to be the same, even if they were created from the same bitmap.



Parameters
**other** ([*wx.BitmapBundle*](#wx.BitmapBundle "wx.BitmapBundle")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BitmapBundle.html
        """

    DefaultSize: 'Size'  # `DefaultSize`[¶](#wx.BitmapBundle.DefaultSize "Permalink to this definition")See [`GetDefaultSize`](#wx.BitmapBundle.GetDefaultSize "wx.BitmapBundle.GetDefaultSize")



class BitmapBundleImpl(RefCounter):
    """ Base class for custom implementations of BitmapBundle.


  


        Source: https://docs.wxpython.org/wx.BitmapBundleImpl.html
    """
    def DoGetPreferredSize(self, scale: float) -> 'Size':
        """ 

`DoGetPreferredSize`(*self*, *scale*)[¶](#wx.BitmapBundleImpl.DoGetPreferredSize "Permalink to this definition")
Helper for implementing [`GetPreferredBitmapSizeAtScale`](#wx.BitmapBundleImpl.GetPreferredBitmapSizeAtScale "wx.BitmapBundleImpl.GetPreferredBitmapSizeAtScale") in the derived classes.


This function implements the standard algorithm used inside wxWidgets itself and tries to find the scale closest to the given one, while also trying to choose one of the available scales, to avoid actually rescaling the bitmaps.


It relies on [`GetNextAvailableScale`](#wx.BitmapBundleImpl.GetNextAvailableScale "wx.BitmapBundleImpl.GetNextAvailableScale") to get information about the available bitmaps, so that function must be overridden if this one is used.


Typically this function is used in the derived classes implementation to forward [`GetPreferredBitmapSizeAtScale`](#wx.BitmapBundleImpl.GetPreferredBitmapSizeAtScale "wx.BitmapBundleImpl.GetPreferredBitmapSizeAtScale") to it and when this is done, [`GetBitmap`](#wx.BitmapBundleImpl.GetBitmap "wx.BitmapBundleImpl.GetBitmap") may also use [`GetIndexToUpscale`](#wx.BitmapBundleImpl.GetIndexToUpscale "wx.BitmapBundleImpl.GetIndexToUpscale") to choose the bitmap to upscale if necessary:



```
class MyCustomBitmapBundleImpl(wx.BitmapBundleImpl):

    def GetDefaultSize():
        return wx.Size(32, 32)

    def GetPreferredBitmapSizeAtScale(self, scale):
        return self.DoGetPreferredSize(scale)

    def GetBitmap(self, size):
        # For consistency with GetNextAvailableScale(), we must have
        # bitmap variants for 32, 48 and 64px sizes.
        availableSizes =  [32, 48, 64]
        if (size.y <= 64)
            ... get the bitmap from somewhere ...
        else:
            n = self.GetIndexToUpscale(size)
            bitmap = ... get bitmap for availableSizes[n] ...
            wx.Bitmap.Rescale(bitmap, size)
        return bitmap

    def GetNextAvailableScale(self, idx):
        # The zero marks the end of available scales, and it means this
        # method won't be called again after the zero is returned.
        availableScales =  [1.0, 1.5, 2.0, 0]
        scale = availableScales[idx]
        idx += 1
        return (scale, idx)

```



Parameters
**scale** (*float*) – The required scale, typically the same one as passed to [`GetPreferredBitmapSizeAtScale`](#wx.BitmapBundleImpl.GetPreferredBitmapSizeAtScale "wx.BitmapBundleImpl.GetPreferredBitmapSizeAtScale") .



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.7.





            Source: https://docs.wxpython.org/wx.BitmapBundleImpl.html
        """

    def GetBitmap(self, size: Union[tuple[int, int], 'Size']) -> 'Bitmap':
        """ 

`GetBitmap`(*self*, *size*)[¶](#wx.BitmapBundleImpl.GetBitmap "Permalink to this definition")
Retrieve the bitmap of exactly the given size.


Note that this function is non-const because it may generate the bitmap on demand and cache it.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.BitmapBundleImpl.html
        """

    def GetDefaultSize(self) -> 'Size':
        """ 

`GetDefaultSize`(*self*)[¶](#wx.BitmapBundleImpl.GetDefaultSize "Permalink to this definition")
Return the size of the bitmaps represented by this bundle in the default `DPI`.


Must always return a valid size.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.BitmapBundleImpl.html
        """

    def GetIndexToUpscale(self, size: Union[tuple[int, int], 'Size']) -> int:
        """ 

`GetIndexToUpscale`(*self*, *size*)[¶](#wx.BitmapBundleImpl.GetIndexToUpscale "Permalink to this definition")
Return the index of the available scale most suitable to be upscaled to the given size.


See [`DoGetPreferredSize`](#wx.BitmapBundleImpl.DoGetPreferredSize "wx.BitmapBundleImpl.DoGetPreferredSize") for an example of using this function.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The required size, typically the same one as passed to [`GetBitmap`](#wx.BitmapBundleImpl.GetBitmap "wx.BitmapBundleImpl.GetBitmap")



Return type
*int*





New in version 4.1/wxWidgets-3.1.7.





            Source: https://docs.wxpython.org/wx.BitmapBundleImpl.html
        """

    def GetNextAvailableScale(self, idx: int) -> tuple:
        """ 

`GetNextAvailableScale`(*self*, *idx*)[¶](#wx.BitmapBundleImpl.GetNextAvailableScale "Permalink to this definition")
Return information about the available bitmaps.


Overriding this function is optional and only needs to be done if either [`DoGetPreferredSize`](#wx.BitmapBundleImpl.DoGetPreferredSize "wx.BitmapBundleImpl.DoGetPreferredSize") or [`GetIndexToUpscale`](#wx.BitmapBundleImpl.GetIndexToUpscale "wx.BitmapBundleImpl.GetIndexToUpscale") are called. If you do override it, this function must return the next available scale or 0.0 if there are no more.


The returned scales must be in ascending order and the first returned scale, for the initial *i* value of 0, should be 1. The function must change *i*, but the values of this index don’t have to be consecutive and it’s only used by this function itself, the caller only initializes it to 0 before the first call.


See [`DoGetPreferredSize`](#wx.BitmapBundleImpl.DoGetPreferredSize "wx.BitmapBundleImpl.DoGetPreferredSize") for an example of implementing this function.



Parameters
**idx** (*int*) – 



Return type
*tuple*



Returns
( *double*, *idx* )





New in version 4.1/wxWidgets-3.1.7.





            Source: https://docs.wxpython.org/wx.BitmapBundleImpl.html
        """

    def GetPreferredBitmapSizeAtScale(self, scale: float) -> 'Size':
        """ 

`GetPreferredBitmapSizeAtScale`(*self*, *scale*)[¶](#wx.BitmapBundleImpl.GetPreferredBitmapSizeAtScale "Permalink to this definition")
Return the preferred size that should be used at the given scale.


Must always return a valid size.



Parameters
**scale** (*float*) – 



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.BitmapBundleImpl.html
        """

    DefaultSize: 'Size'  # `DefaultSize`[¶](#wx.BitmapBundleImpl.DefaultSize "Permalink to this definition")See [`GetDefaultSize`](#wx.BitmapBundleImpl.GetDefaultSize "wx.BitmapBundleImpl.GetDefaultSize")



class BitmapButton(Button):
    """ **Possible constructors**:



```
BitmapButton()

BitmapButton(parent, id=ID_ANY, bitmap=NullBitmap, pos=DefaultPosition,
             size=DefaultSize, style=0, validator=DefaultValidator,
             name=ButtonNameStr)

```


A bitmap button is a control that contains a bitmap.


  


        Source: https://docs.wxpython.org/wx.BitmapButton.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.BitmapButton.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, bitmap=NullBitmap, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ButtonNameStr)*


Constructor, creating and showing a button.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Button identifier. The value `wx.ID_ANY` indicates a default value.
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – Bitmap to be displayed.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Button position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Button size. If `wx.DefaultSize` is specified then the button is sized appropriately for the bitmap.
* **style** (*long*) – Window style. See  [wx.BitmapButton](#wx-bitmapbutton).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





Note


The bitmap parameter is normally the only bitmap you need to provide, and wxWidgets will draw the button correctly in its different states. If you want more control, call any of the functions `SetBitmapPressed` , `SetBitmapFocus` , `SetBitmapDisabled` .




See also


[`Create`](#wx.BitmapButton.Create "wx.BitmapButton.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.BitmapButton.html
        """

    def Create(self, parent, id=ID_ANY, bitmap=NullBitmap, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ButtonNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *bitmap=NullBitmap*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=ButtonNameStr*)[¶](#wx.BitmapButton.Create "Permalink to this definition")
Button creation function for two-step creation.


For more details, see  [wx.BitmapButton](#wx-bitmapbutton).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BitmapButton.html
        """

    def CreateCloseButton(self, parent, winid, name="") -> bool:
        """ 

`CreateCloseButton`(*self*, *parent*, *winid*, *name=""*)[¶](#wx.BitmapButton.CreateCloseButton "Permalink to this definition")
Creation function for two-step creation of “Close” button.


It is usually not necessary to use this function directly as [`NewCloseButton`](#wx.BitmapButton.NewCloseButton "wx.BitmapButton.NewCloseButton") is more convenient, but, if required, it can be called on a default-constructed  [wx.BitmapButton](#wx-bitmapbutton) object to achieve the same effect.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The button parent window, must be not `None`.
* **winid** (*wx.WindowID*) – The identifier for the new button.
* **name** (*string*) – The name for the new button.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.BitmapButton.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.BitmapButton.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.BitmapButton.html
        """

    @staticmethod
    def NewCloseButton(parent, winid, name="") -> 'BitmapButton':
        """ 

*static* `NewCloseButton`(*parent*, *winid*, *name=""*)[¶](#wx.BitmapButton.NewCloseButton "Permalink to this definition")
Helper function creating a standard-looking “Close” button.


To get the best results, platform-specific code may need to be used to create a small, title bar-like “Close” button. This function is provided to avoid the need to test for the current platform and creates the button with as native look as possible.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The button parent window, must be not `None`.
* **winid** (*wx.WindowID*) – The identifier for the new button.
* **name** (*string*) – The name for the new button (available since wxWidgets 3.1.5)



Return type
 [wx.BitmapButton](#wx-bitmapbutton)



Returns
The new button.





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.BitmapButton.html
        """



BU_LEFT: int  # Left-justifies the bitmap label.

BU_TOP: int  # Aligns the bitmap label to the top of the button.

BU_RIGHT: int  # Right-justifies the bitmap label.

BU_BOTTOM: int  # Aligns the bitmap label to the bottom of the button. ^^

EVT_BUTTON: int  # Process a  wxEVT_BUTTON   event, when the button is clicked. ^^

BU_EXACTFIT: int

class BitmapDataObject(DataObjectSimple):
    """ **Possible constructors**:



```
BitmapDataObject(bitmap=NullBitmap)

```


BitmapDataObject is a specialization of DataObject for bitmap
data.


  


        Source: https://docs.wxpython.org/wx.BitmapDataObject.html
    """
    def __init__(self, bitmap: 'Bitmap'=NullBitmap) -> None:
        """ 

`__init__`(*self*, *bitmap=NullBitmap*)[¶](#wx.BitmapDataObject.__init__ "Permalink to this definition")
Constructor, optionally passing a bitmap (otherwise use [`SetBitmap`](#wx.BitmapDataObject.SetBitmap "wx.BitmapDataObject.SetBitmap") later).



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 






            Source: https://docs.wxpython.org/wx.BitmapDataObject.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.BitmapDataObject.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.BitmapDataObject.html
        """

    def GetBitmap(self) -> 'Bitmap':
        """ 

`GetBitmap`(*self*)[¶](#wx.BitmapDataObject.GetBitmap "Permalink to this definition")
Returns the bitmap associated with the data object.


You may wish to override this method when offering data on-demand, but this is not required by wxWidgets’ internals. Use this method to get data in bitmap form from the  [wx.Clipboard](wx.Clipboard.html#wx-clipboard).



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.BitmapDataObject.html
        """

    def SetBitmap(self, bitmap: 'Bitmap') -> None:
        """ 

`SetBitmap`(*self*, *bitmap*)[¶](#wx.BitmapDataObject.SetBitmap "Permalink to this definition")
Sets the bitmap associated with the data object.


This method is called when the data object receives data. Usually there will be no reason to override this function.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 






            Source: https://docs.wxpython.org/wx.BitmapDataObject.html
        """

    def SetData(self, format, buf) -> bool:
        """ 

`SetData`(*self*, *format*, *buf*)[¶](#wx.BitmapDataObject.SetData "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.BitmapDataObject.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.BitmapDataObject.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.BitmapDataObject.GetAllFormats "wx.BitmapDataObject.GetAllFormats")
    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.BitmapDataObject.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.BitmapDataObject.GetBitmap "wx.BitmapDataObject.GetBitmap") and [`SetBitmap`](#wx.BitmapDataObject.SetBitmap "wx.BitmapDataObject.SetBitmap")



class DataObject:
    """ **Possible constructors**:



```
DataObject()

```


A DataObject represents data that can be copied to or from the
clipboard, or dragged and dropped.


  


        Source: https://docs.wxpython.org/wx.DataObject.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.DataObject.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    def GetAllFormats(self, dir=Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=Get*)[¶](#wx.DataObject.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    def GetDataHere(self, format, buf) -> bool:
        """ 

`GetDataHere`(*self*, *format*, *buf*)[¶](#wx.DataObject.GetDataHere "Permalink to this definition")
Copies this data object’s data in the requested format to the buffer provided.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    def GetDataSize(self, format: 'DataFormat') -> int:
        """ 

`GetDataSize`(*self*, *format*)[¶](#wx.DataObject.GetDataSize "Permalink to this definition")
Returns the data size of the given format *format*.



Parameters
**format** ([*wx.DataFormat*](wx.DataFormat.html#wx.DataFormat "wx.DataFormat")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    def GetFormatCount(self, dir: int=Get) -> int:
        """ 

`GetFormatCount`(*self*, *dir=Get*)[¶](#wx.DataObject.GetFormatCount "Permalink to this definition")
Returns the number of available formats for rendering or setting the data.



Parameters
**dir** ([*Direction*](wx.DataObject.Direction.enumeration.html "Direction")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    def GetPreferredFormat(self, dir: int=Get) -> 'DataFormat':
        """ 

`GetPreferredFormat`(*self*, *dir=Get*)[¶](#wx.DataObject.GetPreferredFormat "Permalink to this definition")
Returns the preferred format for either rendering the data (if *dir* is `Get` , its default value) or for setting it.


Usually this will be the native format of the  [wx.DataObject](#wx-dataobject).



Parameters
**dir** ([*Direction*](wx.DataObject.Direction.enumeration.html "Direction")) – 



Return type
 [wx.DataFormat](wx.DataFormat.html#wx-dataformat)






            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    def IsSupported(self, format, dir=Get) -> bool:
        """ 

`IsSupported`(*self*, *format*, *dir=Get*)[¶](#wx.DataObject.IsSupported "Permalink to this definition")
Returns `True` if this format is supported.



Parameters
* **format** ([*wx.DataFormat*](wx.DataFormat.html#wx.DataFormat "wx.DataFormat")) –
* **dir** ([*Direction*](wx.DataObject.Direction.enumeration.html "Direction")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    def SetData(self, format, buf) -> bool:
        """ 

`SetData`(*self*, *format*, *buf*)[¶](#wx.DataObject.SetData "Permalink to this definition")
Copies data from the provided buffer to this data object for the specified format.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    def _testGetAllFormats(self) -> None:
        """ 

`_testGetAllFormats`(*self*)[¶](#wx.DataObject._testGetAllFormats "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DataObject.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.DataObject.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.DataObject.GetAllFormats "wx.DataObject.GetAllFormats")
    DataHere: bool  # `DataHere`[¶](#wx.DataObject.DataHere "Permalink to this definition")See [`GetDataHere`](#wx.DataObject.GetDataHere "wx.DataObject.GetDataHere")
    FormatCount: int  # `FormatCount`[¶](#wx.DataObject.FormatCount "Permalink to this definition")See [`GetFormatCount`](#wx.DataObject.GetFormatCount "wx.DataObject.GetFormatCount")
    PreferredFormat: 'DataFormat'  # `PreferredFormat`[¶](#wx.DataObject.PreferredFormat "Permalink to this definition")See [`GetPreferredFormat`](#wx.DataObject.GetPreferredFormat "wx.DataObject.GetPreferredFormat")



class BitmapToggleButton(ToggleButton):
    """ **Possible constructors**:



```
BitmapToggleButton()

BitmapToggleButton(parent, id=ID_ANY, label=NullBitmap,
                   pos=DefaultPosition, size=DefaultSize, style=0, val=DefaultValidator,
                   name=CheckBoxNameStr)

```


BitmapToggleButton is a ToggleButton that contains a bitmap
instead of text.


  


        Source: https://docs.wxpython.org/wx.BitmapToggleButton.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.BitmapToggleButton.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=NullBitmap, pos=DefaultPosition, size=DefaultSize, style=0, val=DefaultValidator, name=CheckBoxNameStr)*


Constructor, creating and showing a toggle button with the bitmap *label*.


Internally calls [`Create`](#wx.BitmapToggleButton.Create "wx.BitmapToggleButton.Create") .



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **val** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.BitmapToggleButton.html
        """

    def Create(self, parent, id=ID_ANY, label=NullBitmap, pos=DefaultPosition, size=DefaultSize, style=0, val=DefaultValidator, name=CheckBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=NullBitmap*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *val=DefaultValidator*, *name=CheckBoxNameStr*)[¶](#wx.BitmapToggleButton.Create "Permalink to this definition")
Create method for two-step construction.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **val** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BitmapToggleButton.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.BitmapToggleButton.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.BitmapToggleButton.html
        """

    def GetValue(self) -> bool:
        """ 

`GetValue`(*self*)[¶](#wx.BitmapToggleButton.GetValue "Permalink to this definition")
Gets the state of the toggle button.



Return type
*bool*



Returns
Returns `True` if it is pressed, `False` otherwise.






            Source: https://docs.wxpython.org/wx.BitmapToggleButton.html
        """

    def SetValue(self, state: bool) -> None:
        """ 

`SetValue`(*self*, *state*)[¶](#wx.BitmapToggleButton.SetValue "Permalink to this definition")
Sets the toggle button to the given state.


This does not cause a `EVT_TOGGLEBUTTON` event to be emitted.



Parameters
**state** (*bool*) – If `True`, the button is pressed.






            Source: https://docs.wxpython.org/wx.BitmapToggleButton.html
        """

    Value: bool  # `Value`[¶](#wx.BitmapToggleButton.Value "Permalink to this definition")See [`GetValue`](#wx.BitmapToggleButton.GetValue "wx.BitmapToggleButton.GetValue") and [`SetValue`](#wx.BitmapToggleButton.SetValue "wx.BitmapToggleButton.SetValue")



EVT_TOGGLEBUTTON: int  # Handles a wxEVT_TOGGLEBUTTON event. ^^

class ToggleButton(AnyButton):
    """ **Possible constructors**:



```
ToggleButton()

ToggleButton(parent, id=ID_ANY, label="", pos=DefaultPosition,
             size=DefaultSize, style=0, val=DefaultValidator, name=CheckBoxNameStr)

```


ToggleButton is a button that stays pressed when clicked by the
user.


  


        Source: https://docs.wxpython.org/wx.ToggleButton.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ToggleButton.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, style=0, val=DefaultValidator, name=CheckBoxNameStr)*


Constructor, creating and showing a toggle button.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Toggle button identifier. The value `wx.ID_ANY` indicates a default value.
* **label** (*string*) – Text to be displayed next to the toggle button.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Toggle button position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Toggle button size. If `wx.DefaultSize` is specified then a default size is chosen.
* **style** (*long*) – Window style. See  [wx.ToggleButton](#wx-togglebutton).
* **val** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.ToggleButton.Create "wx.ToggleButton.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.ToggleButton.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, style=0, val=DefaultValidator, name=CheckBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *val=DefaultValidator*, *name=CheckBoxNameStr*)[¶](#wx.ToggleButton.Create "Permalink to this definition")
Creates the toggle button for two-step construction.


See  [wx.ToggleButton](#wx-togglebutton) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **val** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToggleButton.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ToggleButton.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ToggleButton.html
        """

    def GetValue(self) -> bool:
        """ 

`GetValue`(*self*)[¶](#wx.ToggleButton.GetValue "Permalink to this definition")
Gets the state of the toggle button.



Return type
*bool*



Returns
Returns `True` if it is pressed, `False` otherwise.






            Source: https://docs.wxpython.org/wx.ToggleButton.html
        """

    def SetValue(self, state: bool) -> None:
        """ 

`SetValue`(*self*, *state*)[¶](#wx.ToggleButton.SetValue "Permalink to this definition")
Sets the toggle button to the given state.


This does not cause a `EVT_TOGGLEBUTTON` event to be emitted.



Parameters
**state** (*bool*) – If `True`, the button is pressed.






            Source: https://docs.wxpython.org/wx.ToggleButton.html
        """

    Value: bool  # `Value`[¶](#wx.ToggleButton.Value "Permalink to this definition")See [`GetValue`](#wx.ToggleButton.GetValue "wx.ToggleButton.GetValue") and [`SetValue`](#wx.ToggleButton.SetValue "wx.ToggleButton.SetValue")



class BookCtrlBase(Control,WithImages):
    """ **Possible constructors**:



```
BookCtrlBase()

BookCtrlBase(parent, winid, pos=DefaultPosition, size=DefaultSize,
             style=0, name="")

```


A book control is a convenient way of displaying multiple pages of
information, displayed one page at a time.


  


        Source: https://docs.wxpython.org/wx.BookCtrlBase.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.BookCtrlBase.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, winid, pos=DefaultPosition, size=DefaultSize, style=0, name=””)*


Constructs the book control with the given parameters.


See [`Create`](#wx.BookCtrlBase.Create "wx.BookCtrlBase.Create") for two-step construction.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winid** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def AddPage(self, page, text, select=False, imageId=NO_IMAGE) -> bool:
        """ 

`AddPage`(*self*, *page*, *text*, *select=False*, *imageId=NO\_IMAGE*)[¶](#wx.BookCtrlBase.AddPage "Permalink to this definition")
Adds a new page.


The page must have the book control itself as the parent and must not have been added to this control previously.


The call to this function will generate the page changing and page changed events if `select` is `True`, but not when inserting the very first page (as there is no previous page selection to switch from in this case and so it wouldn’t make sense to e.g. veto such event).



Parameters
* **page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Specifies the new page.
* **text** (*string*) – Specifies the text for the new page.
* **select** (*bool*) – Specifies whether the page should be selected.
* **imageId** (*int*) – Specifies the optional image index for the new page.



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


Do not delete the page, it will be deleted by the book control.




See also


[`InsertPage`](#wx.BookCtrlBase.InsertPage "wx.BookCtrlBase.InsertPage")





            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def AdvanceSelection(self, forward: bool=True) -> None:
        """ 

`AdvanceSelection`(*self*, *forward=True*)[¶](#wx.BookCtrlBase.AdvanceSelection "Permalink to this definition")
Cycles through the tabs.


The call to this function generates the page changing events.



Parameters
**forward** (*bool*) – 






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def ChangeSelection(self, page: int) -> int:
        """ 

`ChangeSelection`(*self*, *page*)[¶](#wx.BookCtrlBase.ChangeSelection "Permalink to this definition")
Changes the selection to the given page, returning the previous selection.


This function behaves as [`SetSelection`](#wx.BookCtrlBase.SetSelection "wx.BookCtrlBase.SetSelection") but does *not* generate the page changing events.


See [User Generated Events vs Programmatically Generated Events](events_overview.html#user-generated-events-vs-programmatically-generated-events) for more information.



Parameters
**page** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def Create(self, parent, winid, pos=DefaultPosition, size=DefaultSize, style=0, name="") -> bool:
        """ 

`Create`(*self*, *parent*, *winid*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=""*)[¶](#wx.BookCtrlBase.Create "Permalink to this definition")
Constructs the book control with the given parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winid** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def DeleteAllPages(self) -> bool:
        """ 

`DeleteAllPages`(*self*)[¶](#wx.BookCtrlBase.DeleteAllPages "Permalink to this definition")
Deletes all pages.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def DeletePage(self, page: int) -> bool:
        """ 

`DeletePage`(*self*, *page*)[¶](#wx.BookCtrlBase.DeletePage "Permalink to this definition")
Deletes the specified page, and the associated window.


The call to this function generates the page changing events when deleting the currently selected page or a page preceding it in the index order, but it does *not* send any events when deleting the last page: while in this case the selection also changes, it becomes invalid and for compatibility reasons the control never generates events with the invalid selection index.



Parameters
**page** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def FindPage(self, page: 'Window') -> int:
        """ 

`FindPage`(*self*, *page*)[¶](#wx.BookCtrlBase.FindPage "Permalink to this definition")
Returns the index of the specified tab window or `NOT_FOUND` if not found.



Parameters
**page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – One of the control pages.



Return type
*int*



Returns
The zero-based tab index or `NOT_FOUND` if not found.





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def GetControlSizer(self) -> 'Sizer':
        """ 

`GetControlSizer`(*self*)[¶](#wx.BookCtrlBase.GetControlSizer "Permalink to this definition")
Returns the sizer containing the control for page selection, if any.


Some derived classes, e.g.  [wx.Choicebook](wx.Choicebook.html#wx-choicebook), use a separate control for switching the currently selected page and this function returns the sizer used for positioning this control and the pages themselves inside the book control.


Note that many classes, notably  [wx.Notebook](wx.Notebook.html#wx-notebook), do not use any such control, and this function simply returns `None` for them.



Return type
 [wx.Sizer](wx.Sizer.html#wx-sizer)



Returns
Non-owning pointer to the sizer or `None`.






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def GetCurrentPage(self) -> 'Window':
        """ 

`GetCurrentPage`(*self*)[¶](#wx.BookCtrlBase.GetCurrentPage "Permalink to this definition")
Returns the currently selected page or `None`.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def GetPage(self, page: int) -> 'Window':
        """ 

`GetPage`(*self*, *page*)[¶](#wx.BookCtrlBase.GetPage "Permalink to this definition")
Returns the window at the given page position.



Parameters
**page** (*int*) – 



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def GetPageCount(self) -> int:
        """ 

`GetPageCount`(*self*)[¶](#wx.BookCtrlBase.GetPageCount "Permalink to this definition")
Returns the number of pages in the control.



Return type
*int*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def GetPageImage(self, nPage: int) -> int:
        """ 

`GetPageImage`(*self*, *nPage*)[¶](#wx.BookCtrlBase.GetPageImage "Permalink to this definition")
Returns the image index for the given page.



Parameters
**nPage** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def GetPageText(self, nPage: int) -> str:
        """ 

`GetPageText`(*self*, *nPage*)[¶](#wx.BookCtrlBase.GetPageText "Permalink to this definition")
Returns the string for the given page.



Parameters
**nPage** (*int*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.BookCtrlBase.GetSelection "Permalink to this definition")
Returns the currently selected page, or `NOT_FOUND` if none was selected.


Note that this method may return either the previously or newly selected page when called from the `EVT_BOOKCTRL_PAGE_CHANGED` handler depending on the platform and so [`wx.BookCtrlEvent.GetSelection`](wx.BookCtrlEvent.html#wx.BookCtrlEvent.GetSelection "wx.BookCtrlEvent.GetSelection") should be used instead in this case.



Return type
*int*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def HitTest(self, pt: Union[tuple[int, int], 'Point']) -> tuple:
        """ 

`HitTest`(*self*, *pt*)[¶](#wx.BookCtrlBase.HitTest "Permalink to this definition")
Returns the index of the tab at the specified position or `NOT_FOUND` if none.


If *flags* parameter is not `None`, the position of the point inside the tab is returned as well.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Specifies the point for the hit test.



Return type
*tuple*



Returns
( *int*, *flags* )






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def InsertPage(self, index, page, text, select=False, imageId=NO_IMAGE) -> bool:
        """ 

`InsertPage`(*self*, *index*, *page*, *text*, *select=False*, *imageId=NO\_IMAGE*)[¶](#wx.BookCtrlBase.InsertPage "Permalink to this definition")
Inserts a new page at the specified position.



Parameters
* **index** (*int*) – Specifies the position for the new page.
* **page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Specifies the new page.
* **text** (*string*) – Specifies the text for the new page.
* **select** (*bool*) – Specifies whether the page should be selected.
* **imageId** (*int*) – Specifies the optional image index for the new page.



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


Do not delete the page, it will be deleted by the book control.




See also


[`AddPage`](#wx.BookCtrlBase.AddPage "wx.BookCtrlBase.AddPage")





            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def RemovePage(self, page: int) -> bool:
        """ 

`RemovePage`(*self*, *page*)[¶](#wx.BookCtrlBase.RemovePage "Permalink to this definition")
Deletes the specified page, without deleting the associated window.


See [`DeletePage`](#wx.BookCtrlBase.DeletePage "wx.BookCtrlBase.DeletePage") for a note about the events generated by this function.



Parameters
**page** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def SetPageImage(self, page, image) -> bool:
        """ 

`SetPageImage`(*self*, *page*, *image*)[¶](#wx.BookCtrlBase.SetPageImage "Permalink to this definition")
Sets the image index for the given page.


*image* is an index into the image list which was set with [`SetImageList`](wx.WithImages.html#wx.WithImages.SetImageList "wx.WithImages.SetImageList") .



Parameters
* **page** (*int*) –
* **image** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def SetPageSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetPageSize`(*self*, *size*)[¶](#wx.BookCtrlBase.SetPageSize "Permalink to this definition")
Sets the width and height of the pages.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





Note


This method is currently not implemented for wxGTK.





            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def SetPageText(self, page, text) -> bool:
        """ 

`SetPageText`(*self*, *page*, *text*)[¶](#wx.BookCtrlBase.SetPageText "Permalink to this definition")
Sets the text for the given page.



Parameters
* **page** (*int*) –
* **text** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    def SetSelection(self, page: int) -> int:
        """ 

`SetSelection`(*self*, *page*)[¶](#wx.BookCtrlBase.SetSelection "Permalink to this definition")
Sets the selection to the given page, returning the previous selection.


Notice that the call to this function generates the page changing events, use the [`ChangeSelection`](#wx.BookCtrlBase.ChangeSelection "wx.BookCtrlBase.ChangeSelection") function if you don’t want these events to be generated.



Parameters
**page** (*int*) – 



Return type
*int*





See also


[`GetSelection`](#wx.BookCtrlBase.GetSelection "wx.BookCtrlBase.GetSelection")





            Source: https://docs.wxpython.org/wx.BookCtrlBase.html
        """

    ControlSizer: 'Sizer'  # `ControlSizer`[¶](#wx.BookCtrlBase.ControlSizer "Permalink to this definition")See [`GetControlSizer`](#wx.BookCtrlBase.GetControlSizer "wx.BookCtrlBase.GetControlSizer")
    CurrentPage: 'Window'  # `CurrentPage`[¶](#wx.BookCtrlBase.CurrentPage "Permalink to this definition")See [`GetCurrentPage`](#wx.BookCtrlBase.GetCurrentPage "wx.BookCtrlBase.GetCurrentPage")
    PageCount: int  # `PageCount`[¶](#wx.BookCtrlBase.PageCount "Permalink to this definition")See [`GetPageCount`](#wx.BookCtrlBase.GetPageCount "wx.BookCtrlBase.GetPageCount")
    Selection: int  # `Selection`[¶](#wx.BookCtrlBase.Selection "Permalink to this definition")See [`GetSelection`](#wx.BookCtrlBase.GetSelection "wx.BookCtrlBase.GetSelection") and [`SetSelection`](#wx.BookCtrlBase.SetSelection "wx.BookCtrlBase.SetSelection")



class BookCtrlEvent(NotifyEvent):
    """ **Possible constructors**:



```
BookCtrlEvent(eventType=wxEVT_NULL, id=0, sel=NOT_FOUND,
              oldSel=NOT_FOUND)

```


This class represents the events generated by book controls
(wxNotebook, Listbook, Choicebook, Treebook, AuiNotebook).


  


        Source: https://docs.wxpython.org/wx.BookCtrlEvent.html
    """
    def __init__(self, eventType=wxEVT_NULL, id=0, sel=NOT_FOUND, oldSel=NOT_FOUND) -> None:
        """ 

`__init__`(*self*, *eventType=wxEVT\_NULL*, *id=0*, *sel=NOT\_FOUND*, *oldSel=NOT\_FOUND*)[¶](#wx.BookCtrlEvent.__init__ "Permalink to this definition")
Constructor (used internally by wxWidgets only).



Parameters
* **eventType** (*wx.EventType*) –
* **id** (*int*) –
* **sel** (*int*) –
* **oldSel** (*int*) –






            Source: https://docs.wxpython.org/wx.BookCtrlEvent.html
        """

    def GetOldSelection(self) -> int:
        """ 

`GetOldSelection`(*self*)[¶](#wx.BookCtrlEvent.GetOldSelection "Permalink to this definition")
Returns the page that was selected before the change, `NOT_FOUND` if none was selected.



Return type
*int*






            Source: https://docs.wxpython.org/wx.BookCtrlEvent.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.BookCtrlEvent.GetSelection "Permalink to this definition")
Returns the currently selected page, or `NOT_FOUND` if none was selected.



Return type
*int*





Note


under Windows, [`GetSelection`](#wx.BookCtrlEvent.GetSelection "wx.BookCtrlEvent.GetSelection") will return the same value as [`GetOldSelection`](#wx.BookCtrlEvent.GetOldSelection "wx.BookCtrlEvent.GetOldSelection") when called from the `EVT_BOOKCTRL_PAGE_CHANGING` handler and not the page which is going to be selected.





            Source: https://docs.wxpython.org/wx.BookCtrlEvent.html
        """

    def SetOldSelection(self, page: int) -> None:
        """ 

`SetOldSelection`(*self*, *page*)[¶](#wx.BookCtrlEvent.SetOldSelection "Permalink to this definition")
Sets the id of the page selected before the change.



Parameters
**page** (*int*) – 






            Source: https://docs.wxpython.org/wx.BookCtrlEvent.html
        """

    def SetSelection(self, page: int) -> None:
        """ 

`SetSelection`(*self*, *page*)[¶](#wx.BookCtrlEvent.SetSelection "Permalink to this definition")
Sets the selection member variable.



Parameters
**page** (*int*) – 






            Source: https://docs.wxpython.org/wx.BookCtrlEvent.html
        """

    OldSelection: int  # `OldSelection`[¶](#wx.BookCtrlEvent.OldSelection "Permalink to this definition")See [`GetOldSelection`](#wx.BookCtrlEvent.GetOldSelection "wx.BookCtrlEvent.GetOldSelection") and [`SetOldSelection`](#wx.BookCtrlEvent.SetOldSelection "wx.BookCtrlEvent.SetOldSelection")
    Selection: int  # `Selection`[¶](#wx.BookCtrlEvent.Selection "Permalink to this definition")See [`GetSelection`](#wx.BookCtrlEvent.GetSelection "wx.BookCtrlEvent.GetSelection") and [`SetSelection`](#wx.BookCtrlEvent.SetSelection "wx.BookCtrlEvent.SetSelection")



class Notebook(BookCtrlBase):
    """ **Possible constructors**:



```
Notebook()

Notebook(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
         style=0, name=NotebookNameStr)

```


This class represents a notebook control, which manages multiple
windows with associated tabs.


  


        Source: https://docs.wxpython.org/wx.Notebook.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Notebook.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Constructs a notebook control.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=NotebookNameStr)*


Constructs a notebook control.


Note that sometimes you can reduce flicker by passing the `wx.CLIP_CHILDREN` window style.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window. Must be not `None`.
* **id** (*wx.WindowID*) – The window identifier.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The window size.
* **style** (*long*) – The window style. See  [wx.Notebook](#wx-notebook).
* **name** (*string*) – The name of the control.






---

  





            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def ChangeSelection(self, page: int) -> int:
        """ 

`ChangeSelection`(*self*, *page*)[¶](#wx.Notebook.ChangeSelection "Permalink to this definition")
Changes the selection to the given page, returning the previous selection.


This function behaves as [`SetSelection`](#wx.Notebook.SetSelection "wx.Notebook.SetSelection") but does *not* generate the page changing events.


See [User Generated Events vs Programmatically Generated Events](events_overview.html#user-generated-events-vs-programmatically-generated-events) for more information.



Parameters
**page** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=NotebookNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=NotebookNameStr*)[¶](#wx.Notebook.Create "Permalink to this definition")
Creates a notebook control.


See  [wx.Notebook](#wx-notebook) for a description of the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Notebook.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def GetPageImage(self, nPage: int) -> int:
        """ 

`GetPageImage`(*self*, *nPage*)[¶](#wx.Notebook.GetPageImage "Permalink to this definition")
Returns the image index for the given page.



Parameters
**nPage** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def GetPageText(self, nPage: int) -> str:
        """ 

`GetPageText`(*self*, *nPage*)[¶](#wx.Notebook.GetPageText "Permalink to this definition")
Returns the string for the given page.



Parameters
**nPage** (*int*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def GetRowCount(self) -> int:
        """ 

`GetRowCount`(*self*)[¶](#wx.Notebook.GetRowCount "Permalink to this definition")
Returns the number of rows in the notebook control.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.Notebook.GetSelection "Permalink to this definition")
Returns the currently selected page, or `NOT_FOUND` if none was selected.


Note that this method may return either the previously or newly selected page when called from the `EVT_BOOKCTRL_PAGE_CHANGED` handler depending on the platform and so [`wx.BookCtrlEvent.GetSelection`](wx.BookCtrlEvent.html#wx.BookCtrlEvent.GetSelection "wx.BookCtrlEvent.GetSelection") should be used instead in this case.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def GetThemeBackgroundColour(self) -> 'Colour':
        """ 

`GetThemeBackgroundColour`(*self*)[¶](#wx.Notebook.GetThemeBackgroundColour "Permalink to this definition")
If running under Windows and themes are enabled for the application, this function returns a suitable colour for painting the background of a notebook page, and can be passed to `SetBackgroundColour` .


Otherwise, an uninitialised colour will be returned.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def InsertPage(self, index, page, text, select=False, imageId=NO_IMAGE) -> bool:
        """ 

`InsertPage`(*self*, *index*, *page*, *text*, *select=False*, *imageId=NO\_IMAGE*)[¶](#wx.Notebook.InsertPage "Permalink to this definition")
Inserts a new page at the specified position.



Parameters
* **index** (*int*) – Specifies the position for the new page.
* **page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Specifies the new page.
* **text** (*string*) – Specifies the text for the new page.
* **select** (*bool*) – Specifies whether the page should be selected.
* **imageId** (*int*) – Specifies the optional image index for the new page.



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


Do not delete the page, it will be deleted by the book control.




See also


[`AddPage`](wx.BookCtrlBase.html#wx.BookCtrlBase.AddPage "wx.BookCtrlBase.AddPage")





            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def SetPadding(self, padding: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetPadding`(*self*, *padding*)[¶](#wx.Notebook.SetPadding "Permalink to this definition")
Sets the amount of space around each page’s icon and label, in pixels.



Parameters
**padding** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





Note


The vertical padding cannot be changed in wxGTK.





            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def SetPageImage(self, page, image) -> bool:
        """ 

`SetPageImage`(*self*, *page*, *image*)[¶](#wx.Notebook.SetPageImage "Permalink to this definition")
Sets the image index for the given page.


*image* is an index into the image list which was set with `SetImageList` .



Parameters
* **page** (*int*) –
* **image** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def SetPageText(self, page, text) -> bool:
        """ 

`SetPageText`(*self*, *page*, *text*)[¶](#wx.Notebook.SetPageText "Permalink to this definition")
Sets the text for the given page.



Parameters
* **page** (*int*) –
* **text** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    def SetSelection(self, page: int) -> int:
        """ 

`SetSelection`(*self*, *page*)[¶](#wx.Notebook.SetSelection "Permalink to this definition")
Sets the selection to the given page, returning the previous selection.


Notice that the call to this function generates the page changing events, use the [`ChangeSelection`](#wx.Notebook.ChangeSelection "wx.Notebook.ChangeSelection") function if you don’t want these events to be generated.



Parameters
**page** (*int*) – 



Return type
*int*





See also


[`GetSelection`](#wx.Notebook.GetSelection "wx.Notebook.GetSelection")





            Source: https://docs.wxpython.org/wx.Notebook.html
        """

    RowCount: int  # `RowCount`[¶](#wx.Notebook.RowCount "Permalink to this definition")See [`GetRowCount`](#wx.Notebook.GetRowCount "wx.Notebook.GetRowCount")
    Selection: int  # `Selection`[¶](#wx.Notebook.Selection "Permalink to this definition")See [`GetSelection`](#wx.Notebook.GetSelection "wx.Notebook.GetSelection") and [`SetSelection`](#wx.Notebook.SetSelection "wx.Notebook.SetSelection")
    ThemeBackgroundColour: 'Colour'  # `ThemeBackgroundColour`[¶](#wx.Notebook.ThemeBackgroundColour "Permalink to this definition")See [`GetThemeBackgroundColour`](#wx.Notebook.GetThemeBackgroundColour "wx.Notebook.GetThemeBackgroundColour")



NB_TOP: int  # Place tabs on the top side.

NB_LEFT: int  # Place tabs on the left side.

NB_RIGHT: int  # Place tabs on the right side.

NB_BOTTOM: int  # Place tabs under instead of above the notebook pages.

NB_FIXEDWIDTH: int  # (Windows only) All tabs will have same width.

NB_MULTILINE: int  # (Windows only) There can be several rows of tabs.

NB_NOPAGETHEME: int  # (Windows only) Display a solid colour on notebook pages, and not a gradient, which can reduce performance. ^^

EVT_NOTEBOOK_PAGE_CHANGED: int  # The page selection was changed. Processes a  wxEVT_NOTEBOOK_PAGE_CHANGED   event.

EVT_NOTEBOOK_PAGE_CHANGING: int  # The page selection is about to be changed. Processes a  wxEVT_NOTEBOOK_PAGE_CHANGING   event. This event can be vetoed. ^^

CLIP_CHILDREN: int

_ListView: TypeAlias = ListView

class Listbook(BookCtrlBase):
    """ **Possible constructors**:



```
Listbook()

Listbook(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
         style=0, name="")

```


Listbook is a class similar to Notebook but which uses a
ListCtrl to show the labels instead of the tabs.


  


        Source: https://docs.wxpython.org/wx.Listbook.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Listbook.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=””)*


Constructs a listbook control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.Listbook.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name="") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=""*)[¶](#wx.Listbook.Create "Permalink to this definition")
Create the list book control that has already been constructed with the default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Listbook.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Listbook.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Listbook.html
        """

    def GetListView(self, *args, **kw) -> 'ListView':
        """ 

`GetListView`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Listbook.GetListView "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetListView** *(self)*


Returns the  [wx.ListView](wx.ListView.html#wx-listview) associated with the control.



Return type
 [wx.ListView](wx.ListView.html#wx-listview)






---

  



**GetListView** *(self)*


Returns the list control used for selecting pages.



Return type
 [wx.ListView](wx.ListView.html#wx-listview)






---

  





            Source: https://docs.wxpython.org/wx.Listbook.html
        """

    ListView: '_ListView'  # `ListView`[¶](#wx.Listbook.ListView "Permalink to this definition")See [`GetListView`](#wx.Listbook.GetListView "wx.Listbook.GetListView")



LB_DEFAULT: int  # Choose the default location for the labels depending on the current platform (left everywhere except Mac where it is top).

LB_TOP: int  # Place labels above the page area.

LB_LEFT: int  # Place labels on the left side.

LB_RIGHT: int  # Place labels on the right side.

LB_BOTTOM: int  # Place labels below the page area. ^^

EVT_LISTBOOK_PAGE_CHANGED: int  # The page selection was changed. Processes a  wxEVT_LISTBOOK_PAGE_CHANGED   event.

EVT_LISTBOOK_PAGE_CHANGING: int  # The page selection is about to be changed. Processes a  wxEVT_LISTBOOK_PAGE_CHANGING   event. This event can be vetoed. ^^

class Choicebook(BookCtrlBase):
    """ **Possible constructors**:



```
Choicebook()

Choicebook(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
           style=0, name="")

```


Choicebook is a class similar to Notebook, but uses a Choice
control to show the labels instead of the tabs.


  


        Source: https://docs.wxpython.org/wx.Choicebook.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Choicebook.__init__ "Permalink to this definition")
Constructs a choicebook control.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=””)*



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.Choicebook.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name="") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=""*)[¶](#wx.Choicebook.Create "Permalink to this definition")
Create the choicebook control that has already been constructed with the default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Choicebook.html
        """

    def GetChoiceCtrl(self, *args, **kw) -> 'Choice':
        """ 

`GetChoiceCtrl`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Choicebook.GetChoiceCtrl "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetChoiceCtrl** *(self)*


Returns the  [wx.Choice](wx.Choice.html#wx-choice) associated with the control.



Return type
 [wx.Choice](wx.Choice.html#wx-choice)






---

  



**GetChoiceCtrl** *(self)*


Returns the choice control used for selecting pages.



Return type
 [wx.Choice](wx.Choice.html#wx-choice)






---

  





            Source: https://docs.wxpython.org/wx.Choicebook.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Choicebook.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Choicebook.html
        """

    ChoiceCtrl: 'Choice'  # `ChoiceCtrl`[¶](#wx.Choicebook.ChoiceCtrl "Permalink to this definition")See [`GetChoiceCtrl`](#wx.Choicebook.GetChoiceCtrl "wx.Choicebook.GetChoiceCtrl")



CHB_DEFAULT: int  # Choose the default location for the labels depending on the current platform (but currently it’s the same everywhere, namely wx.CHB_TOP).

CHB_TOP: int  # Place labels above the page area.

CHB_LEFT: int  # Place labels on the left side.

CHB_RIGHT: int  # Place labels on the right side.

CHB_BOTTOM: int  # Place labels below the page area. ^^

EVT_CHOICEBOOK_PAGE_CHANGED: int  # The page selection was changed. Processes a  wxEVT_CHOICEBOOK_PAGE_CHANGED   event.

EVT_CHOICEBOOK_PAGE_CHANGING: int  # The page selection is about to be changed. Processes a  wxEVT_CHOICEBOOK_PAGE_CHANGING   event. This event can be vetoed (using  wx.NotifyEvent.Veto ). ^^

_TreeCtrl: TypeAlias = TreeCtrl

class Treebook(BookCtrlBase):
    """ **Possible constructors**:



```
Treebook()

Treebook(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
         style=BK_DEFAULT, name="")

```


This class is an extension of the Notebook class that allows a tree
structured set of pages to be shown in a control.


  


        Source: https://docs.wxpython.org/wx.Treebook.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Treebook.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=BK\_DEFAULT, name=””)*


Creates an empty  [wx.Treebook](#wx-treebook).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window. Must be not `None`.
* **id** (*wx.WindowID*) – The window identifier.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The window size.
* **style** (*long*) – The window style. See  [wx.Notebook](wx.Notebook.html#wx-notebook).
* **name** (*string*) – The name of the control (used only under Motif).






---

  





            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def AddPage(self, page, text, bSelect=False, imageId=NOT_FOUND) -> bool:
        """ 

`AddPage`(*self*, *page*, *text*, *bSelect=False*, *imageId=NOT\_FOUND*)[¶](#wx.Treebook.AddPage "Permalink to this definition")
Adds a new page.


The page is placed at the topmost level after all other pages. `None` could be specified for page to create an empty page.



Parameters
* **page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **text** (*string*) –
* **bSelect** (*bool*) –
* **imageId** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def AddSubPage(self, page, text, bSelect=False, imageId=NOT_FOUND) -> bool:
        """ 

`AddSubPage`(*self*, *page*, *text*, *bSelect=False*, *imageId=NOT\_FOUND*)[¶](#wx.Treebook.AddSubPage "Permalink to this definition")
Adds a new child-page to the last top-level page.


`None` could be specified for page to create an empty page.



Parameters
* **page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **text** (*string*) –
* **bSelect** (*bool*) –
* **imageId** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def CollapseNode(self, pageId: int) -> bool:
        """ 

`CollapseNode`(*self*, *pageId*)[¶](#wx.Treebook.CollapseNode "Permalink to this definition")
Shortcut for [`ExpandNode`](#wx.Treebook.ExpandNode "wx.Treebook.ExpandNode") ( *pageId*, `False` ).



Parameters
**pageId** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=BK_DEFAULT, name="") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=BK\_DEFAULT*, *name=""*)[¶](#wx.Treebook.Create "Permalink to this definition")
Creates a treebook control.


See `Treebook.__init__` for the description of the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def DeletePage(self, pagePos: int) -> bool:
        """ 

`DeletePage`(*self*, *pagePos*)[¶](#wx.Treebook.DeletePage "Permalink to this definition")
Deletes the page at the specified position and all its children.


Could trigger page selection change in a case when selected page is removed. In that case its parent is selected (or the next page if no parent).



Parameters
**pagePos** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def ExpandNode(self, pageId, expand=True) -> bool:
        """ 

`ExpandNode`(*self*, *pageId*, *expand=True*)[¶](#wx.Treebook.ExpandNode "Permalink to this definition")
Expands (collapses) the *pageId* node.


Returns the previous state. May generate page changing events (if selected page is under the collapsed branch, then its parent is autoselected).



Parameters
* **pageId** (*int*) –
* **expand** (*bool*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Treebook.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def GetPageParent(self, page: int) -> int:
        """ 

`GetPageParent`(*self*, *page*)[¶](#wx.Treebook.GetPageParent "Permalink to this definition")
Returns the parent page of the given one or `NOT_FOUND` if this is a top-level page.



Parameters
**page** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.Treebook.GetSelection "Permalink to this definition")
Returns the currently selected page, or `NOT_FOUND` if none was selected.



Return type
*int*





Note


This method may return either the previously or newly selected page when called from the EVT\_TREEBOOK\_PAGE\_CHANGED() handler depending on the platform and so [`wx.BookCtrlEvent.GetSelection`](wx.BookCtrlEvent.html#wx.BookCtrlEvent.GetSelection "wx.BookCtrlEvent.GetSelection") should be used instead in this case.





            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def GetTreeCtrl(self) -> 'TreeCtrl':
        """ 

`GetTreeCtrl`(*self*)[¶](#wx.Treebook.GetTreeCtrl "Permalink to this definition")
Returns the tree control used for selecting pages.



Return type
 [wx.TreeCtrl](wx.TreeCtrl.html#wx-treectrl)






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def InsertPage(self, pagePos, page, text, bSelect=False, imageId=NOT_FOUND) -> bool:
        """ 

`InsertPage`(*self*, *pagePos*, *page*, *text*, *bSelect=False*, *imageId=NOT\_FOUND*)[¶](#wx.Treebook.InsertPage "Permalink to this definition")
Inserts a new page just before the page indicated by *pagePos*.


The new page is placed before *pagePos* page and on the same level. `None` could be specified for page to create an empty page.



Parameters
* **pagePos** (*int*) –
* **page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **text** (*string*) –
* **bSelect** (*bool*) –
* **imageId** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def InsertSubPage(self, pagePos, page, text, bSelect=False, imageId=NOT_FOUND) -> bool:
        """ 

`InsertSubPage`(*self*, *pagePos*, *page*, *text*, *bSelect=False*, *imageId=NOT\_FOUND*)[¶](#wx.Treebook.InsertSubPage "Permalink to this definition")
Inserts a sub page under the specified page.


`None` could be specified for page to create an empty page.



Parameters
* **pagePos** (*int*) –
* **page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **text** (*string*) –
* **bSelect** (*bool*) –
* **imageId** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    def IsNodeExpanded(self, pageId: int) -> bool:
        """ 

`IsNodeExpanded`(*self*, *pageId*)[¶](#wx.Treebook.IsNodeExpanded "Permalink to this definition")
Returns `True` if the page represented by *pageId* is expanded.



Parameters
**pageId** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Treebook.html
        """

    Selection: int  # `Selection`[¶](#wx.Treebook.Selection "Permalink to this definition")See [`GetSelection`](#wx.Treebook.GetSelection "wx.Treebook.GetSelection")
    TreeCtrl: '_TreeCtrl'  # `TreeCtrl`[¶](#wx.Treebook.TreeCtrl "Permalink to this definition")See [`GetTreeCtrl`](#wx.Treebook.GetTreeCtrl "wx.Treebook.GetTreeCtrl")



EVT_TREEBOOK_PAGE_CHANGED: int  # The page selection was changed. Processes a  wxEVT_TREEBOOK_PAGE_CHANGED   event.

EVT_TREEBOOK_PAGE_CHANGING: int  # The page selection is about to be changed. Processes a  wxEVT_TREEBOOK_PAGE_CHANGING   event. This event can be  vetoed.

EVT_TREEBOOK_NODE_COLLAPSED: int  # The page node is going to be collapsed. Processes a  wxEVT_TREEBOOK_NODE_COLLAPSED   event.

EVT_TREEBOOK_NODE_EXPANDED: int  # The page node is going to be expanded. Processes a  wxEVT_TREEBOOK_NODE_EXPANDED   event. ^^

class BoxSizer(Sizer):
    """ **Possible constructors**:



```
BoxSizer(orient=HORIZONTAL)

```


The basic idea behind a box sizer is that windows will most often be
laid out in rather simple basic geometry, typically in a row or a
column or several hierarchies of either.


  


        Source: https://docs.wxpython.org/wx.BoxSizer.html
    """
    def __init__(self, orient: int=HORIZONTAL) -> None:
        """ 

`__init__`(*self*, *orient=HORIZONTAL*)[¶](#wx.BoxSizer.__init__ "Permalink to this definition")
Constructor for a  [wx.BoxSizer](#wx-boxsizer).


*orient* may be either of `wx.VERTICAL` or `wx.HORIZONTAL` for creating either a column sizer or a row sizer.



Parameters
**orient** (*int*) – 






            Source: https://docs.wxpython.org/wx.BoxSizer.html
        """

    def AddSpacer(self, size: int) -> 'SizerItem':
        """ 

`AddSpacer`(*self*, *size*)[¶](#wx.BoxSizer.AddSpacer "Permalink to this definition")
Adds non-stretchable space to the main orientation of the sizer only.


More readable way of calling:



```
if boxSizer.IsVertical():

    boxSizer.Add(0, size, 0)

else:

    boxSizer.Add(size, 0, 0)

```



Parameters
**size** (*int*) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






            Source: https://docs.wxpython.org/wx.BoxSizer.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.BoxSizer.CalcMin "Permalink to this definition")
Implements the calculation of a box sizer’s minimal.


It is used internally only and must not be called by the user. Documented for information.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.BoxSizer.html
        """

    def GetOrientation(self) -> int:
        """ 

`GetOrientation`(*self*)[¶](#wx.BoxSizer.GetOrientation "Permalink to this definition")
Returns the orientation of the box sizer, either `wx.VERTICAL` or `wx.HORIZONTAL`.



Return type
*int*






            Source: https://docs.wxpython.org/wx.BoxSizer.html
        """

    def RepositionChildren(self, minSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`RepositionChildren`(*self*, *minSize*)[¶](#wx.BoxSizer.RepositionChildren "Permalink to this definition")
Method which must be overridden in the derived sizer classes.


The implementation should reposition the children using the current total size available to the sizer ( `m_size` ) and the size computed by the last call to [`CalcMin`](#wx.BoxSizer.CalcMin "wx.BoxSizer.CalcMin") .



Parameters
**minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





New in version 4.1/wxWidgets-3.1.3: ,
before this version RecalcSizes() method not taking any arguments had to be overridden in the derived classes instead.





            Source: https://docs.wxpython.org/wx.BoxSizer.html
        """

    def SetOrientation(self, orient: int) -> None:
        """ 

`SetOrientation`(*self*, *orient*)[¶](#wx.BoxSizer.SetOrientation "Permalink to this definition")
Sets the orientation of the box sizer, either `wx.VERTICAL` or `wx.HORIZONTAL`.



Parameters
**orient** (*int*) – 






            Source: https://docs.wxpython.org/wx.BoxSizer.html
        """

    Orientation: int  # `Orientation`[¶](#wx.BoxSizer.Orientation "Permalink to this definition")See [`GetOrientation`](#wx.BoxSizer.GetOrientation "wx.BoxSizer.GetOrientation") and [`SetOrientation`](#wx.BoxSizer.SetOrientation "wx.BoxSizer.SetOrientation")



_Colour: TypeAlias = Colour

class Brush(GDIObject):
    """ **Possible constructors**:



```
Brush()

Brush(colour, style=BRUSHSTYLE_SOLID)

Brush(stippleBitmap)

Brush(brush)

```


A brush is a drawing tool for filling in areas.


  


        Source: https://docs.wxpython.org/wx.Brush.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Brush.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


The brush will be uninitialised, and  [wx.Brush](#wx-brush): [`IsOk`](#wx.Brush.IsOk "wx.Brush.IsOk") will return `False`.




---

  



**\_\_init\_\_** *(self, colour, style=BRUSHSTYLE\_SOLID)*


Constructs a brush from a colour object and *style*.



Parameters
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – Colour object.
* **style** ([*BrushStyle*](wx.BrushStyle.enumeration.html "BrushStyle")) – One of the  [wx.BrushStyle](wx.BrushStyle.enumeration.html#wx-brushstyle) enumeration values.






---

  



**\_\_init\_\_** *(self, stippleBitmap)*


Constructs a stippled brush using a bitmap.


The brush style will be set to `BRUSHSTYLE_STIPPLE` .



Parameters
**stippleBitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 






---

  



**\_\_init\_\_** *(self, brush)*


Copy constructor, uses [reference counting](refcount_overview.html#reference-counting).



Parameters
**brush** ([*wx.Brush*](#wx.Brush "wx.Brush")) – 






---

  





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.Brush.GetColour "Permalink to this definition")
Returns a reference to the brush colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





See also


[`SetColour`](#wx.Brush.SetColour "wx.Brush.SetColour")





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def GetStipple(self) -> 'Bitmap':
        """ 

`GetStipple`(*self*)[¶](#wx.Brush.GetStipple "Permalink to this definition")
Gets a pointer to the stipple bitmap.


If the brush does not have a `BRUSHSTYLE_STIPPLE` style, this bitmap may be not `None` but uninitialised (i.e.  [wx.Bitmap](wx.Bitmap.html#wx-bitmap): [`IsOk`](#wx.Brush.IsOk "wx.Brush.IsOk") returns `False`).



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





See also


[`SetStipple`](#wx.Brush.SetStipple "wx.Brush.SetStipple")





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def GetStyle(self) -> 'BrushStyle':
        """ 

`GetStyle`(*self*)[¶](#wx.Brush.GetStyle "Permalink to this definition")
Returns the brush style, one of the  [wx.BrushStyle](wx.BrushStyle.enumeration.html#wx-brushstyle) values.



Return type
 [wx.BrushStyle](wx.BrushStyle.enumeration.html#wx-brushstyle)





See also


[`SetStyle`](#wx.Brush.SetStyle "wx.Brush.SetStyle") , [`SetColour`](#wx.Brush.SetColour "wx.Brush.SetColour") , [`SetStipple`](#wx.Brush.SetStipple "wx.Brush.SetStipple")





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def IsHatch(self) -> bool:
        """ 

`IsHatch`(*self*)[¶](#wx.Brush.IsHatch "Permalink to this definition")
Returns `True` if the style of the brush is any of hatched fills.



Return type
*bool*





See also


[`GetStyle`](#wx.Brush.GetStyle "wx.Brush.GetStyle")





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def IsNonTransparent(self) -> bool:
        """ 

`IsNonTransparent`(*self*)[¶](#wx.Brush.IsNonTransparent "Permalink to this definition")
Returns `True` if the brush is a valid non-transparent brush.


This method returns `True` if the brush object is initialized and has a non-transparent style. Notice that this should be used instead of simply testing whether [`GetStyle`](#wx.Brush.GetStyle "wx.Brush.GetStyle") returns a style different from `wx.BRUSHSTYLE_TRANSPARENT` if the brush may be invalid as [`GetStyle`](#wx.Brush.GetStyle "wx.Brush.GetStyle") would assert in this case.



Return type
*bool*





New in version 2.9.2..




See also


[`IsTransparent`](#wx.Brush.IsTransparent "wx.Brush.IsTransparent")





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Brush.IsOk "Permalink to this definition")
Returns `True` if the brush is initialised.


Notice that an uninitialized brush object can’t be queried for any brush properties and all calls to the accessor methods on it will result in an assert failure.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def IsTransparent(self) -> bool:
        """ 

`IsTransparent`(*self*)[¶](#wx.Brush.IsTransparent "Permalink to this definition")
Returns `True` if the brush is transparent.


A transparent brush is simply a brush with `wx.BRUSHSTYLE_TRANSPARENT` style.


Notice that this function works even for non-initialized brushes (for which it returns `False`) unlike tests of the form [`GetStyle`](#wx.Brush.GetStyle "wx.Brush.GetStyle") == `wx.BRUSHSTYLE_TRANSPARENT` which would assert if the brush is invalid.



Return type
*bool*





New in version 2.9.2..




See also


[`IsNonTransparent`](#wx.Brush.IsNonTransparent "wx.Brush.IsNonTransparent")





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def MacSetTheme(self, macThemeBrushID) -> None:
        """ 

`MacSetTheme`(*self*, *macThemeBrushID*)[¶](#wx.Brush.MacSetTheme "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def SetColour(self, *args, **kw) -> None:
        """ 

`SetColour`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Brush.SetColour "Permalink to this definition")
Sets the brush colour using red, green and blue values.



See also


[`GetColour`](#wx.Brush.GetColour "wx.Brush.GetColour")



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetColour** *(self, colour)*



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






---

  



**SetColour** *(self, red, green, blue)*



Parameters
* **red** (*int*) –
* **green** (*int*) –
* **blue** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def SetStipple(self, bitmap: 'Bitmap') -> None:
        """ 

`SetStipple`(*self*, *bitmap*)[¶](#wx.Brush.SetStipple "Permalink to this definition")
Sets the stipple bitmap.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – The bitmap to use for stippling.





Note


The style will be set to `BRUSHSTYLE_STIPPLE` , unless the bitmap has a mask associated to it, in which case the style will be set to `BRUSHSTYLE_STIPPLE_MASK_OPAQUE` .




See also


 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def SetStyle(self, style: BrushStyle) -> None:
        """ 

`SetStyle`(*self*, *style*)[¶](#wx.Brush.SetStyle "Permalink to this definition")
Sets the brush style.



Parameters
**style** ([*BrushStyle*](wx.BrushStyle.enumeration.html "BrushStyle")) – One of the  [wx.BrushStyle](wx.BrushStyle.enumeration.html#wx-brushstyle) values.





See also


[`GetStyle`](#wx.Brush.GetStyle "wx.Brush.GetStyle")





            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Brush.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Brush.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def _copyFrom(self, other) -> None:
        """ 

`_copyFrom`(*self*, *other*)[¶](#wx.Brush._copyFrom "Permalink to this definition")
For internal use only.




            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.Brush.__ne__ "Permalink to this definition")
Inequality operator.


See Object Comparison for more info.



Parameters
**brush** ([*wx.Brush*](#wx.Brush "wx.Brush")) – 






            Source: https://docs.wxpython.org/wx.Brush.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.Brush.__eq__ "Permalink to this definition")
Equality operator.


See Object Comparison for more info.



Parameters
**brush** ([*wx.Brush*](#wx.Brush "wx.Brush")) – 






            Source: https://docs.wxpython.org/wx.Brush.html
        """

    Colour: '_Colour'  # `Colour`[¶](#wx.Brush.Colour "Permalink to this definition")See [`GetColour`](#wx.Brush.GetColour "wx.Brush.GetColour") and [`SetColour`](#wx.Brush.SetColour "wx.Brush.SetColour")
    Stipple: 'Bitmap'  # `Stipple`[¶](#wx.Brush.Stipple "Permalink to this definition")See [`GetStipple`](#wx.Brush.GetStipple "wx.Brush.GetStipple") and [`SetStipple`](#wx.Brush.SetStipple "wx.Brush.SetStipple")
    Style: 'BrushStyle'  # `Style`[¶](#wx.Brush.Style "Permalink to this definition")See [`GetStyle`](#wx.Brush.GetStyle "wx.Brush.GetStyle") and [`SetStyle`](#wx.Brush.SetStyle "wx.Brush.SetStyle")



BRUSHSTYLE_TRANSPARENT: int

class BrushList:
    """ A brush list is a list containing all brushes which have been created.


  


        Source: https://docs.wxpython.org/wx.BrushList.html
    """
    def FindOrCreateBrush(self, colour, style=BRUSHSTYLE_SOLID) -> 'Brush':
        """ 

`FindOrCreateBrush`(*self*, *colour*, *style=BRUSHSTYLE\_SOLID*)[¶](#wx.BrushList.FindOrCreateBrush "Permalink to this definition")
Finds a brush with the specified attributes and returns it, else creates a new brush, adds it to the brush list, and returns it.



Parameters
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – Colour object.
* **style** ([*BrushStyle*](wx.BrushStyle.enumeration.html "BrushStyle")) – Brush style. See  [wx.BrushStyle](wx.BrushStyle.enumeration.html#wx-brushstyle) for a list of styles.



Return type
 [wx.Brush](wx.Brush.html#wx-brush)






            Source: https://docs.wxpython.org/wx.BrushList.html
        """



class BufferedDC(MemoryDC):
    """ **Possible constructors**:



```
BufferedDC()

BufferedDC(dc, area, style=BUFFER_CLIENT_AREA)

BufferedDC(dc, buffer=NullBitmap, style=BUFFER_CLIENT_AREA)

```


This class provides a simple way to avoid flicker: when drawing on it,
everything is in fact first drawn on an in-memory buffer (a Bitmap)
and then copied to the screen, using the associated DC, only once,
when this object is destroyed.


  


        Source: https://docs.wxpython.org/wx.BufferedDC.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.BufferedDC.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


You must call one of the [`Init`](#wx.BufferedDC.Init "wx.BufferedDC.Init") methods later in order to use the device context.




---

  



**\_\_init\_\_** *(self, dc, area, style=BUFFER\_CLIENT\_AREA)*


Creates a buffer for the provided *dc*.


[`Init`](#wx.BufferedDC.Init "wx.BufferedDC.Init") must not be called when using this constructor.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The underlying DC: everything drawn to this object will be flushed to this DC when this object is destroyed. You may pass `None` in order to just initialize the buffer, and not flush it.
* **area** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The size of the bitmap to be used for buffering (this bitmap is created internally when it is not given explicitly).
* **style** (*int*) – `wx.BUFFER_CLIENT_AREA` to indicate that just the client area of the window is buffered, or `wx.BUFFER_VIRTUAL_AREA` to indicate that the buffer bitmap covers the virtual area.






---

  



**\_\_init\_\_** *(self, dc, buffer=NullBitmap, style=BUFFER\_CLIENT\_AREA)*


Creates a buffer for the provided dc.


[`Init`](#wx.BufferedDC.Init "wx.BufferedDC.Init") must not be called when using this constructor.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The underlying DC: everything drawn to this object will be flushed to this DC when this object is destroyed. You may pass `None` in order to just initialize the buffer, and not flush it.
* **buffer** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – Explicitly provided bitmap to be used for buffering: this is the most efficient solution as the bitmap doesn’t have to be recreated each time but it also requires more memory as the bitmap is never freed. The bitmap should have appropriate size, anything drawn outside of its bounds is clipped.
* **style** (*int*) – `wx.BUFFER_CLIENT_AREA` to indicate that just the client area of the window is buffered, or `wx.BUFFER_VIRTUAL_AREA` to indicate that the buffer bitmap covers the virtual area.






---

  





            Source: https://docs.wxpython.org/wx.BufferedDC.html
        """

    def GetStyle(self) -> int:
        """ 

`GetStyle`(*self*)[¶](#wx.BufferedDC.GetStyle "Permalink to this definition")
Get the style.



Return type
*int*






            Source: https://docs.wxpython.org/wx.BufferedDC.html
        """

    def Init(self, *args, **kw) -> None:
        """ 

`Init`(*self*, *\*args*, *\*\*kw*)[¶](#wx.BufferedDC.Init "Permalink to this definition")
Initializes the object created using the default constructor.


Please see the constructors for parameter details.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Init** *(self, dc, area, style=BUFFER\_CLIENT\_AREA)*



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **area** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*int*) –






---

  



**Init** *(self, dc, buffer=NullBitmap, style=BUFFER\_CLIENT\_AREA)*



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **buffer** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **style** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.BufferedDC.html
        """

    def SetStyle(self, style: int) -> None:
        """ 

`SetStyle`(*self*, *style*)[¶](#wx.BufferedDC.SetStyle "Permalink to this definition")
Set the style.



Parameters
**style** (*int*) – 






            Source: https://docs.wxpython.org/wx.BufferedDC.html
        """

    def UnMask(self) -> None:
        """ 

`UnMask`(*self*)[¶](#wx.BufferedDC.UnMask "Permalink to this definition")
Blits the buffer to the dc, and detaches the dc from the buffer (so it can be effectively used once only).


Usually only called in the destructor or by the destructor of derived classes if the BufferedDC must blit before the derived class (which may own the dc it’s blitting to) is destroyed.




            Source: https://docs.wxpython.org/wx.BufferedDC.html
        """

    Style: int  # `Style`[¶](#wx.BufferedDC.Style "Permalink to this definition")See [`GetStyle`](#wx.BufferedDC.GetStyle "wx.BufferedDC.GetStyle") and [`SetStyle`](#wx.BufferedDC.SetStyle "wx.BufferedDC.SetStyle")



BUFFER_CLIENT_AREA: int

BUFFER_VIRTUAL_AREA: int

class BufferedPaintDC(BufferedDC):
    """ **Possible constructors**:



```
BufferedPaintDC(window, buffer, style=BUFFER_CLIENT_AREA)

BufferedPaintDC(window, style=BUFFER_CLIENT_AREA)

```


This is a subclass of BufferedDC which can be used inside of an
EVT\_PAINT() event handler to achieve double-buffered drawing.


  


        Source: https://docs.wxpython.org/wx.BufferedPaintDC.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.BufferedPaintDC.__init__ "Permalink to this definition")
As with  [wx.BufferedDC](wx.BufferedDC.html#wx-buffereddc), you may either provide the bitmap to be used for buffering or let this object create one internally (in the latter case, the size of the client part of the window is used).


Pass `wx.BUFFER_CLIENT_AREA` for the *style* parameter to indicate that just the client area of the window is buffered, or `wx.BUFFER_VIRTUAL_AREA` to indicate that the buffer bitmap covers the virtual area.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, window, buffer, style=BUFFER\_CLIENT\_AREA)*



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **buffer** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **style** (*int*) –






---

  



**\_\_init\_\_** *(self, window, style=BUFFER\_CLIENT\_AREA)*



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **style** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.BufferedPaintDC.html
        """



class BusyCursor:
    """ **Possible constructors**:



```
BusyCursor(cursor=HOURGLASS_CURSOR)

```


This class makes it easy to tell your user that the program is
temporarily busy.


  


        Source: https://docs.wxpython.org/wx.BusyCursor.html
    """
    def __init__(self, cursor: 'Cursor'=HOURGLASS_CURSOR) -> None:
        """ 

`__init__`(*self*, *cursor=HOURGLASS\_CURSOR*)[¶](#wx.BusyCursor.__init__ "Permalink to this definition")
Constructs a busy cursor object, calling [`wx.BeginBusyCursor`](wx.functions.html#wx.BeginBusyCursor "wx.BeginBusyCursor") .



Parameters
**cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – 






            Source: https://docs.wxpython.org/wx.BusyCursor.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.BusyCursor.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.BusyCursor.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.BusyCursor.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.BusyCursor.html
        """



class BusyInfo:
    """ **Possible constructors**:



```
BusyInfo(flags)

BusyInfo(msg, parent=None)

```


This class makes it easy to tell your user that the program is
temporarily busy.


  


        Source: https://docs.wxpython.org/wx.BusyInfo.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.BusyInfo.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, flags)*


General constructor.


This constructor allows specifying all supported attributes by calling the appropriate methods on  [wx.BusyInfoFlags](wx.BusyInfoFlags.html#wx-busyinfoflags) object passed to it as parameter. All of them are optional but usually at least the message should be specified.



Parameters
**flags** ([*wx.BusyInfoFlags*](wx.BusyInfoFlags.html#wx.BusyInfoFlags "wx.BusyInfoFlags")) – 





New in version 4.1/wxWidgets-3.1.0.





---

  



**\_\_init\_\_** *(self, msg, parent=None)*


Simple constructor specifying only the message and the parent.


This constructs a busy info window as child of *parent* and displays *msg* in it. It is exactly equivalent to using



```
wait = wx.BusyInfo(wx.BusyInfoFlags().Parent(parent).Label(message))

```



Parameters
* **msg** (*string*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –





Note


If *parent* is not `None` you must ensure that it is not closed while the busy info is shown.





---

  





            Source: https://docs.wxpython.org/wx.BusyInfo.html
        """

    def UpdateLabel(self, str: str) -> None:
        """ 

`UpdateLabel`(*self*, *str*)[¶](#wx.BusyInfo.UpdateLabel "Permalink to this definition")
Same as [`UpdateText`](#wx.BusyInfo.UpdateText "wx.BusyInfo.UpdateText") but doesn’t interpret the string as containing markup.



Parameters
**str** (*string*) – 





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.BusyInfo.html
        """

    def UpdateText(self, str: str) -> None:
        """ 

`UpdateText`(*self*, *str*)[¶](#wx.BusyInfo.UpdateText "Permalink to this definition")
Update the information text.


The *text* string may contain markup as described in [`wx.Control.SetLabelMarkup`](wx.Control.html#wx.Control.SetLabelMarkup "wx.Control.SetLabelMarkup") .



Parameters
**str** (*string*) – 





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.BusyInfo.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.BusyInfo.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.BusyInfo.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.BusyInfo.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.BusyInfo.html
        """



class BusyInfoFlags:
    """ **Possible constructors**:



```
BusyInfoFlags()

```


Parameters for BusyInfo.


  


        Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.BusyInfoFlags.__init__ "Permalink to this definition")
Default constructor initializes all attributes to default values.


Call the other methods to really fill in the object.




            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """

    def Background(self, background: Union[int, str, 'Colour']) -> 'BusyInfoFlags':
        """ 

`Background`(*self*, *background*)[¶](#wx.BusyInfoFlags.Background "Permalink to this definition")
Sets the background colour of  [wx.BusyInfo](wx.BusyInfo.html#wx-busyinfo) window.



Parameters
**background** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
 [wx.BusyInfoFlags](#wx-busyinfoflags)






            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """

    def Foreground(self, foreground: Union[int, str, 'Colour']) -> 'BusyInfoFlags':
        """ 

`Foreground`(*self*, *foreground*)[¶](#wx.BusyInfoFlags.Foreground "Permalink to this definition")
Sets the foreground colour of the title and text strings.



Parameters
**foreground** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
 [wx.BusyInfoFlags](#wx-busyinfoflags)






            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """

    def Icon(self, icon: 'Icon') -> 'BusyInfoFlags':
        """ 

`Icon`(*self*, *icon*)[¶](#wx.BusyInfoFlags.Icon "Permalink to this definition")
Sets the icon to show in  [wx.BusyInfo](wx.BusyInfo.html#wx-busyinfo).



Parameters
**icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – 



Return type
 [wx.BusyInfoFlags](#wx-busyinfoflags)






            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """

    def Label(self, label: str) -> 'BusyInfoFlags':
        """ 

`Label`(*self*, *label*)[¶](#wx.BusyInfoFlags.Label "Permalink to this definition")
Same as [`Text`](#wx.BusyInfoFlags.Text "wx.BusyInfoFlags.Text") but doesn’t interpret the string as containing markup.


This method should be used if the text shown in  [wx.BusyInfo](wx.BusyInfo.html#wx-busyinfo) comes from external source and so may contain characters having special meaning in simple markup, e.g. ‘<’.



Parameters
**label** (*string*) – 



Return type
 [wx.BusyInfoFlags](#wx-busyinfoflags)






            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """

    def Parent(self, parent: 'Window') -> 'BusyInfoFlags':
        """ 

`Parent`(*self*, *parent*)[¶](#wx.BusyInfoFlags.Parent "Permalink to this definition")
Sets the parent for  [wx.BusyInfo](wx.BusyInfo.html#wx-busyinfo).



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.BusyInfoFlags](#wx-busyinfoflags)






            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """

    def Text(self, text: str) -> 'BusyInfoFlags':
        """ 

`Text`(*self*, *text*)[¶](#wx.BusyInfoFlags.Text "Permalink to this definition")
Sets the more detailed text, shown under the title, if any.


The *text* string may contain markup as described in [`wx.Control.SetLabelMarkup`](wx.Control.html#wx.Control.SetLabelMarkup "wx.Control.SetLabelMarkup") .



Parameters
**text** (*string*) – 



Return type
 [wx.BusyInfoFlags](#wx-busyinfoflags)






            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """

    def Title(self, title: str) -> 'BusyInfoFlags':
        """ 

`Title`(*self*, *title*)[¶](#wx.BusyInfoFlags.Title "Permalink to this definition")
Sets the title, shown prominently in  [wx.BusyInfo](wx.BusyInfo.html#wx-busyinfo) window.


The *title* string may contain markup as described in [`wx.Control.SetLabelMarkup`](wx.Control.html#wx.Control.SetLabelMarkup "wx.Control.SetLabelMarkup") .



Parameters
**title** (*string*) – 



Return type
 [wx.BusyInfoFlags](#wx-busyinfoflags)






            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """

    def Transparency(self, alpha: 'Byte') -> 'BusyInfoFlags':
        """ 

`Transparency`(*self*, *alpha*)[¶](#wx.BusyInfoFlags.Transparency "Permalink to this definition")
Sets the transparency of  [wx.BusyInfo](wx.BusyInfo.html#wx-busyinfo) window.



Parameters
**alpha** (*wx.Byte*) – Value in `wx.ALPHA_TRANSPARENT` (0) to `wx.ALPHA_OPAQUE` (255) range.



Return type
 [wx.BusyInfoFlags](#wx-busyinfoflags)





See also


[`wx.TopLevelWindow.SetTransparent`](wx.TopLevelWindow.html#wx.TopLevelWindow.SetTransparent "wx.TopLevelWindow.SetTransparent")





            Source: https://docs.wxpython.org/wx.BusyInfoFlags.html
        """



ALPHA_TRANSPARENT: int

class Button(AnyButton):
    """ **Possible constructors**:



```
Button()

Button(parent, id=ID_ANY, label="", pos=DefaultPosition,
       size=DefaultSize, style=0, validator=DefaultValidator,
       name=ButtonNameStr)

```


A button is a control that contains a text string, and is one of the
most common elements of a GUI.


  


        Source: https://docs.wxpython.org/wx.Button.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Button.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ButtonNameStr)*


Constructor, creating and showing a button.


The preferred way to create standard buttons is to use default value of *label*. If no label is supplied and *id* is one of standard IDs from [this list](stock_items.html#stock-items), a standard label will be used. In other words, if you use a predefined `ID_XXX` constant, just omit the label completely rather than specifying it. In particular, help buttons (the ones with *id* of `ID_HELP` ) under macOS can’t display any label at all and while  [wx.Button](#wx-button) will detect if the standard “Help” label is used and ignore it, using any other label will prevent the button from correctly appearing as a help button and so should be avoided.


In addition to that, the button will be decorated with stock icons under GTK+ 2.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Button identifier. A value of `ID_ANY` indicates a default value.
* **label** (*string*) – Text to be displayed on the button.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Button position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Button size. If the default size is specified then the button is sized appropriately for the text.
* **style** (*long*) – Window style. See  [wx.Button](#wx-button) class description.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.Button.Create "wx.Button.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.Button.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ButtonNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=ButtonNameStr*)[¶](#wx.Button.Create "Permalink to this definition")
Button creation function for two-step creation.


For more details, see  [wx.Button](#wx-button).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Button.html
        """

    def GetAuthNeeded(self) -> bool:
        """ 

`GetAuthNeeded`(*self*)[¶](#wx.Button.GetAuthNeeded "Permalink to this definition")
Returns `True` if an authentication needed symbol is displayed on the button.



Return type
*bool*





New in version 2.9.1.




Note


This method always returns `False` if the platform is not Windows Vista or newer.




See also


[`SetAuthNeeded`](#wx.Button.SetAuthNeeded "wx.Button.SetAuthNeeded")





            Source: https://docs.wxpython.org/wx.Button.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Button.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Button.html
        """

    @staticmethod
    def GetDefaultSize(win: Optional['Window']=None) -> 'Size':
        """ 

*static* `GetDefaultSize`(*win=None*)[¶](#wx.Button.GetDefaultSize "Permalink to this definition")
Returns the default size for the buttons.


It is advised to make all the dialog buttons of the same size and this function allows retrieving the (platform, and current font dependent) size which should be the best suited for this.


The optional *win* argument is new since wxWidgets 3.1.3 and allows to get a per-monitor `DPI` specific size.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Button.html
        """

    def GetLabel(self) -> str:
        """ 

`GetLabel`(*self*)[¶](#wx.Button.GetLabel "Permalink to this definition")
Returns the string label for the button.



Return type
`string`





See also


[`SetLabel`](#wx.Button.SetLabel "wx.Button.SetLabel")





            Source: https://docs.wxpython.org/wx.Button.html
        """

    def SetAuthNeeded(self, needed: bool=True) -> None:
        """ 

`SetAuthNeeded`(*self*, *needed=True*)[¶](#wx.Button.SetAuthNeeded "Permalink to this definition")
Sets whether an authentication needed symbol should be displayed on the button.



Parameters
**needed** (*bool*) – 





New in version 2.9.1.




Note


This method doesn’t do anything if the platform is not Windows Vista or newer.




See also


[`GetAuthNeeded`](#wx.Button.GetAuthNeeded "wx.Button.GetAuthNeeded")





            Source: https://docs.wxpython.org/wx.Button.html
        """

    def SetDefault(self) -> 'Window':
        """ 

`SetDefault`(*self*)[¶](#wx.Button.SetDefault "Permalink to this definition")
This sets the button to be the default item in its top-level window (e.g.


the panel or the dialog box containing it).


As normal, pressing return causes the default button to be depressed when the return key is pressed.


See also [`wx.Window.SetFocus`](wx.Window.html#wx.Window.SetFocus "wx.Window.SetFocus") which sets the keyboard focus for windows and text panel items, and [`wx.TopLevelWindow.SetDefaultItem`](wx.TopLevelWindow.html#wx.TopLevelWindow.SetDefaultItem "wx.TopLevelWindow.SetDefaultItem") .



Return type
 [wx.Window](wx.Window.html#wx-window)



Returns
the old default item (possibly `None`)





Note


Under Windows, only dialog box buttons respond to this function.





            Source: https://docs.wxpython.org/wx.Button.html
        """

    def SetLabel(self, label: str) -> None:
        """ 

`SetLabel`(*self*, *label*)[¶](#wx.Button.SetLabel "Permalink to this definition")
Sets the string label for the button.



Parameters
**label** (*string*) – The label to set.






            Source: https://docs.wxpython.org/wx.Button.html
        """

    AuthNeeded: bool  # `AuthNeeded`[¶](#wx.Button.AuthNeeded "Permalink to this definition")See [`GetAuthNeeded`](#wx.Button.GetAuthNeeded "wx.Button.GetAuthNeeded") and [`SetAuthNeeded`](#wx.Button.SetAuthNeeded "wx.Button.SetAuthNeeded")
    Label: str  # `Label`[¶](#wx.Button.Label "Permalink to this definition")See [`GetLabel`](#wx.Button.GetLabel "wx.Button.GetLabel") and [`SetLabel`](#wx.Button.SetLabel "wx.Button.SetLabel")



BU_NOTEXT: int  # Disables the display of the text label in the button even if it has one or its id is one of the standard stock ids with an associated label: without using this style a button which is only supposed to show a bitmap but uses a standard id would display a label too.

BORDER_NONE: int  # Creates a button without border. This is currently implemented in MSW, GTK2 and OSX/Cocoa. ^^

class CallLater:
    """ A convenience class for [`wx.Timer`](wx.Timer.html#wx.Timer "wx.Timer"), that calls the given callable
object once after the given amount of milliseconds, passing any
positional or keyword args. The return value of the callable is
available after it has been run with the [`GetResult`](#wx.CallLater.GetResult "wx.CallLater.GetResult")
method.


If you don’t need to get the return value or restart the timer
then there is no need to hold a reference to this object. CallLater
maintains references to its instances while they are running. When they
finish, the internal reference is deleted and the GC is free to collect
naturally.



See also


[`wx.CallAfter`](wx.functions.html#wx.CallAfter "wx.CallAfter")



  


        Source: https://docs.wxpython.org/wx.CallLater.html
    """
    def __init__(self, millis, callableObj, *args, **kwargs) -> None:
        """ 

`__init__`(*self*, *millis*, *callableObj*, *\*args*, *\*\*kwargs*)[¶](#wx.CallLater.__init__ "Permalink to this definition")
Constructs a new [`wx.CallLater`](#wx.CallLater "wx.CallLater") object.



Parameters
* **millis** (*int*) – number of milliseconds to delay until calling the callable object
* **callableObj** (*PyObject*) – the callable object
* **args** – arguments to be passed to the callable object
* **kw** – keyword arguments to be passed to the callable object






            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def GetInterval(self) -> None:
        """ 

`GetInterval`(*self*)[¶](#wx.CallLater.GetInterval "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def GetResult(self) -> Any:
        """ 

`GetResult`(*self*)[¶](#wx.CallLater.GetResult "Permalink to this definition")
Returns the value of the callable.



Return type
a Python object



Returns
result from callable






            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def HasRun(self) -> bool:
        """ 

`HasRun`(*self*)[¶](#wx.CallLater.HasRun "Permalink to this definition")
Returns whether or not the callable has run.



Return type
bool






            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def IsRunning(self) -> bool:
        """ 

`IsRunning`(*self*)[¶](#wx.CallLater.IsRunning "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def Notify(self) -> None:
        """ 

`Notify`(*self*)[¶](#wx.CallLater.Notify "Permalink to this definition")
The timer has expired so call the callable.




            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def SetArgs(self, *args, **kwargs) -> None:
        """ 

`SetArgs`(*self*, *\*args*, *\*\*kwargs*)[¶](#wx.CallLater.SetArgs "Permalink to this definition")
(Re)set the args passed to the callable object. This is
useful in conjunction with [`Start`](#wx.CallLater.Start "wx.CallLater.Start") if
you want to schedule a new call to the same callable
object but with different parameters.



Parameters
* **args** – arguments to be passed to the callable object
* **kw** – keywords to be passed to the callable object






            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def Start(self, millis=None, *args, **kwargs) -> None:
        """ 

`Start`(*self*, *millis=None*, *\*args*, *\*\*kwargs*)[¶](#wx.CallLater.Start "Permalink to this definition")
(Re)start the timer



Parameters
* **millis** (*int*) – number of milli seconds
* **args** – arguments to be passed to the callable object
* **kw** – keywords to be passed to the callable object






            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def Stop(self) -> None:
        """ 

`Stop`(*self*)[¶](#wx.CallLater.Stop "Permalink to this definition")
Stop and destroy the timer.




            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    def __del__(self) -> None:
        """ 

`__del__`(*self*)[¶](#wx.CallLater.__del__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.CallLater.html
        """

    Interval: None  # `Interval`[¶](#wx.CallLater.Interval "Permalink to this definition")See [`GetInterval`](#wx.CallLater.GetInterval "wx.CallLater.GetInterval")
    Result: Any  # `Result`[¶](#wx.CallLater.Result "Permalink to this definition")See [`GetResult`](#wx.CallLater.GetResult "wx.CallLater.GetResult")



class Timer(EvtHandler):
    """ **Possible constructors**:



```
Timer()

Timer(owner, id=-1)

```


The Timer class allows you to execute code at specified intervals.


  


        Source: https://docs.wxpython.org/wx.Timer.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Timer.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


If you use it to construct the object and don’t call [`SetOwner`](#wx.Timer.SetOwner "wx.Timer.SetOwner") later, you must override [`Notify`](#wx.Timer.Notify "wx.Timer.Notify") method to process the notifications.




---

  



**\_\_init\_\_** *(self, owner, id=-1)*


Creates a timer and associates it with *owner*.


Please see [`SetOwner`](#wx.Timer.SetOwner "wx.Timer.SetOwner") for the description of parameters.



Parameters
* **owner** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) –
* **id** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def GetId(self) -> int:
        """ 

`GetId`(*self*)[¶](#wx.Timer.GetId "Permalink to this definition")
Returns the `ID` of the events generated by this timer.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def GetInterval(self) -> int:
        """ 

`GetInterval`(*self*)[¶](#wx.Timer.GetInterval "Permalink to this definition")
Returns the current interval for the timer (in milliseconds).



Return type
*int*






            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def GetOwner(self) -> 'EvtHandler':
        """ 

`GetOwner`(*self*)[¶](#wx.Timer.GetOwner "Permalink to this definition")
Returns the current *owner* of the timer.


If not `None` this is the event handler which will receive the timer events (see  [wx.TimerEvent](wx.TimerEvent.html#wx-timerevent)) when the timer is running.



Return type
 [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler)






            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def IsOneShot(self) -> bool:
        """ 

`IsOneShot`(*self*)[¶](#wx.Timer.IsOneShot "Permalink to this definition")
Returns `True` if the timer is one shot, i.e. if it will stop after firing the first notification automatically.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def IsRunning(self) -> bool:
        """ 

`IsRunning`(*self*)[¶](#wx.Timer.IsRunning "Permalink to this definition")
Returns `True` if the timer is running, `False` if it is stopped.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def Notify(self) -> None:
        """ 

`Notify`(*self*)[¶](#wx.Timer.Notify "Permalink to this definition")
This member should be overridden by the user if the default constructor was used and [`SetOwner`](#wx.Timer.SetOwner "wx.Timer.SetOwner") wasn’t called.


Perform whatever action which is to be taken periodically here.


Notice that throwing exceptions from this method is currently not supported, use event-based timer handling approach if an exception can be thrown while handling timer notifications.




            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def SetOwner(self, owner, id=-1) -> None:
        """ 

`SetOwner`(*self*, *owner*, *id=-1*)[¶](#wx.Timer.SetOwner "Permalink to this definition")
Associates the timer with the given *owner* object.


When the timer is running, the owner will receive timer events (see  [wx.TimerEvent](wx.TimerEvent.html#wx-timerevent)) with *id* equal to *id* specified here.



Parameters
* **owner** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def Start(self, milliseconds=-1, oneShot=TIMER_CONTINUOUS) -> bool:
        """ 

`Start`(*self*, *milliseconds=-1*, *oneShot=TIMER\_CONTINUOUS*)[¶](#wx.Timer.Start "Permalink to this definition")
(Re)starts the timer.


If *milliseconds* parameter is -1 (value by default), the previous value is used. Returns `False` if the timer could not be started, `True` otherwise (in MS Windows timers are a limited resource).


If *oneShot* is `False` (the default), the [`Notify`](#wx.Timer.Notify "wx.Timer.Notify") function will be called repeatedly until the timer is stopped. If `True`, it will be called only once and the timer will stop automatically.


To make your code more readable you may also use the following symbolic constants:


* `wx.TIMER_CONTINUOUS`: Start a normal, continuously running, timer
* `wx.TIMER_ONE_SHOT`: Start a one shot timer Alternatively, use [`StartOnce`](#wx.Timer.StartOnce "wx.Timer.StartOnce") .


If the timer was already running, it will be stopped by this method before restarting it.



Parameters
* **milliseconds** (*int*) –
* **oneShot** (*bool*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def StartOnce(self, milliseconds: int=-1) -> bool:
        """ 

`StartOnce`(*self*, *milliseconds=-1*)[¶](#wx.Timer.StartOnce "Permalink to this definition")
Starts the timer for a once-only notification.


This is a simple wrapper for [`Start`](#wx.Timer.Start "wx.Timer.Start") with `TIMER_ONE_SHOT` parameter.



Parameters
**milliseconds** (*int*) – 



Return type
*bool*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Timer.html
        """

    def Stop(self) -> None:
        """ 

`Stop`(*self*)[¶](#wx.Timer.Stop "Permalink to this definition")
Stops the timer.




            Source: https://docs.wxpython.org/wx.Timer.html
        """

    Id: int  # `Id`[¶](#wx.Timer.Id "Permalink to this definition")See [`GetId`](#wx.Timer.GetId "wx.Timer.GetId")
    Interval: int  # `Interval`[¶](#wx.Timer.Interval "Permalink to this definition")See [`GetInterval`](#wx.Timer.GetInterval "wx.Timer.GetInterval")
    Owner: 'EvtHandler'  # `Owner`[¶](#wx.Timer.Owner "Permalink to this definition")See [`GetOwner`](#wx.Timer.GetOwner "wx.Timer.GetOwner") and [`SetOwner`](#wx.Timer.SetOwner "wx.Timer.SetOwner")



TIMER_CONTINUOUS: int

TIMER_ONE_SHOT: int

class Caret:
    """ **Possible constructors**:



```
Caret(window, width, height)

Caret(window, size)

Caret()

```


A caret is a blinking cursor showing the position where the typed text
will appear.


  


        Source: https://docs.wxpython.org/wx.Caret.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Caret.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, window, width, height)*


Creates a caret with the given size (in pixels) and associates it with the *window*.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **width** (*int*) –
* **height** (*int*) –






---

  



**\_\_init\_\_** *(self, window, size)*


Creates a caret with the given size (in pixels) and associates it with the *window*.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  





            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def Create(self, *args, **kw) -> bool:
        """ 

`Create`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Caret.Create "Permalink to this definition")
Creates a caret with the given size (in pixels) and associates it with the *window* (same as the equivalent constructors).


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Create** *(self, window, width, height)*



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **width** (*int*) –
* **height** (*int*) –



Return type
*bool*






---

  



**Create** *(self, window, size)*



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Caret.html
        """

    @staticmethod
    def GetBlinkTime() -> int:
        """ 

*static* `GetBlinkTime`()[¶](#wx.Caret.GetBlinkTime "Permalink to this definition")
Returns the blink time which is measured in milliseconds and is the time elapsed between 2 inversions of the caret (blink time of the caret is the same for all carets, so this functions is static).



Return type
*int*






            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def GetPosition(self) -> None:
        """ 

`GetPosition`(*self*)[¶](#wx.Caret.GetPosition "Permalink to this definition")
Get the caret position (in pixels).




            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def GetSize(self) -> None:
        """ 

`GetSize`(*self*)[¶](#wx.Caret.GetSize "Permalink to this definition")
Get the caret size.




            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.Caret.GetWindow "Permalink to this definition")
Get the window the caret is associated with.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def Hide(self) -> None:
        """ 

`Hide`(*self*)[¶](#wx.Caret.Hide "Permalink to this definition")
Hides the caret, same as Show(false).




            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Caret.IsOk "Permalink to this definition")
Returns `True` if the caret was created successfully.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def IsVisible(self) -> bool:
        """ 

`IsVisible`(*self*)[¶](#wx.Caret.IsVisible "Permalink to this definition")
Returns `True` if the caret is visible and `False` if it is permanently hidden (if it is blinking and not shown currently but will be after the next blink, this method still returns `True`).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def Move(self, *args, **kw) -> None:
        """ 

`Move`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Caret.Move "Permalink to this definition")
Move the caret to given position (in logical coordinates).


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Move** *(self, x, y)*



Parameters
* **x** (*int*) –
* **y** (*int*) –






---

  



**Move** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.Caret.html
        """

    @staticmethod
    def SetBlinkTime(milliseconds: int) -> None:
        """ 

*static* `SetBlinkTime`(*milliseconds*)[¶](#wx.Caret.SetBlinkTime "Permalink to this definition")
Sets the blink time for all the carets.



Parameters
**milliseconds** (*int*) – 





Warning


Under Windows, this function will change the blink time for all carets permanently (until the next time it is called), even for carets in other applications.




See also


[`GetBlinkTime`](#wx.Caret.GetBlinkTime "wx.Caret.GetBlinkTime")





            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def SetSize(self, *args, **kw) -> None:
        """ 

`SetSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Caret.SetSize "Permalink to this definition")
Changes the size of the caret.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetSize** *(self, width, height)*



Parameters
* **width** (*int*) –
* **height** (*int*) –






---

  



**SetSize** *(self, size)*



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  





            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def Show(self, show: bool=True) -> None:
        """ 

`Show`(*self*, *show=True*)[¶](#wx.Caret.Show "Permalink to this definition")
Shows or hides the caret.


Notice that if the caret was hidden N times, it must be shown N times as well to reappear on the screen.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Caret.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Caret.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Caret.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Caret.html
        """

    Position: None  # `Position`[¶](#wx.Caret.Position "Permalink to this definition")See [`GetPosition`](#wx.Caret.GetPosition "wx.Caret.GetPosition")
    Size: None  # `Size`[¶](#wx.Caret.Size "Permalink to this definition")See [`GetSize`](#wx.Caret.GetSize "wx.Caret.GetSize") and [`SetSize`](#wx.Caret.SetSize "wx.Caret.SetSize")
    Window: '_Window'  # `Window`[¶](#wx.Caret.Window "Permalink to this definition")See [`GetWindow`](#wx.Caret.GetWindow "wx.Caret.GetWindow")



class CheckBox(Control):
    """ **Possible constructors**:



```
CheckBox()

CheckBox(parent, id=ID_ANY, label="", pos=DefaultPosition,
         size=DefaultSize, style=0, validator=DefaultValidator,
         name=CheckBoxNameStr)

```


A checkbox is a labelled box which by default is either on (checkmark
is visible) or off (no checkmark).


  


        Source: https://docs.wxpython.org/wx.CheckBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.CheckBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.



See also


[`Create`](#wx.CheckBox.Create "wx.CheckBox.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=CheckBoxNameStr)*


Constructor, creating and showing a checkbox.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Checkbox identifier. The value `wx.ID_ANY` indicates a default value.
* **label** (*string*) – Text to be displayed next to the checkbox.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Checkbox position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Checkbox size. If `wx.DefaultSize` is specified then a default size is chosen.
* **style** (*long*) – Window style. See  [wx.CheckBox](#wx-checkbox).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.CheckBox.Create "wx.CheckBox.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=CheckBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=CheckBoxNameStr*)[¶](#wx.CheckBox.Create "Permalink to this definition")
Creates the checkbox for two-step construction.


See  [wx.CheckBox](#wx-checkbox) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    def Get3StateValue(self) -> 'CheckBoxState':
        """ 

`Get3StateValue`(*self*)[¶](#wx.CheckBox.Get3StateValue "Permalink to this definition")
Gets the state of a 3-state checkbox.


Asserts when the function is used with a 2-state checkbox.



Return type
 [wx.CheckBoxState](wx.CheckBoxState.enumeration.html#wx-checkboxstate)






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.CheckBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    def GetValue(self) -> bool:
        """ 

`GetValue`(*self*)[¶](#wx.CheckBox.GetValue "Permalink to this definition")
Gets the state of a 2-state checkbox.



Return type
*bool*



Returns
Returns `True` if it is checked, `False` otherwise.






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    def Is3State(self) -> bool:
        """ 

`Is3State`(*self*)[¶](#wx.CheckBox.Is3State "Permalink to this definition")
Returns whether or not the checkbox is a 3-state checkbox.



Return type
*bool*



Returns
`True` if this checkbox is a 3-state checkbox, `False` if it’s a 2-state checkbox.






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    def Is3rdStateAllowedForUser(self) -> bool:
        """ 

`Is3rdStateAllowedForUser`(*self*)[¶](#wx.CheckBox.Is3rdStateAllowedForUser "Permalink to this definition")
Returns whether or not the user can set the checkbox to the third state.



Return type
*bool*



Returns
`True` if the user can set the third state of this checkbox, `False` if it can only be set programmatically or if it’s a 2-state checkbox.






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    def IsChecked(self) -> bool:
        """ 

`IsChecked`(*self*)[¶](#wx.CheckBox.IsChecked "Permalink to this definition")
This is just a maybe more readable synonym for [`GetValue`](#wx.CheckBox.GetValue "wx.CheckBox.GetValue") : just as the latter, it returns `True` if the checkbox is checked and `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    def Set3StateValue(self, state: CheckBoxState) -> None:
        """ 

`Set3StateValue`(*self*, *state*)[¶](#wx.CheckBox.Set3StateValue "Permalink to this definition")
Sets the checkbox to the given state.


This does not cause a `wxEVT_CHECKBOX` event to get emitted.


Asserts when the checkbox is a 2-state checkbox and setting the state to `wx.CHK_UNDETERMINED`.



Parameters
**state** ([*CheckBoxState*](wx.CheckBoxState.enumeration.html "CheckBoxState")) – 






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    def SetValue(self, state: bool) -> None:
        """ 

`SetValue`(*self*, *state*)[¶](#wx.CheckBox.SetValue "Permalink to this definition")
Sets the checkbox to the given state.


This does not cause a `wxEVT_CHECKBOX` event to get emitted.



Parameters
**state** (*bool*) – If `True`, the check is on, otherwise it is off.






            Source: https://docs.wxpython.org/wx.CheckBox.html
        """

    ThreeStateValue: Any  # `ThreeStateValue`[¶](#wx.CheckBox.ThreeStateValue "Permalink to this definition")See [`Get3StateValue`](#wx.CheckBox.Get3StateValue "wx.CheckBox.Get3StateValue") and [`Set3StateValue`](#wx.CheckBox.Set3StateValue "wx.CheckBox.Set3StateValue")
    Value: bool  # `Value`[¶](#wx.CheckBox.Value "Permalink to this definition")See [`GetValue`](#wx.CheckBox.GetValue "wx.CheckBox.GetValue") and [`SetValue`](#wx.CheckBox.SetValue "wx.CheckBox.SetValue")



CHK_2STATE: int  # Create a 2-state checkbox. This is the default.

CHK_3STATE: int  # Create a 3-state checkbox.

CHK_ALLOW_3RD_STATE_FOR_USER: int  # By default a user can’t set a 3-state checkbox to the third state. It can only be done from code. Using this flags allows the user to set the checkbox to the third state by clicking.

ALIGN_RIGHT: int  # Makes the text appear on the left of the checkbox. ^^

EVT_CHECKBOX: int  # Process a  wxEVT_CHECKBOX   event, when the checkbox is clicked. ^^

CHK_UNDETERMINED: int

class CheckListBox(ListBox):
    """ **Possible constructors**:



```
CheckListBox(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
             choices=[], style=0, validator=DefaultValidator, name="listBox")

CheckListBox()

```


A CheckListBox is like a ListBox, but allows items to be checked
or unchecked.


  


        Source: https://docs.wxpython.org/wx.CheckListBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.CheckListBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=”listBox”)*


Constructor, creating and showing a list box.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If DefaultSize is specified then the window is sized appropriately.
* **choices** (*list of strings*) – An array of strings with which to initialise the control.
* **style** (*long*) – Window style. See  [wx.CheckListBox](#wx-checklistbox).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.






---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  





            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    def Check(self, item, check=True) -> None:
        """ 

`Check`(*self*, *item*, *check=True*)[¶](#wx.CheckListBox.Check "Permalink to this definition")
Checks the given item.


Note that calling this method does not result in a `wxEVT_CHECKLISTBOX` event being emitted.



Parameters
* **item** (*int*) – Index of item to check.
* **check** (*bool*) – `True` if the item is to be checked, `False` otherwise.






            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ListBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *choices=[]*, *style=0*, *validator=DefaultValidator*, *name=ListBoxNameStr*)[¶](#wx.CheckListBox.Create "Permalink to this definition")

Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **choices** (*list of strings*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    def GetCheckedItems(self) -> None:
        """ 

`GetCheckedItems`(*self*)[¶](#wx.CheckListBox.GetCheckedItems "Permalink to this definition")
GetCheckedItems()


Return a sequence of integers corresponding to the checked items in
the control, based on [`IsChecked`](#wx.CheckListBox.IsChecked "wx.CheckListBox.IsChecked").




            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    def GetCheckedStrings(self) -> None:
        """ 

`GetCheckedStrings`(*self*)[¶](#wx.CheckListBox.GetCheckedStrings "Permalink to this definition")
GetCheckedStrings()


Return a tuple of strings corresponding to the checked
items of the control, based on `GetChecked`.




            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.CheckListBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    def GetSelections(self) -> int:
        """ 

`GetSelections`(*self*)[¶](#wx.CheckListBox.GetSelections "Permalink to this definition")
Returns a list of the indices of the currently selected items.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    def IsChecked(self, item: int) -> bool:
        """ 

`IsChecked`(*self*, *item*)[¶](#wx.CheckListBox.IsChecked "Permalink to this definition")
Returns `True` if the given item is checked, `False` otherwise.



Parameters
**item** (*int*) – Index of item whose check status is to be returned.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    def SetCheckedItems(self, indexes) -> None:
        """ 

`SetCheckedItems`(*self*, *indexes*)[¶](#wx.CheckListBox.SetCheckedItems "Permalink to this definition")
SetCheckedItems(indexes)


Sets the checked state of items if the index of the item is
found in the indexes sequence.




            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    def SetCheckedStrings(self, strings) -> None:
        """ 

`SetCheckedStrings`(*self*, *strings*)[¶](#wx.CheckListBox.SetCheckedStrings "Permalink to this definition")
SetCheckedStrings(strings)


Sets the checked state of items if the item’s string is found
in the strings sequence.




            Source: https://docs.wxpython.org/wx.CheckListBox.html
        """

    Checked: Any  # `Checked`[¶](#wx.CheckListBox.Checked "Permalink to this definition")See `GetChecked` and `SetChecked`
    CheckedItems: None  # `CheckedItems`[¶](#wx.CheckListBox.CheckedItems "Permalink to this definition")See [`GetCheckedItems`](#wx.CheckListBox.GetCheckedItems "wx.CheckListBox.GetCheckedItems") and [`SetCheckedItems`](#wx.CheckListBox.SetCheckedItems "wx.CheckListBox.SetCheckedItems")
    CheckedStrings: None  # `CheckedStrings`[¶](#wx.CheckListBox.CheckedStrings "Permalink to this definition")See [`GetCheckedStrings`](#wx.CheckListBox.GetCheckedStrings "wx.CheckListBox.GetCheckedStrings") and [`SetCheckedStrings`](#wx.CheckListBox.SetCheckedStrings "wx.CheckListBox.SetCheckedStrings")



EVT_CHECKLISTBOX: int  # Process a  wxEVT_CHECKLISTBOX   event, when an item in the check list box is checked or unchecked.  wx.CommandEvent.GetInt   will contain the index of the item that was checked or unchecked. wx.CommandEvent.IsChecked   is not valid! Use wx.CheckListBox.IsChecked   instead. ^^

class ListBox(Control,ItemContainer):
    """ **Possible constructors**:



```
ListBox()

ListBox(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
        choices=[], style=0, validator=DefaultValidator, name=ListBoxNameStr)

```


A listbox is used to select one or more of a list of strings.


  


        Source: https://docs.wxpython.org/wx.ListBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ListBoxNameStr)*


Constructor, creating and showing a list box.


See the other  [wx.ListBox](#wx-listbox) constructor; the only difference is that this overload takes a list of strings instead of a pointer to an array of *String* .




---

  





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ListBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *choices=[]*, *style=0*, *validator=DefaultValidator*, *name=ListBoxNameStr*)[¶](#wx.ListBox.Create "Permalink to this definition")
Creates the listbox for two-step construction.


See  [wx.ListBox](#wx-listbox) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **choices** (*list of strings*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def Deselect(self, n: int) -> None:
        """ 

`Deselect`(*self*, *n*)[¶](#wx.ListBox.Deselect "Permalink to this definition")
Deselects an item in the list box.



Parameters
**n** (*int*) – The zero-based item to deselect.





Note


This applies to multiple selection listboxes only.





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def EnsureVisible(self, n: int) -> None:
        """ 

`EnsureVisible`(*self*, *n*)[¶](#wx.ListBox.EnsureVisible "Permalink to this definition")
Ensure that the item with the given index is currently shown.


This method scrolls the listbox only if necessary and doesn’t do anything if this item is already shown, unlike [`SetFirstItem`](#wx.ListBox.SetFirstItem "wx.ListBox.SetFirstItem") .



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def FindString(self, string, caseSensitive=False) -> int:
        """ 

`FindString`(*self*, *string*, *caseSensitive=False*)[¶](#wx.ListBox.FindString "Permalink to this definition")
Finds an item whose label matches the given string.



Parameters
* **string** (*string*) – String to find.
* **caseSensitive** (*bool*) – Whether search is case sensitive (default is not).



Return type
*int*



Returns
The zero-based position of the item, or `wx.NOT_FOUND` if the string was not found.






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ListBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def GetCount(self) -> int:
        """ 

`GetCount`(*self*)[¶](#wx.ListBox.GetCount "Permalink to this definition")
Returns the number of items in the control.



Return type
*int*





See also


`IsEmpty`





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def GetCountPerPage(self) -> int:
        """ 

`GetCountPerPage`(*self*)[¶](#wx.ListBox.GetCountPerPage "Permalink to this definition")
Return the number of items that can fit vertically in the visible area of the listbox.


Returns -1 if the number of items per page couldn’t be determined. On wxGTK this method can only determine the number of items per page if there is at least one item in the listbox.



Return type
*int*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.ListBox.GetSelection "Permalink to this definition")
Returns the index of the selected item or `NOT_FOUND` if no item is selected.



Return type
*int*



Returns
The position of the current selection.





Note


This method can be used with single selection list boxes only, you must use [`wx.ListBox.GetSelections`](#wx.ListBox.GetSelections "wx.ListBox.GetSelections") for the list boxes with `wx.LB_MULTIPLE` style.




See also


[`SetSelection`](#wx.ListBox.SetSelection "wx.ListBox.SetSelection") , `GetStringSelection`





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def GetSelections(self) -> list[int]:
        """ 

`GetSelections`(*self*)[¶](#wx.ListBox.GetSelections "Permalink to this definition")
Fill an array of ints with the positions of the currently selected items.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def GetString(self, n: int) -> str:
        """ 

`GetString`(*self*, *n*)[¶](#wx.ListBox.GetString "Permalink to this definition")
Returns the label of the item with the given index.


The index must be valid, i.e. less than the value returned by [`GetCount`](#wx.ListBox.GetCount "wx.ListBox.GetCount") , otherwise an assert is triggered. Notably, this function can’t be called if the control is empty.



Parameters
**n** (*int*) – The zero-based index.



Return type
`string`



Returns
The label of the item.






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def GetTopItem(self) -> int:
        """ 

`GetTopItem`(*self*)[¶](#wx.ListBox.GetTopItem "Permalink to this definition")
Return the index of the topmost visible item.


Returns `NOT_FOUND` if the method is not implemented for the current platform.



Return type
*int*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def HitTest(self, *args, **kw) -> int:
        """ 

`HitTest`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListBox.HitTest "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**HitTest** *(self, point)*


Returns the item located at *point*, or `NOT_FOUND` if there is no item located at *point*.


It is currently implemented for wxMSW, Mac and wxGTK2 ports.



Parameters
**point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Point of item (in client coordinates) to obtain



Return type
*int*



Returns
Item located at point, or `wx.NOT_FOUND` if unimplemented or the item does not exist.





New in version 2.7.0.





---

  



**HitTest** *(self, x, y)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def InsertItems(self, items, pos) -> None:
        """ 

`InsertItems`(*self*, *items*, *pos*)[¶](#wx.ListBox.InsertItems "Permalink to this definition")
Insert the given number of strings before the specified position.



Parameters
* **items** (*list of strings*) – Labels of items to be inserted
* **pos** (*int*) – Position before which to insert the items: if pos is `0` the items will be inserted in the beginning of the listbox






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def IsSelected(self, n: int) -> bool:
        """ 

`IsSelected`(*self*, *n*)[¶](#wx.ListBox.IsSelected "Permalink to this definition")
Determines whether an item is selected.



Parameters
**n** (*int*) – The zero-based item index.



Return type
*bool*



Returns
`True` if the given item is selected, `False` otherwise.






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def IsSorted(self) -> bool:
        """ 

`IsSorted`(*self*)[¶](#wx.ListBox.IsSorted "Permalink to this definition")
Return `True` if the listbox has `LB_SORT` style.


This method is mostly meant for internal use only.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def MSWSetTabStops(self, tabStops) -> None:
        """ 

`MSWSetTabStops`(*self*, *tabStops*)[¶](#wx.ListBox.MSWSetTabStops "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def SetFirstItem(self, *args, **kw) -> None:
        """ 

`SetFirstItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListBox.SetFirstItem "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetFirstItem** *(self, n)*


Set the specified item to be the first visible item.



Parameters
**n** (*int*) – The zero-based item index that should be visible.






---

  



**SetFirstItem** *(self, string)*


Set the specified item to be the first visible item.



Parameters
**string** (*string*) – The string that should be visible.






---

  





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def SetItemBackgroundColour(self, item, c) -> None:
        """ 

`SetItemBackgroundColour`(*self*, *item*, *c*)[¶](#wx.ListBox.SetItemBackgroundColour "Permalink to this definition")
Set the background colour of an item in the ListBox.
Only valid on MSW and if the `wx.LB_OWNERDRAW` flag is set.




            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def SetItemFont(self, item, f) -> None:
        """ 

`SetItemFont`(*self*, *item*, *f*)[¶](#wx.ListBox.SetItemFont "Permalink to this definition")
Set the font of an item in the ListBox.
Only valid on MSW and if the `wx.LB_OWNERDRAW` flag is set.




            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def SetItemForegroundColour(self, item, c) -> None:
        """ 

`SetItemForegroundColour`(*self*, *item*, *c*)[¶](#wx.ListBox.SetItemForegroundColour "Permalink to this definition")
Set the foreground colour of an item in the ListBox.
Only valid on MSW and if the `wx.LB_OWNERDRAW` flag is set.




            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def SetSelection(self, n: int) -> None:
        """ 

`SetSelection`(*self*, *n*)[¶](#wx.ListBox.SetSelection "Permalink to this definition")
Sets the selection to the given item *n* or removes the selection entirely if *n* == `NOT_FOUND` .


Note that this does not cause any command events to be emitted nor does it deselect any other items in the controls which support multiple selections.



Parameters
**n** (*int*) – The string position to select, starting from zero.





See also


[`SetString`](#wx.ListBox.SetString "wx.ListBox.SetString") , [`SetStringSelection`](#wx.ListBox.SetStringSelection "wx.ListBox.SetStringSelection")





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def SetString(self, n, string) -> None:
        """ 

`SetString`(*self*, *n*, *string*)[¶](#wx.ListBox.SetString "Permalink to this definition")
Sets the label for the given item.



Parameters
* **n** (*int*) – The zero-based item index.
* **string** (*string*) – The label to set.






            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    def SetStringSelection(self, *args, **kw) -> bool:
        """ 

`SetStringSelection`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListBox.SetStringSelection "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetStringSelection** *(self, s, select)*



Parameters
* **s** (*string*) –
* **select** (*bool*) –



Return type
*bool*






---

  



**SetStringSelection** *(self, s)*



Parameters
**s** (*string*) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.ListBox.html
        """

    Count: int  # `Count`[¶](#wx.ListBox.Count "Permalink to this definition")See [`GetCount`](#wx.ListBox.GetCount "wx.ListBox.GetCount")
    CountPerPage: int  # `CountPerPage`[¶](#wx.ListBox.CountPerPage "Permalink to this definition")See [`GetCountPerPage`](#wx.ListBox.GetCountPerPage "wx.ListBox.GetCountPerPage")
    Selection: int  # `Selection`[¶](#wx.ListBox.Selection "Permalink to this definition")See [`GetSelection`](#wx.ListBox.GetSelection "wx.ListBox.GetSelection") and [`SetSelection`](#wx.ListBox.SetSelection "wx.ListBox.SetSelection")
    Selections: int  # `Selections`[¶](#wx.ListBox.Selections "Permalink to this definition")See [`GetSelections`](#wx.ListBox.GetSelections "wx.ListBox.GetSelections")
    TopItem: int  # `TopItem`[¶](#wx.ListBox.TopItem "Permalink to this definition")See [`GetTopItem`](#wx.ListBox.GetTopItem "wx.ListBox.GetTopItem")



LB_SINGLE: int  # Single-selection list.

LB_MULTIPLE: int  # Multiple-selection list: the user can toggle multiple items on and off. This is the same as wx.LB_EXTENDED in wxGTK2 port.

LB_EXTENDED: int  # Extended-selection list: the user can extend the selection by using  SHIFT   or   CTRL   keys together with the cursor movement keys or the mouse.

LB_HSCROLL: int  # Create horizontal scrollbar if contents are too wide (Windows only).

LB_ALWAYS_SB: int  # Always show a vertical scrollbar.

LB_NEEDED_SB: int  # Only create a vertical scrollbar if needed.

LB_NO_SB: int  # Don’t create vertical scrollbar (wxMSW and wxGTK only).

LB_SORT: int  # The listbox contents are sorted in alphabetical order. ^^

EVT_LISTBOX: int  # Process a  wxEVT_LISTBOX   event, when an item on the list is selected or the selection changes.

EVT_LISTBOX_DCLICK: int  # Process a  wxEVT_LISTBOX_DCLICK   event, when the listbox is double-clicked. On some platforms (notably wxGTK2) pressing the enter key is handled as an equivalent of a double-click. ^^

NOT_FOUND: int

LB_OWNERDRAW: int

class ChildFocusEvent(CommandEvent):
    """ **Possible constructors**:



```
ChildFocusEvent(win=None)

```


A child focus event is sent to a (parent-)window when one of its child
windows gains focus, so that the window could restore the focus back
to its corresponding child if it loses it now and regains later.


  


        Source: https://docs.wxpython.org/wx.ChildFocusEvent.html
    """
    def __init__(self, win: Optional['Window']=None) -> None:
        """ 

`__init__`(*self*, *win=None*)[¶](#wx.ChildFocusEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The direct child which is (or which contains the window which is) receiving the focus.






            Source: https://docs.wxpython.org/wx.ChildFocusEvent.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.ChildFocusEvent.GetWindow "Permalink to this definition")
Returns the direct child which receives the focus, or a (grand-)parent of the control receiving the focus.


To get the actually focused control use [`wx.Window.FindFocus`](wx.Window.html#wx.Window.FindFocus "wx.Window.FindFocus") .



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.ChildFocusEvent.html
        """

    Window: '_Window'  # `Window`[¶](#wx.ChildFocusEvent.Window "Permalink to this definition")See [`GetWindow`](#wx.ChildFocusEvent.GetWindow "wx.ChildFocusEvent.GetWindow")



EVT_CHILD_FOCUS: int  # Process a  wxEVT_CHILD_FOCUS   event. ^^

class Choice(Control,ItemContainer):
    """ **Possible constructors**:



```
Choice()

Choice(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
       choices=[], style=0, validator=DefaultValidator, name=ChoiceNameStr)

```


A choice item is used to select one of a list of strings.


  


        Source: https://docs.wxpython.org/wx.Choice.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Choice.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.



See also


[`Create`](#wx.Choice.Create "wx.Choice.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ChoiceNameStr)*


Constructor, creating and showing a choice.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If DefaultSize is specified then the choice is sized appropriately.
* **choices** (*list of strings*) – An array of strings with which to initialise the choice control.
* **style** (*long*) – Window style. See  [wx.Choice](#wx-choice).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.






---

  





            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ChoiceNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *choices=[]*, *style=0*, *validator=DefaultValidator*, *name=ChoiceNameStr*)[¶](#wx.Choice.Create "Permalink to this definition")
Creates the choice for two-step construction.


See  [wx.Choice](#wx-choice).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **choices** (*list of strings*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def FindString(self, string, caseSensitive=False) -> int:
        """ 

`FindString`(*self*, *string*, *caseSensitive=False*)[¶](#wx.Choice.FindString "Permalink to this definition")
Finds an item whose label matches the given string.



Parameters
* **string** (*string*) – String to find.
* **caseSensitive** (*bool*) – Whether search is case sensitive (default is not).



Return type
*int*



Returns
The zero-based position of the item, or `wx.NOT_FOUND` if the string was not found.






            Source: https://docs.wxpython.org/wx.Choice.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Choice.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def GetColumns(self) -> int:
        """ 

`GetColumns`(*self*)[¶](#wx.Choice.GetColumns "Permalink to this definition")
Gets the number of columns in this choice item.



Return type
*int*





Note


This is implemented for GTK and Motif only and always returns 1 for the other platforms.





            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def GetCount(self) -> int:
        """ 

`GetCount`(*self*)[¶](#wx.Choice.GetCount "Permalink to this definition")
Returns the number of items in the control.



Return type
*int*





See also


`IsEmpty`





            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def GetCurrentSelection(self) -> int:
        """ 

`GetCurrentSelection`(*self*)[¶](#wx.Choice.GetCurrentSelection "Permalink to this definition")
Unlike `wx.ControlWithItems.GetSelection` which only returns the accepted selection value (the selection in the control once the user closes the dropdown list), this function returns the current selection.


That is, while the dropdown list is shown, it returns the currently selected item in it. When it is not shown, its result is the same as for the other function.



Return type
*int*





New in version 2.6.2.: In older versions, `wx.ControlWithItems.GetSelection` itself behaved like this.





            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.Choice.GetSelection "Permalink to this definition")
Returns the index of the selected item or `NOT_FOUND` if no item is selected.



Return type
*int*



Returns
The position of the current selection.





See also


[`SetSelection`](#wx.Choice.SetSelection "wx.Choice.SetSelection") , `GetStringSelection`





            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def GetString(self, n: int) -> str:
        """ 

`GetString`(*self*, *n*)[¶](#wx.Choice.GetString "Permalink to this definition")
Returns the label of the item with the given index.


The index must be valid, i.e. less than the value returned by [`GetCount`](#wx.Choice.GetCount "wx.Choice.GetCount") , otherwise an assert is triggered. Notably, this function can’t be called if the control is empty.



Parameters
**n** (*int*) – The zero-based index.



Return type
`string`



Returns
The label of the item.






            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def IsSorted(self) -> bool:
        """ 

`IsSorted`(*self*)[¶](#wx.Choice.IsSorted "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def SetColumns(self, n: int=1) -> None:
        """ 

`SetColumns`(*self*, *n=1*)[¶](#wx.Choice.SetColumns "Permalink to this definition")
Sets the number of columns in this choice item.



Parameters
**n** (*int*) – Number of columns.





Note


This is implemented for GTK and Motif only and doesn’t do anything under other platforms.





            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def SetSelection(self, n: int) -> None:
        """ 

`SetSelection`(*self*, *n*)[¶](#wx.Choice.SetSelection "Permalink to this definition")
Sets the selection to the given item *n* or removes the selection entirely if *n* == `NOT_FOUND` .


Note that this does not cause any command events to be emitted nor does it deselect any other items in the controls which support multiple selections.



Parameters
**n** (*int*) – The string position to select, starting from zero.





See also


[`SetString`](#wx.Choice.SetString "wx.Choice.SetString") , `SetStringSelection`





            Source: https://docs.wxpython.org/wx.Choice.html
        """

    def SetString(self, n, string) -> None:
        """ 

`SetString`(*self*, *n*, *string*)[¶](#wx.Choice.SetString "Permalink to this definition")
Sets the label for the given item.



Parameters
* **n** (*int*) – The zero-based item index.
* **string** (*string*) – The label to set.






            Source: https://docs.wxpython.org/wx.Choice.html
        """

    Columns: int  # `Columns`[¶](#wx.Choice.Columns "Permalink to this definition")See [`GetColumns`](#wx.Choice.GetColumns "wx.Choice.GetColumns") and [`SetColumns`](#wx.Choice.SetColumns "wx.Choice.SetColumns")
    Count: int  # `Count`[¶](#wx.Choice.Count "Permalink to this definition")See [`GetCount`](#wx.Choice.GetCount "wx.Choice.GetCount")
    CurrentSelection: int  # `CurrentSelection`[¶](#wx.Choice.CurrentSelection "Permalink to this definition")See [`GetCurrentSelection`](#wx.Choice.GetCurrentSelection "wx.Choice.GetCurrentSelection")
    Selection: int  # `Selection`[¶](#wx.Choice.Selection "Permalink to this definition")See [`GetSelection`](#wx.Choice.GetSelection "wx.Choice.GetSelection") and [`SetSelection`](#wx.Choice.SetSelection "wx.Choice.SetSelection")



CB_SORT: int  # Sorts the entries alphabetically. ^^

EVT_CHOICE: int  # Process a  wxEVT_CHOICE   event, when an item on the list is selected. ^^

class ClassInfo:
    """ This class stores meta-information about classes.


  


        Source: https://docs.wxpython.org/wx.ClassInfo.html
    """
    def CreateObject(self) -> 'Window':
        """ 

`CreateObject`(*self*)[¶](#wx.ClassInfo.CreateObject "Permalink to this definition")
Creates an object of the appropriate kind.



Return type
 [wx.Object](wx.Object.html#wx-object)



Returns
`None` if the class has not been declared dynamically creatable (typically, this happens for abstract classes).






            Source: https://docs.wxpython.org/wx.ClassInfo.html
        """

    @staticmethod
    def FindClass(className: str) -> 'ClassInfo':
        """ 

*static* `FindClass`(*className*)[¶](#wx.ClassInfo.FindClass "Permalink to this definition")
Finds the  [wx.ClassInfo](#wx-classinfo) object for a class with the given *name*.



Parameters
**className** (*string*) – 



Return type
 [wx.ClassInfo](#wx-classinfo)






            Source: https://docs.wxpython.org/wx.ClassInfo.html
        """

    def GetBaseClassName1(self) -> 'Char':
        """ 

`GetBaseClassName1`(*self*)[¶](#wx.ClassInfo.GetBaseClassName1 "Permalink to this definition")
Returns the name of the first base class (`None` if none).



Return type
*wx.Char*






            Source: https://docs.wxpython.org/wx.ClassInfo.html
        """

    def GetBaseClassName2(self) -> 'Char':
        """ 

`GetBaseClassName2`(*self*)[¶](#wx.ClassInfo.GetBaseClassName2 "Permalink to this definition")
Returns the name of the second base class (`None` if none).



Return type
*wx.Char*






            Source: https://docs.wxpython.org/wx.ClassInfo.html
        """

    def GetClassName(self) -> 'Char':
        """ 

`GetClassName`(*self*)[¶](#wx.ClassInfo.GetClassName "Permalink to this definition")
Returns the string form of the class name.



Return type
*wx.Char*






            Source: https://docs.wxpython.org/wx.ClassInfo.html
        """

    def GetSize(self) -> int:
        """ 

`GetSize`(*self*)[¶](#wx.ClassInfo.GetSize "Permalink to this definition")
Returns the size of the class.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ClassInfo.html
        """

    def IsDynamic(self) -> bool:
        """ 

`IsDynamic`(*self*)[¶](#wx.ClassInfo.IsDynamic "Permalink to this definition")
Returns `True` if this class info can create objects of the associated class.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ClassInfo.html
        """

    def IsKindOf(self, info: 'ClassInfo') -> bool:
        """ 

`IsKindOf`(*self*, *info*)[¶](#wx.ClassInfo.IsKindOf "Permalink to this definition")
Returns `True` if this class is a kind of (inherits from) the given class.



Parameters
**info** ([*wx.ClassInfo*](#wx.ClassInfo "wx.ClassInfo")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ClassInfo.html
        """

    BaseClassName1: 'Char'  # `BaseClassName1`[¶](#wx.ClassInfo.BaseClassName1 "Permalink to this definition")See [`GetBaseClassName1`](#wx.ClassInfo.GetBaseClassName1 "wx.ClassInfo.GetBaseClassName1")
    BaseClassName2: 'Char'  # `BaseClassName2`[¶](#wx.ClassInfo.BaseClassName2 "Permalink to this definition")See [`GetBaseClassName2`](#wx.ClassInfo.GetBaseClassName2 "wx.ClassInfo.GetBaseClassName2")
    ClassName: 'Char'  # `ClassName`[¶](#wx.ClassInfo.ClassName "Permalink to this definition")See [`GetClassName`](#wx.ClassInfo.GetClassName "wx.ClassInfo.GetClassName")
    Size: int  # `Size`[¶](#wx.ClassInfo.Size "Permalink to this definition")See [`GetSize`](#wx.ClassInfo.GetSize "wx.ClassInfo.GetSize")



_ClientData: TypeAlias = ClientData

class ClientDataContainer:
    """ **Possible constructors**:



```
ClientDataContainer()

```


This class is a mixin that provides storage and management of “client
data”.


  


        Source: https://docs.wxpython.org/wx.ClientDataContainer.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ClientDataContainer.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.ClientDataContainer.html
        """

    def GetClientData(self) -> 'ClientData':
        """ 

`GetClientData`(*self*)[¶](#wx.ClientDataContainer.GetClientData "Permalink to this definition")
Get a pointer to the client data object.



Return type
[`ClientData`](#wx.ClientDataContainer.ClientData "wx.ClientDataContainer.ClientData")






            Source: https://docs.wxpython.org/wx.ClientDataContainer.html
        """

    def GetClientObject(self) -> None:
        """ 

`GetClientObject`(*self*)[¶](#wx.ClientDataContainer.GetClientObject "Permalink to this definition")
Alias for [`GetClientData`](#wx.ClientDataContainer.GetClientData "wx.ClientDataContainer.GetClientData")




            Source: https://docs.wxpython.org/wx.ClientDataContainer.html
        """

    def SetClientData(self, data: ClientData) -> None:
        """ 

`SetClientData`(*self*, *data*)[¶](#wx.ClientDataContainer.SetClientData "Permalink to this definition")
Set the client data object.


Any previous object will be deleted.



Parameters
**data** (*ClientData*) – 






            Source: https://docs.wxpython.org/wx.ClientDataContainer.html
        """

    def SetClientObject(self, data) -> None:
        """ 

`SetClientObject`(*self*, *data*)[¶](#wx.ClientDataContainer.SetClientObject "Permalink to this definition")
Alias for [`SetClientData`](#wx.ClientDataContainer.SetClientData "wx.ClientDataContainer.SetClientData")




            Source: https://docs.wxpython.org/wx.ClientDataContainer.html
        """

    ClientData: '_ClientData'  # `ClientData`[¶](#wx.ClientDataContainer.ClientData "Permalink to this definition")See [`GetClientData`](#wx.ClientDataContainer.GetClientData "wx.ClientDataContainer.GetClientData") and [`SetClientData`](#wx.ClientDataContainer.SetClientData "wx.ClientDataContainer.SetClientData")



class ClientDC(WindowDC):
    """ **Possible constructors**:



```
ClientDC(window)

```


ClientDC is primarily useful for obtaining information about the
window from outside EVT\_PAINT() handler.


  


        Source: https://docs.wxpython.org/wx.ClientDC.html
    """
    def __init__(self, window: 'Window') -> None:
        """ 

`__init__`(*self*, *window*)[¶](#wx.ClientDC.__init__ "Permalink to this definition")
Constructor.


Pass a pointer to the window on which you wish to paint.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.ClientDC.html
        """

    def SetClippingRect(self, rect: 'Rect') -> None:
        """ 
        """



class Clipboard(Object):
    """ **Possible constructors**:



```
Clipboard()

```


A class for manipulating the clipboard.


  


        Source: https://docs.wxpython.org/wx.Clipboard.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.Clipboard.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def AddData(self, data: 'DataObject') -> bool:
        """ 

`AddData`(*self*, *data*)[¶](#wx.Clipboard.AddData "Permalink to this definition")
Call this function to add the data object to the clipboard.


This is an obsolete synonym for [`SetData`](#wx.Clipboard.SetData "wx.Clipboard.SetData") .



Parameters
**data** ([*wx.DataObject*](wx.DataObject.html#wx.DataObject "wx.DataObject")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.Clipboard.Clear "Permalink to this definition")
Clears the global clipboard object and the system’s clipboard if possible.




            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def Close(self) -> None:
        """ 

`Close`(*self*)[¶](#wx.Clipboard.Close "Permalink to this definition")
Call this function to close the clipboard, having opened it with [`Open`](#wx.Clipboard.Open "wx.Clipboard.Open") .




            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def Flush(self) -> bool:
        """ 

`Flush`(*self*)[¶](#wx.Clipboard.Flush "Permalink to this definition")
Flushes the clipboard: this means that the data which is currently on clipboard will stay available even after the application exits (possibly eating memory), otherwise the clipboard will be emptied on exit.


Currently this method is implemented in MSW and GTK and always returns `False` otherwise.



Return type
*bool*



Returns
`False` if the operation is unsuccessful for any reason.





Note


On GTK, only the non-primary selection can be flushed. Calling this function when the clipboard is using the primary selection will return `False` and not make any data available after the program exits.





            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    @staticmethod
    def Get() -> 'Clipboard':
        """ 

*static* `Get`()[¶](#wx.Clipboard.Get "Permalink to this definition")
Returns the global instance (wxTheClipboard) of the clipboard object.



Return type
 [wx.Clipboard](#wx-clipboard)






            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def GetData(self, data: 'DataObject') -> bool:
        """ 

`GetData`(*self*, *data*)[¶](#wx.Clipboard.GetData "Permalink to this definition")
Call this function to fill *data* with data on the clipboard, if available in the required format.


Returns `True` on success.



Parameters
**data** ([*wx.DataObject*](wx.DataObject.html#wx.DataObject "wx.DataObject")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def IsOpened(self) -> bool:
        """ 

`IsOpened`(*self*)[¶](#wx.Clipboard.IsOpened "Permalink to this definition")
Returns `True` if the clipboard has been opened.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def IsSupported(self, format: 'DataFormat') -> bool:
        """ 

`IsSupported`(*self*, *format*)[¶](#wx.Clipboard.IsSupported "Permalink to this definition")
Returns `True` if there is data which matches the data format of the given data object currently **available** on the clipboard.



Parameters
**format** ([*wx.DataFormat*](wx.DataFormat.html#wx.DataFormat "wx.DataFormat")) – 



Return type
*bool*





Todo


The name of this function is misleading. This should be renamed to something that more accurately indicates what it does.





            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def IsUsingPrimarySelection(self) -> bool:
        """ 

`IsUsingPrimarySelection`(*self*)[¶](#wx.Clipboard.IsUsingPrimarySelection "Permalink to this definition")
Returns `True` if we are using the primary selection, `False` if clipboard one.



Return type
*bool*





See also


[`UsePrimarySelection`](#wx.Clipboard.UsePrimarySelection "wx.Clipboard.UsePrimarySelection")





            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def Open(self) -> bool:
        """ 

`Open`(*self*)[¶](#wx.Clipboard.Open "Permalink to this definition")
Call this function to open the clipboard before calling [`SetData`](#wx.Clipboard.SetData "wx.Clipboard.SetData") and [`GetData`](#wx.Clipboard.GetData "wx.Clipboard.GetData") .


Call [`Close`](#wx.Clipboard.Close "wx.Clipboard.Close") when you have finished with the clipboard. You should keep the clipboard open for only a very short time.



Return type
*bool*



Returns
`True` on success. This should be tested (as in the sample shown above).






            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def SetData(self, data: 'DataObject') -> bool:
        """ 

`SetData`(*self*, *data*)[¶](#wx.Clipboard.SetData "Permalink to this definition")
Call this function to set the data object to the clipboard.


The new data object replaces any previously set one, so if the application wants to provide clipboard data in several different formats, it must use a composite data object supporting all of the formats instead of calling this function several times with different data objects as this would only leave data from the last one in the clipboard.


After this function has been called, the clipboard owns the data, so do not delete the data explicitly.



Parameters
**data** ([*wx.DataObject*](wx.DataObject.html#wx.DataObject "wx.DataObject")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Clipboard.html
        """

    def UsePrimarySelection(self, primary: bool=False) -> None:
        """ 

`UsePrimarySelection`(*self*, *primary=False*)[¶](#wx.Clipboard.UsePrimarySelection "Permalink to this definition")
On platforms supporting it (all X11-based ports),  [wx.Clipboard](#wx-clipboard) uses the `CLIPBOARD` X11 selection by default.


When this function is called with `True`, all subsequent clipboard operations will use `PRIMARY` selection until this function is called again with `False`.


On the other platforms, there is no `PRIMARY` selection and so all clipboard operations will fail. This allows implementing the standard X11 handling of the clipboard which consists in copying data to the `CLIPBOARD` selection only when the user explicitly requests it (i.e. by selecting the “Copy” menu command) but putting the currently selected text into the `PRIMARY` selection automatically, without overwriting the normal clipboard contents with the currently selected text on the other platforms.



Parameters
**primary** (*bool*) – 






            Source: https://docs.wxpython.org/wx.Clipboard.html
        """



class ClipboardTextEvent(CommandEvent):
    """ **Possible constructors**:



```
ClipboardTextEvent(commandType=wxEVT_NULL, id=0)

```


This class represents the events generated by a control (typically a
TextCtrl but other windows can generate these events as well) when
its content gets copied or cut to, or pasted from the clipboard.


  


        Source: https://docs.wxpython.org/wx.ClipboardTextEvent.html
    """
    def __init__(self, commandType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *commandType=wxEVT\_NULL*, *id=0*)[¶](#wx.ClipboardTextEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **commandType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.ClipboardTextEvent.html
        """



EVT_TEXT_COPY: int  # Some or all of the controls content was copied to the clipboard.

EVT_TEXT_CUT: int  # Some or all of the controls content was cut (i.e. copied and deleted).

EVT_TEXT_PASTE: int  # Clipboard content was pasted into the control. ^^

COPY: int

CB_READONLY: int

class TextCtrl(Control,TextEntry):
    """ **Possible constructors**:



```
TextCtrl()

TextCtrl(parent, id=ID_ANY, value="", pos=DefaultPosition,
         size=DefaultSize, style=0, validator=DefaultValidator,
         name=TextCtrlNameStr)

```


A text control allows text to be displayed and edited.


  


        Source: https://docs.wxpython.org/wx.TextCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TextCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, value=””, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=TextCtrlNameStr)*


Constructor, creating and showing a text control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Should not be `None`.
* **id** (*wx.WindowID*) – Control identifier. A value of -1 denotes a default value.
* **value** (*string*) – Default text value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Text control position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Text control size.
* **style** (*long*) – Window style. See  [wx.TextCtrl](#wx-textctrl).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





Note


The horizontal scrollbar (wx``wx.HSCROLL`` style flag) will only be created for multi-line text controls. Without a horizontal scrollbar, text lines that don’t fit in the control’s size will be wrapped (but no newline character is inserted). Single line controls don’t have a horizontal scrollbar, the text is automatically scrolled so that the insertion point is always visible.




See also


[`Create`](#wx.TextCtrl.Create "wx.TextCtrl.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def Create(self, parent, id=ID_ANY, value="", pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=TextCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *value=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=TextCtrlNameStr*)[¶](#wx.TextCtrl.Create "Permalink to this definition")
Creates the text control for two-step construction.


This method should be called if the default constructor was used for the control creation. Its parameters have the same meaning as for the non-default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **value** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def DiscardEdits(self) -> None:
        """ 

`DiscardEdits`(*self*)[¶](#wx.TextCtrl.DiscardEdits "Permalink to this definition")
Resets the internal modified flag as if the current changes had been saved.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def EmptyUndoBuffer(self) -> None:
        """ 

`EmptyUndoBuffer`(*self*)[¶](#wx.TextCtrl.EmptyUndoBuffer "Permalink to this definition")
Delete the undo history.


Currently only implemented in wxMSW (for controls using `wx.TE_RICH2` style only) and wxOSX (for multiline text controls only), does nothing in the other ports or for the controls not using the appropriate styles.



New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def EmulateKeyPress(self, event: 'KeyEvent') -> bool:
        """ 

`EmulateKeyPress`(*self*, *event*)[¶](#wx.TextCtrl.EmulateKeyPress "Permalink to this definition")
This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control.


The *event* object should be the same as the one passed to `EVT_KEY_DOWN` handler previously by wxWidgets. Please note that this function doesn’t currently work correctly for all keys under any platform but MSW.



Parameters
**event** ([*wx.KeyEvent*](wx.KeyEvent.html#wx.KeyEvent "wx.KeyEvent")) – 



Return type
*bool*



Returns
`True` if the event resulted in a change to the control, `False` otherwise.






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.TextCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def GetDefaultStyle(self) -> 'TextAttr':
        """ 

`GetDefaultStyle`(*self*)[¶](#wx.TextCtrl.GetDefaultStyle "Permalink to this definition")
Returns the style currently used for the new text.



Return type
 [wx.TextAttr](wx.TextAttr.html#wx-textattr)





See also


[`SetDefaultStyle`](#wx.TextCtrl.SetDefaultStyle "wx.TextCtrl.SetDefaultStyle")





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def GetLineLength(self, lineNo: int) -> int:
        """ 

`GetLineLength`(*self*, *lineNo*)[¶](#wx.TextCtrl.GetLineLength "Permalink to this definition")
Gets the length of the specified line, not including any trailing newline character(s).



Parameters
**lineNo** (*long*) – Line number (starting from zero).



Return type
*int*



Returns
The length of the line, or -1 if *lineNo* was invalid.






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def GetLineText(self, lineNo: int) -> str:
        """ 

`GetLineText`(*self*, *lineNo*)[¶](#wx.TextCtrl.GetLineText "Permalink to this definition")
Returns the contents of a given line in the text control, not including any trailing newline character(s).



Parameters
**lineNo** (*long*) – The line number, starting from zero.



Return type
`string`



Returns
The contents of the line.






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def GetNumberOfLines(self) -> int:
        """ 

`GetNumberOfLines`(*self*)[¶](#wx.TextCtrl.GetNumberOfLines "Permalink to this definition")
Returns the number of lines in the text control buffer.


The returned number is the number of logical lines, i.e. just the count of the number of newline characters in the control + 1, for wxGTK and OSX/Cocoa ports while it is the number of physical lines, i.e. the count of lines actually shown in the control, in wxMSW. Because of this discrepancy, it is not recommended to use this function.



Return type
*int*





Note


Note that even empty text controls have one line (where the insertion point is), so [`GetNumberOfLines`](#wx.TextCtrl.GetNumberOfLines "wx.TextCtrl.GetNumberOfLines") never returns 0.





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def GetStyle(self, position, style) -> bool:
        """ 

`GetStyle`(*self*, *position*, *style*)[¶](#wx.TextCtrl.GetStyle "Permalink to this definition")
Returns the style at this position in the text control.


Not all platforms support this function.



Parameters
* **position** (*long*) –
* **style** ([*wx.TextAttr*](wx.TextAttr.html#wx.TextAttr "wx.TextAttr")) –



Return type
*bool*



Returns
`True` on success, `False` if an error occurred (this may also mean that the styles are not supported under this platform).





See also


[`SetStyle`](#wx.TextCtrl.SetStyle "wx.TextCtrl.SetStyle") ,  [wx.TextAttr](wx.TextAttr.html#wx-textattr)





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def HideNativeCaret(self) -> bool:
        """ 

`HideNativeCaret`(*self*)[¶](#wx.TextCtrl.HideNativeCaret "Permalink to this definition")

> Turn off the widget’s native caret on Windows.
> Ignored on other platforms.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def HitTestPos(self, pt) -> None:
        """ 

`HitTestPos`(*self*, *pt*)[¶](#wx.TextCtrl.HitTestPos "Permalink to this definition")
Finds the position of the character at the specified point.


If the return code is not `TE_HT_UNKNOWN` the position of the character closest to this position is returned, otherwise the output parameter is not modified.


Please note that this function is currently only implemented in Univ, wxMSW and wxGTK ports and always returns `TE_HT_UNKNOWN` in the other ports.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def HitTest(self, pt) -> None:
        """ 

`HitTest`(*self*, *pt*)[¶](#wx.TextCtrl.HitTest "Permalink to this definition")
Finds the row and column of the character at the specified point.


If the return code is not `TE_HT_UNKNOWN` the row and column of the character closest to this position are returned, otherwise the output parameters are not modified.


Please note that this function is currently only implemented in Univ, wxMSW and wxGTK ports and always returns `TE_HT_UNKNOWN` in the other ports.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def IsModified(self) -> bool:
        """ 

`IsModified`(*self*)[¶](#wx.TextCtrl.IsModified "Permalink to this definition")
Returns `True` if the text has been modified by user.


Note that calling [`SetValue`](wx.TextEntry.html#wx.TextEntry.SetValue "wx.TextEntry.SetValue") doesn’t make the control modified.



Return type
*bool*





See also


[`MarkDirty`](#wx.TextCtrl.MarkDirty "wx.TextCtrl.MarkDirty")





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def IsMultiLine(self) -> bool:
        """ 

`IsMultiLine`(*self*)[¶](#wx.TextCtrl.IsMultiLine "Permalink to this definition")
Returns `True` if this is a multi line edit control and `False` otherwise.



Return type
*bool*





See also


[`IsSingleLine`](#wx.TextCtrl.IsSingleLine "wx.TextCtrl.IsSingleLine")





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def IsSingleLine(self) -> bool:
        """ 

`IsSingleLine`(*self*)[¶](#wx.TextCtrl.IsSingleLine "Permalink to this definition")
Returns `True` if this is a single line edit control and `False` otherwise.



Return type
*bool*





See also


[`IsSingleLine`](#wx.TextCtrl.IsSingleLine "wx.TextCtrl.IsSingleLine") , [`IsMultiLine`](#wx.TextCtrl.IsMultiLine "wx.TextCtrl.IsMultiLine")





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def LoadFile(self, filename, fileType=TEXT_TYPE_ANY) -> bool:
        """ 

`LoadFile`(*self*, *filename*, *fileType=TEXT\_TYPE\_ANY*)[¶](#wx.TextCtrl.LoadFile "Permalink to this definition")
Loads and displays the named file, if it exists.



Parameters
* **filename** (*string*) – The filename of the file to load.
* **fileType** (*int*) – The type of file to load. This is currently ignored in  [wx.TextCtrl](#wx-textctrl).



Return type
*bool*



Returns
`True` if successful, `False` otherwise.






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def MacCheckSpelling(self, check) -> None:
        """ 

`MacCheckSpelling`(*self*, *check*)[¶](#wx.TextCtrl.MacCheckSpelling "Permalink to this definition")
Turn on the native spell checking for the text widget on
OSX. Ignored on other platforms.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def MarkDirty(self) -> None:
        """ 

`MarkDirty`(*self*)[¶](#wx.TextCtrl.MarkDirty "Permalink to this definition")
Mark text as modified (dirty).



See also


[`IsModified`](#wx.TextCtrl.IsModified "wx.TextCtrl.IsModified")





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def OSXDisableAllSmartSubstitutions(self) -> None:
        """ 

`OSXDisableAllSmartSubstitutions`(*self*)[¶](#wx.TextCtrl.OSXDisableAllSmartSubstitutions "Permalink to this definition")
Mac-only method to disable all automatic text substitutions.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def OSXEnableAutomaticDashSubstitution(self, enable) -> None:
        """ 

`OSXEnableAutomaticDashSubstitution`(*self*, *enable*)[¶](#wx.TextCtrl.OSXEnableAutomaticDashSubstitution "Permalink to this definition")
Mac-only method for turning on/off automatic dash substitutions.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def OSXEnableAutomaticQuoteSubstitution(self, enable) -> None:
        """ 

`OSXEnableAutomaticQuoteSubstitution`(*self*, *enable*)[¶](#wx.TextCtrl.OSXEnableAutomaticQuoteSubstitution "Permalink to this definition")
Mac-only method for turning on/off automatic quote substitutions.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def OSXEnableNewLineReplacement(self, enable: bool) -> None:
        """ 

`OSXEnableNewLineReplacement`(*self*, *enable*)[¶](#wx.TextCtrl.OSXEnableNewLineReplacement "Permalink to this definition")
Enable the automatic replacement of new lines characters in a single-line text field with spaces under macOS.


This feature is enabled by default and will replace any new line ( `\n` ) character entered into a single-line text field with the space character. Usually single-line text fields are not expected to hold multiple lines of text (that is what `wx.TE_MULTILINE` is for, after all) and it is impossible to have multiple lines of text in them under non-Mac platforms. However, under macOS/Cocoa, a single-line text control can still show multiple lines and this function allows to lift the restriction preventing multiple lines from being entered unless `wx.TE_MULTILINE` is specified.



Parameters
**enable** (*bool*) – 





New in version 4.1/wxWidgets-3.1.6.




Availability


Only available for OSX.




Note


This function is only available for macOS/Cocoa. It also has no effect if the `wx.TE_MULTILINE` flag is set on a text control.





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def PositionToCoords(self, pos: int) -> 'Point':
        """ 

`PositionToCoords`(*self*, *pos*)[¶](#wx.TextCtrl.PositionToCoords "Permalink to this definition")
Converts given text position to client coordinates in pixels.


This function allows finding where is the character at the given position displayed in the text control.



Parameters
**pos** (*long*) – Text position in 0 to [`GetLastPosition`](wx.TextEntry.html#wx.TextEntry.GetLastPosition "wx.TextEntry.GetLastPosition") range (inclusive).



Return type
 [wx.Point](wx.Point.html#wx-point)



Returns
On success returns a  [wx.Point](wx.Point.html#wx-point) which contains client coordinates for the given position in pixels, otherwise returns `wx.DefaultPosition` .





New in version 2.9.3.




Availability


Only available for MSW, GTK . Additionally, wxGTK only implements this method for multiline controls and `wx.DefaultPosition` is always returned for the single line ones.




See also


[`XYToPosition`](#wx.TextCtrl.XYToPosition "wx.TextCtrl.XYToPosition") , [`PositionToXY`](#wx.TextCtrl.PositionToXY "wx.TextCtrl.PositionToXY")





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def PositionToXY(self, pos: int) -> tuple:
        """ 

`PositionToXY`(*self*, *pos*)[¶](#wx.TextCtrl.PositionToXY "Permalink to this definition")
Converts given position to a zero-based column, line number pair.



Parameters
**pos** (*long*) – Position.



Return type
*tuple*






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def SaveFile(self, filename="", fileType=TEXT_TYPE_ANY) -> bool:
        """ 

`SaveFile`(*self*, *filename=""*, *fileType=TEXT\_TYPE\_ANY*)[¶](#wx.TextCtrl.SaveFile "Permalink to this definition")
Saves the contents of the control in a text file.



Parameters
* **filename** (*string*) – The name of the file in which to save the text.
* **fileType** (*int*) – The type of file to save. This is currently ignored in  [wx.TextCtrl](#wx-textctrl).



Return type
*bool*



Returns
`True` if the operation was successful, `False` otherwise.






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def SetDefaultStyle(self, style: 'TextAttr') -> bool:
        """ 

`SetDefaultStyle`(*self*, *style*)[¶](#wx.TextCtrl.SetDefaultStyle "Permalink to this definition")
Changes the default style to use for the new text which is going to be added to the control.


This applies both to the text added programmatically using [`WriteText`](wx.TextEntry.html#wx.TextEntry.WriteText "wx.TextEntry.WriteText") or [`AppendText`](wx.TextEntry.html#wx.TextEntry.AppendText "wx.TextEntry.AppendText") and to the text entered by the user interactively.


If either of the font, foreground, or background colour is not set in *style*, the values of the previous default style are used for them. If the previous default style didn’t set them either, the global font or colours of the text control itself are used as fall back.


However if the *style* parameter is the default  [wx.TextAttr](wx.TextAttr.html#wx-textattr), then the default style is just reset (instead of being combined with the new style which wouldn’t change it at all).



Parameters
**style** ([*wx.TextAttr*](wx.TextAttr.html#wx.TextAttr "wx.TextAttr")) – The style for the new text.



Return type
*bool*



Returns
`True` on success, `False` if an error occurred (this may also mean that the styles are not supported under this platform).





See also


[`GetDefaultStyle`](#wx.TextCtrl.GetDefaultStyle "wx.TextCtrl.GetDefaultStyle")





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def SetModified(self, modified: bool) -> None:
        """ 

`SetModified`(*self*, *modified*)[¶](#wx.TextCtrl.SetModified "Permalink to this definition")
Marks the control as being modified by the user or not.



Parameters
**modified** (*bool*) – 





See also


[`MarkDirty`](#wx.TextCtrl.MarkDirty "wx.TextCtrl.MarkDirty") , [`DiscardEdits`](#wx.TextCtrl.DiscardEdits "wx.TextCtrl.DiscardEdits")





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def SetStyle(self, start, end, style) -> bool:
        """ 

`SetStyle`(*self*, *start*, *end*, *style*)[¶](#wx.TextCtrl.SetStyle "Permalink to this definition")
Changes the style of the given range.


If any attribute within *style* is not set, the corresponding attribute from [`GetDefaultStyle`](#wx.TextCtrl.GetDefaultStyle "wx.TextCtrl.GetDefaultStyle") is used.



Parameters
* **start** (*long*) – The start of the range to change.
* **end** (*long*) – The end of the range to change.
* **style** ([*wx.TextAttr*](wx.TextAttr.html#wx.TextAttr "wx.TextAttr")) – The new style for the range.



Return type
*bool*



Returns
`True` on success, `False` if an error occurred (this may also mean that the styles are not supported under this platform).





See also


[`GetStyle`](#wx.TextCtrl.GetStyle "wx.TextCtrl.GetStyle") ,  [wx.TextAttr](wx.TextAttr.html#wx-textattr)





            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def ShowNativeCaret(self, show=True) -> bool:
        """ 

`ShowNativeCaret`(*self*, *show=True*)[¶](#wx.TextCtrl.ShowNativeCaret "Permalink to this definition")

> Turn on the widget’s native caret on Windows.
> Ignored on other platforms.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def ShowPosition(self, pos: int) -> None:
        """ 

`ShowPosition`(*self*, *pos*)[¶](#wx.TextCtrl.ShowPosition "Permalink to this definition")
Makes the line containing the given position visible.



Parameters
**pos** (*long*) – The position that should be visible.






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def XYToPosition(self, x, y) -> int:
        """ 

`XYToPosition`(*self*, *x*, *y*)[¶](#wx.TextCtrl.XYToPosition "Permalink to this definition")
Converts the given zero based column and line number to a position.



Parameters
* **x** (*long*) – The column number.
* **y** (*long*) – The line number.



Return type
*long*



Returns
The position value, or -1 if x or y was invalid.






            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def flush(self) -> None:
        """ 

`flush`(*self*)[¶](#wx.TextCtrl.flush "Permalink to this definition")
`NOP`, for file-like compatibility.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    def write(self, text) -> None:
        """ 

`write`(*self*, *text*)[¶](#wx.TextCtrl.write "Permalink to this definition")
Append text to the textctrl, for file-like compatibility.




            Source: https://docs.wxpython.org/wx.TextCtrl.html
        """

    DefaultStyle: 'TextAttr'  # `DefaultStyle`[¶](#wx.TextCtrl.DefaultStyle "Permalink to this definition")See [`GetDefaultStyle`](#wx.TextCtrl.GetDefaultStyle "wx.TextCtrl.GetDefaultStyle") and [`SetDefaultStyle`](#wx.TextCtrl.SetDefaultStyle "wx.TextCtrl.SetDefaultStyle")
    NumberOfLines: int  # `NumberOfLines`[¶](#wx.TextCtrl.NumberOfLines "Permalink to this definition")See [`GetNumberOfLines`](#wx.TextCtrl.GetNumberOfLines "wx.TextCtrl.GetNumberOfLines")



TE_PROCESS_ENTER: int  # The control will generate the event  wxEVT_TEXT_ENTER   that can be handled by the program. Otherwise, i.e. either if this style not specified at all, or it is used, but there is no event handler for this event or the event handler called  wx.Event.Skip   to avoid overriding the default handling, pressing Enter key is either processed internally by the control or used to activate the default button of the dialog, if any.

TE_PROCESS_TAB: int  # Normally, TAB key is used for keyboard navigation and pressing it in a control switches focus to the next one. With this style, this won’t happen and if the TAB is not otherwise processed (e.g. by  wxEVT_CHAR   event handler), a literal TAB character is inserted into the control. Notice that this style has no effect for single-line text controls when using wxGTK.

TE_MULTILINE: int  # The text control allows multiple lines. If this style is not specified, line break characters should not be used in the controls value.

TE_PASSWORD: int  # The text will be echoed as asterisks.

TE_READONLY: int  # The text will not be user-editable.

TE_RICH: int  # Use rich text control under MSW, this allows having more than 64KB of text in the control. This style is ignored under other platforms and it is recommended to use wx.TE_RICH2 instead of it under MSW.

TE_RICH2: int  # Use rich text control version 2.0 or higher under MSW, this style is ignored under other platforms. Note that this style may be turned on automatically even if it is not used explicitly when creating a text control with a long (i.e. much more than 64KiB) initial text, as creating the control would simply fail in this case under MSW if neither this style nor wx.TE_RICH is used.

TE_AUTO_URL: int  # Highlight the URLs and generate the TextUrlEvents when mouse events occur over them.

TE_NOHIDESEL: int  # By default, the Windows text control doesn’t show the selection when it doesn’t have focus - use this style to force it to always show it. It doesn’t do anything under other platforms.

HSCROLL: int  # A horizontal scrollbar will be created and used, so that text won’t be wrapped.

TE_NO_VSCROLL: int  # For multiline controls only: vertical scrollbar will never be created. This limits the amount of text which can be entered into the control to what can be displayed in it under wxMSW but not under wxGTK or wxOSX. Currently not implemented for the other platforms.

TE_LEFT: int  # The text in the control will be left-justified (default).

TE_CENTRE: int  # The text in the control will be centered (wxMSW, wxGTK, wxOSX).

TE_RIGHT: int  # The text in the control will be right-justified (wxMSW, wxGTK, wxOSX).

TE_DONTWRAP: int  # Same as wx.HSCROLL style: don’t wrap at all, show horizontal scrollbar instead.

TE_CHARWRAP: int  # For multiline controls only: wrap the lines too long to be shown entirely at any position (wxUniv, wxGTK, wxOSX).

TE_WORDWRAP: int  # For multiline controls only: wrap the lines too long to be shown entirely at word boundaries (wxUniv, wxMSW, wxGTK, wxOSX).

TE_BESTWRAP: int  # For multiline controls only: wrap the lines at word boundaries or at any other character if there are words longer than the window width (this is the default).

TE_CAPITALIZE: int  # On PocketPC and Smartphone, causes the first letter to be capitalized. ^^

EVT_TEXT: int  # Respond to a  wxEVT_TEXT   event, generated when the text changes. Notice that this event will be sent when the text controls contents changes  – wx.TextCtrl.SetValue   is called); see wx.TextCtrl.ChangeValue   for a function which does not send this event. This event is however not sent during the control creation.

EVT_TEXT_ENTER: int  # Respond to a  wxEVT_TEXT_ENTER   event, generated when enter is pressed in a text control which must have wx.TE_PROCESS_ENTER style for this event to be generated.

EVT_TEXT_URL: int  # A mouse event occurred over an URL in the text control.

EVT_TEXT_MAXLEN: int  # This event is generated when the user tries to enter more text into the control than the limit set by wx.TextCtrl.SetMaxLength , see its description. ^^

class CloseEvent(Event):
    """ **Possible constructors**:



```
CloseEvent(commandEventType=wxEVT_NULL, id=0)

```


This event class contains information about window and session close
events.


  


        Source: https://docs.wxpython.org/wx.CloseEvent.html
    """
    def __init__(self, commandEventType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *commandEventType=wxEVT\_NULL*, *id=0*)[¶](#wx.CloseEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **commandEventType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.CloseEvent.html
        """

    def CanVeto(self) -> bool:
        """ 

`CanVeto`(*self*)[¶](#wx.CloseEvent.CanVeto "Permalink to this definition")
Returns `True` if you can veto a system shutdown or a window close event.


Vetoing a window close event is not possible if the calling code wishes to force the application to exit, and so this function must be called to check this.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CloseEvent.html
        """

    def GetLoggingOff(self) -> bool:
        """ 

`GetLoggingOff`(*self*)[¶](#wx.CloseEvent.GetLoggingOff "Permalink to this definition")
Returns `True` if the user is just logging off or `False` if the system is shutting down.


This method can only be called for end session and query end session events, it doesn’t make sense for close window event.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CloseEvent.html
        """

    def GetVeto(self) -> bool:
        """ 

`GetVeto`(*self*)[¶](#wx.CloseEvent.GetVeto "Permalink to this definition")
Returns whether the Veto flag was set.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CloseEvent.html
        """

    def SetCanVeto(self, canVeto: bool) -> None:
        """ 

`SetCanVeto`(*self*, *canVeto*)[¶](#wx.CloseEvent.SetCanVeto "Permalink to this definition")
Sets the ‘can veto’ flag.



Parameters
**canVeto** (*bool*) – 






            Source: https://docs.wxpython.org/wx.CloseEvent.html
        """

    def SetLoggingOff(self, loggingOff: bool) -> None:
        """ 

`SetLoggingOff`(*self*, *loggingOff*)[¶](#wx.CloseEvent.SetLoggingOff "Permalink to this definition")
Sets the ‘logging off’ flag.



Parameters
**loggingOff** (*bool*) – 






            Source: https://docs.wxpython.org/wx.CloseEvent.html
        """

    def Veto(self, veto: bool=True) -> None:
        """ 

`Veto`(*self*, *veto=True*)[¶](#wx.CloseEvent.Veto "Permalink to this definition")
Call this from your event handler to veto a system shutdown or to signal to the calling application that a window close did not happen.


You can only veto a shutdown if [`CanVeto`](#wx.CloseEvent.CanVeto "wx.CloseEvent.CanVeto") returns `True`.



Parameters
**veto** (*bool*) – 






            Source: https://docs.wxpython.org/wx.CloseEvent.html
        """

    LoggingOff: bool  # `LoggingOff`[¶](#wx.CloseEvent.LoggingOff "Permalink to this definition")See [`GetLoggingOff`](#wx.CloseEvent.GetLoggingOff "wx.CloseEvent.GetLoggingOff") and [`SetLoggingOff`](#wx.CloseEvent.SetLoggingOff "wx.CloseEvent.SetLoggingOff")



EVT_CLOSE: int  # Process a  wxEVT_CLOSE_WINDOW   command event, supplying the member function. This event applies to    wx.Frame  and   wx.Dialog  classes.

EVT_QUERY_END_SESSION: int  # Process a  wxEVT_QUERY_END_SESSION   session event, supplying the member function. This event can be handled in App-derived class only.

EVT_END_SESSION: int  # Process a  wxEVT_END_SESSION   session event, supplying the member function. This event can be handled in App-derived class only. ^^

class CollapsibleHeaderCtrl(Control):
    """ **Possible constructors**:



```
CollapsibleHeaderCtrl()

CollapsibleHeaderCtrl(parent, id=ID_ANY, label="", pos=DefaultPosition,
                      size=DefaultSize, style=BORDER_NONE, validator=DefaultValidator,
                      name=CollapsibleHeaderCtrlNameStr)

```


Header control above a collapsible pane.


  


        Source: https://docs.wxpython.org/wx.CollapsibleHeaderCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.CollapsibleHeaderCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, style=BORDER\_NONE, validator=DefaultValidator, name=CollapsibleHeaderCtrlNameStr)*


Constructor fully creating the control.


The arguments have the usual meanings and only *parent* is typically required.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.CollapsibleHeaderCtrl.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, style=BORDER_NONE, validator=DefaultValidator, name=CollapsibleHeaderCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=BORDER\_NONE*, *validator=DefaultValidator*, *name=CollapsibleHeaderCtrlNameStr*)[¶](#wx.CollapsibleHeaderCtrl.Create "Permalink to this definition")
Create the control initialized using the default constructor.


This method can be used to finish the control creation if it hadn’t been done already by using the non-default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CollapsibleHeaderCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.CollapsibleHeaderCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.CollapsibleHeaderCtrl.html
        """

    def IsCollapsed(self) -> bool:
        """ 

`IsCollapsed`(*self*)[¶](#wx.CollapsibleHeaderCtrl.IsCollapsed "Permalink to this definition")
Returns `true` if the control is collapsed.



Return type
*bool*





See also


[`SetCollapsed`](#wx.CollapsibleHeaderCtrl.SetCollapsed "wx.CollapsibleHeaderCtrl.SetCollapsed")





            Source: https://docs.wxpython.org/wx.CollapsibleHeaderCtrl.html
        """

    def SetCollapsed(self, collapsed: bool=True) -> None:
        """ 

`SetCollapsed`(*self*, *collapsed=True*)[¶](#wx.CollapsibleHeaderCtrl.SetCollapsed "Permalink to this definition")
Set collapsed state of the header.



Parameters
**collapsed** (*bool*) – 






            Source: https://docs.wxpython.org/wx.CollapsibleHeaderCtrl.html
        """



EVT_COLLAPSIBLEHEADER_CHANGED: int  # User changed the collapsed state. ^^

class CollapsiblePane(Control):
    """ **Possible constructors**:



```
CollapsiblePane()

CollapsiblePane(parent, id=ID_ANY, label="",
                pos=DefaultPosition, size=DefaultSize, style=CP_DEFAULT_STYLE,
                validator=DefaultValidator, name=CollapsiblePaneNameStr)

```


A collapsible pane is a container with an embedded button-like control
which can be used by the user to collapse or expand the pane’s
contents.


  


        Source: https://docs.wxpython.org/wx.CollapsiblePane.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.CollapsiblePane.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, style=CP\_DEFAULT\_STYLE, validator=DefaultValidator, name=CollapsiblePaneNameStr)*


Initializes the object and calls [`Create`](#wx.CollapsiblePane.Create "wx.CollapsiblePane.Create") with all the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.CollapsiblePane.html
        """

    def Collapse(self, collapse: bool=True) -> None:
        """ 

`Collapse`(*self*, *collapse=True*)[¶](#wx.CollapsiblePane.Collapse "Permalink to this definition")
Collapses or expands the pane window.



Parameters
**collapse** (*bool*) – 






            Source: https://docs.wxpython.org/wx.CollapsiblePane.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, style=CP_DEFAULT_STYLE, validator=DefaultValidator, name=CollapsiblePaneNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=CP\_DEFAULT\_STYLE*, *validator=DefaultValidator*, *name=CollapsiblePaneNameStr*)[¶](#wx.CollapsiblePane.Create "Permalink to this definition")

Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window, must not be not `None`.
* **id** (*wx.WindowID*) – The identifier for the control.
* **label** (*string*) – The initial label shown in the button which allows the user to expand or collapse the pane window.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Initial position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Initial size.
* **style** (*long*) – The window style, see `CP_` flags.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Validator which can be used for additional data checks.
* **name** (*string*) – Control name.



Return type
*bool*



Returns
`True` if the control was successfully created or `False` if creation failed.






            Source: https://docs.wxpython.org/wx.CollapsiblePane.html
        """

    def Expand(self) -> None:
        """ 

`Expand`(*self*)[¶](#wx.CollapsiblePane.Expand "Permalink to this definition")
Same as calling Collapse(false).




            Source: https://docs.wxpython.org/wx.CollapsiblePane.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.CollapsiblePane.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.CollapsiblePane.html
        """

    def GetPane(self) -> 'Window':
        """ 

`GetPane`(*self*)[¶](#wx.CollapsiblePane.GetPane "Permalink to this definition")
Returns a pointer to the pane window.


Add controls to the returned  [wx.Window](wx.Window.html#wx-window) to make them collapsible.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.CollapsiblePane.html
        """

    def IsCollapsed(self) -> bool:
        """ 

`IsCollapsed`(*self*)[¶](#wx.CollapsiblePane.IsCollapsed "Permalink to this definition")
Returns `True` if the pane window is currently hidden.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CollapsiblePane.html
        """

    def IsExpanded(self) -> bool:
        """ 

`IsExpanded`(*self*)[¶](#wx.CollapsiblePane.IsExpanded "Permalink to this definition")
Returns `True` if the pane window is currently shown.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CollapsiblePane.html
        """

    Pane: 'Window'  # `Pane`[¶](#wx.CollapsiblePane.Pane "Permalink to this definition")See [`GetPane`](#wx.CollapsiblePane.GetPane "wx.CollapsiblePane.GetPane")



CP_DEFAULT_STYLE: int  # The default style. It includes wx.TAB_TRAVERSAL and wx.BORDER_NONE.

CP_NO_TLW_RESIZE: int  # By default   wx.CollapsiblePane  resizes the top level window containing it when its own size changes. This allows easily implementing dialogs containing an optionally shown part, for example, and so is the default behaviour but can be inconvenient in some specific cases –

EVT_COLLAPSIBLEPANE_CHANGED: int  # The user expanded or collapsed the collapsible pane.

EVT_NAVIGATION_KEY: int  # Process a navigation key event. ^^

TAB_TRAVERSAL: int

class CollapsiblePaneEvent(CommandEvent):
    """ **Possible constructors**:



```
CollapsiblePaneEvent(generator, id, collapsed)

```


This event class is used for the events generated by
CollapsiblePane.


  


        Source: https://docs.wxpython.org/wx.CollapsiblePaneEvent.html
    """
    def __init__(self, generator, id, collapsed) -> None:
        """ 

`__init__`(*self*, *generator*, *id*, *collapsed*)[¶](#wx.CollapsiblePaneEvent.__init__ "Permalink to this definition")
The constructor is not normally used by the user code.



Parameters
* **generator** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) –
* **id** (*int*) –
* **collapsed** (*bool*) –






            Source: https://docs.wxpython.org/wx.CollapsiblePaneEvent.html
        """

    def GetCollapsed(self) -> bool:
        """ 

`GetCollapsed`(*self*)[¶](#wx.CollapsiblePaneEvent.GetCollapsed "Permalink to this definition")
Returns `True` if the pane has been collapsed.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CollapsiblePaneEvent.html
        """

    def SetCollapsed(self, collapsed: bool) -> None:
        """ 

`SetCollapsed`(*self*, *collapsed*)[¶](#wx.CollapsiblePaneEvent.SetCollapsed "Permalink to this definition")
Sets this as a collapsed pane event (if *collapsed* is `True`) or as an expanded pane event (if *collapsed* is `False`).



Parameters
**collapsed** (*bool*) – 






            Source: https://docs.wxpython.org/wx.CollapsiblePaneEvent.html
        """

    Collapsed: bool  # `Collapsed`[¶](#wx.CollapsiblePaneEvent.Collapsed "Permalink to this definition")See [`GetCollapsed`](#wx.CollapsiblePaneEvent.GetCollapsed "wx.CollapsiblePaneEvent.GetCollapsed") and [`SetCollapsed`](#wx.CollapsiblePaneEvent.SetCollapsed "wx.CollapsiblePaneEvent.SetCollapsed")



class Colour(Object):
    """ **Possible constructors**:



```
Colour()

Colour(red, green, blue, alpha=ALPHA_OPAQUE)

Colour(colRGB)

Colour(colour)

```


A colour is an object representing a combination of Red, Green, and
Blue (`RGB`) intensity values and an Alpha value, and is used to
determine drawing colours.


  


        Source: https://docs.wxpython.org/wx.Colour.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Colour.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, red, green, blue, alpha=ALPHA\_OPAQUE)*



Parameters
* **red** (*int*) – The red value.
* **green** (*int*) – The green value.
* **blue** (*int*) – The blue value.
* **alpha** (*int*) – The alpha value. Alpha values range from 0 (wx``wx.ALPHA\_TRANSPARENT``) to 255 (wx``wx.ALPHA\_OPAQUE``).






---

  



**\_\_init\_\_** *(self, colRGB)*



Parameters
**colRGB** (*long*) – A packed `RGB` value.






---

  



**\_\_init\_\_** *(self, colour)*


Copy constructor.



Parameters
**colour** ([*wx.Colour*](#wx.Colour "wx.Colour")) – 






---

  





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def Alpha(self) -> int:
        """ 

`Alpha`(*self*)[¶](#wx.Colour.Alpha "Permalink to this definition")
Returns the alpha value, on platforms where alpha is not yet supported, this always returns `wx.ALPHA_OPAQUE`.



Return type
*int*





See also


[`GetAlpha`](#wx.Colour.GetAlpha "wx.Colour.GetAlpha")





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    @staticmethod
    def AlphaBlend(fg, bg, alpha) -> int:
        """ 

*static* `AlphaBlend`(*fg*, *bg*, *alpha*)[¶](#wx.Colour.AlphaBlend "Permalink to this definition")
Blend colour, taking alpha into account.



Parameters
* **fg** (*int*) –
* **bg** (*int*) –
* **alpha** (*float*) –



Return type
*int*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def Blue(self) -> int:
        """ 

`Blue`(*self*)[¶](#wx.Colour.Blue "Permalink to this definition")
Returns the blue intensity.



Return type
*int*





See also


[`GetBlue`](#wx.Colour.GetBlue "wx.Colour.GetBlue")





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def ChangeLightness(self, *args, **kw) -> 'Colour':
        """ 

`ChangeLightness`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Colour.ChangeLightness "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ChangeLightness** *(self, ialpha)*


 [wx.Colour](#wx-colour) wrapper for ChangeLightness(r,g,b,ialpha).



Parameters
**ialpha** (*int*) – 



Return type
 [wx.Colour](#wx-colour)





New in version 2.9.0.





---

  



**ChangeLightness** *(r, g, b, ialpha)*


Utility function that simply darkens or lightens a color, based on the specified percentage *ialpha*.


*ialpha* of 0 would be make the color completely black, 200 completely white and 100 would not change the color.



Parameters
* **r** (*int*) –
* **g** (*int*) –
* **b** (*int*) –
* **ialpha** (*int*) –



Return type
*tuple*



Returns
( *r*, *g*, *b* )





New in version 2.9.0.





---

  





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def Get(self, includeAlpha=True) -> tuple:
        """ 

`Get`(*self*, *includeAlpha=True*)[¶](#wx.Colour.Get "Permalink to this definition")

> Returns the `RGB` intensity values as a tuple, optionally the alpha value as well.



Return type
*tuple*



Returns
( *r*, *g*, *b) or (r*, *g*, *b*, *a* )






            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetAlpha(self) -> int:
        """ 

`GetAlpha`(*self*)[¶](#wx.Colour.GetAlpha "Permalink to this definition")
Returns the alpha value, on platforms where alpha is not yet supported, this always returns `wx.ALPHA_OPAQUE`.



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetAsString(self, flags: int=C2S_NAME|C2S_CSS_SYNTAX) -> str:
        """ 

`GetAsString`(*self*, *flags=C2S\_NAME|C2S\_CSS\_SYNTAX*)[¶](#wx.Colour.GetAsString "Permalink to this definition")
Converts this colour to a *String* using the given flags.


The supported flags are `C2S_NAME` , to obtain the colour name (e.g.  [wx.Colour](#wx-colour) == “red”), `C2S_CSS_SYNTAX` , to obtain the colour in the “rgb(r,g,b)” or “rgba(r,g,b,a)” syntax (e.g.  [wx.Colour](#wx-colour) == “rgba(255,0,0,0.333)”), and `C2S_HTML_SYNTAX` , to obtain the colour as “#” followed by 6 hexadecimal digits (e.g.  [wx.Colour](#wx-colour) == “#``FF0000``”).


This function returns empty string if the colour is not initialized (see [`IsOk`](#wx.Colour.IsOk "wx.Colour.IsOk") ). Otherwise, the returned string is always non-empty, but the function asserts if the colour has alpha channel (i.e. is non opaque) but `C2S_CSS_SYNTAX` (which is the only one supporting alpha) is not specified in *flags*.



Parameters
**flags** (*long*) – 



Return type
`string`





New in version 2.7.0.




Note


For non-solid (i.e. non-RGB) colour this function returns “rgb(??, ?? ??)” or “#??????”.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetBlue(self) -> int:
        """ 

`GetBlue`(*self*)[¶](#wx.Colour.GetBlue "Permalink to this definition")
Returns the blue intensity as int.



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetGreen(self) -> int:
        """ 

`GetGreen`(*self*)[¶](#wx.Colour.GetGreen "Permalink to this definition")
Returns the green intensity as int.



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.Colour.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.Colour` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.Colour`
with a simple statement like this: `obj = wx.Colour(imObj)`.




            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetLuminance(self) -> float:
        """ 

`GetLuminance`(*self*)[¶](#wx.Colour.GetLuminance "Permalink to this definition")
Return the perceived brightness of the colour.


This value is computed using the simple:



```
( 0.299*R + 0.587*G + 0.114*B )

```


formula with the coefficients taken from the `RGB` to `YIQ` conversion formula and `R` , `G` and `B` being the values of the corresponding colour channels normalized to 0..1 range, so that the return value is 0 for black and 1 for white.



Return type
*float*





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetPixel(self) -> int:
        """ 

`GetPixel`(*self*)[¶](#wx.Colour.GetPixel "Permalink to this definition")

Return type
*wx.IntPtr*






            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetRGB(self) -> int:
        """ 

`GetRGB`(*self*)[¶](#wx.Colour.GetRGB "Permalink to this definition")
Gets the `RGB` or `RGBA` colour values as a single 32 bit value.


The returned value is of the same form as expected by [`SetRGB`](#wx.Colour.SetRGB "wx.Colour.SetRGB") and [`SetRGBA`](#wx.Colour.SetRGBA "wx.Colour.SetRGBA") .


Notice that [`GetRGB`](#wx.Colour.GetRGB "wx.Colour.GetRGB") returns the value with 0 as its highest byte independently of the value actually returned by [`Alpha`](#wx.Colour.Alpha "wx.Colour.Alpha") . So for a fully opaque colour, the return value of [`GetRGBA`](#wx.Colour.GetRGBA "wx.Colour.GetRGBA") is `0xFFBBGGRR` while that of [`GetRGB`](#wx.Colour.GetRGB "wx.Colour.GetRGB") is `0x00BBGGRR` .



Return type
*wx.int*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetRGBA(self) -> int:
        """ 

`GetRGBA`(*self*)[¶](#wx.Colour.GetRGBA "Permalink to this definition")
Gets the `RGB` or `RGBA` colour values as a single 32 bit value.


The returned value is of the same form as expected by [`SetRGB`](#wx.Colour.SetRGB "wx.Colour.SetRGB") and [`SetRGBA`](#wx.Colour.SetRGBA "wx.Colour.SetRGBA") .


Notice that [`GetRGB`](#wx.Colour.GetRGB "wx.Colour.GetRGB") returns the value with 0 as its highest byte independently of the value actually returned by [`Alpha`](#wx.Colour.Alpha "wx.Colour.Alpha") . So for a fully opaque colour, the return value of [`GetRGBA`](#wx.Colour.GetRGBA "wx.Colour.GetRGBA") is `0xFFBBGGRR` while that of [`GetRGB`](#wx.Colour.GetRGB "wx.Colour.GetRGB") is `0x00BBGGRR` .



Return type
*wx.int*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def GetRed(self) -> int:
        """ 

`GetRed`(*self*)[¶](#wx.Colour.GetRed "Permalink to this definition")
Returns the red intensity as int.



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def Green(self) -> int:
        """ 

`Green`(*self*)[¶](#wx.Colour.Green "Permalink to this definition")
Returns the green intensity.



Return type
*int*





See also


[`GetGreen`](#wx.Colour.GetGreen "wx.Colour.GetGreen")





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Colour.IsOk "Permalink to this definition")
Returns `True` if the colour object is valid (the colour has been initialised with `RGB` values).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def IsSolid(self) -> bool:
        """ 

`IsSolid`(*self*)[¶](#wx.Colour.IsSolid "Permalink to this definition")
Returns `True` if the color can be described using `RGB` values, i.e.


is solid, `False` if it is a pattern (currently only possible on macOS)



Return type
*bool*





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def MakeDisabled(self, *args, **kw) -> 'Colour':
        """ 

`MakeDisabled`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Colour.MakeDisabled "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**MakeDisabled** *(self, brightness=255)*


Make a disabled version of this colour.


This method modifies the object in place and returns the object itself.



Parameters
**brightness** (*int*) – 



Return type
 [wx.Colour](#wx-colour)





New in version 2.9.5.





---

  



**MakeDisabled** *(r, g, b, brightness=255)*


Create a disabled (dimmed) colour from (in/out) rgb parameters.



Parameters
* **r** (*int*) –
* **g** (*int*) –
* **b** (*int*) –
* **brightness** (*int*) –



Return type
*tuple*



Returns
( *r*, *g*, *b* )





New in version 2.9.0.





---

  





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    @staticmethod
    def MakeGrey(*args, **kw) -> tuple:
        """ 

*static* `MakeGrey`(*\*args*, *\*\*kw*)[¶](#wx.Colour.MakeGrey "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**MakeGrey** *(r, g, b)*


Create a grey colour from (in/out) rgb parameters using integer arithmetic.



Parameters
* **r** (*int*) –
* **g** (*int*) –
* **b** (*int*) –



Return type
*tuple*



Returns
( *r*, *g*, *b* )





New in version 2.9.0.





---

  



**MakeGrey** *(r, g, b, weight\_r, weight\_g, weight\_b)*


Create a grey colour from (in/out) rgb parameters using floating point arithmetic.


Defaults to using the standard `ITU-T` BT.601 when converting to `YUV`, where every pixel equals (R *weight\_r*) + (G *weight\_g*) + (B *weight\_b*).



Parameters
* **r** (*int*) –
* **g** (*int*) –
* **b** (*int*) –
* **weight\_r** (*float*) –
* **weight\_g** (*float*) –
* **weight\_b** (*float*) –



Return type
*tuple*



Returns
( *r*, *g*, *b* )





New in version 2.9.0.





---

  





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    @staticmethod
    def MakeMono(on: bool) -> tuple:
        """ 

*static* `MakeMono`(*on*)[¶](#wx.Colour.MakeMono "Permalink to this definition")
Assigns the same value to *r*, *g*, *b:* 0 if *on* is `false` , 255 otherwise.



Parameters
**on** (*bool*) – 



Return type
*tuple*



Returns
( *r*, *g*, *b* )





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def Red(self) -> int:
        """ 

`Red`(*self*)[¶](#wx.Colour.Red "Permalink to this definition")
Returns the red intensity.



Return type
*int*





See also


[`GetRed`](#wx.Colour.GetRed "wx.Colour.GetRed")





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def Set(self, *args, **kw) -> None:
        """ 

`Set`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Colour.Set "Permalink to this definition")
Sets the `RGB` intensity values using the given values (first overload), extracting them from the packed long (second overload), using the given string (third overload).


When using third form, [`Set`](#wx.Colour.Set "wx.Colour.Set") accepts: colour names (those listed in  [wx.ColourDatabase](wx.ColourDatabase.html#wx-colourdatabase)), the CSS-like `"rgb(r,g,b)"` or `"rgba(r,g,b,a)"` syntax (case insensitive) and the HTML-like syntax: `"#"` followed by 6 hexadecimal digits for red, green, blue components.


Returns `True` if the conversion was successful, `False` otherwise.



New in version 2.7.0.



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Set** *(self, red, green, blue, alpha=ALPHA\_OPAQUE)*



Parameters
* **red** (*int*) –
* **green** (*int*) –
* **blue** (*int*) –
* **alpha** (*int*) –






---

  



**Set** *(self, RGB)*



Parameters
**RGB** (*long*) – 






---

  



**Set** *(self, str)*



Parameters
**str** (*string*) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def SetRGB(self, colRGB: 'int') -> None:
        """ 

`SetRGB`(*self*, *colRGB*)[¶](#wx.Colour.SetRGB "Permalink to this definition")
Sets the `RGB` or `RGBA` colour values from a single 32 bit value.


The arguments *colRGB* and *colRGBA* should be of the form 0x00BBGGRR and 0xAABBGGRR respectively where `0xRR` , `0xGG` , `0xBB` and `0xAA` are the values of the red, green, blue and alpha components.


Notice the right-to-left order of components!



Parameters
**colRGB** (*wx.int*) – 





New in version 2.9.1.




See also


[`GetRGB`](#wx.Colour.GetRGB "wx.Colour.GetRGB") , [`GetRGBA`](#wx.Colour.GetRGBA "wx.Colour.GetRGBA")





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def SetRGBA(self, colRGBA: 'int') -> None:
        """ 

`SetRGBA`(*self*, *colRGBA*)[¶](#wx.Colour.SetRGBA "Permalink to this definition")
Sets the `RGB` or `RGBA` colour values from a single 32 bit value.


The arguments *colRGB* and *colRGBA* should be of the form 0x00BBGGRR and 0xAABBGGRR respectively where `0xRR` , `0xGG` , `0xBB` and `0xAA` are the values of the red, green, blue and alpha components.


Notice the right-to-left order of components!



Parameters
**colRGBA** (*wx.int*) – 





New in version 2.9.1.




See also


[`GetRGB`](#wx.Colour.GetRGB "wx.Colour.GetRGB") , [`GetRGBA`](#wx.Colour.GetRGBA "wx.Colour.GetRGBA")





            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Colour.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.Colour.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.Colour.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Colour.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.Colour.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.Colour.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.Colour.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.Colour.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def _copyFrom(self, other) -> None:
        """ 

`_copyFrom`(*self*, *other*)[¶](#wx.Colour._copyFrom "Permalink to this definition")
For internal use only.




            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.Colour.__ne__ "Permalink to this definition")
Tests the inequality of two colours by comparing individual red, green, blue intensities and alpha values.



Parameters
**colour** ([*wx.Colour*](#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.Colour.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.Colour.__eq__ "Permalink to this definition")
Tests the equality of two colours by comparing individual red, green, blue intensities and alpha values.



Parameters
**colour** ([*wx.Colour*](#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.Colour.html
        """

    Pixel: int  # `Pixel`[¶](#wx.Colour.Pixel "Permalink to this definition")See [`GetPixel`](#wx.Colour.GetPixel "wx.Colour.GetPixel")
    RGB: int  # `RGB`[¶](#wx.Colour.RGB "Permalink to this definition")See [`GetRGB`](#wx.Colour.GetRGB "wx.Colour.GetRGB") and [`SetRGB`](#wx.Colour.SetRGB "wx.Colour.SetRGB")
    RGBA: int  # `RGBA`[¶](#wx.Colour.RGBA "Permalink to this definition")See [`GetRGBA`](#wx.Colour.GetRGBA "wx.Colour.GetRGBA") and [`SetRGBA`](#wx.Colour.SetRGBA "wx.Colour.SetRGBA")
    alpha: Any  # `alpha`[¶](#wx.Colour.alpha "Permalink to this definition")See [`Alpha`](#wx.Colour.Alpha "wx.Colour.Alpha")
    blue: Any  # `blue`[¶](#wx.Colour.blue "Permalink to this definition")See [`Blue`](#wx.Colour.Blue "wx.Colour.Blue")
    green: Any  # `green`[¶](#wx.Colour.green "Permalink to this definition")See [`Green`](#wx.Colour.Green "wx.Colour.Green")
    red: Any  # `red`[¶](#wx.Colour.red "Permalink to this definition")See [`Red`](#wx.Colour.Red "wx.Colour.Red")



class ColourData(Object):
    """ **Possible constructors**:



```
ColourData()

```


This class holds a variety of information related to colour dialogs.


  


        Source: https://docs.wxpython.org/wx.ColourData.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ColourData.__init__ "Permalink to this definition")
Constructor.


Initializes the custom colours to `NullColour` , the *data* colour setting to black, and the *choose* full setting to `True`.




            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def FromString(self, str: str) -> bool:
        """ 

`FromString`(*self*, *str*)[¶](#wx.ColourData.FromString "Permalink to this definition")
Decodes the given string, which should be in the same format returned by *wx.ToString* , and sets the internal colours.



Parameters
**str** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def GetChooseAlpha(self) -> bool:
        """ 

`GetChooseAlpha`(*self*)[¶](#wx.ColourData.GetChooseAlpha "Permalink to this definition")
Indicates whether the colour dialog will display alpha values and an opacity selector.


It is meaningful under wxGTK, wxOSX and with regards to generic colour dialog.


The default value is `False`, except wxOSX where it is `True` (for the sake of backward compatibility).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def GetChooseFull(self) -> bool:
        """ 

`GetChooseFull`(*self*)[¶](#wx.ColourData.GetChooseFull "Permalink to this definition")
Under Windows, determines whether the Windows colour dialog will display the full dialog with custom colour selection controls.


Has no meaning under other platforms.


The default value is `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.ColourData.GetColour "Permalink to this definition")
Gets the current colour associated with the colour dialog.


The default colour is black.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def GetCustomColour(self, i: int) -> 'Colour':
        """ 

`GetCustomColour`(*self*, *i*)[¶](#wx.ColourData.GetCustomColour "Permalink to this definition")
Returns custom colours associated with the colour dialog.



Parameters
**i** (*int*) – An integer between 0 and 15, being any of the 15 custom colours that the user has saved. The default custom colours are invalid colours.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def SetChooseAlpha(self, flag: bool) -> None:
        """ 

`SetChooseAlpha`(*self*, *flag*)[¶](#wx.ColourData.SetChooseAlpha "Permalink to this definition")
Tells the colour dialog to show alpha values and an opacity selector (slider).


Currently it has effect under wxGTK, wxOSX and for generic colour dialog.


The default value is `False`, except wxOSX where it is `True` for backward compatibility.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def SetChooseFull(self, flag: bool) -> None:
        """ 

`SetChooseFull`(*self*, *flag*)[¶](#wx.ColourData.SetChooseFull "Permalink to this definition")
Under Windows, tells the Windows colour dialog to display the full dialog with custom colour selection controls.


Under other platforms, has no effect.


The default value is `True`.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def SetColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetColour`(*self*, *colour*)[¶](#wx.ColourData.SetColour "Permalink to this definition")
Sets the default colour for the colour dialog.


The default colour is black.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def SetCustomColour(self, i, colour) -> None:
        """ 

`SetCustomColour`(*self*, *i*, *colour*)[¶](#wx.ColourData.SetCustomColour "Permalink to this definition")
Sets custom colours for the colour dialog.



Parameters
* **i** (*int*) – An integer between 0 and 15 for whatever custom colour you want to set. The default custom colours are invalid colours.
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The colour to set






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    def ToString(self) -> str:
        """ 

`ToString`(*self*)[¶](#wx.ColourData.ToString "Permalink to this definition")
Converts the colours saved in this class in a string form, separating the various colours with a comma.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ColourData.html
        """

    ChooseAlpha: bool  # `ChooseAlpha`[¶](#wx.ColourData.ChooseAlpha "Permalink to this definition")See [`GetChooseAlpha`](#wx.ColourData.GetChooseAlpha "wx.ColourData.GetChooseAlpha") and [`SetChooseAlpha`](#wx.ColourData.SetChooseAlpha "wx.ColourData.SetChooseAlpha")
    ChooseFull: bool  # `ChooseFull`[¶](#wx.ColourData.ChooseFull "Permalink to this definition")See [`GetChooseFull`](#wx.ColourData.GetChooseFull "wx.ColourData.GetChooseFull") and [`SetChooseFull`](#wx.ColourData.SetChooseFull "wx.ColourData.SetChooseFull")
    Colour: '_Colour'  # `Colour`[¶](#wx.ColourData.Colour "Permalink to this definition")See [`GetColour`](#wx.ColourData.GetColour "wx.ColourData.GetColour") and [`SetColour`](#wx.ColourData.SetColour "wx.ColourData.SetColour")



class ColourDatabase:
    """ **Possible constructors**:



```
ColourDatabase()

```


wxWidgets maintains a database of standard `RGB` colours for a
predefined set of named colours.


  


        Source: https://docs.wxpython.org/wx.ColourDatabase.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ColourDatabase.__init__ "Permalink to this definition")
Constructs the colour database.


It will be initialized at the first use.




            Source: https://docs.wxpython.org/wx.ColourDatabase.html
        """

    def AddColour(self, colourName, colour) -> None:
        """ 

`AddColour`(*self*, *colourName*, *colour*)[¶](#wx.ColourDatabase.AddColour "Permalink to this definition")
Adds a colour to the database.


If a colour with the same name already exists, it is replaced.



Parameters
* **colourName** (*string*) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






            Source: https://docs.wxpython.org/wx.ColourDatabase.html
        """

    def Find(self, colourName: str) -> 'Colour':
        """ 

`Find`(*self*, *colourName*)[¶](#wx.ColourDatabase.Find "Permalink to this definition")
Finds a colour given the name.


Returns an invalid colour object (that is, [`wx.Colour.IsOk`](wx.Colour.html#wx.Colour.IsOk "wx.Colour.IsOk") will return `False`) if the colour wasn’t found in the database.



Parameters
**colourName** (*string*) – 



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ColourDatabase.html
        """

    def FindColour(self, colour) -> 'Colour':
        """ 

`FindColour`(*self*, *colour*)[¶](#wx.ColourDatabase.FindColour "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ColourDatabase.html
        """

    def FindName(self, colour: Union[int, str, 'Colour']) -> str:
        """ 

`FindName`(*self*, *colour*)[¶](#wx.ColourDatabase.FindName "Permalink to this definition")
Finds a colour name given the colour.


Returns an empty string if the colour is not found in the database.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.ColourDatabase.html
        """



_ColourData: TypeAlias = ColourData

class ColourDialog(Dialog):
    """ **Possible constructors**:



```
ColourDialog(parent, data=None)

```


This class represents the colour chooser dialog.


  


        Source: https://docs.wxpython.org/wx.ColourDialog.html
    """
    def __init__(self, parent, data=None) -> None:
        """ 

`__init__`(*self*, *parent*, *data=None*)[¶](#wx.ColourDialog.__init__ "Permalink to this definition")
Constructor.


Pass a parent window, and optionally a pointer to a block of colour data, which will be copied to the colour dialog’s colour data.


Custom colours from colour data object will be used in the dialog’s colour palette. Invalid entries in custom colours list will be ignored on some platforms(GTK) or replaced with white colour on platforms where custom colours palette has fixed size (MSW).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.ColourData*](wx.ColourData.html#wx.ColourData "wx.ColourData")) –





See also


 [wx.ColourData](wx.ColourData.html#wx-colourdata)





            Source: https://docs.wxpython.org/wx.ColourDialog.html
        """

    def Create(self, parent, data=None) -> bool:
        """ 

`Create`(*self*, *parent*, *data=None*)[¶](#wx.ColourDialog.Create "Permalink to this definition")
Same as  [wx.ColourDialog](#wx-colourdialog).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.ColourData*](wx.ColourData.html#wx.ColourData "wx.ColourData")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ColourDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ColourDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ColourDialog.html
        """

    def GetColourData(self) -> 'ColourData':
        """ 

`GetColourData`(*self*)[¶](#wx.ColourDialog.GetColourData "Permalink to this definition")
Returns the colour data associated with the colour dialog.



Return type
 [wx.ColourData](wx.ColourData.html#wx-colourdata)






            Source: https://docs.wxpython.org/wx.ColourDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.ColourDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning `wx.ID_OK` if the user pressed `wx.OK`, and `wx.ID_CANCEL` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ColourDialog.html
        """

    ColourData: '_ColourData'  # `ColourData`[¶](#wx.ColourDialog.ColourData "Permalink to this definition")See [`GetColourData`](#wx.ColourDialog.GetColourData "wx.ColourDialog.GetColourData")



class ColourDialogEvent(CommandEvent):
    """ **Possible constructors**:



```
ColourDialogEvent()

ColourDialogEvent(evtType, dialog, colour)

```


This event class is used for the events generated by ColourDialog.


  


        Source: https://docs.wxpython.org/wx.ColourDialogEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ColourDialogEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, evtType, dialog, colour)*


The constructor is not normally used by the user code.



Parameters
* **evtType** (*wx.EventType*) –
* **dialog** ([*wx.ColourDialog*](wx.ColourDialog.html#wx.ColourDialog "wx.ColourDialog")) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






---

  





            Source: https://docs.wxpython.org/wx.ColourDialogEvent.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.ColourDialogEvent.GetColour "Permalink to this definition")
Retrieve the colour the user has just selected.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ColourDialogEvent.html
        """

    def SetColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetColour`(*self*, *colour*)[¶](#wx.ColourDialogEvent.SetColour "Permalink to this definition")
Set the colour to be sent with the event.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.ColourDialogEvent.html
        """

    Colour: '_Colour'  # `Colour`[¶](#wx.ColourDialogEvent.Colour "Permalink to this definition")See [`GetColour`](#wx.ColourDialogEvent.GetColour "wx.ColourDialogEvent.GetColour") and [`SetColour`](#wx.ColourDialogEvent.SetColour "wx.ColourDialogEvent.SetColour")



EVT_COLOUR_CHANGED: int  # Generated whenever the currently selected colour in the dialog changes. This event is currently only implemented in wxMSW. ^^

class ColourPickerCtrl(PickerBase):
    """ **Possible constructors**:



```
ColourPickerCtrl()

ColourPickerCtrl(parent, id=ID_ANY, colour=BLACK, pos=DefaultPosition,
                 size=DefaultSize, style=CLRP_DEFAULT_STYLE, validator=DefaultValidator,
                 name=ColourPickerCtrlNameStr)

```


This control allows the user to select a colour.


  


        Source: https://docs.wxpython.org/wx.ColourPickerCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ColourPickerCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, colour=BLACK, pos=DefaultPosition, size=DefaultSize, style=CLRP\_DEFAULT\_STYLE, validator=DefaultValidator, name=ColourPickerCtrlNameStr)*


Initializes the object and calls [`Create`](#wx.ColourPickerCtrl.Create "wx.ColourPickerCtrl.Create") with all the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.ColourPickerCtrl.html
        """

    def Create(self, parent, id=ID_ANY, colour=BLACK, pos=DefaultPosition, size=DefaultSize, style=CLRP_DEFAULT_STYLE, validator=DefaultValidator, name=ColourPickerCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *colour=BLACK*, *pos=DefaultPosition*, *size=DefaultSize*, *style=CLRP\_DEFAULT\_STYLE*, *validator=DefaultValidator*, *name=ColourPickerCtrlNameStr*)[¶](#wx.ColourPickerCtrl.Create "Permalink to this definition")
Creates a colour picker with the given arguments.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window, must not be not `None`.
* **id** (*wx.WindowID*) – The identifier for the control.
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The initial colour shown in the control.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Initial position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Initial size.
* **style** (*long*) – The window style, see `CRLP_` flags.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Validator which can be used for additional data checks.
* **name** (*string*) – Control name.



Return type
*bool*



Returns
`True` if the control was successfully created or `False` if creation failed.






            Source: https://docs.wxpython.org/wx.ColourPickerCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ColourPickerCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ColourPickerCtrl.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.ColourPickerCtrl.GetColour "Permalink to this definition")
Returns the currently selected colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ColourPickerCtrl.html
        """

    def SetColour(self, *args, **kw) -> None:
        """ 

`SetColour`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ColourPickerCtrl.SetColour "Permalink to this definition")
Sets the currently selected colour.


See [`wx.Colour.Set`](wx.Colour.html#wx.Colour.Set "wx.Colour.Set") .


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetColour** *(self, col)*



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






---

  



**SetColour** *(self, colname)*



Parameters
**colname** (*string*) – 






---

  





            Source: https://docs.wxpython.org/wx.ColourPickerCtrl.html
        """

    Colour: '_Colour'  # `Colour`[¶](#wx.ColourPickerCtrl.Colour "Permalink to this definition")See [`GetColour`](#wx.ColourPickerCtrl.GetColour "wx.ColourPickerCtrl.GetColour") and [`SetColour`](#wx.ColourPickerCtrl.SetColour "wx.ColourPickerCtrl.SetColour")



CLRP_DEFAULT_STYLE: int  # The default style: 0.

CLRP_USE_TEXTCTRL: int  # Creates a text control to the left of the picker button which is completely managed by the   wx.ColourPickerCtrl  and which can be used by the user to specify a colour (see SetColour). The text control is automatically synchronized with button’s value. Use functions defined in   wx.PickerBase  to modify the text control.

CLRP_SHOW_LABEL: int  # Shows the colour in HTML form (AABBCC) as colour button label (instead of no label at all).

CLRP_SHOW_ALPHA: int  # Allows selecting opacity in the colour-chooser (effective under wxGTK and wxOSX). ^^

EVT_COLOURPICKER_CHANGED: int  # The user changed the colour selected in the control either using the button or using text control (see  CLRP_USE_TEXTCTRL ; note that in this case the event is fired only if the user’s input is valid, i.e. recognizable). When using a popup dialog for changing the colour, this event is sent only when the changes in the dialog are accepted by the user, unlike   EVT_COLOURPICKER_CURRENT_CHANGED .

EVT_COLOURPICKER_CURRENT_CHANGED: int  # The user changed the currently selected colour in the dialog associated with the control. This event is sent immediately when the selection changes and you must also handle  EVT_COLOUR_CANCELLED   to revert to the previously selected colour if the selection ends up not being accepted. This event is new since wxWidgets 3.1.3 and currently is only implemented in wxMSW.

EVT_COLOURPICKER_DIALOG_CANCELLED: int  # The user cancelled the colour dialog associated with the control, i.e. closed it without accepting the selection. This event is new since wxWidgets 3.1.3 and currently is only implemented in wxMSW. ^^

class ColourPickerEvent(CommandEvent):
    """ **Possible constructors**:



```
ColourPickerEvent()

ColourPickerEvent(generator, id, colour)

```


This event class is used for the events generated by
ColourPickerCtrl.


  


        Source: https://docs.wxpython.org/wx.ColourPickerEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ColourPickerEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, generator, id, colour)*


The constructor is not normally used by the user code.



Parameters
* **generator** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) –
* **id** (*int*) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






---

  





            Source: https://docs.wxpython.org/wx.ColourPickerEvent.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.ColourPickerEvent.GetColour "Permalink to this definition")
Retrieve the colour the user has just selected.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ColourPickerEvent.html
        """

    def SetColour(self, pos: Union[int, str, 'Colour']) -> None:
        """ 

`SetColour`(*self*, *pos*)[¶](#wx.ColourPickerEvent.SetColour "Permalink to this definition")
Set the colour associated with the event.



Parameters
**pos** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.ColourPickerEvent.html
        """

    Colour: '_Colour'  # `Colour`[¶](#wx.ColourPickerEvent.Colour "Permalink to this definition")See [`GetColour`](#wx.ColourPickerEvent.GetColour "wx.ColourPickerEvent.GetColour") and [`SetColour`](#wx.ColourPickerEvent.SetColour "wx.ColourPickerEvent.SetColour")



class ComboBox(Control,ItemContainer,TextEntry):
    """ **Possible constructors**:



```
ComboBox()

ComboBox(parent, id=ID_ANY, value="", pos=DefaultPosition,
         size=DefaultSize, choices=[], style=0, validator=DefaultValidator,
         name=ComboBoxNameStr)

```


A combobox is like a combination of an edit control and a listbox.


  


        Source: https://docs.wxpython.org/wx.ComboBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ComboBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, value=””, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ComboBoxNameStr)*


Constructor, creating and showing a combobox.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **value** (*string*) – Initial selection string. An empty string indicates no selection.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If DefaultSize is specified then the window is sized appropriately.
* **choices** (*list of strings*) – An array of strings with which to initialise the control.
* **style** (*long*) – Window style. See  [wx.ComboBox](#wx-combobox).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.






---

  





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def Create(self, parent, id=ID_ANY, value="", pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ComboBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *value=""*, *pos=DefaultPosition*, *size=DefaultSize*, *choices=[]*, *style=0*, *validator=DefaultValidator*, *name=ComboBoxNameStr*)[¶](#wx.ComboBox.Create "Permalink to this definition")
Creates the combobox for two-step construction.


Derived classes should call or replace this function. See  [wx.ComboBox](#wx-combobox) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **value** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **choices** (*list of strings*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def Dismiss(self) -> None:
        """ 

`Dismiss`(*self*)[¶](#wx.ComboBox.Dismiss "Permalink to this definition")
Hides the list box portion of the combo box.


Currently this method is implemented in wxMSW, wxGTK and OSX/Cocoa.


Notice that calling this function will generate a `wxEVT_COMBOBOX_CLOSEUP` event except under wxOSX where generation of this event is not supported at all.



New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def FindString(self, string, caseSensitive=False) -> int:
        """ 

`FindString`(*self*, *string*, *caseSensitive=False*)[¶](#wx.ComboBox.FindString "Permalink to this definition")
Finds an item whose label matches the given string.



Parameters
* **string** (*string*) – String to find.
* **caseSensitive** (*bool*) – Whether search is case sensitive (default is not).



Return type
*int*



Returns
The zero-based position of the item, or `wx.NOT_FOUND` if the string was not found.






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ComboBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def GetCount(self) -> int:
        """ 

`GetCount`(*self*)[¶](#wx.ComboBox.GetCount "Permalink to this definition")
Returns the number of items in the control.



Return type
*int*





See also


[`IsEmpty`](wx.TextEntry.html#wx.TextEntry.IsEmpty "wx.TextEntry.IsEmpty")





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def GetCurrentSelection(self) -> int:
        """ 

`GetCurrentSelection`(*self*)[¶](#wx.ComboBox.GetCurrentSelection "Permalink to this definition")
Returns the item being selected right now.


This function does the same things as [`wx.Choice.GetCurrentSelection`](wx.Choice.html#wx.Choice.GetCurrentSelection "wx.Choice.GetCurrentSelection") and returns the item currently selected in the dropdown list if it’s open or the same thing as `wx.ControlWithItems.GetSelection` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def GetInsertionPoint(self) -> int:
        """ 

`GetInsertionPoint`(*self*)[¶](#wx.ComboBox.GetInsertionPoint "Permalink to this definition")
Same as [`wx.TextEntry.GetInsertionPoint`](wx.TextEntry.html#wx.TextEntry.GetInsertionPoint "wx.TextEntry.GetInsertionPoint") .



Return type
*long*





Note


Under wxMSW, this function always returns 0 if the combobox doesn’t have the focus.





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.ComboBox.GetSelection "Permalink to this definition")
Returns the index of the selected item or `NOT_FOUND` if no item is selected.



Return type
*int*



Returns
The position of the current selection.





See also


[`SetSelection`](#wx.ComboBox.SetSelection "wx.ComboBox.SetSelection") , [`GetStringSelection`](#wx.ComboBox.GetStringSelection "wx.ComboBox.GetStringSelection")





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def GetTextSelection(self) -> tuple:
        """ 

`GetTextSelection`(*self*)[¶](#wx.ComboBox.GetTextSelection "Permalink to this definition")
Gets the current selection span.


If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) methods but don’t necessarily represent the correct indices into the string returned by [`GetValue`](wx.TextEntry.html#wx.TextEntry.GetValue "wx.TextEntry.GetValue") for multiline controls under Windows (at least,) you should use [`GetStringSelection`](#wx.ComboBox.GetStringSelection "wx.ComboBox.GetStringSelection") to get the selected text.



Return type
*tuple*






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def GetString(self, n: int) -> str:
        """ 

`GetString`(*self*, *n*)[¶](#wx.ComboBox.GetString "Permalink to this definition")
Returns the label of the item with the given index.


The index must be valid, i.e. less than the value returned by [`GetCount`](#wx.ComboBox.GetCount "wx.ComboBox.GetCount") , otherwise an assert is triggered. Notably, this function can’t be called if the control is empty.



Parameters
**n** (*int*) – The zero-based index.



Return type
`string`



Returns
The label of the item.






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def GetStringSelection(self) -> str:
        """ 

`GetStringSelection`(*self*)[¶](#wx.ComboBox.GetStringSelection "Permalink to this definition")
Gets the text currently selected in the control.


If there is no selection, the returned string is empty.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def IsListEmpty(self) -> bool:
        """ 

`IsListEmpty`(*self*)[¶](#wx.ComboBox.IsListEmpty "Permalink to this definition")
Returns `True` if the list of combobox choices is empty.


Use this method instead of (not available in this class) [`IsEmpty`](wx.TextEntry.html#wx.TextEntry.IsEmpty "wx.TextEntry.IsEmpty") to test if the list of items is empty.



Return type
*bool*





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def IsTextEmpty(self) -> bool:
        """ 

`IsTextEmpty`(*self*)[¶](#wx.ComboBox.IsTextEmpty "Permalink to this definition")
Returns `True` if the text of the combobox is empty.


Use this method instead of (not available in this class) [`IsEmpty`](wx.TextEntry.html#wx.TextEntry.IsEmpty "wx.TextEntry.IsEmpty") to test if the text currently entered into the combobox is empty.



Return type
*bool*





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def Popup(self) -> None:
        """ 

`Popup`(*self*)[¶](#wx.ComboBox.Popup "Permalink to this definition")
Shows the list box portion of the combo box.


Currently this method is implemented in wxMSW, wxGTK and OSX/Cocoa.


Notice that calling this function will generate a `wxEVT_COMBOBOX_DROPDOWN` event except under wxOSX where generation of this event is not supported at all.



New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def SetSelection(self, *args, **kw) -> None:
        """ 

`SetSelection`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ComboBox.SetSelection "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetSelection** *(self, from\_, to\_)*


Same as [`wx.TextEntry.SetSelection`](wx.TextEntry.html#wx.TextEntry.SetSelection "wx.TextEntry.SetSelection") .



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –






---

  



**SetSelection** *(self, n)*


Sets the selection to the given item *n* or removes the selection entirely if *n* == `NOT_FOUND` .


Note that this does not cause any command events to be emitted nor does it deselect any other items in the controls which support multiple selections.



Parameters
**n** (*int*) – The string position to select, starting from zero.





See also


[`SetString`](#wx.ComboBox.SetString "wx.ComboBox.SetString") , `SetStringSelection`





---

  





            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def SetString(self, n, text) -> None:
        """ 

`SetString`(*self*, *n*, *text*)[¶](#wx.ComboBox.SetString "Permalink to this definition")
Changes the text of the specified combobox item.


Notice that if the item is the currently selected one, i.e. if its text is displayed in the text part of the combobox, then the text is also replaced with the new *text*.



Parameters
* **n** (*int*) –
* **text** (*string*) –






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def SetTextSelection(self, from_, to_) -> None:
        """ 

`SetTextSelection`(*self*, *from\_*, *to\_*)[¶](#wx.ComboBox.SetTextSelection "Permalink to this definition")
Same as [`wx.TextEntry.SetSelection`](wx.TextEntry.html#wx.TextEntry.SetSelection "wx.TextEntry.SetSelection") .



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    def SetValue(self, text: str) -> None:
        """ 

`SetValue`(*self*, *text*)[¶](#wx.ComboBox.SetValue "Permalink to this definition")
Sets the text for the combobox text field.


For normal, editable comboboxes with a text entry field calling this method will generate a `wxEVT_TEXT` event, consistently with [`wx.TextEntry.SetValue`](wx.TextEntry.html#wx.TextEntry.SetValue "wx.TextEntry.SetValue") behaviour, use [`wx.TextEntry.ChangeValue`](wx.TextEntry.html#wx.TextEntry.ChangeValue "wx.TextEntry.ChangeValue") if this is undesirable.


For controls with `CB_READONLY` style the method behaves somewhat differently: the string must be in the combobox choices list (the check for this is case-insensitive) and `wxEVT_TEXT` is *not* generated in this case.



Parameters
**text** (*string*) – The text to set.






            Source: https://docs.wxpython.org/wx.ComboBox.html
        """

    Count: int  # `Count`[¶](#wx.ComboBox.Count "Permalink to this definition")See [`GetCount`](#wx.ComboBox.GetCount "wx.ComboBox.GetCount")
    CurrentSelection: int  # `CurrentSelection`[¶](#wx.ComboBox.CurrentSelection "Permalink to this definition")See [`GetCurrentSelection`](#wx.ComboBox.GetCurrentSelection "wx.ComboBox.GetCurrentSelection")
    InsertionPoint: int  # `InsertionPoint`[¶](#wx.ComboBox.InsertionPoint "Permalink to this definition")See [`GetInsertionPoint`](#wx.ComboBox.GetInsertionPoint "wx.ComboBox.GetInsertionPoint")
    Selection: int  # `Selection`[¶](#wx.ComboBox.Selection "Permalink to this definition")See [`GetSelection`](#wx.ComboBox.GetSelection "wx.ComboBox.GetSelection") and [`SetSelection`](#wx.ComboBox.SetSelection "wx.ComboBox.SetSelection")
    StringSelection: str  # `StringSelection`[¶](#wx.ComboBox.StringSelection "Permalink to this definition")See [`GetStringSelection`](#wx.ComboBox.GetStringSelection "wx.ComboBox.GetStringSelection")



CB_SIMPLE: int  # Creates a combobox with a permanently displayed list. Windows only.

CB_DROPDOWN: int  # Creates a combobox with a drop-down list. MSW and Motif only.

EVT_COMBOBOX: int  # Process a  wxEVT_COMBOBOX   event, when an item on the list is selected. Note that calling  GetValue  returns the new value of selection.

EVT_COMBOBOX_DROPDOWN: int  # Process a  wxEVT_COMBOBOX_DROPDOWN   event, which is generated when the list box part of the combo box is shown (drops down). Notice that this event is only supported by wxMSW, wxGTK with GTK+ 2.10 or later, and OSX/Cocoa.

EVT_COMBOBOX_CLOSEUP: int  # Process a  wxEVT_COMBOBOX_CLOSEUP   event, which is generated when the list box of the combo box disappears (closes up). This event is only generated for the same platforms as   wxEVT_COMBOBOX_DROPDOWN   above. ^^

_TextCtrl: TypeAlias = TextCtrl

class ComboCtrl(Control,TextEntry):
    """ **Possible constructors**:



```
ComboCtrl()

ComboCtrl(parent, id=ID_ANY, value="", pos=DefaultPosition,
          size=DefaultSize, style=0, validator=DefaultValidator,
          name=ComboBoxNameStr)

```


A combo control is a generic combobox that allows totally custom
popup.


  


        Source: https://docs.wxpython.org/wx.ComboCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ComboCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, value=””, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ComboBoxNameStr)*


Constructor, creating and showing a combo control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **value** (*string*) – Initial selection string. An empty string indicates no selection.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then the window is sized appropriately.
* **style** (*long*) – Window style. See  [wx.ComboCtrl](#wx-comboctrl).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.ComboCtrl.Create "wx.ComboCtrl.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def AnimateShow(self, rect, flags) -> bool:
        """ 

`AnimateShow`(*self*, *rect*, *flags*)[¶](#wx.ComboCtrl.AnimateShow "Permalink to this definition")
This member function is not normally called in application code.


Instead, it can be implemented in a derived class to create a custom popup animation.


The parameters are the same as those for [`DoShowPopup`](#wx.ComboCtrl.DoShowPopup "wx.ComboCtrl.DoShowPopup") .



Parameters
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –



Return type
*bool*



Returns
`True` if animation finishes before the function returns, `False` otherwise. In the latter case you need to manually call [`DoShowPopup`](#wx.ComboCtrl.DoShowPopup "wx.ComboCtrl.DoShowPopup") after the animation ends.






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Copy(self) -> None:
        """ 

`Copy`(*self*)[¶](#wx.ComboCtrl.Copy "Permalink to this definition")
Copies the selected text to the clipboard.




            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Create(self, parent, id=ID_ANY, value="", pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ComboBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *value=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=ComboBoxNameStr*)[¶](#wx.ComboCtrl.Create "Permalink to this definition")
Creates the combo control for two-step construction.


Derived classes should call or replace this function. See  [wx.ComboCtrl](#wx-comboctrl) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **value** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Cut(self) -> None:
        """ 

`Cut`(*self*)[¶](#wx.ComboCtrl.Cut "Permalink to this definition")
Copies the selected text to the clipboard and removes the selection.




            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Dismiss(self) -> None:
        """ 

`Dismiss`(*self*)[¶](#wx.ComboCtrl.Dismiss "Permalink to this definition")
Dismisses the popup window.


Notice that calling this function will generate a `wxEVT_COMBOBOX_CLOSEUP` event.



New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def DoSetPopupControl(self, popup: 'ComboPopup') -> None:
        """ 

`DoSetPopupControl`(*self*, *popup*)[¶](#wx.ComboCtrl.DoSetPopupControl "Permalink to this definition")
This member function is not normally called in application code.


Instead, it can be implemented in a derived class to return default  [wx.ComboPopup](wx.ComboPopup.html#wx-combopopup), in case *popup* is `None`.



Parameters
**popup** ([*wx.ComboPopup*](wx.ComboPopup.html#wx.ComboPopup "wx.ComboPopup")) – 





Note


If you have implemented [`OnButtonClick`](#wx.ComboCtrl.OnButtonClick "wx.ComboCtrl.OnButtonClick") to do something else than show the popup, then [`DoSetPopupControl`](#wx.ComboCtrl.DoSetPopupControl "wx.ComboCtrl.DoSetPopupControl") must always set *popup* to `None`.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def DoShowPopup(self, rect, flags) -> None:
        """ 

`DoShowPopup`(*self*, *rect*, *flags*)[¶](#wx.ComboCtrl.DoShowPopup "Permalink to this definition")
This member function is not normally called in application code.


Instead, it must be called in a derived class to make sure popup is properly shown after a popup animation has finished (but only if [`AnimateShow`](#wx.ComboCtrl.AnimateShow "wx.ComboCtrl.AnimateShow") did not finish the animation within its function scope).



Parameters
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – Position to show the popup window at, in screen coordinates.
* **flags** (*int*) – Combination of any of the following: `wx.ComboCtrl.ShowAbove` , and `wx.ComboCtrl.CanDeferShow` .






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def EnablePopupAnimation(self, enable: bool=True) -> None:
        """ 

`EnablePopupAnimation`(*self*, *enable=True*)[¶](#wx.ComboCtrl.EnablePopupAnimation "Permalink to this definition")
Enables or disables popup animation, if any, depending on the value of the argument.



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetBitmapDisabled(self) -> 'Bitmap':
        """ 

`GetBitmapDisabled`(*self*)[¶](#wx.ComboCtrl.GetBitmapDisabled "Permalink to this definition")
Returns disabled button bitmap that has been set with [`SetButtonBitmaps`](#wx.ComboCtrl.SetButtonBitmaps "wx.ComboCtrl.SetButtonBitmaps") .



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)



Returns
The disabled state bitmap.






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetBitmapHover(self) -> 'Bitmap':
        """ 

`GetBitmapHover`(*self*)[¶](#wx.ComboCtrl.GetBitmapHover "Permalink to this definition")
Returns button mouse hover bitmap that has been set with [`SetButtonBitmaps`](#wx.ComboCtrl.SetButtonBitmaps "wx.ComboCtrl.SetButtonBitmaps") .



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)



Returns
The mouse hover state bitmap.






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetBitmapNormal(self) -> 'Bitmap':
        """ 

`GetBitmapNormal`(*self*)[¶](#wx.ComboCtrl.GetBitmapNormal "Permalink to this definition")
Returns default button bitmap that has been set with [`SetButtonBitmaps`](#wx.ComboCtrl.SetButtonBitmaps "wx.ComboCtrl.SetButtonBitmaps") .



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)



Returns
The normal state bitmap.






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetBitmapPressed(self) -> 'Bitmap':
        """ 

`GetBitmapPressed`(*self*)[¶](#wx.ComboCtrl.GetBitmapPressed "Permalink to this definition")
Returns depressed button bitmap that has been set with [`SetButtonBitmaps`](#wx.ComboCtrl.SetButtonBitmaps "wx.ComboCtrl.SetButtonBitmaps") .



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)



Returns
The depressed state bitmap.






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetButtonSize(self) -> 'Size':
        """ 

`GetButtonSize`(*self*)[¶](#wx.ComboCtrl.GetButtonSize "Permalink to this definition")
Returns current size of the dropdown button.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ComboCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetCustomPaintWidth(self) -> int:
        """ 

`GetCustomPaintWidth`(*self*)[¶](#wx.ComboCtrl.GetCustomPaintWidth "Permalink to this definition")
Returns custom painted area in control.



Return type
*int*





See also


[`SetCustomPaintWidth`](#wx.ComboCtrl.SetCustomPaintWidth "wx.ComboCtrl.SetCustomPaintWidth") .





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    @staticmethod
    def GetFeatures() -> int:
        """ 

*static* `GetFeatures`()[¶](#wx.ComboCtrl.GetFeatures "Permalink to this definition")
Returns features supported by  [wx.ComboCtrl](#wx-comboctrl).


If needed feature is missing, you need to instead use GenericComboCtrl, which however may lack a native look and feel (but otherwise sports identical API).



Return type
*int*



Returns
Value returned is a combination of the flags defined in  [wx.ComboCtrlFeatures](wx.ComboCtrlFeatures.html#wx-comboctrlfeatures).






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetHint(self) -> str:
        """ 

`GetHint`(*self*)[¶](#wx.ComboCtrl.GetHint "Permalink to this definition")
Returns the current hint string.


See [`SetHint`](#wx.ComboCtrl.SetHint "wx.ComboCtrl.SetHint") for more information about hints.



Return type
`string`





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetInsertionPoint(self) -> int:
        """ 

`GetInsertionPoint`(*self*)[¶](#wx.ComboCtrl.GetInsertionPoint "Permalink to this definition")
Returns the insertion point for the combo control’s text field.



Return type
*long*





Note


Under Windows, this function always returns 0 if the combo control doesn’t have the focus.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetLastPosition(self) -> int:
        """ 

`GetLastPosition`(*self*)[¶](#wx.ComboCtrl.GetLastPosition "Permalink to this definition")
Returns the last position in the combo control text field.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetMargins(self) -> 'Point':
        """ 

`GetMargins`(*self*)[¶](#wx.ComboCtrl.GetMargins "Permalink to this definition")
Returns the margins used by the control.


The `x` field of the returned point is the horizontal margin and the `y` field is the vertical one.



Return type
 [wx.Point](wx.Point.html#wx-point)





New in version 2.9.1.




Note


If given margin cannot be accurately determined, its value will be set to -1.




See also


[`SetMargins`](#wx.ComboCtrl.SetMargins "wx.ComboCtrl.SetMargins")





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetPopupControl(self) -> 'ComboPopup':
        """ 

`GetPopupControl`(*self*)[¶](#wx.ComboCtrl.GetPopupControl "Permalink to this definition")
Returns current popup interface that has been set with [`SetPopupControl`](#wx.ComboCtrl.SetPopupControl "wx.ComboCtrl.SetPopupControl") .



Return type
 [wx.ComboPopup](wx.ComboPopup.html#wx-combopopup)






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetPopupWindow(self) -> 'Window':
        """ 

`GetPopupWindow`(*self*)[¶](#wx.ComboCtrl.GetPopupWindow "Permalink to this definition")
Returns popup window containing the popup control.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetTextCtrl(self) -> 'TextCtrl':
        """ 

`GetTextCtrl`(*self*)[¶](#wx.ComboCtrl.GetTextCtrl "Permalink to this definition")
Get the text control which is part of the combo control.



Return type
 [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl)






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetTextRect(self) -> 'Rect':
        """ 

`GetTextRect`(*self*)[¶](#wx.ComboCtrl.GetTextRect "Permalink to this definition")
Returns area covered by the text field (includes everything except borders and the dropdown button).



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def GetValue(self) -> str:
        """ 

`GetValue`(*self*)[¶](#wx.ComboCtrl.GetValue "Permalink to this definition")
Returns text representation of the current value.


For writable combo control it always returns the value in the text field.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def HidePopup(self, generateEvent: bool=False) -> None:
        """ 

`HidePopup`(*self*, *generateEvent=False*)[¶](#wx.ComboCtrl.HidePopup "Permalink to this definition")
Dismisses the popup window.



Parameters
**generateEvent** (*bool*) – Set this to `True` in order to generate `wxEVT_COMBOBOX_CLOSEUP` event.





Deprecated


Use [`Dismiss`](#wx.ComboCtrl.Dismiss "wx.ComboCtrl.Dismiss") instead.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def IsKeyPopupToggle(self, event: 'KeyEvent') -> bool:
        """ 

`IsKeyPopupToggle`(*self*, *event*)[¶](#wx.ComboCtrl.IsKeyPopupToggle "Permalink to this definition")
Returns `True` if given key combination should toggle the popup.



Parameters
**event** ([*wx.KeyEvent*](wx.KeyEvent.html#wx.KeyEvent "wx.KeyEvent")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def IsPopupShown(self) -> bool:
        """ 

`IsPopupShown`(*self*)[¶](#wx.ComboCtrl.IsPopupShown "Permalink to this definition")
Returns `True` if the popup is currently shown.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def IsPopupWindowState(self, state: int) -> bool:
        """ 

`IsPopupWindowState`(*self*, *state*)[¶](#wx.ComboCtrl.IsPopupWindowState "Permalink to this definition")
Returns `True` if the popup window is in the given state.


Possible values are:







| *ComboCtrl.Hidden* | Popup window is hidden. |
| --- | --- |
| *ComboCtrl.Animating* | Popup window is being shown, but the popup animation has not yet finished. |
| *ComboCtrl.Visible* | Popup window is fully visible. |



  



Parameters
**state** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def OnButtonClick(self) -> None:
        """ 

`OnButtonClick`(*self*)[¶](#wx.ComboCtrl.OnButtonClick "Permalink to this definition")
Implement in a derived class to define what happens on dropdown button click.


Default action is to show the popup.



Note


If you implement this to do something else than show the popup, you must then also implement [`DoSetPopupControl`](#wx.ComboCtrl.DoSetPopupControl "wx.ComboCtrl.DoSetPopupControl") to always return `None`.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Paste(self) -> None:
        """ 

`Paste`(*self*)[¶](#wx.ComboCtrl.Paste "Permalink to this definition")
Pastes text from the clipboard to the text field.




            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Popup(self) -> None:
        """ 

`Popup`(*self*)[¶](#wx.ComboCtrl.Popup "Permalink to this definition")
Shows the popup portion of the combo control.


Notice that calling this function will generate a `wxEVT_COMBOBOX_DROPDOWN` event.



New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def PrepareBackground(self, dc, rect, flags) -> None:
        """ 

`PrepareBackground`(*self*, *dc*, *rect*, *flags*)[¶](#wx.ComboCtrl.PrepareBackground "Permalink to this definition")
Prepare background of combo control or an item in a dropdown list in a way typical on platform.


This includes painting the focus/disabled background and setting the clipping region.


Unless you plan to paint your own focus indicator, you should always call this in your [`wx.ComboPopup.PaintComboControl`](wx.ComboPopup.html#wx.ComboPopup.PaintComboControl "wx.ComboPopup.PaintComboControl") implementation. In addition, it sets pen and text colour to what looks good and proper against the background.


flags:  [wx.RendererNative](wx.RendererNative.html#wx-renderernative) flags: `wx.CONTROL_ISSUBMENU`: is drawing a list item instead of combo control `wx.CONTROL_SELECTED`: list item is selected `wx.CONTROL_DISABLED`: control/item is disabled



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Remove(self, frm, to) -> None:
        """ 

`Remove`(*self*, *frm*, *to*)[¶](#wx.ComboCtrl.Remove "Permalink to this definition")
Removes the text between the two positions in the combo control text field.



Parameters
* **frm** (*long*) –
* **to** (*long*) – The last position.




The first position.




            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Replace(self, frm, to, text) -> None:
        """ 

`Replace`(*self*, *frm*, *to*, *text*)[¶](#wx.ComboCtrl.Replace "Permalink to this definition")
Replaces the text between two positions with the given text, in the combo control text field.



Parameters
* **frm** (*long*) –
* **to** (*long*) – The second position.
* **text** (*string*) – The text to insert.




The first position.




            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetButtonBitmaps(*args, **kwargs) -> None:
        """ 

`SetButtonBitmaps`(*self*, *bmpNormal*, *pushButtonBg=False*, *bmpPressed=BitmapBundle()*, *bmpHover=BitmapBundle()*, *bmpDisabled=BitmapBundle()*)[¶](#wx.ComboCtrl.SetButtonBitmaps "Permalink to this definition")
Sets custom dropdown button graphics.



Parameters
* **bmpNormal** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – Default button image.
* **pushButtonBg** (*bool*) – If `True`, blank push button background is painted below the image.
* **bmpPressed** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – Depressed button image.
* **bmpHover** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – Button image when mouse hovers above it. This should be ignored on platforms and themes that do not generally draw different kind of button on mouse hover.
* **bmpDisabled** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – Disabled button image.






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetButtonPosition(self, width=-1, height=-1, side=RIGHT, spacingX=0) -> None:
        """ 

`SetButtonPosition`(*self*, *width=-1*, *height=-1*, *side=RIGHT*, *spacingX=0*)[¶](#wx.ComboCtrl.SetButtonPosition "Permalink to this definition")
Sets size and position of dropdown button.



Parameters
* **width** (*int*) – Button width. Value = 0 specifies default.
* **height** (*int*) – Button height. Value = 0 specifies default.
* **side** (*int*) – Indicates which side the button will be placed. Value can be `wx.LEFT` or `wx.RIGHT`.
* **spacingX** (*int*) – Horizontal spacing around the button. Default is 0.






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetCustomPaintWidth(self, width: int) -> None:
        """ 

`SetCustomPaintWidth`(*self*, *width*)[¶](#wx.ComboCtrl.SetCustomPaintWidth "Permalink to this definition")
Set width, in pixels, of custom painted area in control without `CB_READONLY` style.


In read-only  [wx.adv.OwnerDrawnComboBox](wx.adv.OwnerDrawnComboBox.html#wx-adv-ownerdrawncombobox), this is used to indicate area that is not covered by the focus rectangle.



Parameters
**width** (*int*) – 






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetHint(self, hint: str) -> bool:
        """ 

`SetHint`(*self*, *hint*)[¶](#wx.ComboCtrl.SetHint "Permalink to this definition")
Sets a hint shown in an empty unfocused combo control.


Notice that hints are known as *cue banners* under MSW or *placeholder strings* under macOS.



Parameters
**hint** (*string*) – 



Return type
*bool*





New in version 2.9.1.




See also


[`wx.TextEntry.SetHint`](wx.TextEntry.html#wx.TextEntry.SetHint "wx.TextEntry.SetHint")





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetInsertionPoint(self, pos: int) -> None:
        """ 

`SetInsertionPoint`(*self*, *pos*)[¶](#wx.ComboCtrl.SetInsertionPoint "Permalink to this definition")
Sets the insertion point in the text field.



Parameters
**pos** (*long*) – The new insertion point.






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetInsertionPointEnd(self) -> None:
        """ 

`SetInsertionPointEnd`(*self*)[¶](#wx.ComboCtrl.SetInsertionPointEnd "Permalink to this definition")
Sets the insertion point at the end of the combo control text field.




            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetMainControl(self, win: 'Window') -> None:
        """ 

`SetMainControl`(*self*, *win*)[¶](#wx.ComboCtrl.SetMainControl "Permalink to this definition")
Uses the given window instead of the default text control as the main window of the combo control.


By default, combo controls without `CB_READONLY` style create a  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) which shows the current value and allows to edit it. This method allows to use some other window instead of this  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl).


This method can be called after creating the combo fully, however in this case a  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) is unnecessarily created just to be immediately destroyed when it’s replaced by a custom window. If you wish to avoid this, you can use the following approach, also shown in the combo sample:



```
# Create the combo control using its default ctor.
combo = wx.ComboCtrl()

# Create the custom main control using its default ctor too.
someMainWindow = SomeWindow()

# Set the custom main control before creating the combo.
combo.SetMainControl(someMainWindow)

# And only create it now: wx.TextCtrl won't be unnecessarily
# created because the combo already has a main window.
combo.Create(panel, wx.ID_ANY, "")

# Finally create the main window itself, now that its parent was
# created.
someMainWindow.Create(combo, ...)

```


Note that when a custom main window is used, none of the methods of this class inherited from  [wx.TextEntry](wx.TextEntry.html#wx-textentry), such as [`SetValue`](#wx.ComboCtrl.SetValue "wx.ComboCtrl.SetValue") , [`Replace`](#wx.ComboCtrl.Replace "wx.ComboCtrl.Replace") , [`SetInsertionPoint`](#wx.ComboCtrl.SetInsertionPoint "wx.ComboCtrl.SetInsertionPoint") etc do anything and simply return.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetMargins(self, *args, **kw) -> None:
        """ 

`SetMargins`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ComboCtrl.SetMargins "Permalink to this definition")
Attempts to set the control margins.


When margins are given as  [wx.Point](wx.Point.html#wx-point), x indicates the left and y the top margin. Use -1 to indicate that an existing value should be used.



Returns
`True` if setting of all requested margins was successful.





New in version 2.9.1.



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetMargins** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
*bool*






---

  



**SetMargins** *(self, left, top=-1)*



Parameters
* **left** (*int*) –
* **top** (*int*) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetPopupAnchor(self, anchorSide: int) -> None:
        """ 

`SetPopupAnchor`(*self*, *anchorSide*)[¶](#wx.ComboCtrl.SetPopupAnchor "Permalink to this definition")
Set side of the control to which the popup will align itself.


Valid values are `LEFT` , `RIGHT` and 0. The default value 0 means that the most appropriate side is used (which, currently, is always `LEFT` ).



Parameters
**anchorSide** (*int*) – 






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetPopupControl(self, popup: 'ComboPopup') -> None:
        """ 

`SetPopupControl`(*self*, *popup*)[¶](#wx.ComboCtrl.SetPopupControl "Permalink to this definition")
Set popup interface class derived from  [wx.ComboPopup](wx.ComboPopup.html#wx-combopopup).


This method should be called as soon as possible after the control has been created, unless [`OnButtonClick`](#wx.ComboCtrl.OnButtonClick "wx.ComboCtrl.OnButtonClick") has been overridden.



Parameters
**popup** ([*wx.ComboPopup*](wx.ComboPopup.html#wx.ComboPopup "wx.ComboPopup")) – 






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetPopupExtents(self, extLeft, extRight) -> None:
        """ 

`SetPopupExtents`(*self*, *extLeft*, *extRight*)[¶](#wx.ComboCtrl.SetPopupExtents "Permalink to this definition")
Extends popup size horizontally, relative to the edges of the combo control.



Parameters
* **extLeft** (*int*) – How many pixel to extend beyond the left edge of the control. Default is 0.
* **extRight** (*int*) – How many pixel to extend beyond the right edge of the control. Default is 0.





Note


Popup minimum width may override arguments. It is up to the popup to fully take this into account.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetPopupMaxHeight(self, height: int) -> None:
        """ 

`SetPopupMaxHeight`(*self*, *height*)[¶](#wx.ComboCtrl.SetPopupMaxHeight "Permalink to this definition")
Sets preferred maximum height of the popup.



Parameters
**height** (*int*) – 





Note


Value -1 indicates the default.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetPopupMinWidth(self, width: int) -> None:
        """ 

`SetPopupMinWidth`(*self*, *width*)[¶](#wx.ComboCtrl.SetPopupMinWidth "Permalink to this definition")
Sets minimum width of the popup.


If wider than combo control, it will extend to the left.



Parameters
**width** (*int*) – 





Note


Value -1 indicates the default. Also, popup implementation may choose to ignore this.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetSelection(self, frm, to) -> None:
        """ 

`SetSelection`(*self*, *frm*, *to*)[¶](#wx.ComboCtrl.SetSelection "Permalink to this definition")
Selects the text between the two positions, in the combo control text field.



Parameters
* **frm** (*long*) –
* **to** (*long*) – The second position.




The first position.




            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetText(self, value: str) -> None:
        """ 

`SetText`(*self*, *value*)[¶](#wx.ComboCtrl.SetText "Permalink to this definition")
Sets the text for the text field without affecting the popup.


Thus, unlike [`SetValue`](#wx.ComboCtrl.SetValue "wx.ComboCtrl.SetValue") , it works equally well with combo control using `CB_READONLY` style.



Parameters
**value** (*string*) – 






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetTextCtrlStyle(self, style: int) -> None:
        """ 

`SetTextCtrlStyle`(*self*, *style*)[¶](#wx.ComboCtrl.SetTextCtrlStyle "Permalink to this definition")
Set a custom window style for the embedded  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl).


Usually you will need to use this during two-step creation, just before [`Create`](#wx.ComboCtrl.Create "wx.ComboCtrl.Create") . For example:



```
comboCtrl = wx.ComboCtrl()

# Let's make the text right-aligned
comboCtrl.SetTextCtrlStyle(wx.TE_RIGHT)

comboCtrl.Create(parent, wx.ID_ANY, "")

```



Parameters
**style** (*int*) – 






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetValue(self, value: str) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.ComboCtrl.SetValue "Permalink to this definition")
Sets the text for the combo control text field.



Parameters
**value** (*string*) – 





Note


For a combo control with `CB_READONLY` style the string must be accepted by the popup (for instance, exist in the dropdown list), otherwise the call to [`SetValue`](#wx.ComboCtrl.SetValue "wx.ComboCtrl.SetValue") is ignored.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def SetValueByUser(self, value: str) -> None:
        """ 

`SetValueByUser`(*self*, *value*)[¶](#wx.ComboCtrl.SetValueByUser "Permalink to this definition")
Changes value of the control as if user had done it by selecting an item from a combo box drop-down list.



Parameters
**value** (*string*) – 






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def ShouldDrawFocus(self) -> bool:
        """ 

`ShouldDrawFocus`(*self*)[¶](#wx.ComboCtrl.ShouldDrawFocus "Permalink to this definition")
Returns `True` if focus indicator should be drawn in the control.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def ShowPopup(self) -> None:
        """ 

`ShowPopup`(*self*)[¶](#wx.ComboCtrl.ShowPopup "Permalink to this definition")
Show the popup.



Deprecated


Use [`Popup`](#wx.ComboCtrl.Popup "wx.ComboCtrl.Popup") instead.





            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def Undo(self) -> None:
        """ 

`Undo`(*self*)[¶](#wx.ComboCtrl.Undo "Permalink to this definition")
Undoes the last edit in the text field.


Windows only.




            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    def UseAltPopupWindow(self, enable: bool=True) -> None:
        """ 

`UseAltPopupWindow`(*self*, *enable=True*)[¶](#wx.ComboCtrl.UseAltPopupWindow "Permalink to this definition")
Enable or disable usage of an alternative popup window, which guarantees ability to focus the popup control, and allows common native controls to function normally.


This alternative popup window is usually a  [wx.Dialog](wx.Dialog.html#wx-dialog), and as such, when it is shown, its parent top-level window will appear as if the focus has been lost from it.



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.ComboCtrl.html
        """

    BitmapDisabled: 'Bitmap'  # `BitmapDisabled`[¶](#wx.ComboCtrl.BitmapDisabled "Permalink to this definition")See [`GetBitmapDisabled`](#wx.ComboCtrl.GetBitmapDisabled "wx.ComboCtrl.GetBitmapDisabled")
    BitmapHover: 'Bitmap'  # `BitmapHover`[¶](#wx.ComboCtrl.BitmapHover "Permalink to this definition")See [`GetBitmapHover`](#wx.ComboCtrl.GetBitmapHover "wx.ComboCtrl.GetBitmapHover")
    BitmapNormal: 'Bitmap'  # `BitmapNormal`[¶](#wx.ComboCtrl.BitmapNormal "Permalink to this definition")See [`GetBitmapNormal`](#wx.ComboCtrl.GetBitmapNormal "wx.ComboCtrl.GetBitmapNormal")
    BitmapPressed: 'Bitmap'  # `BitmapPressed`[¶](#wx.ComboCtrl.BitmapPressed "Permalink to this definition")See [`GetBitmapPressed`](#wx.ComboCtrl.GetBitmapPressed "wx.ComboCtrl.GetBitmapPressed")
    ButtonSize: 'Size'  # `ButtonSize`[¶](#wx.ComboCtrl.ButtonSize "Permalink to this definition")See [`GetButtonSize`](#wx.ComboCtrl.GetButtonSize "wx.ComboCtrl.GetButtonSize")
    CustomPaintWidth: int  # `CustomPaintWidth`[¶](#wx.ComboCtrl.CustomPaintWidth "Permalink to this definition")See [`GetCustomPaintWidth`](#wx.ComboCtrl.GetCustomPaintWidth "wx.ComboCtrl.GetCustomPaintWidth") and [`SetCustomPaintWidth`](#wx.ComboCtrl.SetCustomPaintWidth "wx.ComboCtrl.SetCustomPaintWidth")
    Hint: str  # `Hint`[¶](#wx.ComboCtrl.Hint "Permalink to this definition")See [`GetHint`](#wx.ComboCtrl.GetHint "wx.ComboCtrl.GetHint") and [`SetHint`](#wx.ComboCtrl.SetHint "wx.ComboCtrl.SetHint")
    InsertionPoint: int  # `InsertionPoint`[¶](#wx.ComboCtrl.InsertionPoint "Permalink to this definition")See [`GetInsertionPoint`](#wx.ComboCtrl.GetInsertionPoint "wx.ComboCtrl.GetInsertionPoint") and [`SetInsertionPoint`](#wx.ComboCtrl.SetInsertionPoint "wx.ComboCtrl.SetInsertionPoint")
    LastPosition: int  # `LastPosition`[¶](#wx.ComboCtrl.LastPosition "Permalink to this definition")See [`GetLastPosition`](#wx.ComboCtrl.GetLastPosition "wx.ComboCtrl.GetLastPosition")
    Margins: 'Point'  # `Margins`[¶](#wx.ComboCtrl.Margins "Permalink to this definition")See [`GetMargins`](#wx.ComboCtrl.GetMargins "wx.ComboCtrl.GetMargins") and [`SetMargins`](#wx.ComboCtrl.SetMargins "wx.ComboCtrl.SetMargins")
    PopupControl: 'ComboPopup'  # `PopupControl`[¶](#wx.ComboCtrl.PopupControl "Permalink to this definition")See [`GetPopupControl`](#wx.ComboCtrl.GetPopupControl "wx.ComboCtrl.GetPopupControl") and [`SetPopupControl`](#wx.ComboCtrl.SetPopupControl "wx.ComboCtrl.SetPopupControl")
    PopupWindow: 'Window'  # `PopupWindow`[¶](#wx.ComboCtrl.PopupWindow "Permalink to this definition")See [`GetPopupWindow`](#wx.ComboCtrl.GetPopupWindow "wx.ComboCtrl.GetPopupWindow")
    TextCtrl: '_TextCtrl'  # `TextCtrl`[¶](#wx.ComboCtrl.TextCtrl "Permalink to this definition")See [`GetTextCtrl`](#wx.ComboCtrl.GetTextCtrl "wx.ComboCtrl.GetTextCtrl")
    TextRect: 'Rect'  # `TextRect`[¶](#wx.ComboCtrl.TextRect "Permalink to this definition")See [`GetTextRect`](#wx.ComboCtrl.GetTextRect "wx.ComboCtrl.GetTextRect")
    Value: str  # `Value`[¶](#wx.ComboCtrl.Value "Permalink to this definition")See [`GetValue`](#wx.ComboCtrl.GetValue "wx.ComboCtrl.GetValue") and [`SetValue`](#wx.ComboCtrl.SetValue "wx.ComboCtrl.SetValue")



CC_SPECIAL_DCLICK: int  # Double-clicking triggers a call to popup’s OnComboDoubleClick. Actual behaviour is defined by a derived class. For instance,   wx.adv.OwnerDrawnComboBox  will cycle an item. This style only applies if wx.CB_READONLY is used as well.

CC_STD_BUTTON: int  # Drop button will behave more like a standard push button. ^^

CONTROL_ISSUBMENU: int

CONTROL_SELECTED: int

CONTROL_DISABLED: int

class ComboCtrlFeatures:
    """ Features enabled for ComboCtrl.




        Source: https://docs.wxpython.org/wx.ComboCtrlFeatures.html
    """


_ComboCtrl: TypeAlias = ComboCtrl

class ComboPopup:
    """ **Possible constructors**:



```
ComboPopup()

```


In order to use a custom popup with ComboCtrl, an interface class
must be derived from ComboPopup.


  


        Source: https://docs.wxpython.org/wx.ComboPopup.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ComboPopup.__init__ "Permalink to this definition")
Default constructor.


It is recommended that internal variables are prepared in [`Init`](#wx.ComboPopup.Init "wx.ComboPopup.Init") instead (because m\_combo is not valid in constructor).




            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def Create(self, parent: 'Window') -> bool:
        """ 

`Create`(*self*, *parent*)[¶](#wx.ComboPopup.Create "Permalink to this definition")
The derived class must implement this to create the popup control.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*



Returns
`True` if the call succeeded, `False` otherwise.






            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def DestroyPopup(self) -> None:
        """ 

`DestroyPopup`(*self*)[¶](#wx.ComboPopup.DestroyPopup "Permalink to this definition")
You only need to implement this member function if you create your popup class in non-standard way.


The default implementation can handle both multiple-inherited popup control (as seen in  [wx.ComboCtrl](wx.ComboCtrl.html#wx-comboctrl) samples) and one allocated separately in heap.


If you do completely re-implement this function, make sure it calls Destroy() for the popup control and also deletes `this` object (usually as the last thing).




            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def Dismiss(self) -> None:
        """ 

`Dismiss`(*self*)[¶](#wx.ComboPopup.Dismiss "Permalink to this definition")
Utility function that hides the popup.




            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def FindItem(self, item, trueItem=None) -> bool:
        """ 

`FindItem`(*self*, *item*, *trueItem=None*)[¶](#wx.ComboPopup.FindItem "Permalink to this definition")
Implement to customize matching of value string to an item container entry.



Parameters
* **item** (*string*) – String entered, usually by user or from SetValue() call.
* **trueItem** (*string*) – When item matches an entry, but the entry’s string representation is not exactly the same (case mismatch, for example), then the `True` item string should be written back to here, if it is not a `None` pointer.



Return type
*bool*





Note


Default implementation always return `True` and does not alter trueItem.





            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def GetAdjustedSize(self, minWidth, prefHeight, maxHeight) -> 'Size':
        """ 

`GetAdjustedSize`(*self*, *minWidth*, *prefHeight*, *maxHeight*)[¶](#wx.ComboPopup.GetAdjustedSize "Permalink to this definition")
The derived class may implement this to return adjusted size for the popup control, according to the variables given.



Parameters
* **minWidth** (*int*) – Preferred minimum width.
* **prefHeight** (*int*) – Preferred height. May be -1 to indicate no preference.
* **maxHeight** (*int*) – Max height for window, as limited by screen size.



Return type
 [wx.Size](wx.Size.html#wx-size)





Note


This function is called each time popup is about to be shown.





            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def GetComboCtrl(self) -> 'ComboCtrl':
        """ 

`GetComboCtrl`(*self*)[¶](#wx.ComboPopup.GetComboCtrl "Permalink to this definition")
Returns pointer to the associated parent  [wx.ComboCtrl](wx.ComboCtrl.html#wx-comboctrl).



Return type
 [wx.ComboCtrl](wx.ComboCtrl.html#wx-comboctrl)






            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def GetControl(self) -> 'Window':
        """ 

`GetControl`(*self*)[¶](#wx.ComboPopup.GetControl "Permalink to this definition")
The derived class must implement this to return pointer to the associated control created in [`Create`](#wx.ComboPopup.Create "wx.ComboPopup.Create") .



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def GetStringValue(self) -> str:
        """ 

`GetStringValue`(*self*)[¶](#wx.ComboPopup.GetStringValue "Permalink to this definition")
The derived class must implement this to return string representation of the value.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def Init(self) -> None:
        """ 

`Init`(*self*)[¶](#wx.ComboPopup.Init "Permalink to this definition")
The derived class must implement this to initialize its internal variables.


This method is called immediately after construction finishes. m\_combo member variable has been initialized before the call.




            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def IsCreated(self) -> bool:
        """ 

`IsCreated`(*self*)[¶](#wx.ComboPopup.IsCreated "Permalink to this definition")
Utility method that returns `True` if Create has been called.


Useful in conjunction with [`LazyCreate`](#wx.ComboPopup.LazyCreate "wx.ComboPopup.LazyCreate") .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def LazyCreate(self) -> bool:
        """ 

`LazyCreate`(*self*)[¶](#wx.ComboPopup.LazyCreate "Permalink to this definition")
The derived class may implement this to return `True` if it wants to delay call to [`Create`](#wx.ComboPopup.Create "wx.ComboPopup.Create") until the popup is shown for the first time.


It is more efficient, but on the other hand it is often more convenient to have the control created immediately.



Return type
*bool*





Note


Base implementation returns `False`.





            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def OnComboDoubleClick(self) -> None:
        """ 

`OnComboDoubleClick`(*self*)[¶](#wx.ComboPopup.OnComboDoubleClick "Permalink to this definition")
The derived class may implement this to do something when the parent  [wx.ComboCtrl](wx.ComboCtrl.html#wx-comboctrl) gets double-clicked.




            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def OnComboKeyEvent(self, event: 'KeyEvent') -> None:
        """ 

`OnComboKeyEvent`(*self*, *event*)[¶](#wx.ComboPopup.OnComboKeyEvent "Permalink to this definition")
The derived class may implement this to receive key events from the parent  [wx.ComboCtrl](wx.ComboCtrl.html#wx-comboctrl).


Events not handled should be skipped, as usual.



Parameters
**event** ([*wx.KeyEvent*](wx.KeyEvent.html#wx.KeyEvent "wx.KeyEvent")) – 






            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def OnDismiss(self) -> None:
        """ 

`OnDismiss`(*self*)[¶](#wx.ComboPopup.OnDismiss "Permalink to this definition")
The derived class may implement this to do special processing when popup is hidden.




            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def OnPopup(self) -> None:
        """ 

`OnPopup`(*self*)[¶](#wx.ComboPopup.OnPopup "Permalink to this definition")
The derived class may implement this to do special processing when popup is shown.




            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def PaintComboControl(self, dc, rect) -> None:
        """ 

`PaintComboControl`(*self*, *dc*, *rect*)[¶](#wx.ComboPopup.PaintComboControl "Permalink to this definition")
The derived class may implement this to paint the parent  [wx.ComboCtrl](wx.ComboCtrl.html#wx-comboctrl).


Default implementation draws value as string.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –






            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    def SetStringValue(self, value: str) -> None:
        """ 

`SetStringValue`(*self*, *value*)[¶](#wx.ComboPopup.SetStringValue "Permalink to this definition")
The derived class must implement this to receive string value changes from  [wx.ComboCtrl](wx.ComboCtrl.html#wx-comboctrl).



Parameters
**value** (*string*) – 






            Source: https://docs.wxpython.org/wx.ComboPopup.html
        """

    ComboCtrl: '_ComboCtrl'  # `ComboCtrl`[¶](#wx.ComboPopup.ComboCtrl "Permalink to this definition")See [`GetComboCtrl`](#wx.ComboPopup.GetComboCtrl "wx.ComboPopup.GetComboCtrl")
    Control: 'Window'  # `Control`[¶](#wx.ComboPopup.Control "Permalink to this definition")See [`GetControl`](#wx.ComboPopup.GetControl "wx.ComboPopup.GetControl")
    StringValue: str  # `StringValue`[¶](#wx.ComboPopup.StringValue "Permalink to this definition")See [`GetStringValue`](#wx.ComboPopup.GetStringValue "wx.ComboPopup.GetStringValue") and [`SetStringValue`](#wx.ComboPopup.SetStringValue "wx.ComboPopup.SetStringValue")



class Command(Object):
    """ **Possible constructors**:



```
Command(canUndo=False, name="")

```


Command is a base class for modelling an application command, which
is an action usually performed by selecting a menu item, pressing a
toolbar button or any other means provided by the application to
change the data or view.


  


        Source: https://docs.wxpython.org/wx.Command.html
    """
    def __init__(self, canUndo=False, name="") -> None:
        """ 

`__init__`(*self*, *canUndo=False*, *name=""*)[¶](#wx.Command.__init__ "Permalink to this definition")
Constructor.


 [wx.Command](#wx-command) is an abstract class, so you will need to derive a new class and call this constructor from your own constructor.



Parameters
* **canUndo** (*bool*) – Tells the command processor whether this command is undo-able. You can achieve the same functionality by overriding the [`CanUndo`](#wx.Command.CanUndo "wx.Command.CanUndo") member function (if for example the criteria for undoability is context-dependent).
* **name** (*string*) – Must be supplied for the command processor to display the command name in the application’s edit menu.






            Source: https://docs.wxpython.org/wx.Command.html
        """

    def CanUndo(self) -> bool:
        """ 

`CanUndo`(*self*)[¶](#wx.Command.CanUndo "Permalink to this definition")
Returns `True` if the command can be undone, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Command.html
        """

    def Do(self) -> bool:
        """ 

`Do`(*self*)[¶](#wx.Command.Do "Permalink to this definition")
Override this member function to execute the appropriate action when called.



Return type
*bool*



Returns
`True` to indicate that the action has taken place, `False` otherwise. Returning `False` will indicate to the command processor that the action is not undoable and should not be added to the command history.






            Source: https://docs.wxpython.org/wx.Command.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.Command.GetName "Permalink to this definition")
Returns the command name.



Return type
`string`






            Source: https://docs.wxpython.org/wx.Command.html
        """

    def Undo(self) -> bool:
        """ 

`Undo`(*self*)[¶](#wx.Command.Undo "Permalink to this definition")
Override this member function to un-execute a previous Do.


How you implement this command is totally application dependent, but typical strategies include:


* Perform an inverse operation on the last modified piece of data in the document. When redone, a copy of data stored in command is pasted back or some operation reapplied. This relies on the fact that you know the ordering of Undos; the user can never Undo at an arbitrary position in the command history.
* Restore the entire document state (perhaps using document transacting). Potentially very inefficient, but possibly easier to code if the user interface and data are complex, and an “inverseexecute” operation is hard to write. The docview sample uses the first method, to remove or restore segments in the drawing.



Return type
*bool*



Returns
`True` to indicate that the action has taken place, `False` otherwise. Returning `False` will indicate to the command processor that the action is not redoable and no change should be made to the command history.






            Source: https://docs.wxpython.org/wx.Command.html
        """

    Name: str  # `Name`[¶](#wx.Command.Name "Permalink to this definition")See [`GetName`](#wx.Command.GetName "wx.Command.GetName")



class CommandEvent(Event):
    """ **Possible constructors**:



```
CommandEvent(commandEventType=wxEVT_NULL, id=0)

```


This event class contains information about command events, which
originate from a variety of simple controls.


  


        Source: https://docs.wxpython.org/wx.CommandEvent.html
    """
    def __init__(self, commandEventType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *commandEventType=wxEVT\_NULL*, *id=0*)[¶](#wx.CommandEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **commandEventType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def GetClientData(self) -> 'ClientData':
        """ 

`GetClientData`(*self*)[¶](#wx.CommandEvent.GetClientData "Permalink to this definition")
Returns client object pointer for a listbox or choice selection event (not valid for a deselection).



Return type
[`ClientData`](#wx.CommandEvent.ClientData "wx.CommandEvent.ClientData")






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def GetClientObject(self) -> None:
        """ 

`GetClientObject`(*self*)[¶](#wx.CommandEvent.GetClientObject "Permalink to this definition")
Alias for [`GetClientData`](#wx.CommandEvent.GetClientData "wx.CommandEvent.GetClientData")




            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def GetExtraLong(self) -> int:
        """ 

`GetExtraLong`(*self*)[¶](#wx.CommandEvent.GetExtraLong "Permalink to this definition")
Returns extra information dependent on the event objects type.


If the event comes from a listbox selection, it is a boolean determining whether the event was a selection (`True`) or a deselection (`False`). A listbox deselection only occurs for multiple-selection boxes, and in this case the index and string values are indeterminate and the listbox must be examined by the application.



Return type
*long*






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def GetInt(self) -> int:
        """ 

`GetInt`(*self*)[¶](#wx.CommandEvent.GetInt "Permalink to this definition")
Returns the integer identifier corresponding to a listbox, choice or radiobox selection (only if the event was a selection, not a deselection), or a boolean value representing the value of a checkbox.


For a menu item, this method returns -1 if the item is not checkable or a boolean value (`True` or `False`) for checkable items indicating the new state of the item.



Return type
*int*






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.CommandEvent.GetSelection "Permalink to this definition")
Returns item index for a listbox or choice selection event (not valid for a deselection).



Return type
*int*






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def GetString(self) -> str:
        """ 

`GetString`(*self*)[¶](#wx.CommandEvent.GetString "Permalink to this definition")
Returns item string for a listbox or choice selection event.


If one or several items have been deselected, returns the index of the first deselected item. If some items have been selected and others deselected at the same time, it will return the index of the first selected item.



Return type
`string`






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def IsChecked(self) -> bool:
        """ 

`IsChecked`(*self*)[¶](#wx.CommandEvent.IsChecked "Permalink to this definition")
This method can be used with checkbox and menu events: for the checkboxes, the method returns `True` for a selection event and `False` for a deselection one.


For the menu events, this method indicates if the menu item just has become checked or unchecked (and thus only makes sense for checkable menu items).


Notice that this method cannot be used with  [wx.CheckListBox](wx.CheckListBox.html#wx-checklistbox) currently.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def IsSelection(self) -> bool:
        """ 

`IsSelection`(*self*)[¶](#wx.CommandEvent.IsSelection "Permalink to this definition")
For a listbox or similar event, returns `True` if it is a selection, `False` if it is a deselection.


If some items have been selected and others deselected at the same time, it will return `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def SetClientData(self, data: ClientData) -> None:
        """ 

`SetClientData`(*self*, *data*)[¶](#wx.CommandEvent.SetClientData "Permalink to this definition")
Sets the client object for this event.


The client object is not owned by the event object and the event object will not delete the client object in its destructor.


The client object must be owned and deleted by another object (e.g. a control) that has longer life time than the event object.



Parameters
**data** (*ClientData*) – 






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def SetClientObject(self, data) -> None:
        """ 

`SetClientObject`(*self*, *data*)[¶](#wx.CommandEvent.SetClientObject "Permalink to this definition")
Alias for [`SetClientData`](#wx.CommandEvent.SetClientData "wx.CommandEvent.SetClientData")




            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def SetExtraLong(self, extraLong: int) -> None:
        """ 

`SetExtraLong`(*self*, *extraLong*)[¶](#wx.CommandEvent.SetExtraLong "Permalink to this definition")
Sets the **m\_extraLong** member.



Parameters
**extraLong** (*long*) – 






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def SetInt(self, intCommand: int) -> None:
        """ 

`SetInt`(*self*, *intCommand*)[¶](#wx.CommandEvent.SetInt "Permalink to this definition")
Sets the **m\_commandInt** member.



Parameters
**intCommand** (*int*) – 






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    def SetString(self, string: str) -> None:
        """ 

`SetString`(*self*, *string*)[¶](#wx.CommandEvent.SetString "Permalink to this definition")
Sets the **m\_commandString** member.



Parameters
**string** (*string*) – 






            Source: https://docs.wxpython.org/wx.CommandEvent.html
        """

    ClientData: '_ClientData'  # `ClientData`[¶](#wx.CommandEvent.ClientData "Permalink to this definition")See [`GetClientData`](#wx.CommandEvent.GetClientData "wx.CommandEvent.GetClientData") and [`SetClientData`](#wx.CommandEvent.SetClientData "wx.CommandEvent.SetClientData")
    ExtraLong: int  # `ExtraLong`[¶](#wx.CommandEvent.ExtraLong "Permalink to this definition")See [`GetExtraLong`](#wx.CommandEvent.GetExtraLong "wx.CommandEvent.GetExtraLong") and [`SetExtraLong`](#wx.CommandEvent.SetExtraLong "wx.CommandEvent.SetExtraLong")
    Int: int  # `Int`[¶](#wx.CommandEvent.Int "Permalink to this definition")See [`GetInt`](#wx.CommandEvent.GetInt "wx.CommandEvent.GetInt") and [`SetInt`](#wx.CommandEvent.SetInt "wx.CommandEvent.SetInt")
    Selection: int  # `Selection`[¶](#wx.CommandEvent.Selection "Permalink to this definition")See [`GetSelection`](#wx.CommandEvent.GetSelection "wx.CommandEvent.GetSelection")
    String: str  # `String`[¶](#wx.CommandEvent.String "Permalink to this definition")See [`GetString`](#wx.CommandEvent.GetString "wx.CommandEvent.GetString") and [`SetString`](#wx.CommandEvent.SetString "wx.CommandEvent.SetString")



EVT_COMMAND: int  # Process a command, supplying the window identifier, command event identifier, and member function.

EVT_COMMAND_RANGE: int  # Process a command for a range of window identifiers, supplying the minimum and maximum window identifiers, command event identifier, and member function.

EVT_MENU: int  # Process a  wxEVT_MENU   command, which is generated by a menu item.

EVT_MENU_RANGE: int  # Process a  wxEVT_MENU   command, which is generated by a range of menu items.

EVT_CONTEXT_MENU: int  # Process the event generated when the user has requested a popup menu to appear by pressing a special keyboard key (under Windows) or by right clicking the mouse.

EVT_RADIOBOX: int  # Process a  wxEVT_RADIOBOX   command, which is generated by a    wx.RadioBox  control.

EVT_RADIOBUTTON: int  # Process a  wxEVT_RADIOBUTTON   command, which is generated by a    wx.RadioButton  control.

EVT_SCROLLBAR: int  # Process a  wxEVT_SCROLLBAR   command, which is generated by a    wx.ScrollBar  control. This is provided for compatibility only; more specific scrollbar event macros should be used instead (see   wx.ScrollEvent).

EVT_SLIDER: int  # Process a  wxEVT_SLIDER   command, which is generated by a    wx.Slider  control.

EVT_TOOL: int  # Process a  wxEVT_TOOL   event (a synonym for   wxEVT_MENU ). Pass the id of the tool.

EVT_TOOL_RANGE: int  # Process a  wxEVT_TOOL   event for a range of identifiers. Pass the ids of the tools.

EVT_TOOL_RCLICKED: int  # Process a  wxEVT_TOOL_RCLICKED   event. Pass the id of the tool. (Not available on wxOSX.)

EVT_TOOL_RCLICKED_RANGE: int  # Process a  wxEVT_TOOL_RCLICKED   event for a range of ids. Pass the ids of the tools. (Not available on wxOSX.)

EVT_TOOL_ENTER: int  # Process a  wxEVT_TOOL_ENTER   event. Pass the id of the toolbar itself. The value of  wx.CommandEvent.GetSelection   is the tool id, or -1 if the mouse cursor has moved off a tool. (Not available on wxOSX.)

EVT_COMMAND_LEFT_CLICK: int  # Process a  wxEVT_COMMAND_LEFT_CLICK   command, which is generated by a control (wxMSW only).

EVT_COMMAND_LEFT_DCLICK: int  # Process a  wxEVT_COMMAND_LEFT_DCLICK   command, which is generated by a control (wxMSW only).

EVT_COMMAND_RIGHT_CLICK: int  # Process a  wxEVT_COMMAND_RIGHT_CLICK   command, which is generated by a control (wxMSW only).

EVT_COMMAND_SET_FOCUS: int  # Process a  wxEVT_COMMAND_SET_FOCUS   command, which is generated by a control (wxMSW only).

EVT_COMMAND_KILL_FOCUS: int  # Process a  wxEVT_COMMAND_KILL_FOCUS   command, which is generated by a control (wxMSW only).

EVT_COMMAND_ENTER: int  # Process a  wxEVT_COMMAND_ENTER   command, which is generated by a control. ^^

class CommandProcessor(Object):
    """ **Possible constructors**:



```
CommandProcessor(maxCommands=-1)

```


CommandProcessor is a class that maintains a history of Commands,
with undo/redo functionality built-in.


  


        Source: https://docs.wxpython.org/wx.CommandProcessor.html
    """
    def __init__(self, maxCommands: int=-1) -> None:
        """ 

`__init__`(*self*, *maxCommands=-1*)[¶](#wx.CommandProcessor.__init__ "Permalink to this definition")
Constructor.



Parameters
**maxCommands** (*int*) – May be set to a positive integer to limit the number of commands stored to it, otherwise (and by default) the list of commands can grow arbitrarily.






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def CanRedo(self) -> bool:
        """ 

`CanRedo`(*self*)[¶](#wx.CommandProcessor.CanRedo "Permalink to this definition")
Returns `True` if the currently-active command can be redone, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def CanUndo(self) -> bool:
        """ 

`CanUndo`(*self*)[¶](#wx.CommandProcessor.CanUndo "Permalink to this definition")
Returns `True` if the currently-active command can be undone, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def ClearCommands(self) -> None:
        """ 

`ClearCommands`(*self*)[¶](#wx.CommandProcessor.ClearCommands "Permalink to this definition")
Deletes all commands in the list and sets the current command pointer to `None`.




            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def GetCommands(self) -> 'CommandList':
        """ 

`GetCommands`(*self*)[¶](#wx.CommandProcessor.GetCommands "Permalink to this definition")
Returns the list of commands.



Return type
*CommandList*






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def GetCurrentCommand(self) -> 'Command':
        """ 

`GetCurrentCommand`(*self*)[¶](#wx.CommandProcessor.GetCurrentCommand "Permalink to this definition")
Returns the current command.



Return type
 [wx.Command](wx.Command.html#wx-command)






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def GetEditMenu(self) -> 'Menu':
        """ 

`GetEditMenu`(*self*)[¶](#wx.CommandProcessor.GetEditMenu "Permalink to this definition")
Returns the edit menu associated with the command processor.



Return type
 [wx.Menu](wx.Menu.html#wx-menu)






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def GetMaxCommands(self) -> int:
        """ 

`GetMaxCommands`(*self*)[¶](#wx.CommandProcessor.GetMaxCommands "Permalink to this definition")
Returns the maximum number of commands that the command processor stores.



Return type
*int*






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def GetRedoAccelerator(self) -> str:
        """ 

`GetRedoAccelerator`(*self*)[¶](#wx.CommandProcessor.GetRedoAccelerator "Permalink to this definition")
Returns the string that will be appended to the Redo menu item.



Return type
`string`






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def GetRedoMenuLabel(self) -> str:
        """ 

`GetRedoMenuLabel`(*self*)[¶](#wx.CommandProcessor.GetRedoMenuLabel "Permalink to this definition")
Returns the string that will be shown for the redo menu item.



Return type
`string`






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def GetUndoAccelerator(self) -> str:
        """ 

`GetUndoAccelerator`(*self*)[¶](#wx.CommandProcessor.GetUndoAccelerator "Permalink to this definition")
Returns the string that will be appended to the Undo menu item.



Return type
`string`






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def GetUndoMenuLabel(self) -> str:
        """ 

`GetUndoMenuLabel`(*self*)[¶](#wx.CommandProcessor.GetUndoMenuLabel "Permalink to this definition")
Returns the string that will be shown for the undo menu item.



Return type
`string`






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def Initialize(self) -> None:
        """ 

`Initialize`(*self*)[¶](#wx.CommandProcessor.Initialize "Permalink to this definition")
Initializes the command processor, setting the current command to the last in the list (if any), and updating the edit menu (if one has been specified).




            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def IsDirty(self) -> bool:
        """ 

`IsDirty`(*self*)[¶](#wx.CommandProcessor.IsDirty "Permalink to this definition")
Returns a boolean value that indicates if changes have been made since the last save operation.


This only works if [`MarkAsSaved`](#wx.CommandProcessor.MarkAsSaved "wx.CommandProcessor.MarkAsSaved") is called whenever the project is saved.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def MarkAsSaved(self) -> None:
        """ 

`MarkAsSaved`(*self*)[¶](#wx.CommandProcessor.MarkAsSaved "Permalink to this definition")
You must call this method whenever the project is saved if you plan to use [`IsDirty`](#wx.CommandProcessor.IsDirty "wx.CommandProcessor.IsDirty") .




            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def Redo(self) -> bool:
        """ 

`Redo`(*self*)[¶](#wx.CommandProcessor.Redo "Permalink to this definition")
Executes (redoes) the current command (the command that has just been undone if any).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def SetEditMenu(self, menu: 'Menu') -> None:
        """ 

`SetEditMenu`(*self*, *menu*)[¶](#wx.CommandProcessor.SetEditMenu "Permalink to this definition")
Tells the command processor to update the Undo and Redo items on this menu as appropriate.


Set this to `None` if the menu is about to be destroyed and command operations may still be performed, or the command processor may try to access an invalid pointer.



Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – 






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def SetMenuStrings(self) -> None:
        """ 

`SetMenuStrings`(*self*)[¶](#wx.CommandProcessor.SetMenuStrings "Permalink to this definition")
Sets the menu labels according to the currently set menu and the current command state.




            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def SetRedoAccelerator(self, accel: str) -> None:
        """ 

`SetRedoAccelerator`(*self*, *accel*)[¶](#wx.CommandProcessor.SetRedoAccelerator "Permalink to this definition")
Sets the string that will be appended to the Redo menu item.



Parameters
**accel** (*string*) – 






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def SetUndoAccelerator(self, accel: str) -> None:
        """ 

`SetUndoAccelerator`(*self*, *accel*)[¶](#wx.CommandProcessor.SetUndoAccelerator "Permalink to this definition")
Sets the string that will be appended to the Undo menu item.



Parameters
**accel** (*string*) – 






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def Store(self, command: 'Command') -> None:
        """ 

`Store`(*self*, *command*)[¶](#wx.CommandProcessor.Store "Permalink to this definition")
Just store the command without executing it.


The command is stored in the history list, and the associated edit menu (if any) updated appropriately.



Parameters
**command** ([*wx.Command*](wx.Command.html#wx.Command "wx.Command")) – 






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def Submit(self, command, storeIt=True) -> bool:
        """ 

`Submit`(*self*, *command*, *storeIt=True*)[¶](#wx.CommandProcessor.Submit "Permalink to this definition")
Submits a new command to the command processor.


The command processor calls [`wx.Command.Do`](wx.Command.html#wx.Command.Do "wx.Command.Do") to execute the command; if it succeeds, the command is stored in the history list, and the associated edit menu (if any) updated appropriately. If it fails, the command is deleted immediately. Once [`Submit`](#wx.CommandProcessor.Submit "wx.CommandProcessor.Submit") has been called, the passed command should not be deleted directly by the application.



Parameters
* **command** ([*wx.Command*](wx.Command.html#wx.Command "wx.Command")) – The command to submit
* **storeIt** (*bool*) – Indicates whether the successful command should be stored in the history list.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    def Undo(self) -> bool:
        """ 

`Undo`(*self*)[¶](#wx.CommandProcessor.Undo "Permalink to this definition")
Undoes the last command executed.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.CommandProcessor.html
        """

    Commands: 'CommandList'  # `Commands`[¶](#wx.CommandProcessor.Commands "Permalink to this definition")See [`GetCommands`](#wx.CommandProcessor.GetCommands "wx.CommandProcessor.GetCommands")
    CurrentCommand: 'Command'  # `CurrentCommand`[¶](#wx.CommandProcessor.CurrentCommand "Permalink to this definition")See [`GetCurrentCommand`](#wx.CommandProcessor.GetCurrentCommand "wx.CommandProcessor.GetCurrentCommand")
    EditMenu: 'Menu'  # `EditMenu`[¶](#wx.CommandProcessor.EditMenu "Permalink to this definition")See [`GetEditMenu`](#wx.CommandProcessor.GetEditMenu "wx.CommandProcessor.GetEditMenu") and [`SetEditMenu`](#wx.CommandProcessor.SetEditMenu "wx.CommandProcessor.SetEditMenu")
    MaxCommands: int  # `MaxCommands`[¶](#wx.CommandProcessor.MaxCommands "Permalink to this definition")See [`GetMaxCommands`](#wx.CommandProcessor.GetMaxCommands "wx.CommandProcessor.GetMaxCommands")
    RedoAccelerator: str  # `RedoAccelerator`[¶](#wx.CommandProcessor.RedoAccelerator "Permalink to this definition")See [`GetRedoAccelerator`](#wx.CommandProcessor.GetRedoAccelerator "wx.CommandProcessor.GetRedoAccelerator") and [`SetRedoAccelerator`](#wx.CommandProcessor.SetRedoAccelerator "wx.CommandProcessor.SetRedoAccelerator")
    RedoMenuLabel: str  # `RedoMenuLabel`[¶](#wx.CommandProcessor.RedoMenuLabel "Permalink to this definition")See [`GetRedoMenuLabel`](#wx.CommandProcessor.GetRedoMenuLabel "wx.CommandProcessor.GetRedoMenuLabel")
    UndoAccelerator: str  # `UndoAccelerator`[¶](#wx.CommandProcessor.UndoAccelerator "Permalink to this definition")See [`GetUndoAccelerator`](#wx.CommandProcessor.GetUndoAccelerator "wx.CommandProcessor.GetUndoAccelerator") and [`SetUndoAccelerator`](#wx.CommandProcessor.SetUndoAccelerator "wx.CommandProcessor.SetUndoAccelerator")
    UndoMenuLabel: str  # `UndoMenuLabel`[¶](#wx.CommandProcessor.UndoMenuLabel "Permalink to this definition")See [`GetUndoMenuLabel`](#wx.CommandProcessor.GetUndoMenuLabel "wx.CommandProcessor.GetUndoMenuLabel")



class ConfigBase(Object):
    """ **Possible constructors**:



```
ConfigBase(appName="", vendorName="",
           localFilename="", globalFilename="", style=0)

```


ConfigBase defines the basic interface of all config classes.


  


        Source: https://docs.wxpython.org/wx.ConfigBase.html
    """
    def __init__(self, appName="", vendorName="", localFilename="", globalFilename="", style=0) -> None:
        """ 

`__init__`(*self*, *appName=""*, *vendorName=""*, *localFilename=""*, *globalFilename=""*, *style=0*)[¶](#wx.ConfigBase.__init__ "Permalink to this definition")
This is the default and only constructor of the  [wx.ConfigBase](#wx-configbase) class, and derived classes.



Parameters
* **appName** (*string*) – The application name. If this is empty, the class will normally use `wx.App.GetAppName` to set it. The application name is used in the registry key on Windows, and can be used to deduce the local filename parameter if that is missing.
* **vendorName** (*string*) – The vendor name. If this is empty, it is assumed that no vendor name is wanted, if this is optional for the current config class. The vendor name is appended to the application name for *RegConfig* .
* **localFilename** (*string*) – Some config classes require a local filename. If this is not present, but required, the application name will be used instead.
* **globalFilename** (*string*) – Some config classes require a global filename. If this is not present, but required, the application name will be used instead.
* **style** (*long*) – Can be one of `CONFIG_USE_LOCAL_FILE` and `CONFIG_USE_GLOBAL_FILE` .
The style interpretation depends on the config class and is ignored by some implementations. For  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig), these styles determine whether a local or global config file is created or used: if `CONFIG_USE_GLOBAL_FILE` is used, then settings are read from the global config file and if `CONFIG_USE_LOCAL_FILE` is used, settings are read from and written to local config file (if they are both set, global file is read first, then local file, overwriting global settings). If the flag is present but the parameter is empty, the parameter will be set to a default. If the parameter is present but the style flag not, the relevant flag will be added to the style. For *RegConfig* , the `GLOBAL` flag refers to the `HKLM` key while `LOCAL` one is for the usual `HKCU` one.


For  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig) you can also add `CONFIG_USE_RELATIVE_PATH` by logically or’ing it to either of the `_FILE` options to tell  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig) to use relative instead of absolute paths.


On non-VMS Unix systems, the default local configuration file is “~/.appname”. However, this path may be also used as user data directory (see [`wx.StandardPaths.GetUserDataDir`](wx.StandardPaths.html#wx.StandardPaths.GetUserDataDir "wx.StandardPaths.GetUserDataDir") ) if the application has several data files. In this case `CONFIG_USE_SUBDIR` flag, which changes the default local configuration file to “~/.appname/appname” should be used. Notice that this flag is ignored if *localFilename* is provided. `CONFIG_USE_SUBDIR` is new since wxWidgets version 2.8.2.


For  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig), you can also add `CONFIG_USE_NO_ESCAPE_CHARACTERS` which will turn off character escaping for the values of entries stored in the config file: for example a foo key with some backslash characters will be stored as “foo=C:\mydir” instead of the usual storage of “foo=C:\mydir”.


The `CONFIG_USE_NO_ESCAPE_CHARACTERS` style can be helpful if your config file must be read or written to by a non-wxWidgets program (which might not understand the escape characters). Note, however, that if `CONFIG_USE_NO_ESCAPE_CHARACTERS` style is used, it is now your application’s responsibility to ensure that there is no newline or other illegal characters in a value, before writing that value to the file.




This parameter is only used by  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig) when compiled in Unicode mode. It specifies the encoding in which the configuration file is written.



Note


By default, environment variable expansion is on and recording defaults is off.





            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    @staticmethod
    def Create() -> 'ConfigBase':
        """ 

*static* `Create`()[¶](#wx.ConfigBase.Create "Permalink to this definition")
Create a new config object and sets it as the current one.


This function will create the most appropriate implementation of Config available for the current platform. By default this means that the system registry will be used for storing the configuration information under MSW and a file under the user home directory (see [`wx.StandardPaths.GetUserConfigDir`](wx.StandardPaths.html#wx.StandardPaths.GetUserConfigDir "wx.StandardPaths.GetUserConfigDir") ) elsewhere.


If you prefer to use the configuration files everywhere, you can define `USE_CONFIG_NATIVE` to 0 when compiling wxWidgets. Or you can simply always create  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig) explicitly.


Finally, if you want to create a custom Config subclass you may change this function behaviour by overriding [`wx.AppTraits.CreateConfig`](wx.AppTraits.html#wx.AppTraits.CreateConfig "wx.AppTraits.CreateConfig") to create it. An example when this could be useful could be an application which could be installed either normally (in which case the default behaviour of using *RegConfig* is appropriate) or in a “portable” way in which case a  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig) with a file in the program directory would be used and the choice would be done in CreateConfig() at run-time.



Return type
 [wx.ConfigBase](#wx-configbase)






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def DeleteAll(self) -> bool:
        """ 

`DeleteAll`(*self*)[¶](#wx.ConfigBase.DeleteAll "Permalink to this definition")
Delete the whole underlying object (disk file, registry key, …).


Primarily for use by uninstallation routine.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def DeleteEntry(self, key, bDeleteGroupIfEmpty=True) -> bool:
        """ 

`DeleteEntry`(*self*, *key*, *bDeleteGroupIfEmpty=True*)[¶](#wx.ConfigBase.DeleteEntry "Permalink to this definition")
Deletes the specified entry and the group it belongs to if it was the last key in it and the second parameter is `True`.



Parameters
* **key** (*string*) –
* **bDeleteGroupIfEmpty** (*bool*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def DeleteGroup(self, key: str) -> bool:
        """ 

`DeleteGroup`(*self*, *key*)[¶](#wx.ConfigBase.DeleteGroup "Permalink to this definition")
Delete the group (with all subgroups).


If the current path is under the group being deleted it is changed to its deepest still existing component. E.g. if the current path is `"/A/B/C/D"` and the group `C` is deleted, the path becomes `"/A/B"` .



Parameters
**key** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    @staticmethod
    def DontCreateOnDemand() -> None:
        """ 

*static* `DontCreateOnDemand`()[¶](#wx.ConfigBase.DontCreateOnDemand "Permalink to this definition")
Calling this function will prevent ` [`Get`](#wx.ConfigBase.Get "wx.ConfigBase.Get") ` from automatically creating a new config object if the current one is `None`.


It might be useful to call it near the program end to prevent “accidental” creation of a new config object.




            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def Exists(self, strName: str) -> bool:
        """ 

`Exists`(*self*, *strName*)[¶](#wx.ConfigBase.Exists "Permalink to this definition")

Parameters
**strName** (*string*) – 



Return type
*bool*



Returns
`True` if either a group or an entry with a given name exists.






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def Flush(self, bCurrentOnly: bool=False) -> bool:
        """ 

`Flush`(*self*, *bCurrentOnly=False*)[¶](#wx.ConfigBase.Flush "Permalink to this definition")
Permanently writes all changes (otherwise, they’re only written from object’s destructor).



Parameters
**bCurrentOnly** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    @staticmethod
    def Get(CreateOnDemand: bool=True) -> 'ConfigBase':
        """ 

*static* `Get`(*CreateOnDemand=True*)[¶](#wx.ConfigBase.Get "Permalink to this definition")
Get the current config object.


If there is no current object and *CreateOnDemand* is `True`, this creates one (using [`Create`](#wx.ConfigBase.Create "wx.ConfigBase.Create") ) unless [`DontCreateOnDemand`](#wx.ConfigBase.DontCreateOnDemand "wx.ConfigBase.DontCreateOnDemand") was called previously.



Parameters
**CreateOnDemand** (*bool*) – 



Return type
 [wx.ConfigBase](#wx-configbase)






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetAppName(self) -> str:
        """ 

`GetAppName`(*self*)[¶](#wx.ConfigBase.GetAppName "Permalink to this definition")
Returns the application name.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetEntryType(self, name: str) -> 'EntryType':
        """ 

`GetEntryType`(*self*, *name*)[¶](#wx.ConfigBase.GetEntryType "Permalink to this definition")
Returns the type of the given entry or *Unknown* if the entry doesn’t exist.


This function should be used to decide which version of [`Read`](#wx.ConfigBase.Read "wx.ConfigBase.Read") should be used because some of Config implementations will complain about type mismatch otherwise: e.g., an attempt to read a string value from an integer key with *RegConfig* will fail.



Parameters
**name** (*string*) – 



Return type
 [wx.ConfigBase.EntryType](wx.ConfigBase.EntryType.enumeration.html#wx-configbase-entrytype)






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetFirstEntry(self) -> Any:
        """ 

`GetFirstEntry`(*self*)[¶](#wx.ConfigBase.GetFirstEntry "Permalink to this definition")

> GetFirstEntry() . (more, value, index)
> 
> 
> Allows enumerating the entries in the current group in a config
> object. Returns a tuple containing a flag indicating if there are more
> items, the name of the current item, and an index to pass to
> GetNextEntry to fetch the next item.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetFirstGroup(self) -> Any:
        """ 

`GetFirstGroup`(*self*)[¶](#wx.ConfigBase.GetFirstGroup "Permalink to this definition")

> GetFirstGroup() . (more, value, index)
> 
> 
> Allows enumerating the subgroups in a config object. Returns a tuple
> containing a flag indicating if there are more items, the name of the
> current item, and an index to pass to GetNextGroup to fetch the next
> item.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetNextEntry(self, index) -> Any:
        """ 

`GetNextEntry`(*self*, *index*)[¶](#wx.ConfigBase.GetNextEntry "Permalink to this definition")

> GetNextEntry() . (more, value, index)
> 
> 
> Allows enumerating the entries in the current group in a config
> object. Returns a tuple containing a flag indicating if there are more
> items, the name of the current item, and an index to pass to
> GetNextEntry to fetch the next item.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetNextGroup(self, index) -> Any:
        """ 

`GetNextGroup`(*self*, *index*)[¶](#wx.ConfigBase.GetNextGroup "Permalink to this definition")

> GetNextGroup(long index) . (more, value, index)
> 
> 
> Allows enumerating the subgroups in a config object. Returns a tuple
> containing a flag indicating if there are more items, the name of the
> current item, and an index to pass to GetNextGroup to fetch the next
> item.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetNumberOfEntries(self, bRecursive: bool=False) -> int:
        """ 

`GetNumberOfEntries`(*self*, *bRecursive=False*)[¶](#wx.ConfigBase.GetNumberOfEntries "Permalink to this definition")
Get number of entries in the current group.



Parameters
**bRecursive** (*bool*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetNumberOfGroups(self, bRecursive: bool=False) -> int:
        """ 

`GetNumberOfGroups`(*self*, *bRecursive=False*)[¶](#wx.ConfigBase.GetNumberOfGroups "Permalink to this definition")
Get number of entries/subgroups in the current group, with or without its subgroups.



Parameters
**bRecursive** (*bool*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.ConfigBase.GetPath "Permalink to this definition")
Retrieve the current path (always as absolute path).



Return type
`string`






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def GetVendorName(self) -> str:
        """ 

`GetVendorName`(*self*)[¶](#wx.ConfigBase.GetVendorName "Permalink to this definition")
Returns the vendor name.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def HasEntry(self, strName: str) -> bool:
        """ 

`HasEntry`(*self*, *strName*)[¶](#wx.ConfigBase.HasEntry "Permalink to this definition")

Parameters
**strName** (*string*) – 



Return type
*bool*



Returns
`True` if the entry by this name exists.






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def HasGroup(self, strName: str) -> bool:
        """ 

`HasGroup`(*self*, *strName*)[¶](#wx.ConfigBase.HasGroup "Permalink to this definition")

Parameters
**strName** (*string*) – 



Return type
*bool*



Returns
`True` if the group by this name exists.






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def IsExpandingEnvVars(self) -> bool:
        """ 

`IsExpandingEnvVars`(*self*)[¶](#wx.ConfigBase.IsExpandingEnvVars "Permalink to this definition")
Returns `True` if we are expanding environment variables in key values.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def IsRecordingDefaults(self) -> bool:
        """ 

`IsRecordingDefaults`(*self*)[¶](#wx.ConfigBase.IsRecordingDefaults "Permalink to this definition")
Returns `True` if we are writing defaults back to the config file.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def Read(self, key, defaultVal="") -> None:
        """ 

`Read`(*self*, *key*, *defaultVal=""*)[¶](#wx.ConfigBase.Read "Permalink to this definition")
Another version of [`Read`](#wx.ConfigBase.Read "wx.ConfigBase.Read") , returning the string value directly.




            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def ReadBool(self, key, defaultVal=False) -> bool:
        """ 

`ReadBool`(*self*, *key*, *defaultVal=False*)[¶](#wx.ConfigBase.ReadBool "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def ReadDouble(self, key, defaultVal) -> float:
        """ 

`ReadDouble`(*self*, *key*, *defaultVal*)[¶](#wx.ConfigBase.ReadDouble "Permalink to this definition")
Reads a float value from the key and returns it.


*defaultVal* is returned if the key is not found.



Parameters
* **key** (*string*) –
* **defaultVal** (*float*) –



Return type
*float*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def ReadFloat(self, key, defaultVal=0.0) -> float:
        """ 

`ReadFloat`(*self*, *key*, *defaultVal=0.0*)[¶](#wx.ConfigBase.ReadFloat "Permalink to this definition")

Return type
*float*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def ReadInt(self, key, defaultVal=0) -> None:
        """ 

`ReadInt`(*self*, *key*, *defaultVal=0*)[¶](#wx.ConfigBase.ReadInt "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def ReadLong(self, key, defaultVal) -> int:
        """ 

`ReadLong`(*self*, *key*, *defaultVal*)[¶](#wx.ConfigBase.ReadLong "Permalink to this definition")
Reads a long value from the key and returns it.


*defaultVal* is returned if the key is not found.



Parameters
* **key** (*string*) –
* **defaultVal** (*long*) –



Return type
*long*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def ReadLongLong(self, key, defaultVal) -> 'LongLong_t':
        """ 

`ReadLongLong`(*self*, *key*, *defaultVal*)[¶](#wx.ConfigBase.ReadLongLong "Permalink to this definition")
Reads a 64-bit long long value from the key and returns it.


*defaultVal* is returned if the key is not found.



Parameters
* **key** (*string*) –
* **defaultVal** (*LongLong\_t*) –



Return type
*LongLong\_t*





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def RenameEntry(self, oldName, newName) -> bool:
        """ 

`RenameEntry`(*self*, *oldName*, *newName*)[¶](#wx.ConfigBase.RenameEntry "Permalink to this definition")
Renames an entry in the current group.


The entries names (both the old and the new one) shouldn’t contain backslashes, i.e. only simple names and not arbitrary paths are accepted by this function.



Parameters
* **oldName** (*string*) –
* **newName** (*string*) –



Return type
*bool*



Returns
`False` if *oldName* doesn’t exist or if *newName* already exists.






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def RenameGroup(self, oldName, newName) -> bool:
        """ 

`RenameGroup`(*self*, *oldName*, *newName*)[¶](#wx.ConfigBase.RenameGroup "Permalink to this definition")
Renames a subgroup of the current group.


The subgroup names (both the old and the new one) shouldn’t contain backslashes, i.e. only simple names and not arbitrary paths are accepted by this function.



Parameters
* **oldName** (*string*) –
* **newName** (*string*) –



Return type
*bool*



Returns
`False` if *oldName* doesn’t exist or if *newName* already exists.






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    @staticmethod
    def Set(pConfig: 'ConfigBase') -> 'ConfigBase':
        """ 

*static* `Set`(*pConfig*)[¶](#wx.ConfigBase.Set "Permalink to this definition")
Sets the config object as the current one, returns the pointer to the previous current object (both the parameter and returned value may be `None`).



Parameters
**pConfig** ([*wx.ConfigBase*](#wx.ConfigBase "wx.ConfigBase")) – 



Return type
 [wx.ConfigBase](#wx-configbase)






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def SetExpandEnvVars(self, bDoIt: bool=True) -> None:
        """ 

`SetExpandEnvVars`(*self*, *bDoIt=True*)[¶](#wx.ConfigBase.SetExpandEnvVars "Permalink to this definition")
Determine whether we wish to expand environment variables in key values.



Parameters
**bDoIt** (*bool*) – 






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def SetPath(self, strPath: str) -> None:
        """ 

`SetPath`(*self*, *strPath*)[¶](#wx.ConfigBase.SetPath "Permalink to this definition")
Set current path: if the first character is ‘/’, it is the absolute path, otherwise it is a relative path.


‘..’ is supported. If *strPath* doesn’t exist, it is created.



Parameters
**strPath** (*string*) – 





See also


 [wx.ConfigPathChanger](wx.ConfigPathChanger.html#wx-configpathchanger)





            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def SetRecordDefaults(self, bDoIt: bool=True) -> None:
        """ 

`SetRecordDefaults`(*self*, *bDoIt=True*)[¶](#wx.ConfigBase.SetRecordDefaults "Permalink to this definition")
Sets whether defaults are recorded to the config file whenever an attempt to read the value which is not present in it is done.


If on (default is off) all default values for the settings used by the program are written back to the config file. This allows the user to see what config options may be changed and is probably useful only for  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig).



Parameters
**bDoIt** (*bool*) – 






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def Write(self, key, value) -> bool:
        """ 

`Write`(*self*, *key*, *value*)[¶](#wx.ConfigBase.Write "Permalink to this definition")
Writes the *String* value to the config file and returns `True` on success.



Parameters
* **key** (*string*) –
* **value** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def WriteBool(self, key, value) -> bool:
        """ 

`WriteBool`(*self*, *key*, *value*)[¶](#wx.ConfigBase.WriteBool "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def WriteFloat(self, key, value) -> bool:
        """ 

`WriteFloat`(*self*, *key*, *value*)[¶](#wx.ConfigBase.WriteFloat "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def WriteInt(self, key, value) -> bool:
        """ 

`WriteInt`(*self*, *key*, *value*)[¶](#wx.ConfigBase.WriteInt "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    def _cpp_ReadInt(self, key, defaultVal=0) -> int:
        """ 

`_cpp_ReadInt`(*self*, *key*, *defaultVal=0*)[¶](#wx.ConfigBase._cpp_ReadInt "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.ConfigBase.html
        """

    AppName: str  # `AppName`[¶](#wx.ConfigBase.AppName "Permalink to this definition")See [`GetAppName`](#wx.ConfigBase.GetAppName "wx.ConfigBase.GetAppName")
    FirstEntry: Any  # `FirstEntry`[¶](#wx.ConfigBase.FirstEntry "Permalink to this definition")See [`GetFirstEntry`](#wx.ConfigBase.GetFirstEntry "wx.ConfigBase.GetFirstEntry")
    FirstGroup: Any  # `FirstGroup`[¶](#wx.ConfigBase.FirstGroup "Permalink to this definition")See [`GetFirstGroup`](#wx.ConfigBase.GetFirstGroup "wx.ConfigBase.GetFirstGroup")
    NextEntry: Any  # `NextEntry`[¶](#wx.ConfigBase.NextEntry "Permalink to this definition")See [`GetNextEntry`](#wx.ConfigBase.GetNextEntry "wx.ConfigBase.GetNextEntry")
    NextGroup: Any  # `NextGroup`[¶](#wx.ConfigBase.NextGroup "Permalink to this definition")See [`GetNextGroup`](#wx.ConfigBase.GetNextGroup "wx.ConfigBase.GetNextGroup")
    NumberOfEntries: int  # `NumberOfEntries`[¶](#wx.ConfigBase.NumberOfEntries "Permalink to this definition")See [`GetNumberOfEntries`](#wx.ConfigBase.GetNumberOfEntries "wx.ConfigBase.GetNumberOfEntries")
    NumberOfGroups: int  # `NumberOfGroups`[¶](#wx.ConfigBase.NumberOfGroups "Permalink to this definition")See [`GetNumberOfGroups`](#wx.ConfigBase.GetNumberOfGroups "wx.ConfigBase.GetNumberOfGroups")
    Path: str  # `Path`[¶](#wx.ConfigBase.Path "Permalink to this definition")See [`GetPath`](#wx.ConfigBase.GetPath "wx.ConfigBase.GetPath") and [`SetPath`](#wx.ConfigBase.SetPath "wx.ConfigBase.SetPath")
    VendorName: str  # `VendorName`[¶](#wx.ConfigBase.VendorName "Permalink to this definition")See [`GetVendorName`](#wx.ConfigBase.GetVendorName "wx.ConfigBase.GetVendorName")



class ConfigPathChanger:
    """ **Possible constructors**:



```
ConfigPathChanger(pContainer, strEntry)

```


A handy little class which changes the current path in a Config
object and restores it in dtor.


  


        Source: https://docs.wxpython.org/wx.ConfigPathChanger.html
    """
    def __init__(self, pContainer, strEntry) -> None:
        """ 

`__init__`(*self*, *pContainer*, *strEntry*)[¶](#wx.ConfigPathChanger.__init__ "Permalink to this definition")
Changes the path of the given  [wx.ConfigBase](wx.ConfigBase.html#wx-configbase) object so that the key *strEntry* is accessible (for read or write).


In other words, the constructor uses [`wx.ConfigBase.SetPath`](wx.ConfigBase.html#wx.ConfigBase.SetPath "wx.ConfigBase.SetPath") with everything which precedes the last slash of *strEntry*, so that:



```
wx.ConfigPathChanger(wx.ConfigBase.Get(), "/MyProgram/SomeKeyName")

```


has the same effect of:



```
wx.ConfigPathChanger(wx.ConfigBase.Get(), "/MyProgram/")

```



Parameters
* **pContainer** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **strEntry** (*string*) –






            Source: https://docs.wxpython.org/wx.ConfigPathChanger.html
        """

    def Name(self) -> str:
        """ 

`Name`(*self*)[¶](#wx.ConfigPathChanger.Name "Permalink to this definition")
Returns the name of the key which was passed to the constructor.


The “name” is just anything which follows the last slash of the string given to the constructor.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ConfigPathChanger.html
        """

    def UpdateIfDeleted(self) -> None:
        """ 

`UpdateIfDeleted`(*self*)[¶](#wx.ConfigPathChanger.UpdateIfDeleted "Permalink to this definition")
This method must be called if the original path inside the Config object (i.e.


the current path at the moment of creation of this  [wx.ConfigPathChanger](#wx-configpathchanger) object) could have been deleted, thus preventing  [wx.ConfigPathChanger](#wx-configpathchanger) from restoring the not existing (any more) path.


If the original path doesn’t exist any more, the path will be restored to the deepest still existing component of the old path.




            Source: https://docs.wxpython.org/wx.ConfigPathChanger.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.ConfigPathChanger.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ConfigPathChanger.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.ConfigPathChanger.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ConfigPathChanger.html
        """



class ContextHelp(Object):
    """ **Possible constructors**:



```
ContextHelp(window=None, doNow=True)

```


This class changes the cursor to a query and puts the application into
a ‘context-sensitive help mode’.


  


        Source: https://docs.wxpython.org/wx.ContextHelp.html
    """
    def __init__(self, window=None, doNow=True) -> None:
        """ 

`__init__`(*self*, *window=None*, *doNow=True*)[¶](#wx.ContextHelp.__init__ "Permalink to this definition")
Constructs a context help object, calling [`BeginContextHelp`](#wx.ContextHelp.BeginContextHelp "wx.ContextHelp.BeginContextHelp") if *doNow* is `True` (the default).


If *window* is `None`, the top window is used.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **doNow** (*bool*) –






            Source: https://docs.wxpython.org/wx.ContextHelp.html
        """

    def BeginContextHelp(self, window: 'Window') -> bool:
        """ 

`BeginContextHelp`(*self*, *window*)[¶](#wx.ContextHelp.BeginContextHelp "Permalink to this definition")
Puts the application into context-sensitive help mode.


*window* is the window which will be used to catch events; if `None`, the top window will be used.


Returns `True` if the application was successfully put into context-sensitive help mode. This function only returns when the event loop has finished.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ContextHelp.html
        """

    def EndContextHelp(self) -> bool:
        """ 

`EndContextHelp`(*self*)[¶](#wx.ContextHelp.EndContextHelp "Permalink to this definition")
Ends context-sensitive help mode.


Not normally called by the application.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ContextHelp.html
        """



DIALOG_EX_CONTEXTHELP: int

class ContextHelpButton(BitmapButton):
    """ **Possible constructors**:



```
ContextHelpButton(parent, id=ID_CONTEXT_HELP, pos=DefaultPosition,
                  size=DefaultSize, style=0)

```


Instances of this class may be used to add a question mark button that
when pressed, puts the application into context-help mode.


  


        Source: https://docs.wxpython.org/wx.ContextHelpButton.html
    """
    def __init__(self, parent, id=ID_CONTEXT_HELP, pos=DefaultPosition, size=DefaultSize, style=0) -> None:
        """ 

`__init__`(*self*, *parent*, *id=ID\_CONTEXT\_HELP*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*)[¶](#wx.ContextHelpButton.__init__ "Permalink to this definition")
Constructor, creating and showing a context help button.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Button identifier. Defaults to `wx.ID_CONTEXT_HELP`.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Button position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Button size. If `wx.DefaultSize` is specified then the button is sized appropriately for the question mark bitmap.
* **style** (*long*) – Window style.





Note


Normally you only need pass the parent window to the constructor, and use the defaults for the remaining parameters.





            Source: https://docs.wxpython.org/wx.ContextHelpButton.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ContextHelpButton.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ContextHelpButton.html
        """



class ContextMenuEvent(CommandEvent):
    """ **Possible constructors**:



```
ContextMenuEvent(type=wxEVT_NULL, id=0, pos=DefaultPosition)

```


This class is used for context menu events, sent to give the
application a chance to show a context (popup) menu for a Window.


  


        Source: https://docs.wxpython.org/wx.ContextMenuEvent.html
    """
    def __init__(self, type=wxEVT_NULL, id=0, pos=DefaultPosition) -> None:
        """ 

`__init__`(*self*, *type=wxEVT\_NULL*, *id=0*, *pos=DefaultPosition*)[¶](#wx.ContextMenuEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **type** (*wx.EventType*) –
* **id** (*int*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






            Source: https://docs.wxpython.org/wx.ContextMenuEvent.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.ContextMenuEvent.GetPosition "Permalink to this definition")
Returns the position in screen coordinates at which the menu should be shown.


Use [`wx.Window.ScreenToClient`](wx.Window.html#wx.Window.ScreenToClient "wx.Window.ScreenToClient") to convert to client coordinates.


You can also omit a position from [`wx.Window.PopupMenu`](wx.Window.html#wx.Window.PopupMenu "wx.Window.PopupMenu") in order to use the current mouse pointer position.


If the event originated from a keyboard event, the value returned from this function will be DefaultPosition.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.ContextMenuEvent.html
        """

    def SetPosition(self, point: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetPosition`(*self*, *point*)[¶](#wx.ContextMenuEvent.SetPosition "Permalink to this definition")
Sets the position at which the menu should be shown.



Parameters
**point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.ContextMenuEvent.html
        """

    Position: 'Point'  # `Position`[¶](#wx.ContextMenuEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.ContextMenuEvent.GetPosition "wx.ContextMenuEvent.GetPosition") and [`SetPosition`](#wx.ContextMenuEvent.SetPosition "wx.ContextMenuEvent.SetPosition")



_AcceleratorTable: TypeAlias = AcceleratorTable

_BackgroundStyle: TypeAlias = BackgroundStyle

_Border: TypeAlias = Border

_Caret: TypeAlias = Caret

_Cursor: TypeAlias = Cursor

_DropTarget: TypeAlias = DropTarget

_Rect: TypeAlias = Rect

_Sizer: TypeAlias = Sizer

_ToolTip: TypeAlias = ToolTip

_Validator: TypeAlias = Validator

class Window(EvtHandler):
    """ **Possible constructors**:



```
Window()

Window(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
       style=0, name=PanelNameStr)

```


Window is the base class for all windows and represents any visible
object on screen.


  


        Source: https://docs.wxpython.org/wx.Window.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)*


Constructs a window, which can be a child of a frame, dialog or any other non-control window.



Parameters
* **parent** ([*wx.Window*](#wx.Window "wx.Window")) – Pointer to a parent window.
* **id** (*wx.WindowID*) – Window identifier. If `wx.ID_ANY`, will automatically create an identifier. See [Window IDs](window_ids_overview.html#window-ids) for more information about IDs.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. DefaultPosition indicates that wxWidgets should generate a default position for the window. If using the  [wx.Window](#wx-window) class directly, supply an actual position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. DefaultSize indicates that wxWidgets should generate a default size for the window. If no suitable size can be found, the window will be sized to 20x20 pixels so that the window is visible but obviously not correctly sized.
* **style** (*long*) – Window style. For generic window styles, please see  [wx.Window](#wx-window).
* **name** (*string*) – Window name.






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def AcceptsFocus(self) -> bool:
        """ 

`AcceptsFocus`(*self*)[¶](#wx.Window.AcceptsFocus "Permalink to this definition")
This method may be overridden in the derived classes to return `False` to indicate that this control doesn’t accept input at all (i.e. behaves like e.g.  [wx.StaticText](wx.StaticText.html#wx-statictext)) and so doesn’t need focus.



Return type
*bool*





See also


[`AcceptsFocusFromKeyboard`](#wx.Window.AcceptsFocusFromKeyboard "wx.Window.AcceptsFocusFromKeyboard")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def AcceptsFocusFromKeyboard(self) -> bool:
        """ 

`AcceptsFocusFromKeyboard`(*self*)[¶](#wx.Window.AcceptsFocusFromKeyboard "Permalink to this definition")
This method may be overridden in the derived classes to return `False` to indicate that while this control can, in principle, have focus if the user clicks it with the mouse, it shouldn’t be included in the `TAB` traversal chain when using the keyboard.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def AcceptsFocusRecursively(self) -> bool:
        """ 

`AcceptsFocusRecursively`(*self*)[¶](#wx.Window.AcceptsFocusRecursively "Permalink to this definition")
Overridden to indicate whether this window or one of its children accepts focus.


Usually it’s the same as [`AcceptsFocus`](#wx.Window.AcceptsFocus "wx.Window.AcceptsFocus") but is overridden for container windows.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def AddChild(self, child: 'WindowBase') -> None:
        """ 

`AddChild`(*self*, *child*)[¶](#wx.Window.AddChild "Permalink to this definition")
Adds a child window.


This is called automatically by window creation functions so should not be required by the application programmer. Notice that this function is mostly internal to wxWidgets and shouldn’t be called by the user code.



Parameters
**child** ([*wx.WindowBase*](wx.WindowBase.html#wx.WindowBase "wx.WindowBase")) – Child window to add.






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def AdjustForLayoutDirection(self, x, width, widthTotal) -> 'Coord':
        """ 

`AdjustForLayoutDirection`(*self*, *x*, *width*, *widthTotal*)[¶](#wx.Window.AdjustForLayoutDirection "Permalink to this definition")
Mirror coordinates for RTL layout if this window uses it and if the mirroring is not done automatically like Win32.



Parameters
* **x** (*int*) –
* **width** (*int*) –
* **widthTotal** (*int*) –



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def AlwaysShowScrollbars(self, hflag=True, vflag=True) -> None:
        """ 

`AlwaysShowScrollbars`(*self*, *hflag=True*, *vflag=True*)[¶](#wx.Window.AlwaysShowScrollbars "Permalink to this definition")
Call this function to force one or both scrollbars to be always shown, even if the window is big enough to show its entire contents without scrolling.



Parameters
* **hflag** (*bool*) – Whether the horizontal scroll bar should always be visible.
* **vflag** (*bool*) – Whether the vertical scroll bar should always be visible.





New in version 2.9.0.




Note


This function is currently not implemented.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def AssociateHandle(self, handle) -> None:
        """ 

`AssociateHandle`(*self*, *handle*)[¶](#wx.Window.AssociateHandle "Permalink to this definition")
Associate the window with a new native handle




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def BeginRepositioningChildren(self) -> bool:
        """ 

`BeginRepositioningChildren`(*self*)[¶](#wx.Window.BeginRepositioningChildren "Permalink to this definition")
Prepare for changing positions of multiple child windows.


This method should be called before changing positions of multiple child windows to reduce flicker and, in MSW case, even avoid display corruption in some cases. It is used internally by wxWidgets and called automatically when the window size changes but it can also be useful to call it from outside of the library if a repositioning involving multiple children is done without changing the window size.


If this method returns `True`, then [`EndRepositioningChildren`](#wx.Window.EndRepositioningChildren "wx.Window.EndRepositioningChildren") must be called after setting all children positions. Use  [wx.Window.ChildrenRepositioningGuard](wx.Window.ChildrenRepositioningGuard.html#wx-window-childrenrepositioningguard) class to ensure that this requirement is satisfied.



Return type
*bool*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def CacheBestSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`CacheBestSize`(*self*, *size*)[¶](#wx.Window.CacheBestSize "Permalink to this definition")
Sets the cached best size value.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def CanAcceptFocus(self) -> bool:
        """ 

`CanAcceptFocus`(*self*)[¶](#wx.Window.CanAcceptFocus "Permalink to this definition")
Can this window have focus right now?


If this method returns `True`, it means that calling [`SetFocus`](#wx.Window.SetFocus "wx.Window.SetFocus") will put focus either to this window or one of its children, if you need to know whether this window accepts focus itself, use [`IsFocusable`](#wx.Window.IsFocusable "wx.Window.IsFocusable")



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def CanAcceptFocusFromKeyboard(self) -> bool:
        """ 

`CanAcceptFocusFromKeyboard`(*self*)[¶](#wx.Window.CanAcceptFocusFromKeyboard "Permalink to this definition")
Can this window be assigned focus from keyboard right now?



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def CanScroll(self, orient: int) -> bool:
        """ 

`CanScroll`(*self*, *orient*)[¶](#wx.Window.CanScroll "Permalink to this definition")
Returns `True` if this window can have a scroll bar in this orientation.



Parameters
**orient** (*int*) – Orientation to check, either `wx.HORIZONTAL` or `wx.VERTICAL`.



Return type
*bool*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def CanSetTransparent(self) -> bool:
        """ 

`CanSetTransparent`(*self*)[¶](#wx.Window.CanSetTransparent "Permalink to this definition")
Returns `True` if the system supports transparent windows and calling [`SetTransparent`](#wx.Window.SetTransparent "wx.Window.SetTransparent") may succeed.


If this function returns `False`, transparent windows are definitely not supported by the current system.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def CaptureMouse(self) -> None:
        """ 

`CaptureMouse`(*self*)[¶](#wx.Window.CaptureMouse "Permalink to this definition")
Directs all mouse input to this window.


Call [`ReleaseMouse`](#wx.Window.ReleaseMouse "wx.Window.ReleaseMouse") to release the capture.


Note that wxWidgets maintains the stack of windows having captured the mouse and when the mouse is released the capture returns to the window which had had captured it previously and it is only really released if there were no previous window. In particular, this means that you must release the mouse as many times as you capture it, unless the window receives the  [wx.MouseCaptureLostEvent](wx.MouseCaptureLostEvent.html#wx-mousecapturelostevent) event.


Any application which captures the mouse in the beginning of some operation must handle  [wx.MouseCaptureLostEvent](wx.MouseCaptureLostEvent.html#wx-mousecapturelostevent) and cancel this operation when it receives the event. The event handler must not recapture mouse.



See also


[`ReleaseMouse`](#wx.Window.ReleaseMouse "wx.Window.ReleaseMouse") ,  [wx.MouseCaptureLostEvent](wx.MouseCaptureLostEvent.html#wx-mousecapturelostevent)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Center(self, dir: int=BOTH) -> None:
        """ 

`Center`(*self*, *dir=BOTH*)[¶](#wx.Window.Center "Permalink to this definition")
A synonym for `wx.Centre` .



Parameters
**dir** (*int*) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def CenterOnParent(self, dir: int=BOTH) -> None:
        """ 

`CenterOnParent`(*self*, *dir=BOTH*)[¶](#wx.Window.CenterOnParent "Permalink to this definition")
A synonym for [`CentreOnParent`](#wx.Window.CentreOnParent "wx.Window.CentreOnParent") .



Parameters
**dir** (*int*) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Centre(self, direction: int=BOTH) -> None:
        """ 

`Centre`(*self*, *direction=BOTH*)[¶](#wx.Window.Centre "Permalink to this definition")
Centres the window.



Parameters
**direction** (*int*) – Specifies the direction for the centring. May be `wx.HORIZONTAL`, `wx.VERTICAL` or `wx.BOTH`. It may also include the `CENTRE_ON_SCREEN` flag if you want to centre the window on the entire screen and not on its parent window.





Note


If the window is a top level one (i.e. doesn’t have a parent), it will be centred relative to the screen anyhow.




See also


`wx.Center`





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def CentreOnParent(self, direction: int=BOTH) -> None:
        """ 

`CentreOnParent`(*self*, *direction=BOTH*)[¶](#wx.Window.CentreOnParent "Permalink to this definition")
Centres the window on its parent.


This is a more readable synonym for `wx.Centre` .



Parameters
**direction** (*int*) – Specifies the direction for the centring. May be `wx.HORIZONTAL`, `wx.VERTICAL` or `wx.BOTH`.





Note


This methods provides for a way to centre top level windows over their parents instead of the entire screen. If there is no parent or if the window is not a top level window, then behaviour is the same as `wx.Centre` .




See also


[`wx.TopLevelWindow.CentreOnScreen`](wx.TopLevelWindow.html#wx.TopLevelWindow.CentreOnScreen "wx.TopLevelWindow.CentreOnScreen")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ClearBackground(self) -> None:
        """ 

`ClearBackground`(*self*)[¶](#wx.Window.ClearBackground "Permalink to this definition")
Clears the window by filling it with the current background colour.


Does not cause an erase background event to be generated.


Notice that this uses  [wx.ClientDC](wx.ClientDC.html#wx-clientdc) to draw on the window and the results of doing it while also drawing on  [wx.PaintDC](wx.PaintDC.html#wx-paintdc) for this window are undefined. Hence this method shouldn’t be used from `EVT_PAINT` handlers, just use [`wx.DC.Clear`](wx.DC.html#wx.DC.Clear "wx.DC.Clear") on the  [wx.PaintDC](wx.PaintDC.html#wx-paintdc) you already use there instead.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ClientToScreen(self, *args, **kw) -> tuple:
        """ 

`ClientToScreen`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.ClientToScreen "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ClientToScreen** *(self, x, y)*


Converts to screen coordinates from coordinates relative to this window.



Parameters
* **x** (*int*) – A pointer to an integer value for the x coordinate. Pass the client coordinate in, and a screen coordinate will be passed out.
* **y** (*int*) – A pointer to an integer value for the y coordinate. Pass the client coordinate in, and a screen coordinate will be passed out.



Return type
*tuple*






---

  



**ClientToScreen** *(self, pt)*


Converts to screen coordinates from coordinates relative to this window.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The client position for the second form of the function.



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ClientToWindowSize(self, size: Union[tuple[int, int], 'Size']) -> 'Size':
        """ 

`ClientToWindowSize`(*self*, *size*)[¶](#wx.Window.ClientToWindowSize "Permalink to this definition")
Converts client area size *size* to corresponding window size.


In other words, the returned value is what would [`GetSize`](#wx.Window.GetSize "wx.Window.GetSize") return if this window had client area of given size. Components with DefaultCoord value are left unchanged. Note that the conversion is not always exact, it assumes that non-client area doesn’t change and so doesn’t take into account things like menu bar (un)wrapping or (dis)appearance of the scrollbars.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.8.8.




See also


[`WindowToClientSize`](#wx.Window.WindowToClientSize "wx.Window.WindowToClientSize")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Close(self, force: bool=False) -> bool:
        """ 

`Close`(*self*, *force=False*)[¶](#wx.Window.Close "Permalink to this definition")
This function simply generates a  [wx.CloseEvent](wx.CloseEvent.html#wx-closeevent) whose handler usually tries to close the window.


It doesn’t close the window itself, however.



Parameters
**force** (*bool*) – `False` if the window’s close handler should be able to veto the destruction of this window, `True` if it cannot.



Return type
*bool*



Returns
`True` if the event was handled and not vetoed, `False` otherwise.





Note


Close calls the close handler for the window, providing an opportunity for the window to choose whether to destroy the window. Usually it is only used with the top level windows ( [wx.Frame](wx.Frame.html#wx-frame) and  [wx.Dialog](wx.Dialog.html#wx-dialog) classes) as the others are not supposed to have any special OnClose() logic. The close handler should check whether the window is being deleted forcibly, using [`wx.CloseEvent.CanVeto`](wx.CloseEvent.html#wx.CloseEvent.CanVeto "wx.CloseEvent.CanVeto") , in which case it should destroy the window using [`wx.Window.Destroy`](#wx.Window.Destroy "wx.Window.Destroy") . Note that calling Close does not guarantee that the window will be destroyed; but it provides a way to simulate a manual close of a window, which may or may not be implemented by destroying the window. The default implementation of *Dialog.OnCloseWindow* does not necessarily delete the dialog, since it will simply simulate a `wx.ID_CANCEL` event which is handled by the appropriate button event handler and may do anything at all. To guarantee that the window will be destroyed, call [`wx.Window.Destroy`](#wx.Window.Destroy "wx.Window.Destroy") instead




See also


[Window Deletion Overview](window_deletion_overview.html#window-deletion), [`Destroy`](#wx.Window.Destroy "wx.Window.Destroy") ,  [wx.CloseEvent](wx.CloseEvent.html#wx-closeevent)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ConvertDialogToPixels(self, *args, **kw) -> 'Point':
        """ 

`ConvertDialogToPixels`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.ConvertDialogToPixels "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ConvertDialogToPixels** *(self, pt)*


Converts a point or size from dialog units to pixels.


For the x dimension, the dialog units are multiplied by the average character width and then divided by 4. For the y dimension, the dialog units are multiplied by the average character height and then divided by 8.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)





Note


Dialog units are used for maintaining a dialog’s proportions even if the font changes. You can also use these functions programmatically. A convenience macro is defined:



```
# The C++ convenience macro does not apply for Python, however you can
# accomplish something similar with a function like this
def DLG_UNIT(parent, point):
    return parent.ConvertDialogToPixels(point)

```




See also


[`ConvertPixelsToDialog`](#wx.Window.ConvertPixelsToDialog "wx.Window.ConvertPixelsToDialog")





---

  



**ConvertDialogToPixels** *(self, sz)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ConvertPixelsToDialog(self, *args, **kw) -> 'Point':
        """ 

`ConvertPixelsToDialog`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.ConvertPixelsToDialog "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ConvertPixelsToDialog** *(self, pt)*


Converts a point or size from pixels to dialog units.


For the x dimension, the pixels are multiplied by 4 and then divided by the average character width. For the y dimension, the pixels are multiplied by 8 and then divided by the average character height.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)





Note


Dialog units are used for maintaining a dialog’s proportions even if the font changes.




See also


[`ConvertDialogToPixels`](#wx.Window.ConvertDialogToPixels "wx.Window.ConvertDialogToPixels")





---

  



**ConvertPixelsToDialog** *(self, sz)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=PanelNameStr*)[¶](#wx.Window.Create "Permalink to this definition")
Construct the actual window object after creating the C++ object.


The non-default constructor of  [wx.Window](#wx-window) class does two things: it initializes the C++ object and it also creates the window object in the underlying graphical toolkit. The [`Create`](#wx.Window.Create "wx.Window.Create") method can be used to perform the second part later, while the default constructor can be used to perform the first part only.


Please note that the underlying window must be created exactly once, i.e. if you use the default constructor, which doesn’t do this, you *must* call [`Create`](#wx.Window.Create "wx.Window.Create") before using the window and if you use the non-default constructor, you can *not* call [`Create`](#wx.Window.Create "wx.Window.Create") , as the underlying window is already created.


Note that it is possible and, in fact, useful, to call some methods on the object between creating the C++ object itself and calling [`Create`](#wx.Window.Create "wx.Window.Create") on it, e.g. a common pattern to avoid showing the contents of a window before it is fully initialized is:



```
panel = wx.Panel()      # Note: default constructor used.
panel.Hide()            # Can be called before actually creating it.
panel.Create(parent, wx.ID_ANY, ...) # Won't be shown yet.
... create all the panel children ...
panel.Show()            # Now everything will be shown at once.

```


Also note that it is possible to create an object of a derived type and then call [`Create`](#wx.Window.Create "wx.Window.Create") on it:



```
# Suppose we have this factory function in another module.
def MyCreateWindowObjectFunction()
    return MyCustomClassDerivingFromWindow()


# Then we can create a window of MyCustomClassDerivingFromWindow
# class without really knowing about this type, as we would have
# to do if we wanted to use the non-default constructor, like this:

# First create the object using the factory function.
window = MyCreateWindowObjectFunction()

# And now create the underlying window, perhaps after doing
# some other stuff first.
window.Create(parent, wx.ID_ANY, ...)

```


This is notably used by XML Based Resource System .


The parameters of this method have exactly the same meaning as the non-default constructor parameters, please refer to them for their description.



Parameters
* **parent** ([*wx.Window*](#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*



Returns
`True` if window creation succeeded or `False` if it failed






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DLG_UNIT(self, dlg_unit) -> None:
        """ 

`DLG_UNIT`(*self*, *dlg\_unit*)[¶](#wx.Window.DLG_UNIT "Permalink to this definition")
A convenience wrapper for [`ConvertDialogToPixels`](#wx.Window.ConvertDialogToPixels "wx.Window.ConvertDialogToPixels").




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Destroy(self) -> bool:
        """ 

`Destroy`(*self*)[¶](#wx.Window.Destroy "Permalink to this definition")
Destroys the window safely.


Use this function instead of the delete operator, since different window classes can be destroyed differently. Frames and dialogs are not destroyed immediately when this function is called – they are added to a list of windows to be deleted on idle time, when all the window’s events have been processed. This prevents problems with events being sent to non-existent windows.



Return type
*bool*



Returns
`True` if the window has either been successfully deleted, or it has been added to the list of windows pending real deletion.






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DestroyChildren(self) -> bool:
        """ 

`DestroyChildren`(*self*)[¶](#wx.Window.DestroyChildren "Permalink to this definition")
Destroys all children of a window.


Called automatically by the destructor.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DestroyLater(self) -> None:
        """ 

`DestroyLater`(*self*)[¶](#wx.Window.DestroyLater "Permalink to this definition")
Schedules the window to be destroyed in the near future.


This should be used whenever Destroy could happen too soon, such
as when there may still be events for this window or its children
waiting in the event queue.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Disable(self) -> bool:
        """ 

`Disable`(*self*)[¶](#wx.Window.Disable "Permalink to this definition")
Disables the window.


Same as [`Enable`](#wx.Window.Enable "wx.Window.Enable") Enable(false).



Return type
*bool*



Returns
Returns `True` if the window has been disabled, `False` if it had been already disabled before the call to this function.






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DisableFocusFromKeyboard(self) -> None:
        """ 

`DisableFocusFromKeyboard`(*self*)[¶](#wx.Window.DisableFocusFromKeyboard "Permalink to this definition")
Disable giving focus to this window using the keyboard navigation keys.


Pressing `TAB` key will skip this window if this function was called on it, but it will still be possible to focus it by clicking on it with a pointing device.



New in version 4.1/wxWidgets-3.1.4.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DissociateHandle(self) -> None:
        """ 

`DissociateHandle`(*self*)[¶](#wx.Window.DissociateHandle "Permalink to this definition")
Dissociate the current native handle from the window




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DoGetBestClientSize(self) -> 'Size':
        """ 

`DoGetBestClientSize`(*self*)[¶](#wx.Window.DoGetBestClientSize "Permalink to this definition")
Override this method to return the best size for a custom control.


A typical implementation of this method should compute the minimal size needed to fully display the control contents taking into account the current font size.


The default implementation simply returns `wx.DefaultSize` and [`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize") returns an arbitrary hardcoded size for the window, so you must override it when implementing a custom window class.


Notice that the best size returned by this function is cached internally, so if anything that results in the best size changing (e.g. change to the control contents) happens, you need to call [`InvalidateBestSize`](#wx.Window.InvalidateBestSize "wx.Window.InvalidateBestSize") to notify wxWidgets about it.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.0.




See also


[Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DoGetBestSize(self) -> 'Size':
        """ 

`DoGetBestSize`(*self*)[¶](#wx.Window.DoGetBestSize "Permalink to this definition")
Implementation of [`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize") that can be overridden.


Notice that it is usually more convenient to override [`DoGetBestClientSize`](#wx.Window.DoGetBestClientSize "wx.Window.DoGetBestClientSize") rather than this method itself as you need to explicitly account for the window borders size if you do the latter.


The default implementation of this function is designed for use in container windows, such as  [wx.Panel](wx.Panel.html#wx-panel), and works something like this:


* If the window has a sizer then it is used to calculate the best size.
* Otherwise if the window has layout constraints then those are used to calculate the best size.
* Otherwise if the window has children then the best size is set to be large enough to show all the children.
* Otherwise if there are no children then the window’s minimal size will be used as its best size.
* Otherwise if there is no minimal size set, then the current size is used for the best size.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DoUpdateWindowUI(self, event: 'UpdateUIEvent') -> None:
        """ 

`DoUpdateWindowUI`(*self*, *event*)[¶](#wx.Window.DoUpdateWindowUI "Permalink to this definition")
Does the window-specific updating after processing the update event.


This function is called by [`UpdateWindowUI`](#wx.Window.UpdateWindowUI "wx.Window.UpdateWindowUI") in order to check return values in the  [wx.UpdateUIEvent](wx.UpdateUIEvent.html#wx-updateuievent) and act appropriately. For example, to allow frame and dialog title updating, wxWidgets implements this function as follows:



```
# do the window-specific processing after processing the update event
def DoUpdateWindowUI(self, event):

    if event.GetSetEnabled():
        self.Enable(event.GetEnabled())

    if event.GetSetText():

        if event.GetText() != self.GetTitle():
            self.SetTitle(event.GetText())

```



Parameters
**event** ([*wx.UpdateUIEvent*](wx.UpdateUIEvent.html#wx.UpdateUIEvent "wx.UpdateUIEvent")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def DragAcceptFiles(self, accept: bool) -> None:
        """ 

`DragAcceptFiles`(*self*, *accept*)[¶](#wx.Window.DragAcceptFiles "Permalink to this definition")
Enables or disables eligibility for drop file events (OnDropFiles).



Parameters
**accept** (*bool*) – If `True`, the window is eligible for drop file events. If `False`, the window will not accept drop file events.





Note


Windows only until version 2.8.9, available on all platforms since 2.8.10. Cannot be used together with [`SetDropTarget`](#wx.Window.SetDropTarget "wx.Window.SetDropTarget") on non-Windows platforms.




See also


[`SetDropTarget`](#wx.Window.SetDropTarget "wx.Window.SetDropTarget")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Enable(self, enable: bool=True) -> bool:
        """ 

`Enable`(*self*, *enable=True*)[¶](#wx.Window.Enable "Permalink to this definition")
Enable or disable the window for user input.


Note that when a parent window is disabled, all of its children are disabled as well and they are re-enabled again when the parent is.


A window can be created initially disabled by calling this method on it *before* calling [`Create`](#wx.Window.Create "wx.Window.Create") to create the actual underlying window, e.g.



```
window = MyWindow() # Note: default ctor is used here.
window.Enable(false)
window.Create(parent, ... all the usual ctor arguments ...)

```



Parameters
**enable** (*bool*) – If `True`, enables the window for input. If `False`, disables the window.



Return type
*bool*



Returns
Returns `True` if the window has been enabled or disabled, `False` if nothing was done, i.e. if the window had already been in the specified state.





See also


[`IsEnabled`](#wx.Window.IsEnabled "wx.Window.IsEnabled") , [`Disable`](#wx.Window.Disable "wx.Window.Disable") , `wx.RadioBox.Enable`





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def EnableTouchEvents(self, eventsMask: int) -> bool:
        """ 

`EnableTouchEvents`(*self*, *eventsMask*)[¶](#wx.Window.EnableTouchEvents "Permalink to this definition")
Request generation of touch events for this window.


Each call to this function supersedes the previous ones, i.e. if you want to receive events for both zoom and rotate gestures, you need to call



```
self.EnableTouchEvents(wx.TOUCH_ZOOM_GESTURE | wx.TOUCH_ROTATE_GESTURE)

```


instead of calling it twice in a row as the second call would disable the first gesture.



Parameters
**eventsMask** (*int*) – Either `wx.TOUCH_NONE` or `wx.TOUCH_ALL_GESTURES` to disable or enable gesture events for this window.



Return type
*bool*



Returns
`True` if the specified events were enabled or `False` if the current platform doesn’t support touch events.





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def EnableVisibleFocus(self, enable: bool) -> None:
        """ 

`EnableVisibleFocus`(*self*, *enable*)[¶](#wx.Window.EnableVisibleFocus "Permalink to this definition")
Enables or disables visible indication of keyboard focus.


By default, controls behave in platform-appropriate way and show focus in the same way native applications do. In some very rare circumstances it may be desirable to change the default (notably multiline text controls don’t normally have a focus indicator on Mac), which this method allows. It should only be used if you have a good understanding of the native platform’s guidelines and user expectations.


This method is only implemented on Mac.



Parameters
**enable** (*bool*) – 





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def EndRepositioningChildren(self) -> None:
        """ 

`EndRepositioningChildren`(*self*)[¶](#wx.Window.EndRepositioningChildren "Permalink to this definition")
Fix child window positions after setting all of them at once.


This method must be called if and only if the previous call to [`BeginRepositioningChildren`](#wx.Window.BeginRepositioningChildren "wx.Window.BeginRepositioningChildren") returned `True`.



New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    @staticmethod
    def FindFocus() -> 'Window':
        """ 

*static* `FindFocus`()[¶](#wx.Window.FindFocus "Permalink to this definition")
Finds the window or control which currently has the keyboard focus.



Return type
 [wx.Window](#wx-window)





Note


Note that this is a static function, so it can be called without needing a  [wx.Window](#wx-window) pointer.




See also


[`SetFocus`](#wx.Window.SetFocus "wx.Window.SetFocus") , [`HasFocus`](#wx.Window.HasFocus "wx.Window.HasFocus")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def FindWindow(self, *args, **kw) -> 'Window':
        """ 

`FindWindow`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.FindWindow "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FindWindow** *(self, id)*


Find a child of this window, by *id*.


May return `this` if it matches itself.


Notice that only real children, not top level windows using this window as parent, are searched by this function.



Parameters
**id** (*long*) – 



Return type
 [wx.Window](#wx-window)






---

  



**FindWindow** *(self, name)*


Find a child of this window, by name.


May return `this` if it matches itself.


Notice that only real children, not top level windows using this window as parent, are searched by this function.



Parameters
**name** (*string*) – 



Return type
 [wx.Window](#wx-window)






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    @staticmethod
    def FindWindowById(id, parent=None) -> 'Window':
        """ 

*static* `FindWindowById`(*id*, *parent=None*)[¶](#wx.Window.FindWindowById "Permalink to this definition")
Find the first window with the given *id*.


If *parent* is `None`, the search will start from all top-level frames and dialog boxes; if not `None`, the search will be limited to the given window hierarchy. The search is recursive in both cases.



Parameters
* **id** (*long*) –
* **parent** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Window](#wx-window)



Returns
Window with the given *id* or `None` if not found.





See also


[`FindWindow`](#wx.Window.FindWindow "wx.Window.FindWindow")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    @staticmethod
    def FindWindowByLabel(label, parent=None) -> 'Window':
        """ 

*static* `FindWindowByLabel`(*label*, *parent=None*)[¶](#wx.Window.FindWindowByLabel "Permalink to this definition")
Find a window by its label.


Depending on the type of window, the label may be a window title or panel item label. If *parent* is `None`, the search will start from all top-level frames and dialog boxes; if not `None`, the search will be limited to the given window hierarchy.


The search is recursive in both cases and, unlike with [`FindWindow`](#wx.Window.FindWindow "wx.Window.FindWindow") , recurses into top level child windows too.



Parameters
* **label** (*string*) –
* **parent** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Window](#wx-window)



Returns
Window with the given *label* or `None` if not found.





See also


[`FindWindow`](#wx.Window.FindWindow "wx.Window.FindWindow")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    @staticmethod
    def FindWindowByName(name, parent=None) -> 'Window':
        """ 

*static* `FindWindowByName`(*name*, *parent=None*)[¶](#wx.Window.FindWindowByName "Permalink to this definition")
Find a window by its name (as given in a window constructor or [`Create`](#wx.Window.Create "wx.Window.Create") function call).


If *parent* is `None`, the search will start from all top-level frames and dialog boxes; if not `None`, the search will be limited to the given window hierarchy.


The search is recursive in both cases and, unlike [`FindWindow`](#wx.Window.FindWindow "wx.Window.FindWindow") , recurses into top level child windows too.


If no window with such name is found, [`wx.FindWindowByLabel`](wx.functions.html#wx.FindWindowByLabel "wx.FindWindowByLabel") is called, i.e. the name is interpreted as (internal) name first but if this fails, it’s internal as (user-visible) label. As this behaviour may be confusing, it is usually better to use either the [`FindWindow`](#wx.Window.FindWindow "wx.Window.FindWindow") overload taking the name or [`wx.FindWindowByLabel`](wx.functions.html#wx.FindWindowByLabel "wx.FindWindowByLabel") directly.



Parameters
* **name** (*string*) –
* **parent** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Window](#wx-window)



Returns
Window with the given *name* or `None` if not found.






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Fit(self) -> None:
        """ 

`Fit`(*self*)[¶](#wx.Window.Fit "Permalink to this definition")
Sizes the window to fit its best size.


Using this function is equivalent to setting window size to the return value of [`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize") .


Note that, unlike [`SetSizerAndFit`](#wx.Window.SetSizerAndFit "wx.Window.SetSizerAndFit") , this function only changes the current window size and doesn’t change its minimal size.



See also


[Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def FitInside(self) -> None:
        """ 

`FitInside`(*self*)[¶](#wx.Window.FitInside "Permalink to this definition")
Similar to [`Fit`](#wx.Window.Fit "wx.Window.Fit") , but sizes the interior (virtual) size of a window.


Mainly useful with scrolled windows to reset scrollbars after sizing changes that do not trigger a size event, and/or scrolled windows without an interior sizer. This function similarly won’t do anything if there are no subwindows.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Freeze(self) -> None:
        """ 

`Freeze`(*self*)[¶](#wx.Window.Freeze "Permalink to this definition")
Freezes the window or, in other words, prevents any updates from taking place on screen, the window is not redrawn at all.


[`Thaw`](#wx.Window.Thaw "wx.Window.Thaw") must be called to re-enable window redrawing. Calls to these two functions may be nested but to ensure that the window is properly repainted again, you must thaw it exactly as many times as you froze it.


If the window has any children, they are recursively frozen too.


This method is useful for visual appearance optimization (for example, it is a good idea to use it before doing many large text insertions in a row into a  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) under wxGTK) but is not implemented on all platforms nor for all controls so it is mostly just a hint to wxWidgets and not a mandatory directive.



See also


*WindowUpdateLocker* , [`Thaw`](#wx.Window.Thaw "wx.Window.Thaw") , [`IsFrozen`](#wx.Window.IsFrozen "wx.Window.IsFrozen")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def FromDIP(self, *args, **kw) -> 'Size':
        """ 

`FromDIP`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.FromDIP "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FromDIP** *(self, sz)*


Convert DPI-independent pixel values to the value in pixels appropriate for the current toolkit.


A DPI-independent pixel is just a pixel at the standard 96 `DPI` resolution. To keep the same physical size at higher resolution, the physical pixel value must be scaled by [`GetDPIScaleFactor`](#wx.Window.GetDPIScaleFactor "wx.Window.GetDPIScaleFactor") but this scaling may be already done by the underlying toolkit (GTK+, Cocoa, …) automatically. This method performs the conversion only if it is not already done by the lower level toolkit and so by using it with pixel values you can guarantee that the physical size of the corresponding elements will remain the same in all resolutions under all platforms. For example, instead of creating a bitmap of the hard coded size of 32 pixels you should use



```
bmp = wx.Bitmap(self.FromDIP(32, 32))

```


to avoid using tiny bitmaps on high `DPI` screens.


Notice that this function is only needed when using hard coded pixel values. It is not necessary if the sizes are already based on the DPI-independent units such as dialog units or if you are relying on the controls automatic best size determination and using sizers to lay out them.


Also note that if either component of *sz* has the special value of -1, it is returned unchanged independently of the current `DPI`, to preserve the special value of -1 in wxWidgets API (it is often used to mean “unspecified”).



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.0.





---

  



**FromDIP** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**FromDIP** *(self, d)*


Convert DPI-independent distance in pixels to the value in pixels appropriate for the current toolkit.


This is the same as FromDIP(const Size& sz) overload, but assumes that the resolution is the same in horizontal and vertical directions.


If *d* has the special value of -1, it is returned unchanged independently of the current `DPI`.



Parameters
**d** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.0.





---

  



**FromDIP** *(sz, w)*


Non window-specific DPI-independent pixels conversion functions.


The display resolution depends on the window in general as different windows can appear on different monitors using different resolutions, however sometimes no window is available for converting the resolution independent pixels to the physical values and in this case these static overloads can be used with `None` value for *w* argument.


Using these methods is discouraged as passing `None` will prevent your application from correctly supporting monitors with different resolutions even in the future wxWidgets versions which will add support for them, and passing not `None` window is just a less convenient way of calling the non-static [`FromDIP`](#wx.Window.FromDIP "wx.Window.FromDIP") method.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.0.





---

  



**FromDIP** *(pt, w)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**FromDIP** *(d, w)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **d** (*int*) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def FromPhys(self, *args, **kw) -> 'Size':
        """ 

`FromPhys`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.FromPhys "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FromPhys** *(self, sz)*


Convert from physical pixels to logical pixels.


All window coordinates in wxWidgets API are always expressed in logical pixels, but the meaning of logical pixels depends on the platform. Physical pixels always mean the same thing and refer to the actual display pixels or, also, sizes of the bitmaps. Under some platforms logical pixels are actually the same as physical ones (this is the case for MSW), but under other platforms (e.g. GTK or macOS) this is not the case and [`GetContentScaleFactor`](#wx.Window.GetContentScaleFactor "wx.Window.GetContentScaleFactor") defines the ratio between one logical and one physical pixel.


This function can be used to convert a value in physical pixels to logical pixels independently of the platform used. It simply does nothing under MSW, but divides the input value by the content scale factor under the other platforms.


Note that dividing an integer value by scale factor doesn’t always yield an integer value. This function rounds the resulting value to the closest integer, e.g. 15 physical pixels are translated to 8, not 7, logical pixels in 200% `DPI` scaling. This ensures that a physical bitmap of size 15 is not truncated if the result of this function is used to create a window to show it, but it does mean that there will be one extra pixel, not covered by this bitmap, left.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.6.




See also


[`FromDIP`](#wx.Window.FromDIP "wx.Window.FromDIP") , [`ToPhys`](#wx.Window.ToPhys "wx.Window.ToPhys")





---

  



**FromPhys** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**FromPhys** *(self, d)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**d** (*int*) – 



Return type
*int*






---

  



**FromPhys** *(sz, w)*


Convert from physical pixels to logical pixels for any window.


This function can be used without any window pointer, i.e. *w* can be `None`. In this case, it uses the content scale factor of the main screen if supported or just does nothing (i.e. uses scale factor of 1) otherwise.


Using member overloads is always preferable, if possible, as they always use the actually appropriate content scale factor.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.6.





---

  



**FromPhys** *(pt, w)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**FromPhys** *(d, w)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **d** (*int*) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetAcceleratorTable(self) -> 'AcceleratorTable':
        """ 

`GetAcceleratorTable`(*self*)[¶](#wx.Window.GetAcceleratorTable "Permalink to this definition")
Gets the accelerator table for this window.


See  [wx.AcceleratorTable](wx.AcceleratorTable.html#wx-acceleratortable).



Return type
 [wx.AcceleratorTable](wx.AcceleratorTable.html#wx-acceleratortable)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetAccessible(self) -> 'Accessible':
        """ 

`GetAccessible`(*self*)[¶](#wx.Window.GetAccessible "Permalink to this definition")
Returns the accessible object for this window, if any.


See also  [wx.Accessible](wx.Accessible.html#wx-accessible).



Return type
 [wx.Accessible](wx.Accessible.html#wx-accessible)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetAutoLayout(self) -> bool:
        """ 

`GetAutoLayout`(*self*)[¶](#wx.Window.GetAutoLayout "Permalink to this definition")
Returns `True` if [`Layout`](#wx.Window.Layout "wx.Window.Layout") is called automatically when the window is resized.


This function is mostly useful for wxWidgets itself and is rarely needed in the application code.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetBackgroundColour(self) -> 'Colour':
        """ 

`GetBackgroundColour`(*self*)[¶](#wx.Window.GetBackgroundColour "Permalink to this definition")
Returns the background colour of the window.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





See also


[`SetBackgroundColour`](#wx.Window.SetBackgroundColour "wx.Window.SetBackgroundColour") , [`SetForegroundColour`](#wx.Window.SetForegroundColour "wx.Window.SetForegroundColour") , [`GetForegroundColour`](#wx.Window.GetForegroundColour "wx.Window.GetForegroundColour")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetBackgroundStyle(self) -> 'BackgroundStyle':
        """ 

`GetBackgroundStyle`(*self*)[¶](#wx.Window.GetBackgroundStyle "Permalink to this definition")
Returns the background style of the window.



Return type
 [wx.BackgroundStyle](wx.BackgroundStyle.enumeration.html#wx-backgroundstyle)





See also


[`SetBackgroundColour`](#wx.Window.SetBackgroundColour "wx.Window.SetBackgroundColour") , [`GetForegroundColour`](#wx.Window.GetForegroundColour "wx.Window.GetForegroundColour") , [`SetBackgroundStyle`](#wx.Window.SetBackgroundStyle "wx.Window.SetBackgroundStyle") , [`SetTransparent`](#wx.Window.SetTransparent "wx.Window.SetTransparent")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetBestHeight(self, width: int) -> int:
        """ 

`GetBestHeight`(*self*, *width*)[¶](#wx.Window.GetBestHeight "Permalink to this definition")
Returns the best height needed by this window if it had the given width.



Parameters
**width** (*int*) – 



Return type
*int*





New in version 2.9.4.




See also


`DoGetBestClientHeight`





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetBestSize(self) -> 'Size':
        """ 

`GetBestSize`(*self*)[¶](#wx.Window.GetBestSize "Permalink to this definition")
This functions returns the best acceptable minimal size for the window.


For example, for a static control, it will be the minimal size such that the control label is not truncated. For windows containing subwindows (typically  [wx.Panel](wx.Panel.html#wx-panel)), the size returned by this function will be the same as the size the window would have had after calling [`Fit`](#wx.Window.Fit "wx.Window.Fit") .


Override virtual [`DoGetBestSize`](#wx.Window.DoGetBestSize "wx.Window.DoGetBestSize") or, better, because it’s usually more convenient, [`DoGetBestClientSize`](#wx.Window.DoGetBestClientSize "wx.Window.DoGetBestClientSize") when writing your own custom window class to change the value returned by this public non-virtual method.


Notice that the best size respects the minimal and maximal size explicitly set for the window, if any. So even if some window believes that it needs 200 pixels horizontally, calling [`SetMaxSize`](#wx.Window.SetMaxSize "wx.Window.SetMaxSize") with a width of 100 would ensure that [`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize") returns the width of at most 100 pixels.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`CacheBestSize`](#wx.Window.CacheBestSize "wx.Window.CacheBestSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetBestVirtualSize(self) -> 'Size':
        """ 

`GetBestVirtualSize`(*self*)[¶](#wx.Window.GetBestVirtualSize "Permalink to this definition")
Return the largest of ClientSize and BestSize (as determined by a sizer, interior children, or other means)



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetBestWidth(self, height: int) -> int:
        """ 

`GetBestWidth`(*self*, *height*)[¶](#wx.Window.GetBestWidth "Permalink to this definition")
Returns the best width needed by this window if it had the given height.



Parameters
**height** (*int*) – 



Return type
*int*





New in version 2.9.4.




See also


`DoGetBestClientWidth`





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetBorder(self, *args, **kw) -> 'Border':
        """ 

`GetBorder`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.GetBorder "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetBorder** *(self, flags)*


Get the window border style from the given flags: this is different from simply doing flags `wx.BORDER_MASK` because it uses GetDefaultBorder() to translate `wx.BORDER_DEFAULT` to something reasonable.



Parameters
**flags** (*long*) – 



Return type
 [wx.Border](wx.Border.enumeration.html#wx-border)






---

  



**GetBorder** *(self)*


Get border for the flags of this window.



Return type
 [wx.Border](wx.Border.enumeration.html#wx-border)






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    @staticmethod
    def GetCapture() -> 'Window':
        """ 

*static* `GetCapture`()[¶](#wx.Window.GetCapture "Permalink to this definition")
Returns the currently captured window.



Return type
 [wx.Window](#wx-window)





See also


[`HasCapture`](#wx.Window.HasCapture "wx.Window.HasCapture") , [`CaptureMouse`](#wx.Window.CaptureMouse "wx.Window.CaptureMouse") , [`ReleaseMouse`](#wx.Window.ReleaseMouse "wx.Window.ReleaseMouse") ,  [wx.MouseCaptureLostEvent](wx.MouseCaptureLostEvent.html#wx-mousecapturelostevent),  [wx.MouseCaptureChangedEvent](wx.MouseCaptureChangedEvent.html#wx-mousecapturechangedevent)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetCaret(self) -> 'Caret':
        """ 

`GetCaret`(*self*)[¶](#wx.Window.GetCaret "Permalink to this definition")
Returns the caret() associated with the window.



Return type
 [wx.Caret](wx.Caret.html#wx-caret)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetCharHeight(self) -> int:
        """ 

`GetCharHeight`(*self*)[¶](#wx.Window.GetCharHeight "Permalink to this definition")
Returns the character height for this window.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetCharWidth(self) -> int:
        """ 

`GetCharWidth`(*self*)[¶](#wx.Window.GetCharWidth "Permalink to this definition")
Returns the average character width for this window.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetChildren(self) -> 'WindowList':
        """ 

`GetChildren`(*self*)[¶](#wx.Window.GetChildren "Permalink to this definition")
Returns a reference to the list of the window’s children.



> `WindowList` is a type-safe List-like class whose elements are of type `Window*` .



Return type
*WindowList*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Window.GetClassDefaultAttributes "Permalink to this definition")
Returns the default font and colours which are used by the control.


This is useful if you want to use the same font or colour in your own control as in a standard control – which is a much better idea than hard coding specific colours or fonts which might look completely out of place on the users system, especially if it uses themes.


The *variant* parameter is only relevant under Mac currently and is ignore under other platforms. Under Mac, it will change the size of the returned font. See [`SetWindowVariant`](#wx.Window.SetWindowVariant "wx.Window.SetWindowVariant") for more about this.


This static method is “overridden” in many derived classes and so calling, for example, [`wx.Button.GetClassDefaultAttributes`](wx.Button.html#wx.Button.GetClassDefaultAttributes "wx.Button.GetClassDefaultAttributes") will typically return the values appropriate for a button which will be normally different from those returned by, say, [`wx.ListCtrl.GetClassDefaultAttributes`](wx.ListCtrl.html#wx.ListCtrl.GetClassDefaultAttributes "wx.ListCtrl.GetClassDefaultAttributes") .


The  [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes) structure has at least the fields `font` , `colFg` and `colBg` . All of them may be invalid if it was not possible to determine the default control appearance or, especially for the background colour, if the field doesn’t make sense as is the case for `colBg` for the controls with themed background.



Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)





See also


[`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetClientAreaOrigin(self) -> 'Point':
        """ 

`GetClientAreaOrigin`(*self*)[¶](#wx.Window.GetClientAreaOrigin "Permalink to this definition")
Get the origin of the client area of the window relative to the window top left corner (the client area may be shifted because of the borders, scrollbars, other decorations…)



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetClientRect(self) -> 'Rect':
        """ 

`GetClientRect`(*self*)[¶](#wx.Window.GetClientRect "Permalink to this definition")
Get the client rectangle in window (i.e. client) coordinates.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetClientSize(self) -> 'Rect':
        """ 

`GetClientSize`(*self*)[¶](#wx.Window.GetClientSize "Permalink to this definition")
Returns the size of the window ‘client area’ in pixels.


The client area is the area which may be drawn on by the programmer, excluding title bar, border, scrollbars, etc. Note that if this window is a top-level one and it is currently minimized, the return size is empty (both width and height are 0).




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetConstraints(self) -> 'LayoutConstraints':
        """ 

`GetConstraints`(*self*)[¶](#wx.Window.GetConstraints "Permalink to this definition")
Returns a pointer to the window’s layout constraints, or `None` if there are none.



Return type
 [wx.LayoutConstraints](wx.LayoutConstraints.html#wx-layoutconstraints)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetContainingSizer(self) -> 'Sizer':
        """ 

`GetContainingSizer`(*self*)[¶](#wx.Window.GetContainingSizer "Permalink to this definition")
Returns the sizer of which this window is a member, if any, otherwise `None`.



Return type
 [wx.Sizer](wx.Sizer.html#wx-sizer)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetContentScaleFactor(self) -> float:
        """ 

`GetContentScaleFactor`(*self*)[¶](#wx.Window.GetContentScaleFactor "Permalink to this definition")
Returns the factor mapping logical pixels of this window to physical pixels.


This function can be used to portably determine the number of physical pixels in a window of the given size, by multiplying the window size by the value returned from it. I.e. it returns the factor converting window coordinates to “content view” coordinates, where the view can be just a simple window displaying a  [wx.Bitmap](wx.Bitmap.html#wx-bitmap) or  [wx.glcanvas.GLCanvas](wx.glcanvas.GLCanvas.html#wx-glcanvas-glcanvas) or any other kind of window rendering arbitrary “content” on screen.


For the platforms not doing any pixel mapping, i.e. where logical and physical pixels are one and the same, this function always returns 1.0 and so using it is, in principle, unnecessary and could be avoided by using preprocessor check for `HAS_DPI_INDEPENDENT_PIXELS` *not* being defined, however using this function unconditionally under all platforms is usually simpler and so preferable.



Return type
*float*





New in version 2.9.5.




Note


Current behaviour of this function is compatible with wxWidgets 3.0, but different from its behaviour in versions 3.1.0 to 3.1.3, where it returned the same value as [`GetDPIScaleFactor`](#wx.Window.GetDPIScaleFactor "wx.Window.GetDPIScaleFactor") . Please use the other function if you need to use a scaling factor greater than 1.0 even for the platforms without `HAS_DPI_INDEPENDENT_PIXELS` , such as wxMSW.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetCursor(self) -> 'Cursor':
        """ 

`GetCursor`(*self*)[¶](#wx.Window.GetCursor "Permalink to this definition")
Return the cursor associated with this window.



Return type
 [wx.Cursor](wx.Cursor.html#wx-cursor)





See also


[`wx.SetCursor`](wx.functions.html#wx.SetCursor "wx.SetCursor")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetDPI(self) -> 'Size':
        """ 

`GetDPI`(*self*)[¶](#wx.Window.GetDPI "Permalink to this definition")
Return the `DPI` of the display used by this window.


The returned value can be different for different windows on systems with support for per-monitor `DPI` values, such as Microsoft Windows 10.


If the `DPI` is not available, returns  [wx.Size](wx.Size.html#wx-size) object.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.3.




See also


[`wx.Display.GetPPI`](wx.Display.html#wx.Display.GetPPI "wx.Display.GetPPI") ,  [wx.DPIChangedEvent](wx.DPIChangedEvent.html#wx-dpichangedevent)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetDPIScaleFactor(self) -> float:
        """ 

`GetDPIScaleFactor`(*self*)[¶](#wx.Window.GetDPIScaleFactor "Permalink to this definition")
Returns the ratio of the `DPI` used by this window to the standard `DPI`.


The returned value is 1 for standard `DPI` screens or 2 for “200%
scaling” and, unlike for [`GetContentScaleFactor`](#wx.Window.GetContentScaleFactor "wx.Window.GetContentScaleFactor") , is the same under all platforms.


This factor should be used to increase the size of icons and similar windows whose best size is not based on text metrics when using `DPI` scaling.


E.g. the program may load a 32px bitmap if the content scale factor is 1.0 or 64px version of the same bitmap if it is 2.0 or bigger.


Notice that this method should *not* be used for window sizes expressed in pixels, as they are already scaled by this factor by the underlying toolkit under some platforms. Use [`FromDIP`](#wx.Window.FromDIP "wx.Window.FromDIP") for anything window-related instead.



Return type
*float*





New in version 4.1/wxWidgets-3.1.4.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetDefaultAttributes(self) -> 'VisualAttributes':
        """ 

`GetDefaultAttributes`(*self*)[¶](#wx.Window.GetDefaultAttributes "Permalink to this definition")
Currently this is the same as calling *Window.GetClassDefaultAttributes(wxWindow.GetWindowVariant()).*


One advantage of using this function compared to the static version is that the call is automatically dispatched to the correct class (as usual with virtual functions) and you don’t have to specify the class name explicitly.


The other one is that in the future this function could return different results, for example it might return a different font for an “Ok” button than for a generic button if the users GUI is configured to show such buttons in bold font. Of course, the down side is that it is impossible to call this function without actually having an object to apply it to whereas the static version can be used without having to create an object first.



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetDropTarget(self) -> 'DropTarget':
        """ 

`GetDropTarget`(*self*)[¶](#wx.Window.GetDropTarget "Permalink to this definition")
Returns the associated drop target, which may be `None`.



Return type
 [wx.DropTarget](wx.DropTarget.html#wx-droptarget)





See also


[`SetDropTarget`](#wx.Window.SetDropTarget "wx.Window.SetDropTarget") , [Drag and Drop Overview](dnd_overview.html#drag-and-drop-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetEffectiveMinSize(self) -> 'Size':
        """ 

`GetEffectiveMinSize`(*self*)[¶](#wx.Window.GetEffectiveMinSize "Permalink to this definition")
Merges the window’s best size into the min size and returns the result.


This is the value used by sizers to determine the appropriate amount of space to allocate for the widget.


This is the method called by a  [wx.Sizer](wx.Sizer.html#wx-sizer) when it queries the size of a window or control.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize") , [`SetInitialSize`](#wx.Window.SetInitialSize "wx.Window.SetInitialSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetEventHandler(self) -> 'EvtHandler':
        """ 

`GetEventHandler`(*self*)[¶](#wx.Window.GetEventHandler "Permalink to this definition")
Returns the event handler for this window.


By default, the window is its own event handler.



Return type
 [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler)





See also


[`SetEventHandler`](#wx.Window.SetEventHandler "wx.Window.SetEventHandler") , [`PushEventHandler`](#wx.Window.PushEventHandler "wx.Window.PushEventHandler") , [`PopEventHandler`](#wx.Window.PopEventHandler "wx.Window.PopEventHandler") , [`wx.EvtHandler.ProcessEvent`](wx.EvtHandler.html#wx.EvtHandler.ProcessEvent "wx.EvtHandler.ProcessEvent") ,  [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetExtraStyle(self) -> int:
        """ 

`GetExtraStyle`(*self*)[¶](#wx.Window.GetExtraStyle "Permalink to this definition")
Returns the extra style bits for the window.



Return type
*long*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetFont(self) -> 'Font':
        """ 

`GetFont`(*self*)[¶](#wx.Window.GetFont "Permalink to this definition")
Returns the font for this window.



Return type
 [wx.Font](wx.Font.html#wx-font)





See also


[`SetFont`](#wx.Window.SetFont "wx.Window.SetFont")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetForegroundColour(self) -> 'Colour':
        """ 

`GetForegroundColour`(*self*)[¶](#wx.Window.GetForegroundColour "Permalink to this definition")
Returns the foreground colour of the window.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





Note


The meaning of foreground colour varies according to the window class; it may be the text colour or other colour, or it may not be used at all.




See also


[`SetForegroundColour`](#wx.Window.SetForegroundColour "wx.Window.SetForegroundColour") , [`SetBackgroundColour`](#wx.Window.SetBackgroundColour "wx.Window.SetBackgroundColour") , [`GetBackgroundColour`](#wx.Window.GetBackgroundColour "wx.Window.GetBackgroundColour")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetGrandParent(self) -> 'Window':
        """ 

`GetGrandParent`(*self*)[¶](#wx.Window.GetGrandParent "Permalink to this definition")
Returns the grandparent of a window, or `None` if there isn’t one.



Return type
 [wx.Window](#wx-window)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetGtkWidget(self) -> None:
        """ 

`GetGtkWidget`(*self*)[¶](#wx.Window.GetGtkWidget "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetHandle(self) -> Any:
        """ 

`GetHandle`(*self*)[¶](#wx.Window.GetHandle "Permalink to this definition")
Returns the platform-specific handle of the physical window.


Cast it to an appropriate handle, such as `HWND` for Windows, **Widget** for Motif or **GtkWidget** for GTK.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetHelpText(self) -> str:
        """ 

`GetHelpText`(*self*)[¶](#wx.Window.GetHelpText "Permalink to this definition")
Gets the help text to be used as context-sensitive help for this window.


Note that the text is actually stored by the current  [wx.HelpProvider](wx.HelpProvider.html#wx-helpprovider) implementation, and not in the window object itself.



Return type
`string`





See also


[`SetHelpText`](#wx.Window.SetHelpText "wx.Window.SetHelpText") , [`GetHelpTextAtPoint`](#wx.Window.GetHelpTextAtPoint "wx.Window.GetHelpTextAtPoint") ,  [wx.HelpProvider](wx.HelpProvider.html#wx-helpprovider)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetHelpTextAtPoint(self, point, origin) -> str:
        """ 

`GetHelpTextAtPoint`(*self*, *point*, *origin*)[¶](#wx.Window.GetHelpTextAtPoint "Permalink to this definition")
Gets the help text to be used as context-sensitive help for this window.


This method should be overridden if the help message depends on the position inside the window, otherwise [`GetHelpText`](#wx.Window.GetHelpText "wx.Window.GetHelpText") can be used.



Parameters
* **point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Coordinates of the mouse at the moment of help event emission.
* **origin** (*HelpEvent.Origin*) – Help event origin, see also [`wx.HelpEvent.GetOrigin`](wx.HelpEvent.html#wx.HelpEvent.GetOrigin "wx.HelpEvent.GetOrigin") .



Return type
`string`






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetId(self) -> int:
        """ 

`GetId`(*self*)[¶](#wx.Window.GetId "Permalink to this definition")
Returns the identifier of the window.



Return type
*wx.WindowID*





Note


Each window has an integer identifier. If the application has not provided one (or the default `wx.ID_ANY`) a unique identifier with a negative value will be generated.




See also


[`SetId`](#wx.Window.SetId "wx.Window.SetId") , [Window IDs](window_ids_overview.html#window-ids)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetLabel(self) -> str:
        """ 

`GetLabel`(*self*)[¶](#wx.Window.GetLabel "Permalink to this definition")
Generic way of getting a label from any window, for identification purposes.



Return type
`string`





Note


The interpretation of this function differs from class to class. For frames and dialogs, the value returned is the title. For buttons or static text controls, it is the button text. This function can be useful for meta-programs (such as testing tools or special-needs access programs) which need to identify windows by name.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetLayoutDirection(self) -> int:
        """ 

`GetLayoutDirection`(*self*)[¶](#wx.Window.GetLayoutDirection "Permalink to this definition")
Returns the layout direction for this window, Note that `Layout_Default` is returned if layout direction is not supported.



Return type
 [wx.LayoutDirection](wx.LayoutDirection.enumeration.html#wx-layoutdirection)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetMaxClientSize(self) -> 'Size':
        """ 

`GetMaxClientSize`(*self*)[¶](#wx.Window.GetMaxClientSize "Permalink to this definition")
Returns the maximum size of window’s client area.


This is an indication to the sizer layout mechanism that this is the maximum possible size as well as the upper bound on window’s size settable using [`SetClientSize`](#wx.Window.SetClientSize "wx.Window.SetClientSize") .



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`GetMaxSize`](#wx.Window.GetMaxSize "wx.Window.GetMaxSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetMaxHeight(self) -> int:
        """ 

`GetMaxHeight`(*self*)[¶](#wx.Window.GetMaxHeight "Permalink to this definition")
Returns the vertical component of window maximal size.


The returned value is DefaultCoord if the maximal width was not set.



Return type
*int*





See also


[`GetMaxSize`](#wx.Window.GetMaxSize "wx.Window.GetMaxSize")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetMaxSize(self) -> 'Size':
        """ 

`GetMaxSize`(*self*)[¶](#wx.Window.GetMaxSize "Permalink to this definition")
Returns the maximum size of the window.


This is an indication to the sizer layout mechanism that this is the maximum possible size as well as the upper bound on window’s size settable using [`SetSize`](#wx.Window.SetSize "wx.Window.SetSize") .



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`GetMaxClientSize`](#wx.Window.GetMaxClientSize "wx.Window.GetMaxClientSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetMaxWidth(self) -> int:
        """ 

`GetMaxWidth`(*self*)[¶](#wx.Window.GetMaxWidth "Permalink to this definition")
Returns the horizontal component of window maximal size.


The returned value is DefaultCoord if the maximal width was not set.



Return type
*int*





See also


[`GetMaxSize`](#wx.Window.GetMaxSize "wx.Window.GetMaxSize")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetMinClientSize(self) -> 'Size':
        """ 

`GetMinClientSize`(*self*)[¶](#wx.Window.GetMinClientSize "Permalink to this definition")
Returns the minimum size of window’s client area, an indication to the sizer layout mechanism that this is the minimum required size of its client area.


It normally just returns the value set by [`SetMinClientSize`](#wx.Window.SetMinClientSize "wx.Window.SetMinClientSize") , but it can be overridden to do the calculation on demand.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`GetMinSize`](#wx.Window.GetMinSize "wx.Window.GetMinSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetMinHeight(self) -> int:
        """ 

`GetMinHeight`(*self*)[¶](#wx.Window.GetMinHeight "Permalink to this definition")
Returns the vertical component of window minimal size.


The returned value is DefaultCoord if the minimal height was not set.



Return type
*int*





See also


[`GetMinSize`](#wx.Window.GetMinSize "wx.Window.GetMinSize")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetMinSize(self) -> 'Size':
        """ 

`GetMinSize`(*self*)[¶](#wx.Window.GetMinSize "Permalink to this definition")
Returns the minimum size of the window, an indication to the sizer layout mechanism that this is the minimum required size.


This method normally just returns the value set by [`SetMinSize`](#wx.Window.SetMinSize "wx.Window.SetMinSize") , but it can be overridden to do the calculation on demand.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`GetMinClientSize`](#wx.Window.GetMinClientSize "wx.Window.GetMinClientSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetMinWidth(self) -> int:
        """ 

`GetMinWidth`(*self*)[¶](#wx.Window.GetMinWidth "Permalink to this definition")
Returns the horizontal component of window minimal size.


The returned value is DefaultCoord if the minimal width was not set.



Return type
*int*





See also


[`GetMinSize`](#wx.Window.GetMinSize "wx.Window.GetMinSize")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.Window.GetName "Permalink to this definition")
Returns the window’s name.



Return type
`string`





Note


This name is not guaranteed to be unique; it is up to the programmer to supply an appropriate name in the window constructor or via [`SetName`](#wx.Window.SetName "wx.Window.SetName") .




See also


[`SetName`](#wx.Window.SetName "wx.Window.SetName")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetNextSibling(self) -> 'Window':
        """ 

`GetNextSibling`(*self*)[¶](#wx.Window.GetNextSibling "Permalink to this definition")
Returns the next window after this one among the parent’s children or `None` if this window is the last child.



Return type
 [wx.Window](#wx-window)





New in version 2.8.8.




See also


[`GetPrevSibling`](#wx.Window.GetPrevSibling "wx.Window.GetPrevSibling")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetParent(self) -> 'Window':
        """ 

`GetParent`(*self*)[¶](#wx.Window.GetParent "Permalink to this definition")
Returns the parent of the window, or `None` if there is no parent.



Return type
 [wx.Window](#wx-window)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetPopupMenuSelectionFromUser(self, *args, **kw) -> int:
        """ 

`GetPopupMenuSelectionFromUser`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.GetPopupMenuSelectionFromUser "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetPopupMenuSelectionFromUser** *(self, menu, pos=DefaultPosition)*


This function shows a popup menu at the given position in this window and returns the selected id.


It can be more convenient than the general purpose [`PopupMenu`](#wx.Window.PopupMenu "wx.Window.PopupMenu") function for simple menus proposing a choice in a list of strings to the user.


Notice that to avoid unexpected conflicts between the (usually consecutive range of) ids used by the menu passed to this function and the existing EVT\_UPDATE\_UI() handlers, this function temporarily disables UI updates for the window, so you need to manually disable (or toggle or …) any items which should be disabled in the menu before showing it.


The parameter *menu* is the menu to show. The parameter *pos* (or the parameters *x* and *y*) is the position at which to show the menu in client coordinates. It is recommended to not explicitly specify coordinates when calling this method in response to mouse click, because some of the ports (namely, wxGTK) can do a better job of positioning the menu in that case.



Parameters
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –



Return type
*int*



Returns
The selected menu item id or `ID_NONE` if none selected or an error occurred.





New in version 2.9.0.





---

  



**GetPopupMenuSelectionFromUser** *(self, menu, x, y)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) –
* **x** (*int*) –
* **y** (*int*) –



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.Window.GetPosition "Permalink to this definition")
This gets the position of the window in pixels, relative to the parent window for the child windows or relative to the display origin for the top level windows.



Return type
 [wx.Point](wx.Point.html#wx-point)





See also


[`GetScreenPosition`](#wx.Window.GetScreenPosition "wx.Window.GetScreenPosition")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetPrevSibling(self) -> 'Window':
        """ 

`GetPrevSibling`(*self*)[¶](#wx.Window.GetPrevSibling "Permalink to this definition")
Returns the previous window before this one among the parent’s children or



Return type
 [wx.Window](#wx-window)





New in version 2.8.8.




See also


[`GetNextSibling`](#wx.Window.GetNextSibling "wx.Window.GetNextSibling")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetRect(self) -> 'Rect':
        """ 

`GetRect`(*self*)[¶](#wx.Window.GetRect "Permalink to this definition")
Returns the position and size of the window as a  [wx.Rect](wx.Rect.html#wx-rect) object.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)





See also


[`GetScreenRect`](#wx.Window.GetScreenRect "wx.Window.GetScreenRect")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetScreenPosition(self) -> 'Point':
        """ 

`GetScreenPosition`(*self*)[¶](#wx.Window.GetScreenPosition "Permalink to this definition")
Returns the window position in screen coordinates, whether the window is a child window or a top level one.



Return type
 [wx.Point](wx.Point.html#wx-point)





See also


[`GetPosition`](#wx.Window.GetPosition "wx.Window.GetPosition")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetScreenRect(self) -> 'Rect':
        """ 

`GetScreenRect`(*self*)[¶](#wx.Window.GetScreenRect "Permalink to this definition")
Returns the position and size of the window on the screen as a  [wx.Rect](wx.Rect.html#wx-rect) object.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)





See also


[`GetRect`](#wx.Window.GetRect "wx.Window.GetRect")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetScrollPos(self, orientation: int) -> int:
        """ 

`GetScrollPos`(*self*, *orientation*)[¶](#wx.Window.GetScrollPos "Permalink to this definition")
Returns the built-in scrollbar position.



Parameters
**orientation** (*int*) – 



Return type
*int*





See also


[`SetScrollbar`](#wx.Window.SetScrollbar "wx.Window.SetScrollbar")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetScrollRange(self, orientation: int) -> int:
        """ 

`GetScrollRange`(*self*, *orientation*)[¶](#wx.Window.GetScrollRange "Permalink to this definition")
Returns the built-in scrollbar range.



Parameters
**orientation** (*int*) – 



Return type
*int*





See also


[`SetScrollbar`](#wx.Window.SetScrollbar "wx.Window.SetScrollbar")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetScrollThumb(self, orientation: int) -> int:
        """ 

`GetScrollThumb`(*self*, *orientation*)[¶](#wx.Window.GetScrollThumb "Permalink to this definition")
Returns the built-in scrollbar thumb size.



Parameters
**orientation** (*int*) – 



Return type
*int*





See also


[`SetScrollbar`](#wx.Window.SetScrollbar "wx.Window.SetScrollbar")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.Window.GetSize "Permalink to this definition")
Returns the size of the entire window in pixels, including title bar, border, scrollbars, etc.


Note that if this window is a top-level one and it is currently minimized, the returned size is the restored window size, not the size of the window icon.


Receives the window width.


Receives the window height.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetSizer(self) -> 'Sizer':
        """ 

`GetSizer`(*self*)[¶](#wx.Window.GetSizer "Permalink to this definition")
Returns the sizer associated with the window by a previous call to [`SetSizer`](#wx.Window.SetSizer "wx.Window.SetSizer") , or `None`.



Return type
 [wx.Sizer](wx.Sizer.html#wx-sizer)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetFullTextExtent(self, string, font=None) -> tuple:
        """ 

`GetFullTextExtent`(*self*, *string*, *font=None*)[¶](#wx.Window.GetFullTextExtent "Permalink to this definition")
Gets the dimensions of the string as it would be drawn on the window with the currently selected font.


The text extent is returned in the *w* and *h* pointers.



Parameters
* **string** (*string*) – String whose extent is to be measured.
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – Font to use instead of the current window font (optional).



Return type
*tuple*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetTextExtent(self, string: str) -> 'Size':
        """ 

`GetTextExtent`(*self*, *string*)[¶](#wx.Window.GetTextExtent "Permalink to this definition")
Gets the dimensions of the string as it would be drawn on the window with the currently selected font.



Parameters
**string** (*string*) – 



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetThemeEnabled(self) -> bool:
        """ 

`GetThemeEnabled`(*self*)[¶](#wx.Window.GetThemeEnabled "Permalink to this definition")
Returns `True` if the window uses the system theme for drawing its background.



Return type
*bool*





See also


[`SetThemeEnabled`](#wx.Window.SetThemeEnabled "wx.Window.SetThemeEnabled")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetToolTip(self) -> 'ToolTip':
        """ 

`GetToolTip`(*self*)[¶](#wx.Window.GetToolTip "Permalink to this definition")
Get the associated tooltip or `None` if none.



Return type
 [wx.ToolTip](wx.ToolTip.html#wx-tooltip)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetToolTipText(self) -> str:
        """ 

`GetToolTipText`(*self*)[¶](#wx.Window.GetToolTipText "Permalink to this definition")
Get the text of the associated tooltip or empty string if none.



Return type
`string`






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetTopLevelParent(self) -> 'Window':
        """ 

`GetTopLevelParent`(*self*)[¶](#wx.Window.GetTopLevelParent "Permalink to this definition")
Returns the first ancestor of this window which is a top-level window.



Return type
 [wx.Window](#wx-window)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetUpdateClientRect(self) -> 'Rect':
        """ 

`GetUpdateClientRect`(*self*)[¶](#wx.Window.GetUpdateClientRect "Permalink to this definition")
Get the update rectangle bounding box in client coords.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetUpdateRegion(self) -> 'Region':
        """ 

`GetUpdateRegion`(*self*)[¶](#wx.Window.GetUpdateRegion "Permalink to this definition")
Returns the region specifying which parts of the window have been damaged.


Should only be called within a  [wx.PaintEvent](wx.PaintEvent.html#wx-paintevent) handler.



Return type
 [wx.Region](wx.Region.html#wx-region)





See also


 [wx.Region](wx.Region.html#wx-region),  [wx.RegionIterator](wx.RegionIterator.html#wx-regioniterator)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetValidator(self) -> 'Validator':
        """ 

`GetValidator`(*self*)[¶](#wx.Window.GetValidator "Permalink to this definition")
Validator functions.


Returns a pointer to the current validator for the window, or `None` if there is none.



Return type
 [wx.Validator](wx.Validator.html#wx-validator)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetVirtualSize(self) -> 'Size':
        """ 

`GetVirtualSize`(*self*)[¶](#wx.Window.GetVirtualSize "Permalink to this definition")
This gets the virtual size of the window in pixels.


By default it returns the client size of the window, but after a call to [`SetVirtualSize`](#wx.Window.SetVirtualSize "wx.Window.SetVirtualSize") it will return the size set with that method.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetWindowBorderSize(self) -> 'Size':
        """ 

`GetWindowBorderSize`(*self*)[¶](#wx.Window.GetWindowBorderSize "Permalink to this definition")
Returns the size of the left/right and top/bottom borders of this window in x and y components of the result respectively.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetWindowStyle(self) -> int:
        """ 

`GetWindowStyle`(*self*)[¶](#wx.Window.GetWindowStyle "Permalink to this definition")
See [`GetWindowStyleFlag`](#wx.Window.GetWindowStyleFlag "wx.Window.GetWindowStyleFlag") for more info.



Return type
*long*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetWindowStyleFlag(self) -> int:
        """ 

`GetWindowStyleFlag`(*self*)[¶](#wx.Window.GetWindowStyleFlag "Permalink to this definition")
Gets the window style that was passed to the constructor or [`Create`](#wx.Window.Create "wx.Window.Create") method.


[`GetWindowStyle`](#wx.Window.GetWindowStyle "wx.Window.GetWindowStyle") is another name for the same function.



Return type
*long*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def GetWindowVariant(self) -> int:
        """ 

`GetWindowVariant`(*self*)[¶](#wx.Window.GetWindowVariant "Permalink to this definition")
Returns the value previously passed to [`SetWindowVariant`](#wx.Window.SetWindowVariant "wx.Window.SetWindowVariant") .



Return type
 [wx.WindowVariant](wx.WindowVariant.enumeration.html#wx-windowvariant)






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HandleAsNavigationKey(self, event: 'KeyEvent') -> bool:
        """ 

`HandleAsNavigationKey`(*self*, *event*)[¶](#wx.Window.HandleAsNavigationKey "Permalink to this definition")
This function will generate the appropriate call to [`Navigate`](#wx.Window.Navigate "wx.Window.Navigate") if the key event is one normally used for keyboard navigation and return `True` in this case.



Parameters
**event** ([*wx.KeyEvent*](wx.KeyEvent.html#wx.KeyEvent "wx.KeyEvent")) – 



Return type
*bool*



Returns
Returns `True` if the key pressed was for navigation and was handled, `False` otherwise.





See also


[`Navigate`](#wx.Window.Navigate "wx.Window.Navigate")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HandleWindowEvent(self, event: 'Event') -> bool:
        """ 

`HandleWindowEvent`(*self*, *event*)[¶](#wx.Window.HandleWindowEvent "Permalink to this definition")
Shorthand for:



```
GetEventHandler().SafelyProcessEvent(event)

```



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 



Return type
*bool*





See also


[`ProcessWindowEvent`](#wx.Window.ProcessWindowEvent "wx.Window.ProcessWindowEvent")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HasCapture(self) -> bool:
        """ 

`HasCapture`(*self*)[¶](#wx.Window.HasCapture "Permalink to this definition")
Returns `True` if this window has the current mouse capture.



Return type
*bool*





See also


[`CaptureMouse`](#wx.Window.CaptureMouse "wx.Window.CaptureMouse") , [`ReleaseMouse`](#wx.Window.ReleaseMouse "wx.Window.ReleaseMouse") ,  [wx.MouseCaptureLostEvent](wx.MouseCaptureLostEvent.html#wx-mousecapturelostevent),  [wx.MouseCaptureChangedEvent](wx.MouseCaptureChangedEvent.html#wx-mousecapturechangedevent)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HasExtraStyle(self, exFlag: int) -> bool:
        """ 

`HasExtraStyle`(*self*, *exFlag*)[¶](#wx.Window.HasExtraStyle "Permalink to this definition")
Returns `True` if the window has the given *exFlag* bit set in its extra styles.



Parameters
**exFlag** (*int*) – 



Return type
*bool*





See also


[`SetExtraStyle`](#wx.Window.SetExtraStyle "wx.Window.SetExtraStyle")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HasFlag(self, flag: int) -> bool:
        """ 

`HasFlag`(*self*, *flag*)[¶](#wx.Window.HasFlag "Permalink to this definition")
Returns `True` if the window has the given *flag* bit set.



Parameters
**flag** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HasFocus(self) -> bool:
        """ 

`HasFocus`(*self*)[¶](#wx.Window.HasFocus "Permalink to this definition")
Returns `True` if the window (or in case of composite controls, its main child window) has focus.



Return type
*bool*





New in version 2.9.0.




See also


[`FindFocus`](#wx.Window.FindFocus "wx.Window.FindFocus")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HasMultiplePages(self) -> bool:
        """ 

`HasMultiplePages`(*self*)[¶](#wx.Window.HasMultiplePages "Permalink to this definition")
This method should be overridden to return `True` if this window has multiple pages.


All standard class with multiple pages such as  [wx.Notebook](wx.Notebook.html#wx-notebook),  [wx.Listbook](wx.Listbook.html#wx-listbook) and  [wx.Treebook](wx.Treebook.html#wx-treebook) already override it to return `True` and user-defined classes with similar behaviour should also do so, to allow the library to handle such windows appropriately.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HasScrollbar(self, orient: int) -> bool:
        """ 

`HasScrollbar`(*self*, *orient*)[¶](#wx.Window.HasScrollbar "Permalink to this definition")
Returns `True` if this window currently has a scroll bar for this orientation.


This method may return `False` even when [`CanScroll`](#wx.Window.CanScroll "wx.Window.CanScroll") for the same orientation returns `True`, but if [`CanScroll`](#wx.Window.CanScroll "wx.Window.CanScroll") returns `False`, i.e. scrolling in this direction is not enabled at all, [`HasScrollbar`](#wx.Window.HasScrollbar "wx.Window.HasScrollbar") always returns `False` as well.



Parameters
**orient** (*int*) – Orientation to check, either `wx.HORIZONTAL` or `wx.VERTICAL`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HasTransparentBackground(self) -> bool:
        """ 

`HasTransparentBackground`(*self*)[¶](#wx.Window.HasTransparentBackground "Permalink to this definition")
Returns `True` if this window background is transparent (as, for example, for  [wx.StaticText](wx.StaticText.html#wx-statictext)) and should show the parent window background.


This method is mostly used internally by the library itself and you normally shouldn’t have to call it. You may, however, have to override it in your Window-derived class to ensure that background is painted correctly.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Hide(self) -> bool:
        """ 

`Hide`(*self*)[¶](#wx.Window.Hide "Permalink to this definition")
Equivalent to calling [`wx.Window.Show`](#wx.Window.Show "wx.Window.Show") (`False`).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HideWithEffect(self, effect, timeout=0) -> bool:
        """ 

`HideWithEffect`(*self*, *effect*, *timeout=0*)[¶](#wx.Window.HideWithEffect "Permalink to this definition")
This function hides a window, like [`Hide`](#wx.Window.Hide "wx.Window.Hide") , but using a special visual effect if possible.


The parameters of this function are the same as for [`ShowWithEffect`](#wx.Window.ShowWithEffect "wx.Window.ShowWithEffect") , please see their description there.



Parameters
* **effect** ([*ShowEffect*](wx.ShowEffect.enumeration.html "ShowEffect")) –
* **timeout** (*int*) –



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def HitTest(self, *args, **kw) -> 'HitTest':
        """ 

`HitTest`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.HitTest "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**HitTest** *(self, x, y)*


Return where the given point lies, exactly.


This method is used to test whether the point lies inside the client window area or on one of its scrollbars.


The point coordinates are specified in client window coordinates.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
 [wx.HitTest](wx.HitTest.enumeration.html#wx-hittest)






---

  



**HitTest** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.HitTest](wx.HitTest.enumeration.html#wx-hittest)






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def InformFirstDirection(self, direction, size, availableOtherDir) -> bool:
        """ 

`InformFirstDirection`(*self*, *direction*, *size*, *availableOtherDir*)[¶](#wx.Window.InformFirstDirection "Permalink to this definition")
 [wx.Sizer](wx.Sizer.html#wx-sizer) and friends use this to give a chance to a component to recalc its min size once one of the final size components is known.


Override this function when that is useful (such as for  [wx.StaticText](wx.StaticText.html#wx-statictext) which can stretch over several lines). Parameter availableOtherDir tells the item how much more space there is available in the opposite direction (-1 if unknown).



Parameters
* **direction** (*int*) –
* **size** (*int*) –
* **availableOtherDir** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def InheritAttributes(self) -> None:
        """ 

`InheritAttributes`(*self*)[¶](#wx.Window.InheritAttributes "Permalink to this definition")
This function is (or should be, in case of custom controls) called during window creation to intelligently set up the window visual attributes, that is the font and the foreground and background colours.


By “intelligently” the following is meant: by default, all windows use their own [`GetClassDefaultAttributes`](#wx.Window.GetClassDefaultAttributes "wx.Window.GetClassDefaultAttributes") default attributes. However if some of the parents attributes are explicitly (that is, using [`SetFont`](#wx.Window.SetFont "wx.Window.SetFont") and not [`wx.Window.SetOwnFont`](#wx.Window.SetOwnFont "wx.Window.SetOwnFont") ) changed and if the corresponding attribute hadn’t been explicitly set for this window itself, then this window takes the same value as used by the parent. In addition, if the window overrides [`ShouldInheritColours`](#wx.Window.ShouldInheritColours "wx.Window.ShouldInheritColours") to return `False`, the colours will not be changed no matter what and only the font might.


This rather complicated logic is necessary in order to accommodate the different usage scenarios. The most common one is when all default attributes are used and in this case, nothing should be inherited as in modern GUIs different controls use different fonts (and colours) than their siblings so they can’t inherit the same value from the parent. However it was also deemed desirable to allow to simply change the attributes of all children at once by just changing the font or colour of their common parent, hence in this case we do inherit the parents attributes.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def InheritsBackgroundColour(self) -> bool:
        """ 

`InheritsBackgroundColour`(*self*)[¶](#wx.Window.InheritsBackgroundColour "Permalink to this definition")
Return `True` if this window inherits the background colour from its parent.



Return type
*bool*





See also


[`SetOwnBackgroundColour`](#wx.Window.SetOwnBackgroundColour "wx.Window.SetOwnBackgroundColour") , [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def InheritsForegroundColour(self) -> bool:
        """ 

`InheritsForegroundColour`(*self*)[¶](#wx.Window.InheritsForegroundColour "Permalink to this definition")
Return `True` if this window inherits the foreground colour from its parent.



Return type
*bool*





See also


[`SetOwnForegroundColour`](#wx.Window.SetOwnForegroundColour "wx.Window.SetOwnForegroundColour") , [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def InitDialog(self) -> None:
        """ 

`InitDialog`(*self*)[¶](#wx.Window.InitDialog "Permalink to this definition")
Sends an `wxEVT_INIT_DIALOG` event, whose handler usually transfers data to the dialog via validators.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def InvalidateBestSize(self) -> None:
        """ 

`InvalidateBestSize`(*self*)[¶](#wx.Window.InvalidateBestSize "Permalink to this definition")
Resets the cached best size value so it will be recalculated the next time it is needed.



See also


[`CacheBestSize`](#wx.Window.CacheBestSize "wx.Window.CacheBestSize")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsBeingDeleted(self) -> bool:
        """ 

`IsBeingDeleted`(*self*)[¶](#wx.Window.IsBeingDeleted "Permalink to this definition")
Returns `True` if this window is in process of being destroyed.


Top level windows are not deleted immediately but are rather scheduled for later destruction to give them time to process any pending messages; see [`Destroy`](#wx.Window.Destroy "wx.Window.Destroy") description.


This function returns `True` if this window, or one of its parent windows, is scheduled for destruction and can be useful to avoid manipulating it as it’s usually useless to do something with a window which is at the point of disappearing anyhow.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsDescendant(self, win: 'Window') -> bool:
        """ 

`IsDescendant`(*self*, *win*)[¶](#wx.Window.IsDescendant "Permalink to this definition")
Check if the specified window is a descendant of this one.


Returns `True` if the window is a descendant (i.e. a child or grand-child or grand-grand-child or …) of this one.


Notice that a window can never be a descendant of another one if they are in different top level windows, i.e. a child of a  [wx.Dialog](wx.Dialog.html#wx-dialog) is not considered to be a descendant of dialogs parent  [wx.Frame](wx.Frame.html#wx-frame).



Parameters
**win** ([*wx.Window*](#wx.Window "wx.Window")) – Any window, possible `None` (`False` is always returned then).



Return type
*bool*





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsDoubleBuffered(self) -> bool:
        """ 

`IsDoubleBuffered`(*self*)[¶](#wx.Window.IsDoubleBuffered "Permalink to this definition")
Returns `True` if the window contents is double-buffered by the system, i.e. if any drawing done on the window is really done on a temporary backing surface and transferred to the screen all at once later.



Return type
*bool*





See also


 [wx.BufferedDC](wx.BufferedDC.html#wx-buffereddc)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsEnabled(self) -> bool:
        """ 

`IsEnabled`(*self*)[¶](#wx.Window.IsEnabled "Permalink to this definition")
Returns `True` if the window is enabled, i.e. if it accepts user input, `False` otherwise.


Notice that this method can return `False` even if this window itself hadn’t been explicitly disabled when one of its parent windows is disabled. To get the intrinsic status of this window, use [`IsThisEnabled`](#wx.Window.IsThisEnabled "wx.Window.IsThisEnabled")



Return type
*bool*





See also


[`Enable`](#wx.Window.Enable "wx.Window.Enable")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsExposed(self, *args, **kw) -> bool:
        """ 

`IsExposed`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.IsExposed "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**IsExposed** *(self, x, y)*


Returns `True` if the given point or rectangle area has been exposed since the last repaint.


Call this in a paint event handler to optimize redrawing by only redrawing those areas, which have been exposed.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*bool*






---

  



**IsExposed** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
*bool*






---

  



**IsExposed** *(self, x, y, w, h)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **w** (*int*) –
* **h** (*int*) –



Return type
*bool*






---

  



**IsExposed** *(self, rect)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsFocusable(self) -> bool:
        """ 

`IsFocusable`(*self*)[¶](#wx.Window.IsFocusable "Permalink to this definition")
Can this window itself have focus?



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsFrozen(self) -> bool:
        """ 

`IsFrozen`(*self*)[¶](#wx.Window.IsFrozen "Permalink to this definition")
Returns `True` if the window is currently frozen by a call to [`Freeze`](#wx.Window.Freeze "wx.Window.Freeze") .



Return type
*bool*





See also


[`Freeze`](#wx.Window.Freeze "wx.Window.Freeze") , [`Thaw`](#wx.Window.Thaw "wx.Window.Thaw")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsRetained(self) -> bool:
        """ 

`IsRetained`(*self*)[¶](#wx.Window.IsRetained "Permalink to this definition")
Returns `True` if the window is retained, `False` otherwise.



Return type
*bool*





Note


Retained windows are only available on X platforms.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsScrollbarAlwaysShown(self, orient: int) -> bool:
        """ 

`IsScrollbarAlwaysShown`(*self*, *orient*)[¶](#wx.Window.IsScrollbarAlwaysShown "Permalink to this definition")
Return whether a scrollbar is always shown.



Parameters
**orient** (*int*) – Orientation to check, either `wx.HORIZONTAL` or `wx.VERTICAL`.



Return type
*bool*





See also


[`AlwaysShowScrollbars`](#wx.Window.AlwaysShowScrollbars "wx.Window.AlwaysShowScrollbars")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsShown(self) -> bool:
        """ 

`IsShown`(*self*)[¶](#wx.Window.IsShown "Permalink to this definition")
Returns `True` if the window is shown, `False` if it has been hidden.



Return type
*bool*





See also


[`IsShownOnScreen`](#wx.Window.IsShownOnScreen "wx.Window.IsShownOnScreen")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsShownOnScreen(self) -> bool:
        """ 

`IsShownOnScreen`(*self*)[¶](#wx.Window.IsShownOnScreen "Permalink to this definition")
Returns `True` if the window is physically visible on the screen, i.e. it is shown and all its parents up to the toplevel window are shown as well.



Return type
*bool*





See also


[`IsShown`](#wx.Window.IsShown "wx.Window.IsShown")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsThisEnabled(self) -> bool:
        """ 

`IsThisEnabled`(*self*)[¶](#wx.Window.IsThisEnabled "Permalink to this definition")
Returns `True` if this window is intrinsically enabled, `False` otherwise, i.e. if [`Enable`](#wx.Window.Enable "wx.Window.Enable") Enable(false) had been called.


This method is mostly used for wxWidgets itself, user code should normally use [`IsEnabled`](#wx.Window.IsEnabled "wx.Window.IsEnabled") instead.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsTopLevel(self) -> bool:
        """ 

`IsTopLevel`(*self*)[¶](#wx.Window.IsTopLevel "Permalink to this definition")
Returns `True` if the given window is a top-level one.


Currently all frames and dialogs are considered to be top-level windows (even if they have a parent window).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def IsTransparentBackgroundSupported(self, reason: Optional[str]=None) -> bool:
        """ 

`IsTransparentBackgroundSupported`(*self*, *reason=None*)[¶](#wx.Window.IsTransparentBackgroundSupported "Permalink to this definition")
Checks whether using transparent background might work.


If this function returns `False`, calling [`SetBackgroundStyle`](#wx.Window.SetBackgroundStyle "wx.Window.SetBackgroundStyle") with `BG_STYLE_TRANSPARENT` is not going to work. If it returns `True`, setting transparent style should normally succeed.


Notice that this function would typically be called on the parent of a window you want to set transparent background style for as the window for which this method is called must be fully created.



Parameters
**reason** (*string*) – If not `None`, a reason message is provided if transparency is not supported.



Return type
*bool*



Returns
`True` if background transparency is supported.





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Layout(self) -> bool:
        """ 

`Layout`(*self*)[¶](#wx.Window.Layout "Permalink to this definition")
Lays out the children of this window using the associated sizer.


If a sizer hadn’t been associated with this window (see [`SetSizer`](#wx.Window.SetSizer "wx.Window.SetSizer") ), this function doesn’t do anything, unless this is a top level window (see [`wx.TopLevelWindow.Layout`](wx.TopLevelWindow.html#wx.TopLevelWindow.Layout "wx.TopLevelWindow.Layout") ).


Note that this method is called automatically when the window size changes if it has the associated sizer (or if [`SetAutoLayout`](#wx.Window.SetAutoLayout "wx.Window.SetAutoLayout") with `True` argument had been explicitly called), ensuring that it is always laid out correctly.



Return type
*bool*



Returns
Always returns `True`, the return value is not useful.





See also


[Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def LineDown(self) -> bool:
        """ 

`LineDown`(*self*)[¶](#wx.Window.LineDown "Permalink to this definition")
Same as [`ScrollLines`](#wx.Window.ScrollLines "wx.Window.ScrollLines") (1).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def LineUp(self) -> bool:
        """ 

`LineUp`(*self*)[¶](#wx.Window.LineUp "Permalink to this definition")
Same as [`ScrollLines`](#wx.Window.ScrollLines "wx.Window.ScrollLines") (-1).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Lower(self) -> None:
        """ 

`Lower`(*self*)[¶](#wx.Window.Lower "Permalink to this definition")
Lowers the window to the bottom of the window hierarchy (Z-order).



Note


This function only works for TopLevelWindow-derived classes.




See also


[`Raise`](#wx.Window.Raise "wx.Window.Raise")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def MacIsWindowScrollbar(self, sb) -> None:
        """ 

`MacIsWindowScrollbar`(*self*, *sb*)[¶](#wx.Window.MacIsWindowScrollbar "Permalink to this definition")
Is the given widget one of this window’s built-in scrollbars? Only applicable on Mac.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Move(self, *args, **kw) -> None:
        """ 

`Move`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.Move "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Move** *(self, x, y, flags=SIZE\_USE\_EXISTING)*


Moves the window to the given position.



Parameters
* **x** (*int*) – Required x position.
* **y** (*int*) – Required y position.
* **flags** (*int*) – See [`SetSize`](#wx.Window.SetSize "wx.Window.SetSize") for more info about this parameter.





Note


Implementations of SetSize can also implicitly implement the [`Move`](#wx.Window.Move "wx.Window.Move") function, which is defined in the base  [wx.Window](#wx-window) class as the call:



```
self.SetSize(x, y, -1, -1, wx.SIZE_USE_EXISTING)

```




See also


[`SetSize`](#wx.Window.SetSize "wx.Window.SetSize")





---

  



**Move** *(self, pt, flags=SIZE\_USE\_EXISTING)*


Moves the window to the given position.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –  [wx.Point](wx.Point.html#wx-point) object representing the position.
* **flags** (*int*) – See [`SetSize`](#wx.Window.SetSize "wx.Window.SetSize") for more info about this parameter.





Note


Implementations of [`SetSize`](#wx.Window.SetSize "wx.Window.SetSize") can also implicitly implement the [`Move`](#wx.Window.Move "wx.Window.Move") function, which is defined in the base  [wx.Window](#wx-window) class as the call:



```
self.SetSize(x, y, -1, -1, wx.SIZE_USE_EXISTING)

```




See also


[`SetSize`](#wx.Window.SetSize "wx.Window.SetSize")





---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def MoveAfterInTabOrder(self, win: 'Window') -> None:
        """ 

`MoveAfterInTabOrder`(*self*, *win*)[¶](#wx.Window.MoveAfterInTabOrder "Permalink to this definition")
Moves this window in the tab navigation order after the specified *win*.


This means that when the user presses `TAB` key on that other window, the focus switches to this window.


Default tab order is the same as creation order, this function and [`MoveBeforeInTabOrder`](#wx.Window.MoveBeforeInTabOrder "wx.Window.MoveBeforeInTabOrder") allow to change it after creating all the windows.



Parameters
**win** ([*wx.Window*](#wx.Window "wx.Window")) – A sibling of this window which should precede it in tab order, must not be `None`






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def MoveBeforeInTabOrder(self, win: 'Window') -> None:
        """ 

`MoveBeforeInTabOrder`(*self*, *win*)[¶](#wx.Window.MoveBeforeInTabOrder "Permalink to this definition")
Same as [`MoveAfterInTabOrder`](#wx.Window.MoveAfterInTabOrder "wx.Window.MoveAfterInTabOrder") except that it inserts this window just before *win* instead of putting it right after it.



Parameters
**win** ([*wx.Window*](#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Navigate(self, flags: int=NavigationKeyEvent.IsForward) -> bool:
        """ 

`Navigate`(*self*, *flags=NavigationKeyEvent.IsForward*)[¶](#wx.Window.Navigate "Permalink to this definition")
Performs a keyboard navigation action starting from this window.


This method is equivalent to calling [`NavigateIn`](#wx.Window.NavigateIn "wx.Window.NavigateIn") method on the parent window.



Parameters
**flags** (*int*) – A combination of `wx.NavigationKeyEvent.IsForward` and `wx.NavigationKeyEvent.WinChange` .



Return type
*bool*



Returns
Returns `True` if the focus was moved to another window or `False` if nothing changed.





Note


You may wish to call this from a text control custom keypress handler to do the default navigation behaviour for the tab key, since the standard default behaviour for a multiline text control with the `wx.TE_PROCESS_TAB` style is to insert a tab and not navigate to the next control. See also  [wx.NavigationKeyEvent](wx.NavigationKeyEvent.html#wx-navigationkeyevent) and HandleAsNavigationKey.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def NavigateIn(self, flags: int=NavigationKeyEvent.IsForward) -> bool:
        """ 

`NavigateIn`(*self*, *flags=NavigationKeyEvent.IsForward*)[¶](#wx.Window.NavigateIn "Permalink to this definition")
Performs a keyboard navigation action inside this window.


See [`Navigate`](#wx.Window.Navigate "wx.Window.Navigate") for more information.



Parameters
**flags** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    @staticmethod
    def NewControlId(count: int=1) -> int:
        """ 

*static* `NewControlId`(*count=1*)[¶](#wx.Window.NewControlId "Permalink to this definition")
Create a new `ID` or range of IDs that are not currently in use.


The IDs will be reserved until assigned to a  [wx.Window](#wx-window) `ID` or unreserved with [`UnreserveControlId`](#wx.Window.UnreserveControlId "wx.Window.UnreserveControlId") .


See [Window IDs](window_ids_overview.html#window-ids) for more information.



Parameters
**count** (*int*) – The number of sequential IDs to reserve.



Return type
*wx.WindowID*



Returns
Returns the `ID` or the first `ID` of the range (i.e. the most negative), or `wx.ID_NONE` if the specified number of identifiers couldn’t be allocated.





See also


[`UnreserveControlId`](#wx.Window.UnreserveControlId "wx.Window.UnreserveControlId") ,  [wx.IdManager](wx.IdManager.html#wx-idmanager), [Window IDs](window_ids_overview.html#window-ids)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def OnInternalIdle(self) -> None:
        """ 

`OnInternalIdle`(*self*)[¶](#wx.Window.OnInternalIdle "Permalink to this definition")
This virtual function is normally only used internally, but sometimes an application may need it to implement functionality that should not be disabled by an application defining an OnIdle handler in a derived class.


This function may be used to do delayed painting, for example, and most implementations call [`UpdateWindowUI`](#wx.Window.UpdateWindowUI "wx.Window.UpdateWindowUI") in order to send update events to the window in idle time.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def PageDown(self) -> bool:
        """ 

`PageDown`(*self*)[¶](#wx.Window.PageDown "Permalink to this definition")
Same as [`ScrollPages`](#wx.Window.ScrollPages "wx.Window.ScrollPages") (1).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def PageUp(self) -> bool:
        """ 

`PageUp`(*self*)[¶](#wx.Window.PageUp "Permalink to this definition")
Same as [`ScrollPages`](#wx.Window.ScrollPages "wx.Window.ScrollPages") (-1).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def PopEventHandler(self, deleteHandler: bool=False) -> 'EvtHandler':
        """ 

`PopEventHandler`(*self*, *deleteHandler=False*)[¶](#wx.Window.PopEventHandler "Permalink to this definition")
Removes and returns the top-most event handler on the event handler stack.


E.g. in the case of:



![_staticimagesoverviewsoverview_events_winstack.png](_staticimagesoverviewsoverview_events_winstack.png)


  



> when calling W-> [`PopEventHandler`](#wx.Window.PopEventHandler "wx.Window.PopEventHandler") , the event handler `A` will be removed and `B` will be the first handler of the stack.


Note that it’s an error to call this function when no event handlers were pushed on this window (i.e. when the window itself is its only event handler).



Parameters
**deleteHandler** (*bool*) – If this is `True`, the handler will be deleted after it is removed (and the returned value will be `None`).



Return type
 [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler)





See also


[How Events are Processed](events_overview.html#how-events-are-processed)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def PopupMenu(self, *args, **kw) -> bool:
        """ 

`PopupMenu`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.PopupMenu "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**PopupMenu** *(self, menu, pos=DefaultPosition)*


Pops up the given menu at the specified coordinates, relative to this window, and returns control when the user has dismissed the menu.


If a menu item is selected, the corresponding menu event is generated and will be processed as usual. If coordinates are not specified, the current mouse cursor position is used.


*menu* is the menu to pop up.


The position where the menu will appear can be specified either as a  [wx.Point](wx.Point.html#wx-point) *pos* or by two integers (*x* and *y*).


Note that this function switches focus to this window before showing the menu.



Parameters
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –



Return type
*bool*





Note


Just before the menu is popped up, [`wx.Menu.UpdateUI`](wx.Menu.html#wx.Menu.UpdateUI "wx.Menu.UpdateUI") is called to ensure that the menu items are in the correct state. The menu does not get deleted by the window. It is recommended to not explicitly specify coordinates when calling PopupMenu in response to mouse click, because some of the ports (namely, wxGTK) can do a better job of positioning the menu in that case.




See also


 [wx.Menu](wx.Menu.html#wx-menu)





---

  



**PopupMenu** *(self, menu, x, y)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) –
* **x** (*int*) –
* **y** (*int*) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def PostSizeEvent(self) -> None:
        """ 

`PostSizeEvent`(*self*)[¶](#wx.Window.PostSizeEvent "Permalink to this definition")
Posts a size event to the window.


This is the same as [`SendSizeEvent`](#wx.Window.SendSizeEvent "wx.Window.SendSizeEvent") with `SEND_EVENT_POST` argument.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def PostSizeEventToParent(self) -> None:
        """ 

`PostSizeEventToParent`(*self*)[¶](#wx.Window.PostSizeEventToParent "Permalink to this definition")
Posts a size event to the parent of this window.


This is the same as [`SendSizeEventToParent`](#wx.Window.SendSizeEventToParent "wx.Window.SendSizeEventToParent") with `SEND_EVENT_POST` argument.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ProcessEvent(self, event: 'Event') -> bool:
        """ 

`ProcessEvent`(*self*, *event*)[¶](#wx.Window.ProcessEvent "Permalink to this definition")
This function is public in  [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler) but protected in  [wx.Window](#wx-window) because for Windows you should always call  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) on the pointer returned by [`GetEventHandler`](#wx.Window.GetEventHandler "wx.Window.GetEventHandler") and not on the  [wx.Window](#wx-window) object itself.


For convenience, a [`ProcessWindowEvent`](#wx.Window.ProcessWindowEvent "wx.Window.ProcessWindowEvent") method is provided as a synonym for:



```
self.GetEventHandler().ProcessEvent()

```


Note that it’s still possible to call these functions directly on the  [wx.Window](#wx-window) object (e.g. casting it to  [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler)) but doing that will create subtle bugs when windows with event handlers pushed on them are involved.


This holds also for all other  [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler) functions.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ProcessWindowEvent(self, event: 'Event') -> bool:
        """ 

`ProcessWindowEvent`(*self*, *event*)[¶](#wx.Window.ProcessWindowEvent "Permalink to this definition")
Convenient wrapper for  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent).


This is the same as writing:



```
self.GetEventHandler().ProcessEvent(event)

```


but more convenient. Notice that  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) itself can’t be called for  [wx.Window](#wx-window) objects as it ignores the event handlers associated with the window; use this function instead.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ProcessWindowEventLocally(self, event: 'Event') -> bool:
        """ 

`ProcessWindowEventLocally`(*self*, *event*)[¶](#wx.Window.ProcessWindowEventLocally "Permalink to this definition")
Wrapper for [`wx.EvtHandler.ProcessEventLocally`](wx.EvtHandler.html#wx.EvtHandler.ProcessEventLocally "wx.EvtHandler.ProcessEventLocally") .


This method is similar to [`ProcessWindowEvent`](#wx.Window.ProcessWindowEvent "wx.Window.ProcessWindowEvent") but can be used to search for the event handler only in this window and any event handlers pushed on top of it. Unlike [`ProcessWindowEvent`](#wx.Window.ProcessWindowEvent "wx.Window.ProcessWindowEvent") it won’t propagate the event upwards. But it will use the validator and event handlers associated with this window, if any.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 



Return type
*bool*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def PushEventHandler(self, handler: 'EvtHandler') -> None:
        """ 

`PushEventHandler`(*self*, *handler*)[¶](#wx.Window.PushEventHandler "Permalink to this definition")
Pushes this event handler onto the event stack for the window.


An event handler is an object that is capable of processing the events sent to a window. By default, the window is its own event handler, but an application may wish to substitute another, for example to allow central implementation of event-handling for a variety of different window classes.


[`wx.Window.PushEventHandler`](#wx.Window.PushEventHandler "wx.Window.PushEventHandler") allows an application to set up a *stack* of event handlers, where an event not handled by one event handler is handed to the next one in the chain.


E.g. if you have two event handlers `A` and `B` and a  [wx.Window](#wx-window) instance `W` and you call:



```
W.PushEventHandler(A)
W.PushEventHandler(B)

```


you will end up with the following situation:



![_staticimagesoverviewsoverview_events_winstack.png](_staticimagesoverviewsoverview_events_winstack.png)


  


Note that you can use [`wx.Window.PopEventHandler`](#wx.Window.PopEventHandler "wx.Window.PopEventHandler") to remove the event handler.



Parameters
**handler** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – Specifies the handler to be pushed. It must not be part of a  [wx.EvtHandler](wx.EvtHandler.html#wx-evthandler) chain; an assert will fail if it’s not unlinked (see [`wx.EvtHandler.IsUnlinked`](wx.EvtHandler.html#wx.EvtHandler.IsUnlinked "wx.EvtHandler.IsUnlinked") ).





See also


[How Events are Processed](events_overview.html#how-events-are-processed)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Raise(self) -> None:
        """ 

`Raise`(*self*)[¶](#wx.Window.Raise "Permalink to this definition")
Raises the window to the top of the window hierarchy (Z-order).


Notice that this function only requests the window manager to raise this window to the top of Z-order. Depending on its configuration, the window manager may raise the window, not do it at all or indicate that a window requested to be raised in some other way, e.g. by flashing its icon if it is minimized.



Note


This function only works for TopLevelWindow-derived classes.




See also


[`Lower`](#wx.Window.Lower "wx.Window.Lower")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Refresh(self, eraseBackground=True, rect=None) -> None:
        """ 

`Refresh`(*self*, *eraseBackground=True*, *rect=None*)[¶](#wx.Window.Refresh "Permalink to this definition")
Causes this window, and all of its children recursively, to be repainted.


Note that repainting doesn’t happen immediately but only during the next event loop iteration, if you need to update the window immediately you should use [`Update`](#wx.Window.Update "wx.Window.Update") instead.



Parameters
* **eraseBackground** (*bool*) – If `True`, the background will be erased too. Note that in non-MSW ports background is always erased.
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – If not `None`, only the given rectangle will be treated as damaged.





See also


[`RefreshRect`](#wx.Window.RefreshRect "wx.Window.RefreshRect")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def RefreshRect(self, rect, eraseBackground=True) -> None:
        """ 

`RefreshRect`(*self*, *rect*, *eraseBackground=True*)[¶](#wx.Window.RefreshRect "Permalink to this definition")
Redraws the contents of the given rectangle: only the area inside it will be repainted.


This is the same as [`Refresh`](#wx.Window.Refresh "wx.Window.Refresh") but has a nicer syntax as it can be called with a temporary  [wx.Rect](wx.Rect.html#wx-rect) object as argument like this `RefreshRect(wxRect(x, y, w, h))` .



Parameters
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **eraseBackground** (*bool*) –






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def RegisterHotKey(self, hotkeyId, modifiers, virtualKeyCode) -> bool:
        """ 

`RegisterHotKey`(*self*, *hotkeyId*, *modifiers*, *virtualKeyCode*)[¶](#wx.Window.RegisterHotKey "Permalink to this definition")
Registers a system wide hotkey.


Every time the user presses the hotkey registered here, this window will receive a hotkey event.


It will receive the event even if the application is in the background and does not have the input focus because the user is working with some other application.



Parameters
* **hotkeyId** (*int*) – Numeric identifier of the hotkey. For applications this must be between 0 and 0xBFFF. If this function is called from a shared `DLL`, it must be a system wide unique identifier between 0xC000 and 0xFFFF. This is a MSW specific detail.
* **modifiers** (*int*) – A bitwise combination of `wx.MOD_SHIFT`, `wx.MOD_CONTROL`, `wx.MOD_ALT` or `wx.MOD_WIN` specifying the modifier keys that have to be pressed along with the key.
* **virtualKeyCode** (*int*) – The key code of the hotkey, e.g. an `ASCII` character such as `'K'` or one of elements of KeyCode enum.



Return type
*bool*



Returns
`True` if the hotkey was registered successfully. `False` if some other application already registered a hotkey with this modifier/virtualKeyCode combination.





Note


Use EVT\_HOTKEY(hotkeyId, fnc) in the event table to capture the event. This function is currently only implemented under MSW and macOS and always returns `False` in the other ports.




See also


[`UnregisterHotKey`](#wx.Window.UnregisterHotKey "wx.Window.UnregisterHotKey")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ReleaseMouse(self) -> None:
        """ 

`ReleaseMouse`(*self*)[¶](#wx.Window.ReleaseMouse "Permalink to this definition")
Releases mouse input captured with [`CaptureMouse`](#wx.Window.CaptureMouse "wx.Window.CaptureMouse") .



See also


[`CaptureMouse`](#wx.Window.CaptureMouse "wx.Window.CaptureMouse") , [`HasCapture`](#wx.Window.HasCapture "wx.Window.HasCapture") , [`ReleaseMouse`](#wx.Window.ReleaseMouse "wx.Window.ReleaseMouse") ,  [wx.MouseCaptureLostEvent](wx.MouseCaptureLostEvent.html#wx-mousecapturelostevent),  [wx.MouseCaptureChangedEvent](wx.MouseCaptureChangedEvent.html#wx-mousecapturechangedevent)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def RemoveChild(self, child: 'WindowBase') -> None:
        """ 

`RemoveChild`(*self*, *child*)[¶](#wx.Window.RemoveChild "Permalink to this definition")
Removes a child window.


This is called automatically by window deletion functions so should not be required by the application programmer. Notice that this function is mostly internal to wxWidgets and shouldn’t be called by the user code.



Parameters
**child** ([*wx.WindowBase*](wx.WindowBase.html#wx.WindowBase "wx.WindowBase")) – Child window to remove.






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def RemoveEventHandler(self, handler: 'EvtHandler') -> bool:
        """ 

`RemoveEventHandler`(*self*, *handler*)[¶](#wx.Window.RemoveEventHandler "Permalink to this definition")
Find the given *handler* in the windows event handler stack and removes (but does not delete) it from the stack.


See [`wx.EvtHandler.Unlink`](wx.EvtHandler.html#wx.EvtHandler.Unlink "wx.EvtHandler.Unlink") for more info.



Parameters
**handler** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – The event handler to remove, must be not `None` and must be present in this windows event handlers stack.



Return type
*bool*



Returns
Returns `True` if it was found and `False` otherwise (this also results in an assert failure so this function should only be called when the handler is supposed to be there).





See also


[`PushEventHandler`](#wx.Window.PushEventHandler "wx.Window.PushEventHandler") , [`PopEventHandler`](#wx.Window.PopEventHandler "wx.Window.PopEventHandler")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Reparent(self, newParent: 'Window') -> bool:
        """ 

`Reparent`(*self*, *newParent*)[¶](#wx.Window.Reparent "Permalink to this definition")
Reparents the window, i.e. the window will be removed from its current parent window (e.g.


a non-standard toolbar in a  [wx.Frame](wx.Frame.html#wx-frame)) and then re-inserted into another.


Notice that currently you need to explicitly call [`wx.Notebook.RemovePage`](wx.BookCtrlBase.html#wx.BookCtrlBase.RemovePage "wx.BookCtrlBase.RemovePage") before reparenting a notebook page.



Parameters
**newParent** ([*wx.Window*](#wx.Window "wx.Window")) – New parent.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ScreenToClient(self, *args, **kw) -> tuple:
        """ 

`ScreenToClient`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.ScreenToClient "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ScreenToClient** *(self, x, y)*


Converts from screen to client window coordinates.



Parameters
* **x** (*int*) – Stores the screen x coordinate and receives the client x coordinate.
* **y** (*int*) – Stores the screen x coordinate and receives the client x coordinate.



Return type
*tuple*



Returns
( *x*, *y* )






---

  



**ScreenToClient** *(self, pt)*


Converts from screen to client window coordinates.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The screen position.



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ScrollLines(self, lines: int) -> bool:
        """ 

`ScrollLines`(*self*, *lines*)[¶](#wx.Window.ScrollLines "Permalink to this definition")
Scrolls the window by the given number of lines down (if *lines* is positive) or up.



Parameters
**lines** (*int*) – 



Return type
*bool*



Returns
Returns `True` if the window was scrolled, `False` if it was already on top/bottom and nothing was done.





Note


This function is currently only implemented under MSW and  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) under wxGTK (it also works for  [wx.Scrolled](wx.Scrolled.html#wx-scrolled) classes under all platforms).




See also


[`ScrollPages`](#wx.Window.ScrollPages "wx.Window.ScrollPages")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ScrollPages(self, pages: int) -> bool:
        """ 

`ScrollPages`(*self*, *pages*)[¶](#wx.Window.ScrollPages "Permalink to this definition")
Scrolls the window by the given number of pages down (if *pages* is positive) or up.



Parameters
**pages** (*int*) – 



Return type
*bool*



Returns
Returns `True` if the window was scrolled, `False` if it was already on top/bottom and nothing was done.





Note


This function is currently only implemented under MSW and wxGTK.




See also


[`ScrollLines`](#wx.Window.ScrollLines "wx.Window.ScrollLines")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ScrollWindow(self, dx, dy, rect=None) -> None:
        """ 

`ScrollWindow`(*self*, *dx*, *dy*, *rect=None*)[¶](#wx.Window.ScrollWindow "Permalink to this definition")
Physically scrolls the pixels in the window and move child windows accordingly.



Parameters
* **dx** (*int*) – Amount to scroll horizontally.
* **dy** (*int*) – Amount to scroll vertically.
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – Rectangle to scroll, if it is `None`, the whole window is scrolled (this is always the case under wxGTK which doesn’t support this parameter)





Note


Note that you can often use  [wx.Scrolled](wx.Scrolled.html#wx-scrolled) instead of using this function directly.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SendDestroyEvent(self) -> None:
        """ 

`SendDestroyEvent`(*self*)[¶](#wx.Window.SendDestroyEvent "Permalink to this definition")
Generate  [wx.WindowDestroyEvent](wx.WindowDestroyEvent.html#wx-windowdestroyevent) for this window.


This is called by the window itself when it is being destroyed and usually there is no need to call it but see  [wx.WindowDestroyEvent](wx.WindowDestroyEvent.html#wx-windowdestroyevent) for explanations of when you might want to do it.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SendIdleEvents(self, event: 'IdleEvent') -> bool:
        """ 

`SendIdleEvents`(*self*, *event*)[¶](#wx.Window.SendIdleEvents "Permalink to this definition")
Send idle event to window and all subwindows.


Returns `True` if more idle time is requested.



Parameters
**event** ([*wx.IdleEvent*](wx.IdleEvent.html#wx.IdleEvent "wx.IdleEvent")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SendSizeEvent(self, flags: int=0) -> None:
        """ 

`SendSizeEvent`(*self*, *flags=0*)[¶](#wx.Window.SendSizeEvent "Permalink to this definition")
This function sends a dummy [size event](wx.SizeEvent.html#wx-sizeevent) to the window allowing it to re-layout its children positions.


It is sometimes useful to call this function after adding or deleting a children after the frame creation or if a child size changes. Note that if the frame is using either sizers or constraints for the children layout, it is enough to call [`wx.Window.Layout`](#wx.Window.Layout "wx.Window.Layout") directly and this function should not be used in this case.


If *flags* includes `SEND_EVENT_POST` value, this function posts the event, i.e. schedules it for later processing, instead of dispatching it directly. You can also use [`PostSizeEvent`](#wx.Window.PostSizeEvent "wx.Window.PostSizeEvent") as a more readable equivalent of calling this function with this flag.



Parameters
**flags** (*int*) – May include `SEND_EVENT_POST` . Default value is 0.






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SendSizeEventToParent(self, flags: int=0) -> None:
        """ 

`SendSizeEventToParent`(*self*, *flags=0*)[¶](#wx.Window.SendSizeEventToParent "Permalink to this definition")
Safe wrapper for [`GetParent`](#wx.Window.GetParent "wx.Window.GetParent") . [`SendSizeEvent`](#wx.Window.SendSizeEvent "wx.Window.SendSizeEvent") .


This function simply checks that the window has a valid parent which is not in process of being deleted and calls [`SendSizeEvent`](#wx.Window.SendSizeEvent "wx.Window.SendSizeEvent") on it. It is used internally by windows such as toolbars changes to whose state should result in parent re-layout (e.g. when a toolbar is added to the top of the window, all the other windows must be shifted down).



Parameters
**flags** (*int*) – See description of this parameter in [`SendSizeEvent`](#wx.Window.SendSizeEvent "wx.Window.SendSizeEvent") documentation.





See also


[`PostSizeEventToParent`](#wx.Window.PostSizeEventToParent "wx.Window.PostSizeEventToParent")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetAcceleratorTable(self, accel: 'AcceleratorTable') -> None:
        """ 

`SetAcceleratorTable`(*self*, *accel*)[¶](#wx.Window.SetAcceleratorTable "Permalink to this definition")
Sets the accelerator table for this window.


See  [wx.AcceleratorTable](wx.AcceleratorTable.html#wx-acceleratortable).



Parameters
**accel** ([*wx.AcceleratorTable*](wx.AcceleratorTable.html#wx.AcceleratorTable "wx.AcceleratorTable")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetAccessible(self, accessible: 'Accessible') -> None:
        """ 

`SetAccessible`(*self*, *accessible*)[¶](#wx.Window.SetAccessible "Permalink to this definition")
Sets the accessible for this window.


Any existing accessible for this window will be deleted first, if not identical to *accessible*. See also  [wx.Accessible](wx.Accessible.html#wx-accessible).



Parameters
**accessible** ([*wx.Accessible*](wx.Accessible.html#wx.Accessible "wx.Accessible")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetAutoLayout(self, autoLayout: bool) -> None:
        """ 

`SetAutoLayout`(*self*, *autoLayout*)[¶](#wx.Window.SetAutoLayout "Permalink to this definition")
Determines whether the [`Layout`](#wx.Window.Layout "wx.Window.Layout") function will be called automatically when the window is resized.


This method is called implicitly by [`SetSizer`](#wx.Window.SetSizer "wx.Window.SetSizer") but if you use [`SetConstraints`](#wx.Window.SetConstraints "wx.Window.SetConstraints") you should call it manually or otherwise the window layout won’t be correctly updated when its size changes.



Parameters
**autoLayout** (*bool*) – Set this to `True` if you wish the [`Layout`](#wx.Window.Layout "wx.Window.Layout") function to be called automatically when the window is resized.





See also


[`SetSizer`](#wx.Window.SetSizer "wx.Window.SetSizer") , [`SetConstraints`](#wx.Window.SetConstraints "wx.Window.SetConstraints")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetBackgroundColour(self, colour: Union[int, str, 'Colour']) -> bool:
        """ 

`SetBackgroundColour`(*self*, *colour*)[¶](#wx.Window.SetBackgroundColour "Permalink to this definition")
Sets the background colour of the window.


Notice that as with [`SetForegroundColour`](#wx.Window.SetForegroundColour "wx.Window.SetForegroundColour") , setting the background colour of a native control may not affect the entire control and could be not supported at all depending on the control and platform.


Please see [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes") for explanation of the difference between this method and [`SetOwnBackgroundColour`](#wx.Window.SetOwnBackgroundColour "wx.Window.SetOwnBackgroundColour") .



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The colour to be used as the background colour; pass NullColour to reset to the default colour. Note that you may want to use [`wx.SystemSettings.GetColour`](wx.SystemSettings.html#wx.SystemSettings.GetColour "wx.SystemSettings.GetColour") to retrieve a suitable colour to use rather than setting a hard-coded one.



Return type
*bool*



Returns
`True` if the colour was really changed, `False` if it was already set to this colour and nothing was done.





Note


The background colour is usually painted by the default  [wx.EraseEvent](wx.EraseEvent.html#wx-eraseevent) event handler function under Windows and automatically under GTK. Note that setting the background colour does not cause an immediate refresh, so you may wish to call [`wx.Window.ClearBackground`](#wx.Window.ClearBackground "wx.Window.ClearBackground") or [`wx.Window.Refresh`](#wx.Window.Refresh "wx.Window.Refresh") after calling this function. Using this function will disable attempts to use themes for this window, if the system supports them. Use with care since usually the themes represent the appearance chosen by the user to be used for all applications on the system.




See also


[`GetBackgroundColour`](#wx.Window.GetBackgroundColour "wx.Window.GetBackgroundColour") , [`SetForegroundColour`](#wx.Window.SetForegroundColour "wx.Window.SetForegroundColour") , [`GetForegroundColour`](#wx.Window.GetForegroundColour "wx.Window.GetForegroundColour") , [`ClearBackground`](#wx.Window.ClearBackground "wx.Window.ClearBackground") , [`Refresh`](#wx.Window.Refresh "wx.Window.Refresh") ,  [wx.EraseEvent](wx.EraseEvent.html#wx-eraseevent),  [wx.SystemSettings](wx.SystemSettings.html#wx-systemsettings)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetBackgroundStyle(self, style: BackgroundStyle) -> bool:
        """ 

`SetBackgroundStyle`(*self*, *style*)[¶](#wx.Window.SetBackgroundStyle "Permalink to this definition")
Sets the background style of the window.


The default background style is `BG_STYLE_ERASE` which indicates that the window background may be erased in `EVT_ERASE_BACKGROUND` handler. This is a safe, compatibility default; however you may want to change it to `BG_STYLE_SYSTEM` if you don’t define any erase background event handlers at all, to avoid unnecessary generation of erase background events and always let system erase the background. And you should change the background style to `BG_STYLE_PAINT` if you define an `EVT_PAINT` handler which completely overwrites the window background as in this case erasing it previously, either in `EVT_ERASE_BACKGROUND` handler or in the system default handler, would result in flicker as the background pixels will be repainted twice every time the window is redrawn. Do ensure that the background is entirely erased by your `EVT_PAINT` handler in this case however as otherwise garbage may be left on screen.


Notice that in previous versions of wxWidgets a common way to work around the above mentioned flickering problem was to define an empty `EVT_ERASE_BACKGROUND` handler. Setting background style to `BG_STYLE_PAINT` is a simpler and more efficient solution to the same problem.


Under wxGTK and wxOSX, you can use `BG_STYLE_TRANSPARENT` to obtain full transparency of the window background. Note that wxGTK supports this only since GTK 2.12 with a compositing manager enabled, call [`IsTransparentBackgroundSupported`](#wx.Window.IsTransparentBackgroundSupported "wx.Window.IsTransparentBackgroundSupported") to check whether this is the case, see the example of doing it in :ref:[`](#id1)the shaped <the shaped>`sample”.


Also, in order for `SetBackgroundStyle(wxBG_STYLE_TRANSPARENT)` to work, it must be called before [`Create`](#wx.Window.Create "wx.Window.Create") . If you’re using your own Window-derived class you should write your code in the following way:



```
class MyWidget(wx.Window):

    def __init__(self, parent):

        wx.Window.__init__(self) # Use default constructor here!

        # Do this first:
        self.SetBackgroundStyle(wx.BG_STYLE_TRANSPARENT)

        # And really create the window afterwards:
        self.Create(parent)

```



Parameters
**style** ([*BackgroundStyle*](wx.BackgroundStyle.enumeration.html "BackgroundStyle")) – 



Return type
*bool*





See also


[`SetBackgroundColour`](#wx.Window.SetBackgroundColour "wx.Window.SetBackgroundColour") , [`GetForegroundColour`](#wx.Window.GetForegroundColour "wx.Window.GetForegroundColour") , [`SetTransparent`](#wx.Window.SetTransparent "wx.Window.SetTransparent") , [`IsTransparentBackgroundSupported`](#wx.Window.IsTransparentBackgroundSupported "wx.Window.IsTransparentBackgroundSupported")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetCanFocus(self, canFocus: bool) -> None:
        """ 

`SetCanFocus`(*self*, *canFocus*)[¶](#wx.Window.SetCanFocus "Permalink to this definition")
This method is only implemented by ports which have support for native `TAB` traversal (such as GTK+ 2.0).


It is called by wxWidgets’ container control code to give the native system a hint when doing `TAB` traversal. A call to this does not disable or change the effect of programmatically calling [`SetFocus`](#wx.Window.SetFocus "wx.Window.SetFocus") .



Parameters
**canFocus** (*bool*) – 





See also


 [wx.FocusEvent](wx.FocusEvent.html#wx-focusevent), [`wx.Panel.SetFocus`](wx.Panel.html#wx.Panel.SetFocus "wx.Panel.SetFocus") , [`wx.Panel.SetFocusIgnoringChildren`](wx.Panel.html#wx.Panel.SetFocusIgnoringChildren "wx.Panel.SetFocusIgnoringChildren")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetCaret(self, caret: 'Caret') -> None:
        """ 

`SetCaret`(*self*, *caret*)[¶](#wx.Window.SetCaret "Permalink to this definition")
Sets the caret() associated with the window.



Parameters
**caret** ([*wx.Caret*](wx.Caret.html#wx.Caret "wx.Caret")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetClientRect(self, rect) -> None:
        """ 

`SetClientRect`(*self*, *rect*)[¶](#wx.Window.SetClientRect "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetClientSize(self, *args, **kw) -> None:
        """ 

`SetClientSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.SetClientSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetClientSize** *(self, width, height)*


This sets the size of the window client area in pixels.


Using this function to size a window tends to be more device-independent than [`SetSize`](#wx.Window.SetSize "wx.Window.SetSize") , since the application need not worry about what dimensions the border or title bar have when trying to fit the window around panel items, for example.


Note that special value of -1 which can be used in some other functions to preserve the existing size is *not* supported for *width* and *height* here, i.e. they both must be valid, positive integers.



Parameters
* **width** (*int*) –
* **height** (*int*) –





See also


[Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





---

  



**SetClientSize** *(self, size)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**SetClientSize** *(self, rect)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetConstraints(self, constraints: 'LayoutConstraints') -> None:
        """ 

`SetConstraints`(*self*, *constraints*)[¶](#wx.Window.SetConstraints "Permalink to this definition")
Sets the window to have the given layout constraints.


The window will then own the object, and will take care of its deletion. If an existing layout constraints object is already owned by the window, it will be deleted.



Parameters
**constraints** ([*wx.LayoutConstraints*](wx.LayoutConstraints.html#wx.LayoutConstraints "wx.LayoutConstraints")) – The constraints to set. Pass `None` to disassociate and delete the window’s constraints.





Note


You must call [`SetAutoLayout`](#wx.Window.SetAutoLayout "wx.Window.SetAutoLayout") to tell a window to use the constraints automatically in OnSize; otherwise, you must override OnSize and call [`Layout`](#wx.Window.Layout "wx.Window.Layout") explicitly. When setting both a  [wx.LayoutConstraints](wx.LayoutConstraints.html#wx-layoutconstraints) and a  [wx.Sizer](wx.Sizer.html#wx-sizer), only the sizer will have effect.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetContainingSizer(self, sizer: 'Sizer') -> None:
        """ 

`SetContainingSizer`(*self*, *sizer*)[¶](#wx.Window.SetContainingSizer "Permalink to this definition")
Used by  [wx.Sizer](wx.Sizer.html#wx-sizer) internally to notify the window about being managed by the given sizer.


This method should not be called from outside the library, unless you’re implementing a custom sizer class – and in the latter case you must call this method with the pointer to the sizer itself whenever a window is added to it and with `None` argument when the window is removed from it.



Parameters
**sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetCursor(self, cursor: 'Cursor') -> bool:
        """ 

`SetCursor`(*self*, *cursor*)[¶](#wx.Window.SetCursor "Permalink to this definition")
Sets the window’s cursor.


Notice that the window cursor also sets it for the children of the window implicitly.


The *cursor* may be `NullCursor` in which case the window cursor will be reset back to default.



Parameters
**cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – Specifies the cursor that the window should normally display.



Return type
*bool*





See also


[`wx.SetCursor`](wx.functions.html#wx.SetCursor "wx.SetCursor") ,  [wx.Cursor](wx.Cursor.html#wx-cursor)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetDimensions(self, x, y, width, height, sizeFlags=SIZE_AUTO) -> None:
        """ 

`SetDimensions`(*self*, *x*, *y*, *width*, *height*, *sizeFlags=SIZE\_AUTO*)[¶](#wx.Window.SetDimensions "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetDoubleBuffered(self, on: bool) -> None:
        """ 

`SetDoubleBuffered`(*self*, *on*)[¶](#wx.Window.SetDoubleBuffered "Permalink to this definition")
Turn on or off double buffering of the window if the system supports it.



Parameters
**on** (*bool*) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetDropTarget(self, target: 'DropTarget') -> None:
        """ 

`SetDropTarget`(*self*, *target*)[¶](#wx.Window.SetDropTarget "Permalink to this definition")
Associates a drop target with this window.


If the window already has a drop target, it is deleted.



Parameters
**target** ([*wx.DropTarget*](wx.DropTarget.html#wx.DropTarget "wx.DropTarget")) – 





See also


[`GetDropTarget`](#wx.Window.GetDropTarget "wx.Window.GetDropTarget") , [Drag and Drop Overview](dnd_overview.html#drag-and-drop-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetEventHandler(self, handler: 'EvtHandler') -> None:
        """ 

`SetEventHandler`(*self*, *handler*)[¶](#wx.Window.SetEventHandler "Permalink to this definition")
Sets the event handler for this window.


Note that if you use this function you may want to use as the “next” handler of *handler* the window itself; in this way when *handler* doesn’t process an event, the window itself will have a chance to do it.



Parameters
**handler** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – Specifies the handler to be set. Cannot be `None`.





See also


[How Events are Processed](events_overview.html#how-events-are-processed)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetExtraStyle(self, exStyle: int) -> None:
        """ 

`SetExtraStyle`(*self*, *exStyle*)[¶](#wx.Window.SetExtraStyle "Permalink to this definition")
Sets the extra style bits for the window.


The currently defined extra style bits are reported in the class description.



Parameters
**exStyle** (*long*) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetFocus(self) -> None:
        """ 

`SetFocus`(*self*)[¶](#wx.Window.SetFocus "Permalink to this definition")
This sets the window to receive keyboard input.



See also


[`HasFocus`](#wx.Window.HasFocus "wx.Window.HasFocus") ,  [wx.FocusEvent](wx.FocusEvent.html#wx-focusevent), [`wx.Panel.SetFocus`](wx.Panel.html#wx.Panel.SetFocus "wx.Panel.SetFocus") , [`wx.Panel.SetFocusIgnoringChildren`](wx.Panel.html#wx.Panel.SetFocusIgnoringChildren "wx.Panel.SetFocusIgnoringChildren")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetFocusFromKbd(self) -> None:
        """ 

`SetFocusFromKbd`(*self*)[¶](#wx.Window.SetFocusFromKbd "Permalink to this definition")
This function is called by wxWidgets keyboard navigation code when the user gives the focus to this window from keyboard (e.g. using `TAB` key).


By default this method simply calls [`SetFocus`](#wx.Window.SetFocus "wx.Window.SetFocus") but can be overridden to do something in addition to this in the derived classes.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetFont(self, font: 'Font') -> bool:
        """ 

`SetFont`(*self*, *font*)[¶](#wx.Window.SetFont "Permalink to this definition")
Sets the font for this window.


This function should not be called for the parent window if you don’t want its font to be inherited by its children, use [`SetOwnFont`](#wx.Window.SetOwnFont "wx.Window.SetOwnFont") instead in this case and see [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes") for more explanations.


Please notice that the given font is not automatically used for  [wx.PaintDC](wx.PaintDC.html#wx-paintdc) objects associated with this window, you need to call [`wx.DC.SetFont`](wx.DC.html#wx.DC.SetFont "wx.DC.SetFont") too. However this font is used by any standard controls for drawing their text as well as by [`GetTextExtent`](#wx.Window.GetTextExtent "wx.Window.GetTextExtent") .



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – Font to associate with this window, pass NullFont to reset to the default font.



Return type
*bool*



Returns
`True` if the font was really changed, `False` if it was already set to this font and nothing was done.





See also


[`GetFont`](#wx.Window.GetFont "wx.Window.GetFont") , [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetForegroundColour(self, colour: Union[int, str, 'Colour']) -> bool:
        """ 

`SetForegroundColour`(*self*, *colour*)[¶](#wx.Window.SetForegroundColour "Permalink to this definition")
Sets the foreground colour of the window.


The meaning of foreground colour varies according to the window class; it may be the text colour or other colour, or it may not be used at all. Additionally, not all native controls support changing their foreground colour so this method may change their colour only partially or even not at all.


Please see [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes") for explanation of the difference between this method and [`SetOwnForegroundColour`](#wx.Window.SetOwnForegroundColour "wx.Window.SetOwnForegroundColour") .



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The colour to be used as the foreground colour; pass NullColour to reset to the default colour.



Return type
*bool*



Returns
`True` if the colour was really changed, `False` if it was already set to this colour and nothing was done.





See also


[`GetForegroundColour`](#wx.Window.GetForegroundColour "wx.Window.GetForegroundColour") , [`SetBackgroundColour`](#wx.Window.SetBackgroundColour "wx.Window.SetBackgroundColour") , [`GetBackgroundColour`](#wx.Window.GetBackgroundColour "wx.Window.GetBackgroundColour") , [`ShouldInheritColours`](#wx.Window.ShouldInheritColours "wx.Window.ShouldInheritColours")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetHelpText(self, helpText: str) -> None:
        """ 

`SetHelpText`(*self*, *helpText*)[¶](#wx.Window.SetHelpText "Permalink to this definition")
Sets the help text to be used as context-sensitive help for this window.


Note that the text is actually stored by the current  [wx.HelpProvider](wx.HelpProvider.html#wx-helpprovider) implementation, and not in the window object itself.



Parameters
**helpText** (*string*) – 





See also


[`GetHelpText`](#wx.Window.GetHelpText "wx.Window.GetHelpText") , [`wx.HelpProvider.AddHelp`](wx.HelpProvider.html#wx.HelpProvider.AddHelp "wx.HelpProvider.AddHelp")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetId(self, winid: int) -> None:
        """ 

`SetId`(*self*, *winid*)[¶](#wx.Window.SetId "Permalink to this definition")
Sets the identifier of the window.



Parameters
**winid** (*wx.WindowID*) – 





Note


Each window has an integer identifier. If the application has not provided one, an identifier will be generated. Normally, the identifier should be provided on creation and should not be modified subsequently.




See also


[`GetId`](#wx.Window.GetId "wx.Window.GetId") , [Window IDs](window_ids_overview.html#window-ids)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetInitialSize(self, size: Union[tuple[int, int], 'Size']=DefaultSize) -> None:
        """ 

`SetInitialSize`(*self*, *size=DefaultSize*)[¶](#wx.Window.SetInitialSize "Permalink to this definition")
A *smart* SetSize that will fill in default size components with the window’s *best* size values.


Also sets the window’s minsize to the value passed in for use with sizers. This means that if a full or partial size is passed to this function then the sizers will use that size instead of the results of [`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize") to determine the minimum needs of the window for layout.


Most controls will use this to set their initial size, and their min size to the passed in value (if any.)



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`SetSize`](#wx.Window.SetSize "wx.Window.SetSize") , [`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize") , [`GetEffectiveMinSize`](#wx.Window.GetEffectiveMinSize "wx.Window.GetEffectiveMinSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetLabel(self, label: str) -> None:
        """ 

`SetLabel`(*self*, *label*)[¶](#wx.Window.SetLabel "Permalink to this definition")
Sets the window’s label.



Parameters
**label** (*string*) – The window label.





See also


[`GetLabel`](#wx.Window.GetLabel "wx.Window.GetLabel")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetLayoutDirection(self, dir: int) -> None:
        """ 

`SetLayoutDirection`(*self*, *dir*)[¶](#wx.Window.SetLayoutDirection "Permalink to this definition")
Sets the layout direction for this window.


This function is only supported under MSW and GTK platforms, but not under Mac currently.



Parameters
**dir** ([*LayoutDirection*](wx.LayoutDirection.enumeration.html "LayoutDirection")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetMaxClientSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetMaxClientSize`(*self*, *size*)[¶](#wx.Window.SetMaxClientSize "Permalink to this definition")
Sets the maximum client size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size of its client area.


Note that this method is just a shortcut for:



```
self.SetMaxSize(self.ClientToWindowSize(size))

```



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`SetMaxSize`](#wx.Window.SetMaxSize "wx.Window.SetMaxSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetMaxSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetMaxSize`(*self*, *size*)[¶](#wx.Window.SetMaxSize "Permalink to this definition")
Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`SetMaxClientSize`](#wx.Window.SetMaxClientSize "wx.Window.SetMaxClientSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetMinClientSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetMinClientSize`(*self*, *size*)[¶](#wx.Window.SetMinClientSize "Permalink to this definition")
Sets the minimum client size of the window, to indicate to the sizer layout mechanism that this is the minimum required size of window’s client area.


You may need to call this if you change the window size after construction and before adding to its parent sizer.


Note, that just as with [`SetMinSize`](#wx.Window.SetMinSize "wx.Window.SetMinSize") , calling this method doesn’t prevent the program from explicitly making the window smaller than the specified size.


Note that this method is just a shortcut for:



```
self.SetMinSize(self.ClientToWindowSize(size))

```



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`SetMinSize`](#wx.Window.SetMinSize "wx.Window.SetMinSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetMinSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetMinSize`(*self*, *size*)[¶](#wx.Window.SetMinSize "Permalink to this definition")
Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size.


You may need to call this if you change the window size after construction and before adding to its parent sizer.


Notice that calling this method doesn’t prevent the program from making the window explicitly smaller than the specified size by calling [`SetSize`](#wx.Window.SetSize "wx.Window.SetSize") , it just ensures that it won’t become smaller than this size during the automatic layout.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`SetMinClientSize`](#wx.Window.SetMinClientSize "wx.Window.SetMinClientSize") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetName(self, name: str) -> None:
        """ 

`SetName`(*self*, *name*)[¶](#wx.Window.SetName "Permalink to this definition")
Sets the window’s name.



Parameters
**name** (*string*) – A name to set for the window.





See also


[`GetName`](#wx.Window.GetName "wx.Window.GetName")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetNextHandler(self, handler: 'EvtHandler') -> None:
        """ 

`SetNextHandler`(*self*, *handler*)[¶](#wx.Window.SetNextHandler "Permalink to this definition")
Windows cannot be used to form event handler chains; this function thus will assert when called.


Note that instead you can use [`PushEventHandler`](#wx.Window.PushEventHandler "wx.Window.PushEventHandler") or [`SetEventHandler`](#wx.Window.SetEventHandler "wx.Window.SetEventHandler") to implement a stack of event handlers to override  [wx.Window](#wx-window)’s own event handling mechanism.



Parameters
**handler** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetOwnBackgroundColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetOwnBackgroundColour`(*self*, *colour*)[¶](#wx.Window.SetOwnBackgroundColour "Permalink to this definition")
Sets the background colour of the window but prevents it from being inherited by the children of this window.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 





See also


[`SetBackgroundColour`](#wx.Window.SetBackgroundColour "wx.Window.SetBackgroundColour") , [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetOwnFont(self, font: 'Font') -> None:
        """ 

`SetOwnFont`(*self*, *font*)[¶](#wx.Window.SetOwnFont "Permalink to this definition")
Sets the font of the window but prevents it from being inherited by the children of this window.



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 





See also


[`SetFont`](#wx.Window.SetFont "wx.Window.SetFont") , [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetOwnForegroundColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetOwnForegroundColour`(*self*, *colour*)[¶](#wx.Window.SetOwnForegroundColour "Permalink to this definition")
Sets the foreground colour of the window but prevents it from being inherited by the children of this window.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 





See also


[`SetForegroundColour`](#wx.Window.SetForegroundColour "wx.Window.SetForegroundColour") , [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetPalette(self, pal: 'Palette') -> None:
        """ 

`SetPalette`(*self*, *pal*)[¶](#wx.Window.SetPalette "Permalink to this definition")

Parameters
**pal** ([*wx.Palette*](wx.Palette.html#wx.Palette "wx.Palette")) – 





Deprecated


use [`wx.DC.SetPalette`](wx.DC.html#wx.DC.SetPalette "wx.DC.SetPalette") instead.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetPosition(self, pt: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetPosition`(*self*, *pt*)[¶](#wx.Window.SetPosition "Permalink to this definition")
Moves the window to the specified position.


This is exactly the same as calling [`Move`](#wx.Window.Move "wx.Window.Move") with the default arguments.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetPreviousHandler(self, handler: 'EvtHandler') -> None:
        """ 

`SetPreviousHandler`(*self*, *handler*)[¶](#wx.Window.SetPreviousHandler "Permalink to this definition")
Windows cannot be used to form event handler chains; this function thus will assert when called.


Note that instead you can use [`PushEventHandler`](#wx.Window.PushEventHandler "wx.Window.PushEventHandler") or [`SetEventHandler`](#wx.Window.SetEventHandler "wx.Window.SetEventHandler") to implement a stack of event handlers to override  [wx.Window](#wx-window)’s own event handling mechanism.



Parameters
**handler** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetRect(self, rect) -> None:
        """ 

`SetRect`(*self*, *rect*)[¶](#wx.Window.SetRect "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetScrollPos(self, orientation, pos, refresh=True) -> None:
        """ 

`SetScrollPos`(*self*, *orientation*, *pos*, *refresh=True*)[¶](#wx.Window.SetScrollPos "Permalink to this definition")
Sets the position of one of the built-in scrollbars.



Parameters
* **orientation** (*int*) – Determines the scrollbar whose position is to be set. May be `wx.HORIZONTAL` or `wx.VERTICAL`.
* **pos** (*int*) – Position in scroll units.
* **refresh** (*bool*) – `True` to redraw the scrollbar, `False` otherwise.





Note


This function does not directly affect the contents of the window: it is up to the application to take note of scrollbar attributes and redraw contents accordingly.




See also


[`SetScrollbar`](#wx.Window.SetScrollbar "wx.Window.SetScrollbar") , [`GetScrollPos`](#wx.Window.GetScrollPos "wx.Window.GetScrollPos") , [`GetScrollThumb`](#wx.Window.GetScrollThumb "wx.Window.GetScrollThumb") ,  [wx.ScrollBar](wx.ScrollBar.html#wx-scrollbar),  [wx.Scrolled](wx.Scrolled.html#wx-scrolled)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetScrollbar(self, orientation, position, thumbSize, range, refresh=True) -> None:
        """ 

`SetScrollbar`(*self*, *orientation*, *position*, *thumbSize*, *range*, *refresh=True*)[¶](#wx.Window.SetScrollbar "Permalink to this definition")
Sets the scrollbar properties of a built-in scrollbar.



Parameters
* **orientation** (*int*) – Determines the scrollbar whose page size is to be set. May be `wx.HORIZONTAL` or `wx.VERTICAL`.
* **position** (*int*) – The position of the scrollbar in scroll units.
* **thumbSize** (*int*) – The size of the thumb, or visible portion of the scrollbar, in scroll units.
* **range** (*int*) – The maximum position of the scrollbar. Value of -1 can be used to ask for the scrollbar to be shown but in the disabled state: this can be used to avoid removing the scrollbar even when it is not needed (currently this is only implemented in wxMSW port).
* **refresh** (*bool*) – `True` to redraw the scrollbar, `False` otherwise.





Note


Let’s say you wish to display 50 lines of text, using the same font. The window is sized so that you can only see 16 lines at a time. You would use:



```
self.SetScrollbar(wx.VERTICAL, 0, 16, 50)

```


Note that with the window at this size, the thumb position can never go above 50 minus 16, or 34. You can determine how many lines are currently visible by dividing the current view size by the character height in pixels. When defining your own scrollbar behaviour, you will always need to recalculate the scrollbar settings when the window size changes. You could therefore put your scrollbar calculations and SetScrollbar call into a function named AdjustScrollbars, which can be called initially and also from your  [wx.SizeEvent](wx.SizeEvent.html#wx-sizeevent) handler function.




See also


[Scrolled Windows](scrolling_overview.html#scrolled-windows),  [wx.ScrollBar](wx.ScrollBar.html#wx-scrollbar),  [wx.Scrolled](wx.Scrolled.html#wx-scrolled),  [wx.ScrollWinEvent](wx.ScrollWinEvent.html#wx-scrollwinevent)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetSize(self, *args, **kw) -> None:
        """ 

`SetSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.SetSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetSize** *(self, x, y, width, height, sizeFlags=SIZE\_AUTO)*


Sets the size of the window in pixels.



Parameters
* **x** (*int*) – Required x position in pixels, or DefaultCoord to indicate that the existing value should be used.
* **y** (*int*) – Required y position in pixels, or DefaultCoord to indicate that the existing value should be used.
* **width** (*int*) – Required width in pixels, or DefaultCoord to indicate that the existing value should be used.
* **height** (*int*) – Required height position in pixels, or DefaultCoord to indicate that the existing value should be used.
* **sizeFlags** (*int*) – Indicates the interpretation of other parameters. It is a bit list of the following:

	+ `SIZE_AUTO_WIDTH:` a DefaultCoord width value is taken to indicate a Widgets-supplied default width.
	+ `SIZE_AUTO_HEIGHT:` a DefaultCoord height value is taken to indicate a Widgets-supplied default height.
	+ `SIZE_AUTO:` DefaultCoord size values are taken to indicate a Widgets-supplied default size.
	+ `SIZE_USE_EXISTING:` existing dimensions should be used if DefaultCoord values are supplied.
	+ `SIZE_ALLOW_MINUS_ONE:` allow negative dimensions (i.e. value of DefaultCoord) to be interpreted as real dimensions, not default values.
	+ `SIZE_FORCE:` normally, if the position and the size of the window are already the same as the parameters of this function, nothing is done. but with this flag a window resize may be forced even in this case (supported in 2.6.2 and later and only implemented for MSW and ignored elsewhere currently).





Note


This overload sets the position and optionally size, of the window. Parameters may be DefaultCoord to indicate either that a default should be supplied by wxWidgets, or that the current value of the dimension should be used.




See also


[`Move`](#wx.Window.Move "wx.Window.Move") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





---

  



**SetSize** *(self, rect)*


Sets the size of the window in pixels.


The size is specified using a  [wx.Rect](wx.Rect.html#wx-rect),  [wx.Size](wx.Size.html#wx-size) or by a couple of `int` objects.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 





Note


This form must be used with non-default width and height values.




See also


[`Move`](#wx.Window.Move "wx.Window.Move") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





---

  



**SetSize** *(self, size)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**SetSize** *(self, width, height)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **width** (*int*) –
* **height** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetSizeHints(self, *args, **kw) -> None:
        """ 

`SetSizeHints`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.SetSizeHints "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetSizeHints** *(self, minSize, maxSize=DefaultSize, incSize=DefaultSize)*


Use of this function for windows which are not toplevel windows (such as  [wx.Dialog](wx.Dialog.html#wx-dialog) or  [wx.Frame](wx.Frame.html#wx-frame)) is discouraged.


Please use [`SetMinSize`](#wx.Window.SetMinSize "wx.Window.SetMinSize") and [`SetMaxSize`](#wx.Window.SetMaxSize "wx.Window.SetMaxSize") instead.



Parameters
* **minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **maxSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **incSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –





See also


[`wx.TopLevelWindow.SetSizeHints`](wx.TopLevelWindow.html#wx.TopLevelWindow.SetSizeHints "wx.TopLevelWindow.SetSizeHints") , [Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





---

  



**SetSizeHints** *(self, minW, minH, maxW=-1, maxH=-1, incW=-1, incH=-1)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **minW** (*int*) –
* **minH** (*int*) –
* **maxW** (*int*) –
* **maxH** (*int*) –
* **incW** (*int*) –
* **incH** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetSizer(self, sizer, deleteOld=True) -> None:
        """ 

`SetSizer`(*self*, *sizer*, *deleteOld=True*)[¶](#wx.Window.SetSizer "Permalink to this definition")
Sets the window to have the given layout sizer.


The window will then own the object, and will take care of its deletion. If an existing layout constraints object is already owned by the window, it will be deleted if the *deleteOld* parameter is `True`.


Note that this function will also call [`SetAutoLayout`](#wx.Window.SetAutoLayout "wx.Window.SetAutoLayout") implicitly with `True` parameter if the *sizer* is not `None` and `False` otherwise so that the sizer will be effectively used to layout the window children whenever it is resized.



Parameters
* **sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – The sizer to set. Pass `None` to disassociate and conditionally delete the window’s sizer. See below.
* **deleteOld** (*bool*) – If `True` (the default), this will delete any pre-existing sizer. Pass `False` if you wish to handle deleting the old sizer yourself but remember to do it yourself in this case to avoid memory leaks.





Note


SetSizer enables and disables Layout automatically.





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetSizerAndFit(self, sizer, deleteOld=True) -> None:
        """ 

`SetSizerAndFit`(*self*, *sizer*, *deleteOld=True*)[¶](#wx.Window.SetSizerAndFit "Permalink to this definition")
Associate the sizer with the window and set the window size and minimal size accordingly.


This method calls [`SetSizer`](#wx.Window.SetSizer "wx.Window.SetSizer") and then [`wx.Sizer.SetSizeHints`](wx.Sizer.html#wx.Sizer.SetSizeHints "wx.Sizer.SetSizeHints") which sets the initial window size to the size needed to accommodate all sizer elements and sets the minimal size to the same size, this preventing the user from resizing this window to be less than this minimal size (if it’s a top-level window which can be directly resized by the user).



Parameters
* **sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) –
* **deleteOld** (*bool*) –






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetThemeEnabled(self, enable: bool) -> None:
        """ 

`SetThemeEnabled`(*self*, *enable*)[¶](#wx.Window.SetThemeEnabled "Permalink to this definition")
This function tells a window if it should use the system’s “theme” code to draw the windows’ background instead of its own background drawing code.


This does not always have any effect since the underlying platform obviously needs to support the notion of themes in user defined windows. One such platform is GTK+ where windows can have (very colourful) backgrounds defined by a user’s selected theme.


Dialogs, notebook pages and the status bar have this flag set to `True` by default so that the default look and feel is simulated best.



Parameters
**enable** (*bool*) – 





See also


[`GetThemeEnabled`](#wx.Window.GetThemeEnabled "wx.Window.GetThemeEnabled")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetToolTip(self, *args, **kw) -> None:
        """ 

`SetToolTip`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.SetToolTip "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetToolTip** *(self, tipString)*


Attach a tooltip to the window.


 [wx.ToolTip](wx.ToolTip.html#wx-tooltip) pointer can be `None` in the overload taking the pointer, meaning to unset any existing tooltips; however [`UnsetToolTip`](#wx.Window.UnsetToolTip "wx.Window.UnsetToolTip") provides a more readable alternative to this operation.


Notice that these methods are always available, even if wxWidgets was compiled with `USE_TOOLTIPS` set to 0, but don’t do anything in this case.



Parameters
**tipString** (*string*) – 





See also


[`GetToolTip`](#wx.Window.GetToolTip "wx.Window.GetToolTip") ,  [wx.ToolTip](wx.ToolTip.html#wx-tooltip)





---

  



**SetToolTip** *(self, tip)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**tip** ([*wx.ToolTip*](wx.ToolTip.html#wx.ToolTip "wx.ToolTip")) – 






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetTransparent(self, alpha: 'Byte') -> bool:
        """ 

`SetTransparent`(*self*, *alpha*)[¶](#wx.Window.SetTransparent "Permalink to this definition")
Set the transparency of the window.


If the system supports transparent windows, returns `True`, otherwise returns `False` and the window remains fully opaque. See also [`CanSetTransparent`](#wx.Window.CanSetTransparent "wx.Window.CanSetTransparent") .


The parameter *alpha* is in the range 0..255 where 0 corresponds to a fully transparent window and 255 to the fully opaque one. The constants `IMAGE_ALPHA_TRANSPARENT` and `IMAGE_ALPHA_OPAQUE` can be used.



Parameters
**alpha** (*wx.Byte*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetValidator(self, validator: 'Validator') -> None:
        """ 

`SetValidator`(*self*, *validator*)[¶](#wx.Window.SetValidator "Permalink to this definition")
Deletes the current validator (if any) and sets the window validator, having called [`wx.Validator.Clone`](wx.Validator.html#wx.Validator.Clone "wx.Validator.Clone") to create a new validator of this type.



Parameters
**validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetVirtualSize(self, *args, **kw) -> None:
        """ 

`SetVirtualSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.SetVirtualSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetVirtualSize** *(self, width, height)*


Sets the virtual size of the window in pixels.



Parameters
* **width** (*int*) –
* **height** (*int*) –





See also


[Window Sizing Overview](window_sizing_overview.html#window-sizing-overview)





---

  



**SetVirtualSize** *(self, size)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetWindowStyle(self, style: int) -> None:
        """ 

`SetWindowStyle`(*self*, *style*)[¶](#wx.Window.SetWindowStyle "Permalink to this definition")
See [`SetWindowStyleFlag`](#wx.Window.SetWindowStyleFlag "wx.Window.SetWindowStyleFlag") for more info.



Parameters
**style** (*long*) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetWindowStyleFlag(self, style: int) -> None:
        """ 

`SetWindowStyleFlag`(*self*, *style*)[¶](#wx.Window.SetWindowStyleFlag "Permalink to this definition")
Sets the style of the window.


Please note that some styles cannot be changed after the window creation and that [`Refresh`](#wx.Window.Refresh "wx.Window.Refresh") might need to be called after changing the others for the change to take place immediately.


See [Window styles](window_styles_overview.html#window-styles) for more information about flags.



Parameters
**style** (*long*) – 





See also


[`GetWindowStyleFlag`](#wx.Window.GetWindowStyleFlag "wx.Window.GetWindowStyleFlag")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def SetWindowVariant(self, variant: int) -> None:
        """ 

`SetWindowVariant`(*self*, *variant*)[¶](#wx.Window.SetWindowVariant "Permalink to this definition")
Chooses a different variant of the window display to use.


Window variants currently just differ in size, as can be seen from  [wx.WindowVariant](wx.WindowVariant.enumeration.html#wx-windowvariant) documentation. Under all platforms but macOS, this function does nothing more than change the font used by the window. However under macOS it is implemented natively and selects the appropriate variant of the native widget, which has better appearance than just scaled down or up version of the normal variant, so it should be preferred to directly tweaking the font size.


By default the controls naturally use the normal variant.



Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ShouldInheritColours(self) -> bool:
        """ 

`ShouldInheritColours`(*self*)[¶](#wx.Window.ShouldInheritColours "Permalink to this definition")
Return `True` from here to allow the colours of this window to be changed by [`InheritAttributes`](#wx.Window.InheritAttributes "wx.Window.InheritAttributes") .


Returning `False` forbids inheriting them from the parent window.


The base class version returns `False`, but this method is overridden in  [wx.Control](wx.Control.html#wx-control) where it returns `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Show(self, show: bool=True) -> bool:
        """ 

`Show`(*self*, *show=True*)[¶](#wx.Window.Show "Permalink to this definition")
Shows or hides the window.


You may need to call [`Raise`](#wx.Window.Raise "wx.Window.Raise") for a top level window if you want to bring it to top, although this is not needed if [`Show`](#wx.Window.Show "wx.Window.Show") is called immediately after the frame creation.


Notice that the default state of newly created top level windows is hidden (to allow you to create their contents without flicker) unlike for all the other, not derived from  [wx.TopLevelWindow](wx.TopLevelWindow.html#wx-toplevelwindow), windows that are by default created in the shown state.



Parameters
**show** (*bool*) – If `True` displays the window. Otherwise, hides it.



Return type
*bool*



Returns
`True` if the window has been shown or hidden or `False` if nothing was done because it already was in the requested state.





See also


[`IsShown`](#wx.Window.IsShown "wx.Window.IsShown") , [`Hide`](#wx.Window.Hide "wx.Window.Hide") , `wx.RadioBox.Show` ,  [wx.ShowEvent](wx.ShowEvent.html#wx-showevent).





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ShowWithEffect(self, effect, timeout=0) -> bool:
        """ 

`ShowWithEffect`(*self*, *effect*, *timeout=0*)[¶](#wx.Window.ShowWithEffect "Permalink to this definition")
This function shows a window, like [`Show`](#wx.Window.Show "wx.Window.Show") , but using a special visual effect if possible.



Parameters
* **effect** ([*ShowEffect*](wx.ShowEffect.enumeration.html "ShowEffect")) – The effect to use.
* **timeout** (*int*) – The *timeout* parameter specifies the time of the animation, in milliseconds. If the default value of 0 is used, the default animation time for the current platform is used.



Return type
*bool*





New in version 2.9.0.




Note


Currently this function is only implemented in wxMSW and wxOSX and does the same thing as [`Show`](#wx.Window.Show "wx.Window.Show") in the other ports.




See also


[`HideWithEffect`](#wx.Window.HideWithEffect "wx.Window.HideWithEffect")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Thaw(self) -> None:
        """ 

`Thaw`(*self*)[¶](#wx.Window.Thaw "Permalink to this definition")
Re-enables window updating after a previous call to [`Freeze`](#wx.Window.Freeze "wx.Window.Freeze") .


To really thaw the control, it must be called exactly the same number of times as [`Freeze`](#wx.Window.Freeze "wx.Window.Freeze") .


If the window has any children, they are recursively thawed too.



See also


*WindowUpdateLocker* , [`Freeze`](#wx.Window.Freeze "wx.Window.Freeze") , [`IsFrozen`](#wx.Window.IsFrozen "wx.Window.IsFrozen")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ToDIP(self, *args, **kw) -> 'Size':
        """ 

`ToDIP`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.ToDIP "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ToDIP** *(self, sz)*


Convert pixel values of the current toolkit to DPI-independent pixel values.


A DPI-independent pixel is just a pixel at the standard 96 `DPI` resolution. To keep the same physical size at higher resolution, the physical pixel value must be scaled by [`GetDPIScaleFactor`](#wx.Window.GetDPIScaleFactor "wx.Window.GetDPIScaleFactor") but this scaling may be already done by the underlying toolkit (GTK+, Cocoa, …) automatically. This method performs the conversion only if it is not already done by the lower level toolkit, For example, you may want to use this to store window sizes and positions so that they can be re-used regardless of the display `DPI`:



```
pt = wx.Point(self.ToDIP(self.GetPosition()))
size = wx.Size(self.ToDIP(self.GetSize()))

```


Also note that if either component of *sz* has the special value of -1, it is returned unchanged independently of the current `DPI`, to preserve the special value of -1 in wxWidgets API (it is often used to mean “unspecified”).



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.0.





---

  



**ToDIP** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**ToDIP** *(self, d)*


Convert pixel values of the current toolkit to DPI-independent pixel values.


This is the same as ToDIP(const Size& sz) overload, but assumes that the resolution is the same in horizontal and vertical directions.


If *d* has the special value of -1, it is returned unchanged independently of the current `DPI`.



Parameters
**d** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.0.





---

  



**ToDIP** *(sz, w)*


Non window-specific pixel to DPI-independent pixels conversion functions.


The display resolution depends on the window in general as different windows can appear on different monitors using different resolutions, however sometimes no window is available for converting the resolution independent pixels to the physical values and in this case these static overloads can be used with `None` value for *w* argument.


Using these methods is discouraged as passing `None` will prevent your application from correctly supporting monitors with different resolutions even in the future wxWidgets versions which will add support for them, and passing not `None` window is just a less convenient way of calling the non-static [`ToDIP`](#wx.Window.ToDIP "wx.Window.ToDIP") method.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.0.





---

  



**ToDIP** *(pt, w)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**ToDIP** *(d, w)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **d** (*int*) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ToPhys(self, *args, **kw) -> 'Size':
        """ 

`ToPhys`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Window.ToPhys "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ToPhys** *(self, sz)*


Convert from logical pixels to physical pixels.


This function performs the transformation in the converse direction compared to [`FromPhys`](#wx.Window.FromPhys "wx.Window.FromPhys") .



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.6.





---

  



**ToPhys** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**ToPhys** *(self, d)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**d** (*int*) – 



Return type
*int*






---

  



**ToPhys** *(sz, w)*


Convert from logical pixels to physical pixels for any window.


This function can be used without any window pointer, i.e. *w* can be `None`. In this case, it uses the content scale factor of the main screen if supported or just does nothing (i.e. uses scale factor of 1) otherwise.


Using member overloads is always preferable, if possible, as they always use the actually appropriate content scale factor.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.6.





---

  



**ToPhys** *(pt, w)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**ToPhys** *(d, w)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **d** (*int*) –
* **w** ([*wx.Window*](#wx.Window "wx.Window")) –



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def ToggleWindowStyle(self, flag: int) -> bool:
        """ 

`ToggleWindowStyle`(*self*, *flag*)[¶](#wx.Window.ToggleWindowStyle "Permalink to this definition")
Turns the given *flag* on if it’s currently turned off and vice versa.


This function cannot be used if the value of the flag is 0 (which is often the case for default flags).


Also, please notice that not all styles can be changed after the control creation.



Parameters
**flag** (*int*) – 



Return type
*bool*



Returns
Returns `True` if the style was turned on by this function, `False` if it was switched off.





See also


[`SetWindowStyleFlag`](#wx.Window.SetWindowStyleFlag "wx.Window.SetWindowStyleFlag") , [`HasFlag`](#wx.Window.HasFlag "wx.Window.HasFlag")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def TransferDataFromWindow(self) -> bool:
        """ 

`TransferDataFromWindow`(*self*)[¶](#wx.Window.TransferDataFromWindow "Permalink to this definition")
Transfers values from child controls to data areas specified by their validators.


Returns `False` if a transfer failed.


Notice that this also calls [`TransferDataFromWindow`](#wx.Window.TransferDataFromWindow "wx.Window.TransferDataFromWindow") for all children recursively.



Return type
*bool*





See also


[`TransferDataToWindow`](#wx.Window.TransferDataToWindow "wx.Window.TransferDataToWindow") ,  [wx.Validator](wx.Validator.html#wx-validator), [`Validate`](#wx.Window.Validate "wx.Window.Validate")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def TransferDataToWindow(self) -> bool:
        """ 

`TransferDataToWindow`(*self*)[¶](#wx.Window.TransferDataToWindow "Permalink to this definition")
Transfers values to child controls from data areas specified by their validators.


Notice that this also calls [`TransferDataToWindow`](#wx.Window.TransferDataToWindow "wx.Window.TransferDataToWindow") for all children recursively.



Return type
*bool*



Returns
Returns `False` if a transfer failed.





See also


[`TransferDataFromWindow`](#wx.Window.TransferDataFromWindow "wx.Window.TransferDataFromWindow") ,  [wx.Validator](wx.Validator.html#wx-validator), [`Validate`](#wx.Window.Validate "wx.Window.Validate")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def UnregisterHotKey(self, hotkeyId: int) -> bool:
        """ 

`UnregisterHotKey`(*self*, *hotkeyId*)[¶](#wx.Window.UnregisterHotKey "Permalink to this definition")
Unregisters a system wide hotkey.



Parameters
**hotkeyId** (*int*) – Numeric identifier of the hotkey. Must be the same id that was passed to [`RegisterHotKey`](#wx.Window.RegisterHotKey "wx.Window.RegisterHotKey") .



Return type
*bool*



Returns
`True` if the hotkey was unregistered successfully, `False` if the id was invalid.





Note


This function is currently only implemented under MSW.




See also


[`RegisterHotKey`](#wx.Window.RegisterHotKey "wx.Window.RegisterHotKey")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    @staticmethod
    def UnreserveControlId(id, count=1) -> None:
        """ 

*static* `UnreserveControlId`(*id*, *count=1*)[¶](#wx.Window.UnreserveControlId "Permalink to this definition")
Unreserve an `ID` or range of IDs that was reserved by [`NewControlId`](#wx.Window.NewControlId "wx.Window.NewControlId") .


See [Window IDs](window_ids_overview.html#window-ids) for more information.



Parameters
* **id** (*wx.WindowID*) – The starting `ID` of the range of IDs to unreserve.
* **count** (*int*) – The number of sequential IDs to unreserve.





See also


[`NewControlId`](#wx.Window.NewControlId "wx.Window.NewControlId") ,  [wx.IdManager](wx.IdManager.html#wx-idmanager), [Window IDs](window_ids_overview.html#window-ids)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def UnsetToolTip(self) -> None:
        """ 

`UnsetToolTip`(*self*)[¶](#wx.Window.UnsetToolTip "Permalink to this definition")
Unset any existing tooltip.



New in version 2.9.0.




See also


[`SetToolTip`](#wx.Window.SetToolTip "wx.Window.SetToolTip")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Update(self) -> None:
        """ 

`Update`(*self*)[¶](#wx.Window.Update "Permalink to this definition")
Calling this method immediately repaints the invalidated area of the window and all of its children recursively (this normally only happens when the flow of control returns to the event loop).


Notice that this function doesn’t invalidate any area of the window so nothing happens if nothing has been invalidated (i.e. marked as requiring a redraw). Use [`Refresh`](#wx.Window.Refresh "wx.Window.Refresh") first if you want to immediately redraw the window unconditionally.




            Source: https://docs.wxpython.org/wx.Window.html
        """

    def UpdateWindowUI(self, flags: int=UPDATE_UI_NONE) -> None:
        """ 

`UpdateWindowUI`(*self*, *flags=UPDATE\_UI\_NONE*)[¶](#wx.Window.UpdateWindowUI "Permalink to this definition")
This function sends one or more  [wx.UpdateUIEvent](wx.UpdateUIEvent.html#wx-updateuievent) to the window.


The particular implementation depends on the window; for example a  [wx.ToolBar](wx.ToolBar.html#wx-toolbar) will send an update UI event for each toolbar button, and a  [wx.Frame](wx.Frame.html#wx-frame) will send an update UI event for each menubar menu item.


You can call this function from your application to ensure that your UI is up-to-date at this point (as far as your  [wx.UpdateUIEvent](wx.UpdateUIEvent.html#wx-updateuievent) handlers are concerned). This may be necessary if you have called [`wx.UpdateUIEvent.SetMode`](wx.UpdateUIEvent.html#wx.UpdateUIEvent.SetMode "wx.UpdateUIEvent.SetMode") or [`wx.UpdateUIEvent.SetUpdateInterval`](wx.UpdateUIEvent.html#wx.UpdateUIEvent.SetUpdateInterval "wx.UpdateUIEvent.SetUpdateInterval") to limit the overhead that wxWidgets incurs by sending update UI events in idle time. *flags* should be a bitlist of one or more of the  [wx.UpdateUI](wx.UpdateUI.enumeration.html#wx-updateui) enumeration.


If you are calling this function from an OnInternalIdle or OnIdle function, make sure you pass the `wx.UPDATE_UI_FROMIDLE` flag, since this tells the window to only update the UI elements that need to be updated in idle time. Some windows update their elements only when necessary, for example when a menu is about to be shown. The following is an example of how to call UpdateWindowUI from an idle function.



```
def OnInternalIdle(self):

    if wx.UpdateUIEvent.CanUpdate(self):
        self.UpdateWindowUI(wx.UPDATE_UI_FROMIDLE)

```



Parameters
**flags** (*long*) – 





See also


 [wx.UpdateUIEvent](wx.UpdateUIEvent.html#wx-updateuievent), [`DoUpdateWindowUI`](#wx.Window.DoUpdateWindowUI "wx.Window.DoUpdateWindowUI") , [`OnInternalIdle`](#wx.Window.OnInternalIdle "wx.Window.OnInternalIdle")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def UseBackgroundColour(self) -> bool:
        """ 

`UseBackgroundColour`(*self*)[¶](#wx.Window.UseBackgroundColour "Permalink to this definition")
Return `True` if a background colour has been set for this window.


Same as [`UseBgCol`](#wx.Window.UseBgCol "wx.Window.UseBgCol")



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def UseBgCol(self) -> bool:
        """ 

`UseBgCol`(*self*)[¶](#wx.Window.UseBgCol "Permalink to this definition")
Return `True` if a background colour has been set for this window.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def UseForegroundColour(self) -> bool:
        """ 

`UseForegroundColour`(*self*)[¶](#wx.Window.UseForegroundColour "Permalink to this definition")
Return `True` if a foreground colour has been set for this window.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Window.html
        """

    def Validate(self) -> bool:
        """ 

`Validate`(*self*)[¶](#wx.Window.Validate "Permalink to this definition")
Validates the current values of the child controls using their validators.


Notice that this also calls [`Validate`](#wx.Window.Validate "wx.Window.Validate") for all children recursively.



Return type
*bool*



Returns
Returns `False` if any of the validations failed.





See also


[`TransferDataFromWindow`](#wx.Window.TransferDataFromWindow "wx.Window.TransferDataFromWindow") , [`TransferDataToWindow`](#wx.Window.TransferDataToWindow "wx.Window.TransferDataToWindow") ,  [wx.Validator](wx.Validator.html#wx-validator)





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def WarpPointer(self, x, y) -> None:
        """ 

`WarpPointer`(*self*, *x*, *y*)[¶](#wx.Window.WarpPointer "Permalink to this definition")
Moves the pointer to the given position on the window.



Parameters
* **x** (*int*) – The new x position for the cursor.
* **y** (*int*) – The new y position for the cursor.





Note


Apple Human Interface Guidelines forbid moving the mouse cursor programmatically so you should avoid using this function in Mac applications (and probably avoid using it under the other platforms without good reason as well).





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def WindowToClientSize(self, size: Union[tuple[int, int], 'Size']) -> 'Size':
        """ 

`WindowToClientSize`(*self*, *size*)[¶](#wx.Window.WindowToClientSize "Permalink to this definition")
Converts window size *size* to corresponding client area size In other words, the returned value is what would [`GetClientSize`](#wx.Window.GetClientSize "wx.Window.GetClientSize") return if this window had given window size.


Components with DefaultCoord value are left unchanged.


Note that the conversion is not always exact, it assumes that non-client area doesn’t change and so doesn’t take into account things like menu bar (un)wrapping or (dis)appearance of the scrollbars.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.8.8.




See also


[`ClientToWindowSize`](#wx.Window.ClientToWindowSize "wx.Window.ClientToWindowSize")





            Source: https://docs.wxpython.org/wx.Window.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.Window.__nonzero__ "Permalink to this definition")
Can be used to test if the C++ part of the window still exists, with
code like this:



```
if theWindow:
        doSomething()

```




            Source: https://docs.wxpython.org/wx.Window.html
        """

    AcceleratorTable: '_AcceleratorTable'  # `AcceleratorTable`[¶](#wx.Window.AcceleratorTable "Permalink to this definition")See [`GetAcceleratorTable`](#wx.Window.GetAcceleratorTable "wx.Window.GetAcceleratorTable") and [`SetAcceleratorTable`](#wx.Window.SetAcceleratorTable "wx.Window.SetAcceleratorTable")
    AutoLayout: bool  # `AutoLayout`[¶](#wx.Window.AutoLayout "Permalink to this definition")See [`GetAutoLayout`](#wx.Window.GetAutoLayout "wx.Window.GetAutoLayout") and [`SetAutoLayout`](#wx.Window.SetAutoLayout "wx.Window.SetAutoLayout")
    BackgroundColour: 'Colour'  # `BackgroundColour`[¶](#wx.Window.BackgroundColour "Permalink to this definition")See [`GetBackgroundColour`](#wx.Window.GetBackgroundColour "wx.Window.GetBackgroundColour") and [`SetBackgroundColour`](#wx.Window.SetBackgroundColour "wx.Window.SetBackgroundColour")
    BackgroundStyle: '_BackgroundStyle'  # `BackgroundStyle`[¶](#wx.Window.BackgroundStyle "Permalink to this definition")See [`GetBackgroundStyle`](#wx.Window.GetBackgroundStyle "wx.Window.GetBackgroundStyle") and [`SetBackgroundStyle`](#wx.Window.SetBackgroundStyle "wx.Window.SetBackgroundStyle")
    BestSize: 'Size'  # `BestSize`[¶](#wx.Window.BestSize "Permalink to this definition")See [`GetBestSize`](#wx.Window.GetBestSize "wx.Window.GetBestSize")
    BestVirtualSize: 'Size'  # `BestVirtualSize`[¶](#wx.Window.BestVirtualSize "Permalink to this definition")See [`GetBestVirtualSize`](#wx.Window.GetBestVirtualSize "wx.Window.GetBestVirtualSize")
    Border: '_Border'  # `Border`[¶](#wx.Window.Border "Permalink to this definition")See [`GetBorder`](#wx.Window.GetBorder "wx.Window.GetBorder")
    Caret: '_Caret'  # `Caret`[¶](#wx.Window.Caret "Permalink to this definition")See [`GetCaret`](#wx.Window.GetCaret "wx.Window.GetCaret") and [`SetCaret`](#wx.Window.SetCaret "wx.Window.SetCaret")
    CharHeight: int  # `CharHeight`[¶](#wx.Window.CharHeight "Permalink to this definition")See [`GetCharHeight`](#wx.Window.GetCharHeight "wx.Window.GetCharHeight")
    CharWidth: int  # `CharWidth`[¶](#wx.Window.CharWidth "Permalink to this definition")See [`GetCharWidth`](#wx.Window.GetCharWidth "wx.Window.GetCharWidth")
    Children: 'WindowList'  # `Children`[¶](#wx.Window.Children "Permalink to this definition")See [`GetChildren`](#wx.Window.GetChildren "wx.Window.GetChildren")
    ClientAreaOrigin: 'Point'  # `ClientAreaOrigin`[¶](#wx.Window.ClientAreaOrigin "Permalink to this definition")See [`GetClientAreaOrigin`](#wx.Window.GetClientAreaOrigin "wx.Window.GetClientAreaOrigin")
    ClientRect: 'Rect'  # `ClientRect`[¶](#wx.Window.ClientRect "Permalink to this definition")See [`GetClientRect`](#wx.Window.GetClientRect "wx.Window.GetClientRect") and [`SetClientRect`](#wx.Window.SetClientRect "wx.Window.SetClientRect")
    ClientSize: None  # `ClientSize`[¶](#wx.Window.ClientSize "Permalink to this definition")See [`GetClientSize`](#wx.Window.GetClientSize "wx.Window.GetClientSize") and [`SetClientSize`](#wx.Window.SetClientSize "wx.Window.SetClientSize")
    Constraints: 'LayoutConstraints'  # `Constraints`[¶](#wx.Window.Constraints "Permalink to this definition")See [`GetConstraints`](#wx.Window.GetConstraints "wx.Window.GetConstraints") and [`SetConstraints`](#wx.Window.SetConstraints "wx.Window.SetConstraints")
    ContainingSizer: 'Sizer'  # `ContainingSizer`[¶](#wx.Window.ContainingSizer "Permalink to this definition")See [`GetContainingSizer`](#wx.Window.GetContainingSizer "wx.Window.GetContainingSizer") and [`SetContainingSizer`](#wx.Window.SetContainingSizer "wx.Window.SetContainingSizer")
    Cursor: '_Cursor'  # `Cursor`[¶](#wx.Window.Cursor "Permalink to this definition")See [`GetCursor`](#wx.Window.GetCursor "wx.Window.GetCursor") and [`SetCursor`](#wx.Window.SetCursor "wx.Window.SetCursor")
    DefaultAttributes: 'VisualAttributes'  # `DefaultAttributes`[¶](#wx.Window.DefaultAttributes "Permalink to this definition")See [`GetDefaultAttributes`](#wx.Window.GetDefaultAttributes "wx.Window.GetDefaultAttributes")
    DropTarget: '_DropTarget'  # `DropTarget`[¶](#wx.Window.DropTarget "Permalink to this definition")See [`GetDropTarget`](#wx.Window.GetDropTarget "wx.Window.GetDropTarget") and [`SetDropTarget`](#wx.Window.SetDropTarget "wx.Window.SetDropTarget")
    EffectiveMinSize: 'Size'  # `EffectiveMinSize`[¶](#wx.Window.EffectiveMinSize "Permalink to this definition")See [`GetEffectiveMinSize`](#wx.Window.GetEffectiveMinSize "wx.Window.GetEffectiveMinSize")
    Enabled: Any  # `Enabled`[¶](#wx.Window.Enabled "Permalink to this definition")See [`IsEnabled`](#wx.Window.IsEnabled "wx.Window.IsEnabled") and [`Enable`](#wx.Window.Enable "wx.Window.Enable")
    EventHandler: 'EvtHandler'  # `EventHandler`[¶](#wx.Window.EventHandler "Permalink to this definition")See [`GetEventHandler`](#wx.Window.GetEventHandler "wx.Window.GetEventHandler") and [`SetEventHandler`](#wx.Window.SetEventHandler "wx.Window.SetEventHandler")
    ExtraStyle: int  # `ExtraStyle`[¶](#wx.Window.ExtraStyle "Permalink to this definition")See [`GetExtraStyle`](#wx.Window.GetExtraStyle "wx.Window.GetExtraStyle") and [`SetExtraStyle`](#wx.Window.SetExtraStyle "wx.Window.SetExtraStyle")
    Font: '_Font'  # `Font`[¶](#wx.Window.Font "Permalink to this definition")See [`GetFont`](#wx.Window.GetFont "wx.Window.GetFont") and [`SetFont`](#wx.Window.SetFont "wx.Window.SetFont")
    ForegroundColour: 'Colour'  # `ForegroundColour`[¶](#wx.Window.ForegroundColour "Permalink to this definition")See [`GetForegroundColour`](#wx.Window.GetForegroundColour "wx.Window.GetForegroundColour") and [`SetForegroundColour`](#wx.Window.SetForegroundColour "wx.Window.SetForegroundColour")
    GrandParent: 'Window'  # `GrandParent`[¶](#wx.Window.GrandParent "Permalink to this definition")See [`GetGrandParent`](#wx.Window.GetGrandParent "wx.Window.GetGrandParent")
    Handle: None  # `Handle`[¶](#wx.Window.Handle "Permalink to this definition")See [`GetHandle`](#wx.Window.GetHandle "wx.Window.GetHandle")
    HelpText: str  # `HelpText`[¶](#wx.Window.HelpText "Permalink to this definition")See [`GetHelpText`](#wx.Window.GetHelpText "wx.Window.GetHelpText") and [`SetHelpText`](#wx.Window.SetHelpText "wx.Window.SetHelpText")
    Id: int  # `Id`[¶](#wx.Window.Id "Permalink to this definition")See [`GetId`](#wx.Window.GetId "wx.Window.GetId") and [`SetId`](#wx.Window.SetId "wx.Window.SetId")
    Label: str  # `Label`[¶](#wx.Window.Label "Permalink to this definition")See [`GetLabel`](#wx.Window.GetLabel "wx.Window.GetLabel") and [`SetLabel`](#wx.Window.SetLabel "wx.Window.SetLabel")
    LayoutDirection: int  # `LayoutDirection`[¶](#wx.Window.LayoutDirection "Permalink to this definition")See [`GetLayoutDirection`](#wx.Window.GetLayoutDirection "wx.Window.GetLayoutDirection") and [`SetLayoutDirection`](#wx.Window.SetLayoutDirection "wx.Window.SetLayoutDirection")
    MaxClientSize: 'Size'  # `MaxClientSize`[¶](#wx.Window.MaxClientSize "Permalink to this definition")See [`GetMaxClientSize`](#wx.Window.GetMaxClientSize "wx.Window.GetMaxClientSize") and [`SetMaxClientSize`](#wx.Window.SetMaxClientSize "wx.Window.SetMaxClientSize")
    MaxHeight: int  # `MaxHeight`[¶](#wx.Window.MaxHeight "Permalink to this definition")See [`GetMaxHeight`](#wx.Window.GetMaxHeight "wx.Window.GetMaxHeight")
    MaxSize: 'Size'  # `MaxSize`[¶](#wx.Window.MaxSize "Permalink to this definition")See [`GetMaxSize`](#wx.Window.GetMaxSize "wx.Window.GetMaxSize") and [`SetMaxSize`](#wx.Window.SetMaxSize "wx.Window.SetMaxSize")
    MaxWidth: int  # `MaxWidth`[¶](#wx.Window.MaxWidth "Permalink to this definition")See [`GetMaxWidth`](#wx.Window.GetMaxWidth "wx.Window.GetMaxWidth")
    MinClientSize: 'Size'  # `MinClientSize`[¶](#wx.Window.MinClientSize "Permalink to this definition")See [`GetMinClientSize`](#wx.Window.GetMinClientSize "wx.Window.GetMinClientSize") and [`SetMinClientSize`](#wx.Window.SetMinClientSize "wx.Window.SetMinClientSize")
    MinHeight: int  # `MinHeight`[¶](#wx.Window.MinHeight "Permalink to this definition")See [`GetMinHeight`](#wx.Window.GetMinHeight "wx.Window.GetMinHeight")
    MinSize: 'Size'  # `MinSize`[¶](#wx.Window.MinSize "Permalink to this definition")See [`GetMinSize`](#wx.Window.GetMinSize "wx.Window.GetMinSize") and [`SetMinSize`](#wx.Window.SetMinSize "wx.Window.SetMinSize")
    MinWidth: int  # `MinWidth`[¶](#wx.Window.MinWidth "Permalink to this definition")See [`GetMinWidth`](#wx.Window.GetMinWidth "wx.Window.GetMinWidth")
    Name: str  # `Name`[¶](#wx.Window.Name "Permalink to this definition")See [`GetName`](#wx.Window.GetName "wx.Window.GetName") and [`SetName`](#wx.Window.SetName "wx.Window.SetName")
    Parent: 'Window'  # `Parent`[¶](#wx.Window.Parent "Permalink to this definition")See [`GetParent`](#wx.Window.GetParent "wx.Window.GetParent")
    Position: 'Point'  # `Position`[¶](#wx.Window.Position "Permalink to this definition")See [`GetPosition`](#wx.Window.GetPosition "wx.Window.GetPosition") and [`SetPosition`](#wx.Window.SetPosition "wx.Window.SetPosition")
    Rect: '_Rect'  # `Rect`[¶](#wx.Window.Rect "Permalink to this definition")See [`GetRect`](#wx.Window.GetRect "wx.Window.GetRect") and [`SetRect`](#wx.Window.SetRect "wx.Window.SetRect")
    ScreenPosition: 'Point'  # `ScreenPosition`[¶](#wx.Window.ScreenPosition "Permalink to this definition")See [`GetScreenPosition`](#wx.Window.GetScreenPosition "wx.Window.GetScreenPosition")
    ScreenRect: 'Rect'  # `ScreenRect`[¶](#wx.Window.ScreenRect "Permalink to this definition")See [`GetScreenRect`](#wx.Window.GetScreenRect "wx.Window.GetScreenRect")
    Shown: Any  # `Shown`[¶](#wx.Window.Shown "Permalink to this definition")See [`IsShown`](#wx.Window.IsShown "wx.Window.IsShown") and [`Show`](#wx.Window.Show "wx.Window.Show")
    Size: '_Size'  # `Size`[¶](#wx.Window.Size "Permalink to this definition")See [`GetSize`](#wx.Window.GetSize "wx.Window.GetSize") and [`SetSize`](#wx.Window.SetSize "wx.Window.SetSize")
    Sizer: '_Sizer'  # `Sizer`[¶](#wx.Window.Sizer "Permalink to this definition")See [`GetSizer`](#wx.Window.GetSizer "wx.Window.GetSizer") and [`SetSizer`](#wx.Window.SetSizer "wx.Window.SetSizer")
    ThemeEnabled: bool  # `ThemeEnabled`[¶](#wx.Window.ThemeEnabled "Permalink to this definition")See [`GetThemeEnabled`](#wx.Window.GetThemeEnabled "wx.Window.GetThemeEnabled") and [`SetThemeEnabled`](#wx.Window.SetThemeEnabled "wx.Window.SetThemeEnabled")
    ToolTip: '_ToolTip'  # `ToolTip`[¶](#wx.Window.ToolTip "Permalink to this definition")See [`GetToolTip`](#wx.Window.GetToolTip "wx.Window.GetToolTip") and [`SetToolTip`](#wx.Window.SetToolTip "wx.Window.SetToolTip")
    TopLevel: Any  # `TopLevel`[¶](#wx.Window.TopLevel "Permalink to this definition")See [`IsTopLevel`](#wx.Window.IsTopLevel "wx.Window.IsTopLevel")
    TopLevelParent: 'Window'  # `TopLevelParent`[¶](#wx.Window.TopLevelParent "Permalink to this definition")See [`GetTopLevelParent`](#wx.Window.GetTopLevelParent "wx.Window.GetTopLevelParent")
    UpdateClientRect: 'Rect'  # `UpdateClientRect`[¶](#wx.Window.UpdateClientRect "Permalink to this definition")See [`GetUpdateClientRect`](#wx.Window.GetUpdateClientRect "wx.Window.GetUpdateClientRect")
    UpdateRegion: 'Region'  # `UpdateRegion`[¶](#wx.Window.UpdateRegion "Permalink to this definition")See [`GetUpdateRegion`](#wx.Window.GetUpdateRegion "wx.Window.GetUpdateRegion")
    Validator: '_Validator'  # `Validator`[¶](#wx.Window.Validator "Permalink to this definition")See [`GetValidator`](#wx.Window.GetValidator "wx.Window.GetValidator") and [`SetValidator`](#wx.Window.SetValidator "wx.Window.SetValidator")
    VirtualSize: 'Size'  # `VirtualSize`[¶](#wx.Window.VirtualSize "Permalink to this definition")See [`GetVirtualSize`](#wx.Window.GetVirtualSize "wx.Window.GetVirtualSize") and [`SetVirtualSize`](#wx.Window.SetVirtualSize "wx.Window.SetVirtualSize")
    WindowStyle: int  # `WindowStyle`[¶](#wx.Window.WindowStyle "Permalink to this definition")See [`GetWindowStyle`](#wx.Window.GetWindowStyle "wx.Window.GetWindowStyle") and [`SetWindowStyle`](#wx.Window.SetWindowStyle "wx.Window.SetWindowStyle")
    WindowStyleFlag: int  # `WindowStyleFlag`[¶](#wx.Window.WindowStyleFlag "Permalink to this definition")See [`GetWindowStyleFlag`](#wx.Window.GetWindowStyleFlag "wx.Window.GetWindowStyleFlag") and [`SetWindowStyleFlag`](#wx.Window.SetWindowStyleFlag "wx.Window.SetWindowStyleFlag")
    WindowVariant: int  # `WindowVariant`[¶](#wx.Window.WindowVariant "Permalink to this definition")See [`GetWindowVariant`](#wx.Window.GetWindowVariant "wx.Window.GetWindowVariant") and [`SetWindowVariant`](#wx.Window.SetWindowVariant "wx.Window.SetWindowVariant")



BORDER_DEFAULT: int  # The window class will decide the kind of border to show, if any.

BORDER_SIMPLE: int  # Displays a thin border around the window. wx.SIMPLE_BORDER is the old name for this style.

BORDER_SUNKEN: int  # Displays a sunken border. wx.SUNKEN_BORDER is the old name for this style.

BORDER_RAISED: int  # Displays a raised border. wx.RAISED_BORDER is the old name for this style.

BORDER_STATIC: int  # Displays a border suitable for a static control. wx.STATIC_BORDER is the old name for this style. Windows only.

BORDER_THEME: int  # Displays a native border suitable for a control, on the current platform. On Windows, this will be a themed border; on most other platforms a sunken border will be used. For more information for themed borders on Windows, please see Themed borders on Windows.

BORDER_DOUBLE: int  # This style is obsolete and should not be used.

TRANSPARENT_WINDOW: int  # The window is transparent, that is, it will not receive paint events. Windows only.

WANTS_CHARS: int  # Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn’t be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab.

NO_FULL_REPAINT_ON_RESIZE: int  # On Windows, this style used to disable repainting the window completely when its size is changed. Since this behaviour is now the default, the style is now obsolete and no longer has an effect.

VSCROLL: int  # Use this style to enable a vertical scrollbar. Notice that this style cannot be used with native controls which don’t support scrollbars nor with top-level windows in most ports.

ALWAYS_SHOW_SB: int  # If a window has scrollbars, disable them instead of hiding them when they are not needed (i.e. when the size of the window is big enough to not require the scrollbars to navigate it). This style is currently implemented for wxMSW, wxGTK and wxUniversal and does nothing on the other platforms.

FULL_REPAINT_ON_RESIZE: int  # Use this style to force a complete redraw of the window whenever it is resized instead of redrawing just the part of the window affected by resizing. Note that this was the behaviour by default before 2.5.1 release and that if you experience redraw problems with code which previously used to work you may want to try this. Currently this style applies on GTK+ 2 and Windows only, and full repainting is always done on other platforms. ^^

EVT_HELP: int  # Process a  wxEVT_HELP   event. See    wx.HelpEvent.

EVT_HELP_RANGE: int  # Process a  wxEVT_HELP   event for a range of ids. See    wx.HelpEvent.

EVT_DROP_FILES: int  # Process a  wxEVT_DROP_FILES   event. See    wx.DropFilesEvent.

EVT_ERASE_BACKGROUND: int  # Process a  wxEVT_ERASE_BACKGROUND   event. See    wx.EraseEvent.

EVT_SET_FOCUS: int  # Process a  wxEVT_SET_FOCUS   event. See    wx.FocusEvent.

EVT_KILL_FOCUS: int  # Process a  wxEVT_KILL_FOCUS   event. See    wx.FocusEvent.

EVT_IDLE: int  # Process a  wxEVT_IDLE   event. See    wx.IdleEvent.

EVT_KEY_DOWN: int  # Process a  wxEVT_KEY_DOWN   event (any key has been pressed). See    wx.KeyEvent.

EVT_KEY_UP: int  # Process a  wxEVT_KEY_UP   event (any key has been released). See    wx.KeyEvent.

EVT_CHAR: int  # Process a  wxEVT_CHAR   event. See    wx.KeyEvent.

EVT_CHAR_HOOK: int  # Process a  wxEVT_CHAR_HOOK   event. See    wx.KeyEvent.

EVT_MOUSE_CAPTURE_LOST: int  # Process a  wxEVT_MOUSE_CAPTURE_LOST   event. See    wx.MouseCaptureLostEvent.

EVT_MOUSE_CAPTURE_CHANGED: int  # Process a  wxEVT_MOUSE_CAPTURE_CHANGED   event. See    wx.MouseCaptureChangedEvent.

EVT_PAINT: int  # Process a  wxEVT_PAINT   event. See    wx.PaintEvent.

EVT_SET_CURSOR: int  # Process a  wxEVT_SET_CURSOR   event. See    wx.SetCursorEvent.

EVT_SIZE: int  # Process a  wxEVT_SIZE   event. See    wx.SizeEvent.

EVT_SYS_COLOUR_CHANGED: int  # Process a  wxEVT_SYS_COLOUR_CHANGED   event. See    wx.SysColourChangedEvent. ^^

SIMPLE_BORDER: int

SUNKEN_BORDER: int

RAISED_BORDER: int

STATIC_BORDER: int

NO_BORDER: int

WS_EX_BLOCK_EVENTS: int

WS_EX_TRANSIENT: int

WS_EX_CONTEXTHELP: int

WS_EX_PROCESS_IDLE: int

WS_EX_PROCESS_UI_UPDATES: int

BORDER_MASK: int

TOUCH_NONE: int

TOUCH_ALL_GESTURES: int

MOD_SHIFT: int

MOD_CONTROL: int

MOD_ALT: int

MOD_WIN: int

UPDATE_UI_FROMIDLE: int

class Control(Window):
    """ **Possible constructors**:



```
Control(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
        style=0, validator=DefaultValidator, name=ControlNameStr)

Control()

```


This is the base class for a control or “widget”.


  


        Source: https://docs.wxpython.org/wx.Control.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Control.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr)*


Constructs a control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Pointer to a parent window.
* **id** (*wx.WindowID*) – Control identifier. If `wx.ID_ANY`, will automatically create an identifier.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Control position. DefaultPosition indicates that wxWidgets should generate a default position for the control.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Control size. DefaultSize indicates that wxWidgets should generate a default size for the window. If no suitable size can be found, the window will be sized to 20x20 pixels so that the window is visible but obviously not correctly sized.
* **style** (*long*) – Control style. For generic window styles, please see  [wx.Window](wx.Window.html#wx-window).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Control validator.
* **name** (*string*) – Control name.






---

  



**\_\_init\_\_** *(self)*


Default constructor to allow 2-phase creation.




---

  





            Source: https://docs.wxpython.org/wx.Control.html
        """

    def Command(self, event: 'CommandEvent') -> None:
        """ 

`Command`(*self*, *event*)[¶](#wx.Control.Command "Permalink to this definition")
Simulates the effect of the user issuing a command to the item.



Parameters
**event** ([*wx.CommandEvent*](wx.CommandEvent.html#wx.CommandEvent "wx.CommandEvent")) – 





See also


 [wx.CommandEvent](wx.CommandEvent.html#wx-commandevent)





            Source: https://docs.wxpython.org/wx.Control.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=ControlNameStr*)[¶](#wx.Control.Create "Permalink to this definition")

Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Control.html
        """

    @staticmethod
    def Ellipsize(label, dc, mode, maxWidth, flags=ELLIPSIZE_FLAGS_DEFAULT) -> str:
        """ 

*static* `Ellipsize`(*label*, *dc*, *mode*, *maxWidth*, *flags=ELLIPSIZE\_FLAGS\_DEFAULT*)[¶](#wx.Control.Ellipsize "Permalink to this definition")
Replaces parts of the *label* string with ellipsis, if needed, so that it fits into *maxWidth* pixels if possible.


Note that this function does *not* guarantee that the returned string will always be shorter than *maxWidth*; if *maxWidth* is extremely small, ellipsized text may be larger.



Parameters
* **label** (*string*) – The string to ellipsize
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The DC used to retrieve the character widths through the [`wx.DC.GetPartialTextExtents`](wx.DC.html#wx.DC.GetPartialTextExtents "wx.DC.GetPartialTextExtents") function.
* **mode** ([*EllipsizeMode*](wx.EllipsizeMode.enumeration.html "EllipsizeMode")) – The ellipsization mode. This is the setting which determines which part of the string should be replaced by the ellipsis (unless it is `ELLIPSIZE_NONE` in which case nothing is done). See  [wx.EllipsizeMode](wx.EllipsizeMode.enumeration.html#wx-ellipsizemode) enumeration values for more info.
* **maxWidth** (*int*) – The maximum width of the returned string in pixels. This argument determines how much characters of the string need to be removed (and replaced by ellipsis).
* **flags** (*int*) – One or more of the  [wx.EllipsizeFlags](wx.EllipsizeFlags.enumeration.html#wx-ellipsizeflags) enumeration values combined.



Return type
`string`






            Source: https://docs.wxpython.org/wx.Control.html
        """

    @staticmethod
    def EscapeMnemonics(text: str) -> str:
        """ 

*static* `EscapeMnemonics`(*text*)[¶](#wx.Control.EscapeMnemonics "Permalink to this definition")
Escapes the special mnemonics characters (“&”) in the given string.


This function can be helpful if you need to set the controls label to a user-provided string. If the string contains ampersands, they wouldn’t appear on the display but be used instead to indicate that the character following the first of them can be used as a control mnemonic. While this can sometimes be desirable (e.g. to allow the user to configure mnemonics of the controls), more often you will want to use this function before passing a user-defined string to [`SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel") . Alternatively, if the label is entirely user-defined, you can just call [`SetLabelText`](#wx.Control.SetLabelText "wx.Control.SetLabelText") directly – but this function must be used if the label is a combination of a part defined by program containing the control mnemonics and a user-defined part.



Parameters
**text** (*string*) – The string such as it should appear on the display.



Return type
`string`



Returns
The same string with the ampersands in it doubled.






            Source: https://docs.wxpython.org/wx.Control.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Control.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Control.html
        """

    def GetLabel(self) -> str:
        """ 

`GetLabel`(*self*)[¶](#wx.Control.GetLabel "Permalink to this definition")
Returns the control’s label, as it was passed to [`SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel") .


Note that the returned string may contains mnemonics (“&” characters) if they were passed to the [`SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel") function; use [`GetLabelText`](#wx.Control.GetLabelText "wx.Control.GetLabelText") if they are undesired.


Also note that the returned string is always the string which was passed to [`SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel") but may be different from the string passed to [`SetLabelText`](#wx.Control.SetLabelText "wx.Control.SetLabelText") (since this last one escapes mnemonic characters).



Return type
`string`






            Source: https://docs.wxpython.org/wx.Control.html
        """

    def GetLabelText(self, *args, **kw) -> str:
        """ 

`GetLabelText`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Control.GetLabelText "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetLabelText** *(self)*


Returns the control’s label without mnemonics.


Note that because of the stripping of the mnemonics the returned string may differ from the string which was passed to [`SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel") but should always be the same which was passed to [`SetLabelText`](#wx.Control.SetLabelText "wx.Control.SetLabelText") .



Return type
`string`






---

  



**GetLabelText** *(label)*


Returns the given *label* string without mnemonics (“&” characters).



Parameters
**label** (*string*) – 



Return type
`string`






---

  





            Source: https://docs.wxpython.org/wx.Control.html
        """

    def GetSizeFromText(self, text: str) -> 'Size':
        """ 

`GetSizeFromText`(*self*, *text*)[¶](#wx.Control.GetSizeFromText "Permalink to this definition")
Determine the minimum size needed by the control to display the given text.


The helper function that uses combination of [`GetSizeFromTextSize`](#wx.Control.GetSizeFromTextSize "wx.Control.GetSizeFromTextSize") and [`GetTextExtent`](wx.Window.html#wx.Window.GetTextExtent "wx.Window.GetTextExtent") which used together pretty often:



```
# GetSizeFromText is a simpler way to do this:
size = self.GetSizeFromTextSize(self.GetTextExtent(text).GetWidth())

```



Parameters
**text** (*string*) – The given text.



Return type
 [wx.Size](wx.Size.html#wx-size)



Returns
The size that the control should have to leave the area of the specified text. May return DefaultSize if this method is not implemented for this particular control under the current platform.





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.Control.html
        """

    def GetSizeFromTextSize(self, *args, **kw) -> 'Size':
        """ 

`GetSizeFromTextSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Control.GetSizeFromTextSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetSizeFromTextSize** *(self, xlen, ylen=-1)*


Determine the size needed by the control to leave the given area for its text.


This function is mostly useful with control displaying short amounts of text that can be edited by the user, e.g.  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl),  [wx.ComboBox](wx.ComboBox.html#wx-combobox),  [wx.SearchCtrl](wx.SearchCtrl.html#wx-searchctrl) etc. Typically it is used to size these controls for the maximal amount of input they are supposed to contain, for example:



```
# Create a control for post code entry.
postcode = wx.TextCtrl(self, -1, "")

# And set its initial and minimal size to be big enough for
# entering 5 digits.
postcode.SetInitialSize(
    postcode.GetSizeFromTextSize(
        postcode.GetTextExtent("99999")))

```


Currently this method is only implemented for  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl),  [wx.ComboBox](wx.ComboBox.html#wx-combobox) and  [wx.Choice](wx.Choice.html#wx-choice) in wxMSW and wxGTK.



Parameters
* **xlen** (*int*) – The horizontal extent of the area to leave for text, in pixels.
* **ylen** (*int*) – The vertical extent of the area to leave for text, in pixels. By default -1 meaning that the vertical component of the returned size should be the default height of this control.



Return type
 [wx.Size](wx.Size.html#wx-size)



Returns
The size that the control should have to leave the area of the specified size for its text. May return DefaultSize if this method is not implemented for this particular control under the current platform.





New in version 2.9.5.





---

  



**GetSizeFromTextSize** *(self, tsize)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**tsize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)






---

  





            Source: https://docs.wxpython.org/wx.Control.html
        """

    @staticmethod
    def RemoveMnemonics(str: str) -> str:
        """ 

*static* `RemoveMnemonics`(*str*)[¶](#wx.Control.RemoveMnemonics "Permalink to this definition")
Returns the given *str* string without mnemonics (“&” characters).



Parameters
**str** (*string*) – 



Return type
`string`





Note


This function is identical to [`GetLabelText`](#wx.Control.GetLabelText "wx.Control.GetLabelText") and is provided mostly for symmetry with [`EscapeMnemonics`](#wx.Control.EscapeMnemonics "wx.Control.EscapeMnemonics") .





            Source: https://docs.wxpython.org/wx.Control.html
        """

    def SetLabel(self, label: str) -> None:
        """ 

`SetLabel`(*self*, *label*)[¶](#wx.Control.SetLabel "Permalink to this definition")
Sets the control’s label.


All “&” characters in the *label* are special and indicate that the following character is a *mnemonic* for this control and can be used to activate it from the keyboard (typically by using *Alt* key in combination with it). To insert a literal ampersand character, you need to float it, i.e. use “`&&`”. If this behaviour is undesirable, use [`SetLabelText`](#wx.Control.SetLabelText "wx.Control.SetLabelText") instead.



Parameters
**label** (*string*) – 






            Source: https://docs.wxpython.org/wx.Control.html
        """

    def SetLabelMarkup(self, markup: str) -> bool:
        """ 

`SetLabelMarkup`(*self*, *markup*)[¶](#wx.Control.SetLabelMarkup "Permalink to this definition")
Sets the controls label to a string using markup.


Simple markup supported by this function can be used to apply different fonts or colours to different parts of the control label when supported. If markup is not supported by the control or platform, it is simply stripped and [`SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel") is used with the resulting string.


For example,



```
text = wx.StaticText(self, -1, 'Hello world!')

# Some more code...
text.SetLabelMarkup("<b>&ampBed</b> &ampmp "
                     "<span foreground='red'>breakfast</span> "
                     "available <big>HERE</big>")

```


would show the string using bold, red and big for the corresponding words under wxGTK but will simply show the string “Bed &amp; breakfast available `HERE`” on the other platforms. In any case, the “B” of “Bed” will be underlined to indicate that it can be used as a mnemonic for this control.


The supported tags are:







| **Tag** | **Description** |
| --- | --- |
| <b> | bold text |
| <big> | bigger text |
| <i> | italic text |
| <s> | strike-through text |
| <small> | smaller text |
| <tt> | monospaced text |
| <u> | underlined text |
| <span> | generic formatter tag, see the table below for supported attributes. |



  


Supported `<span>` attributes:







| **Name** | **Description** |
| --- | --- |
| foreground, fgcolor, color | Foreground text colour, can be a name or `RGB` value. |
| background, bgcolor | Background text colour, can be a name or `RGB` value. |
| font\_family, face | Font face name. |
| font\_weight, weight | Numeric value in 0..900 range or one of “ultralight”, “light”, “normal” (all meaning non-bold), “bold”, “ultrabold” and “heavy” (all meaning bold). |
| font\_style, style | Either “oblique” or “italic” (both with the same meaning) or “normal”. |
| size | The font size can be specified either as “smaller” or “larger” relatively to the current font, as a CSS font size name (“xx-small”, “x-small”, “small”, “medium”, “large”, “x-large” or “xx-large”) or as a number giving font size in 1024th parts of a point, i.e. 10240 for a 10pt font. |



  


This markup language is a strict subset of Pango markup (described at <http://library.gnome.org/devel/pango/unstable/PangoMarkupFormat.html>) and any tags and span attributes not documented above can’t be used under non-GTK platforms.


Also note that you need to escape the following special characters:







| **Special character** | **Escape as** |
| --- | --- |
| `&` | `&amp` ; or as `&&` |
| `'` | `&apos` ; |
| `"` | `&quot` ; |
| `<` | `&lt` ; |
| `>` | `&gt` ; |



  


The non-escaped ampersand `&` characters are interpreted as mnemonics as with [`wx.Control.SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel") .



Parameters
**markup** (*string*) – String containing markup for the label. It may contain markup tags described above and newline characters but currently only wxGTK and wxOSX support multiline labels with markup, the generic implementation (also used in wxMSW) only handles single line markup labels. Notice that the string must be well-formed (e.g. all tags must be correctly closed) and won’t be shown at all otherwise.



Return type
*bool*




Currently  [wx.Button](wx.Button.html#wx-button) supports markup in all major ports (wxMSW, wxGTK and OSX/Cocoa) while  [wx.StaticText](wx.StaticText.html#wx-statictext) supports it in wxGTK and wxOSX and its generic version (which can be used under MSW if markup support is required). Extending support to more controls is planned in the future.



Returns
`True` if the new label was set (even if markup in it was ignored) or `False` if we failed to parse the markup. In this case the label remains unchanged.





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.Control.html
        """

    def SetLabelText(self, text: str) -> None:
        """ 

`SetLabelText`(*self*, *text*)[¶](#wx.Control.SetLabelText "Permalink to this definition")
Sets the control’s label to exactly the given string.


Unlike [`SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel") , this function shows exactly the *text* passed to it in the control, without interpreting ampersands in it in any way. Notice that it means that the control can’t have any mnemonic defined for it using this function.



Parameters
**text** (*string*) – 





See also


[`EscapeMnemonics`](#wx.Control.EscapeMnemonics "wx.Control.EscapeMnemonics")





            Source: https://docs.wxpython.org/wx.Control.html
        """

    Label: str  # `Label`[¶](#wx.Control.Label "Permalink to this definition")See [`GetLabel`](#wx.Control.GetLabel "wx.Control.GetLabel") and [`SetLabel`](#wx.Control.SetLabel "wx.Control.SetLabel")
    LabelText: str  # `LabelText`[¶](#wx.Control.LabelText "Permalink to this definition")See [`GetLabelText`](#wx.Control.GetLabelText "wx.Control.GetLabelText") and [`SetLabelText`](#wx.Control.SetLabelText "wx.Control.SetLabelText")



class ControlWithItems(Control,ItemContainer):
    """ This is convenience class that derives from both Control and
ItemContainer.




        Source: https://docs.wxpython.org/wx.ControlWithItems.html
    """


class ItemContainer(ItemContainerImmutable):
    """ This class is an abstract base class for some wxWidgets controls which
contain several items such as ListBox, CheckListBox, ComboBox or
Choice.


  


        Source: https://docs.wxpython.org/wx.ItemContainer.html
    """
    def Append(self, *args, **kw) -> int:
        """ 

`Append`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ItemContainer.Append "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Append** *(self, item)*


Appends item into the control.



Parameters
**item** (*string*) – String to add.



Return type
*int*



Returns
The return value is the index of the newly inserted item. Note that this may be different from the last one if the control is sorted (e.g. has `LB_SORT` or `CB_SORT` style).






---

  



**Append** *(self, item, clientData)*


Appends item into the control.



Parameters
* **item** (*string*) – String to add.
* **clientData** (*ClientData*) – Pointer to client data to associate with the new item.



Return type
*int*



Returns
The return value is the index of the newly inserted item. Note that this may be different from the last one if the control is sorted (e.g. has `LB_SORT` or `CB_SORT` style).






---

  



**Append** *(self, items)*


Appends several items at once into the control.


Notice that calling this method is usually much faster than appending them one by one if you need to add a lot of items.



Parameters
**items** (*list of strings*) – Array of strings to insert.



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def AppendItems(self, items) -> None:
        """ 

`AppendItems`(*self*, *items*)[¶](#wx.ItemContainer.AppendItems "Permalink to this definition")
Alias for [`Append`](#wx.ItemContainer.Append "wx.ItemContainer.Append")




            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.ItemContainer.Clear "Permalink to this definition")
Removes all items from the control.


[`Clear`](#wx.ItemContainer.Clear "wx.ItemContainer.Clear") also deletes the client data of the existing items if it is owned by the control.




            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def Delete(self, n: int) -> None:
        """ 

`Delete`(*self*, *n*)[¶](#wx.ItemContainer.Delete "Permalink to this definition")
Deletes an item from the control.


The client data associated with the item will be also deleted if it is owned by the control. Note that it is an error (signalled by an assert failure in debug builds) to remove an item with the index negative or greater or equal than the number of items in the control.


If there is a currently selected item below the item being deleted, i.e. if [`GetSelection`](wx.ItemContainerImmutable.html#wx.ItemContainerImmutable.GetSelection "wx.ItemContainerImmutable.GetSelection") returns a valid index greater than or equal to *n*, the selection is invalidated when this function is called. However if the selected item appears before the item being deleted, the selection is preserved unchanged.



Parameters
**n** (*int*) – The zero-based item index.





See also


[`Clear`](#wx.ItemContainer.Clear "wx.ItemContainer.Clear")





            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def DetachClientObject(self, n: int) -> 'ClientData':
        """ 

`DetachClientObject`(*self*, *n*)[¶](#wx.ItemContainer.DetachClientObject "Permalink to this definition")
Returns the client object associated with the given item and transfers its ownership to the caller.


This method, unlike [`GetClientObject`](#wx.ItemContainer.GetClientObject "wx.ItemContainer.GetClientObject") , expects the caller to delete the returned pointer. It also replaces the internally stored pointer with `None`, i.e. completely detaches the client object pointer from the control.


It’s an error to call this method unless [`HasClientObjectData`](#wx.ItemContainer.HasClientObjectData "wx.ItemContainer.HasClientObjectData") returns `True`.



Parameters
**n** (*int*) – The zero-based item index.



Return type
*ClientData*



Returns
The associated client object pointer to be deleted by caller or `None`.





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def GetClientData(self, n: int) -> 'ClientData':
        """ 

`GetClientData`(*self*, *n*)[¶](#wx.ItemContainer.GetClientData "Permalink to this definition")
Returns a pointer to the client data associated with the given item (if any).


It is an error to call this function for a control which doesn’t have typed client data at all although it is `wx.OK` to call it even if the given item doesn’t have any client data associated with it (but other items do).


Notice that the returned pointer is still owned by the control and will be deleted by it, use [`DetachClientObject`](#wx.ItemContainer.DetachClientObject "wx.ItemContainer.DetachClientObject") if you want to remove the pointer from the control.



Parameters
**n** (*int*) – The zero-based position of the item.



Return type
*ClientData*



Returns
A pointer to the client data, or `None` if not present.






            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def GetClientObject(self, n) -> None:
        """ 

`GetClientObject`(*self*, *n*)[¶](#wx.ItemContainer.GetClientObject "Permalink to this definition")
Alias for [`GetClientData`](#wx.ItemContainer.GetClientData "wx.ItemContainer.GetClientData")




            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def GetItems(self) -> None:
        """ 

`GetItems`(*self*)[¶](#wx.ItemContainer.GetItems "Permalink to this definition")
Alias for [`GetStrings`](wx.ItemContainerImmutable.html#wx.ItemContainerImmutable.GetStrings "wx.ItemContainerImmutable.GetStrings")




            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def HasClientData(self) -> bool:
        """ 

`HasClientData`(*self*)[¶](#wx.ItemContainer.HasClientData "Permalink to this definition")
Returns `True`, if either untyped data ( `void*` ) or object data (wxClientData) is associated with the items of the control.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def HasClientObjectData(self) -> bool:
        """ 

`HasClientObjectData`(*self*)[¶](#wx.ItemContainer.HasClientObjectData "Permalink to this definition")
Returns `True`, if object data is associated with the items of the control.


Object data pointers have the type `ClientData*` instead of `void*` and, importantly, are owned by the control, i.e. will be deleted by it, unlike their untyped counterparts.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def HasClientUntypedData(self) -> bool:
        """ 

`HasClientUntypedData`(*self*)[¶](#wx.ItemContainer.HasClientUntypedData "Permalink to this definition")
Returns `True`, if untyped data ( `void*` ) is associated with the items of the control.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def Insert(self, *args, **kw) -> int:
        """ 

`Insert`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ItemContainer.Insert "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Insert** *(self, item, pos)*


Inserts item into the control.



Parameters
* **item** (*string*) – String to add.
* **pos** (*int*) – Position to insert item before, zero based.



Return type
*int*



Returns
The return value is the index of the newly inserted item. If the insertion failed for some reason, -1 is returned.






---

  



**Insert** *(self, item, pos, clientData)*


Inserts item into the control.



Parameters
* **item** (*string*) – String to add.
* **pos** (*int*) – Position to insert item before, zero based.
* **clientData** (*ClientData*) – Pointer to client data to associate with the new item.



Return type
*int*



Returns
The return value is the index of the newly inserted item. If the insertion failed for some reason, -1 is returned.






---

  



**Insert** *(self, items, pos)*


Inserts several items at once into the control.


Notice that calling this method is usually much faster than inserting them one by one if you need to insert a lot of items.



Parameters
* **items** (*list of strings*) – Array of strings to insert.
* **pos** (*int*) – Position to insert the items before, zero based.



Return type
*int*



Returns
The return value is the index of the last inserted item. If the insertion failed for some reason, -1 is returned.






---

  





            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def Set(self, items: list[str]) -> None:
        """ 

`Set`(*self*, *items*)[¶](#wx.ItemContainer.Set "Permalink to this definition")
Replaces the current control contents with the given items.


Notice that calling this method is usually much faster than appending them one by one if you need to add a lot of items.



Parameters
**items** (*list of strings*) – Array of strings to insert.






            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def SetClientData(self, n, data) -> None:
        """ 

`SetClientData`(*self*, *n*, *data*)[¶](#wx.ItemContainer.SetClientData "Permalink to this definition")
Associates the given typed client data pointer with the given item: the *data* object will be deleted when the item is deleted (either explicitly by using [`Delete`](#wx.ItemContainer.Delete "wx.ItemContainer.Delete") or implicitly when the control itself is destroyed).


Note that it is an error to call this function if any untyped client data pointers had been associated with the control items before.



Parameters
* **n** (*int*) – The zero-based item index.
* **data** (*ClientData*) – The client data to associate with the item.






            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def SetClientObject(self, n, data) -> None:
        """ 

`SetClientObject`(*self*, *n*, *data*)[¶](#wx.ItemContainer.SetClientObject "Permalink to this definition")
Alias for [`SetClientData`](#wx.ItemContainer.SetClientData "wx.ItemContainer.SetClientData")




            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    def SetItems(self, items) -> None:
        """ 

`SetItems`(*self*, *items*)[¶](#wx.ItemContainer.SetItems "Permalink to this definition")
Alias for [`Set`](#wx.ItemContainer.Set "wx.ItemContainer.Set")




            Source: https://docs.wxpython.org/wx.ItemContainer.html
        """

    Items: None  # `Items`[¶](#wx.ItemContainer.Items "Permalink to this definition")See [`GetItems`](#wx.ItemContainer.GetItems "wx.ItemContainer.GetItems") and [`SetItems`](#wx.ItemContainer.SetItems "wx.ItemContainer.SetItems")



class Cursor(GDIObject):
    """ **Possible constructors**:



```
Cursor()

Cursor(cursorName, type=BITMAP_TYPE_ANY, hotSpotX=0, hotSpotY=0)

Cursor(cursorId)

Cursor(image)

Cursor(cursor)

```


A cursor is a small bitmap usually used for denoting where the mouse
pointer is, with a picture that might indicate the interpretation of a
mouse click.


  


        Source: https://docs.wxpython.org/wx.Cursor.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Cursor.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, cursorName, type=BITMAP\_TYPE\_ANY, hotSpotX=0, hotSpotY=0)*


Constructs a cursor by passing a string resource name or filename.


The arguments *hotSpotX* and *hotSpotY* are only used when there’s no hotspot info in the resource/image-file to load (e.g. when using `BITMAP_TYPE_ICO` under wxMSW or `BITMAP_TYPE_XPM` under wxGTK).



Parameters
* **cursorName** (*string*) – The name of the resource or the image file to load.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – Icon type to load. It defaults to `CURSOR_DEFAULT_TYPE` , which is a #define associated to different values on different platforms:

	+ under Windows, it defaults to `BITMAP_TYPE_CUR_RESOURCE` . Other permitted types under Windows are `BITMAP_TYPE_CUR` (to load a cursor from a .cur cursor file), `BITMAP_TYPE_ICO` (to load a cursor from a .ico icon file) and `BITMAP_TYPE_ANI` (to load a cursor from a .ani icon file).
	+ under MacOS, it defaults to `BITMAP_TYPE_MACCURSOR_RESOURCE` ; when specifying a string resource name, first the color cursors ‘crsr’ and then the black/white cursors ‘`CURS`’ in the resource chain are scanned through. Note that resource forks are deprecated on macOS so this is only available for legacy reasons and should not be used in new code.
	+ under GTK, it defaults to `BITMAP_TYPE_XPM` . See the  [wx.Cursor](#wx-cursor) constructor for more info.
	+ under X11, it defaults to `BITMAP_TYPE_XPM` .
	+ under Motif, it defaults to `BITMAP_TYPE_XBM` .
* **hotSpotX** (*int*) – Hotspot x coordinate (relative to the top left of the image).
* **hotSpotY** (*int*) – Hotspot y coordinate (relative to the top left of the image).






---

  



**\_\_init\_\_** *(self, cursorId)*


Constructs a cursor using a cursor identifier.



Parameters
**cursorId** ([*StockCursor*](wx.StockCursor.enumeration.html "StockCursor")) – A stock cursor identifier. See  [wx.StockCursor](wx.StockCursor.enumeration.html#wx-stockcursor).






---

  



**\_\_init\_\_** *(self, image)*


Constructs a cursor from a  [wx.Image](wx.Image.html#wx-image).


If cursor are monochrome on the current platform, colors with the `RGB` elements all greater than 127 will be foreground, colors less than this background. The mask (if any) will be used to specify the transparent area.


In wxMSW the foreground will be white and the background black. If the cursor is larger than 32x32 it is resized.


In wxGTK, colour cursors and alpha channel are supported (starting from GTK+ 2.2). Otherwise the two most frequent colors will be used for foreground and background. In any case, the cursor will be displayed at the size of the image.


Under Mac (Cocoa), large cursors are supported.


Notice that the *image* can define the cursor hot spot. To set it you need to use [`wx.Image.SetOption`](wx.Image.html#wx.Image.SetOption "wx.Image.SetOption") with `IMAGE_OPTION_CUR_HOTSPOT_X` or `IMAGE_OPTION_CUR_HOTSPOT_Y` , e.g.



```
image.SetOption(wx.IMAGE_OPTION_CUR_HOTSPOT_X, hotSpotX)
image.SetOption(wx.IMAGE_OPTION_CUR_HOTSPOT_X, hotSpotY)

```



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 






---

  



**\_\_init\_\_** *(self, cursor)*


Copy constructor, uses [reference counting](refcount_overview.html#reference-counting).



Parameters
**cursor** ([*wx.Cursor*](#wx.Cursor "wx.Cursor")) – Pointer or reference to a cursor to copy.






---

  





            Source: https://docs.wxpython.org/wx.Cursor.html
        """

    def GetHandle(self) -> int:
        """ 

`GetHandle`(*self*)[¶](#wx.Cursor.GetHandle "Permalink to this definition")
Get the handle for the Cursor. Windows only.



Return type
*long*






            Source: https://docs.wxpython.org/wx.Cursor.html
        """

    def GetHotSpot(self) -> 'Point':
        """ 

`GetHotSpot`(*self*)[¶](#wx.Cursor.GetHotSpot "Permalink to this definition")
Returns the coordinates of the cursor hot spot.


The hot spot is the point at which the mouse is actually considered to be when this cursor is used.


This method is currently only implemented in wxMSW and `GTK2+` and simply returns `wx.DefaultPosition` in the other ports.



Return type
 [wx.Point](wx.Point.html#wx-point)





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.Cursor.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Cursor.IsOk "Permalink to this definition")
Returns `True` if cursor data is present.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Cursor.html
        """

    def SetHandle(self, handle) -> None:
        """ 

`SetHandle`(*self*, *handle*)[¶](#wx.Cursor.SetHandle "Permalink to this definition")
Set the handle to use for this Cursor. Windows only.




            Source: https://docs.wxpython.org/wx.Cursor.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Cursor.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Cursor.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Cursor.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Cursor.html
        """

    def _copyFrom(self, other) -> None:
        """ 

`_copyFrom`(*self*, *other*)[¶](#wx.Cursor._copyFrom "Permalink to this definition")
For internal use only.




            Source: https://docs.wxpython.org/wx.Cursor.html
        """

    Handle: int  # `Handle`[¶](#wx.Cursor.Handle "Permalink to this definition")See [`GetHandle`](#wx.Cursor.GetHandle "wx.Cursor.GetHandle") and [`SetHandle`](#wx.Cursor.SetHandle "wx.Cursor.SetHandle")
    HotSpot: 'Point'  # `HotSpot`[¶](#wx.Cursor.HotSpot "Permalink to this definition")See [`GetHotSpot`](#wx.Cursor.GetHotSpot "wx.Cursor.GetHotSpot")



class CustomDataObject(DataObjectSimple):
    """ **Possible constructors**:



```
CustomDataObject(format=FormatInvalid)

CustomDataObject(formatName)

```


CustomDataObject is a specialization of DataObjectSimple for some
application-specific data in arbitrary (either custom or one of the
standard ones).


  


        Source: https://docs.wxpython.org/wx.CustomDataObject.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.CustomDataObject.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, format=FormatInvalid)*


The constructor accepts a *format* argument which specifies the (single) format supported by this object.


If it isn’t set here, [`wx.DataObjectSimple.SetFormat`](wx.DataObjectSimple.html#wx.DataObjectSimple.SetFormat "wx.DataObjectSimple.SetFormat") should be used.



Parameters
**format** ([*wx.DataFormat*](wx.DataFormat.html#wx.DataFormat "wx.DataFormat")) – 






---

  



**\_\_init\_\_** *(self, formatName)*




---

  





            Source: https://docs.wxpython.org/wx.CustomDataObject.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.CustomDataObject.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.CustomDataObject.html
        """

    def GetData(self) -> Any:
        """ 

`GetData`(*self*)[¶](#wx.CustomDataObject.GetData "Permalink to this definition")
Returns a reference to the data buffer.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.CustomDataObject.html
        """

    def GetSize(self) -> int:
        """ 

`GetSize`(*self*)[¶](#wx.CustomDataObject.GetSize "Permalink to this definition")
Returns the data size in bytes.



Return type
*int*






            Source: https://docs.wxpython.org/wx.CustomDataObject.html
        """

    def SetData(self, *args, **kw) -> bool:
        """ 

`SetData`(*self*, *\*args*, *\*\*kw*)[¶](#wx.CustomDataObject.SetData "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetData** *(self, buf)*


Copies data from the provided buffer to this data object’s buffer



Return type
*bool*






---

  



**SetData** *(self, format, buf)*



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.CustomDataObject.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.CustomDataObject.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.CustomDataObject.GetAllFormats "wx.CustomDataObject.GetAllFormats")
    Data: Any  # `Data`[¶](#wx.CustomDataObject.Data "Permalink to this definition")See [`GetData`](#wx.CustomDataObject.GetData "wx.CustomDataObject.GetData") and [`SetData`](#wx.CustomDataObject.SetData "wx.CustomDataObject.SetData")
    Size: int  # `Size`[¶](#wx.CustomDataObject.Size "Permalink to this definition")See [`GetSize`](#wx.CustomDataObject.GetSize "wx.CustomDataObject.GetSize")



class DataObjectSimple(DataObject):
    """ **Possible constructors**:



```
DataObjectSimple(format=FormatInvalid)

DataObjectSimple(formatName)

```


This is the simplest possible implementation of the DataObject
class.


  


        Source: https://docs.wxpython.org/wx.DataObjectSimple.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DataObjectSimple.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, format=FormatInvalid)*


Constructor accepts the supported format (none by default) which may also be set later with [`SetFormat`](#wx.DataObjectSimple.SetFormat "wx.DataObjectSimple.SetFormat") .



Parameters
**format** ([*wx.DataFormat*](wx.DataFormat.html#wx.DataFormat "wx.DataFormat")) – 






---

  



**\_\_init\_\_** *(self, formatName)*




---

  





            Source: https://docs.wxpython.org/wx.DataObjectSimple.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.DataObjectSimple.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.DataObjectSimple.html
        """

    def GetDataHere(self, buf) -> bool:
        """ 

`GetDataHere`(*self*, *buf*)[¶](#wx.DataObjectSimple.GetDataHere "Permalink to this definition")
Copies this data object’s data bytes to the given buffer



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DataObjectSimple.html
        """

    def GetDataSize(self) -> int:
        """ 

`GetDataSize`(*self*)[¶](#wx.DataObjectSimple.GetDataSize "Permalink to this definition")
Gets the size of our data.


Must be implemented in the derived class if the object supports rendering its data.



Return type
*int*






            Source: https://docs.wxpython.org/wx.DataObjectSimple.html
        """

    def GetFormat(self) -> 'DataFormat':
        """ 

`GetFormat`(*self*)[¶](#wx.DataObjectSimple.GetFormat "Permalink to this definition")
Returns the (one and only one) format supported by this object.


It is assumed that the format is supported in both directions.



Return type
 [wx.DataFormat](wx.DataFormat.html#wx-dataformat)






            Source: https://docs.wxpython.org/wx.DataObjectSimple.html
        """

    def SetData(self, *args, **kw) -> bool:
        """ 

`SetData`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DataObjectSimple.SetData "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetData** *(self, buf)*


Copies data from the provided buffer to this data object.



Return type
*bool*






---

  



**SetData** *(self, format, buf)*



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.DataObjectSimple.html
        """

    def SetFormat(self, format: 'DataFormat') -> None:
        """ 

`SetFormat`(*self*, *format*)[¶](#wx.DataObjectSimple.SetFormat "Permalink to this definition")
Sets the supported format.



Parameters
**format** ([*wx.DataFormat*](wx.DataFormat.html#wx.DataFormat "wx.DataFormat")) – 






            Source: https://docs.wxpython.org/wx.DataObjectSimple.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.DataObjectSimple.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.DataObjectSimple.GetAllFormats "wx.DataObjectSimple.GetAllFormats")
    DataHere: bool  # `DataHere`[¶](#wx.DataObjectSimple.DataHere "Permalink to this definition")See [`GetDataHere`](#wx.DataObjectSimple.GetDataHere "wx.DataObjectSimple.GetDataHere")
    DataSize: int  # `DataSize`[¶](#wx.DataObjectSimple.DataSize "Permalink to this definition")See [`GetDataSize`](#wx.DataObjectSimple.GetDataSize "wx.DataObjectSimple.GetDataSize")
    Format: 'DataFormat'  # `Format`[¶](#wx.DataObjectSimple.Format "Permalink to this definition")See [`GetFormat`](#wx.DataObjectSimple.GetFormat "wx.DataObjectSimple.GetFormat") and [`SetFormat`](#wx.DataObjectSimple.SetFormat "wx.DataObjectSimple.SetFormat")



class DataFormat:
    """ **Possible constructors**:



```
DataFormat(format=DF_INVALID)

DataFormat(format)

```


A DataFormat is an encapsulation of a platform-specific format
handle which is used by the system for the clipboard and drag and drop
operations.


  


        Source: https://docs.wxpython.org/wx.DataFormat.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DataFormat.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, format=DF\_INVALID)*


Constructs a data format object for one of the standard data formats or an empty data object (use [`SetType`](#wx.DataFormat.SetType "wx.DataFormat.SetType") or [`SetId`](#wx.DataFormat.SetId "wx.DataFormat.SetId") later in this case).




---

  



**\_\_init\_\_** *(self, format)*


Constructs a data format object for a custom format identified by its name *format*.




---

  





            Source: https://docs.wxpython.org/wx.DataFormat.html
        """

    def GetId(self) -> str:
        """ 

`GetId`(*self*)[¶](#wx.DataFormat.GetId "Permalink to this definition")
Returns the name of a custom format (this function will fail for a standard format).



Return type
`string`






            Source: https://docs.wxpython.org/wx.DataFormat.html
        """

    def GetType(self) -> 'DataFormatId':
        """ 

`GetType`(*self*)[¶](#wx.DataFormat.GetType "Permalink to this definition")
Returns the platform-specific number identifying the format.



Return type
 [wx.DataFormatId](wx.DataFormatId.enumeration.html#wx-dataformatid)






            Source: https://docs.wxpython.org/wx.DataFormat.html
        """

    def SetId(self, format: str) -> None:
        """ 

`SetId`(*self*, *format*)[¶](#wx.DataFormat.SetId "Permalink to this definition")
Sets the format to be the custom format identified by the given name.



Parameters
**format** (*string*) – 






            Source: https://docs.wxpython.org/wx.DataFormat.html
        """

    def SetType(self, type: DataFormatId) -> None:
        """ 

`SetType`(*self*, *type*)[¶](#wx.DataFormat.SetType "Permalink to this definition")
Sets the format to the given value, which should be one of `DF_XXX` constants.



Parameters
**type** ([*DataFormatId*](wx.DataFormatId.enumeration.html "DataFormatId")) – 






            Source: https://docs.wxpython.org/wx.DataFormat.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DataFormat.__ne__ "Permalink to this definition")
Returns `True` if the formats are different.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_ne\_\_** *(self)*



Parameters
**format** ([*wx.DataFormat*](#wx.DataFormat "wx.DataFormat")) – 






---

  



**\_\_ne\_\_** *(self)*



Parameters
**format** ([*DataFormatId*](wx.DataFormatId.enumeration.html "DataFormatId")) – 






---

  





            Source: https://docs.wxpython.org/wx.DataFormat.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DataFormat.__eq__ "Permalink to this definition")
Returns `True` if the formats are equal.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_eq\_\_** *(self)*



Parameters
**format** ([*wx.DataFormat*](#wx.DataFormat "wx.DataFormat")) – 






---

  



**\_\_eq\_\_** *(self)*



Parameters
**format** ([*DataFormatId*](wx.DataFormatId.enumeration.html "DataFormatId")) – 






---

  





            Source: https://docs.wxpython.org/wx.DataFormat.html
        """

    Id: str  # `Id`[¶](#wx.DataFormat.Id "Permalink to this definition")See [`GetId`](#wx.DataFormat.GetId "wx.DataFormat.GetId") and [`SetId`](#wx.DataFormat.SetId "wx.DataFormat.SetId")
    Type: 'DataFormatId'  # `Type`[¶](#wx.DataFormat.Type "Permalink to this definition")See [`GetType`](#wx.DataFormat.GetType "wx.DataFormat.GetType") and [`SetType`](#wx.DataFormat.SetType "wx.DataFormat.SetType")



DF_INVALID: int

DF_TEXT: int

DF_BITMAP: int

DF_METAFILE: int

DF_UNICODETEXT: int

DF_FILENAME: int

DF_HTML: int

DF_PNG: int

class DataObjectComposite(DataObject):
    """ **Possible constructors**:



```
DataObjectComposite()

```


DataObjectComposite is the simplest DataObject derivation which
may be used to support multiple formats.


  


        Source: https://docs.wxpython.org/wx.DataObjectComposite.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.DataObjectComposite.__init__ "Permalink to this definition")
The default constructor.




            Source: https://docs.wxpython.org/wx.DataObjectComposite.html
        """

    def Add(self, dataObject, preferred=False) -> None:
        """ 

`Add`(*self*, *dataObject*, *preferred=False*)[¶](#wx.DataObjectComposite.Add "Permalink to this definition")
Adds the *dataObject* to the list of supported objects and it becomes the preferred object if *preferred* is `True`.



Parameters
* **dataObject** ([*wx.DataObjectSimple*](wx.DataObjectSimple.html#wx.DataObjectSimple "wx.DataObjectSimple")) –
* **preferred** (*bool*) –






            Source: https://docs.wxpython.org/wx.DataObjectComposite.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.DataObjectComposite.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.DataObjectComposite.html
        """

    def GetObject(self, format, dir=DataObject.Get) -> 'DataObjectSimple':
        """ 

`GetObject`(*self*, *format*, *dir=DataObject.Get*)[¶](#wx.DataObjectComposite.GetObject "Permalink to this definition")
Returns the pointer to the object which supports the passed format for the specified direction.


`None` is returned if the specified *format* is not supported for this direction *dir*. The returned pointer is owned by  [wx.DataObjectComposite](#wx-dataobjectcomposite) itself and shouldn’t be deleted by caller.



Parameters
* **format** ([*wx.DataFormat*](wx.DataFormat.html#wx.DataFormat "wx.DataFormat")) –
* **dir** (*DataObject.Direction*) –



Return type
 [wx.DataObjectSimple](wx.DataObjectSimple.html#wx-dataobjectsimple)





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.DataObjectComposite.html
        """

    def GetReceivedFormat(self) -> 'DataFormat':
        """ 

`GetReceivedFormat`(*self*)[¶](#wx.DataObjectComposite.GetReceivedFormat "Permalink to this definition")
Report the format passed to the [`SetData`](#wx.DataObjectComposite.SetData "wx.DataObjectComposite.SetData") method.


This should be the format of the data object within the composite that received data from the clipboard or the DnD operation. You can use this method to find out what kind of data object was received.



Return type
 [wx.DataFormat](wx.DataFormat.html#wx-dataformat)






            Source: https://docs.wxpython.org/wx.DataObjectComposite.html
        """

    def SetData(self, format, buf) -> bool:
        """ 

`SetData`(*self*, *format*, *buf*)[¶](#wx.DataObjectComposite.SetData "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.DataObjectComposite.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.DataObjectComposite.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.DataObjectComposite.GetAllFormats "wx.DataObjectComposite.GetAllFormats")
    ReceivedFormat: 'DataFormat'  # `ReceivedFormat`[¶](#wx.DataObjectComposite.ReceivedFormat "Permalink to this definition")See [`GetReceivedFormat`](#wx.DataObjectComposite.GetReceivedFormat "wx.DataObjectComposite.GetReceivedFormat")



class DateSpan:
    """ **Possible constructors**:



```
DateSpan(years=0, months=0, weeks=0, days=0)

```


This class is a “logical time span” and is useful for implementing
program logic for such things as “add one month to the date” which, in
general, doesn’t mean to add 60x60x24x31 seconds to it, but to take
the same date the next month (to understand that this is indeed
different consider adding one month to Feb, 15 we want to get Mar,
15, of course).


  


        Source: https://docs.wxpython.org/wx.DateSpan.html
    """
    def __init__(self, years=0, months=0, weeks=0, days=0) -> None:
        """ 

`__init__`(*self*, *years=0*, *months=0*, *weeks=0*, *days=0*)[¶](#wx.DateSpan.__init__ "Permalink to this definition")
Constructs the date span object for the given number of years, months, weeks and days.


Note that the weeks and days add together if both are given.



Parameters
* **years** (*int*) –
* **months** (*int*) –
* **weeks** (*int*) –
* **days** (*int*) –






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def Add(self, other: 'DateSpan') -> 'DateSpan':
        """ 

`Add`(*self*, *other*)[¶](#wx.DateSpan.Add "Permalink to this definition")
Adds the given  [wx.DateSpan](#wx-datespan) to this  [wx.DateSpan](#wx-datespan) and returns a reference to itself.



Parameters
**other** ([*wx.DateSpan*](#wx.DateSpan "wx.DateSpan")) – 



Return type
 [wx.DateSpan](#wx-datespan)






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    @staticmethod
    def Day() -> 'DateSpan':
        """ 

*static* `Day`()[¶](#wx.DateSpan.Day "Permalink to this definition")
Returns a date span object corresponding to one day.



Return type
 [wx.DateSpan](#wx-datespan)





See also


[`Days`](#wx.DateSpan.Days "wx.DateSpan.Days")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    @staticmethod
    def Days(days: int) -> 'DateSpan':
        """ 

*static* `Days`(*days*)[¶](#wx.DateSpan.Days "Permalink to this definition")
Returns a date span object corresponding to the given number of days.



Parameters
**days** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)





See also


[`Day`](#wx.DateSpan.Day "wx.DateSpan.Day")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def GetDays(self) -> int:
        """ 

`GetDays`(*self*)[¶](#wx.DateSpan.GetDays "Permalink to this definition")
Returns the number of days (not counting the weeks component) in this date span.



Return type
*int*





See also


[`GetTotalDays`](#wx.DateSpan.GetTotalDays "wx.DateSpan.GetTotalDays")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def GetMonths(self) -> int:
        """ 

`GetMonths`(*self*)[¶](#wx.DateSpan.GetMonths "Permalink to this definition")
Returns the number of the months (not counting the years) in this date span.



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def GetTotalDays(self) -> int:
        """ 

`GetTotalDays`(*self*)[¶](#wx.DateSpan.GetTotalDays "Permalink to this definition")
Returns the combined number of days in this date span, counting both weeks and days.


This doesn’t take months or years into account.



Return type
*int*





See also


[`GetWeeks`](#wx.DateSpan.GetWeeks "wx.DateSpan.GetWeeks") , [`GetDays`](#wx.DateSpan.GetDays "wx.DateSpan.GetDays")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def GetTotalMonths(self) -> int:
        """ 

`GetTotalMonths`(*self*)[¶](#wx.DateSpan.GetTotalMonths "Permalink to this definition")
Returns the combined number of months in this date span, counting both years and months.



Return type
*int*





New in version 2.9.5.




See also


[`GetYears`](#wx.DateSpan.GetYears "wx.DateSpan.GetYears") , [`GetMonths`](#wx.DateSpan.GetMonths "wx.DateSpan.GetMonths")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def GetWeeks(self) -> int:
        """ 

`GetWeeks`(*self*)[¶](#wx.DateSpan.GetWeeks "Permalink to this definition")
Returns the number of weeks in this date span.



Return type
*int*





See also


[`GetTotalDays`](#wx.DateSpan.GetTotalDays "wx.DateSpan.GetTotalDays")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def GetYears(self) -> int:
        """ 

`GetYears`(*self*)[¶](#wx.DateSpan.GetYears "Permalink to this definition")
Returns the number of years in this date span.



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    @staticmethod
    def Month() -> 'DateSpan':
        """ 

*static* `Month`()[¶](#wx.DateSpan.Month "Permalink to this definition")
Returns a date span object corresponding to one month.



Return type
 [wx.DateSpan](#wx-datespan)





See also


[`Months`](#wx.DateSpan.Months "wx.DateSpan.Months")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    @staticmethod
    def Months(mon: int) -> 'DateSpan':
        """ 

*static* `Months`(*mon*)[¶](#wx.DateSpan.Months "Permalink to this definition")
Returns a date span object corresponding to the given number of months.



Parameters
**mon** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)





See also


 [wx.DateTime.Month](wx.DateTime.Month.enumeration.html#wx-datetime-month)





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def Multiply(self, factor: int) -> 'DateSpan':
        """ 

`Multiply`(*self*, *factor*)[¶](#wx.DateSpan.Multiply "Permalink to this definition")
Multiplies this date span by the specified *factor*.


The product is computed by multiplying each of the components by the *factor*.



Parameters
**factor** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)



Returns
A reference to this  [wx.DateSpan](#wx-datespan) object modified in place.






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def Neg(self) -> 'DateSpan':
        """ 

`Neg`(*self*)[¶](#wx.DateSpan.Neg "Permalink to this definition")
Changes the sign of this date span.



Return type
 [wx.DateSpan](#wx-datespan)





See also


[`Negate`](#wx.DateSpan.Negate "wx.DateSpan.Negate")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def Negate(self) -> 'DateSpan':
        """ 

`Negate`(*self*)[¶](#wx.DateSpan.Negate "Permalink to this definition")
Returns a date span with the opposite sign.



Return type
 [wx.DateSpan](#wx-datespan)





See also


[`Neg`](#wx.DateSpan.Neg "wx.DateSpan.Neg")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def SetDays(self, n: int) -> 'DateSpan':
        """ 

`SetDays`(*self*, *n*)[¶](#wx.DateSpan.SetDays "Permalink to this definition")
Sets the number of days (without modifying any other components) in this date span.



Parameters
**n** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def SetMonths(self, n: int) -> 'DateSpan':
        """ 

`SetMonths`(*self*, *n*)[¶](#wx.DateSpan.SetMonths "Permalink to this definition")
Sets the number of months (without modifying any other components) in this date span.



Parameters
**n** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def SetWeeks(self, n: int) -> 'DateSpan':
        """ 

`SetWeeks`(*self*, *n*)[¶](#wx.DateSpan.SetWeeks "Permalink to this definition")
Sets the number of weeks (without modifying any other components) in this date span.



Parameters
**n** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def SetYears(self, n: int) -> 'DateSpan':
        """ 

`SetYears`(*self*, *n*)[¶](#wx.DateSpan.SetYears "Permalink to this definition")
Sets the number of years (without modifying any other components) in this date span.



Parameters
**n** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    def Subtract(self, other: 'DateSpan') -> 'DateSpan':
        """ 

`Subtract`(*self*, *other*)[¶](#wx.DateSpan.Subtract "Permalink to this definition")
Subtracts the given  [wx.DateSpan](#wx-datespan) to this  [wx.DateSpan](#wx-datespan) and returns a reference to itself.



Parameters
**other** ([*wx.DateSpan*](#wx.DateSpan "wx.DateSpan")) – 



Return type
 [wx.DateSpan](#wx-datespan)






            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    @staticmethod
    def Week() -> 'DateSpan':
        """ 

*static* `Week`()[¶](#wx.DateSpan.Week "Permalink to this definition")
Returns a date span object corresponding to one week.



Return type
 [wx.DateSpan](#wx-datespan)





See also


[`Weeks`](#wx.DateSpan.Weeks "wx.DateSpan.Weeks")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    @staticmethod
    def Weeks(weeks: int) -> 'DateSpan':
        """ 

*static* `Weeks`(*weeks*)[¶](#wx.DateSpan.Weeks "Permalink to this definition")
Returns a date span object corresponding to the given number of weeks.



Parameters
**weeks** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)





See also


[`Week`](#wx.DateSpan.Week "wx.DateSpan.Week")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    @staticmethod
    def Year() -> 'DateSpan':
        """ 

*static* `Year`()[¶](#wx.DateSpan.Year "Permalink to this definition")
Returns a date span object corresponding to one year.



Return type
 [wx.DateSpan](#wx-datespan)





See also


[`Years`](#wx.DateSpan.Years "wx.DateSpan.Years")





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """

    @staticmethod
    def Years(years: int) -> 'DateSpan':
        """ 

*static* `Years`(*years*)[¶](#wx.DateSpan.Years "Permalink to this definition")
Returns a date span object corresponding to the given number of years.



Parameters
**years** (*int*) – 



Return type
 [wx.DateSpan](#wx-datespan)





See also


 [wx.DateTime.Year](wx.DateTime.Year.enumeration.html#wx-datetime-year)





            Source: https://docs.wxpython.org/wx.DateSpan.html
        """



class DateTime:
    """ **Possible constructors**:



```
DateTime()

DateTime(date)

DateTime(day, month, year=Inv_Year, hour=0, minute=0, second=0,
         millisec=0)

```


DateTime class represents an absolute moment in time.


  


        Source: https://docs.wxpython.org/wx.DateTime.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DateTime.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Use one of the [`Set`](#wx.DateTime.Set "wx.DateTime.Set") functions to initialize the object later.




---

  



**\_\_init\_\_** *(self, date)*


Copy constructor.



Parameters
**date** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – 






---

  



**\_\_init\_\_** *(self, day, month, year=Inv\_Year, hour=0, minute=0, second=0, millisec=0)*


Same as [`Set`](#wx.DateTime.Set "wx.DateTime.Set") .



Parameters
* **day** (*int*) –
* **month** (*DateTime.Month*) –
* **year** (*int*) –
* **hour** (*int*) –
* **minute** (*int*) –
* **second** (*int*) –
* **millisec** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def Add(self, *args, **kw) -> 'DateTime':
        """ 

`Add`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DateTime.Add "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Add** *(self, diff)*


Adds the given date span to this object.



Parameters
**diff** ([*wx.DateSpan*](wx.DateSpan.html#wx.DateSpan "wx.DateSpan")) – 



Return type
 [wx.DateTime](#wx-datetime)






---

  



**Add** *(self, diff)*


Adds the given time span to this object.



Parameters
**diff** ([*wx.TimeSpan*](wx.TimeSpan.html#wx.TimeSpan "wx.TimeSpan")) – 



Return type
 [wx.DateTime](#wx-datetime)






---

  





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def ConvertYearToBC(year: int) -> int:
        """ 

*static* `ConvertYearToBC`(*year*)[¶](#wx.DateTime.ConvertYearToBC "Permalink to this definition")
Converts the year in absolute notation (i.e. a number which can be negative, positive or zero) to the year in BC/AD notation.


For the positive years, nothing is done, but the year 0 is year 1 `BC` and so for other years there is a difference of 1.


This function should be used like this:



```
dt = wx.DateTimeFromDMY(8, 5, 1977)
y = dt.GetYear()
epoch = (y > 0 and ["AD"] or ["BC"])[0]
print "The year is %d%s"%(wx.DateTime.ConvertYearToBC(y), epoch)

```



Parameters
**year** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def DiffAsDateSpan(self, dt: 'DateTime') -> 'DateSpan':
        """ 

`DiffAsDateSpan`(*self*, *dt*)[¶](#wx.DateTime.DiffAsDateSpan "Permalink to this definition")
Returns the difference between this object and *dt* as a  [wx.DateSpan](wx.DateSpan.html#wx-datespan).


This method allows finding the number of entire years, months, weeks and days between *dt* and this date.



Parameters
**dt** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – 



Return type
 [wx.DateSpan](wx.DateSpan.html#wx-datespan)





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def Format(self, format=DefaultDateTimeFormat, tz=Local) -> str:
        """ 

`Format`(*self*, *format=DefaultDateTimeFormat*, *tz=Local*)[¶](#wx.DateTime.Format "Permalink to this definition")
This function does the same as the standard `ANSI` C `strftime(3)` function (<https://cplusplus.com/reference/ctime/strftime/>).


Please see its description for the meaning of *format* parameter.


Notice that `POSIX` `"%g"` , `"%G"` , `"%V"` and `"%z"` format specifiers are supported even if the standard library doesn’t support them (e.g. `MSVC`).


It also accepts a few Widgets-specific extensions: you can optionally specify the width of the field to follow using `printf(3)-like` syntax and the format specification `"%l"` can be used to get the number of milliseconds.



Parameters
* **format** (*string*) –
* **tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) –



Return type
`string`





See also


[`ParseFormat`](#wx.DateTime.ParseFormat "wx.DateTime.ParseFormat")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def FormatDate(self) -> str:
        """ 

`FormatDate`(*self*)[¶](#wx.DateTime.FormatDate "Permalink to this definition")
Identical to calling [`Format`](#wx.DateTime.Format "wx.DateTime.Format") with `"%x"` argument (which means “preferred date representation for the current locale”).



Return type
`string`






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def FormatISOCombined(self, sep: int='T') -> str:
        """ 

`FormatISOCombined`(*self*, *sep='T'*)[¶](#wx.DateTime.FormatISOCombined "Permalink to this definition")
Returns the combined date-time representation in the `ISO` 8601 format `"YYYY-MM-DDTHH:MM:SS"` .


The *sep* parameter default value produces the result exactly corresponding to the `ISO` standard, but it can also be useful to use a space as separator if a more human-readable combined date-time representation is needed.



Parameters
**sep** (*int*) – 



Return type
`string`





See also


[`FormatISODate`](#wx.DateTime.FormatISODate "wx.DateTime.FormatISODate") , [`FormatISOTime`](#wx.DateTime.FormatISOTime "wx.DateTime.FormatISOTime") , [`ParseISOCombined`](#wx.DateTime.ParseISOCombined "wx.DateTime.ParseISOCombined")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def FormatISODate(self) -> str:
        """ 

`FormatISODate`(*self*)[¶](#wx.DateTime.FormatISODate "Permalink to this definition")
This function returns the date representation in the `ISO` 8601 format `"YYYY-MM-DD"` .



Return type
`string`






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def FormatISOTime(self) -> str:
        """ 

`FormatISOTime`(*self*)[¶](#wx.DateTime.FormatISOTime "Permalink to this definition")
This function returns the time representation in the `ISO` 8601 format `"HH:MM:SS"` .



Return type
`string`






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def FormatTime(self) -> str:
        """ 

`FormatTime`(*self*)[¶](#wx.DateTime.FormatTime "Permalink to this definition")
Identical to calling [`Format`](#wx.DateTime.Format "wx.DateTime.Format") with `"%X"` argument (which means “preferred time representation for the current locale”).



Return type
`string`






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def FromDMY(day, month, year=Inv_Year, hour=0, minute=0, second=0, millisecond=0) -> 'DateTime':
        """ 

*static* `FromDMY`(*day*, *month*, *year=Inv\_Year*, *hour=0*, *minute=0*, *second=0*, *millisecond=0*)[¶](#wx.DateTime.FromDMY "Permalink to this definition")
Construct a `DateTime` using the supplied parameters.



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def FromHMS(hour, minute=0, second=0, millisecond=0) -> 'DateTime':
        """ 

*static* `FromHMS`(*hour*, *minute=0*, *second=0*, *millisecond=0*)[¶](#wx.DateTime.FromHMS "Permalink to this definition")
Construct a `DateTime` equal to [`Today`](#wx.DateTime.Today "wx.DateTime.Today") () with the time set to the supplied parameters.



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def FromJDN(jdn) -> 'DateTime':
        """ 

*static* `FromJDN`(*jdn*)[¶](#wx.DateTime.FromJDN "Permalink to this definition")
Construct a `DateTime` from a Julian Day Number.


By definition, the Julian Day Number, usually abbreviated as `JDN`, of a particular instant is the fractional number of days since 12 hours Universal Coordinated Time (Greenwich mean noon) on January 1 of the year -4712 in the Julian proleptic calendar.



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def FromTimeT(timet) -> 'DateTime':
        """ 

*static* `FromTimeT`(*timet*)[¶](#wx.DateTime.FromTimeT "Permalink to this definition")
Construct a `DateTime` from a C `time_t` value, the number of seconds since the epoch.



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def FromTimezone(self, tz, noDST=False) -> 'DateTime':
        """ 

`FromTimezone`(*self*, *tz*, *noDST=False*)[¶](#wx.DateTime.FromTimezone "Permalink to this definition")
Transform the date from the given time zone to the local one.


If *noDST* is `True`, no `DST` adjustments will be made.


If *tz* parameter is `wx.DateTime.Local` , no adjustment is performed.



Parameters
* **tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) –
* **noDST** (*bool*) –



Return type
 [wx.DateTime](#wx-datetime)



Returns
The date adjusted by the different between the given and the local time zones.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetAmPmStrings() -> tuple:
        """ 

*static* `GetAmPmStrings`()[¶](#wx.DateTime.GetAmPmStrings "Permalink to this definition")
Returns the translations of the strings `AM` and `PM` used for time formatting for the current locale.


Either of the pointers may be `None` if the corresponding value is not needed.



Return type
*tuple*



Returns
( *am*, *pm* )






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetAsDOS(self) -> int:
        """ 

`GetAsDOS`(*self*)[¶](#wx.DateTime.GetAsDOS "Permalink to this definition")
Returns the date and time in `DOS` format.



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetBeginDST(year=Inv_Year, country=Country_Default) -> 'DateTime':
        """ 

*static* `GetBeginDST`(*year=Inv\_Year*, *country=Country\_Default*)[¶](#wx.DateTime.GetBeginDST "Permalink to this definition")
Get the beginning of `DST` for the given country in the given year (current one by default).


This function suffers from limitations described in the [DST overview](datetime_overview.html#dst-overview).



Parameters
* **year** (*int*) –
* **country** ([*Country*](wx.DateTime.Country.enumeration.html "Country")) –



Return type
 [wx.DateTime](#wx-datetime)





See also


[`GetEndDST`](#wx.DateTime.GetEndDST "wx.DateTime.GetEndDST")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetCentury(self, tz: 'DateTime.TimeZone'=Local) -> int:
        """ 

`GetCentury`(*self*, *tz=Local*)[¶](#wx.DateTime.GetCentury "Permalink to this definition")
Returns the century of this date.



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetCountry() -> 'Country':
        """ 

*static* `GetCountry`()[¶](#wx.DateTime.GetCountry "Permalink to this definition")
Returns the current default country.


The default country is used for `DST` calculations, for example.



Return type
 [wx.DateTime.Country](wx.DateTime.Country.enumeration.html#wx-datetime-country)





See also


[`SetCountry`](#wx.DateTime.SetCountry "wx.DateTime.SetCountry")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetCurrentMonth(cal: Calendar=Gregorian) -> 'Month':
        """ 

*static* `GetCurrentMonth`(*cal=Gregorian*)[¶](#wx.DateTime.GetCurrentMonth "Permalink to this definition")
Get the current month in given calendar (only Gregorian is currently supported).



Parameters
**cal** ([*Calendar*](wx.DateTime.Calendar.enumeration.html "Calendar")) – 



Return type
 [wx.DateTime.Month](wx.DateTime.Month.enumeration.html#wx-datetime-month)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetCurrentYear(cal: Calendar=Gregorian) -> int:
        """ 

*static* `GetCurrentYear`(*cal=Gregorian*)[¶](#wx.DateTime.GetCurrentYear "Permalink to this definition")
Get the current year in given calendar (only Gregorian is currently supported).



Parameters
**cal** ([*Calendar*](wx.DateTime.Calendar.enumeration.html "Calendar")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetDateOnly(self) -> 'DateTime':
        """ 

`GetDateOnly`(*self*)[¶](#wx.DateTime.GetDateOnly "Permalink to this definition")
Returns the object having the same date component as this one but time of 00:00:00.



Return type
 [wx.DateTime](#wx-datetime)





New in version 2.8.2.




See also


[`ResetTime`](#wx.DateTime.ResetTime "wx.DateTime.ResetTime")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetDay(self, tz: 'DateTime.TimeZone'=Local) -> 'intshort':
        """ 

`GetDay`(*self*, *tz=Local*)[¶](#wx.DateTime.GetDay "Permalink to this definition")
Returns the day in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*intshort*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetDayOfYear(self, tz: 'DateTime.TimeZone'=Local) -> 'intshort':
        """ 

`GetDayOfYear`(*self*, *tz=Local*)[¶](#wx.DateTime.GetDayOfYear "Permalink to this definition")
Returns the day of the year (in `1-366` range) in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*intshort*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetEndDST(year=Inv_Year, country=Country_Default) -> 'DateTime':
        """ 

*static* `GetEndDST`(*year=Inv\_Year*, *country=Country\_Default*)[¶](#wx.DateTime.GetEndDST "Permalink to this definition")
Returns the end of `DST` for the given country in the given year (current one by default).



Parameters
* **year** (*int*) –
* **country** ([*Country*](wx.DateTime.Country.enumeration.html "Country")) –



Return type
 [wx.DateTime](#wx-datetime)





See also


[`GetBeginDST`](#wx.DateTime.GetBeginDST "wx.DateTime.GetBeginDST")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetEnglishMonthName(month, flags=Name_Full) -> str:
        """ 

*static* `GetEnglishMonthName`(*month*, *flags=Name\_Full*)[¶](#wx.DateTime.GetEnglishMonthName "Permalink to this definition")
Return the standard English name of the given month.


This function always returns “January” or “Jan” for January, use [`GetMonthName`](#wx.DateTime.GetMonthName "wx.DateTime.GetMonthName") to retrieve the name of the month in the users current locale.



Parameters
* **month** (*DateTime.Month*) – One of `wx.DateTime.Jan` , …, `wx.DateTime.Dec` values.
* **flags** ([*NameFlags*](wx.DateTime.NameFlags.enumeration.html "NameFlags")) – Either Name\_Full (default) or Name\_Abbr.



Return type
`string`





New in version 2.9.0.




See also


[`GetEnglishWeekDayName`](#wx.DateTime.GetEnglishWeekDayName "wx.DateTime.GetEnglishWeekDayName")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetEnglishWeekDayName(weekday, flags=Name_Full) -> str:
        """ 

*static* `GetEnglishWeekDayName`(*weekday*, *flags=Name\_Full*)[¶](#wx.DateTime.GetEnglishWeekDayName "Permalink to this definition")
Return the standard English name of the given week day.


This function always returns “Monday” or “Mon” for Monday, use [`GetWeekDayName`](#wx.DateTime.GetWeekDayName "wx.DateTime.GetWeekDayName") to retrieve the name of the month in the users current locale.



Parameters
* **weekday** (*DateTime.WeekDay*) – One of `wx.DateTime.Sun` , …, `wx.DateTime.Sat` values.
* **flags** ([*NameFlags*](wx.DateTime.NameFlags.enumeration.html "NameFlags")) – Either Name\_Full (default) or Name\_Abbr.



Return type
`string`





New in version 2.9.0.




See also


[`GetEnglishMonthName`](#wx.DateTime.GetEnglishMonthName "wx.DateTime.GetEnglishMonthName")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetFirstWeekDay(firstDay: WeekDay) -> bool:
        """ 

*static* `GetFirstWeekDay`(*firstDay*)[¶](#wx.DateTime.GetFirstWeekDay "Permalink to this definition")
Acquires the first weekday of a week based on locale and/or OS settings.


If the information was not available, returns `Sun` .



Parameters
**firstDay** ([*WeekDay*](wx.DateTime.WeekDay.enumeration.html "WeekDay")) – The address of a WeekDay variable to which the first weekday will be assigned to.



Return type
*bool*



Returns
If the first day could not be determined, returns `False`, and *firstDay* is set to a fallback value.





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetHour(self, tz: 'DateTime.TimeZone'=Local) -> 'intshort':
        """ 

`GetHour`(*self*, *tz=Local*)[¶](#wx.DateTime.GetHour "Permalink to this definition")
Returns the hour in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*intshort*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetJDN(self) -> float:
        """ 

`GetJDN`(*self*)[¶](#wx.DateTime.GetJDN "Permalink to this definition")
Synonym for [`GetJulianDayNumber`](#wx.DateTime.GetJulianDayNumber "wx.DateTime.GetJulianDayNumber") .



Return type
*float*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetJulianDayNumber(self) -> float:
        """ 

`GetJulianDayNumber`(*self*)[¶](#wx.DateTime.GetJulianDayNumber "Permalink to this definition")
Returns the `JDN` corresponding to this date.


Beware of rounding errors!



Return type
*float*





See also


[`GetModifiedJulianDayNumber`](#wx.DateTime.GetModifiedJulianDayNumber "wx.DateTime.GetModifiedJulianDayNumber")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetLastMonthDay(self, month=Inv_Month, year=Inv_Year) -> 'DateTime':
        """ 

`GetLastMonthDay`(*self*, *month=Inv\_Month*, *year=Inv\_Year*)[¶](#wx.DateTime.GetLastMonthDay "Permalink to this definition")
Returns the copy of this object to which [`SetToLastMonthDay`](#wx.DateTime.SetToLastMonthDay "wx.DateTime.SetToLastMonthDay") was applied.



Parameters
* **month** (*DateTime.Month*) –
* **year** (*int*) –



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetLastWeekDay(self, weekday, month=Inv_Month, year=Inv_Year) -> 'DateTime':
        """ 

`GetLastWeekDay`(*self*, *weekday*, *month=Inv\_Month*, *year=Inv\_Year*)[¶](#wx.DateTime.GetLastWeekDay "Permalink to this definition")
Returns the copy of this object to which [`SetToLastWeekDay`](#wx.DateTime.SetToLastWeekDay "wx.DateTime.SetToLastWeekDay") was applied.



Parameters
* **weekday** (*DateTime.WeekDay*) –
* **month** (*DateTime.Month*) –
* **year** (*int*) –



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetMJD(self) -> float:
        """ 

`GetMJD`(*self*)[¶](#wx.DateTime.GetMJD "Permalink to this definition")
Synonym for [`GetModifiedJulianDayNumber`](#wx.DateTime.GetModifiedJulianDayNumber "wx.DateTime.GetModifiedJulianDayNumber") .



Return type
*float*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetMillisecond(self, tz: 'DateTime.TimeZone'=Local) -> 'intshort':
        """ 

`GetMillisecond`(*self*, *tz=Local*)[¶](#wx.DateTime.GetMillisecond "Permalink to this definition")
Returns the milliseconds in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*intshort*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetMinute(self, tz: 'DateTime.TimeZone'=Local) -> 'intshort':
        """ 

`GetMinute`(*self*, *tz=Local*)[¶](#wx.DateTime.GetMinute "Permalink to this definition")
Returns the minute in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*intshort*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetModifiedJulianDayNumber(self) -> float:
        """ 

`GetModifiedJulianDayNumber`(*self*)[¶](#wx.DateTime.GetModifiedJulianDayNumber "Permalink to this definition")
Returns the *“Modified Julian Day Number”* (`MJD`) which is, by definition, is equal to `JDN` - 2400000.5.


The MJDs are simpler to work with as the integral MJDs correspond to midnights of the dates in the Gregorian calendar and not the noons like `JDN`. The `MJD` 0 represents Nov 17, 1858.



Return type
*float*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetMonth(self, tz: 'DateTime.TimeZone'=Local) -> 'Month':
        """ 

`GetMonth`(*self*, *tz=Local*)[¶](#wx.DateTime.GetMonth "Permalink to this definition")
Returns the month in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
 [wx.DateTime.Month](wx.DateTime.Month.enumeration.html#wx-datetime-month)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetMonthName(month, flags=Name_Full) -> str:
        """ 

*static* `GetMonthName`(*month*, *flags=Name\_Full*)[¶](#wx.DateTime.GetMonthName "Permalink to this definition")
Gets the full (default) or abbreviated name of the given month.


This function returns the name in the current locale, use [`GetEnglishMonthName`](#wx.DateTime.GetEnglishMonthName "wx.DateTime.GetEnglishMonthName") to get the untranslated name if necessary.



Parameters
* **month** (*DateTime.Month*) – One of `wx.DateTime.Jan` , …, `wx.DateTime.Dec` values.
* **flags** ([*NameFlags*](wx.DateTime.NameFlags.enumeration.html "NameFlags")) – Either Name\_Full (default) or Name\_Abbr.



Return type
`string`





See also


[`GetWeekDayName`](#wx.DateTime.GetWeekDayName "wx.DateTime.GetWeekDayName")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetNextWeekDay(self, weekday: DateTime.WeekDay) -> 'DateTime':
        """ 

`GetNextWeekDay`(*self*, *weekday*)[¶](#wx.DateTime.GetNextWeekDay "Permalink to this definition")
Returns the copy of this object to which [`SetToNextWeekDay`](#wx.DateTime.SetToNextWeekDay "wx.DateTime.SetToNextWeekDay") was applied.



Parameters
**weekday** (*DateTime.WeekDay*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetNumberOfDays(month, year=Inv_Year, cal=Gregorian) -> 'intshort':
        """ 

*static* `GetNumberOfDays`(*month*, *year=Inv\_Year*, *cal=Gregorian*)[¶](#wx.DateTime.GetNumberOfDays "Permalink to this definition")
Returns the number of days in the given month of the given year.


The only supported value for *cal* currently is `Gregorian` .



Parameters
* **month** (*DateTime.Month*) –
* **year** (*int*) –
* **cal** ([*Calendar*](wx.DateTime.Calendar.enumeration.html "Calendar")) –



Return type
*intshort*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetPrevWeekDay(self, weekday: DateTime.WeekDay) -> 'DateTime':
        """ 

`GetPrevWeekDay`(*self*, *weekday*)[¶](#wx.DateTime.GetPrevWeekDay "Permalink to this definition")
Returns the copy of this object to which [`SetToPrevWeekDay`](#wx.DateTime.SetToPrevWeekDay "wx.DateTime.SetToPrevWeekDay") was applied.



Parameters
**weekday** (*DateTime.WeekDay*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetRataDie(self) -> float:
        """ 

`GetRataDie`(*self*)[¶](#wx.DateTime.GetRataDie "Permalink to this definition")
Return the *Rata* Die number of this date.


By definition, the Rata Die number is a date specified as the number of days relative to a base date of December 31 of the year 0. Thus January 1 of the year 1 is Rata Die day 1.



Return type
*float*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetSecond(self, tz: 'DateTime.TimeZone'=Local) -> 'intshort':
        """ 

`GetSecond`(*self*, *tz=Local*)[¶](#wx.DateTime.GetSecond "Permalink to this definition")
Returns the seconds in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*intshort*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetTicks(self) -> int:
        """ 

`GetTicks`(*self*)[¶](#wx.DateTime.GetTicks "Permalink to this definition")
Returns the number of seconds since Jan 1, 1970 `UTC`.


This function is provided solely for interoperability with the standard C library and other libraries using `time_t` values. If you just need to get the value represented by this object as a number, use [`GetValue`](#wx.DateTime.GetValue "wx.DateTime.GetValue") instead, which doesn’t lose precision and covers the entire supported range of dates, unlike this one which is limited to the range of positive 32 bit values, i.e. from Jan 1, 1970 to around Jan 19, 2038 and returns `-1` for the dates outside of it.


Additionally, this method must be called on an initialized date object and an assertion failure occurs if it is called on an object for which [`IsValid`](#wx.DateTime.IsValid "wx.DateTime.IsValid") is `False`.



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetTimeNow() -> int:
        """ 

*static* `GetTimeNow`()[¶](#wx.DateTime.GetTimeNow "Permalink to this definition")
Returns the current time.



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetTm(self, tz: 'DateTime.TimeZone'=Local) -> 'Tm':
        """ 

`GetTm`(*self*, *tz=Local*)[¶](#wx.DateTime.GetTm "Permalink to this definition")
Returns broken down representation of the date and time.



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
 [wx.DateTime.Tm](wx.DateTime.Tm.html#wx-datetime-tm)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.DateTime.GetValue "Permalink to this definition")
Returns the number of milliseconds since Jan 1, 1970 `UTC`.


Directly returns the internal representation of  [wx.DateTime](#wx-datetime) object as the number of milliseconds (positive or negative) since the Unix/C epoch.



Return type
*long*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetWeekBasedYear(self, tz: 'DateTime.TimeZone') -> int:
        """ 

`GetWeekBasedYear`(*self*, *tz*)[¶](#wx.DateTime.GetWeekBasedYear "Permalink to this definition")
Returns the year to which the week containing this date belongs.


The value returned by this function is the same as the year, except, possibly, for a few days at the very beginning and very end of the year if they belong to a week which is mostly (i.e. at least 4 days) is in another year in which case that other (previous or next) year is returned.


For example, January 1 in 2015 belongs to the first year of 2015, hence [`GetWeekOfYear`](#wx.DateTime.GetWeekOfYear "wx.DateTime.GetWeekOfYear") for it returns 1 and this function returns 2015. However January 1 in 2016 belongs to the last week of 2015 according to `ISO` 8601 standard rules and so [`GetWeekOfYear`](#wx.DateTime.GetWeekOfYear "wx.DateTime.GetWeekOfYear") returns 53 and this function returns 2015, although [`GetYear`](#wx.DateTime.GetYear "wx.DateTime.GetYear") returns 2016.



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetWeekDay(self, *args, **kw) -> 'WeekDay':
        """ 

`GetWeekDay`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DateTime.GetWeekDay "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetWeekDay** *(self, tz=Local)*


Returns the week day in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
 [wx.DateTime.WeekDay](wx.DateTime.WeekDay.enumeration.html#wx-datetime-weekday)






---

  



**GetWeekDay** *(self, weekday, n=1, month=Inv\_Month, year=Inv\_Year)*


Returns the copy of this object to which [`SetToWeekDay`](#wx.DateTime.SetToWeekDay "wx.DateTime.SetToWeekDay") was applied.



Parameters
* **weekday** (*DateTime.WeekDay*) –
* **n** (*int*) –
* **month** (*DateTime.Month*) –
* **year** (*int*) –



Return type
 [wx.DateTime](#wx-datetime)






---

  





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetWeekDayInSameWeek(self, weekday, flags=Monday_First) -> 'DateTime':
        """ 

`GetWeekDayInSameWeek`(*self*, *weekday*, *flags=Monday\_First*)[¶](#wx.DateTime.GetWeekDayInSameWeek "Permalink to this definition")
Returns the copy of this object to which [`SetToWeekDayInSameWeek`](#wx.DateTime.SetToWeekDayInSameWeek "wx.DateTime.SetToWeekDayInSameWeek") was applied.



Parameters
* **weekday** (*DateTime.WeekDay*) –
* **flags** ([*WeekFlags*](wx.DateTime.WeekFlags.enumeration.html "WeekFlags")) –



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def GetWeekDayName(weekday, flags=Name_Full) -> str:
        """ 

*static* `GetWeekDayName`(*weekday*, *flags=Name\_Full*)[¶](#wx.DateTime.GetWeekDayName "Permalink to this definition")
Gets the full (default) or abbreviated name of the given week day.


This function returns the name in the current locale, use [`GetEnglishWeekDayName`](#wx.DateTime.GetEnglishWeekDayName "wx.DateTime.GetEnglishWeekDayName") to get the untranslated name if necessary.



Parameters
* **weekday** (*DateTime.WeekDay*) – One of `wx.DateTime.Sun` , …, `wx.DateTime.Sat` values.
* **flags** ([*NameFlags*](wx.DateTime.NameFlags.enumeration.html "NameFlags")) – Either Name\_Full (default) or Name\_Abbr.



Return type
`string`





See also


[`GetMonthName`](#wx.DateTime.GetMonthName "wx.DateTime.GetMonthName")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetWeekOfMonth(self, flags=Monday_First, tz=Local) -> 'intshort':
        """ 

`GetWeekOfMonth`(*self*, *flags=Monday\_First*, *tz=Local*)[¶](#wx.DateTime.GetWeekOfMonth "Permalink to this definition")
Returns the ordinal number of the week in the month (in `1-5` range).


As [`GetWeekOfYear`](#wx.DateTime.GetWeekOfYear "wx.DateTime.GetWeekOfYear") , this function supports both conventions for the week start.



Parameters
* **flags** ([*WeekFlags*](wx.DateTime.WeekFlags.enumeration.html "WeekFlags")) –
* **tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) –



Return type
*intshort*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetWeekOfYear(self, flags=Monday_First, tz=Local) -> 'intshort':
        """ 

`GetWeekOfYear`(*self*, *flags=Monday\_First*, *tz=Local*)[¶](#wx.DateTime.GetWeekOfYear "Permalink to this definition")
Returns the number of the week of the year this date is in.


The first week of the year is, according to international standards, the one containing Jan 4 or, equivalently, the first week which has Thursday in this year. Both of these definitions are the same as saying that the first week of the year must contain more than half of its days in this year. Accordingly, the week number will always be in `1-53` range (52 for non-leap years).


The function depends on the week start convention specified by the *flags* argument but its results for `Sunday_First` are not well-defined as the `ISO` definition quoted above applies to the weeks starting on Monday only.



Parameters
* **flags** ([*WeekFlags*](wx.DateTime.WeekFlags.enumeration.html "WeekFlags")) –
* **tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) –



Return type
*intshort*





See also


[`GetWeekBasedYear`](#wx.DateTime.GetWeekBasedYear "wx.DateTime.GetWeekBasedYear")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetYear(self, tz: 'DateTime.TimeZone'=Local) -> int:
        """ 

`GetYear`(*self*, *tz=Local*)[¶](#wx.DateTime.GetYear "Permalink to this definition")
Returns the year in the given timezone (local one by default).



Parameters
**tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def GetYearDay(self, yday: int) -> 'DateTime':
        """ 

`GetYearDay`(*self*, *yday*)[¶](#wx.DateTime.GetYearDay "Permalink to this definition")
Returns the copy of this object to which [`SetToYearDay`](#wx.DateTime.SetToYearDay "wx.DateTime.SetToYearDay") was applied.



Parameters
**yday** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsBetween(self, t1, t2) -> bool:
        """ 

`IsBetween`(*self*, *t1*, *t2*)[¶](#wx.DateTime.IsBetween "Permalink to this definition")
Returns `True` if [`IsStrictlyBetween`](#wx.DateTime.IsStrictlyBetween "wx.DateTime.IsStrictlyBetween") is `True` or if the date is equal to one of the limit values.



Parameters
* **t1** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) –
* **t2** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) –



Return type
*bool*





See also


[`IsStrictlyBetween`](#wx.DateTime.IsStrictlyBetween "wx.DateTime.IsStrictlyBetween")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsDST(self, country: Country=Country_Default) -> int:
        """ 

`IsDST`(*self*, *country=Country\_Default*)[¶](#wx.DateTime.IsDST "Permalink to this definition")
Returns `True` if the `DST` is applied for this date in the given country.



Parameters
**country** ([*Country*](wx.DateTime.Country.enumeration.html "Country")) – 



Return type
*int*





See also


[`GetBeginDST`](#wx.DateTime.GetBeginDST "wx.DateTime.GetBeginDST") , [`GetEndDST`](#wx.DateTime.GetEndDST "wx.DateTime.GetEndDST")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def IsDSTApplicable(year=Inv_Year, country=Country_Default) -> bool:
        """ 

*static* `IsDSTApplicable`(*year=Inv\_Year*, *country=Country\_Default*)[¶](#wx.DateTime.IsDSTApplicable "Permalink to this definition")
Returns `True` if `DST` was used in the given year (the current one by default) in the given country.



Parameters
* **year** (*int*) –
* **country** ([*Country*](wx.DateTime.Country.enumeration.html "Country")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsEarlierThan(self, datetime: 'DateTime') -> bool:
        """ 

`IsEarlierThan`(*self*, *datetime*)[¶](#wx.DateTime.IsEarlierThan "Permalink to this definition")
Returns `True` if this date precedes the given one.



Parameters
**datetime** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsEqualTo(self, datetime: 'DateTime') -> bool:
        """ 

`IsEqualTo`(*self*, *datetime*)[¶](#wx.DateTime.IsEqualTo "Permalink to this definition")
Returns `True` if the two dates are strictly identical.



Parameters
**datetime** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsEqualUpTo(self, dt, ts) -> bool:
        """ 

`IsEqualUpTo`(*self*, *dt*, *ts*)[¶](#wx.DateTime.IsEqualUpTo "Permalink to this definition")
Returns `True` if the date is equal to another one up to the given time interval, i.e. if the absolute difference between the two dates is less than this interval.



Parameters
* **dt** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) –
* **ts** ([*wx.TimeSpan*](wx.TimeSpan.html#wx.TimeSpan "wx.TimeSpan")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsLaterThan(self, datetime: 'DateTime') -> bool:
        """ 

`IsLaterThan`(*self*, *datetime*)[¶](#wx.DateTime.IsLaterThan "Permalink to this definition")
Returns `True` if this date is later than the given one.



Parameters
**datetime** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def IsLeapYear(year=Inv_Year, cal=Gregorian) -> bool:
        """ 

*static* `IsLeapYear`(*year=Inv\_Year*, *cal=Gregorian*)[¶](#wx.DateTime.IsLeapYear "Permalink to this definition")
Returns `True` if the [`year`](#wx.DateTime.year "wx.DateTime.year") is a leap one in the specified calendar.


This functions supports Gregorian and Julian calendars.



Parameters
* **year** (*int*) –
* **cal** ([*Calendar*](wx.DateTime.Calendar.enumeration.html "Calendar")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsSameDate(self, dt: 'DateTime') -> bool:
        """ 

`IsSameDate`(*self*, *dt*)[¶](#wx.DateTime.IsSameDate "Permalink to this definition")
Returns `True` if the date is the same without comparing the time parts.



Parameters
**dt** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsSameTime(self, dt: 'DateTime') -> bool:
        """ 

`IsSameTime`(*self*, *dt*)[¶](#wx.DateTime.IsSameTime "Permalink to this definition")
Returns `True` if the time is the same (although dates may differ).



Parameters
**dt** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsStrictlyBetween(self, t1, t2) -> bool:
        """ 

`IsStrictlyBetween`(*self*, *t1*, *t2*)[¶](#wx.DateTime.IsStrictlyBetween "Permalink to this definition")
Returns `True` if this date lies strictly between the two given dates.



Parameters
* **t1** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) –
* **t2** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) –



Return type
*bool*





See also


[`IsBetween`](#wx.DateTime.IsBetween "wx.DateTime.IsBetween")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsValid(self) -> bool:
        """ 

`IsValid`(*self*)[¶](#wx.DateTime.IsValid "Permalink to this definition")
Returns `True` if the object represents a valid time moment.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def IsWestEuropeanCountry(country: Country=Country_Default) -> bool:
        """ 

*static* `IsWestEuropeanCountry`(*country=Country\_Default*)[¶](#wx.DateTime.IsWestEuropeanCountry "Permalink to this definition")
This function returns `True` if the specified (or default) country is one of Western European ones.


It is used internally by  [wx.DateTime](#wx-datetime) to determine the `DST` convention and date and time formatting rules.



Parameters
**country** ([*Country*](wx.DateTime.Country.enumeration.html "Country")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def IsWorkDay(self, country: Country=Country_Default) -> bool:
        """ 

`IsWorkDay`(*self*, *country=Country\_Default*)[¶](#wx.DateTime.IsWorkDay "Permalink to this definition")
Returns `True` is this day is not a holiday in the given country.



Parameters
**country** ([*Country*](wx.DateTime.Country.enumeration.html "Country")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def MakeFromTimezone(self, tz, noDST=False) -> 'DateTime':
        """ 

`MakeFromTimezone`(*self*, *tz*, *noDST=False*)[¶](#wx.DateTime.MakeFromTimezone "Permalink to this definition")
Same as [`FromTimezone`](#wx.DateTime.FromTimezone "wx.DateTime.FromTimezone") but modifies the object in place.



Parameters
* **tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) –
* **noDST** (*bool*) –



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def MakeTimezone(self, tz, noDST=False) -> 'DateTime':
        """ 

`MakeTimezone`(*self*, *tz*, *noDST=False*)[¶](#wx.DateTime.MakeTimezone "Permalink to this definition")
Modifies the object in place to represent the date in another time zone.


If *noDST* is `True`, no `DST` adjustments will be made.



Parameters
* **tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) –
* **noDST** (*bool*) –



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def MakeUTC(self, noDST: bool=False) -> 'DateTime':
        """ 

`MakeUTC`(*self*, *noDST=False*)[¶](#wx.DateTime.MakeUTC "Permalink to this definition")
This is the same as calling [`MakeTimezone`](#wx.DateTime.MakeTimezone "wx.DateTime.MakeTimezone") with the argument `GMT0` .



Parameters
**noDST** (*bool*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def Now() -> 'DateTime':
        """ 

*static* `Now`()[¶](#wx.DateTime.Now "Permalink to this definition")
Returns the object corresponding to the current time in local time zone.


Example:



```
now = wx.DateTime.Now()
print "Current time in Paris:\t%s\n"%(now.Format("%c", wx.DateTime.CET))

```



Return type
 [wx.DateTime](#wx-datetime)





Note


This function is accurate up to seconds. [`UNow`](#wx.DateTime.UNow "wx.DateTime.UNow") can be used if better precision is required.




See also


[`Today`](#wx.DateTime.Today "wx.DateTime.Today")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ParseDate(self, date: str) -> int:
        """ 

`ParseDate`(*self*, *date*)[¶](#wx.DateTime.ParseDate "Permalink to this definition")
This function is like [`ParseDateTime`](#wx.DateTime.ParseDateTime "wx.DateTime.ParseDateTime") , but it only allows the date to be specified.


It is thus less flexible then [`ParseDateTime`](#wx.DateTime.ParseDateTime "wx.DateTime.ParseDateTime") , but also has less chances to misinterpret the user input.


See [`ParseFormat`](#wx.DateTime.ParseFormat "wx.DateTime.ParseFormat") for the description of function parameters and return value.



Parameters
**date** (*string*) – 



Return type
*int*





See also


[`Format`](#wx.DateTime.Format "wx.DateTime.Format")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ParseDateTime(self, datetime: str) -> int:
        """ 

`ParseDateTime`(*self*, *datetime*)[¶](#wx.DateTime.ParseDateTime "Permalink to this definition")
Parses the string `datetime` containing the date and time in free format.


This function tries as hard as it can to interpret the given string as date and time. Unlike [`ParseRfc822Date`](#wx.DateTime.ParseRfc822Date "wx.DateTime.ParseRfc822Date") , it will accept anything that may be accepted and will only reject strings which cannot be parsed in any way at all. Notice that the function will fail if either date or time part is present but not both, use [`ParseDate`](#wx.DateTime.ParseDate "wx.DateTime.ParseDate") or [`ParseTime`](#wx.DateTime.ParseTime "wx.DateTime.ParseTime") to parse strings containing just the date or time component.


See [`ParseFormat`](#wx.DateTime.ParseFormat "wx.DateTime.ParseFormat") for the description of function parameters and return value.



Parameters
**datetime** (*string*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ParseFormat(self, *args, **kw) -> int:
        """ 

`ParseFormat`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DateTime.ParseFormat "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ParseFormat** *(self, date, format, dateDef)*


This function parses the string *date* according to the given *format*.


The system `strptime(3)` function is used whenever available, but even if it is not, this function is still implemented, although support for locale-dependent format specifiers such as `"%c"` , `"%x"` or `"%X"` may not be perfect and `GNU` extensions such as `"%z"` and `"%Z"` are not implemented. This function does handle the month and weekday names in the current locale on all platforms, however.


Please see the description of the `ANSI` C function `strftime(3)` for the syntax of the format string.


The *dateDef* parameter is used to fill in the fields which could not be determined from the format string. For example, if the format is `"%d"` (the day of the month), the month and the year are taken from *dateDef*. If it is not specified, [`Today`](#wx.DateTime.Today "wx.DateTime.Today") is used as the default date.


Example of using this function:



```
dt = wx.DateTime() # Uninitialized datetime
bDate = "25/12/2012"

if dt.ParseFormat(bDate, "%d-%m-%Y") == -1:
    # This datetime format is wrong on purpose
    print "Wrong format"

elif dt.ParseFormat(bDate, "%d/%m/%Y") >= 0:
    # This is correct
    print "Format OK!", dt

```



Parameters
* **date** (*string*) – The string to be parsed.
* **format** (*string*) – strptime()-like format string.
* **dateDef** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – Used to fill in the date components not specified in the *date* string.



Return type
*int*



Returns
-1 if the parse failed, the number of characters parsed otherwise.





See also


[`Format`](#wx.DateTime.Format "wx.DateTime.Format")





---

  



**ParseFormat** *(self, date, format)*


This version of the [`ParseFormat`](#wx.DateTime.ParseFormat "wx.DateTime.ParseFormat") method works the same, but with missing values filled in from [`Today`](#wx.DateTime.Today "wx.DateTime.Today").



Parameters
* **date** (*string*) –
* **format** (*string*) –



Return type
*int*






---

  



**ParseFormat** *(self, date)*


This version uses “%c” as the format code, which is the same default used by [`Format`](#wx.DateTime.Format "wx.DateTime.Format").



Parameters
**date** (*string*) – 



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ParseISOCombined(self, date, sep='T') -> bool:
        """ 

`ParseISOCombined`(*self*, *date*, *sep='T'*)[¶](#wx.DateTime.ParseISOCombined "Permalink to this definition")
This function parses the string containing the date and time in `ISO` 8601 combined format `"YYYY-MM-DDTHH:MM:SS"` .


The separator between the date and time parts must be equal to *sep* for the function to succeed.



Parameters
* **date** (*string*) –
* **sep** (*int*) –



Return type
*bool*



Returns
`True` if the entire string was parsed successfully, `False` otherwise.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ParseISODate(self, date: str) -> bool:
        """ 

`ParseISODate`(*self*, *date*)[¶](#wx.DateTime.ParseISODate "Permalink to this definition")
This function parses the date in `ISO` 8601 format `"YYYY-MM-DD"` .



Parameters
**date** (*string*) – 



Return type
*bool*



Returns
`True` if the entire string was parsed successfully, `False` otherwise.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ParseISOTime(self, date: str) -> bool:
        """ 

`ParseISOTime`(*self*, *date*)[¶](#wx.DateTime.ParseISOTime "Permalink to this definition")
This function parses the time in `ISO` 8601 format `"HH:MM:SS"` .



Parameters
**date** (*string*) – 



Return type
*bool*



Returns
`True` if the entire string was parsed successfully, `False` otherwise.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ParseRfc822Date(self, date: str) -> int:
        """ 

`ParseRfc822Date`(*self*, *date*)[¶](#wx.DateTime.ParseRfc822Date "Permalink to this definition")
Parses the string *date* looking for a date formatted according to the `RFC` 822 in it.


The exact description of this format may, of course, be found in the `RFC` (section 5), but, briefly, this is the format used in the headers of Internet email messages and one of the most common strings expressing date in this format may be something like `"Sat, 18 Dec 1999 00:48:30 +0100"` .


Returns `None` if the conversion failed, otherwise return the pointer to the character immediately following the part of the string which could be parsed. If the entire string contains only the date in `RFC` 822 format, the returned pointer will be pointing to a `NUL` character.


This function is intentionally strict, it will return an error for any string which is not `RFC` 822 compliant. If you need to parse date formatted in more free ways, you should use [`ParseDateTime`](#wx.DateTime.ParseDateTime "wx.DateTime.ParseDateTime") or [`ParseDate`](#wx.DateTime.ParseDate "wx.DateTime.ParseDate") instead.


See [`ParseFormat`](#wx.DateTime.ParseFormat "wx.DateTime.ParseFormat") for the description of function parameters and return value.



Parameters
**date** (*string*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ParseTime(self, time: str) -> int:
        """ 

`ParseTime`(*self*, *time*)[¶](#wx.DateTime.ParseTime "Permalink to this definition")
This functions is like [`ParseDateTime`](#wx.DateTime.ParseDateTime "wx.DateTime.ParseDateTime") , but only allows the time to be specified in the input string.


See [`ParseFormat`](#wx.DateTime.ParseFormat "wx.DateTime.ParseFormat") for the description of function parameters and return value.



Parameters
**time** (*string*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ResetTime(self) -> 'DateTime':
        """ 

`ResetTime`(*self*)[¶](#wx.DateTime.ResetTime "Permalink to this definition")
Reset time to midnight (00:00:00) without changing the date.



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def Set(self, day, month, year=Inv_Year, hour=0, minute=0, second=0, millisec=0) -> 'DateTime':
        """ 

`Set`(*self*, *day*, *month*, *year=Inv\_Year*, *hour=0*, *minute=0*, *second=0*, *millisec=0*)[¶](#wx.DateTime.Set "Permalink to this definition")
Sets the date and time from the parameters.


If the function parameters are invalid, e.g. [`month`](#wx.DateTime.month "wx.DateTime.month") is February and [`day`](#wx.DateTime.day "wx.DateTime.day") is 30, the object is left in an invalid state, i.e. [`IsValid`](#wx.DateTime.IsValid "wx.DateTime.IsValid") method will return `False`.


If the specified time moment is invalid due to `DST`, i.e. it falls into the “missing” hour on the date on which the `DST` starts, a valid  [wx.DateTime](#wx-datetime) object is still constructed but its hour component is moved forward to ensure that it corresponds to a valid moment in the local time zone. For example, in the `CET` time zone the `DST` started on 2013-03-31T02:00:00 in 2013 and so setting the object to 2:30 at this date actually sets the hour to 3, and not 2.



Parameters
* **day** (*int*) –
* **month** (*DateTime.Month*) –
* **year** (*int*) –
* **hour** (*int*) –
* **minute** (*int*) –
* **second** (*int*) –
* **millisec** (*int*) –



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetHMS(self, hour, minute=0, second=0, millisec=0) -> 'DateTime':
        """ 

`SetHMS`(*self*, *hour*, *minute=0*, *second=0*, *millisec=0*)[¶](#wx.DateTime.SetHMS "Permalink to this definition")
Sets the date to be equal to [`Today`](#wx.DateTime.Today "wx.DateTime.Today") and the time from supplied parameters.


See the full [`Set`](#wx.DateTime.Set "wx.DateTime.Set") overload for the remarks about `DST`.



Parameters
* **hour** (*int*) –
* **minute** (*int*) –
* **second** (*int*) –
* **millisec** (*int*) –



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetJDN(self, jdn: float) -> 'DateTime':
        """ 

`SetJDN`(*self*, *jdn*)[¶](#wx.DateTime.SetJDN "Permalink to this definition")
Sets the date from the so-called Julian Day Number.


By definition, the Julian Day Number, usually abbreviated as `JDN`, of a particular instant is the fractional number of days since 12 hours Universal Coordinated Time (Greenwich mean noon) on January 1 of the year -4712 in the Julian proleptic calendar.



Parameters
**jdn** (*float*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetTimeT(self, timet: int) -> 'DateTime':
        """ 

`SetTimeT`(*self*, *timet*)[¶](#wx.DateTime.SetTimeT "Permalink to this definition")
Constructs the object from *timet* value holding the number of seconds since Jan 1, 1970 `UTC`.


If *timet* is invalid, i.e.:



```
-1

```


 [wx.DateTime](#wx-datetime) becomes invalid too, i.e. its [`IsValid`](#wx.DateTime.IsValid "wx.DateTime.IsValid") will return `False`.



Parameters
**timet** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetTm(self, tm: 'DateTime.Tm') -> 'DateTime':
        """ 

`SetTm`(*self*, *tm*)[¶](#wx.DateTime.SetTm "Permalink to this definition")
Sets the date and time from the broken down representation in the ` [`wx.DateTime.Tm`](wx.DateTime.Tm.html#wx.DateTime.Tm "wx.DateTime.Tm") ` structure.



Parameters
**tm** ([*wx.DateTime.Tm*](wx.DateTime.Tm.html#wx.DateTime.Tm "wx.DateTime.Tm")) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def SetCountry(country: Country) -> None:
        """ 

*static* `SetCountry`(*country*)[¶](#wx.DateTime.SetCountry "Permalink to this definition")
Sets the country to use by default.


This setting influences the `DST` calculations, date formatting and other things.



Parameters
**country** ([*Country*](wx.DateTime.Country.enumeration.html "Country")) – 





See also


[`GetCountry`](#wx.DateTime.GetCountry "wx.DateTime.GetCountry")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetDay(self, day: int) -> 'DateTime':
        """ 

`SetDay`(*self*, *day*)[¶](#wx.DateTime.SetDay "Permalink to this definition")
Sets the day without changing other date components.



Parameters
**day** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetFromDOS(self, ddt: int) -> 'DateTime':
        """ 

`SetFromDOS`(*self*, *ddt*)[¶](#wx.DateTime.SetFromDOS "Permalink to this definition")
Sets the date from the date and time in `DOS` format.



Parameters
**ddt** (*long*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetHour(self, hour: int) -> 'DateTime':
        """ 

`SetHour`(*self*, *hour*)[¶](#wx.DateTime.SetHour "Permalink to this definition")
Sets the hour without changing other date components.



Parameters
**hour** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetMillisecond(self, millisecond: int) -> 'DateTime':
        """ 

`SetMillisecond`(*self*, *millisecond*)[¶](#wx.DateTime.SetMillisecond "Permalink to this definition")
Sets the millisecond without changing other date components.



Parameters
**millisecond** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetMinute(self, minute: int) -> 'DateTime':
        """ 

`SetMinute`(*self*, *minute*)[¶](#wx.DateTime.SetMinute "Permalink to this definition")
Sets the minute without changing other date components.



Parameters
**minute** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetMonth(self, month: DateTime.Month) -> 'DateTime':
        """ 

`SetMonth`(*self*, *month*)[¶](#wx.DateTime.SetMonth "Permalink to this definition")
Sets the month without changing other date components.



Parameters
**month** (*DateTime.Month*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetSecond(self, second: int) -> 'DateTime':
        """ 

`SetSecond`(*self*, *second*)[¶](#wx.DateTime.SetSecond "Permalink to this definition")
Sets the second without changing other date components.



Parameters
**second** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetToCurrent(self) -> 'DateTime':
        """ 

`SetToCurrent`(*self*)[¶](#wx.DateTime.SetToCurrent "Permalink to this definition")
Sets the date and time of to the current values.


Same as assigning the result of [`wx.Now`](wx.functions.html#wx.Now "wx.Now") to this object.



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetToLastMonthDay(self, month=Inv_Month, year=Inv_Year) -> 'DateTime':
        """ 

`SetToLastMonthDay`(*self*, *month=Inv\_Month*, *year=Inv\_Year*)[¶](#wx.DateTime.SetToLastMonthDay "Permalink to this definition")
Sets the date to the last day in the specified month (the current one by default).



Parameters
* **month** (*DateTime.Month*) –
* **year** (*int*) –



Return type
 [wx.DateTime](#wx-datetime)



Returns
The reference to the modified object itself.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetToLastWeekDay(self, weekday, month=Inv_Month, year=Inv_Year) -> bool:
        """ 

`SetToLastWeekDay`(*self*, *weekday*, *month=Inv\_Month*, *year=Inv\_Year*)[¶](#wx.DateTime.SetToLastWeekDay "Permalink to this definition")
The effect of calling this function is the same as of calling `SetToWeekDay` (-1, weekday, month, year).


The date will be set to the last *weekday* in the given month and year (the current ones by default). Always returns `True`.



Parameters
* **weekday** (*DateTime.WeekDay*) –
* **month** (*DateTime.Month*) –
* **year** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetToNextWeekDay(self, weekday: DateTime.WeekDay) -> 'DateTime':
        """ 

`SetToNextWeekDay`(*self*, *weekday*)[¶](#wx.DateTime.SetToNextWeekDay "Permalink to this definition")
Sets the date so that it will be the first *weekday* following the current date.



Parameters
**weekday** (*DateTime.WeekDay*) – 



Return type
 [wx.DateTime](#wx-datetime)



Returns
The reference to the modified object itself.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetToPrevWeekDay(self, weekday: DateTime.WeekDay) -> 'DateTime':
        """ 

`SetToPrevWeekDay`(*self*, *weekday*)[¶](#wx.DateTime.SetToPrevWeekDay "Permalink to this definition")
Sets the date so that it will be the last *weekday* before the current date.



Parameters
**weekday** (*DateTime.WeekDay*) – 



Return type
 [wx.DateTime](#wx-datetime)



Returns
The reference to the modified object itself.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetToWeekDay(self, weekday, n=1, month=Inv_Month, year=Inv_Year) -> bool:
        """ 

`SetToWeekDay`(*self*, *weekday*, *n=1*, *month=Inv\_Month*, *year=Inv\_Year*)[¶](#wx.DateTime.SetToWeekDay "Permalink to this definition")
Sets the date to the *n-th* *weekday* in the given month of the given year (the current month and year are used by default).


The parameter *n* may be either positive (counting from the beginning of the month) or negative (counting from the end of it).


For example, *SetToWeekDay(wxDateTime.Wed,* 2) will set the date to the second Wednesday in the current month and SetToWeekDay( `wx.DateTime.Sun` , -1) will set the date to the last Sunday in the current month.


Note that leaving the month or year parameters as their default values will result in the current month or year being substituted, overwriting any previous values in the  [wx.DateTime](#wx-datetime) object.



Parameters
* **weekday** (*DateTime.WeekDay*) –
* **n** (*int*) –
* **month** (*DateTime.Month*) –
* **year** (*int*) –



Return type
*bool*



Returns
`True` if the date was modified successfully, `False` otherwise meaning that the specified date doesn’t exist.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetToWeekDayInSameWeek(self, weekday, flags=Monday_First) -> 'DateTime':
        """ 

`SetToWeekDayInSameWeek`(*self*, *weekday*, *flags=Monday\_First*)[¶](#wx.DateTime.SetToWeekDayInSameWeek "Permalink to this definition")
Adjusts the date so that it will still lie in the same week as before, but its week day will be the given one.



Parameters
* **weekday** (*DateTime.WeekDay*) –
* **flags** ([*WeekFlags*](wx.DateTime.WeekFlags.enumeration.html "WeekFlags")) –



Return type
 [wx.DateTime](#wx-datetime)



Returns
The reference to the modified object itself.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def SetToWeekOfYear(year, numWeek, weekday=Mon) -> 'DateTime':
        """ 

*static* `SetToWeekOfYear`(*year*, *numWeek*, *weekday=Mon*)[¶](#wx.DateTime.SetToWeekOfYear "Permalink to this definition")
Set the date to the given *weekday* in the week number *numWeek* of the given [`year`](#wx.DateTime.year "wx.DateTime.year") .


The number should be in range `1-53`.


Note that the returned date may be in a different year than the one passed to this function because both the week 1 and week 52 or 53 (for leap years) contain days from different years. See [`GetWeekOfYear`](#wx.DateTime.GetWeekOfYear "wx.DateTime.GetWeekOfYear") for the explanation of how the year weeks are counted.



Parameters
* **year** (*int*) –
* **numWeek** (*int*) –
* **weekday** (*DateTime.WeekDay*) –



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetToYearDay(self, yday: int) -> 'DateTime':
        """ 

`SetToYearDay`(*self*, *yday*)[¶](#wx.DateTime.SetToYearDay "Permalink to this definition")
Sets the date to the day number *yday* in the same year (i.e. unlike the other functions, this one does not use the current year).


The day number should be in the range `1-366` for the leap years and `1-365` for the other ones.



Parameters
**yday** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)



Returns
The reference to the modified object itself.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def SetYear(self, year: int) -> 'DateTime':
        """ 

`SetYear`(*self*, *year*)[¶](#wx.DateTime.SetYear "Permalink to this definition")
Sets the year without changing other date components.



Parameters
**year** (*int*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def Subtract(self, *args, **kw) -> 'DateTime':
        """ 

`Subtract`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DateTime.Subtract "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Subtract** *(self, diff)*


Subtracts the given time span from this object.



Parameters
**diff** ([*wx.TimeSpan*](wx.TimeSpan.html#wx.TimeSpan "wx.TimeSpan")) – 



Return type
 [wx.DateTime](#wx-datetime)






---

  



**Subtract** *(self, diff)*


Subtracts the given date span from this object.



Parameters
**diff** ([*wx.DateSpan*](wx.DateSpan.html#wx.DateSpan "wx.DateSpan")) – 



Return type
 [wx.DateTime](#wx-datetime)






---

  



**Subtract** *(self, dt)*


Subtracts another date from this one and returns the difference between them as a  [wx.TimeSpan](wx.TimeSpan.html#wx-timespan).



Parameters
**dt** ([*wx.DateTime*](#wx.DateTime "wx.DateTime")) – 



Return type
 [wx.TimeSpan](wx.TimeSpan.html#wx-timespan)






---

  





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ToTimezone(self, tz, noDST=False) -> 'DateTime':
        """ 

`ToTimezone`(*self*, *tz*, *noDST=False*)[¶](#wx.DateTime.ToTimezone "Permalink to this definition")
Transform the date to the given time zone.


If *noDST* is `True`, no `DST` adjustments will be made.


If *tz* parameter is `wx.DateTime.Local` , no adjustment is performed.



Parameters
* **tz** ([*wx.DateTime.TimeZone*](wx.DateTime.TimeZone.html#wx.DateTime.TimeZone "wx.DateTime.TimeZone")) –
* **noDST** (*bool*) –



Return type
 [wx.DateTime](#wx-datetime)



Returns
The date adjusted by the different between the local and the given time zones.






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def ToUTC(self, noDST: bool=False) -> 'DateTime':
        """ 

`ToUTC`(*self*, *noDST=False*)[¶](#wx.DateTime.ToUTC "Permalink to this definition")
This is the same as calling [`ToTimezone`](#wx.DateTime.ToTimezone "wx.DateTime.ToTimezone") with the argument `GMT0` .



Parameters
**noDST** (*bool*) – 



Return type
 [wx.DateTime](#wx-datetime)






            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def Today() -> 'DateTime':
        """ 

*static* `Today`()[¶](#wx.DateTime.Today "Permalink to this definition")
Returns the object corresponding to the midnight of the current day (i.e. the same as [`wx.Now`](wx.functions.html#wx.Now "wx.Now") , but the time part is set to 0).



Return type
 [wx.DateTime](#wx-datetime)





See also


[`wx.Now`](wx.functions.html#wx.Now "wx.Now")





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    @staticmethod
    def UNow() -> 'DateTime':
        """ 

*static* `UNow`()[¶](#wx.DateTime.UNow "Permalink to this definition")
Returns the object corresponding to the current time including the milliseconds.


Like [`wx.Now`](wx.functions.html#wx.Now "wx.Now") , this method creates the  [wx.DateTime](#wx-datetime) object corresponding to the current moment in local time.



Return type
 [wx.DateTime](#wx-datetime)





See also


[`wx.Now`](wx.functions.html#wx.Now "wx.Now") , `GetUTCTimeMillis`





            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.DateTime.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.DateTime.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DateTime.html
        """

    DayOfYear: 'intshort'  # `DayOfYear`[¶](#wx.DateTime.DayOfYear "Permalink to this definition")See [`GetDayOfYear`](#wx.DateTime.GetDayOfYear "wx.DateTime.GetDayOfYear")
    JDN: float  # `JDN`[¶](#wx.DateTime.JDN "Permalink to this definition")See [`GetJDN`](#wx.DateTime.GetJDN "wx.DateTime.GetJDN") and [`SetJDN`](#wx.DateTime.SetJDN "wx.DateTime.SetJDN")
    JulianDayNumber: float  # `JulianDayNumber`[¶](#wx.DateTime.JulianDayNumber "Permalink to this definition")See [`GetJulianDayNumber`](#wx.DateTime.GetJulianDayNumber "wx.DateTime.GetJulianDayNumber")
    LastMonthDay: 'DateTime'  # `LastMonthDay`[¶](#wx.DateTime.LastMonthDay "Permalink to this definition")See [`GetLastMonthDay`](#wx.DateTime.GetLastMonthDay "wx.DateTime.GetLastMonthDay")
    MJD: float  # `MJD`[¶](#wx.DateTime.MJD "Permalink to this definition")See [`GetMJD`](#wx.DateTime.GetMJD "wx.DateTime.GetMJD")
    ModifiedJulianDayNumber: float  # `ModifiedJulianDayNumber`[¶](#wx.DateTime.ModifiedJulianDayNumber "Permalink to this definition")See [`GetModifiedJulianDayNumber`](#wx.DateTime.GetModifiedJulianDayNumber "wx.DateTime.GetModifiedJulianDayNumber")
    RataDie: float  # `RataDie`[¶](#wx.DateTime.RataDie "Permalink to this definition")See [`GetRataDie`](#wx.DateTime.GetRataDie "wx.DateTime.GetRataDie")
    Ticks: int  # `Ticks`[¶](#wx.DateTime.Ticks "Permalink to this definition")See [`GetTicks`](#wx.DateTime.GetTicks "wx.DateTime.GetTicks")
    WeekOfMonth: 'intshort'  # `WeekOfMonth`[¶](#wx.DateTime.WeekOfMonth "Permalink to this definition")See [`GetWeekOfMonth`](#wx.DateTime.GetWeekOfMonth "wx.DateTime.GetWeekOfMonth")
    WeekOfYear: 'intshort'  # `WeekOfYear`[¶](#wx.DateTime.WeekOfYear "Permalink to this definition")See [`GetWeekOfYear`](#wx.DateTime.GetWeekOfYear "wx.DateTime.GetWeekOfYear")
    day: Any  # `day`[¶](#wx.DateTime.day "Permalink to this definition")See [`GetDay`](#wx.DateTime.GetDay "wx.DateTime.GetDay") and [`SetDay`](#wx.DateTime.SetDay "wx.DateTime.SetDay")
    hour: Any  # `hour`[¶](#wx.DateTime.hour "Permalink to this definition")See [`GetHour`](#wx.DateTime.GetHour "wx.DateTime.GetHour") and [`SetHour`](#wx.DateTime.SetHour "wx.DateTime.SetHour")
    millisecond: Any  # `millisecond`[¶](#wx.DateTime.millisecond "Permalink to this definition")See [`GetMillisecond`](#wx.DateTime.GetMillisecond "wx.DateTime.GetMillisecond") and [`SetMillisecond`](#wx.DateTime.SetMillisecond "wx.DateTime.SetMillisecond")
    minute: Any  # `minute`[¶](#wx.DateTime.minute "Permalink to this definition")See [`GetMinute`](#wx.DateTime.GetMinute "wx.DateTime.GetMinute") and [`SetMinute`](#wx.DateTime.SetMinute "wx.DateTime.SetMinute")
    month: Any  # `month`[¶](#wx.DateTime.month "Permalink to this definition")See [`GetMonth`](#wx.DateTime.GetMonth "wx.DateTime.GetMonth") and [`SetMonth`](#wx.DateTime.SetMonth "wx.DateTime.SetMonth")
    second: Any  # `second`[¶](#wx.DateTime.second "Permalink to this definition")See [`GetSecond`](#wx.DateTime.GetSecond "wx.DateTime.GetSecond") and [`SetSecond`](#wx.DateTime.SetSecond "wx.DateTime.SetSecond")
    year: Any  # `year`[¶](#wx.DateTime.year "Permalink to this definition")See [`GetYear`](#wx.DateTime.GetYear "wx.DateTime.GetYear") and [`SetYear`](#wx.DateTime.SetYear "wx.DateTime.SetYear")



class DCBrushChanger:
    """ **Possible constructors**:



```
DCBrushChanger(dc, brush)

```


DCBrushChanger is a small helper class for setting a brush on a DC
and unsetting it automatically in the destructor, restoring the
previous one.


  


        Source: https://docs.wxpython.org/wx.DCBrushChanger.html
    """
    def __init__(self, dc, brush) -> None:
        """ 

`__init__`(*self*, *dc*, *brush*)[¶](#wx.DCBrushChanger.__init__ "Permalink to this definition")
Sets *brush* on the given *dc*, storing the old one.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The DC where the brush must be temporary set.
* **brush** ([*wx.Brush*](wx.Brush.html#wx.Brush "wx.Brush")) – The brush to set.






            Source: https://docs.wxpython.org/wx.DCBrushChanger.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.DCBrushChanger.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCBrushChanger.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.DCBrushChanger.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCBrushChanger.html
        """



class DCClipper:
    """ **Possible constructors**:



```
DCClipper(dc, region)

DCClipper(dc, rect)

DCClipper(dc, x, y, w, h)

```


DCClipper is a helper class for setting a clipping region on a DC
during its lifetime.


  


        Source: https://docs.wxpython.org/wx.DCClipper.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DCClipper.__init__ "Permalink to this definition")
Sets the clipping region to the specified region/coordinates.


The clipping region is automatically unset when this object is destroyed.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, dc, region)*



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **region** ([*wx.Region*](wx.Region.html#wx.Region "wx.Region")) –






---

  



**\_\_init\_\_** *(self, dc, rect)*



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –






---

  



**\_\_init\_\_** *(self, dc, x, y, w, h)*



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **x** (*int*) –
* **y** (*int*) –
* **w** (*int*) –
* **h** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.DCClipper.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.DCClipper.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCClipper.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.DCClipper.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCClipper.html
        """



class DCFontChanger:
    """ **Possible constructors**:



```
DCFontChanger(dc)

DCFontChanger(dc, font)

```


DCFontChanger is a small helper class for setting a font on a DC
and unsetting it automatically in the destructor, restoring the
previous one.


  


        Source: https://docs.wxpython.org/wx.DCFontChanger.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DCFontChanger.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, dc)*


Trivial constructor not changing anything.


This constructor is useful if you don’t know beforehand if the font needs to be changed or not. It simply creates the object which won’t do anything in its destructor unless [`Set`](#wx.DCFontChanger.Set "wx.DCFontChanger.Set") is called – in which case it would reset the previous font.



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 





New in version 2.9.1.





---

  



**\_\_init\_\_** *(self, dc, font)*


Sets *font* on the given *dc*, storing the old one.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The DC where the font must be temporary set.
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – The font to set.






---

  





            Source: https://docs.wxpython.org/wx.DCFontChanger.html
        """

    def Set(self, font: 'Font') -> None:
        """ 

`Set`(*self*, *font*)[¶](#wx.DCFontChanger.Set "Permalink to this definition")
Set the font to use.


This method is meant to be called once only and only on the objects created with the constructor overload not taking  [wx.Font](wx.Font.html#wx-font) argument and has the same effect as the other constructor, i.e. sets the font to the given *font* and ensures that the old value is restored when this object is destroyed.



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.DCFontChanger.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.DCFontChanger.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCFontChanger.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.DCFontChanger.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCFontChanger.html
        """



class DCOverlay:
    """ **Possible constructors**:



```
DCOverlay(overlay, dc, x, y, width, height)

DCOverlay(overlay, dc)

```


Connects an overlay with a drawing DC.


  


        Source: https://docs.wxpython.org/wx.DCOverlay.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DCOverlay.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, overlay, dc, x, y, width, height)*


Connects this overlay to the corresponding drawing dc, if the overlay is not initialized yet this call will do so.



Parameters
* **overlay** ([*wx.Overlay*](wx.Overlay.html#wx.Overlay "wx.Overlay")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –






---

  



**\_\_init\_\_** *(self, overlay, dc)*


Convenience wrapper that behaves the same using the entire area of the dc.



Parameters
* **overlay** ([*wx.Overlay*](wx.Overlay.html#wx.Overlay "wx.Overlay")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –






---

  





            Source: https://docs.wxpython.org/wx.DCOverlay.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.DCOverlay.Clear "Permalink to this definition")
Clears the layer, restoring the state at the last init.




            Source: https://docs.wxpython.org/wx.DCOverlay.html
        """



class DCPenChanger:
    """ **Possible constructors**:



```
DCPenChanger(dc, pen)

```


DCPenChanger is a small helper class for setting a pen on a DC and
unsetting it automatically in the destructor, restoring the previous
one.


  


        Source: https://docs.wxpython.org/wx.DCPenChanger.html
    """
    def __init__(self, dc, pen) -> None:
        """ 

`__init__`(*self*, *dc*, *pen*)[¶](#wx.DCPenChanger.__init__ "Permalink to this definition")
Sets *pen* on the given *dc*, storing the old one.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The DC where the pen must be temporary set.
* **pen** ([*wx.Pen*](wx.Pen.html#wx.Pen "wx.Pen")) – The pen to set.






            Source: https://docs.wxpython.org/wx.DCPenChanger.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.DCPenChanger.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCPenChanger.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.DCPenChanger.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCPenChanger.html
        """



class DCTextBgColourChanger:
    """ **Possible constructors**:



```
DCTextBgColourChanger(dc)

DCTextBgColourChanger(dc, col)

```


DCTextBgColourChanger is a small helper class for setting a
background text colour on a DC and unsetting it automatically in the
destructor, restoring the previous one.


  


        Source: https://docs.wxpython.org/wx.DCTextBgColourChanger.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DCTextBgColourChanger.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, dc)*


Trivial constructor not changing anything.


This constructor is useful if you don’t know beforehand if the colour needs to be changed or not. It simply creates the object which won’t do anything in its destructor unless [`Set`](#wx.DCTextBgColourChanger.Set "wx.DCTextBgColourChanger.Set") is called – in which case it would reset the previous colour.



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 






---

  



**\_\_init\_\_** *(self, dc, col)*


Sets *col* on the given *dc*, storing the old one.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The DC where the colour must be temporary set.
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The text background colour to set.






---

  





            Source: https://docs.wxpython.org/wx.DCTextBgColourChanger.html
        """

    def Set(self, col: Union[int, str, 'Colour']) -> None:
        """ 

`Set`(*self*, *col*)[¶](#wx.DCTextBgColourChanger.Set "Permalink to this definition")
Set the background colour to use.


This method is meant to be called once only and only on the objects created with the constructor overload not taking  [wx.Colour](wx.Colour.html#wx-colour) argument and has the same effect as the other constructor, i.e. sets the background colour to the given *col* and ensures that the old value is restored when this object is destroyed.



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.DCTextBgColourChanger.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.DCTextBgColourChanger.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCTextBgColourChanger.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.DCTextBgColourChanger.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCTextBgColourChanger.html
        """



class DCTextBgModeChanger:
    """ DCTextBgModeChanger is a small helper class for setting a background
text mode on a DC and unsetting it automatically in the destructor,
restoring the previous one.


  


        Source: https://docs.wxpython.org/wx.DCTextBgModeChanger.html
    """
    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.DCTextBgModeChanger.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCTextBgModeChanger.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.DCTextBgModeChanger.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCTextBgModeChanger.html
        """



class DCTextColourChanger:
    """ **Possible constructors**:



```
DCTextColourChanger(dc)

DCTextColourChanger(dc, col)

```


DCTextColourChanger is a small helper class for setting a foreground
text colour on a DC and unsetting it automatically in the
destructor, restoring the previous one.


  


        Source: https://docs.wxpython.org/wx.DCTextColourChanger.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DCTextColourChanger.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, dc)*


Trivial constructor not changing anything.


This constructor is useful if you don’t know beforehand if the colour needs to be changed or not. It simply creates the object which won’t do anything in its destructor unless [`Set`](#wx.DCTextColourChanger.Set "wx.DCTextColourChanger.Set") is called – in which case it would reset the previous colour.



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 






---

  



**\_\_init\_\_** *(self, dc, col)*


Sets *col* on the given *dc*, storing the old one.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The DC where the colour must be temporary set.
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The colour to set.






---

  





            Source: https://docs.wxpython.org/wx.DCTextColourChanger.html
        """

    def Set(self, col: Union[int, str, 'Colour']) -> None:
        """ 

`Set`(*self*, *col*)[¶](#wx.DCTextColourChanger.Set "Permalink to this definition")
Set the colour to use.


This method is meant to be called once only and only on the objects created with the constructor overload not taking  [wx.Colour](wx.Colour.html#wx-colour) argument and has the same effect as the other constructor, i.e. sets the colour to the given *col* and ensures that the old value is restored when this object is destroyed.



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.DCTextColourChanger.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.DCTextColourChanger.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCTextColourChanger.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.DCTextColourChanger.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DCTextColourChanger.html
        """



class DelegateRendererNative(RendererNative):
    """ **Possible constructors**:



```
DelegateRendererNative()

DelegateRendererNative(rendererNative)

```


DelegateRendererNative allows reuse of renderers code by forwarding
all the RendererNative methods to the given object and thus allowing
you to only modify some of its methods without having to reimplement
all of them.


  


        Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DelegateRendererNative.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


The default constructor does the same thing as the other one except that it uses the [generic renderer](wx.RendererNative.html#wx-renderernative) instead of the user-specified *rendererNative*.


In any case, this sets up the delegate renderer object to follow all calls to the specified real renderer.




---

  



**\_\_init\_\_** *(self, rendererNative)*


This constructor uses the user-specified *rendererNative* to set up the delegate renderer object to follow all calls to the specified real renderer.



Parameters
**rendererNative** ([*wx.RendererNative*](wx.RendererNative.html#wx.RendererNative "wx.RendererNative")) – 





Note


This object does not take ownership of (i.e. won’t delete) *rendererNative*.





---

  





            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawCheckBox(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawCheckBox`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawCheckBox "Permalink to this definition")
Draw a check box.


*flags* may have the `CONTROL_CHECKED` , `CONTROL_CURRENT` or `CONTROL_UNDETERMINED` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawCheckMark(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawCheckMark`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawCheckMark "Permalink to this definition")
Draw a check mark.


*flags* may have the `CONTROL_DISABLED` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawComboBoxDropButton(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawComboBoxDropButton`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawComboBoxDropButton "Permalink to this definition")
Draw a button like the one used by  [wx.ComboBox](wx.ComboBox.html#wx-combobox) to show a drop down window.


The usual appearance is a downwards pointing arrow.


*flags* may have the `CONTROL_PRESSED` or `CONTROL_CURRENT` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawDropArrow(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawDropArrow`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawDropArrow "Permalink to this definition")
Draw a drop down arrow that is suitable for use outside a combo box.


Arrow will have transparent background.


*rect* is not entirely filled by the arrow. Instead, you should use bounding rectangle of a drop down button which arrow matches the size you need.


*flags* may have the `CONTROL_PRESSED` or `CONTROL_CURRENT` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawFocusRect(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawFocusRect`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawFocusRect "Permalink to this definition")
Draw a focus rectangle using the specified rectangle.


 [wx.ListCtrl](wx.ListCtrl.html#wx-listctrl).


The only supported flags is `CONTROL_SELECTED` for items which are selected. see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawHeaderButton(self, win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int:
        """ 

`DrawHeaderButton`(*self*, *win*, *dc*, *rect*, *flags=0*, *sortArrow=HDR\_SORT\_ICON\_NONE*, *params=None*)[¶](#wx.DelegateRendererNative.DrawHeaderButton "Permalink to this definition")
Draw the header control button (used, for example, by  [wx.ListCtrl](wx.ListCtrl.html#wx-listctrl)).


Depending on platforms the *flags* parameter may support the `CONTROL_SELECTED` `CONTROL_DISABLED` and `CONTROL_CURRENT` bits, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –
* **sortArrow** ([*HeaderSortIconType*](wx.HeaderSortIconType.enumeration.html "HeaderSortIconType")) –
* **params** ([*wx.HeaderButtonParams*](wx.HeaderButtonParams.html#wx.HeaderButtonParams "wx.HeaderButtonParams")) –



Return type
*int*



Returns
The optimal width to contain the unabbreviated label text or bitmap, the sort arrow if present, and internal margins.






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawHeaderButtonContents(self, win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int:
        """ 

`DrawHeaderButtonContents`(*self*, *win*, *dc*, *rect*, *flags=0*, *sortArrow=HDR\_SORT\_ICON\_NONE*, *params=None*)[¶](#wx.DelegateRendererNative.DrawHeaderButtonContents "Permalink to this definition")
Draw the contents of a header control button (label, sort arrows, etc.).


This function is normally only called by [`DrawHeaderButton`](#wx.DelegateRendererNative.DrawHeaderButton "wx.DelegateRendererNative.DrawHeaderButton") .


Depending on platforms the *flags* parameter may support the `CONTROL_SELECTED` `CONTROL_DISABLED` and `CONTROL_CURRENT` bits, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –
* **sortArrow** ([*HeaderSortIconType*](wx.HeaderSortIconType.enumeration.html "HeaderSortIconType")) –
* **params** ([*wx.HeaderButtonParams*](wx.HeaderButtonParams.html#wx.HeaderButtonParams "wx.HeaderButtonParams")) –



Return type
*int*



Returns
The optimal width to contain the unabbreviated label text or bitmap, the sort arrow if present, and internal margins.






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawItemSelectionRect(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawItemSelectionRect`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawItemSelectionRect "Permalink to this definition")
Draw a selection rectangle underneath the text as used e.g.


in a  [wx.ListCtrl](wx.ListCtrl.html#wx-listctrl).


The supported *flags* are `CONTROL_SELECTED` for items which are selected (e.g. often a blue rectangle) and `CONTROL_CURRENT` for the item that has the focus (often a dotted line around the item’s text). `CONTROL_FOCUSED` may be used to indicate if the control has the focus (otherwise the selection rectangle is e.g. often grey and not blue). This may be ignored by the renderer or deduced by the code directly from the *win*. Additionally `CONTROL_CELL` may be used to draw a cell inside a bigger selection area.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –





See also


[`DrawItemText`](wx.RendererNative.html#wx.RendererNative.DrawItemText "wx.RendererNative.DrawItemText")





            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawPushButton(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawPushButton`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawPushButton "Permalink to this definition")
Draw a blank push button that looks very similar to  [wx.Button](wx.Button.html#wx-button).


*flags* may have the `CONTROL_PRESSED` , `CONTROL_CURRENT` or `CONTROL_ISDEFAULT` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawSplitterBorder(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawSplitterBorder`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawSplitterBorder "Permalink to this definition")
Draw the border for sash window: this border must be such that the sash drawn by [`DrawSplitterSash`](#wx.DelegateRendererNative.DrawSplitterSash "wx.DelegateRendererNative.DrawSplitterSash") blends into it well.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawSplitterSash(self, win, dc, size, position, orient, flags=0) -> None:
        """ 

`DrawSplitterSash`(*self*, *win*, *dc*, *size*, *position*, *orient*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawSplitterSash "Permalink to this definition")
Draw a sash.


The *orient* parameter defines whether the sash should be vertical or horizontal and how the *position* should be interpreted.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **position** (*int*) –
* **orient** ([*Orientation*](wx.Orientation.enumeration.html "Orientation")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawTitleBarBitmap(self, win, dc, rect, button, flags=0) -> None:
        """ 

`DrawTitleBarBitmap`(*self*, *win*, *dc*, *rect*, *button*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawTitleBarBitmap "Permalink to this definition")
Draw a title bar button in the given state.




            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def DrawTreeItemButton(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawTreeItemButton`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.DelegateRendererNative.DrawTreeItemButton "Permalink to this definition")
Draw the expanded/collapsed icon for a tree control item.


To draw an expanded button the *flags* parameter must contain `CONTROL_EXPANDED` bit, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def GetCheckBoxSize(self, win, flags=0) -> 'Size':
        """ 

`GetCheckBoxSize`(*self*, *win*, *flags=0*)[¶](#wx.DelegateRendererNative.GetCheckBoxSize "Permalink to this definition")
Returns the size of a check box.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – A valid, i.e. non-null, window pointer which is used to get the theme defining the checkbox size under some platforms.
* **flags** (*int*) – The only acceptable flag is `CONTROL_CELL` which means that just the size of the checkbox itself is returned, without any margins that are included by default. This parameter is only available in wxWidgets 3.1.4 or later.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def GetCheckMarkSize(self, win: 'Window') -> 'Size':
        """ 

`GetCheckMarkSize`(*self*, *win*)[¶](#wx.DelegateRendererNative.GetCheckMarkSize "Permalink to this definition")
Returns the size of a check mark.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – A valid, i.e. non-null, window pointer which is used to get the theme defining the checkmark size under some platforms.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def GetExpanderSize(self, win: 'Window') -> 'Size':
        """ 

`GetExpanderSize`(*self*, *win*)[¶](#wx.DelegateRendererNative.GetExpanderSize "Permalink to this definition")
Returns the size of the expander used in tree-like controls.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – A valid, i.e. non-null, window pointer which is used to get the theme defining the expander size under some platforms.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def GetHeaderButtonHeight(self, win: 'Window') -> int:
        """ 

`GetHeaderButtonHeight`(*self*, *win*)[¶](#wx.DelegateRendererNative.GetHeaderButtonHeight "Permalink to this definition")
Returns the height of a header button, either a fixed platform height if available, or a generic height based on the *win* window’s font.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def GetHeaderButtonMargin(self, win: 'Window') -> int:
        """ 

`GetHeaderButtonMargin`(*self*, *win*)[¶](#wx.DelegateRendererNative.GetHeaderButtonMargin "Permalink to this definition")
Returns the horizontal margin on the left and right sides of header button’s label.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*int*





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def GetSplitterParams(self, win: 'Window') -> 'SplitterRenderParams':
        """ 

`GetSplitterParams`(*self*, *win*)[¶](#wx.DelegateRendererNative.GetSplitterParams "Permalink to this definition")
Get the splitter parameters, see  [wx.SplitterRenderParams](wx.SplitterRenderParams.html#wx-splitterrenderparams).


The *win* parameter should be a  [wx.SplitterWindow](wx.SplitterWindow.html#wx-splitterwindow).



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.SplitterRenderParams](wx.SplitterRenderParams.html#wx-splitterrenderparams)






            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    def GetVersion(self) -> 'RendererVersion':
        """ 

`GetVersion`(*self*)[¶](#wx.DelegateRendererNative.GetVersion "Permalink to this definition")
This function is used for version checking: [`Load`](wx.RendererNative.html#wx.RendererNative.Load "wx.RendererNative.Load") refuses to load any shared libraries implementing an older or incompatible version.



Return type
 [wx.RendererVersion](wx.RendererVersion.html#wx-rendererversion)





Note


The implementation of this method is always the same in all renderers (simply construct  [wx.RendererVersion](wx.RendererVersion.html#wx-rendererversion) using the `RendererVersion::Current_XXX` values), but it has to be in the derived, not base, class, to detect mismatches between the renderers versions and so you have to implement it anew in all renderers.





            Source: https://docs.wxpython.org/wx.DelegateRendererNative.html
        """

    Version: 'RendererVersion'  # `Version`[¶](#wx.DelegateRendererNative.Version "Permalink to this definition")See [`GetVersion`](#wx.DelegateRendererNative.GetVersion "wx.DelegateRendererNative.GetVersion")



class RendererNative:
    """ First, a brief introduction to RendererNative and why it is needed.


  


        Source: https://docs.wxpython.org/wx.RendererNative.html
    """
    def DrawCheckBox(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawCheckBox`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawCheckBox "Permalink to this definition")
Draw a check box.


*flags* may have the `CONTROL_CHECKED` , `CONTROL_CURRENT` or `CONTROL_UNDETERMINED` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawCheckMark(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawCheckMark`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawCheckMark "Permalink to this definition")
Draw a check mark.


*flags* may have the `CONTROL_DISABLED` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawChoice(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawChoice`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawChoice "Permalink to this definition")
Draw a native  [wx.Choice](wx.Choice.html#wx-choice).



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawCollapseButton(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawCollapseButton`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawCollapseButton "Permalink to this definition")
Draw a collapse button.


*flags* may have the `CONTROL_EXPANDED` or `CONTROL_CURRENT` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawComboBox(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawComboBox`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawComboBox "Permalink to this definition")
Draw a native  [wx.ComboBox](wx.ComboBox.html#wx-combobox).



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawComboBoxDropButton(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawComboBoxDropButton`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawComboBoxDropButton "Permalink to this definition")
Draw a button like the one used by  [wx.ComboBox](wx.ComboBox.html#wx-combobox) to show a drop down window.


The usual appearance is a downwards pointing arrow.


*flags* may have the `CONTROL_PRESSED` or `CONTROL_CURRENT` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawDropArrow(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawDropArrow`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawDropArrow "Permalink to this definition")
Draw a drop down arrow that is suitable for use outside a combo box.


Arrow will have transparent background.


*rect* is not entirely filled by the arrow. Instead, you should use bounding rectangle of a drop down button which arrow matches the size you need.


*flags* may have the `CONTROL_PRESSED` or `CONTROL_CURRENT` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawFocusRect(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawFocusRect`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawFocusRect "Permalink to this definition")
Draw a focus rectangle using the specified rectangle.


 [wx.ListCtrl](wx.ListCtrl.html#wx-listctrl).


The only supported flags is `CONTROL_SELECTED` for items which are selected. see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawGauge(self, win, dc, rect, value, max, flags=0) -> None:
        """ 

`DrawGauge`(*self*, *win*, *dc*, *rect*, *value*, *max*, *flags=0*)[¶](#wx.RendererNative.DrawGauge "Permalink to this definition")
Draw a progress bar in the specified rectangle.


The *value* and *max* arguments determine the part of the progress bar that is drawn as being filled in, *max* must be strictly positive and *value* must be between 0 and *max*.



> `CONTROL_SPECIAL` must be set in *flags* for the vertical gauges.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **value** (*int*) –
* **max** (*int*) –
* **flags** (*int*) –





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawHeaderButton(self, win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int:
        """ 

`DrawHeaderButton`(*self*, *win*, *dc*, *rect*, *flags=0*, *sortArrow=HDR\_SORT\_ICON\_NONE*, *params=None*)[¶](#wx.RendererNative.DrawHeaderButton "Permalink to this definition")
Draw the header control button (used, for example, by  [wx.ListCtrl](wx.ListCtrl.html#wx-listctrl)).


Depending on platforms the *flags* parameter may support the `CONTROL_SELECTED` `CONTROL_DISABLED` and `CONTROL_CURRENT` bits, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –
* **sortArrow** ([*HeaderSortIconType*](wx.HeaderSortIconType.enumeration.html "HeaderSortIconType")) –
* **params** ([*wx.HeaderButtonParams*](wx.HeaderButtonParams.html#wx.HeaderButtonParams "wx.HeaderButtonParams")) –



Return type
*int*



Returns
The optimal width to contain the unabbreviated label text or bitmap, the sort arrow if present, and internal margins.






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawHeaderButtonContents(self, win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int:
        """ 

`DrawHeaderButtonContents`(*self*, *win*, *dc*, *rect*, *flags=0*, *sortArrow=HDR\_SORT\_ICON\_NONE*, *params=None*)[¶](#wx.RendererNative.DrawHeaderButtonContents "Permalink to this definition")
Draw the contents of a header control button (label, sort arrows, etc.).


This function is normally only called by [`DrawHeaderButton`](#wx.RendererNative.DrawHeaderButton "wx.RendererNative.DrawHeaderButton") .


Depending on platforms the *flags* parameter may support the `CONTROL_SELECTED` `CONTROL_DISABLED` and `CONTROL_CURRENT` bits, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –
* **sortArrow** ([*HeaderSortIconType*](wx.HeaderSortIconType.enumeration.html "HeaderSortIconType")) –
* **params** ([*wx.HeaderButtonParams*](wx.HeaderButtonParams.html#wx.HeaderButtonParams "wx.HeaderButtonParams")) –



Return type
*int*



Returns
The optimal width to contain the unabbreviated label text or bitmap, the sort arrow if present, and internal margins.






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawItemSelectionRect(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawItemSelectionRect`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawItemSelectionRect "Permalink to this definition")
Draw a selection rectangle underneath the text as used e.g.


in a  [wx.ListCtrl](wx.ListCtrl.html#wx-listctrl).


The supported *flags* are `CONTROL_SELECTED` for items which are selected (e.g. often a blue rectangle) and `CONTROL_CURRENT` for the item that has the focus (often a dotted line around the item’s text). `CONTROL_FOCUSED` may be used to indicate if the control has the focus (otherwise the selection rectangle is e.g. often grey and not blue). This may be ignored by the renderer or deduced by the code directly from the *win*. Additionally `CONTROL_CELL` may be used to draw a cell inside a bigger selection area.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –





See also


[`DrawItemText`](#wx.RendererNative.DrawItemText "wx.RendererNative.DrawItemText")





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawItemText(self, win, dc, text, rect, align=ALIGN_LEFT|ALIGN_TOP, flags=0, ellipsizeMode=ELLIPSIZE_END) -> None:
        """ 

`DrawItemText`(*self*, *win*, *dc*, *text*, *rect*, *align=ALIGN\_LEFT|ALIGN\_TOP*, *flags=0*, *ellipsizeMode=ELLIPSIZE\_END*)[¶](#wx.RendererNative.DrawItemText "Permalink to this definition")
Draw item text in the correct color based on selection status.


Background of the text should be painted with [`DrawItemSelectionRect`](#wx.RendererNative.DrawItemSelectionRect "wx.RendererNative.DrawItemSelectionRect") .


The supported *flags* are `CONTROL_SELECTED` for items which are selected. `CONTROL_FOCUSED` may be used to indicate if the control has the focus. `CONTROL_DISABLED` may be used to indicate if the control is disabled.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **text** (*string*) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **align** (*int*) –
* **flags** (*int*) –
* **ellipsizeMode** ([*EllipsizeMode*](wx.EllipsizeMode.enumeration.html "EllipsizeMode")) –





New in version 4.1/wxWidgets-3.1.0.




See also


[`DrawItemSelectionRect`](#wx.RendererNative.DrawItemSelectionRect "wx.RendererNative.DrawItemSelectionRect")





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawPushButton(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawPushButton`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawPushButton "Permalink to this definition")
Draw a blank push button that looks very similar to  [wx.Button](wx.Button.html#wx-button).


*flags* may have the `CONTROL_PRESSED` , `CONTROL_CURRENT` or `CONTROL_ISDEFAULT` bit set, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawRadioBitmap(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawRadioBitmap`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawRadioBitmap "Permalink to this definition")
Draw a native  [wx.RadioButton](wx.RadioButton.html#wx-radiobutton) bitmap.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawSplitterBorder(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawSplitterBorder`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawSplitterBorder "Permalink to this definition")
Draw the border for sash window: this border must be such that the sash drawn by [`DrawSplitterSash`](#wx.RendererNative.DrawSplitterSash "wx.RendererNative.DrawSplitterSash") blends into it well.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawSplitterSash(self, win, dc, size, position, orient, flags=0) -> None:
        """ 

`DrawSplitterSash`(*self*, *win*, *dc*, *size*, *position*, *orient*, *flags=0*)[¶](#wx.RendererNative.DrawSplitterSash "Permalink to this definition")
Draw a sash.


The *orient* parameter defines whether the sash should be vertical or horizontal and how the *position* should be interpreted.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **position** (*int*) –
* **orient** ([*Orientation*](wx.Orientation.enumeration.html "Orientation")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawTextCtrl(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawTextCtrl`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawTextCtrl "Permalink to this definition")
Draw a native  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) frame.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawTitleBarBitmap(self, win, dc, rect, button, flags=0) -> None:
        """ 

`DrawTitleBarBitmap`(*self*, *win*, *dc*, *rect*, *button*, *flags=0*)[¶](#wx.RendererNative.DrawTitleBarBitmap "Permalink to this definition")
Draw a title bar button in the given state.




            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def DrawTreeItemButton(self, win, dc, rect, flags=0) -> None:
        """ 

`DrawTreeItemButton`(*self*, *win*, *dc*, *rect*, *flags=0*)[¶](#wx.RendererNative.DrawTreeItemButton "Permalink to this definition")
Draw the expanded/collapsed icon for a tree control item.


To draw an expanded button the *flags* parameter must contain `CONTROL_EXPANDED` bit, see `CONTROL_FLAGS`.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    @staticmethod
    def Get() -> 'RendererNative':
        """ 

*static* `Get`()[¶](#wx.RendererNative.Get "Permalink to this definition")
Return the currently used renderer.



Return type
 [wx.RendererNative](#wx-renderernative)






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def GetCheckBoxSize(self, win, flags=0) -> 'Size':
        """ 

`GetCheckBoxSize`(*self*, *win*, *flags=0*)[¶](#wx.RendererNative.GetCheckBoxSize "Permalink to this definition")
Returns the size of a check box.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – A valid, i.e. non-null, window pointer which is used to get the theme defining the checkbox size under some platforms.
* **flags** (*int*) – The only acceptable flag is `CONTROL_CELL` which means that just the size of the checkbox itself is returned, without any margins that are included by default. This parameter is only available in wxWidgets 3.1.4 or later.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def GetCheckMarkSize(self, win: 'Window') -> 'Size':
        """ 

`GetCheckMarkSize`(*self*, *win*)[¶](#wx.RendererNative.GetCheckMarkSize "Permalink to this definition")
Returns the size of a check mark.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – A valid, i.e. non-null, window pointer which is used to get the theme defining the checkmark size under some platforms.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def GetCollapseButtonSize(self, win, dc) -> 'Size':
        """ 

`GetCollapseButtonSize`(*self*, *win*, *dc*)[¶](#wx.RendererNative.GetCollapseButtonSize "Permalink to this definition")
Returns the size of a collapse button.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    @staticmethod
    def GetDefault() -> 'RendererNative':
        """ 

*static* `GetDefault`()[¶](#wx.RendererNative.GetDefault "Permalink to this definition")
Return the default (native) implementation for this platform – this is also the one used by default but this may be changed by calling [`Set`](#wx.RendererNative.Set "wx.RendererNative.Set") in which case the return value of this method may be different from the return value of [`Get`](#wx.RendererNative.Get "wx.RendererNative.Get") .



Return type
 [wx.RendererNative](#wx-renderernative)






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def GetExpanderSize(self, win: 'Window') -> 'Size':
        """ 

`GetExpanderSize`(*self*, *win*)[¶](#wx.RendererNative.GetExpanderSize "Permalink to this definition")
Returns the size of the expander used in tree-like controls.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – A valid, i.e. non-null, window pointer which is used to get the theme defining the expander size under some platforms.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    @staticmethod
    def GetGeneric() -> 'RendererNative':
        """ 

*static* `GetGeneric`()[¶](#wx.RendererNative.GetGeneric "Permalink to this definition")
Return the generic implementation of the renderer.


Under some platforms, this is the default renderer implementation, others have platform-specific default renderer which can be retrieved by calling [`GetDefault`](#wx.RendererNative.GetDefault "wx.RendererNative.GetDefault") .



Return type
 [wx.RendererNative](#wx-renderernative)






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def GetHeaderButtonHeight(self, win: 'Window') -> int:
        """ 

`GetHeaderButtonHeight`(*self*, *win*)[¶](#wx.RendererNative.GetHeaderButtonHeight "Permalink to this definition")
Returns the height of a header button, either a fixed platform height if available, or a generic height based on the *win* window’s font.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def GetHeaderButtonMargin(self, win: 'Window') -> int:
        """ 

`GetHeaderButtonMargin`(*self*, *win*)[¶](#wx.RendererNative.GetHeaderButtonMargin "Permalink to this definition")
Returns the horizontal margin on the left and right sides of header button’s label.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*int*





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def GetSplitterParams(self, win: 'Window') -> 'SplitterRenderParams':
        """ 

`GetSplitterParams`(*self*, *win*)[¶](#wx.RendererNative.GetSplitterParams "Permalink to this definition")
Get the splitter parameters, see  [wx.SplitterRenderParams](wx.SplitterRenderParams.html#wx-splitterrenderparams).


The *win* parameter should be a  [wx.SplitterWindow](wx.SplitterWindow.html#wx-splitterwindow).



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.SplitterRenderParams](wx.SplitterRenderParams.html#wx-splitterrenderparams)






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    def GetVersion(self) -> 'RendererVersion':
        """ 

`GetVersion`(*self*)[¶](#wx.RendererNative.GetVersion "Permalink to this definition")
This function is used for version checking: [`Load`](#wx.RendererNative.Load "wx.RendererNative.Load") refuses to load any shared libraries implementing an older or incompatible version.



Return type
 [wx.RendererVersion](wx.RendererVersion.html#wx-rendererversion)





Note


The implementation of this method is always the same in all renderers (simply construct  [wx.RendererVersion](wx.RendererVersion.html#wx-rendererversion) using the `RendererVersion::Current_XXX` values), but it has to be in the derived, not base, class, to detect mismatches between the renderers versions and so you have to implement it anew in all renderers.





            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    @staticmethod
    def Load(name: str) -> 'RendererNative':
        """ 

*static* `Load`(*name*)[¶](#wx.RendererNative.Load "Permalink to this definition")
Load the renderer from the specified `DLL`, the returned pointer must be deleted by caller if not `None` when it is not used any more.


The *name* should be just the base name of the renderer and not the full name of the `DLL` file which is constructed differently (using `DynamicLibrary.CanonicalizePluginName` ) on different systems.



Parameters
**name** (*string*) – 



Return type
 [wx.RendererNative](#wx-renderernative)






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    @staticmethod
    def Set(renderer: 'RendererNative') -> 'RendererNative':
        """ 

*static* `Set`(*renderer*)[¶](#wx.RendererNative.Set "Permalink to this definition")
Set the renderer to use, passing `None` reverts to using the default renderer (the global renderer must always exist).


Return the previous renderer used with [`Set`](#wx.RendererNative.Set "wx.RendererNative.Set") or `None` if none.



Parameters
**renderer** ([*wx.RendererNative*](#wx.RendererNative "wx.RendererNative")) – 



Return type
 [wx.RendererNative](#wx-renderernative)






            Source: https://docs.wxpython.org/wx.RendererNative.html
        """

    Version: 'RendererVersion'  # `Version`[¶](#wx.RendererNative.Version "Permalink to this definition")See [`GetVersion`](#wx.RendererNative.GetVersion "wx.RendererNative.GetVersion")



class Dialog(TopLevelWindow):
    """ **Possible constructors**:



```
Dialog()

Dialog(parent, id=ID_ANY, title="", pos=DefaultPosition,
       size=DefaultSize, style=DEFAULT_DIALOG_STYLE, name=DialogNameStr)

```


A dialog box is a window with a title bar and sometimes a system menu,
which can be moved around the screen.


  


        Source: https://docs.wxpython.org/wx.Dialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Dialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, title=””, pos=DefaultPosition, size=DefaultSize, style=DEFAULT\_DIALOG\_STYLE, name=DialogNameStr)*


Constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Can be `None`, a frame or another dialog box.
* **id** (*wx.WindowID*) – An identifier for the dialog. A value of -1 is taken to mean a default.
* **title** (*string*) – The title of the dialog.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The dialog position. The value DefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The dialog size. The value DefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
* **style** (*long*) – The window style.
* **name** (*string*) – Used to associate a name with the window, allowing the application user to set Motif resource values for individual dialog boxes.





See also


[`Create`](#wx.Dialog.Create "wx.Dialog.Create")





---

  





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def AddMainButtonId(self, id: int) -> None:
        """ 

`AddMainButtonId`(*self*, *id*)[¶](#wx.Dialog.AddMainButtonId "Permalink to this definition")
Adds an identifier to be regarded as a main button for the non-scrolling area of a dialog.



Parameters
**id** (*wx.WindowID*) – 





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def CanDoLayoutAdaptation(self) -> bool:
        """ 

`CanDoLayoutAdaptation`(*self*)[¶](#wx.Dialog.CanDoLayoutAdaptation "Permalink to this definition")
Returns `True` if this dialog can and should perform layout adaptation using [`DoLayoutAdaptation`](#wx.Dialog.DoLayoutAdaptation "wx.Dialog.DoLayoutAdaptation") , usually if the dialog is too large to fit on the display.



Return type
*bool*





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def Centre(self, direction: int=BOTH) -> None:
        """ 

`Centre`(*self*, *direction=BOTH*)[¶](#wx.Dialog.Centre "Permalink to this definition")
Centres the dialog box on the display.



Parameters
**direction** (*int*) – May be `wx.HORIZONTAL`, `wx.VERTICAL` or `wx.BOTH`.






            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def Create(self, parent, id=ID_ANY, title="", pos=DefaultPosition, size=DefaultSize, style=DEFAULT_DIALOG_STYLE, name=DialogNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *title=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DEFAULT\_DIALOG\_STYLE*, *name=DialogNameStr*)[¶](#wx.Dialog.Create "Permalink to this definition")
Used for two-step dialog box construction.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*





See also


 [wx.Dialog](#wx-dialog)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def CreateButtonSizer(self, flags: int) -> 'Sizer':
        """ 

`CreateButtonSizer`(*self*, *flags*)[¶](#wx.Dialog.CreateButtonSizer "Permalink to this definition")
Creates a sizer with standard buttons.


*flags* is a bit list of the following flags: `wx.OK`, `wx.CANCEL`, `wx.YES`, `wx.NO`, `wx.APPLY`, `wx.CLOSE`, `wx.HELP`, `wx.NO_DEFAULT`.


The sizer lays out the buttons in a manner appropriate to the platform.


This function uses [`CreateStdDialogButtonSizer`](#wx.Dialog.CreateStdDialogButtonSizer "wx.Dialog.CreateStdDialogButtonSizer") internally for most platforms but doesn’t create the sizer at all for the platforms with hardware buttons (such as smartphones) for which it sets up the hardware buttons appropriately and returns `None`, so don’t forget to test that the return value is valid before using it.



Parameters
**flags** (*long*) – 



Return type
 [wx.Sizer](wx.Sizer.html#wx-sizer)






            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def CreateSeparatedButtonSizer(self, flags: int) -> 'Sizer':
        """ 

`CreateSeparatedButtonSizer`(*self*, *flags*)[¶](#wx.Dialog.CreateSeparatedButtonSizer "Permalink to this definition")
Creates a sizer with standard buttons using [`CreateButtonSizer`](#wx.Dialog.CreateButtonSizer "wx.Dialog.CreateButtonSizer") separated from the rest of the dialog contents by a horizontal  [wx.StaticLine](wx.StaticLine.html#wx-staticline).


This is a combination of [`CreateButtonSizer`](#wx.Dialog.CreateButtonSizer "wx.Dialog.CreateButtonSizer") and [`CreateSeparatedSizer`](#wx.Dialog.CreateSeparatedSizer "wx.Dialog.CreateSeparatedSizer") .



Parameters
**flags** (*long*) – 



Return type
 [wx.Sizer](wx.Sizer.html#wx-sizer)





Note


Just like [`CreateButtonSizer`](#wx.Dialog.CreateButtonSizer "wx.Dialog.CreateButtonSizer") , this function may return `None` if no buttons were created.





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def CreateSeparatedSizer(self, sizer: 'Sizer') -> 'Sizer':
        """ 

`CreateSeparatedSizer`(*self*, *sizer*)[¶](#wx.Dialog.CreateSeparatedSizer "Permalink to this definition")
Returns the sizer containing the given one with a separating  [wx.StaticLine](wx.StaticLine.html#wx-staticline) if necessarily.


This function is useful for creating the sizer containing footer-like contents in dialog boxes. It will add a separating static line only if it conforms to the current platform convention (currently it is not added under Mac where the use of static lines for grouping is discouraged and is added elsewhere).



Parameters
**sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – The sizer to wrap, must be not `None`.



Return type
 [wx.Sizer](wx.Sizer.html#wx-sizer)



Returns
The sizer wrapping the input one or possibly the input sizer itself if no wrapping is necessary.





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def CreateStdDialogButtonSizer(self, flags: int) -> 'StdDialogButtonSizer':
        """ 

`CreateStdDialogButtonSizer`(*self*, *flags*)[¶](#wx.Dialog.CreateStdDialogButtonSizer "Permalink to this definition")
Creates a  [wx.StdDialogButtonSizer](wx.StdDialogButtonSizer.html#wx-stddialogbuttonsizer) with standard buttons.


*flags* is a bit list of the following flags: `wx.OK`, `wx.CANCEL`, `wx.YES`, `wx.NO`, `wx.APPLY`, `wx.CLOSE`, `wx.HELP`, `wx.NO_DEFAULT`.


The sizer lays out the buttons in a manner appropriate to the platform.



Parameters
**flags** (*long*) – 



Return type
 [wx.StdDialogButtonSizer](wx.StdDialogButtonSizer.html#wx-stddialogbuttonsizer)






            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def CreateTextSizer(self, message, widthMax=-1) -> 'Sizer':
        """ 

`CreateTextSizer`(*self*, *message*, *widthMax=-1*)[¶](#wx.Dialog.CreateTextSizer "Permalink to this definition")
Splits text up at newlines and places the lines into  [wx.StaticText](wx.StaticText.html#wx-statictext) objects with the specified maximum width in a vertical  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer).


If *widthMax* has its default value of -1, only explicit new line characters in *message* are taken into account. Otherwise, lines are broken either after a new line or wrapped, at word boundary, if their width would become bigger than the specified maximal width.



Parameters
* **message** (*string*) – The text to be displayed.
* **widthMax** (*int*) – Specifies the text’s maximum width (this argument is available since version 3.1.1, previous versions always behaved as if the maximal width of -1 was specified).



Return type
 [wx.Sizer](wx.Sizer.html#wx-sizer)





See also


[`wx.StaticText.Wrap`](wx.StaticText.html#wx.StaticText.Wrap "wx.StaticText.Wrap")





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def DoLayoutAdaptation(self) -> bool:
        """ 

`DoLayoutAdaptation`(*self*)[¶](#wx.Dialog.DoLayoutAdaptation "Permalink to this definition")
Performs layout adaptation, usually if the dialog is too large to fit on the display.



Return type
*bool*





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    @staticmethod
    def EnableLayoutAdaptation(enable: bool) -> None:
        """ 

*static* `EnableLayoutAdaptation`(*enable*)[¶](#wx.Dialog.EnableLayoutAdaptation "Permalink to this definition")
A static function enabling or disabling layout adaptation for all dialogs.



Parameters
**enable** (*bool*) – 





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def EndModal(self, retCode: int) -> None:
        """ 

`EndModal`(*self*, *retCode*)[¶](#wx.Dialog.EndModal "Permalink to this definition")
Ends a modal dialog, passing a value to be returned from the [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") invocation.



Parameters
**retCode** (*int*) – The value that should be returned by ShowModal.





See also


[`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") , [`GetReturnCode`](#wx.Dialog.GetReturnCode "wx.Dialog.GetReturnCode") , [`SetReturnCode`](#wx.Dialog.SetReturnCode "wx.Dialog.SetReturnCode")





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def GetAffirmativeId(self) -> int:
        """ 

`GetAffirmativeId`(*self*)[¶](#wx.Dialog.GetAffirmativeId "Permalink to this definition")
Gets the identifier of the button which works like standard `wx.OK` button in this dialog.



Return type
*int*





See also


[`SetAffirmativeId`](#wx.Dialog.SetAffirmativeId "wx.Dialog.SetAffirmativeId")





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Dialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def GetContentWindow(self) -> 'Window':
        """ 

`GetContentWindow`(*self*)[¶](#wx.Dialog.GetContentWindow "Permalink to this definition")
Override this to return a window containing the main content of the dialog.


This is particularly useful when the dialog implements pages, such as  [wx.adv.PropertySheetDialog](wx.adv.PropertySheetDialog.html#wx-adv-propertysheetdialog), and allows the [layout adaptation code](dialog_overview.html#layout-adaptation-code) to know that only the pages need to be made scrollable.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def GetEscapeId(self) -> int:
        """ 

`GetEscapeId`(*self*)[¶](#wx.Dialog.GetEscapeId "Permalink to this definition")
Gets the identifier of the button to map presses of `ESC` button to.



Return type
*int*





See also


[`SetEscapeId`](#wx.Dialog.SetEscapeId "wx.Dialog.SetEscapeId")





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def GetLayoutAdaptationDone(self) -> bool:
        """ 

`GetLayoutAdaptationDone`(*self*)[¶](#wx.Dialog.GetLayoutAdaptationDone "Permalink to this definition")
Returns `True` if the dialog has been adapted, usually by making it scrollable to work with a small display.



Return type
*bool*





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def GetLayoutAdaptationLevel(self) -> int:
        """ 

`GetLayoutAdaptationLevel`(*self*)[¶](#wx.Dialog.GetLayoutAdaptationLevel "Permalink to this definition")
Gets a value representing the aggressiveness of search for buttons and sizers to be in the non-scrolling part of a layout-adapted dialog.


Zero switches off adaptation, and 3 allows search for standard buttons anywhere in the dialog.



Return type
*int*





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def GetLayoutAdaptationMode(self) -> 'DialogLayoutAdaptationMode':
        """ 

`GetLayoutAdaptationMode`(*self*)[¶](#wx.Dialog.GetLayoutAdaptationMode "Permalink to this definition")
Gets the adaptation mode, overriding the global adaptation flag.



Return type
 [wx.DialogLayoutAdaptationMode](wx.DialogLayoutAdaptationMode.enumeration.html#wx-dialoglayoutadaptationmode)





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    @staticmethod
    def GetLayoutAdapter() -> 'DialogLayoutAdapter':
        """ 

*static* `GetLayoutAdapter`()[¶](#wx.Dialog.GetLayoutAdapter "Permalink to this definition")
A static function getting the current layout adapter object.



Return type
 [wx.DialogLayoutAdapter](wx.DialogLayoutAdapter.html#wx-dialoglayoutadapter)





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def GetMainButtonIds(self) -> int:
        """ 

`GetMainButtonIds`(*self*)[¶](#wx.Dialog.GetMainButtonIds "Permalink to this definition")
Returns an array of identifiers to be regarded as the main buttons for the non-scrolling area of a dialog.



Return type
*list of integers*





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def GetReturnCode(self) -> int:
        """ 

`GetReturnCode`(*self*)[¶](#wx.Dialog.GetReturnCode "Permalink to this definition")
Gets the return code for this window.



Return type
*int*





Note


A return code is normally associated with a modal dialog, where [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") returns a code to the application.




See also


[`SetReturnCode`](#wx.Dialog.SetReturnCode "wx.Dialog.SetReturnCode") , [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") , [`EndModal`](#wx.Dialog.EndModal "wx.Dialog.EndModal")





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def Iconize(self, iconize: bool=True) -> None:
        """ 

`Iconize`(*self*, *iconize=True*)[¶](#wx.Dialog.Iconize "Permalink to this definition")
Iconizes or restores the dialog.


Windows only.



Parameters
**iconize** (*bool*) – If `True`, iconizes the dialog box; if `False`, shows and restores it.





Note


Note that in Windows, iconization has no effect since dialog boxes cannot be iconized. However, applications may need to explicitly restore dialog boxes under Motif which have user-iconizable frames, and under Windows calling Iconize(false) will bring the window to the front, as does Show(true).





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def IsIconized(self) -> bool:
        """ 

`IsIconized`(*self*)[¶](#wx.Dialog.IsIconized "Permalink to this definition")
Returns `True` if the dialog box is iconized.


Windows only.



Return type
*bool*





Note


Always returns `False` under Windows since dialogs cannot be iconized.





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    @staticmethod
    def IsLayoutAdaptationEnabled() -> bool:
        """ 

*static* `IsLayoutAdaptationEnabled`()[¶](#wx.Dialog.IsLayoutAdaptationEnabled "Permalink to this definition")
A static function returning `True` if layout adaptation is enabled for all dialogs.



Return type
*bool*





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def IsMainButtonId(self, id: int) -> bool:
        """ 

`IsMainButtonId`(*self*, *id*)[¶](#wx.Dialog.IsMainButtonId "Permalink to this definition")
Returns `True` if *id* is in the array of identifiers to be regarded as the main buttons for the non-scrolling area of a dialog.



Parameters
**id** (*wx.WindowID*) – 



Return type
*bool*





Availability


Only available for MSW.




See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def IsModal(self) -> bool:
        """ 

`IsModal`(*self*)[¶](#wx.Dialog.IsModal "Permalink to this definition")
Returns `True` if the dialog box is modal, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def SetAffirmativeId(self, id: int) -> None:
        """ 

`SetAffirmativeId`(*self*, *id*)[¶](#wx.Dialog.SetAffirmativeId "Permalink to this definition")
Sets the identifier to be used as `wx.OK` button.


When the button with this identifier is pressed, the dialog calls [`wx.Window.Validate`](wx.Window.html#wx.Window.Validate "wx.Window.Validate") and [`wx.Window.TransferDataFromWindow`](wx.Window.html#wx.Window.TransferDataFromWindow "wx.Window.TransferDataFromWindow") and, if they both return `True`, closes the dialog with the affirmative id return code.


Also, when the user presses a hardware `wx.OK` button on the devices having one or the special `wx.OK` button in the PocketPC title bar, an event with this id is generated.


By default, the affirmative id is `wx.ID_OK`.



Parameters
**id** (*int*) – 





See also


[`GetAffirmativeId`](#wx.Dialog.GetAffirmativeId "wx.Dialog.GetAffirmativeId") , [`SetEscapeId`](#wx.Dialog.SetEscapeId "wx.Dialog.SetEscapeId")





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def SetEscapeId(self, id: int) -> None:
        """ 

`SetEscapeId`(*self*, *id*)[¶](#wx.Dialog.SetEscapeId "Permalink to this definition")
Sets the identifier of the button which should work like the standard “Cancel” button in this dialog.


When the button with this id is clicked, the dialog is closed. Also, when the user presses `ESC` key in the dialog or closes the dialog using the close button in the title bar, this is mapped to the click of the button with the specified id.


By default, the escape id is the special value `wx.ID_ANY` meaning that `wx.ID_CANCEL` button is used if it’s present in the dialog and otherwise the button with [`GetAffirmativeId`](#wx.Dialog.GetAffirmativeId "wx.Dialog.GetAffirmativeId") is used. Another special value for *id* is `wx.ID_NONE` meaning that `ESC` presses should be ignored. If any other value is given, it is interpreted as the id of the button to map the escape key to.



Parameters
**id** (*int*) – 





Note


This method should be used for custom modal dialog implemented in wxWidgets itself, native dialogs such as  [wx.MessageDialog](wx.MessageDialog.html#wx-messagedialog) or  [wx.FileDialog](wx.FileDialog.html#wx-filedialog), handle `ESC` presses in their own way which cannot be customized.





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def SetIcon(self, icon: 'Icon') -> None:
        """ 

`SetIcon`(*self*, *icon*)[¶](#wx.Dialog.SetIcon "Permalink to this definition")
Sets the icon for this dialog.



Parameters
**icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – The icon to associate with this dialog.





See also


 [wx.Icon](wx.Icon.html#wx-icon)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def SetIcons(self, icons: 'IconBundle') -> None:
        """ 

`SetIcons`(*self*, *icons*)[¶](#wx.Dialog.SetIcons "Permalink to this definition")
Sets the icons for this dialog.



Parameters
**icons** ([*wx.IconBundle*](wx.IconBundle.html#wx.IconBundle "wx.IconBundle")) – The icons to associate with this dialog.





See also


 [wx.IconBundle](wx.IconBundle.html#wx-iconbundle)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def SetLayoutAdaptationDone(self, done: bool) -> None:
        """ 

`SetLayoutAdaptationDone`(*self*, *done*)[¶](#wx.Dialog.SetLayoutAdaptationDone "Permalink to this definition")
Marks the dialog as having been adapted, usually by making it scrollable to work with a small display.



Parameters
**done** (*bool*) – 





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def SetLayoutAdaptationLevel(self, level: int) -> None:
        """ 

`SetLayoutAdaptationLevel`(*self*, *level*)[¶](#wx.Dialog.SetLayoutAdaptationLevel "Permalink to this definition")
Sets the aggressiveness of search for buttons and sizers to be in the non-scrolling part of a layout-adapted dialog.


Zero switches off adaptation, and 3 allows search for standard buttons anywhere in the dialog.



Parameters
**level** (*int*) – 





See also


[Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def SetLayoutAdaptationMode(self, mode: DialogLayoutAdaptationMode) -> None:
        """ 

`SetLayoutAdaptationMode`(*self*, *mode*)[¶](#wx.Dialog.SetLayoutAdaptationMode "Permalink to this definition")
Sets the adaptation mode, overriding the global adaptation flag.



Parameters
**mode** ([*DialogLayoutAdaptationMode*](wx.DialogLayoutAdaptationMode.enumeration.html "DialogLayoutAdaptationMode")) – 





See also


 [wx.DialogLayoutAdaptationMode](wx.DialogLayoutAdaptationMode.enumeration.html#wx-dialoglayoutadaptationmode), [Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs) (for more on layout adaptation)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    @staticmethod
    def SetLayoutAdapter(adapter: 'DialogLayoutAdapter') -> 'DialogLayoutAdapter':
        """ 

*static* `SetLayoutAdapter`(*adapter*)[¶](#wx.Dialog.SetLayoutAdapter "Permalink to this definition")
A static function for setting the current layout adapter object, returning the old adapter.


If you call this, you should delete the old adapter object.



Parameters
**adapter** ([*wx.DialogLayoutAdapter*](wx.DialogLayoutAdapter.html#wx.DialogLayoutAdapter "wx.DialogLayoutAdapter")) – 



Return type
 [wx.DialogLayoutAdapter](wx.DialogLayoutAdapter.html#wx-dialoglayoutadapter)





See also


 [wx.DialogLayoutAdapter](wx.DialogLayoutAdapter.html#wx-dialoglayoutadapter), [Automatic Scrolled Dialogs](dialog_overview.html#automatic-scrolled-dialogs)





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def SetReturnCode(self, retCode: int) -> None:
        """ 

`SetReturnCode`(*self*, *retCode*)[¶](#wx.Dialog.SetReturnCode "Permalink to this definition")
Sets the return code for this window.


A return code is normally associated with a modal dialog, where [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") returns a code to the application. The function [`EndModal`](#wx.Dialog.EndModal "wx.Dialog.EndModal") calls [`SetReturnCode`](#wx.Dialog.SetReturnCode "wx.Dialog.SetReturnCode") .



Parameters
**retCode** (*int*) – The integer return code, usually a control identifier.





See also


[`GetReturnCode`](#wx.Dialog.GetReturnCode "wx.Dialog.GetReturnCode") , [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") , [`EndModal`](#wx.Dialog.EndModal "wx.Dialog.EndModal")





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def Show(self, show: bool=True) -> bool:
        """ 

`Show`(*self*, *show=True*)[¶](#wx.Dialog.Show "Permalink to this definition")
Hides or shows the dialog.


The preferred way of dismissing a modal dialog is to use [`EndModal`](#wx.Dialog.EndModal "wx.Dialog.EndModal") .



Parameters
**show** (*bool*) – If `True`, the dialog box is shown and brought to the front, otherwise the box is hidden. If `False` and the dialog is modal, control is returned to the calling program.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.Dialog.ShowModal "Permalink to this definition")
Shows an application-modal dialog.


Program flow does not return until the dialog has been dismissed with [`EndModal`](#wx.Dialog.EndModal "wx.Dialog.EndModal") .


Notice that it is possible to call [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") for a dialog which had been previously shown with [`Show`](#wx.Dialog.Show "wx.Dialog.Show") , this allows making an existing modeless dialog modal. However [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") can’t be called twice without intervening [`EndModal`](#wx.Dialog.EndModal "wx.Dialog.EndModal") calls.


Note that this function creates a temporary event loop which takes precedence over the application’s main event loop (see  [wx.EventLoopBase](wx.EventLoopBase.html#wx-eventloopbase)) and which is destroyed when the dialog is dismissed. This also results in a call to `wx.App.ProcessPendingEvents` .



Return type
*int*



Returns
The value set with [`SetReturnCode`](#wx.Dialog.SetReturnCode "wx.Dialog.SetReturnCode") .





See also


[`ShowWindowModal`](#wx.Dialog.ShowWindowModal "wx.Dialog.ShowWindowModal") , `ShowWindowModalThenDo` , [`EndModal`](#wx.Dialog.EndModal "wx.Dialog.EndModal") , [`GetReturnCode`](#wx.Dialog.GetReturnCode "wx.Dialog.GetReturnCode") , [`SetReturnCode`](#wx.Dialog.SetReturnCode "wx.Dialog.SetReturnCode")





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def ShowWindowModal(self) -> None:
        """ 

`ShowWindowModal`(*self*)[¶](#wx.Dialog.ShowWindowModal "Permalink to this definition")
Shows a dialog modal to the parent top level window only.


Unlike [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") , dialogs shown with this function only prevent the user from interacting with their parent frame only but not with the rest of the application. They also don’t block the program execution but instead return immediately, as [`Show`](#wx.Dialog.Show "wx.Dialog.Show") , and generate a wxEVT\_WINDOW\_MODAL\_DIALOG\_CLOSED event ( [wx.WindowModalDialogEvent](wx.WindowModalDialogEvent.html#wx-windowmodaldialogevent)) later when the dialog is closed.


Currently this function is only fully implemented in wxOSX ports, under the other platforms it behaves like [`ShowModal`](#wx.Dialog.ShowModal "wx.Dialog.ShowModal") (but also sends the above mentioned event).



New in version 2.9.0.




See also


 [wx.WindowModalDialogEvent](wx.WindowModalDialogEvent.html#wx-windowmodaldialogevent), `ShowWindowModalThenDo`





            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.Dialog.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.Dialog.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Dialog.html
        """

    AffirmativeId: int  # `AffirmativeId`[¶](#wx.Dialog.AffirmativeId "Permalink to this definition")See [`GetAffirmativeId`](#wx.Dialog.GetAffirmativeId "wx.Dialog.GetAffirmativeId") and [`SetAffirmativeId`](#wx.Dialog.SetAffirmativeId "wx.Dialog.SetAffirmativeId")
    ContentWindow: 'Window'  # `ContentWindow`[¶](#wx.Dialog.ContentWindow "Permalink to this definition")See [`GetContentWindow`](#wx.Dialog.GetContentWindow "wx.Dialog.GetContentWindow")
    EscapeId: int  # `EscapeId`[¶](#wx.Dialog.EscapeId "Permalink to this definition")See [`GetEscapeId`](#wx.Dialog.GetEscapeId "wx.Dialog.GetEscapeId") and [`SetEscapeId`](#wx.Dialog.SetEscapeId "wx.Dialog.SetEscapeId")
    LayoutAdaptationDone: bool  # `LayoutAdaptationDone`[¶](#wx.Dialog.LayoutAdaptationDone "Permalink to this definition")See [`GetLayoutAdaptationDone`](#wx.Dialog.GetLayoutAdaptationDone "wx.Dialog.GetLayoutAdaptationDone") and [`SetLayoutAdaptationDone`](#wx.Dialog.SetLayoutAdaptationDone "wx.Dialog.SetLayoutAdaptationDone")
    LayoutAdaptationLevel: int  # `LayoutAdaptationLevel`[¶](#wx.Dialog.LayoutAdaptationLevel "Permalink to this definition")See [`GetLayoutAdaptationLevel`](#wx.Dialog.GetLayoutAdaptationLevel "wx.Dialog.GetLayoutAdaptationLevel") and [`SetLayoutAdaptationLevel`](#wx.Dialog.SetLayoutAdaptationLevel "wx.Dialog.SetLayoutAdaptationLevel")
    LayoutAdaptationMode: 'DialogLayoutAdaptationMode'  # `LayoutAdaptationMode`[¶](#wx.Dialog.LayoutAdaptationMode "Permalink to this definition")See [`GetLayoutAdaptationMode`](#wx.Dialog.GetLayoutAdaptationMode "wx.Dialog.GetLayoutAdaptationMode") and [`SetLayoutAdaptationMode`](#wx.Dialog.SetLayoutAdaptationMode "wx.Dialog.SetLayoutAdaptationMode")
    MainButtonIds: int  # `MainButtonIds`[¶](#wx.Dialog.MainButtonIds "Permalink to this definition")See [`GetMainButtonIds`](#wx.Dialog.GetMainButtonIds "wx.Dialog.GetMainButtonIds")
    ReturnCode: int  # `ReturnCode`[¶](#wx.Dialog.ReturnCode "Permalink to this definition")See [`GetReturnCode`](#wx.Dialog.GetReturnCode "wx.Dialog.GetReturnCode") and [`SetReturnCode`](#wx.Dialog.SetReturnCode "wx.Dialog.SetReturnCode")



CAPTION: int  # Puts a caption on the dialog box.

DEFAULT_DIALOG_STYLE: int  # Equivalent to a combination of wx.CAPTION, wx.CLOSE_BOX and wx.SYSTEM_MENU (the last one is not used under Unix).

RESIZE_BORDER: int  # Display a resizable frame around the window.

SYSTEM_MENU: int  # Display a system menu.

CLOSE_BOX: int  # Displays a close box on the frame.

MAXIMIZE_BOX: int  # Displays a maximize box on the dialog.

MINIMIZE_BOX: int  # Displays a minimize box on the dialog.

THICK_FRAME: int  # Display a thick frame around the window.

STAY_ON_TOP: int  # The dialog stays on top of all other windows.

NO_3D: int  # This style is obsolete and doesn’t do anything any more, don’t use it in any new code.

DIALOG_NO_PARENT: int  # By default, a dialog created with a None parent window will be given the application’s top level window  as parent. Use this style to prevent this from happening and create an orphan dialog. This is not recommended for modal dialogs.

DIALOG_EX_METAL: int  # On macOS, frames with this style will be shown with a metallic look. This is an extra style. ^^

EVT_INIT_DIALOG: int  # Process a  wxEVT_INIT_DIALOG   event. See    wx.InitDialogEvent. ^^

CANCEL: int

YES: int

NO: int

APPLY: int

CLOSE: int

HELP: int

NO_DEFAULT: int

class DialogLayoutAdapter:
    """ **Possible constructors**:



```
DialogLayoutAdapter()

```


This abstract class is the base for classes that help wxWidgets
perform run-time layout adaptation of dialogs.


  


        Source: https://docs.wxpython.org/wx.DialogLayoutAdapter.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.DialogLayoutAdapter.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.DialogLayoutAdapter.html
        """

    def CanDoLayoutAdaptation(self, dialog: 'Dialog') -> bool:
        """ 

`CanDoLayoutAdaptation`(*self*, *dialog*)[¶](#wx.DialogLayoutAdapter.CanDoLayoutAdaptation "Permalink to this definition")
Override this to returns `True` if adaptation can and should be done.



Parameters
**dialog** ([*wx.Dialog*](wx.Dialog.html#wx.Dialog "wx.Dialog")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DialogLayoutAdapter.html
        """

    def DoLayoutAdaptation(self, dialog: 'Dialog') -> bool:
        """ 

`DoLayoutAdaptation`(*self*, *dialog*)[¶](#wx.DialogLayoutAdapter.DoLayoutAdaptation "Permalink to this definition")
Override this to perform layout adaptation, such as making parts of the dialog scroll and resizing the dialog to fit the display.


Normally this function will be called just before the dialog is shown.



Parameters
**dialog** ([*wx.Dialog*](wx.Dialog.html#wx.Dialog "wx.Dialog")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DialogLayoutAdapter.html
        """



class DirDialog(Dialog):
    """ **Possible constructors**:



```
DirDialog(parent, message=DirSelectorPromptStr, defaultPath="",
          style=DD_DEFAULT_STYLE, pos=DefaultPosition, size=DefaultSize,
          name=DirDialogNameStr)

```


This class represents the directory chooser dialog.


  


        Source: https://docs.wxpython.org/wx.DirDialog.html
    """
    def __init__(self, parent, message=DirSelectorPromptStr, defaultPath="", style=DD_DEFAULT_STYLE, pos=DefaultPosition, size=DefaultSize, name=DirDialogNameStr) -> None:
        """ 

`__init__`(*self*, *parent*, *message=DirSelectorPromptStr*, *defaultPath=""*, *style=DD\_DEFAULT\_STYLE*, *pos=DefaultPosition*, *size=DefaultSize*, *name=DirDialogNameStr*)[¶](#wx.DirDialog.__init__ "Permalink to this definition")
Constructor.


Use [`ShowModal`](#wx.DirDialog.ShowModal "wx.DirDialog.ShowModal") to show the dialog.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show on the dialog.
* **defaultPath** (*string*) – The default path, or the empty string.
* **style** (*long*) – The dialog style. See  [wx.DirDialog](#wx-dirdialog)
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position. Ignored under Windows.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Dialog size. Ignored under Windows.
* **name** (*string*) – The dialog name, not used.






            Source: https://docs.wxpython.org/wx.DirDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.DirDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.DirDialog.html
        """

    def GetMessage(self) -> str:
        """ 

`GetMessage`(*self*)[¶](#wx.DirDialog.GetMessage "Permalink to this definition")
Returns the message that will be displayed on the dialog.



Return type
`string`






            Source: https://docs.wxpython.org/wx.DirDialog.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.DirDialog.GetPath "Permalink to this definition")
Returns the default or user-selected path.



Return type
`string`





Note


This function can’t be used with dialogs which have the `DD_MULTIPLE` style, use [`GetPaths`](#wx.DirDialog.GetPaths "wx.DirDialog.GetPaths") instead.





            Source: https://docs.wxpython.org/wx.DirDialog.html
        """

    def GetPaths(self, paths: list[str]) -> None:
        """ 

`GetPaths`(*self*, *paths*)[¶](#wx.DirDialog.GetPaths "Permalink to this definition")
Fills the array *paths* with the full paths of the chosen directories.



Parameters
**paths** (*list of strings*) – 





New in version 4.1/wxWidgets-3.1.4.




Note


This function should only be used with the dialogs which have `DD_MULTIPLE` style, use [`GetPath`](#wx.DirDialog.GetPath "wx.DirDialog.GetPath") for the others.





            Source: https://docs.wxpython.org/wx.DirDialog.html
        """

    def SetMessage(self, message: str) -> None:
        """ 

`SetMessage`(*self*, *message*)[¶](#wx.DirDialog.SetMessage "Permalink to this definition")
Sets the message that will be displayed on the dialog.



Parameters
**message** (*string*) – 






            Source: https://docs.wxpython.org/wx.DirDialog.html
        """

    def SetPath(self, path: str) -> None:
        """ 

`SetPath`(*self*, *path*)[¶](#wx.DirDialog.SetPath "Permalink to this definition")
Sets the default path.



Parameters
**path** (*string*) – 






            Source: https://docs.wxpython.org/wx.DirDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.DirDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning `wx.ID_OK` if the user pressed `wx.OK`, and `wx.ID_CANCEL` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.DirDialog.html
        """

    Message: str  # `Message`[¶](#wx.DirDialog.Message "Permalink to this definition")See [`GetMessage`](#wx.DirDialog.GetMessage "wx.DirDialog.GetMessage") and [`SetMessage`](#wx.DirDialog.SetMessage "wx.DirDialog.SetMessage")
    Path: str  # `Path`[¶](#wx.DirDialog.Path "Permalink to this definition")See [`GetPath`](#wx.DirDialog.GetPath "wx.DirDialog.GetPath") and [`SetPath`](#wx.DirDialog.SetPath "wx.DirDialog.SetPath")



DD_DEFAULT_STYLE: int  # Equivalent to a combination of wx.DEFAULT_DIALOG_STYLE and wx.RESIZE_BORDER.

DD_DIR_MUST_EXIST: int  # The dialog will allow the user to choose only an existing folder. When this style is not given, a “Create new directory” button is added to the dialog (on Windows) or some other way is provided to the user to type the name of a new folder.

DD_CHANGE_DIR: int  # Change the current working directory to the directory chosen by the user. This flag cannot be used with the  DD_MULTIPLE   style.

DD_MULTIPLE: int  # Allow the user to select multiple directories. This flag is only available since wxWidgets 3.1.4

DD_SHOW_HIDDEN: int  # Show hidden and system folders. This flag is only available since wxWidgets 3.1.4 ^^

class DirFilterListCtrl(Choice):
    """ **Possible constructors**:



```
DirFilterListCtrl()

DirFilterListCtrl(parent, id=ID_ANY, pos=DefaultPosition,
                  size=DefaultSize, style=0)

```


  


        Source: https://docs.wxpython.org/wx.DirFilterListCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DirFilterListCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0)*



Parameters
* **parent** ([*wx.GenericDirCtrl*](wx.GenericDirCtrl.html#wx.GenericDirCtrl "wx.GenericDirCtrl")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –






---

  





            Source: https://docs.wxpython.org/wx.DirFilterListCtrl.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*)[¶](#wx.DirFilterListCtrl.Create "Permalink to this definition")

Parameters
* **parent** ([*wx.GenericDirCtrl*](wx.GenericDirCtrl.html#wx.GenericDirCtrl "wx.GenericDirCtrl")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DirFilterListCtrl.html
        """

    def FillFilterList(self, filter, defaultFilter) -> None:
        """ 

`FillFilterList`(*self*, *filter*, *defaultFilter*)[¶](#wx.DirFilterListCtrl.FillFilterList "Permalink to this definition")

Parameters
* **filter** (*string*) –
* **defaultFilter** (*int*) –






            Source: https://docs.wxpython.org/wx.DirFilterListCtrl.html
        """

    def Init(self) -> None:
        """ 

`Init`(*self*)[¶](#wx.DirFilterListCtrl.Init "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DirFilterListCtrl.html
        """



class DirPickerCtrl(PickerBase):
    """ **Possible constructors**:



```
DirPickerCtrl()

DirPickerCtrl(parent, id=ID_ANY, path="",
              message=DirSelectorPromptStr, pos=DefaultPosition, size=DefaultSize,
              style=DIRP_DEFAULT_STYLE, validator=DefaultValidator,
              name=DirPickerCtrlNameStr)

```


This control allows the user to select a directory.


  


        Source: https://docs.wxpython.org/wx.DirPickerCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DirPickerCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, path=””, message=DirSelectorPromptStr, pos=DefaultPosition, size=DefaultSize, style=DIRP\_DEFAULT\_STYLE, validator=DefaultValidator, name=DirPickerCtrlNameStr)*


Initializes the object and calls [`Create`](#wx.DirPickerCtrl.Create "wx.DirPickerCtrl.Create") with all the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **path** (*string*) –
* **message** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.DirPickerCtrl.html
        """

    def Create(self, parent, id=ID_ANY, path="", message=DirSelectorPromptStr, pos=DefaultPosition, size=DefaultSize, style=DIRP_DEFAULT_STYLE, validator=DefaultValidator, name=DirPickerCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *path=""*, *message=DirSelectorPromptStr*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DIRP\_DEFAULT\_STYLE*, *validator=DefaultValidator*, *name=DirPickerCtrlNameStr*)[¶](#wx.DirPickerCtrl.Create "Permalink to this definition")
Creates the widgets with the given parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window, must not be not `None`.
* **id** (*wx.WindowID*) – The identifier for the control.
* **path** (*string*) – The initial directory shown in the control. Must be a valid path to a directory or the empty string.
* **message** (*string*) – The message shown to the user in the  [wx.DirDialog](wx.DirDialog.html#wx-dirdialog) shown by the control.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Initial position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Initial size.
* **style** (*long*) – The window style, see `DIRP_` flags.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Validator which can be used for additional data checks.
* **name** (*string*) – Control name.



Return type
*bool*



Returns
`True` if the control was successfully created or `False` if creation failed.






            Source: https://docs.wxpython.org/wx.DirPickerCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.DirPickerCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.DirPickerCtrl.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.DirPickerCtrl.GetPath "Permalink to this definition")
Returns the absolute path of the currently selected directory.



Return type
`string`






            Source: https://docs.wxpython.org/wx.DirPickerCtrl.html
        """

    def SetInitialDirectory(self, dir: str) -> None:
        """ 

`SetInitialDirectory`(*self*, *dir*)[¶](#wx.DirPickerCtrl.SetInitialDirectory "Permalink to this definition")
Set the directory to show when starting to browse for directories.


This function is mostly useful for the directory picker controls which have no selection initially to configure the directory that should be shown if the user starts browsing for directories as otherwise the initially selected directory is used, which is usually the desired behaviour and so the directory specified by this function is ignored in this case.



Parameters
**dir** (*string*) – 





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.DirPickerCtrl.html
        """

    def SetPath(self, dirname: str) -> None:
        """ 

`SetPath`(*self*, *dirname*)[¶](#wx.DirPickerCtrl.SetPath "Permalink to this definition")
Sets the absolute path of the currently selected directory.


If the control uses `DIRP_DIR_MUST_EXIST` and does not use `DIRP_USE_TEXTCTRL` style, the *dirname* must be a name of an existing directory and will be simply ignored by the native wxGTK implementation if this is not the case.



Parameters
**dirname** (*string*) – 






            Source: https://docs.wxpython.org/wx.DirPickerCtrl.html
        """

    Path: str  # `Path`[¶](#wx.DirPickerCtrl.Path "Permalink to this definition")See [`GetPath`](#wx.DirPickerCtrl.GetPath "wx.DirPickerCtrl.GetPath") and [`SetPath`](#wx.DirPickerCtrl.SetPath "wx.DirPickerCtrl.SetPath")



DIRP_DEFAULT_STYLE: int  # The default style: includes wx.DIRP_DIR_MUST_EXIST and, under wxMSW only, wx.DIRP_USE_TEXTCTRL.

DIRP_USE_TEXTCTRL: int  # Creates a text control to the left of the picker button which is completely managed by the   wx.DirPickerCtrl  and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button’s value. Use functions defined in   wx.PickerBase  to modify the text control.

DIRP_DIR_MUST_EXIST: int  # Creates a picker which allows selecting only existing directories in the popup   wx.DirDialog. Notice that, as with  FLP_FILE_MUST_EXIST , it is still possible to enter a non-existent directory even when this file is specified if   DIRP_USE_TEXTCTRL   style is also used. Also note that if   DIRP_USE_TEXTCTRL   is not used, the native wxGTK implementation always uses this style as it doesn’t support selecting non-existent directories.

DIRP_CHANGE_DIR: int  # Change current working directory on each user directory selection change.

DIRP_SMALL: int  # Use smaller version of the control with a small “…” button instead of the normal “Browse” one. This flag is new since wxWidgets 2.9.3. ^^

EVT_DIRPICKER_CHANGED: int  # The user changed the directory selected in the control either using the button or using text control (see wx.DIRP_USE_TEXTCTRL; note that in this case the event is fired only if the user’s input is valid, e.g. an existing directory path). ^^

class Display:
    """ **Possible constructors**:



```
Display()

Display(index)

Display(window)

```


Determines the sizes and locations of displays connected to the
system.


  


        Source: https://docs.wxpython.org/wx.Display.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Display.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor creating  [wx.Display](#wx-display) object representing the primary display.




---

  



**\_\_init\_\_** *(self, index)*


Constructor, setting up a  [wx.Display](#wx-display) instance with the specified display.



Parameters
**index** (*int*) – The index of the display to use. This must be non-negative and lower than the value returned by [`GetCount`](#wx.Display.GetCount "wx.Display.GetCount") .






---

  



**\_\_init\_\_** *(self, window)*


Constructor creating the display object associated with the given window.


This is the most convenient way of finding the display on which the given window is shown while falling back to the default display if it is not shown at all or positioned outside of any display.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – A valid, i.e. non-null, window.





New in version 4.1/wxWidgets-3.1.2.




See also


[`GetFromWindow`](#wx.Display.GetFromWindow "wx.Display.GetFromWindow")





---

  





            Source: https://docs.wxpython.org/wx.Display.html
        """

    def ChangeMode(self, mode: 'VideoMode'=DefaultVideoMode) -> bool:
        """ 

`ChangeMode`(*self*, *mode=DefaultVideoMode*)[¶](#wx.Display.ChangeMode "Permalink to this definition")
Changes the video mode of this display to the mode specified in the mode parameter.


If DefaultVideoMode is passed in as the mode parameter, the defined behaviour is that  [wx.Display](#wx-display) will reset the video mode to the default mode used by the display. On Windows, the behaviour is normal. However, there are differences on other platforms. On Unix variations using X11 extensions it should behave as defined, but some irregularities may occur.



Parameters
**mode** ([*wx.VideoMode*](wx.VideoMode.html#wx.VideoMode "wx.VideoMode")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Display.html
        """

    def GetClientArea(self) -> 'Rect':
        """ 

`GetClientArea`(*self*)[¶](#wx.Display.GetClientArea "Permalink to this definition")
Returns the client area of the display.


The client area is the part of the display available for the normal (non full screen) windows, usually it is the same as [`GetGeometry`](#wx.Display.GetGeometry "wx.Display.GetGeometry") but it could be less if there is a taskbar (or equivalent) on this display.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Display.html
        """

    @staticmethod
    def GetCount() -> int:
        """ 

*static* `GetCount`()[¶](#wx.Display.GetCount "Permalink to this definition")
Returns the number of connected displays.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Display.html
        """

    def GetCurrentMode(self) -> 'VideoMode':
        """ 

`GetCurrentMode`(*self*)[¶](#wx.Display.GetCurrentMode "Permalink to this definition")
Returns the current video mode that this display is in.



Return type
 [wx.VideoMode](wx.VideoMode.html#wx-videomode)






            Source: https://docs.wxpython.org/wx.Display.html
        """

    @staticmethod
    def GetFromPoint(pt: Union[tuple[int, int], 'Point']) -> int:
        """ 

*static* `GetFromPoint`(*pt*)[¶](#wx.Display.GetFromPoint "Permalink to this definition")
Returns the index of the display on which the given point lies, or `NOT_FOUND` if the point is not on any connected display.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The point to locate.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Display.html
        """

    @staticmethod
    def GetFromWindow(win: 'Window') -> int:
        """ 

*static* `GetFromWindow`(*win*)[¶](#wx.Display.GetFromWindow "Permalink to this definition")
Returns the index of the display on which the given window lies.


If the window is on more than one display it gets the display that overlaps the window the most.


Returns `NOT_FOUND` if the window is not on any connected display.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window to locate.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Display.html
        """

    def GetGeometry(self) -> 'Rect':
        """ 

`GetGeometry`(*self*)[¶](#wx.Display.GetGeometry "Permalink to this definition")
Returns the bounding rectangle of the display whose index was passed to the constructor.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)





See also


[`GetClientArea`](#wx.Display.GetClientArea "wx.Display.GetClientArea") , [`wx.DisplaySize`](wx.functions.html#wx.DisplaySize "wx.DisplaySize")





            Source: https://docs.wxpython.org/wx.Display.html
        """

    def GetModes(self, mode: 'VideoMode'=DefaultVideoMode) -> 'ArrayVideoModes':
        """ 

`GetModes`(*self*, *mode=DefaultVideoMode*)[¶](#wx.Display.GetModes "Permalink to this definition")
Fills and returns an array with all the video modes that are supported by this display, or video modes that are supported by this display and match the mode parameter (if mode is not DefaultVideoMode).



Parameters
**mode** ([*wx.VideoMode*](wx.VideoMode.html#wx.VideoMode "wx.VideoMode")) – 



Return type
*ArrayVideoModes*






            Source: https://docs.wxpython.org/wx.Display.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.Display.GetName "Permalink to this definition")
Returns the display’s name.


The returned value is currently an empty string under all platforms except MSW.



Return type
`string`






            Source: https://docs.wxpython.org/wx.Display.html
        """

    def GetPPI(self) -> 'Size':
        """ 

`GetPPI`(*self*)[¶](#wx.Display.GetPPI "Permalink to this definition")
Returns display resolution in pixels per inch.


Horizontal and vertical resolution are returned in `x` and `y` components of the  [wx.Size](wx.Size.html#wx-size) object respectively.


If the resolution information is not available, returns:



```
wx.Size(0, 0)

```



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.Display.html
        """

    def GetScaleFactor(self) -> float:
        """ 

`GetScaleFactor`(*self*)[¶](#wx.Display.GetScaleFactor "Permalink to this definition")
Returns scaling factor used by this display.


The scaling factor is the ratio between [`GetPPI`](#wx.Display.GetPPI "wx.Display.GetPPI") and [`GetStdPPI`](#wx.Display.GetStdPPI "wx.Display.GetStdPPI") (it is implicitly assumed that this ratio is the same for both horizontal and vertical components).



Return type
*float*





New in version 4.1/wxWidgets-3.1.5.




See also


[`wx.Window.GetContentScaleFactor`](wx.Window.html#wx.Window.GetContentScaleFactor "wx.Window.GetContentScaleFactor") , [`wx.Window.GetDPIScaleFactor`](wx.Window.html#wx.Window.GetDPIScaleFactor "wx.Window.GetDPIScaleFactor")





            Source: https://docs.wxpython.org/wx.Display.html
        """

    @staticmethod
    def GetStdPPI() -> 'Size':
        """ 

*static* `GetStdPPI`()[¶](#wx.Display.GetStdPPI "Permalink to this definition")
Returns default display resolution for the current platform as  [wx.Size](wx.Size.html#wx-size).


This function is equivalent to constructing  [wx.Size](wx.Size.html#wx-size) object with both components set to [`GetStdPPIValue`](#wx.Display.GetStdPPIValue "wx.Display.GetStdPPIValue") .



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.Display.html
        """

    @staticmethod
    def GetStdPPIValue() -> int:
        """ 

*static* `GetStdPPIValue`()[¶](#wx.Display.GetStdPPIValue "Permalink to this definition")
Returns default display resolution for the current platform in pixels per inch.


This function mostly used internally, use [`GetPPI`](#wx.Display.GetPPI "wx.Display.GetPPI") to get the actual display resolution.


Currently the standard `PPI` is the same in both horizontal and vertical directions on all platforms and its value is 96 everywhere except under Apple devices (those running macOS, iOS, watchOS etc), where it is 72.



Return type
*int*





New in version 4.1/wxWidgets-3.1.5.




See also


[`GetStdPPI`](#wx.Display.GetStdPPI "wx.Display.GetStdPPI")





            Source: https://docs.wxpython.org/wx.Display.html
        """

    def IsPrimary(self) -> bool:
        """ 

`IsPrimary`(*self*)[¶](#wx.Display.IsPrimary "Permalink to this definition")
Returns `True` if the display is the primary display.


The primary display is the one whose index is 0.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Display.html
        """

    ClientArea: 'Rect'  # `ClientArea`[¶](#wx.Display.ClientArea "Permalink to this definition")See [`GetClientArea`](#wx.Display.GetClientArea "wx.Display.GetClientArea")
    CurrentMode: 'VideoMode'  # `CurrentMode`[¶](#wx.Display.CurrentMode "Permalink to this definition")See [`GetCurrentMode`](#wx.Display.GetCurrentMode "wx.Display.GetCurrentMode")
    Geometry: 'Rect'  # `Geometry`[¶](#wx.Display.Geometry "Permalink to this definition")See [`GetGeometry`](#wx.Display.GetGeometry "wx.Display.GetGeometry")
    Name: str  # `Name`[¶](#wx.Display.Name "Permalink to this definition")See [`GetName`](#wx.Display.GetName "wx.Display.GetName")



class DisplayChangedEvent(Event):
    """ **Possible constructors**:



```
DisplayChangedEvent()

```


A display changed event is sent to top-level windows when the display
resolution has changed.


  


        Source: https://docs.wxpython.org/wx.DisplayChangedEvent.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.DisplayChangedEvent.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.DisplayChangedEvent.html
        """



EVT_DISPLAY_CHANGED: int  # Process a  wxEVT_DISPLAY_CHANGED   event. ^^

class DPIChangedEvent(Event):
    """ Event sent when the display scale factor or pixel density (measured in
dots-per-inch, or `DPI`) of the monitor a window is on changes.


  


        Source: https://docs.wxpython.org/wx.DPIChangedEvent.html
    """
    def GetNewDPI(self) -> 'Size':
        """ 

`GetNewDPI`(*self*)[¶](#wx.DPIChangedEvent.GetNewDPI "Permalink to this definition")
Returns the new `DPI`.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.DPIChangedEvent.html
        """

    def GetOldDPI(self) -> 'Size':
        """ 

`GetOldDPI`(*self*)[¶](#wx.DPIChangedEvent.GetOldDPI "Permalink to this definition")
Returns the old `DPI`.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.DPIChangedEvent.html
        """

    def Scale(self, sz: Union[tuple[int, int], 'Size']) -> 'Size':
        """ 

`Scale`(*self*, *sz*)[¶](#wx.DPIChangedEvent.Scale "Permalink to this definition")
Rescale a value in pixels to match the new `DPI`.


This is a convenience function to use in wxEVT\_DPI\_CHANGED event handlers, as they often need to update some sizes to the new `DPI`. It simply calls `MulDivInt32` with new and old `DPI` values, but is more readable and less error-prone.


For example, the returned value will be twice bigger than the original one when switching from normal (96) `DPI` to high (2x, 192) `DPI`.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.DPIChangedEvent.html
        """

    def ScaleX(self, x: int) -> int:
        """ 

`ScaleX`(*self*, *x*)[¶](#wx.DPIChangedEvent.ScaleX "Permalink to this definition")
Rescale horizontal component to match the new `DPI`.


This is the same as [`Scale`](#wx.DPIChangedEvent.Scale "wx.DPIChangedEvent.Scale") , but for the horizontal component only.



Parameters
**x** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.DPIChangedEvent.html
        """

    def ScaleY(self, y: int) -> int:
        """ 

`ScaleY`(*self*, *y*)[¶](#wx.DPIChangedEvent.ScaleY "Permalink to this definition")
Rescale vertical component to match the new `DPI`.


This is the same as [`Scale`](#wx.DPIChangedEvent.Scale "wx.DPIChangedEvent.Scale") , but for the vertical component only.



Parameters
**y** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.DPIChangedEvent.html
        """

    NewDPI: 'Size'  # `NewDPI`[¶](#wx.DPIChangedEvent.NewDPI "Permalink to this definition")See [`GetNewDPI`](#wx.DPIChangedEvent.GetNewDPI "wx.DPIChangedEvent.GetNewDPI")
    OldDPI: 'Size'  # `OldDPI`[¶](#wx.DPIChangedEvent.OldDPI "Permalink to this definition")See [`GetOldDPI`](#wx.DPIChangedEvent.GetOldDPI "wx.DPIChangedEvent.GetOldDPI")



EVT_DPI_CHANGED: int  # Process a  wxEVT_DPI_CHANGED   event. ^^

class DragImage(Object):
    """ **Possible constructors**:



```
DragImage()

DragImage(image, cursor=NullCursor)

DragImage(image, cursor=NullCursor)

DragImage(text, cursor=NullCursor)

DragImage(treeCtrl, id)

DragImage(listCtrl, id)

```


This class is used when you wish to drag an object on the screen, and
a simple cursor is not enough.


  


        Source: https://docs.wxpython.org/wx.DragImage.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DragImage.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, image, cursor=NullCursor)*


Constructs a drag image from a bitmap and optional cursor.



Parameters
* **image** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – Bitmap to be used as the drag image. The bitmap can have a mask.
* **cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – Optional cursor to combine with the image.






---

  



**\_\_init\_\_** *(self, image, cursor=NullCursor)*


Constructs a drag image from an icon and optional cursor.



Parameters
* **image** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – Icon to be used as the drag image.
* **cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – Optional cursor to combine with the image.






---

  



**\_\_init\_\_** *(self, text, cursor=NullCursor)*


Constructs a drag image from a text string and optional cursor.



Parameters
* **text** (*string*) – Text used to construct a drag image.
* **cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – Optional cursor to combine with the image.






---

  



**\_\_init\_\_** *(self, treeCtrl, id)*


Constructs a drag image from the text in the given tree control item, and optional cursor.



Parameters
* **treeCtrl** ([*wx.TreeCtrl*](wx.TreeCtrl.html#wx.TreeCtrl "wx.TreeCtrl")) – Tree control for constructing a tree drag image.
* **id** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – Tree control item id.






---

  



**\_\_init\_\_** *(self, listCtrl, id)*


Constructs a drag image from the text in the given list control item, and optional cursor.



Parameters
* **listCtrl** ([*wx.ListCtrl*](wx.ListCtrl.html#wx.ListCtrl "wx.ListCtrl")) – List control for constructing a list drag image.
* **id** (*long*) – List control item id.






---

  





            Source: https://docs.wxpython.org/wx.DragImage.html
        """

    def BeginDrag(self, *args, **kw) -> bool:
        """ 

`BeginDrag`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DragImage.BeginDrag "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**BeginDrag** *(self, hotspot, window, fullScreen=False, rect=None)*


Start dragging the image, in a window or full screen.


You need to then call [`Show`](#wx.DragImage.Show "wx.DragImage.Show") and [`Move`](#wx.DragImage.Move "wx.DragImage.Move") to show the image on the screen. Call [`EndDrag`](#wx.DragImage.EndDrag "wx.DragImage.EndDrag") when the drag has finished.


Note that this call automatically calls CaptureMouse().



Parameters
* **hotspot** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The location of the drag position relative to the upper-left corner of the image.
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window that captures the mouse, and within which the dragging is limited unless fullScreen is `True`.
* **fullScreen** (*bool*) – If `True`, specifies that the drag will be visible over the full screen, or over as much of the screen as is specified by rect. Note that the mouse will still be captured in window.
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – If not `None`, specifies the rectangle (in screen coordinates) that bounds the dragging operation. Specifying this can make the operation more efficient by cutting down on the area under consideration, and it can also make a visual difference since the drag is clipped to this area.



Return type
*bool*






---

  



**BeginDrag** *(self, hotspot, window, boundingWindow)*


Start dragging the image, using the first window to capture the mouse and the second to specify the bounding area.


This form is equivalent to using the first form, but more convenient than working out the bounding rectangle explicitly.


You need to then call [`Show`](#wx.DragImage.Show "wx.DragImage.Show") and [`Move`](#wx.DragImage.Move "wx.DragImage.Move") to show the image on the screen. Call [`EndDrag`](#wx.DragImage.EndDrag "wx.DragImage.EndDrag") when the drag has finished.


Note that this call automatically calls CaptureMouse().



Parameters
* **hotspot** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The location of the drag position relative to the upper-left corner of the image.
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window that captures the mouse, and within which the dragging is limited.
* **boundingWindow** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Specifies the area within which the drag occurs.



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.DragImage.html
        """

    def EndDrag(self) -> bool:
        """ 

`EndDrag`(*self*)[¶](#wx.DragImage.EndDrag "Permalink to this definition")
Call this when the drag has finished.



Return type
*bool*





Note


This function automatically releases mouse capture.





            Source: https://docs.wxpython.org/wx.DragImage.html
        """

    def Hide(self) -> bool:
        """ 

`Hide`(*self*)[¶](#wx.DragImage.Hide "Permalink to this definition")
Hides the image.


You may wish to call this before updating the window contents (perhaps highlighting an item). Then call [`Move`](#wx.DragImage.Move "wx.DragImage.Move") and [`Show`](#wx.DragImage.Show "wx.DragImage.Show") .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DragImage.html
        """

    def Move(self, pt: Union[tuple[int, int], 'Point']) -> bool:
        """ 

`Move`(*self*, *pt*)[¶](#wx.DragImage.Move "Permalink to this definition")
Call this to move the image to a new position.


The image will only be shown if [`Show`](#wx.DragImage.Show "wx.DragImage.Show") has been called previously (for example at the start of the drag).



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The position in client coordinates (relative to the window specified in [`BeginDrag`](#wx.DragImage.BeginDrag "wx.DragImage.BeginDrag") ).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DragImage.html
        """

    def Show(self) -> bool:
        """ 

`Show`(*self*)[¶](#wx.DragImage.Show "Permalink to this definition")
Shows the image.


Call this at least once when dragging.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DragImage.html
        """



class DropFilesEvent(Event):
    """ **Possible constructors**:



```
DropFilesEvent(id=0, files=None)

```


This class is used for drop files events, that is, when files have
been dropped onto the window.


  


        Source: https://docs.wxpython.org/wx.DropFilesEvent.html
    """
    def __init__(self, id=0, files=None) -> None:
        """ 

`__init__`(*self*, *id=0*, *files=None*)[¶](#wx.DropFilesEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **id** (*wx.EventType*) –
* **noFiles** (*int*) –
* **files** (*string*) –






            Source: https://docs.wxpython.org/wx.DropFilesEvent.html
        """

    def GetFiles(self) -> Any:
        """ 

`GetFiles`(*self*)[¶](#wx.DropFilesEvent.GetFiles "Permalink to this definition")
Returns an array of filenames.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.DropFilesEvent.html
        """

    def GetNumberOfFiles(self) -> int:
        """ 

`GetNumberOfFiles`(*self*)[¶](#wx.DropFilesEvent.GetNumberOfFiles "Permalink to this definition")
Returns the number of files dropped.



Return type
*int*






            Source: https://docs.wxpython.org/wx.DropFilesEvent.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.DropFilesEvent.GetPosition "Permalink to this definition")
Returns the position at which the files were dropped.


Returns an array of filenames.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.DropFilesEvent.html
        """

    Files: Any  # `Files`[¶](#wx.DropFilesEvent.Files "Permalink to this definition")See [`GetFiles`](#wx.DropFilesEvent.GetFiles "wx.DropFilesEvent.GetFiles")
    NumberOfFiles: int  # `NumberOfFiles`[¶](#wx.DropFilesEvent.NumberOfFiles "Permalink to this definition")See [`GetNumberOfFiles`](#wx.DropFilesEvent.GetNumberOfFiles "wx.DropFilesEvent.GetNumberOfFiles")
    Position: 'Point'  # `Position`[¶](#wx.DropFilesEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.DropFilesEvent.GetPosition "wx.DropFilesEvent.GetPosition")



_DataObject: TypeAlias = DataObject

class DropSource:
    """ **Possible constructors**:



```
DropSource(win=None)

DropSource(data, win=None)

```


This class represents a source for a drag and drop operation.


  


        Source: https://docs.wxpython.org/wx.DropSource.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.DropSource.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, win=None)*


This constructor requires that you must call [`SetData`](#wx.DropSource.SetData "wx.DropSource.SetData") later.


Note that the type of *iconCopy* and subsequent parameters differs between different ports: these are cursors under Windows and OS X but icons for GTK. You should use the macro `DROP_ICON` in portable programs instead of directly using either of these types.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window which initiates the drag and drop operation.





Availability


Only available for MSW, OSX.





---

  



**\_\_init\_\_** *(self, data, win=None)*


The constructor taking a  [wx.DataObject](wx.DataObject.html#wx-dataobject).


Note that the type of *iconCopy* and subsequent parameters differs between different ports: these are cursors under Windows and OS X but icons for GTK. You should use the macro `DROP_ICON` in portable programs instead of directly using either of these types.



Parameters
* **data** ([*wx.DataObject*](wx.DataObject.html#wx.DataObject "wx.DataObject")) – The data associated with the drop source.
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window which initiates the drag and drop operation.





Availability


Only available for MSW, OSX.





---

  





            Source: https://docs.wxpython.org/wx.DropSource.html
        """

    def DoDragDrop(self, flags: int=Drag_CopyOnly) -> 'DragResult':
        """ 

`DoDragDrop`(*self*, *flags=Drag\_CopyOnly*)[¶](#wx.DropSource.DoDragDrop "Permalink to this definition")
Starts the drag-and-drop operation which will terminate when the user releases the mouse.


Call this in response to a mouse button press, for example.



Parameters
**flags** (*int*) – If `wx.Drag_AllowMove` is included in the flags, data may be moved and not only copied as is the case for the default `wx.Drag_CopyOnly` . If `wx.Drag_DefaultMove` is specified (which includes the previous flag), moving is not only possible but becomes the default operation.



Return type
 [wx.DragResult](wx.DragResult.enumeration.html#wx-dragresult)



Returns
The operation requested by the user, may be `wx.DragCopy` , `wx.DragMove` , `wx.DragLink` , `wx.DragCancel` or `wx.DragNone` if an error occurred.






            Source: https://docs.wxpython.org/wx.DropSource.html
        """

    def GetDataObject(self) -> 'DataObject':
        """ 

`GetDataObject`(*self*)[¶](#wx.DropSource.GetDataObject "Permalink to this definition")
Returns the  [wx.DataObject](wx.DataObject.html#wx-dataobject) object that has been assigned previously.



Return type
 [wx.DataObject](wx.DataObject.html#wx-dataobject)






            Source: https://docs.wxpython.org/wx.DropSource.html
        """

    def GiveFeedback(self, effect: DragResult) -> bool:
        """ 

`GiveFeedback`(*self*, *effect*)[¶](#wx.DropSource.GiveFeedback "Permalink to this definition")
You may give some custom UI feedback during the drag and drop operation by overriding this function.


It is called on each mouse move, so your implementation must not be too slow.



Parameters
**effect** ([*DragResult*](wx.DragResult.enumeration.html "DragResult")) – The effect to implement. One of `wx.DragCopy` , `wx.DragMove` , `wx.DragLink` and `wx.DragNone` .



Return type
*bool*



Returns
`False` if you want default feedback, or `True` if you implement your own feedback. The return value is ignored under GTK.






            Source: https://docs.wxpython.org/wx.DropSource.html
        """

    def SetCursor(self, res, cursor) -> None:
        """ 

`SetCursor`(*self*, *res*, *cursor*)[¶](#wx.DropSource.SetCursor "Permalink to this definition")
Set the icon to use for a certain drag result.



Parameters
* **res** ([*DragResult*](wx.DragResult.enumeration.html "DragResult")) – The drag result to set the icon for.
* **cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – The icon to show when this drag result occurs.




MSW, *OSX/Cocoa* ports.



Availability


Only available for MSW, OSX.





            Source: https://docs.wxpython.org/wx.DropSource.html
        """

    def SetData(self, data: 'DataObject') -> None:
        """ 

`SetData`(*self*, *data*)[¶](#wx.DropSource.SetData "Permalink to this definition")
Sets the data  [wx.DataObject](wx.DataObject.html#wx-dataobject) associated with the drop source.


This will not delete any previously associated data.



Parameters
**data** ([*wx.DataObject*](wx.DataObject.html#wx.DataObject "wx.DataObject")) – 






            Source: https://docs.wxpython.org/wx.DropSource.html
        """

    def SetIcon(self, res, icon) -> None:
        """ 

`SetIcon`(*self*, *res*, *icon*)[¶](#wx.DropSource.SetIcon "Permalink to this definition")
Set the icon to use for a certain drag result.



Parameters
* **res** ([*DragResult*](wx.DragResult.enumeration.html "DragResult")) – The drag result to set the icon for.
* **icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – The icon to show when this drag result occurs.




GTK port.



Availability


Only available for GTK.





            Source: https://docs.wxpython.org/wx.DropSource.html
        """

    DataObject: '_DataObject'  # `DataObject`[¶](#wx.DropSource.DataObject "Permalink to this definition")See [`GetDataObject`](#wx.DropSource.GetDataObject "wx.DropSource.GetDataObject")



class DropTarget:
    """ **Possible constructors**:



```
DropTarget(data=None)

```


This class represents a target for a drag and drop operation.


  


        Source: https://docs.wxpython.org/wx.DropTarget.html
    """
    def __init__(self, data: Optional['DataObject']=None) -> None:
        """ 

`__init__`(*self*, *data=None*)[¶](#wx.DropTarget.__init__ "Permalink to this definition")
Constructor.


*data* is the data to be associated with the drop target.



Parameters
**data** ([*wx.DataObject*](wx.DataObject.html#wx.DataObject "wx.DataObject")) – 






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def GetData(self) -> bool:
        """ 

`GetData`(*self*)[¶](#wx.DropTarget.GetData "Permalink to this definition")
This method may only be called from within [`OnData`](#wx.DropTarget.OnData "wx.DropTarget.OnData") .


By default, this method copies the data from the drop source to the  [wx.DataObject](wx.DataObject.html#wx-dataobject) associated with this drop target, calling its [`wx.DataObject.SetData`](wx.DataObject.html#wx.DataObject.SetData "wx.DataObject.SetData") method.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def GetDataObject(self) -> 'DataObject':
        """ 

`GetDataObject`(*self*)[¶](#wx.DropTarget.GetDataObject "Permalink to this definition")
Returns the data  [wx.DataObject](wx.DataObject.html#wx-dataobject) associated with the drop target.



Return type
 [wx.DataObject](wx.DataObject.html#wx-dataobject)






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def GetDefaultAction(self) -> 'DragResult':
        """ 

`GetDefaultAction`(*self*)[¶](#wx.DropTarget.GetDefaultAction "Permalink to this definition")
Returns default action for drag and drop or DragNone if this not specified.



Return type
 [wx.DragResult](wx.DragResult.enumeration.html#wx-dragresult)






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def OnData(self, x, y, defResult) -> 'DragResult':
        """ 

`OnData`(*self*, *x*, *y*, *defResult*)[¶](#wx.DropTarget.OnData "Permalink to this definition")
Called after [`OnDrop`](#wx.DropTarget.OnDrop "wx.DropTarget.OnDrop") returns `True`.


By default this will usually [`GetData`](#wx.DropTarget.GetData "wx.DropTarget.GetData") and will return the suggested default value *defResult*.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **defResult** ([*DragResult*](wx.DragResult.enumeration.html "DragResult")) –



Return type
 [wx.DragResult](wx.DragResult.enumeration.html#wx-dragresult)






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def OnDragOver(self, x, y, defResult) -> 'DragResult':
        """ 

`OnDragOver`(*self*, *x*, *y*, *defResult*)[¶](#wx.DropTarget.OnDragOver "Permalink to this definition")
Called when the mouse is being dragged over the drop target.


By default, this calls functions return the suggested return value *defResult*.



Parameters
* **x** (*int*) – The x coordinate of the mouse.
* **y** (*int*) – The y coordinate of the mouse.
* **defResult** ([*DragResult*](wx.DragResult.enumeration.html "DragResult")) – Suggested value for return value. Determined by `SHIFT` or `CONTROL` key states.



Return type
 [wx.DragResult](wx.DragResult.enumeration.html#wx-dragresult)



Returns
The desired operation or DragNone. This is used for optical feedback from the side of the drop source, typically in form of changing the icon.






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def OnDrop(self, x, y) -> bool:
        """ 

`OnDrop`(*self*, *x*, *y*)[¶](#wx.DropTarget.OnDrop "Permalink to this definition")
Called when the user drops a data object on the target.


Return `False` to veto the operation.



Parameters
* **x** (*int*) – The x coordinate of the mouse.
* **y** (*int*) – The y coordinate of the mouse.



Return type
*bool*



Returns
`True` to accept the data, or `False` to veto the operation.






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def OnEnter(self, x, y, defResult) -> 'DragResult':
        """ 

`OnEnter`(*self*, *x*, *y*, *defResult*)[¶](#wx.DropTarget.OnEnter "Permalink to this definition")
Called when the mouse enters the drop target.


By default, this calls [`OnDragOver`](#wx.DropTarget.OnDragOver "wx.DropTarget.OnDragOver") .



Parameters
* **x** (*int*) – The x coordinate of the mouse.
* **y** (*int*) – The y coordinate of the mouse.
* **defResult** ([*DragResult*](wx.DragResult.enumeration.html "DragResult")) – Suggested default for return value. Determined by `SHIFT` or `CONTROL` key states.



Return type
 [wx.DragResult](wx.DragResult.enumeration.html#wx-dragresult)



Returns
The desired operation or DragNone. This is used for optical feedback from the side of the drop source, typically in form of changing the icon.






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def OnLeave(self) -> None:
        """ 

`OnLeave`(*self*)[¶](#wx.DropTarget.OnLeave "Permalink to this definition")
Called when the mouse leaves the drop target.




            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def SetDataObject(self, data: 'DataObject') -> None:
        """ 

`SetDataObject`(*self*, *data*)[¶](#wx.DropTarget.SetDataObject "Permalink to this definition")
Sets the data  [wx.DataObject](wx.DataObject.html#wx-dataobject) associated with the drop target and deletes any previously associated data object.



Parameters
**data** ([*wx.DataObject*](wx.DataObject.html#wx.DataObject "wx.DataObject")) – 






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    def SetDefaultAction(self, action: DragResult) -> None:
        """ 

`SetDefaultAction`(*self*, *action*)[¶](#wx.DropTarget.SetDefaultAction "Permalink to this definition")
Sets the default action for drag and drop.


Use DragMove or DragCopy to set default action to move or copy and use DragNone (default) to set default action specified by initialization of dragging (see [`wx.DropSource.DoDragDrop`](wx.DropSource.html#wx.DropSource.DoDragDrop "wx.DropSource.DoDragDrop") )



Parameters
**action** ([*DragResult*](wx.DragResult.enumeration.html "DragResult")) – 






            Source: https://docs.wxpython.org/wx.DropTarget.html
        """

    Data: bool  # `Data`[¶](#wx.DropTarget.Data "Permalink to this definition")See [`GetData`](#wx.DropTarget.GetData "wx.DropTarget.GetData")
    DataObject: '_DataObject'  # `DataObject`[¶](#wx.DropTarget.DataObject "Permalink to this definition")See [`GetDataObject`](#wx.DropTarget.GetDataObject "wx.DropTarget.GetDataObject") and [`SetDataObject`](#wx.DropTarget.SetDataObject "wx.DropTarget.SetDataObject")
    DefaultAction: 'DragResult'  # `DefaultAction`[¶](#wx.DropTarget.DefaultAction "Permalink to this definition")See [`GetDefaultAction`](#wx.DropTarget.GetDefaultAction "wx.DropTarget.GetDefaultAction") and [`SetDefaultAction`](#wx.DropTarget.SetDefaultAction "wx.DropTarget.SetDefaultAction")



_DC: TypeAlias = DC

class EraseEvent(Event):
    """ **Possible constructors**:



```
EraseEvent(id=0, dc=None)

```


An erase event is sent when a window’s background needs to be
repainted.


  


        Source: https://docs.wxpython.org/wx.EraseEvent.html
    """
    def __init__(self, id=0, dc=None) -> None:
        """ 

`__init__`(*self*, *id=0*, *dc=None*)[¶](#wx.EraseEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **id** (*int*) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –






            Source: https://docs.wxpython.org/wx.EraseEvent.html
        """

    def GetDC(self) -> 'DC':
        """ 

`GetDC`(*self*)[¶](#wx.EraseEvent.GetDC "Permalink to this definition")
Returns the device context associated with the erase event to draw on.


The returned pointer is never `None`.



Return type
 [wx.DC](wx.DC.html#wx-dc)






            Source: https://docs.wxpython.org/wx.EraseEvent.html
        """

    DC: '_DC'  # `DC`[¶](#wx.EraseEvent.DC "Permalink to this definition")See [`GetDC`](#wx.EraseEvent.GetDC "wx.EraseEvent.GetDC")



class Event(Object):
    """ **Possible constructors**:



```
Event(id=0, eventType=wxEVT_NULL)

```


An event is a structure holding information about an event passed to a
callback or member function.


  


        Source: https://docs.wxpython.org/wx.Event.html
    """
    def __init__(self, id=0, eventType=wxEVT_NULL) -> None:
        """ 

`__init__`(*self*, *id=0*, *eventType=wxEVT\_NULL*)[¶](#wx.Event.__init__ "Permalink to this definition")
Constructor.


Notice that events are usually created by wxWidgets itself and creating e.g. a  [wx.PaintEvent](wx.PaintEvent.html#wx-paintevent) in your code and sending it to e.g. a  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) will not usually affect it at all as native controls have no specific knowledge about wxWidgets events. However you may construct objects of specific types and pass them to [`wx.EvtHandler.ProcessEvent`](wx.EvtHandler.html#wx.EvtHandler.ProcessEvent "wx.EvtHandler.ProcessEvent") if you want to create your own custom control and want to process its events in the same manner as the standard ones.


Also please notice that the order of parameters in this constructor is different from almost all the derived classes which specify the event type as the first argument.



Parameters
* **id** (*int*) – The identifier of the object (window, timer, …) which generated this event.
* **eventType** (*wx.EventType*) – The unique type of event, e.g. `wxEVT_PAINT` , `wxEVT_SIZE` or `wxEVT_BUTTON` .






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def Clone(self) -> 'Event':
        """ 

`Clone`(*self*)[¶](#wx.Event.Clone "Permalink to this definition")
Returns a copy of the event.


Any event that is posted to the wxWidgets event system for later action (via [`wx.EvtHandler.AddPendingEvent`](wx.EvtHandler.html#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") , [`wx.EvtHandler.QueueEvent`](wx.EvtHandler.html#wx.EvtHandler.QueueEvent "wx.EvtHandler.QueueEvent") or [`wx.PostEvent`](wx.functions.html#wx.PostEvent "wx.PostEvent") ) must implement this method.


All wxWidgets events fully implement this method, but any derived events implemented by the user should also implement this method just in case they (or some event derived from them) are ever posted.


All wxWidgets events implement a copy constructor, so the easiest way of implementing the Clone function is to implement a copy constructor for a new event (call it MyEvent) and then define the Clone function like this:



```
def Clone(self):

    return MyEvent()

```



Return type
 [wx.Event](#wx-event)






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def GetEventCategory(self) -> int:
        """ 

`GetEventCategory`(*self*)[¶](#wx.Event.GetEventCategory "Permalink to this definition")
Returns a generic category for this event.


 [wx.Event](#wx-event) implementation returns `wxEVT_CATEGORY_UI` by default.


This function is used to selectively process events in [`wx.EventLoopBase.YieldFor`](wx.EventLoopBase.html#wx.EventLoopBase.YieldFor "wx.EventLoopBase.YieldFor") .



Return type
 [wx.EventCategory](wx.EventCategory.enumeration.html#wx-eventcategory)






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def GetEventObject(self) -> 'Window':
        """ 

`GetEventObject`(*self*)[¶](#wx.Event.GetEventObject "Permalink to this definition")
Returns the object (usually a window) associated with the event, if any.



Return type
 [wx.Object](wx.Object.html#wx-object)






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def GetEventType(self) -> int:
        """ 

`GetEventType`(*self*)[¶](#wx.Event.GetEventType "Permalink to this definition")
Returns the identifier of the given event type, such as `wxEVT_BUTTON` .



Return type
*wx.EventType*






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def GetId(self) -> int:
        """ 

`GetId`(*self*)[¶](#wx.Event.GetId "Permalink to this definition")
Returns the identifier associated with this event, such as a button command id.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def GetSkipped(self) -> bool:
        """ 

`GetSkipped`(*self*)[¶](#wx.Event.GetSkipped "Permalink to this definition")
Returns `True` if the event handler should be skipped, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def GetTimestamp(self) -> int:
        """ 

`GetTimestamp`(*self*)[¶](#wx.Event.GetTimestamp "Permalink to this definition")
Gets the timestamp for the event.


The timestamp is the time in milliseconds since some fixed moment (not necessarily the standard Unix Epoch, so only differences between the timestamps and not their absolute values usually make sense).



Return type
*long*





Warning


wxWidgets returns a not `None` timestamp only for mouse and key events (see  [wx.MouseEvent](wx.MouseEvent.html#wx-mouseevent) and  [wx.KeyEvent](wx.KeyEvent.html#wx-keyevent)).





            Source: https://docs.wxpython.org/wx.Event.html
        """

    def IsCommandEvent(self) -> bool:
        """ 

`IsCommandEvent`(*self*)[¶](#wx.Event.IsCommandEvent "Permalink to this definition")
Returns `True` if the event is or is derived from  [wx.CommandEvent](wx.CommandEvent.html#wx-commandevent) else it returns `False`.



Return type
*bool*





Note


exists only for optimization purposes.





            Source: https://docs.wxpython.org/wx.Event.html
        """

    def ResumePropagation(self, propagationLevel: int) -> None:
        """ 

`ResumePropagation`(*self*, *propagationLevel*)[¶](#wx.Event.ResumePropagation "Permalink to this definition")
Sets the propagation level to the given value (for example returned from an earlier call to [`wx.Event.StopPropagation`](#wx.Event.StopPropagation "wx.Event.StopPropagation") ).



Parameters
**propagationLevel** (*int*) – 






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def SetEventObject(self, object: 'Object') -> None:
        """ 

`SetEventObject`(*self*, *object*)[¶](#wx.Event.SetEventObject "Permalink to this definition")
Sets the originating object.



Parameters
**object** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) – 






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def SetEventType(self, type: int) -> None:
        """ 

`SetEventType`(*self*, *type*)[¶](#wx.Event.SetEventType "Permalink to this definition")
Sets the event type.



Parameters
**type** (*wx.EventType*) – 






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def SetId(self, id: int) -> None:
        """ 

`SetId`(*self*, *id*)[¶](#wx.Event.SetId "Permalink to this definition")
Sets the identifier associated with this event, such as a button command id.



Parameters
**id** (*int*) – 






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def SetTimestamp(self, timeStamp: int=0) -> None:
        """ 

`SetTimestamp`(*self*, *timeStamp=0*)[¶](#wx.Event.SetTimestamp "Permalink to this definition")
Sets the timestamp for the event.



Parameters
**timeStamp** (*long*) – 






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def ShouldPropagate(self) -> bool:
        """ 

`ShouldPropagate`(*self*)[¶](#wx.Event.ShouldPropagate "Permalink to this definition")
Test if this event should be propagated or not, i.e. if the propagation level is currently greater than 0.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def Skip(self, skip: bool=True) -> None:
        """ 

`Skip`(*self*, *skip=True*)[¶](#wx.Event.Skip "Permalink to this definition")
This method can be used inside an event handler to control whether further event handlers bound to this event will be called after the current one returns.


Without [`Skip`](#wx.Event.Skip "wx.Event.Skip") (or equivalently if Skip(false) is used), the event will not be processed any more. If Skip(true) is called, the event processing system continues searching for a further handler function for this event, even though it has been processed already in the current handler.


In general, it is recommended to skip all non-command events to allow the default handling to take place. The command events are, however, normally not skipped as usually a single command such as a button click or menu item selection must only be processed by one handler.



Parameters
**skip** (*bool*) – 






            Source: https://docs.wxpython.org/wx.Event.html
        """

    def StopPropagation(self) -> int:
        """ 

`StopPropagation`(*self*)[¶](#wx.Event.StopPropagation "Permalink to this definition")
Stop the event from propagating to its parent window.


Returns the old propagation level value which may be later passed to [`ResumePropagation`](#wx.Event.ResumePropagation "wx.Event.ResumePropagation") to allow propagating the event again.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Event.html
        """

    EventObject: 'Window'  # `EventObject`[¶](#wx.Event.EventObject "Permalink to this definition")See [`GetEventObject`](#wx.Event.GetEventObject "wx.Event.GetEventObject") and [`SetEventObject`](#wx.Event.SetEventObject "wx.Event.SetEventObject")
    EventType: int  # `EventType`[¶](#wx.Event.EventType "Permalink to this definition")See [`GetEventType`](#wx.Event.GetEventType "wx.Event.GetEventType") and [`SetEventType`](#wx.Event.SetEventType "wx.Event.SetEventType")
    Id: int  # `Id`[¶](#wx.Event.Id "Permalink to this definition")See [`GetId`](#wx.Event.GetId "wx.Event.GetId") and [`SetId`](#wx.Event.SetId "wx.Event.SetId")
    Skipped: bool  # `Skipped`[¶](#wx.Event.Skipped "Permalink to this definition")See [`GetSkipped`](#wx.Event.GetSkipped "wx.Event.GetSkipped")
    Timestamp: int  # `Timestamp`[¶](#wx.Event.Timestamp "Permalink to this definition")See [`GetTimestamp`](#wx.Event.GetTimestamp "wx.Event.GetTimestamp") and [`SetTimestamp`](#wx.Event.SetTimestamp "wx.Event.SetTimestamp")



class EventBlocker(EvtHandler):
    """ **Possible constructors**:



```
EventBlocker(win, type=-1)

```


This class is a special event handler which allows discarding any
event (or a set of event types) directed to a specific window.


  


        Source: https://docs.wxpython.org/wx.EventBlocker.html
    """
    def __init__(self, win, type=-1) -> None:
        """ 

`__init__`(*self*, *win*, *type=-1*)[¶](#wx.EventBlocker.__init__ "Permalink to this definition")
Constructs the blocker for the given window and for the given event type.


If *type* is `wxEVT_ANY` , then all events for that window are blocked. You can call [`Block`](#wx.EventBlocker.Block "wx.EventBlocker.Block") after creation to add other event types to the list of events to block.


Note that the *win* window **must** remain alive until the  [wx.EventBlocker](#wx-eventblocker) object destruction.



Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **type** (*wx.EventType*) –






            Source: https://docs.wxpython.org/wx.EventBlocker.html
        """

    def Block(self, eventType: int) -> None:
        """ 

`Block`(*self*, *eventType*)[¶](#wx.EventBlocker.Block "Permalink to this definition")
Adds to the list of event types which should be blocked the given *eventType*.



Parameters
**eventType** (*wx.EventType*) – 






            Source: https://docs.wxpython.org/wx.EventBlocker.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.EventBlocker.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.EventBlocker.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.EventBlocker.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.EventBlocker.html
        """



class EventFilter:
    """ **Possible constructors**:



```
EventFilter()

```


A global event filter for pre-processing all the events generated in
the program.


  


        Source: https://docs.wxpython.org/wx.EventFilter.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.EventFilter.__init__ "Permalink to this definition")
Default constructor.


Constructor does not register this filter using [`wx.EvtHandler.AddFilter`](wx.EvtHandler.html#wx.EvtHandler.AddFilter "wx.EvtHandler.AddFilter") , it’s your responsibility to do it when necessary.


Notice that the objects of this class can’t be copied.




            Source: https://docs.wxpython.org/wx.EventFilter.html
        """

    def FilterEvent(self, event: 'Event') -> int:
        """ 

`FilterEvent`(*self*, *event*)[¶](#wx.EventFilter.FilterEvent "Permalink to this definition")
Override this method to implement event pre-processing.


This method allows filtering all the events processed by the program, so you should try to return quickly from it to avoid slowing down the program to a crawl.


Although the return type of this method is `int` , this is only due to backwards compatibility concerns and the actual return value must be one of the `Event_XXX` constants defined above:


* Event\_Skip to continue processing the event normally (this should be used in most cases).
* Event\_Ignore to not process this event at all (this can be used to suppress some events).
* Event\_Processed to not process this event normally but indicate that it was already processed by the event filter and so no default processing should take place either (this should only be used if the filter really did process the event).



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.EventFilter.html
        """



class EventLoopActivator:
    """ **Possible constructors**:



```
EventLoopActivator(loop)

```


Makes an event loop temporarily active.


  


        Source: https://docs.wxpython.org/wx.EventLoopActivator.html
    """
    def __init__(self, loop: 'EventLoopBase') -> None:
        """ 

`__init__`(*self*, *loop*)[¶](#wx.EventLoopActivator.__init__ "Permalink to this definition")
Makes the loop passed as the parameter currently active.


This saves the current return value of [`wx.EventLoopBase.GetActive`](wx.EventLoopBase.html#wx.EventLoopBase.GetActive "wx.EventLoopBase.GetActive") and then calls [`wx.EventLoopBase.SetActive`](wx.EventLoopBase.html#wx.EventLoopBase.SetActive "wx.EventLoopBase.SetActive") with the given *loop*.



Parameters
**loop** ([*wx.EventLoopBase*](wx.EventLoopBase.html#wx.EventLoopBase "wx.EventLoopBase")) – 






            Source: https://docs.wxpython.org/wx.EventLoopActivator.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.EventLoopActivator.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.EventLoopActivator.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.EventLoopActivator.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.EventLoopActivator.html
        """



class EventLoopBase:
    """ Base class for all event loop implementations.


  


        Source: https://docs.wxpython.org/wx.EventLoopBase.html
    """
    def Dispatch(self) -> bool:
        """ 

`Dispatch`(*self*)[¶](#wx.EventLoopBase.Dispatch "Permalink to this definition")
Dispatches the next event in the windowing system event queue.


Blocks until an event appears if there are none currently (use [`Pending`](#wx.EventLoopBase.Pending "wx.EventLoopBase.Pending") if this is not wanted).


This can be used for programming event loops, e.g.



```
while evtloop.Pending():
    evtloop.Dispatch()

```



Return type
*bool*



Returns
`False` if the event loop should stop and `True` otherwise.





See also


[`Pending`](#wx.EventLoopBase.Pending "wx.EventLoopBase.Pending") ,  [wx.EventLoopBase](#wx-eventloopbase)





            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def DispatchTimeout(self, timeout: int) -> int:
        """ 

`DispatchTimeout`(*self*, *timeout*)[¶](#wx.EventLoopBase.DispatchTimeout "Permalink to this definition")
Dispatch an event but not wait longer than the specified timeout for it.


If an event is received before the specified *timeout* expires, it is processed and the function returns 1 normally or 0 if the event loop should quite. Otherwise, i.e. if the timeout expires, the functions returns -1 without processing any events.



Parameters
**timeout** (*long*) – The maximal time to wait for the events in milliseconds.



Return type
*int*



Returns
1 if an event was processed, 0 if the event loop should quit or -1 if the timeout expired.






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def Exit(self, rc: int=0) -> None:
        """ 

`Exit`(*self*, *rc=0*)[¶](#wx.EventLoopBase.Exit "Permalink to this definition")
Exit the currently running loop with the given exit code.


The loop will exit, i.e. its [`Run`](#wx.EventLoopBase.Run "wx.EventLoopBase.Run") method will return, during the next event loop iteration.


Notice that this method can only be used if this event loop is the currently running one, i.e. its [`IsRunning`](#wx.EventLoopBase.IsRunning "wx.EventLoopBase.IsRunning") returns `True`. If this is not the case, an assert failure is triggered and nothing is done as outer event loops can’t be exited from immediately. Use [`ScheduleExit`](#wx.EventLoopBase.ScheduleExit "wx.EventLoopBase.ScheduleExit") if you’d like to exit this loop even if it doesn’t run currently.



Parameters
**rc** (*int*) – 






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    @staticmethod
    def GetActive() -> 'EventLoopBase':
        """ 

*static* `GetActive`()[¶](#wx.EventLoopBase.GetActive "Permalink to this definition")
Return the currently active (running) event loop.


May return `None` if there is no active event loop (e.g. during application startup or shutdown).



Return type
 [wx.EventLoopBase](#wx-eventloopbase)






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def IsEventAllowedInsideYield(self, cat: int) -> bool:
        """ 

`IsEventAllowedInsideYield`(*self*, *cat*)[¶](#wx.EventLoopBase.IsEventAllowedInsideYield "Permalink to this definition")
Returns `True` if the given event category is allowed inside a [`YieldFor`](#wx.EventLoopBase.YieldFor "wx.EventLoopBase.YieldFor") call (i.e.


compares the given category against the last mask passed to [`YieldFor`](#wx.EventLoopBase.YieldFor "wx.EventLoopBase.YieldFor") ).



Parameters
**cat** ([*EventCategory*](wx.EventCategory.enumeration.html "EventCategory")) – 



Return type
*bool*





See also


[`wx.Event.GetEventCategory`](wx.Event.html#wx.Event.GetEventCategory "wx.Event.GetEventCategory")





            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def IsMain(self) -> bool:
        """ 

`IsMain`(*self*)[¶](#wx.EventLoopBase.IsMain "Permalink to this definition")
Returns `True` if this is the main loop executed by `wx.App.OnRun` .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.EventLoopBase.IsOk "Permalink to this definition")
Use this to check whether the event loop was successfully created before using it.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def IsRunning(self) -> bool:
        """ 

`IsRunning`(*self*)[¶](#wx.EventLoopBase.IsRunning "Permalink to this definition")
Return `True` if this event loop is currently running.


Notice that even if this event loop hasn’t terminated yet but has just spawned a nested (e.g. modal) event loop, this method would return `False`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def IsYielding(self) -> bool:
        """ 

`IsYielding`(*self*)[¶](#wx.EventLoopBase.IsYielding "Permalink to this definition")
Returns `True` if called from inside [`wx.Yield`](wx.functions.html#wx.Yield "wx.Yield") or from inside [`YieldFor`](#wx.EventLoopBase.YieldFor "wx.EventLoopBase.YieldFor") .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def OnExit(self) -> None:
        """ 

`OnExit`(*self*)[¶](#wx.EventLoopBase.OnExit "Permalink to this definition")
This function is called before the event loop terminates, whether this happens normally (because of [`wx.Exit`](wx.functions.html#wx.Exit "wx.Exit") call) or abnormally (because of an exception thrown from inside the loop).


The default implementation calls [`wx.AppConsole.OnEventLoopExit`](wx.AppConsole.html#wx.AppConsole.OnEventLoopExit "wx.AppConsole.OnEventLoopExit") .




            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def Pending(self) -> bool:
        """ 

`Pending`(*self*)[¶](#wx.EventLoopBase.Pending "Permalink to this definition")
Return `True` if any events are available.


If this method returns `True`, calling [`Dispatch`](#wx.EventLoopBase.Dispatch "wx.EventLoopBase.Dispatch") will not block.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def ProcessIdle(self) -> bool:
        """ 

`ProcessIdle`(*self*)[¶](#wx.EventLoopBase.ProcessIdle "Permalink to this definition")
This virtual function is called when the application becomes idle and normally just sends  [wx.IdleEvent](wx.IdleEvent.html#wx-idleevent) to all interested parties.


It should return `True` if more idle events are needed, `False` if not.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def Run(self) -> int:
        """ 

`Run`(*self*)[¶](#wx.EventLoopBase.Run "Permalink to this definition")
Start the event loop, return the exit code when it is finished.


Logically, this method calls [`Dispatch`](#wx.EventLoopBase.Dispatch "wx.EventLoopBase.Dispatch") in a loop until it returns `False` and also takes care of generating idle events during each loop iteration. However not all implementations of this class really implement it like this (e.g. wxGTK does not) so you shouldn’t rely on [`Dispatch`](#wx.EventLoopBase.Dispatch "wx.EventLoopBase.Dispatch") being called from inside this function.



Return type
*int*



Returns
The argument passed to [`wx.Exit`](wx.functions.html#wx.Exit "wx.Exit") which terminated this event loop.






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def ScheduleExit(self, rc: int=0) -> None:
        """ 

`ScheduleExit`(*self*, *rc=0*)[¶](#wx.EventLoopBase.ScheduleExit "Permalink to this definition")
Schedule an exit from the loop with the given exit code.


This method is similar to [`wx.Exit`](wx.functions.html#wx.Exit "wx.Exit") but can be called even if this event loop is not the currently running one – and if it is the active loop, then it works in exactly the same way as [`wx.Exit`](wx.functions.html#wx.Exit "wx.Exit") .


The loop will exit as soon as the control flow returns to it, i.e. after any nested loops terminate.



Parameters
**rc** (*int*) – 





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    @staticmethod
    def SetActive(loop: 'EventLoopBase') -> None:
        """ 

*static* `SetActive`(*loop*)[¶](#wx.EventLoopBase.SetActive "Permalink to this definition")
Set currently active (running) event loop.


Called by  [wx.EventLoopActivator](wx.EventLoopActivator.html#wx-eventloopactivator), use an instance of this class instead of calling this method directly to ensure that the previously active event loop is restored.


Results in a call to [`wx.AppConsole.OnEventLoopEnter`](wx.AppConsole.html#wx.AppConsole.OnEventLoopEnter "wx.AppConsole.OnEventLoopEnter") .



Parameters
**loop** ([*wx.EventLoopBase*](#wx.EventLoopBase "wx.EventLoopBase")) – 






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def WakeUp(self) -> None:
        """ 

`WakeUp`(*self*)[¶](#wx.EventLoopBase.WakeUp "Permalink to this definition")
Called by wxWidgets to wake up the event loop even if it is currently blocked inside [`Dispatch`](#wx.EventLoopBase.Dispatch "wx.EventLoopBase.Dispatch") .




            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def WakeUpIdle(self) -> None:
        """ 

`WakeUpIdle`(*self*)[¶](#wx.EventLoopBase.WakeUpIdle "Permalink to this definition")
Makes sure that idle events are sent again.




            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def Yield(self, onlyIfNeeded: bool=False) -> bool:
        """ 

`Yield`(*self*, *onlyIfNeeded=False*)[¶](#wx.EventLoopBase.Yield "Permalink to this definition")
Yields control to pending messages in the windowing system.


This can be useful, for example, when a time-consuming process writes to a text window. Without an occasional yield, the text window will not be updated properly, and on systems with cooperative multitasking, other processes will not respond.


Caution should be exercised, however, since yielding may allow the user to perform actions which are not compatible with the current task. Disabling menu items or whole menus during processing can avoid unwanted reentrance of code: see [`wx.SafeYield`](wx.functions.html#wx.SafeYield "wx.SafeYield") for a better function.


Note that [`wx.Yield`](wx.functions.html#wx.Yield "wx.Yield") will not flush the message logs. This is intentional as calling [`wx.Yield`](wx.functions.html#wx.Yield "wx.Yield") is usually done to quickly update the screen and popping up a message box dialog may be undesirable. If you do wish to flush the log messages immediately (otherwise it will be done during the next idle loop iteration), call [`wx.Log.FlushActive`](wx.Log.html#wx.Log.FlushActive "wx.Log.FlushActive") .


If *onlyIfNeeded* parameter is `True` and the flow control is already inside [`wx.Yield`](wx.functions.html#wx.Yield "wx.Yield") , i.e. [`IsYielding`](#wx.EventLoopBase.IsYielding "wx.EventLoopBase.IsYielding") returns `True`, the method just silently returns `False` and doesn’t do anything.



Parameters
**onlyIfNeeded** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """

    def YieldFor(self, eventsToProcess: int) -> bool:
        """ 

`YieldFor`(*self*, *eventsToProcess*)[¶](#wx.EventLoopBase.YieldFor "Permalink to this definition")
Works like [`wx.Yield`](wx.functions.html#wx.Yield "wx.Yield") with *onlyIfNeeded* == `True`, except that it allows the caller to specify a mask of the  [wx.EventCategory](wx.EventCategory.enumeration.html#wx-eventcategory) values which indicates which events should be processed and which should instead be “delayed” (i.e.


processed by the main loop later).


Note that this is a safer alternative to [`wx.Yield`](wx.functions.html#wx.Yield "wx.Yield") since it ensures that only the events you’re interested to will be processed; i.e. this method helps to avoid unwanted reentrancies.


Note that currently only wxMSW and wxGTK do support selective yield of native events coming from the underlying GUI toolkit. wxWidgets events posted using [`wx.EvtHandler.AddPendingEvent`](wx.EvtHandler.html#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") or [`wx.EvtHandler.QueueEvent`](wx.EvtHandler.html#wx.EvtHandler.QueueEvent "wx.EvtHandler.QueueEvent") are instead selectively processed by all ports.



Parameters
**eventsToProcess** (*long*) – 



Return type
*bool*





See also


[`wx.Event.GetEventCategory`](wx.Event.html#wx.Event.GetEventCategory "wx.Event.GetEventCategory")





            Source: https://docs.wxpython.org/wx.EventLoopBase.html
        """



class EvtHandler(Object,Trackable):
    """ **Possible constructors**:



```
EvtHandler()

```


A class that can handle events from the windowing system.


  


        Source: https://docs.wxpython.org/wx.EvtHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.EvtHandler.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    @staticmethod
    def AddFilter(filter: 'EventFilter') -> None:
        """ 

*static* `AddFilter`(*filter*)[¶](#wx.EvtHandler.AddFilter "Permalink to this definition")
Add an event filter whose FilterEvent() method will be called for each and every event processed by wxWidgets.


The filters are called in `LIFO` order and  [wx.App](wx.App.html#wx-app) is registered as an event filter by default. The pointer must remain valid until it’s removed with [`RemoveFilter`](#wx.EvtHandler.RemoveFilter "wx.EvtHandler.RemoveFilter") and is not deleted by  [wx.EvtHandler](#wx-evthandler).



Parameters
**filter** ([*wx.EventFilter*](wx.EventFilter.html#wx.EventFilter "wx.EventFilter")) – 





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def AddPendingEvent(self, event: 'Event') -> None:
        """ 

`AddPendingEvent`(*self*, *event*)[¶](#wx.EvtHandler.AddPendingEvent "Permalink to this definition")
Post an event to be processed later.


This function is similar to [`wx.QueueEvent`](wx.functions.html#wx.QueueEvent "wx.QueueEvent") but can’t be used to post events from worker threads for the event objects with *String* fields (i.e. in practice most of them) because of an unsafe use of the same *String* object which happens because the *String* field in the original *event* object and its copy made internally by this function share the same string buffer internally. Use [`wx.QueueEvent`](wx.functions.html#wx.QueueEvent "wx.QueueEvent") to avoid this.


A copy of *event* is made by the function, so the original can be deleted as soon as function returns (it is common that the original is created on the stack). This requires that the [`wx.Event.Clone`](wx.Event.html#wx.Event.Clone "wx.Event.Clone") method be implemented by event so that it can be duplicated and stored until it gets processed.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – Event to add to the pending events queue.






            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def Bind(self, event, handler, source=None, id=wx.ID_ANY, id2=wx.ID_ANY) -> None:
        """ 

`Bind`(*self*, *event*, *handler*, *source=None*, *id=wx.ID\_ANY*, *id2=wx.ID\_ANY*)[¶](#wx.EvtHandler.Bind "Permalink to this definition")
Bind an event to an event handler.



Parameters
* **event** – One of the `EVT_` event binder objects that
specifies the type of event to bind.
* **handler** – A callable object to be invoked when the
event is delivered to self. Pass `None` to
disconnect an event handler.
* **source** – Sometimes the event originates from a
different window than self, but you still
want to catch it in self. (For example, a
button event delivered to a frame.) By
passing the source of the event, the event
handling system is able to differentiate
between the same event type from different
controls.
* **id** – Used to spcify the event source by `ID` instead
of instance.
* **id2** – Used when it is desirable to bind a handler
to a range of IDs, such as with `EVT_MENU_RANGE`.






            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def Connect(self, id, lastId, eventType, func) -> None:
        """ 

`Connect`(*self*, *id*, *lastId*, *eventType*, *func*)[¶](#wx.EvtHandler.Connect "Permalink to this definition")
Make an entry in the dynamic event table for an event binding.




            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def DeletePendingEvents(self) -> None:
        """ 

`DeletePendingEvents`(*self*)[¶](#wx.EvtHandler.DeletePendingEvents "Permalink to this definition")
Deletes all events queued on this event handler using [`wx.QueueEvent`](wx.functions.html#wx.QueueEvent "wx.QueueEvent") or [`AddPendingEvent`](#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") .


Use with care because the events which are deleted are (obviously) not processed and this may have unwanted consequences (e.g. user actions events will be lost).




            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def Disconnect(self, id, lastId=-1, eventType=wxEVT_NULL, func=None) -> bool:
        """ 

`Disconnect`(*self*, *id*, *lastId=-1*, *eventType=wxEVT\_NULL*, *func=None*)[¶](#wx.EvtHandler.Disconnect "Permalink to this definition")
Remove an event binding by removing its entry in the dynamic event table.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def GetEvtHandlerEnabled(self) -> bool:
        """ 

`GetEvtHandlerEnabled`(*self*)[¶](#wx.EvtHandler.GetEvtHandlerEnabled "Permalink to this definition")
Returns `True` if the event handler is enabled, `False` otherwise.



Return type
*bool*





See also


[`SetEvtHandlerEnabled`](#wx.EvtHandler.SetEvtHandlerEnabled "wx.EvtHandler.SetEvtHandlerEnabled")





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def GetNextHandler(self) -> 'EvtHandler':
        """ 

`GetNextHandler`(*self*)[¶](#wx.EvtHandler.GetNextHandler "Permalink to this definition")
Returns the pointer to the next handler in the chain.



Return type
 [wx.EvtHandler](#wx-evthandler)





See also


[`SetNextHandler`](#wx.EvtHandler.SetNextHandler "wx.EvtHandler.SetNextHandler") , [`GetPreviousHandler`](#wx.EvtHandler.GetPreviousHandler "wx.EvtHandler.GetPreviousHandler") , [`SetPreviousHandler`](#wx.EvtHandler.SetPreviousHandler "wx.EvtHandler.SetPreviousHandler") , [`wx.Window.PushEventHandler`](wx.Window.html#wx.Window.PushEventHandler "wx.Window.PushEventHandler") , [`wx.Window.PopEventHandler`](wx.Window.html#wx.Window.PopEventHandler "wx.Window.PopEventHandler")





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def GetPreviousHandler(self) -> 'EvtHandler':
        """ 

`GetPreviousHandler`(*self*)[¶](#wx.EvtHandler.GetPreviousHandler "Permalink to this definition")
Returns the pointer to the previous handler in the chain.



Return type
 [wx.EvtHandler](#wx-evthandler)





See also


[`SetPreviousHandler`](#wx.EvtHandler.SetPreviousHandler "wx.EvtHandler.SetPreviousHandler") , [`GetNextHandler`](#wx.EvtHandler.GetNextHandler "wx.EvtHandler.GetNextHandler") , [`SetNextHandler`](#wx.EvtHandler.SetNextHandler "wx.EvtHandler.SetNextHandler") , [`wx.Window.PushEventHandler`](wx.Window.html#wx.Window.PushEventHandler "wx.Window.PushEventHandler") , [`wx.Window.PopEventHandler`](wx.Window.html#wx.Window.PopEventHandler "wx.Window.PopEventHandler")





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def IsUnlinked(self) -> bool:
        """ 

`IsUnlinked`(*self*)[¶](#wx.EvtHandler.IsUnlinked "Permalink to this definition")
Returns `True` if the next and the previous handler pointers of this event handler instance are `None`.



Return type
*bool*





New in version 2.9.0.




See also


[`SetPreviousHandler`](#wx.EvtHandler.SetPreviousHandler "wx.EvtHandler.SetPreviousHandler") , [`SetNextHandler`](#wx.EvtHandler.SetNextHandler "wx.EvtHandler.SetNextHandler")





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def ProcessEvent(self, event: 'Event') -> bool:
        """ 

`ProcessEvent`(*self*, *event*)[¶](#wx.EvtHandler.ProcessEvent "Permalink to this definition")
Processes an event, searching event tables and calling zero or more suitable event handler function(s).


Normally, your application would not call this function: it is called in the wxWidgets implementation to dispatch incoming user interface events to the framework (and application).


However, you might need to call it if implementing new functionality (such as a new control) where you define new event types, as opposed to allowing the user to override virtual functions.


Notice that you don’t usually need to override  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) to customize the event handling, overriding the specially provided [`TryBefore`](#wx.EvtHandler.TryBefore "wx.EvtHandler.TryBefore") and [`TryAfter`](#wx.EvtHandler.TryAfter "wx.EvtHandler.TryAfter") functions is usually enough. For example,  [wx.MDIParentFrame](wx.MDIParentFrame.html#wx-mdiparentframe) may override [`TryBefore`](#wx.EvtHandler.TryBefore "wx.EvtHandler.TryBefore") to ensure that the menu events are processed in the active child frame before being processed in the parent frame itself.


The normal order of event table searching is as follows:


* `wx.App.FilterEvent` is called. If it returns anything but `-1` (default) the processing stops here.
* [`TryBefore`](#wx.EvtHandler.TryBefore "wx.EvtHandler.TryBefore") is called (this is where  [wx.Validator](wx.Validator.html#wx-validator) are taken into account for  [wx.Window](wx.Window.html#wx-window) objects). If this returns `True`, the function exits.
* If the object is disabled (via a call to [`wx.EvtHandler.SetEvtHandlerEnabled`](#wx.EvtHandler.SetEvtHandlerEnabled "wx.EvtHandler.SetEvtHandlerEnabled") ) the function skips to step (7).
* Dynamic event table of the handlers bound using `Bind` is searched in the most-recently-bound to the most-early-bound order. If a handler is found, it is executed and the function returns `True` unless the handler used [`wx.Event.Skip`](wx.Event.html#wx.Event.Skip "wx.Event.Skip") to indicate that it didn’t handle the event in which case the search continues.
* Static events table of the handlers bound using event table macros is searched for this event handler in the order of appearance of event table macros in the source code. If this fails, the base class event table is tried, and so on until no more tables exist or an appropriate function was found. If a handler is found, the same logic as in the previous step applies.
* The search is applied down the entire chain of event handlers (usually the chain has a length of one). This chain can be formed using [`wx.EvtHandler.SetNextHandler`](#wx.EvtHandler.SetNextHandler "wx.EvtHandler.SetNextHandler") :



![_staticimagesoverviewsoverview_events_chain.png](_staticimagesoverviewsoverview_events_chain.png)


  



> (referring to the image, if `A->ProcessEvent` is called and it doesn’t handle the event, `B->ProcessEvent` will be called and so on…). Note that in the case of  [wx.Window](wx.Window.html#wx-window) you can build a stack of event handlers (see [`wx.Window.PushEventHandler`](wx.Window.html#wx.Window.PushEventHandler "wx.Window.PushEventHandler") for more info). If any of the handlers of the chain return `True`, the function exits.


* [`TryAfter`](#wx.EvtHandler.TryAfter "wx.EvtHandler.TryAfter") is called: for the  [wx.Window](wx.Window.html#wx-window) object this may propagate the event to the window parent (recursively). If the event is still not processed,  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) on TheApp object is called as the last step.


Notice that steps (2)-(6) are performed in [`ProcessEventLocally`](#wx.EvtHandler.ProcessEventLocally "wx.EvtHandler.ProcessEventLocally") which is called by this function.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – Event to process.



Return type
*bool*



Returns
`True` if a suitable event handler function was found and executed, and the function did not call [`wx.Event.Skip`](wx.Event.html#wx.Event.Skip "wx.Event.Skip") .






            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def ProcessEventLocally(self, event: 'Event') -> bool:
        """ 

`ProcessEventLocally`(*self*, *event*)[¶](#wx.EvtHandler.ProcessEventLocally "Permalink to this definition")
Try to process the event in this handler and all those chained to it.


As explained in  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) documentation, the event handlers may be chained in a doubly-linked list. This function tries to process the event in this handler (including performing any pre-processing done in [`TryBefore`](#wx.EvtHandler.TryBefore "wx.EvtHandler.TryBefore") , e.g. applying validators) and all those following it in the chain until the event is processed or the chain is exhausted.


This function is called from  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) and, in turn, calls [`TryBefore`](#wx.EvtHandler.TryBefore "wx.EvtHandler.TryBefore") and [`TryAfter`](#wx.EvtHandler.TryAfter "wx.EvtHandler.TryAfter") . It is not virtual and so cannot be overridden but can, and should, be called to forward an event to another handler instead of  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) which would result in a duplicate call to [`TryAfter`](#wx.EvtHandler.TryAfter "wx.EvtHandler.TryAfter") , e.g. resulting in all unprocessed events being sent to the application object multiple times.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – Event to process.



Return type
*bool*



Returns
`True` if this handler of one of those chained to it processed the event.





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def ProcessPendingEvents(self) -> None:
        """ 

`ProcessPendingEvents`(*self*)[¶](#wx.EvtHandler.ProcessPendingEvents "Permalink to this definition")
Processes the pending events previously queued using [`wx.QueueEvent`](wx.functions.html#wx.QueueEvent "wx.QueueEvent") or [`AddPendingEvent`](#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") ; you must call this function only if you are sure there are pending events for this handler, otherwise a `CHECK` will fail.


The real processing still happens in  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) which is called by this function.


Note that this function needs a valid application object (see [`wx.AppConsole.GetInstance`](wx.AppConsole.html#wx.AppConsole.GetInstance "wx.AppConsole.GetInstance") ) because  [wx.App](wx.App.html#wx-app) holds the list of the event handlers with pending events and this function manipulates that list.




            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def QueueEvent(self, event: 'Event') -> None:
        """ 

`QueueEvent`(*self*, *event*)[¶](#wx.EvtHandler.QueueEvent "Permalink to this definition")
Queue event for a later processing.


This method is similar to  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) but while the latter is synchronous, i.e. the event is processed immediately, before the function returns, this one is asynchronous and returns immediately while the event will be processed at some later time (usually during the next event loop iteration).


Another important difference is that this method takes ownership of the *event* parameter, i.e. it will delete it itself. This implies that the event should be allocated on the heap and that the pointer can’t be used any more after the function returns (as it can be deleted at any moment).


[`wx.QueueEvent`](wx.functions.html#wx.QueueEvent "wx.QueueEvent") can be used for inter-thread communication from the worker threads to the main thread, it is safe in the sense that it uses locking internally and avoids the problem mentioned in [`AddPendingEvent`](#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") documentation by ensuring that the *event* object is not used by the calling thread any more. Care should still be taken to avoid that some fields of this object are used by it, notably any *String* members of the event object must not be shallow copies of another *String* object as this would result in them still using the same string buffer behind the scenes. For example:



```
def FunctionInAWorkerThread(strs):

    evt = wx.CommandEvent()

    evt.SetString(strs)

    wx.TheApp.QueueEvent(evt)

```


Note that you can use  [wx.ThreadEvent](wx.ThreadEvent.html#wx-threadevent) instead of  [wx.CommandEvent](wx.CommandEvent.html#wx-commandevent) to avoid this problem:



```
def FunctionInAWorkerThread(strs):

    evt = wx.ThreadEvent()
    evt.SetString(strs)

    # wx.ThreadEvent.Clone() makes sure that the internal wx.String
    # member is not shared by other string instances:
    wx.TheApp.QueueEvent(evt.Clone())

```


Finally notice that this method automatically wakes up the event loop if it is currently idle by calling [`wx.WakeUpIdle`](wx.functions.html#wx.WakeUpIdle "wx.WakeUpIdle") so there is no need to do it manually when using it.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – A heap-allocated event to be queued, [`wx.QueueEvent`](wx.functions.html#wx.QueueEvent "wx.QueueEvent") takes ownership of it. This parameter shouldn’t be `NULL` .





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    @staticmethod
    def RemoveFilter(filter: 'EventFilter') -> None:
        """ 

*static* `RemoveFilter`(*filter*)[¶](#wx.EvtHandler.RemoveFilter "Permalink to this definition")
Remove a filter previously installed with [`AddFilter`](#wx.EvtHandler.AddFilter "wx.EvtHandler.AddFilter") .


It’s an error to remove a filter that hadn’t been previously added or was already removed.



Parameters
**filter** ([*wx.EventFilter*](wx.EventFilter.html#wx.EventFilter "wx.EventFilter")) – 





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def SafelyProcessEvent(self, event: 'Event') -> bool:
        """ 

`SafelyProcessEvent`(*self*, *event*)[¶](#wx.EvtHandler.SafelyProcessEvent "Permalink to this definition")
Processes an event by calling  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) and handles any exceptions that occur in the process.


If an exception is thrown in event handler, `wx.App.OnExceptionInMainLoop` is called.



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – Event to process.



Return type
*bool*



Returns
`True` if the event was processed, `False` if no handler was found or an exception was thrown.





See also


[`wx.Window.HandleWindowEvent`](wx.Window.html#wx.Window.HandleWindowEvent "wx.Window.HandleWindowEvent")





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def SetEvtHandlerEnabled(self, enabled: bool) -> None:
        """ 

`SetEvtHandlerEnabled`(*self*, *enabled*)[¶](#wx.EvtHandler.SetEvtHandlerEnabled "Permalink to this definition")
Enables or disables the event handler.



Parameters
**enabled** (*bool*) – `True` if the event handler is to be enabled, `False` if it is to be disabled.





Note


You can use this function to avoid having to remove the event handler from the chain, for example when implementing a dialog editor and changing from edit to test mode.




See also


[`GetEvtHandlerEnabled`](#wx.EvtHandler.GetEvtHandlerEnabled "wx.EvtHandler.GetEvtHandlerEnabled")





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def SetNextHandler(self, handler: 'EvtHandler') -> None:
        """ 

`SetNextHandler`(*self*, *handler*)[¶](#wx.EvtHandler.SetNextHandler "Permalink to this definition")
Sets the pointer to the next handler.



Parameters
**handler** ([*wx.EvtHandler*](#wx.EvtHandler "wx.EvtHandler")) – The event handler to be set as the next handler. Cannot be `None`.





Note


See  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) for more info about how the chains of event handlers are internally used. Also remember that  [wx.EvtHandler](#wx-evthandler) uses double-linked lists and thus if you use this function, you should also call [`SetPreviousHandler`](#wx.EvtHandler.SetPreviousHandler "wx.EvtHandler.SetPreviousHandler") on the argument passed to this function:



```
handlerA.SetNextHandler(handlerB)
handlerB.SetPreviousHandler(handlerA)

```




See also


[How Events are Processed](events_overview.html#how-events-are-processed)





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def SetPreviousHandler(self, handler: 'EvtHandler') -> None:
        """ 

`SetPreviousHandler`(*self*, *handler*)[¶](#wx.EvtHandler.SetPreviousHandler "Permalink to this definition")
Sets the pointer to the previous handler.


All remarks about [`SetNextHandler`](#wx.EvtHandler.SetNextHandler "wx.EvtHandler.SetNextHandler") apply to this function as well.



Parameters
**handler** ([*wx.EvtHandler*](#wx.EvtHandler "wx.EvtHandler")) – The event handler to be set as the previous handler. Cannot be `None`.





See also


[How Events are Processed](events_overview.html#how-events-are-processed)





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def TryAfter(self, event: 'Event') -> bool:
        """ 

`TryAfter`(*self*, *event*)[¶](#wx.EvtHandler.TryAfter "Permalink to this definition")
Method called by  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) as last resort.


This method can be overridden to implement post-processing for the events which were not processed anywhere else.


The base class version handles forwarding the unprocessed events to  [wx.App](wx.App.html#wx-app) at  [wx.EvtHandler](#wx-evthandler) level and propagating them upwards the window child-parent chain at  [wx.Window](wx.Window.html#wx-window) level and so should usually be called when overriding this method:



```
class MyClass(public BaseClass): # something inheriting from wx.EvtHandler

...
    def TryAfter(self, event):
        if (BaseClass.TryAfter(self, event))
            return True

        return self.MyPostProcess(event)

```



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 



Return type
*bool*





See also


 [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent)





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def TryBefore(self, event: 'Event') -> bool:
        """ 

`TryBefore`(*self*, *event*)[¶](#wx.EvtHandler.TryBefore "Permalink to this definition")
Method called by  [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent) before examining this object event tables.


This method can be overridden to hook into the event processing logic as early as possible. You should usually call the base class version when overriding this method, even if  [wx.EvtHandler](#wx-evthandler) itself does nothing here, some derived classes do use this method, e.g.  [wx.Window](wx.Window.html#wx-window) implements support for  [wx.Validator](wx.Validator.html#wx-validator) in it.


Example:



```
class MyClass(BaseClass):  # something inheriting from wx.EvtHandler

...
    def TryBefore(self, event):
        if (self.MyPreProcess(event)):
            return True

        return BaseClass.TryBefore(self, event)

```



Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 



Return type
*bool*





See also


 [wx.ProcessEvent](wx.ProcessEvent.html#wx-processevent)





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def Unbind(self, event, source=None, id=wx.ID_ANY, id2=wx.ID_ANY, handler=None) -> None:
        """ 

`Unbind`(*self*, *event*, *source=None*, *id=wx.ID\_ANY*, *id2=wx.ID\_ANY*, *handler=None*)[¶](#wx.EvtHandler.Unbind "Permalink to this definition")
Disconnects the event handler binding for event from *self*.
Returns `True` if successful.




            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    def Unlink(self) -> None:
        """ 

`Unlink`(*self*)[¶](#wx.EvtHandler.Unlink "Permalink to this definition")
Unlinks this event handler from the chain it’s part of (if any); then links the “previous” event handler to the “next” one (so that the chain won’t be interrupted).


E.g. if before calling [`Unlink`](#wx.EvtHandler.Unlink "wx.EvtHandler.Unlink") you have the following chain:



![_staticimagesoverviewsevthandler_unlink_before.png](_staticimagesoverviewsevthandler_unlink_before.png)


  



> then after calling B-> [`Unlink`](#wx.EvtHandler.Unlink "wx.EvtHandler.Unlink") you’ll have:



![_staticimagesoverviewsevthandler_unlink_after.png](_staticimagesoverviewsevthandler_unlink_after.png)


  



New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.EvtHandler.html
        """

    EvtHandlerEnabled: bool  # `EvtHandlerEnabled`[¶](#wx.EvtHandler.EvtHandlerEnabled "Permalink to this definition")See [`GetEvtHandlerEnabled`](#wx.EvtHandler.GetEvtHandlerEnabled "wx.EvtHandler.GetEvtHandlerEnabled") and [`SetEvtHandlerEnabled`](#wx.EvtHandler.SetEvtHandlerEnabled "wx.EvtHandler.SetEvtHandlerEnabled")
    NextHandler: 'EvtHandler'  # `NextHandler`[¶](#wx.EvtHandler.NextHandler "Permalink to this definition")See [`GetNextHandler`](#wx.EvtHandler.GetNextHandler "wx.EvtHandler.GetNextHandler") and [`SetNextHandler`](#wx.EvtHandler.SetNextHandler "wx.EvtHandler.SetNextHandler")
    PreviousHandler: 'EvtHandler'  # `PreviousHandler`[¶](#wx.EvtHandler.PreviousHandler "Permalink to this definition")See [`GetPreviousHandler`](#wx.EvtHandler.GetPreviousHandler "wx.EvtHandler.GetPreviousHandler") and [`SetPreviousHandler`](#wx.EvtHandler.SetPreviousHandler "wx.EvtHandler.SetPreviousHandler")



class FileConfig(ConfigBase):
    """ **Possible constructors**:



```
FileConfig(appName="", vendorName="",
           localFilename="", globalFilename="",
           style=CONFIG_USE_LOCAL_FILE|CONFIG_USE_GLOBAL_FILE)

FileConfig(is)

```


FileConfig implements ConfigBase interface for storing and
retrieving configuration information using plain text files.


  


        Source: https://docs.wxpython.org/wx.FileConfig.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FileConfig.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, appName=””, vendorName=””, localFilename=””, globalFilename=””, style=CONFIG\_USE\_LOCAL\_FILE|CONFIG\_USE\_GLOBAL\_FILE)*


Constructor allowing to choose the file names to use.


If *localFilename* and/or *globalFilename* are explicitly specified, they are used as the names of the user and system-wide configuration files (the latter is only read by the program while the former is read from and written to). Otherwise the behaviour depends on *style* parameter. If it includes `CONFIG_USE_LOCAL_FILE`, then the local file name is constructed from the information in *appName* and *vendorName* arguments in a system-dependent way. If `CONFIG_USE_GLOBAL_FILE` is not specified at all (and *globalFilename* is empty) then the system-wide file is not used at all. Otherwise its name and path are also constructed in the way appropriate for the current platform from the application and vendor names.



Parameters
* **appName** (*string*) –
* **vendorName** (*string*) –
* **localFilename** (*string*) –
* **globalFilename** (*string*) –
* **style** (*long*) –






---

  



**\_\_init\_\_** *(self, is)*


Read the config data from the specified stream instead of the associated file, as usual.



Parameters
**is** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 





See also


[`Save`](#wx.FileConfig.Save "wx.FileConfig.Save")





---

  





            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def DeleteAll(self) -> bool:
        """ 

`DeleteAll`(*self*)[¶](#wx.FileConfig.DeleteAll "Permalink to this definition")
Delete the whole underlying object (disk file, registry key, …).


Primarily for use by uninstallation routine.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def DeleteEntry(self, key, bDeleteGroupIfEmpty=True) -> bool:
        """ 

`DeleteEntry`(*self*, *key*, *bDeleteGroupIfEmpty=True*)[¶](#wx.FileConfig.DeleteEntry "Permalink to this definition")
Deletes the specified entry and the group it belongs to if it was the last key in it and the second parameter is `True`.



Parameters
* **key** (*string*) –
* **bDeleteGroupIfEmpty** (*bool*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def DeleteGroup(self, key: str) -> bool:
        """ 

`DeleteGroup`(*self*, *key*)[¶](#wx.FileConfig.DeleteGroup "Permalink to this definition")
Delete the group (with all subgroups).


If the current path is under the group being deleted it is changed to its deepest still existing component. E.g. if the current path is `"/A/B/C/D"` and the group `C` is deleted, the path becomes `"/A/B"` .



Parameters
**key** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def DisableAutoSave(self) -> None:
        """ 

`DisableAutoSave`(*self*)[¶](#wx.FileConfig.DisableAutoSave "Permalink to this definition")
Prevent this object from saving data to the disk file when it is destroyed.


By default, changes to this object are only saved permanently when [`Flush`](#wx.FileConfig.Flush "wx.FileConfig.Flush") is explicitly called or when it is destroyed. If this method is called, [`Flush`](#wx.FileConfig.Flush "wx.FileConfig.Flush") won’t be called automatically from the destructor, meaning that any non-explicitly-flushed changes will be lost.



New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def EnableAutoSave(self) -> None:
        """ 

`EnableAutoSave`(*self*)[¶](#wx.FileConfig.EnableAutoSave "Permalink to this definition")
Enables saving data to the disk file when this object is destroyed.


This is the default behaviour and this function doesn’t need to be called explicitly unless [`DisableAutoSave`](#wx.FileConfig.DisableAutoSave "wx.FileConfig.DisableAutoSave") had been previously called.



New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def Flush(self, bCurrentOnly: bool=False) -> bool:
        """ 

`Flush`(*self*, *bCurrentOnly=False*)[¶](#wx.FileConfig.Flush "Permalink to this definition")
Permanently writes all changes (otherwise, they’re only written from object’s destructor).



Parameters
**bCurrentOnly** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    @staticmethod
    def GetGlobalFileName(szFile: str) -> str:
        """ 

*static* `GetGlobalFileName`(*szFile*)[¶](#wx.FileConfig.GetGlobalFileName "Permalink to this definition")

Parameters
**szFile** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    @staticmethod
    def GetLocalFileName(szFile, style=0) -> str:
        """ 

*static* `GetLocalFileName`(*szFile*, *style=0*)[¶](#wx.FileConfig.GetLocalFileName "Permalink to this definition")

Parameters
* **szFile** (*string*) –
* **style** (*int*) –



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def GetNumberOfEntries(self, bRecursive: bool=False) -> int:
        """ 

`GetNumberOfEntries`(*self*, *bRecursive=False*)[¶](#wx.FileConfig.GetNumberOfEntries "Permalink to this definition")
Get number of entries in the current group.



Parameters
**bRecursive** (*bool*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def GetNumberOfGroups(self, bRecursive: bool=False) -> int:
        """ 

`GetNumberOfGroups`(*self*, *bRecursive=False*)[¶](#wx.FileConfig.GetNumberOfGroups "Permalink to this definition")
Get number of entries/subgroups in the current group, with or without its subgroups.



Parameters
**bRecursive** (*bool*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.FileConfig.GetPath "Permalink to this definition")
Retrieve the current path (always as absolute path).



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def HasEntry(self, strName: str) -> bool:
        """ 

`HasEntry`(*self*, *strName*)[¶](#wx.FileConfig.HasEntry "Permalink to this definition")

Parameters
**strName** (*string*) – 



Return type
*bool*



Returns
`True` if the entry by this name exists.






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def HasGroup(self, strName: str) -> bool:
        """ 

`HasGroup`(*self*, *strName*)[¶](#wx.FileConfig.HasGroup "Permalink to this definition")

Parameters
**strName** (*string*) – 



Return type
*bool*



Returns
`True` if the group by this name exists.






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def RenameEntry(self, oldName, newName) -> bool:
        """ 

`RenameEntry`(*self*, *oldName*, *newName*)[¶](#wx.FileConfig.RenameEntry "Permalink to this definition")
Renames an entry in the current group.


The entries names (both the old and the new one) shouldn’t contain backslashes, i.e. only simple names and not arbitrary paths are accepted by this function.



Parameters
* **oldName** (*string*) –
* **newName** (*string*) –



Return type
*bool*



Returns
`False` if *oldName* doesn’t exist or if *newName* already exists.






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def RenameGroup(self, oldName, newName) -> bool:
        """ 

`RenameGroup`(*self*, *oldName*, *newName*)[¶](#wx.FileConfig.RenameGroup "Permalink to this definition")
Renames a subgroup of the current group.


The subgroup names (both the old and the new one) shouldn’t contain backslashes, i.e. only simple names and not arbitrary paths are accepted by this function.



Parameters
* **oldName** (*string*) –
* **newName** (*string*) –



Return type
*bool*



Returns
`False` if *oldName* doesn’t exist or if *newName* already exists.






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def Save(self, os) -> bool:
        """ 

`Save`(*self*, *os*)[¶](#wx.FileConfig.Save "Permalink to this definition")
Saves all config data to the given stream, returns `True` if data was saved successfully or `False` on error.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def SetPath(self, strPath: str) -> None:
        """ 

`SetPath`(*self*, *strPath*)[¶](#wx.FileConfig.SetPath "Permalink to this definition")
Set current path: if the first character is ‘/’, it is the absolute path, otherwise it is a relative path.


‘..’ is supported. If *strPath* doesn’t exist, it is created.



Parameters
**strPath** (*string*) – 





See also


 [wx.ConfigPathChanger](wx.ConfigPathChanger.html#wx-configpathchanger)





            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    def SetUmask(self, mode: int) -> None:
        """ 

`SetUmask`(*self*, *mode*)[¶](#wx.FileConfig.SetUmask "Permalink to this definition")
Allows setting the mode to be used for the config file creation.


For example, to create a config file which is not readable by other users (useful if it stores some sensitive information, such as passwords), you could use `SetUmask(0077)` .


This function doesn’t do anything on non-Unix platforms.



Parameters
**mode** (*int*) – 





See also


`CHANGE_UMASK`





            Source: https://docs.wxpython.org/wx.FileConfig.html
        """

    NumberOfEntries: int  # `NumberOfEntries`[¶](#wx.FileConfig.NumberOfEntries "Permalink to this definition")See [`GetNumberOfEntries`](#wx.FileConfig.GetNumberOfEntries "wx.FileConfig.GetNumberOfEntries")
    NumberOfGroups: int  # `NumberOfGroups`[¶](#wx.FileConfig.NumberOfGroups "Permalink to this definition")See [`GetNumberOfGroups`](#wx.FileConfig.GetNumberOfGroups "wx.FileConfig.GetNumberOfGroups")
    Path: str  # `Path`[¶](#wx.FileConfig.Path "Permalink to this definition")See [`GetPath`](#wx.FileConfig.GetPath "wx.FileConfig.GetPath") and [`SetPath`](#wx.FileConfig.SetPath "wx.FileConfig.SetPath")



class FileCtrl(Control):
    """ **Possible constructors**:



```
FileCtrl()

FileCtrl(parent, id=ID_ANY, defaultDirectory="",
         defaultFilename="", wildCard=FileSelectorDefaultWildcardStr,
         style=FC_DEFAULT_STYLE, pos=DefaultPosition, size=DefaultSize,
         name=FileCtrlNameStr)

```


This control allows the user to select a file.


  


        Source: https://docs.wxpython.org/wx.FileCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FileCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, defaultDirectory=””, defaultFilename=””, wildCard=FileSelectorDefaultWildcardStr, style=FC\_DEFAULT\_STYLE, pos=DefaultPosition, size=DefaultSize, name=FileCtrlNameStr)*


Constructs the window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window, must not be not `None`.
* **id** (*wx.WindowID*) – The identifier for the control.
* **defaultDirectory** (*string*) – The initial directory shown in the control. Must be a valid path to a directory or the empty string. In case it is the empty string, the current working directory is used.
* **defaultFilename** (*string*) – The default filename, or the empty string.
* **wildCard** (*string*) – A wildcard specifying which files can be selected, such as “x.x” or “`BMP` files (.bmp)|.bmp|GIF files (.gif)|.gif”.
* **style** (*long*) – The window style, see `FC_` flags.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Initial position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Initial size.
* **name** (*string*) – Control name.






---

  





            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def Create(self, parent, id=ID_ANY, defaultDirectory="", defaultFilename="", wildCard=FileSelectorDefaultWildcardStr, style=FC_DEFAULT_STYLE, pos=DefaultPosition, size=DefaultSize, name=FileCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *defaultDirectory=""*, *defaultFilename=""*, *wildCard=FileSelectorDefaultWildcardStr*, *style=FC\_DEFAULT\_STYLE*, *pos=DefaultPosition*, *size=DefaultSize*, *name=FileCtrlNameStr*)[¶](#wx.FileCtrl.Create "Permalink to this definition")
Create function for two-step construction.


See  [wx.FileCtrl](#wx-filectrl) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **defaultDirectory** (*string*) –
* **defaultFilename** (*string*) –
* **wildCard** (*string*) –
* **style** (*long*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **name** (*string*) –



Return type
*bool*



Returns
`True` if the control was successfully created or `False` if creation failed.






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.FileCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def GetDirectory(self) -> str:
        """ 

`GetDirectory`(*self*)[¶](#wx.FileCtrl.GetDirectory "Permalink to this definition")
Returns the current directory of the file control (i.e. the directory shown by it).



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def GetFilename(self) -> str:
        """ 

`GetFilename`(*self*)[¶](#wx.FileCtrl.GetFilename "Permalink to this definition")
Returns the currently selected filename.


For the controls having the `FC_MULTIPLE` style, use [`GetFilenames`](#wx.FileCtrl.GetFilenames "wx.FileCtrl.GetFilenames") instead.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def GetFilenames(self) -> list[str]:
        """ 

`GetFilenames`(*self*)[¶](#wx.FileCtrl.GetFilenames "Permalink to this definition")

> Returns a list of filenames selected in the control. This function
> should only be used with controls which have the wx.``wx.FC\_MULTIPLE`` style,
> use GetFilename for the others.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def GetFilterIndex(self) -> int:
        """ 

`GetFilterIndex`(*self*)[¶](#wx.FileCtrl.GetFilterIndex "Permalink to this definition")
Returns the zero-based index of the currently selected filter.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.FileCtrl.GetPath "Permalink to this definition")
Returns the full path (directory and filename) of the currently selected file.


For the controls having the `FC_MULTIPLE` style, use [`GetPaths`](#wx.FileCtrl.GetPaths "wx.FileCtrl.GetPaths") instead.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def GetPaths(self) -> list[str]:
        """ 

`GetPaths`(*self*)[¶](#wx.FileCtrl.GetPaths "Permalink to this definition")

> Returns a list of the full paths (directory and filename) of the files
> chosen. This function should only be used with controlss which have
> the wx.``wx.FC\_MULTIPLE`` style, use GetPath for the others.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def GetWildcard(self) -> str:
        """ 

`GetWildcard`(*self*)[¶](#wx.FileCtrl.GetWildcard "Permalink to this definition")
Returns the current wildcard.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def SetDirectory(self, directory: str) -> bool:
        """ 

`SetDirectory`(*self*, *directory*)[¶](#wx.FileCtrl.SetDirectory "Permalink to this definition")
Sets(changes) the current directory displayed in the control.



Parameters
**directory** (*string*) – 



Return type
*bool*



Returns
Returns `True` on success, `False` otherwise.






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def SetFilename(self, filename: str) -> bool:
        """ 

`SetFilename`(*self*, *filename*)[¶](#wx.FileCtrl.SetFilename "Permalink to this definition")
Selects a certain file.



Parameters
**filename** (*string*) – 



Return type
*bool*



Returns
Returns `True` on success, `False` otherwise






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def SetFilterIndex(self, filterIndex: int) -> None:
        """ 

`SetFilterIndex`(*self*, *filterIndex*)[¶](#wx.FileCtrl.SetFilterIndex "Permalink to this definition")
Sets the current filter index, starting from zero.



Parameters
**filterIndex** (*int*) – 






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def SetPath(self, path: str) -> bool:
        """ 

`SetPath`(*self*, *path*)[¶](#wx.FileCtrl.SetPath "Permalink to this definition")
Changes to a certain directory and selects a certain file.


If *path* includes the directory part, it must exist, otherwise `False` is returned and nothing else is done.



Parameters
**path** (*string*) – 



Return type
*bool*



Returns
Returns `True` on success, `False` otherwise






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def SetWildcard(self, wildCard: str) -> None:
        """ 

`SetWildcard`(*self*, *wildCard*)[¶](#wx.FileCtrl.SetWildcard "Permalink to this definition")
Sets the wildcard, which can contain multiple file types, for example: “`BMP` files (.bmp)|.bmp|GIF files (.gif)|.gif”.



Parameters
**wildCard** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    def ShowHidden(self, show: bool) -> None:
        """ 

`ShowHidden`(*self*, *show*)[¶](#wx.FileCtrl.ShowHidden "Permalink to this definition")
Sets whether hidden files and folders are shown or not.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.FileCtrl.html
        """

    Directory: str  # `Directory`[¶](#wx.FileCtrl.Directory "Permalink to this definition")See [`GetDirectory`](#wx.FileCtrl.GetDirectory "wx.FileCtrl.GetDirectory") and [`SetDirectory`](#wx.FileCtrl.SetDirectory "wx.FileCtrl.SetDirectory")
    Filename: str  # `Filename`[¶](#wx.FileCtrl.Filename "Permalink to this definition")See [`GetFilename`](#wx.FileCtrl.GetFilename "wx.FileCtrl.GetFilename") and [`SetFilename`](#wx.FileCtrl.SetFilename "wx.FileCtrl.SetFilename")
    Filenames: list[str]  # `Filenames`[¶](#wx.FileCtrl.Filenames "Permalink to this definition")See [`GetFilenames`](#wx.FileCtrl.GetFilenames "wx.FileCtrl.GetFilenames")
    FilterIndex: int  # `FilterIndex`[¶](#wx.FileCtrl.FilterIndex "Permalink to this definition")See [`GetFilterIndex`](#wx.FileCtrl.GetFilterIndex "wx.FileCtrl.GetFilterIndex") and [`SetFilterIndex`](#wx.FileCtrl.SetFilterIndex "wx.FileCtrl.SetFilterIndex")
    Path: str  # `Path`[¶](#wx.FileCtrl.Path "Permalink to this definition")See [`GetPath`](#wx.FileCtrl.GetPath "wx.FileCtrl.GetPath") and [`SetPath`](#wx.FileCtrl.SetPath "wx.FileCtrl.SetPath")
    Paths: list[str]  # `Paths`[¶](#wx.FileCtrl.Paths "Permalink to this definition")See [`GetPaths`](#wx.FileCtrl.GetPaths "wx.FileCtrl.GetPaths")
    Wildcard: str  # `Wildcard`[¶](#wx.FileCtrl.Wildcard "Permalink to this definition")See [`GetWildcard`](#wx.FileCtrl.GetWildcard "wx.FileCtrl.GetWildcard") and [`SetWildcard`](#wx.FileCtrl.SetWildcard "wx.FileCtrl.SetWildcard")



FC_DEFAULT_STYLE: int  # The default style: wx.FC_OPEN

FC_OPEN: int  # Creates an file control suitable for opening files. Cannot be combined with wx.FC_SAVE.

FC_SAVE: int  # Creates an file control suitable for saving files. Cannot be combined with wx.FC_OPEN.

FC_MULTIPLE: int  # For open control only, Allows selecting multiple files. Cannot be combined with wx.FC_SAVE

FC_NOSHOWHIDDEN: int  # Hides the “Show Hidden Files” checkbox (Generic only) ^^

EVT_FILECTRL_FILEACTIVATED: int  # The user activated a file(by double-clicking or pressing Enter)

EVT_FILECTRL_SELECTIONCHANGED: int  # The user changed the current selection(by selecting or deselecting a file)

EVT_FILECTRL_FOLDERCHANGED: int  # The current folder of the file control has been changed

EVT_FILECTRL_FILTERCHANGED: int  # The current file filter of the file control has been changed.

class FileCtrlEvent(CommandEvent):
    """ **Possible constructors**:



```
FileCtrlEvent(type, evtObject, id)

```


A file control event holds information about events associated with
FileCtrl objects.


  


        Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
    """
    def __init__(self, type, evtObject, id) -> None:
        """ 

`__init__`(*self*, *type*, *evtObject*, *id*)[¶](#wx.FileCtrlEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **type** (*wx.EventType*) –
* **evtObject** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
        """

    def GetDirectory(self) -> str:
        """ 

`GetDirectory`(*self*)[¶](#wx.FileCtrlEvent.GetDirectory "Permalink to this definition")
Returns the current directory.


In case of a `EVT_FILECTRL_FOLDERCHANGED`, this method returns the new directory.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
        """

    def GetFile(self) -> str:
        """ 

`GetFile`(*self*)[¶](#wx.FileCtrlEvent.GetFile "Permalink to this definition")
Returns the file selected (assuming it is only one file).



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
        """

    def GetFiles(self) -> list[str]:
        """ 

`GetFiles`(*self*)[¶](#wx.FileCtrlEvent.GetFiles "Permalink to this definition")
Returns the files selected.


In case of a `EVT_FILECTRL_SELECTIONCHANGED`, this method returns the files selected after the event.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
        """

    def GetFilterIndex(self) -> int:
        """ 

`GetFilterIndex`(*self*)[¶](#wx.FileCtrlEvent.GetFilterIndex "Permalink to this definition")
Returns the current file filter index.


For a `EVT_FILECTRL_FILTERCHANGED` event, this method returns the new file filter index.



Return type
*int*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
        """

    def SetDirectory(self, directory: str) -> None:
        """ 

`SetDirectory`(*self*, *directory*)[¶](#wx.FileCtrlEvent.SetDirectory "Permalink to this definition")
Sets the directory of this event.



Parameters
**directory** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
        """

    def SetFiles(self, files: list[str]) -> None:
        """ 

`SetFiles`(*self*, *files*)[¶](#wx.FileCtrlEvent.SetFiles "Permalink to this definition")
Sets the files changed by this event.



Parameters
**files** (*list of strings*) – 






            Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
        """

    def SetFilterIndex(self, index: int) -> None:
        """ 

`SetFilterIndex`(*self*, *index*)[¶](#wx.FileCtrlEvent.SetFilterIndex "Permalink to this definition")
Sets the filter index changed by this event.



Parameters
**index** (*int*) – 





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.FileCtrlEvent.html
        """

    Directory: str  # `Directory`[¶](#wx.FileCtrlEvent.Directory "Permalink to this definition")See [`GetDirectory`](#wx.FileCtrlEvent.GetDirectory "wx.FileCtrlEvent.GetDirectory") and [`SetDirectory`](#wx.FileCtrlEvent.SetDirectory "wx.FileCtrlEvent.SetDirectory")
    File: str  # `File`[¶](#wx.FileCtrlEvent.File "Permalink to this definition")See [`GetFile`](#wx.FileCtrlEvent.GetFile "wx.FileCtrlEvent.GetFile")
    Files: list[str]  # `Files`[¶](#wx.FileCtrlEvent.Files "Permalink to this definition")See [`GetFiles`](#wx.FileCtrlEvent.GetFiles "wx.FileCtrlEvent.GetFiles") and [`SetFiles`](#wx.FileCtrlEvent.SetFiles "wx.FileCtrlEvent.SetFiles")
    FilterIndex: int  # `FilterIndex`[¶](#wx.FileCtrlEvent.FilterIndex "Permalink to this definition")See [`GetFilterIndex`](#wx.FileCtrlEvent.GetFilterIndex "wx.FileCtrlEvent.GetFilterIndex") and [`SetFilterIndex`](#wx.FileCtrlEvent.SetFilterIndex "wx.FileCtrlEvent.SetFilterIndex")



class FileDataObject(DataObjectSimple):
    """ **Possible constructors**:



```
FileDataObject()

```


FileDataObject is a specialization of DataObject for file names.


  


        Source: https://docs.wxpython.org/wx.FileDataObject.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FileDataObject.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.FileDataObject.html
        """

    def AddFile(self, file: str) -> None:
        """ 

`AddFile`(*self*, *file*)[¶](#wx.FileDataObject.AddFile "Permalink to this definition")
Adds a file to the file list represented by this data object (Windows only).



Parameters
**file** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDataObject.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.FileDataObject.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.FileDataObject.html
        """

    def GetFilenames(self) -> list[str]:
        """ 

`GetFilenames`(*self*)[¶](#wx.FileDataObject.GetFilenames "Permalink to this definition")
Returns the array of file names.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileDataObject.html
        """

    def SetData(self, format, buf) -> bool:
        """ 

`SetData`(*self*, *format*, *buf*)[¶](#wx.FileDataObject.SetData "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileDataObject.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.FileDataObject.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.FileDataObject.GetAllFormats "wx.FileDataObject.GetAllFormats")
    Filenames: list[str]  # `Filenames`[¶](#wx.FileDataObject.Filenames "Permalink to this definition")See [`GetFilenames`](#wx.FileDataObject.GetFilenames "wx.FileDataObject.GetFilenames")



class FileDialog(Dialog):
    """ **Possible constructors**:



```
FileDialog(parent, message=FileSelectorPromptStr,
           defaultDir="", defaultFile="",
           wildcard=FileSelectorDefaultWildcardStr, style=FD_DEFAULT_STYLE,
           pos=DefaultPosition, size=DefaultSize, name=FileDialogNameStr)

```


This class represents the file chooser dialog.


  


        Source: https://docs.wxpython.org/wx.FileDialog.html
    """
    def __init__(self, parent, message=FileSelectorPromptStr, defaultDir="", defaultFile="", wildcard=FileSelectorDefaultWildcardStr, style=FD_DEFAULT_STYLE, pos=DefaultPosition, size=DefaultSize, name=FileDialogNameStr) -> None:
        """ 

`__init__`(*self*, *parent*, *message=FileSelectorPromptStr*, *defaultDir=""*, *defaultFile=""*, *wildcard=FileSelectorDefaultWildcardStr*, *style=FD\_DEFAULT\_STYLE*, *pos=DefaultPosition*, *size=DefaultSize*, *name=FileDialogNameStr*)[¶](#wx.FileDialog.__init__ "Permalink to this definition")
Constructor.


Use [`ShowModal`](#wx.FileDialog.ShowModal "wx.FileDialog.ShowModal") to show the dialog.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show on the dialog.
* **defaultDir** (*string*) – The default directory, or the empty string.
* **defaultFile** (*string*) – The default filename, or the empty string.
* **wildcard** (*string*) – A wildcard, such as “x.x” or “`BMP` files (.bmp)|.bmp|GIF files (.gif)|.gif”. Note that the native Motif dialog has some limitations with respect to wildcards; see the Remarks section above.
* **style** (*long*) – A dialog style. See `FD_*` styles for more info.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position. Not implemented.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Dialog size. Not implemented.
* **name** (*string*) – Dialog name. Not implemented.






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def AddShortcut(self, directory, flags=0) -> bool:
        """ 

`AddShortcut`(*self*, *directory*, *flags=0*)[¶](#wx.FileDialog.AddShortcut "Permalink to this definition")
Add a directory to the list of shortcuts shown in the dialog.


File dialogs on many platforms display a fixed list of directories which can be easily selected by the user. This function allows to add an application-defined directory to this list, which can be convenient for the programs that use specific directories for their files instead of the default user document directory (see  [wx.StandardPaths](wx.StandardPaths.html#wx-standardpaths)).


Currently this function is only implemented in wxMSW and wxGTK and does nothing under the other platforms. Moreover, in wxMSW this function is incompatible with the use of `SetExtraControlCreator` , if you need to use this function and customize the dialog contents, please use the newer [`SetCustomizeHook`](#wx.FileDialog.SetCustomizeHook "wx.FileDialog.SetCustomizeHook") instead.


The dialogs sample shows the use of this function by adding two custom shortcuts corresponding to the subdirectories of `WXWIN` environment variable if it is defined.



Parameters
* **directory** (*string*) – The full path to the directory, which should exist.
* **flags** (*int*) – Can be set to `FD_SHORTCUT_BOTTOM` (which is also the default behaviour) to add the shortcut after the existing ones, or `FD_SHORTCUT_TOP` to add it before them. Support for the latter flag is only available in wxMSW, in wxGTK the shortcuts are always added to the bottom of the list.



Return type
*bool*



Returns
`True` on success or `False` if shortcut couldn’t be added, e.g. because this functionality is not available on the current platform.





New in version 4.2/wxWidgets-3.2.1.




Note


In wxMSW, the shortcuts appear in a separate section called “Application Links” by default. To change the title of this section, the application can specify a value of the `FileDescription` field of the version information structure in its resource file –





            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.FileDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetCurrentlySelectedFilename(self) -> str:
        """ 

`GetCurrentlySelectedFilename`(*self*)[¶](#wx.FileDialog.GetCurrentlySelectedFilename "Permalink to this definition")
Returns the path of the file currently selected in dialog.


Notice that this file is not necessarily going to be accepted by the user, so calling this function mostly makes sense from an update UI event handler of a custom file dialog extra control to update its state depending on the currently selected file.


Currently this function is fully implemented under GTK and MSW and always returns an empty string elsewhere.



Return type
`string`



Returns
The path of the currently selected file or an empty string if nothing is selected.





New in version 2.9.5.




See also


`SetExtraControlCreator`





            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetCurrentlySelectedFilterIndex(self) -> int:
        """ 

`GetCurrentlySelectedFilterIndex`(*self*)[¶](#wx.FileDialog.GetCurrentlySelectedFilterIndex "Permalink to this definition")
Returns the file type filter index currently selected in dialog.


Notice that this file type filter is not necessarily going to be the one finally accepted by the user, so calling this function mostly makes sense from an update UI event handler of a custom file dialog extra control to update its state depending on the currently selected file type filter.


Currently this function is fully implemented under macOS and MSW and always returns `NOT_FOUND` elsewhere.



Return type
*int*



Returns
The 0-based index of the currently selected file type filter or `wx.NOT_FOUND` if nothing is selected.





New in version 4.1/wxWidgets-3.1.3: - MSW




New in version 4.1/wxWidgets-3.1.5: - macOS




See also


`SetExtraControlCreator`




See also


[`GetFilterIndex`](#wx.FileDialog.GetFilterIndex "wx.FileDialog.GetFilterIndex")




See also


[`SetFilterIndex`](#wx.FileDialog.SetFilterIndex "wx.FileDialog.SetFilterIndex")





            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetDirectory(self) -> str:
        """ 

`GetDirectory`(*self*)[¶](#wx.FileDialog.GetDirectory "Permalink to this definition")
Returns the default directory.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetExtraControl(self) -> 'Window':
        """ 

`GetExtraControl`(*self*)[¶](#wx.FileDialog.GetExtraControl "Permalink to this definition")
If functions `SetExtraControlCreator` and [`ShowModal`](#wx.FileDialog.ShowModal "wx.FileDialog.ShowModal") were called, returns the extra window.


Otherwise returns `None`.



Return type
 [wx.Window](wx.Window.html#wx-window)





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetFilename(self) -> str:
        """ 

`GetFilename`(*self*)[¶](#wx.FileDialog.GetFilename "Permalink to this definition")
Returns the default filename.



Return type
`string`





Note


This function can’t be used with dialogs which have the `FD_MULTIPLE` style, use [`GetFilenames`](#wx.FileDialog.GetFilenames "wx.FileDialog.GetFilenames") instead.





            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetFilenames(self) -> list[str]:
        """ 

`GetFilenames`(*self*)[¶](#wx.FileDialog.GetFilenames "Permalink to this definition")

> Returns a list of filenames chosen in the dialog. This function
> should only be used with the dialogs which have wx.``MULTIPLE`` style,
> use GetFilename for the others.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetFilterIndex(self) -> int:
        """ 

`GetFilterIndex`(*self*)[¶](#wx.FileDialog.GetFilterIndex "Permalink to this definition")
Returns the index into the list of filters supplied, optionally, in the wildcard parameter.


Before the dialog is shown, this is the index which will be used when the dialog is first displayed.


After the dialog is shown, this is the index selected by the user.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetMessage(self) -> str:
        """ 

`GetMessage`(*self*)[¶](#wx.FileDialog.GetMessage "Permalink to this definition")
Returns the message that will be displayed on the dialog.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.FileDialog.GetPath "Permalink to this definition")
Returns the full path (directory and filename) of the selected file.



Return type
`string`





Note


This function can’t be used with dialogs which have the `FD_MULTIPLE` style, use [`GetPaths`](#wx.FileDialog.GetPaths "wx.FileDialog.GetPaths") instead.





            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetPaths(self) -> list[str]:
        """ 

`GetPaths`(*self*)[¶](#wx.FileDialog.GetPaths "Permalink to this definition")

> Returns a list of the full paths of the files chosen. This function
> should only be used with the dialogs which have wx.``MULTIPLE`` style, use
> GetPath for the others.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def GetWildcard(self) -> str:
        """ 

`GetWildcard`(*self*)[¶](#wx.FileDialog.GetWildcard "Permalink to this definition")
Returns the file dialog wildcard.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def SetCustomizeHook(self, customizeHook: 'FileDialogCustomizeHook') -> bool:
        """ 

`SetCustomizeHook`(*self*, *customizeHook*)[¶](#wx.FileDialog.SetCustomizeHook "Permalink to this definition")
Set the hook to be used for customizing the dialog contents.


This function can be called before calling [`ShowModal`](#wx.FileDialog.ShowModal "wx.FileDialog.ShowModal") to specify that the dialog contents should be customized using the provided hook. See  [wx.FileDialogCustomizeHook](wx.FileDialogCustomizeHook.html#wx-filedialogcustomizehook) documentation and Dialogs Sample for the examples of using it.



Parameters
**customizeHook** ([*wx.FileDialogCustomizeHook*](wx.FileDialogCustomizeHook.html#wx.FileDialogCustomizeHook "wx.FileDialogCustomizeHook")) – The hook object that will be used by the dialog. This object must remain valid at least until [`ShowModal`](#wx.FileDialog.ShowModal "wx.FileDialog.ShowModal") returns.



Return type
*bool*



Returns
`True` if the hook was successfully set or `False` if customizing the file dialog is not supported by the current platform.





New in version 4.1/wxWidgets-3.1.7.




Note


In order to define a custom hook object, */filedlgcustomize.h* must be included in addition to the usual */filedlg.h* header.





            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def SetDirectory(self, directory: str) -> None:
        """ 

`SetDirectory`(*self*, *directory*)[¶](#wx.FileDialog.SetDirectory "Permalink to this definition")
Sets the default directory.



Parameters
**directory** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def SetFilename(self, setfilename: str) -> None:
        """ 

`SetFilename`(*self*, *setfilename*)[¶](#wx.FileDialog.SetFilename "Permalink to this definition")
Sets the default filename.


In wxGTK this will have little effect unless a default directory has previously been set.



Parameters
**setfilename** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def SetFilterIndex(self, filterIndex: int) -> None:
        """ 

`SetFilterIndex`(*self*, *filterIndex*)[¶](#wx.FileDialog.SetFilterIndex "Permalink to this definition")
Sets the default filter index, starting from zero.



Parameters
**filterIndex** (*int*) – 






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def SetMessage(self, message: str) -> None:
        """ 

`SetMessage`(*self*, *message*)[¶](#wx.FileDialog.SetMessage "Permalink to this definition")
Sets the message that will be displayed on the dialog.



Parameters
**message** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def SetPath(self, path: str) -> None:
        """ 

`SetPath`(*self*, *path*)[¶](#wx.FileDialog.SetPath "Permalink to this definition")
Sets the path (the combined directory and filename that will be returned when the dialog is dismissed).



Parameters
**path** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def SetWildcard(self, wildCard: str) -> None:
        """ 

`SetWildcard`(*self*, *wildCard*)[¶](#wx.FileDialog.SetWildcard "Permalink to this definition")
Sets the wildcard, which can contain multiple file types, for example: “`BMP` files (.bmp)|.bmp|GIF files (.gif)|.gif”.


Note that the native Motif dialog has some limitations with respect to wildcards; see the Remarks section above.



Parameters
**wildCard** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.FileDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning `ID_OK` if the user pressed `wx.OK`, and `ID_CANCEL` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileDialog.html
        """

    CurrentlySelectedFilename: str  # `CurrentlySelectedFilename`[¶](#wx.FileDialog.CurrentlySelectedFilename "Permalink to this definition")See [`GetCurrentlySelectedFilename`](#wx.FileDialog.GetCurrentlySelectedFilename "wx.FileDialog.GetCurrentlySelectedFilename")
    CurrentlySelectedFilterIndex: int  # `CurrentlySelectedFilterIndex`[¶](#wx.FileDialog.CurrentlySelectedFilterIndex "Permalink to this definition")See [`GetCurrentlySelectedFilterIndex`](#wx.FileDialog.GetCurrentlySelectedFilterIndex "wx.FileDialog.GetCurrentlySelectedFilterIndex")
    Directory: str  # `Directory`[¶](#wx.FileDialog.Directory "Permalink to this definition")See [`GetDirectory`](#wx.FileDialog.GetDirectory "wx.FileDialog.GetDirectory") and [`SetDirectory`](#wx.FileDialog.SetDirectory "wx.FileDialog.SetDirectory")
    ExtraControl: 'Window'  # `ExtraControl`[¶](#wx.FileDialog.ExtraControl "Permalink to this definition")See [`GetExtraControl`](#wx.FileDialog.GetExtraControl "wx.FileDialog.GetExtraControl")
    Filename: str  # `Filename`[¶](#wx.FileDialog.Filename "Permalink to this definition")See [`GetFilename`](#wx.FileDialog.GetFilename "wx.FileDialog.GetFilename") and [`SetFilename`](#wx.FileDialog.SetFilename "wx.FileDialog.SetFilename")
    Filenames: list[str]  # `Filenames`[¶](#wx.FileDialog.Filenames "Permalink to this definition")See [`GetFilenames`](#wx.FileDialog.GetFilenames "wx.FileDialog.GetFilenames")
    FilterIndex: int  # `FilterIndex`[¶](#wx.FileDialog.FilterIndex "Permalink to this definition")See [`GetFilterIndex`](#wx.FileDialog.GetFilterIndex "wx.FileDialog.GetFilterIndex") and [`SetFilterIndex`](#wx.FileDialog.SetFilterIndex "wx.FileDialog.SetFilterIndex")
    Message: str  # `Message`[¶](#wx.FileDialog.Message "Permalink to this definition")See [`GetMessage`](#wx.FileDialog.GetMessage "wx.FileDialog.GetMessage") and [`SetMessage`](#wx.FileDialog.SetMessage "wx.FileDialog.SetMessage")
    Path: str  # `Path`[¶](#wx.FileDialog.Path "Permalink to this definition")See [`GetPath`](#wx.FileDialog.GetPath "wx.FileDialog.GetPath") and [`SetPath`](#wx.FileDialog.SetPath "wx.FileDialog.SetPath")
    Paths: list[str]  # `Paths`[¶](#wx.FileDialog.Paths "Permalink to this definition")See [`GetPaths`](#wx.FileDialog.GetPaths "wx.FileDialog.GetPaths")
    Wildcard: str  # `Wildcard`[¶](#wx.FileDialog.Wildcard "Permalink to this definition")See [`GetWildcard`](#wx.FileDialog.GetWildcard "wx.FileDialog.GetWildcard") and [`SetWildcard`](#wx.FileDialog.SetWildcard "wx.FileDialog.SetWildcard")



FD_DEFAULT_STYLE: int  # Equivalent to  FD_OPEN .

FD_NO_FOLLOW: int  # Directs the dialog to return the path and file name of the selected shortcut file, not its target as it does by default. Currently this flag is only implemented in wxMSW and wxOSX (where it prevents aliases from being resolved). The non-dereferenced link path is always returned, even without this flag, under Unix and so using it there doesn’t do anything. This flag was added in wxWidgets 3.1.0.

FD_CHANGE_DIR: int  # Change the current working directory (when the dialog is dismissed) to the directory where the file(s) chosen by the user are.

FD_PREVIEW: int  # Show the preview of the selected files (currently only supported by wxGTK).

FD_SHOW_HIDDEN: int  # Show hidden files. This flag was added in wxWidgets 3.1.3 ^^

class FileDialogButton(FileDialogCustomControl):
    """ Represents a custom button inside FileDialog.




        Source: https://docs.wxpython.org/wx.FileDialogButton.html
    """


class FileDialogCheckBox(FileDialogCustomControl):
    """ Represents a custom checkbox inside FileDialog.


  


        Source: https://docs.wxpython.org/wx.FileDialogCheckBox.html
    """
    def GetValue(self) -> bool:
        """ 

`GetValue`(*self*)[¶](#wx.FileDialogCheckBox.GetValue "Permalink to this definition")
Return `True` if the checkbox is checked.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileDialogCheckBox.html
        """

    def SetValue(self, value: bool) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.FileDialogCheckBox.SetValue "Permalink to this definition")
Check or uncheck the checkbox.



Parameters
**value** (*bool*) – 






            Source: https://docs.wxpython.org/wx.FileDialogCheckBox.html
        """

    Value: bool  # `Value`[¶](#wx.FileDialogCheckBox.Value "Permalink to this definition")See [`GetValue`](#wx.FileDialogCheckBox.GetValue "wx.FileDialogCheckBox.GetValue") and [`SetValue`](#wx.FileDialogCheckBox.SetValue "wx.FileDialogCheckBox.SetValue")



class FileDialogChoice(FileDialogCustomControl):
    """ Represents a custom read-only combobox inside FileDialog.


  


        Source: https://docs.wxpython.org/wx.FileDialogChoice.html
    """
    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.FileDialogChoice.GetSelection "Permalink to this definition")
Return the index of the selected item, possibly `wx.NOT_FOUND`.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileDialogChoice.html
        """

    def SetSelection(self, n: int) -> None:
        """ 

`SetSelection`(*self*, *n*)[¶](#wx.FileDialogChoice.SetSelection "Permalink to this definition")
Set the selection to the item with the given index.


Using `NOT_FOUND` for *n* is not supported, once a selection is made it cannot be undone.



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.FileDialogChoice.html
        """

    Selection: int  # `Selection`[¶](#wx.FileDialogChoice.Selection "Permalink to this definition")See [`GetSelection`](#wx.FileDialogChoice.GetSelection "wx.FileDialogChoice.GetSelection") and [`SetSelection`](#wx.FileDialogChoice.SetSelection "wx.FileDialogChoice.SetSelection")



class FileDialogCustomControl(EvtHandler):
    """ The base class for all FileDialog custom controls.


  


        Source: https://docs.wxpython.org/wx.FileDialogCustomControl.html
    """
    def Disable(self) -> None:
        """ 

`Disable`(*self*)[¶](#wx.FileDialogCustomControl.Disable "Permalink to this definition")
Disable this control.


This is equivalent to `Enable(false)` .




            Source: https://docs.wxpython.org/wx.FileDialogCustomControl.html
        """

    def Enable(self, enable: bool=True) -> None:
        """ 

`Enable`(*self*, *enable=True*)[¶](#wx.FileDialogCustomControl.Enable "Permalink to this definition")
Enable or disable this control.



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.FileDialogCustomControl.html
        """

    def Hide(self) -> None:
        """ 

`Hide`(*self*)[¶](#wx.FileDialogCustomControl.Hide "Permalink to this definition")
Hide this control.


This is equivalent to `Show(false)` .




            Source: https://docs.wxpython.org/wx.FileDialogCustomControl.html
        """

    def Show(self, show: bool=True) -> None:
        """ 

`Show`(*self*, *show=True*)[¶](#wx.FileDialogCustomControl.Show "Permalink to this definition")
Show or hide this control.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.FileDialogCustomControl.html
        """



class FileDialogCustomize:
    """ Used with FileDialogCustomizeHook to add custom controls to
FileDialog.


  


        Source: https://docs.wxpython.org/wx.FileDialogCustomize.html
    """
    def AddButton(self, label: str) -> 'FileDialogButton':
        """ 

`AddButton`(*self*, *label*)[¶](#wx.FileDialogCustomize.AddButton "Permalink to this definition")
Add a button with the specified label.



Parameters
**label** (*string*) – 



Return type
 [wx.FileDialogButton](wx.FileDialogButton.html#wx-filedialogbutton)






            Source: https://docs.wxpython.org/wx.FileDialogCustomize.html
        """

    def AddCheckBox(self, label: str) -> 'FileDialogCheckBox':
        """ 

`AddCheckBox`(*self*, *label*)[¶](#wx.FileDialogCustomize.AddCheckBox "Permalink to this definition")
Add a checkbox with the specified label.



Parameters
**label** (*string*) – 



Return type
 [wx.FileDialogCheckBox](wx.FileDialogCheckBox.html#wx-filedialogcheckbox)






            Source: https://docs.wxpython.org/wx.FileDialogCustomize.html
        """

    def AddChoice(self, strings: list[str]) -> 'FileDialogChoice':
        """ 

`AddChoice`(*self*, *strings*)[¶](#wx.FileDialogCustomize.AddChoice "Permalink to this definition")
Add a read-only combobox with the specified contents.


The combobox doesn’t have any initial selection, i.e. [`wx.FileDialogChoice.GetSelection`](wx.FileDialogChoice.html#wx.FileDialogChoice.GetSelection "wx.FileDialogChoice.GetSelection") returns `NOT_FOUND` , if some item must be selected, use [`wx.FileDialogChoice.SetSelection`](wx.FileDialogChoice.html#wx.FileDialogChoice.SetSelection "wx.FileDialogChoice.SetSelection") explicitly to do it.



Parameters
**strings** (*list of strings*) – A not `None` pointer to an array of *n* strings.



Return type
 [wx.FileDialogChoice](wx.FileDialogChoice.html#wx-filedialogchoice)






            Source: https://docs.wxpython.org/wx.FileDialogCustomize.html
        """

    def AddRadioButton(self, label: str) -> 'FileDialogRadioButton':
        """ 

`AddRadioButton`(*self*, *label*)[¶](#wx.FileDialogCustomize.AddRadioButton "Permalink to this definition")
Add a radio button with the specified label.


The first radio button added will be initially checked. All the radio buttons added immediately after it will become part of the same radio group and will not be checked, but checking any one of them later will uncheck the first button and all the other ones.


If two consecutive but distinct radio groups are required, [`AddStaticText`](#wx.FileDialogCustomize.AddStaticText "wx.FileDialogCustomize.AddStaticText") with an empty label can be used to separate them.



Parameters
**label** (*string*) – 



Return type
 [wx.FileDialogRadioButton](wx.FileDialogRadioButton.html#wx-filedialogradiobutton)






            Source: https://docs.wxpython.org/wx.FileDialogCustomize.html
        """

    def AddStaticText(self, label: str) -> 'FileDialogStaticText':
        """ 

`AddStaticText`(*self*, *label*)[¶](#wx.FileDialogCustomize.AddStaticText "Permalink to this definition")
Add a static text with the given contents.


The contents of the static text can be updated later, i.e. it doesn’t need to be actually static.



Parameters
**label** (*string*) – 



Return type
 [wx.FileDialogStaticText](wx.FileDialogStaticText.html#wx-filedialogstatictext)






            Source: https://docs.wxpython.org/wx.FileDialogCustomize.html
        """

    def AddTextCtrl(self, label: str="") -> 'FileDialogTextCtrl':
        """ 

`AddTextCtrl`(*self*, *label=""*)[¶](#wx.FileDialogCustomize.AddTextCtrl "Permalink to this definition")
Add a text control with an optional label preceding it.


Unlike all the other functions for adding controls, the *label* parameter here doesn’t specify the contents of the text control itself, but rather the label appearing before it. Unlike static controls added by [`AddStaticText`](#wx.FileDialogCustomize.AddStaticText "wx.FileDialogCustomize.AddStaticText") , this label is guaranteed to be immediately adjacent to it.


If *label* is empty, no label is created.



Parameters
**label** (*string*) – 



Return type
 [wx.FileDialogTextCtrl](wx.FileDialogTextCtrl.html#wx-filedialogtextctrl)






            Source: https://docs.wxpython.org/wx.FileDialogCustomize.html
        """



class FileDialogCustomizeHook:
    """ Base class for customization hooks used with FileDialog.


  


        Source: https://docs.wxpython.org/wx.FileDialogCustomizeHook.html
    """
    def AddCustomControls(self, customizer: 'FileDialogCustomize') -> None:
        """ 

`AddCustomControls`(*self*, *customizer*)[¶](#wx.FileDialogCustomizeHook.AddCustomControls "Permalink to this definition")
Must be overridden to add custom controls to the dialog using the provided customizer object.


Call  [wx.FileDialogCustomize](wx.FileDialogCustomize.html#wx-filedialogcustomize) functions to add controls and possibly bind to their events.


Note that there is no possibility to define the custom controls layout, they will appear more or less consecutively, but the exact layout is determined by the current platform.



Parameters
**customizer** ([*wx.FileDialogCustomize*](wx.FileDialogCustomize.html#wx.FileDialogCustomize "wx.FileDialogCustomize")) – 






            Source: https://docs.wxpython.org/wx.FileDialogCustomizeHook.html
        """

    def TransferDataFromCustomControls(self) -> None:
        """ 

`TransferDataFromCustomControls`(*self*)[¶](#wx.FileDialogCustomizeHook.TransferDataFromCustomControls "Permalink to this definition")
Should typically be overridden to save the values of the custom controls when the dialog is accepted.


Custom controls are destroyed and cannot be used any longer once [`wx.FileDialog.ShowModal`](wx.FileDialog.html#wx.FileDialog.ShowModal "wx.FileDialog.ShowModal") returns, so their values must be retrieved in this function, which is called just before this happens.


This function is *not* called if the user cancels the dialog.


Base class version does nothing.




            Source: https://docs.wxpython.org/wx.FileDialogCustomizeHook.html
        """

    def UpdateCustomControls(self) -> None:
        """ 

`UpdateCustomControls`(*self*)[¶](#wx.FileDialogCustomizeHook.UpdateCustomControls "Permalink to this definition")
May be overridden to update the custom controls whenever something changes in the dialog.


This function is called when the user selects a file, changes the directory or changes the current filter in the dialog, for example. It can be used to update the custom controls state depending on the currently selected file, for example.


Note that it is *not* necessarily called when the value of a custom control changes.


Base class version does nothing.




            Source: https://docs.wxpython.org/wx.FileDialogCustomizeHook.html
        """



class FileDialogRadioButton(FileDialogCustomControl):
    """ Represents a custom radio button inside FileDialog.


  


        Source: https://docs.wxpython.org/wx.FileDialogRadioButton.html
    """
    def GetValue(self) -> bool:
        """ 

`GetValue`(*self*)[¶](#wx.FileDialogRadioButton.GetValue "Permalink to this definition")
Return `True` if the radio button is selected.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileDialogRadioButton.html
        """

    def SetValue(self, value: bool) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.FileDialogRadioButton.SetValue "Permalink to this definition")
Select the value of the radio button.


Using `False` for *value* is not supported, this argument only exists for consistency with [`wx.RadioButton.SetValue`](wx.RadioButton.html#wx.RadioButton.SetValue "wx.RadioButton.SetValue") .



Parameters
**value** (*bool*) – 






            Source: https://docs.wxpython.org/wx.FileDialogRadioButton.html
        """

    Value: bool  # `Value`[¶](#wx.FileDialogRadioButton.Value "Permalink to this definition")See [`GetValue`](#wx.FileDialogRadioButton.GetValue "wx.FileDialogRadioButton.GetValue") and [`SetValue`](#wx.FileDialogRadioButton.SetValue "wx.FileDialogRadioButton.SetValue")



class FileDialogStaticText(FileDialogCustomControl):
    """ Represents a custom static text inside FileDialog.


  


        Source: https://docs.wxpython.org/wx.FileDialogStaticText.html
    """
    def SetLabelText(self, text: str) -> None:
        """ 

`SetLabelText`(*self*, *text*)[¶](#wx.FileDialogStaticText.SetLabelText "Permalink to this definition")
Set the text shown in the label.


Any ampersands in the *text* will be escaped, there is no need to do it manually, e.g. using [`wx.Control.EscapeMnemonics`](wx.Control.html#wx.Control.EscapeMnemonics "wx.Control.EscapeMnemonics") .



Parameters
**text** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDialogStaticText.html
        """



class FileDialogTextCtrl(FileDialogCustomControl):
    """ Represents a custom text control inside FileDialog.


  


        Source: https://docs.wxpython.org/wx.FileDialogTextCtrl.html
    """
    def GetValue(self) -> str:
        """ 

`GetValue`(*self*)[¶](#wx.FileDialogTextCtrl.GetValue "Permalink to this definition")
Get the current value entered into the control.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileDialogTextCtrl.html
        """

    def SetValue(self, text: str) -> None:
        """ 

`SetValue`(*self*, *text*)[¶](#wx.FileDialogTextCtrl.SetValue "Permalink to this definition")
Set the current control value.



Parameters
**text** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDialogTextCtrl.html
        """

    Value: str  # `Value`[¶](#wx.FileDialogTextCtrl.Value "Permalink to this definition")See [`GetValue`](#wx.FileDialogTextCtrl.GetValue "wx.FileDialogTextCtrl.GetValue") and [`SetValue`](#wx.FileDialogTextCtrl.SetValue "wx.FileDialogTextCtrl.SetValue")



class FileDirPickerEvent(CommandEvent):
    """ **Possible constructors**:



```
FileDirPickerEvent()

FileDirPickerEvent(type, generator, id, path)

```


This event class is used for the events generated by FilePickerCtrl
and by DirPickerCtrl.


  


        Source: https://docs.wxpython.org/wx.FileDirPickerEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FileDirPickerEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, type, generator, id, path)*


The constructor is not normally used by the user code.



Parameters
* **type** (*wx.EventType*) –
* **generator** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) –
* **id** (*int*) –
* **path** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.FileDirPickerEvent.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.FileDirPickerEvent.GetPath "Permalink to this definition")
Retrieve the absolute path of the file/directory the user has just selected.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileDirPickerEvent.html
        """

    def SetPath(self, path: str) -> None:
        """ 

`SetPath`(*self*, *path*)[¶](#wx.FileDirPickerEvent.SetPath "Permalink to this definition")
Set the absolute path of the file/directory associated with the event.



Parameters
**path** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileDirPickerEvent.html
        """

    Path: str  # `Path`[¶](#wx.FileDirPickerEvent.Path "Permalink to this definition")See [`GetPath`](#wx.FileDirPickerEvent.GetPath "wx.FileDirPickerEvent.GetPath") and [`SetPath`](#wx.FileDirPickerEvent.SetPath "wx.FileDirPickerEvent.SetPath")



EVT_FILEPICKER_CHANGED: int  # Generated whenever the selected file changes.

class FilePickerCtrl(PickerBase):
    """ **Possible constructors**:



```
FilePickerCtrl()

FilePickerCtrl(parent, id=ID_ANY, path="",
               message=FileSelectorPromptStr, wildcard=FileSelectorDefaultWildcardStr,
               pos=DefaultPosition, size=DefaultSize, style=FLP_DEFAULT_STYLE,
               validator=DefaultValidator, name=FilePickerCtrlNameStr)

```


This control allows the user to select a file.


  


        Source: https://docs.wxpython.org/wx.FilePickerCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FilePickerCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, path=””, message=FileSelectorPromptStr, wildcard=FileSelectorDefaultWildcardStr, pos=DefaultPosition, size=DefaultSize, style=FLP\_DEFAULT\_STYLE, validator=DefaultValidator, name=FilePickerCtrlNameStr)*


Initializes the object and calls [`Create`](#wx.FilePickerCtrl.Create "wx.FilePickerCtrl.Create") with all the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **path** (*string*) –
* **message** (*string*) –
* **wildcard** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.FilePickerCtrl.html
        """

    def Create(self, parent, id=ID_ANY, path="", message=FileSelectorPromptStr, wildcard=FileSelectorDefaultWildcardStr, pos=DefaultPosition, size=DefaultSize, style=FLP_DEFAULT_STYLE, validator=DefaultValidator, name=FilePickerCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *path=""*, *message=FileSelectorPromptStr*, *wildcard=FileSelectorDefaultWildcardStr*, *pos=DefaultPosition*, *size=DefaultSize*, *style=FLP\_DEFAULT\_STYLE*, *validator=DefaultValidator*, *name=FilePickerCtrlNameStr*)[¶](#wx.FilePickerCtrl.Create "Permalink to this definition")
Creates this widget with the given parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window, must not be not `None`.
* **id** (*wx.WindowID*) – The identifier for the control.
* **path** (*string*) – The initial file shown in the control. Must be a valid path to a file or the empty string.
* **message** (*string*) – The message shown to the user in the  [wx.FileDialog](wx.FileDialog.html#wx-filedialog) shown by the control.
* **wildcard** (*string*) – A wildcard which defines user-selectable files (use the same syntax as for  [wx.FileDialog](wx.FileDialog.html#wx-filedialog)’s wildcards).
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Initial position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Initial size.
* **style** (*long*) – The window style, see `FLP_` flags.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Validator which can be used for additional data checks.
* **name** (*string*) – Control name.



Return type
*bool*



Returns
`True` if the control was successfully created or `False` if creation failed.






            Source: https://docs.wxpython.org/wx.FilePickerCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.FilePickerCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.FilePickerCtrl.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.FilePickerCtrl.GetPath "Permalink to this definition")
Returns the absolute path of the currently selected file.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FilePickerCtrl.html
        """

    def SetInitialDirectory(self, dir: str) -> None:
        """ 

`SetInitialDirectory`(*self*, *dir*)[¶](#wx.FilePickerCtrl.SetInitialDirectory "Permalink to this definition")
Set the directory to show when starting to browse for files.


This function is mostly useful for the file picker controls which have no selection initially to configure the directory that should be shown if the user starts browsing for files as otherwise the directory of initially selected file is used, which is usually the desired behaviour and so the directory specified by this function is ignored in this case.



Parameters
**dir** (*string*) – 





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.FilePickerCtrl.html
        """

    def SetPath(self, filename: str) -> None:
        """ 

`SetPath`(*self*, *filename*)[¶](#wx.FilePickerCtrl.SetPath "Permalink to this definition")
Sets the absolute path of the currently selected file.


If the control uses `FLP_FILE_MUST_EXIST` and does not use `FLP_USE_TEXTCTRL` style, the *filename* must be a name of an existing file and will be simply ignored by the native wxGTK implementation if this is not the case (the generic implementation used under the other platforms accepts even invalid file names currently, but this is subject to change in the future, don’t rely on being able to use non-existent paths with it).



Parameters
**filename** (*string*) – 






            Source: https://docs.wxpython.org/wx.FilePickerCtrl.html
        """

    Path: str  # `Path`[¶](#wx.FilePickerCtrl.Path "Permalink to this definition")See [`GetPath`](#wx.FilePickerCtrl.GetPath "wx.FilePickerCtrl.GetPath") and [`SetPath`](#wx.FilePickerCtrl.SetPath "wx.FilePickerCtrl.SetPath")



FLP_DEFAULT_STYLE: int  # The default style: includes wx.FLP_OPEN | wx.FLP_FILE_MUST_EXIST and, under wxMSW and wxOSX, wx.FLP_USE_TEXTCTRL.

FLP_USE_TEXTCTRL: int  # Creates a text control to the left of the picker button which is completely managed by the   wx.FilePickerCtrl  and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button’s value. Use functions defined in   wx.PickerBase  to modify the text control.

FLP_OPEN: int  # Creates a picker which allows the user to select a file to open.

FLP_SAVE: int  # Creates a picker which allows the user to select a file to save.

FLP_OVERWRITE_PROMPT: int  # Can be combined with wx.FLP_SAVE only: ask confirmation to the user before selecting a file.

FLP_FILE_MUST_EXIST: int  # Can be combined with wx.FLP_OPEN only: the file selected in the popup   wx.FileDialog  must be an existing file. Notice that it still remains possible for the user to enter a non-existent file name in the text control if  FLP_USE_TEXTCTRL   is also used, this flag is a hint for the user rather than a guarantee that the selected file does exist for the program.

FLP_CHANGE_DIR: int  # Change current working directory on each user file selection change.

FLP_SMALL: int  # Use smaller version of the control with a small “…” button instead of the normal “Browse” one. This flag is new since wxWidgets 2.9.3. ^^

class FileDropTarget(DropTarget):
    """ **Possible constructors**:



```
FileDropTarget()

```


This is a drop target which accepts files (dragged from File Manager
or Explorer).


  


        Source: https://docs.wxpython.org/wx.FileDropTarget.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FileDropTarget.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.FileDropTarget.html
        """

    def OnDrop(self, x, y) -> bool:
        """ 

`OnDrop`(*self*, *x*, *y*)[¶](#wx.FileDropTarget.OnDrop "Permalink to this definition")
See [`wx.DropTarget.OnDrop`](wx.DropTarget.html#wx.DropTarget.OnDrop "wx.DropTarget.OnDrop") .


This function is implemented appropriately for files, and calls [`OnDropFiles`](#wx.FileDropTarget.OnDropFiles "wx.FileDropTarget.OnDropFiles") .



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileDropTarget.html
        """

    def OnDropFiles(self, x, y, filenames) -> bool:
        """ 

`OnDropFiles`(*self*, *x*, *y*, *filenames*)[¶](#wx.FileDropTarget.OnDropFiles "Permalink to this definition")
Override this function to receive dropped files.



Parameters
* **x** (*int*) – The x coordinate of the mouse.
* **y** (*int*) – The y coordinate of the mouse.
* **filenames** (*list of strings*) – An array of filenames.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileDropTarget.html
        """



class FileHistory(Object):
    """ **Possible constructors**:



```
FileHistory(maxFiles=9, idBase=ID_FILE1)

```


The FileHistory encapsulates a user interface convenience, the list
of most recently visited files as shown on a menu (usually the File
menu).


  


        Source: https://docs.wxpython.org/wx.FileHistory.html
    """
    def __init__(self, maxFiles=9, idBase=ID_FILE1) -> None:
        """ 

`__init__`(*self*, *maxFiles=9*, *idBase=ID\_FILE1*)[¶](#wx.FileHistory.__init__ "Permalink to this definition")
Constructor.


Pass the maximum number of files that should be stored and displayed.


*idBase* defaults to `wx.ID_FILE1` and represents the id given to the first history menu item. Since menu items can’t share the same `ID` you should change *idBase* (to one of your own defined IDs) when using more than one  [wx.FileHistory](#wx-filehistory) in your application.



Parameters
* **maxFiles** (*int*) –
* **idBase** (*wx.WindowID*) –






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def AddFileToHistory(self, filename: str) -> None:
        """ 

`AddFileToHistory`(*self*, *filename*)[¶](#wx.FileHistory.AddFileToHistory "Permalink to this definition")
Adds a file to the file history list, if the object has a pointer to an appropriate file menu.



Parameters
**filename** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def AddFilesToMenu(self, *args, **kw) -> None:
        """ 

`AddFilesToMenu`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FileHistory.AddFilesToMenu "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddFilesToMenu** *(self)*


Appends the files in the history list, to all menus managed by the file history object.




---

  



**AddFilesToMenu** *(self, menu)*


Appends the files in the history list, to the given menu only.



Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – 






---

  





            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def GetBaseId(self) -> int:
        """ 

`GetBaseId`(*self*)[¶](#wx.FileHistory.GetBaseId "Permalink to this definition")
Returns the base identifier for the range used for appending items.



Return type
*wx.WindowID*






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def GetCount(self) -> int:
        """ 

`GetCount`(*self*)[¶](#wx.FileHistory.GetCount "Permalink to this definition")
Returns the number of files currently stored in the file history.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def GetHistoryFile(self, index: int) -> str:
        """ 

`GetHistoryFile`(*self*, *index*)[¶](#wx.FileHistory.GetHistoryFile "Permalink to this definition")
Returns the file at this index (zero-based).



Parameters
**index** (*int*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def GetMaxFiles(self) -> int:
        """ 

`GetMaxFiles`(*self*)[¶](#wx.FileHistory.GetMaxFiles "Permalink to this definition")
Returns the maximum number of files that can be stored.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def GetMenuPathStyle(self) -> 'FileHistoryMenuPathStyle':
        """ 

`GetMenuPathStyle`(*self*)[¶](#wx.FileHistory.GetMenuPathStyle "Permalink to this definition")
Get the current style of the menu item labels.


Initially returns `FH_PATH_SHOW_IF_DIFFERENT`.



Return type
 [wx.FileHistoryMenuPathStyle](wx.FileHistoryMenuPathStyle.enumeration.html#wx-filehistorymenupathstyle)





New in version 4.1/wxWidgets-3.1.5.




See also


[`SetMenuPathStyle`](#wx.FileHistory.SetMenuPathStyle "wx.FileHistory.SetMenuPathStyle")





            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def GetMenus(self) -> 'FileHistoryMenuList':
        """ 

`GetMenus`(*self*)[¶](#wx.FileHistory.GetMenus "Permalink to this definition")
Returns the list of menus that are managed by this file history object.



Return type
*FileHistoryMenuList*





See also


[`UseMenu`](#wx.FileHistory.UseMenu "wx.FileHistory.UseMenu")





            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def Load(self, config: 'ConfigBase') -> None:
        """ 

`Load`(*self*, *config*)[¶](#wx.FileHistory.Load "Permalink to this definition")
Loads the file history from the given config object.


This function should be called explicitly by the application.



Parameters
**config** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) – 





See also


 [wx.ConfigBase](wx.ConfigBase.html#wx-configbase)





            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def RemoveFileFromHistory(self, i: int) -> None:
        """ 

`RemoveFileFromHistory`(*self*, *i*)[¶](#wx.FileHistory.RemoveFileFromHistory "Permalink to this definition")
Removes the specified file from the history.



Parameters
**i** (*int*) – 






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def RemoveMenu(self, menu: 'Menu') -> None:
        """ 

`RemoveMenu`(*self*, *menu*)[¶](#wx.FileHistory.RemoveMenu "Permalink to this definition")
Removes this menu from the list of those managed by this object.



Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – 






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def Save(self, config: 'ConfigBase') -> None:
        """ 

`Save`(*self*, *config*)[¶](#wx.FileHistory.Save "Permalink to this definition")
Saves the file history into the given config object.


This must be called explicitly by the application.



Parameters
**config** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) – 





See also


 [wx.ConfigBase](wx.ConfigBase.html#wx-configbase)





            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def SetBaseId(self, baseId: int) -> None:
        """ 

`SetBaseId`(*self*, *baseId*)[¶](#wx.FileHistory.SetBaseId "Permalink to this definition")
Sets the base identifier for the range used for appending items.



Parameters
**baseId** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def SetMenuPathStyle(self, style: FileHistoryMenuPathStyle) -> None:
        """ 

`SetMenuPathStyle`(*self*, *style*)[¶](#wx.FileHistory.SetMenuPathStyle "Permalink to this definition")
Set the style of the menu item labels.


By default, the menu item label style is `FH_PATH_SHOW_IF_DIFFERENT`.



Parameters
**style** ([*FileHistoryMenuPathStyle*](wx.FileHistoryMenuPathStyle.enumeration.html "FileHistoryMenuPathStyle")) – 





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    def UseMenu(self, menu: 'Menu') -> None:
        """ 

`UseMenu`(*self*, *menu*)[¶](#wx.FileHistory.UseMenu "Permalink to this definition")
Adds this menu to the list of those menus that are managed by this file history object.


Also see [`AddFilesToMenu`](#wx.FileHistory.AddFilesToMenu "wx.FileHistory.AddFilesToMenu") for initializing the menu with filenames that are already in the history when this function is called, as this is not done automatically.



Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – 






            Source: https://docs.wxpython.org/wx.FileHistory.html
        """

    BaseId: int  # `BaseId`[¶](#wx.FileHistory.BaseId "Permalink to this definition")See [`GetBaseId`](#wx.FileHistory.GetBaseId "wx.FileHistory.GetBaseId") and [`SetBaseId`](#wx.FileHistory.SetBaseId "wx.FileHistory.SetBaseId")
    Count: int  # `Count`[¶](#wx.FileHistory.Count "Permalink to this definition")See [`GetCount`](#wx.FileHistory.GetCount "wx.FileHistory.GetCount")
    MaxFiles: int  # `MaxFiles`[¶](#wx.FileHistory.MaxFiles "Permalink to this definition")See [`GetMaxFiles`](#wx.FileHistory.GetMaxFiles "wx.FileHistory.GetMaxFiles")
    MenuPathStyle: 'FileHistoryMenuPathStyle'  # `MenuPathStyle`[¶](#wx.FileHistory.MenuPathStyle "Permalink to this definition")See [`GetMenuPathStyle`](#wx.FileHistory.GetMenuPathStyle "wx.FileHistory.GetMenuPathStyle") and [`SetMenuPathStyle`](#wx.FileHistory.SetMenuPathStyle "wx.FileHistory.SetMenuPathStyle")
    Menus: 'FileHistoryMenuList'  # `Menus`[¶](#wx.FileHistory.Menus "Permalink to this definition")See [`GetMenus`](#wx.FileHistory.GetMenus "wx.FileHistory.GetMenus")



class FileSystem(Object):
    """ **Possible constructors**:



```
FileSystem()

```


This class provides an interface for opening files on different file
systems.


  


        Source: https://docs.wxpython.org/wx.FileSystem.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FileSystem.__init__ "Permalink to this definition")
Constructor.


The initial current path of this object will be empty (i.e. [`GetPath`](#wx.FileSystem.GetPath "wx.FileSystem.GetPath") == “”) which means that e.g. [`OpenFile`](#wx.FileSystem.OpenFile "wx.FileSystem.OpenFile") or [`FindFirst`](#wx.FileSystem.FindFirst "wx.FileSystem.FindFirst") functions will use current working directory as current path (see also GetCwd).




            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    @staticmethod
    def AddHandler(handler: 'FileSystemHandler') -> None:
        """ 

*static* `AddHandler`(*handler*)[¶](#wx.FileSystem.AddHandler "Permalink to this definition")
This static function adds new handler into the list of handlers (see  [wx.FileSystemHandler](wx.FileSystemHandler.html#wx-filesystemhandler)) which provide access to virtual `FS`.


Note that if two handlers for the same protocol are added, the last added one takes precedence.



Parameters
**handler** ([*wx.FileSystemHandler*](wx.FileSystemHandler.html#wx.FileSystemHandler "wx.FileSystemHandler")) – 





Note


You can call:



```
wx.FileSystem.AddHandler(My_FS_Handler)

```


This is because (a) AddHandler is a static method, and (b) the handlers are deleted in  [wx.FileSystem](#wx-filesystem)’s destructor so that you don’t have to care about it.





            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    def ChangePathTo(self, location, is_dir=False) -> None:
        """ 

`ChangePathTo`(*self*, *location*, *is\_dir=False*)[¶](#wx.FileSystem.ChangePathTo "Permalink to this definition")
Sets the current location.


*location* parameter passed to [`OpenFile`](#wx.FileSystem.OpenFile "wx.FileSystem.OpenFile") is relative to this path.


All these commands change the path to “dir/subdir/”:



```
ChangePathTo("dir/subdir/xh.htm")
ChangePathTo("dir/subdir", True)
ChangePathTo("dir/subdir/", True)

```


Example:



```
f = fs.OpenFile("hello.htm") # opens file 'hello.htm'
fs.ChangePathTo("subdir/folder", True)
f = fs.OpenFile("hello.htm") # opens file 'subdir/folder/hello.htm' !!

```



Parameters
* **location** (*string*) – the new location. Its meaning depends on the value of is\_dir
* **is\_dir** (*bool*) – if `True` location is new directory. If `False` (the default) location is file in the new directory.





Note


Unless *is\_dir* is `True` the *location* parameter is not the directory name but the name of the file in this directory.





            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    @staticmethod
    def FileNameToURL(filename: str) -> str:
        """ 

*static* `FileNameToURL`(*filename*)[¶](#wx.FileSystem.FileNameToURL "Permalink to this definition")
Converts a *FileName* into an URL.



Parameters
**filename** (*string*) – 



Return type
`string`





See also


[`URLToFileName`](#wx.FileSystem.URLToFileName "wx.FileSystem.URLToFileName") , *FileName*





            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    def FindFileInPath(self, pStr, path, file) -> bool:
        """ 

`FindFileInPath`(*self*, *pStr*, *path*, *file*)[¶](#wx.FileSystem.FindFileInPath "Permalink to this definition")
Looks for the file with the given name *file* in a colon or semi-colon (depending on the current platform) separated list of directories in *path*.


If the file is found in any directory, returns `True` and the full path of the file in *str*, otherwise returns `False` and doesn’t modify *str*.



Parameters
* **pStr** (*string*) – Receives the full path of the file, must not be `None`
* **path** (*string*) – PATH\_SEP-separated list of directories
* **file** (*string*) – the name of the file to look for



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    def FindFirst(self, wildcard, flags=0) -> str:
        """ 

`FindFirst`(*self*, *wildcard*, *flags=0*)[¶](#wx.FileSystem.FindFirst "Permalink to this definition")
Works like `FindFirstFile` .


Returns the name of the first filename (within filesystem’s current path) that matches *wildcard*.



Parameters
* **wildcard** (*string*) – The wildcard that the filename must match
* **flags** (*int*) – One of `FILE` (only files), `DIR` (only directories) or 0 (both).



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    def FindNext(self) -> str:
        """ 

`FindNext`(*self*)[¶](#wx.FileSystem.FindNext "Permalink to this definition")
Returns the next filename that matches the parameters passed to [`FindFirst`](#wx.FileSystem.FindFirst "wx.FileSystem.FindFirst") .



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.FileSystem.GetPath "Permalink to this definition")
Returns the actual path (set by [`wx.FileSystem.ChangePathTo`](#wx.FileSystem.ChangePathTo "wx.FileSystem.ChangePathTo") ).



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    @staticmethod
    def HasHandlerForPath(location: str) -> bool:
        """ 

*static* `HasHandlerForPath`(*location*)[¶](#wx.FileSystem.HasHandlerForPath "Permalink to this definition")
This static function returns `True` if there is a registered handler which can open the given location.



Parameters
**location** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    def OpenFile(self, location, flags=FS_READ) -> 'FSFile':
        """ 

`OpenFile`(*self*, *location*, *flags=FS\_READ*)[¶](#wx.FileSystem.OpenFile "Permalink to this definition")
Opens the file and returns a pointer to a  [wx.FSFile](wx.FSFile.html#wx-fsfile) object or `None` if failed.


It first tries to open the file in relative scope (based on value passed to [`ChangePathTo`](#wx.FileSystem.ChangePathTo "wx.FileSystem.ChangePathTo") method) and then as an absolute path.


Note that the user is responsible for deleting the returned  [wx.FSFile](wx.FSFile.html#wx-fsfile). *flags* can be one or more of the  [wx.FileSystemOpenFlags](wx.FileSystemOpenFlags.enumeration.html#wx-filesystemopenflags) values combined together.


A stream opened with just the default `wx.FS_READ` flag may or may not be seekable depending on the underlying source.


Passing “wx``wx.FS\_READ`` | `wx.FS_SEEKABLE`” for *flags* will back a stream that is not natively seekable with memory or a file and return a stream that is always seekable.



Parameters
* **location** (*string*) –
* **flags** (*int*) –



Return type
 [wx.FSFile](wx.FSFile.html#wx-fsfile)





Note


The *location* argument is, despite this method’s name *not* a filename. It is a “location”, aka  [wx.FileSystem](#wx-filesystem) URL (see [FileSystem Overview](filesystem_overview.html#filesystem-overview)).





            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    @staticmethod
    def RemoveHandler(handler: 'FileSystemHandler') -> 'FileSystemHandler':
        """ 

*static* `RemoveHandler`(*handler*)[¶](#wx.FileSystem.RemoveHandler "Permalink to this definition")
Remove a filesystem handler from the list of handlers.



Parameters
**handler** ([*wx.FileSystemHandler*](wx.FileSystemHandler.html#wx.FileSystemHandler "wx.FileSystemHandler")) – 



Return type
 [wx.FileSystemHandler](wx.FileSystemHandler.html#wx-filesystemhandler)






            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    @staticmethod
    def URLToFileName(url: str) -> str:
        """ 

*static* `URLToFileName`(*url*)[¶](#wx.FileSystem.URLToFileName "Permalink to this definition")
Converts URL into a well-formed filename.


The URL must use the `file` protocol.



Parameters
**url** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystem.html
        """

    Path: str  # `Path`[¶](#wx.FileSystem.Path "Permalink to this definition")See [`GetPath`](#wx.FileSystem.GetPath "wx.FileSystem.GetPath")



FS_READ: int

FS_SEEKABLE: int

class FileSystemHandler(Object):
    """ **Possible constructors**:



```
FileSystemHandler()

```


Classes derived from FileSystemHandler are used to access virtual
file systems.


  


        Source: https://docs.wxpython.org/wx.FileSystemHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FileSystemHandler.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    def CanOpen(self, location: str) -> bool:
        """ 

`CanOpen`(*self*, *location*)[¶](#wx.FileSystemHandler.CanOpen "Permalink to this definition")
Returns `True` if the handler is able to open this file.


This function doesn’t check whether the file exists or not, it only checks if it knows the protocol. Example:



```
def CanOpen(self, location):

    return self.GetProtocol(location) == "http"

```


Must be overridden in derived handlers.



Parameters
**location** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    def FindFirst(self, wildcard, flags=0) -> str:
        """ 

`FindFirst`(*self*, *wildcard*, *flags=0*)[¶](#wx.FileSystemHandler.FindFirst "Permalink to this definition")
Works like `FindFirstFile` .


Returns the name of the first filename (within filesystem’s current path) that matches *wildcard*. *flags* may be one of `FILE` (only files), `DIR` (only directories) or 0 (both).


This method is only called if [`CanOpen`](#wx.FileSystemHandler.CanOpen "wx.FileSystemHandler.CanOpen") returns `True`.



Parameters
* **wildcard** (*string*) –
* **flags** (*int*) –



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    def FindNext(self) -> str:
        """ 

`FindNext`(*self*)[¶](#wx.FileSystemHandler.FindNext "Permalink to this definition")
Returns next filename that matches parameters passed to [`wx.FileSystem.FindFirst`](wx.FileSystem.html#wx.FileSystem.FindFirst "wx.FileSystem.FindFirst") .


This method is only called if [`CanOpen`](#wx.FileSystemHandler.CanOpen "wx.FileSystemHandler.CanOpen") returns `True` and [`FindFirst`](#wx.FileSystemHandler.FindFirst "wx.FileSystemHandler.FindFirst") returned a non-empty string.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    @staticmethod
    def GetAnchor(location: str) -> str:
        """ 

*static* `GetAnchor`(*location*)[¶](#wx.FileSystemHandler.GetAnchor "Permalink to this definition")
Returns the anchor if present in the location.


See [`wx.FSFile.GetAnchor`](wx.FSFile.html#wx.FSFile.GetAnchor "wx.FSFile.GetAnchor") for details.


Example:



```
if self.GetAnchor("index.htm#chapter2") == "chapter2":
    DoSomething()

```



Parameters
**location** (*string*) – 



Return type
`string`





Note


the anchor is NOT part of the left location.





            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    @staticmethod
    def GetLeftLocation(location: str) -> str:
        """ 

*static* `GetLeftLocation`(*location*)[¶](#wx.FileSystemHandler.GetLeftLocation "Permalink to this definition")
Returns the left location string extracted from *location*.


Example:



```
if self.GetLeftLocation("file:myzipfile.zip#zip:index.htm") == "file:myzipfile.zip":
    DoSomething()

```



Parameters
**location** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    @staticmethod
    def GetMimeTypeFromExt(location: str) -> str:
        """ 

*static* `GetMimeTypeFromExt`(*location*)[¶](#wx.FileSystemHandler.GetMimeTypeFromExt "Permalink to this definition")
Returns the MIME type based on **extension** of *location*.


(While [`wx.FSFile.GetMimeType`](wx.FSFile.html#wx.FSFile.GetMimeType "wx.FSFile.GetMimeType") returns real MIME type - either extension-based or queried from `HTTP`.)


Example:



```
if GetMimeTypeFromExt("index.htm") == "text/html":
    wx.MessageBox("Is HTML!")

```



Parameters
**location** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    @staticmethod
    def GetProtocol(location: str) -> str:
        """ 

*static* `GetProtocol`(*location*)[¶](#wx.FileSystemHandler.GetProtocol "Permalink to this definition")
Returns the protocol string extracted from *location*.


Example:



```
if self.GetProtocol("file:myzipfile.zip#zip:index.htm") == "zip":
    UnzipFile(filename)

```



Parameters
**location** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    @staticmethod
    def GetRightLocation(location: str) -> str:
        """ 

*static* `GetRightLocation`(*location*)[¶](#wx.FileSystemHandler.GetRightLocation "Permalink to this definition")
Returns the right location string extracted from *location*.


Example:



```
if self.GetRightLocation("file:myzipfile.zip#zip:index.htm") == "index.htm":
    ReadHTML(filename)

```



Parameters
**location** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """

    def OpenFile(self, fs, location) -> 'FSFile':
        """ 

`OpenFile`(*self*, *fs*, *location*)[¶](#wx.FileSystemHandler.OpenFile "Permalink to this definition")
Opens the file and returns  [wx.FSFile](wx.FSFile.html#wx-fsfile) pointer or `None` if failed.


Must be overridden in derived handlers.



Parameters
* **fs** ([*wx.FileSystem*](wx.FileSystem.html#wx.FileSystem "wx.FileSystem")) – Parent `FS` (the `FS` from that OpenFile was called). See the `ZIP` handler for details of how to use it.
* **location** (*string*) – The absolute location of file.



Return type
 [wx.FSFile](wx.FSFile.html#wx-fsfile)






            Source: https://docs.wxpython.org/wx.FileSystemHandler.html
        """



class FileSystemWatcher(EvtHandler):
    """ **Possible constructors**:



```
FileSystemWatcher()

```


The FileSystemWatcher class allows receiving notifications of file
system changes.


  


        Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FileSystemWatcher.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    def Add(self, path, events=FSW_EVENT_ALL) -> bool:
        """ 

`Add`(*self*, *path*, *events=FSW\_EVENT\_ALL*)[¶](#wx.FileSystemWatcher.Add "Permalink to this definition")
Adds *path* to currently watched files.


The *path* argument can currently only be a directory and any changes to this directory itself or its immediate children will generate the events. Use [`AddTree`](#wx.FileSystemWatcher.AddTree "wx.FileSystemWatcher.AddTree") to monitor the directory recursively.


Note that on platforms that use symbolic links, you should consider the possibility that *path* is a symlink. To watch the symlink itself and not its target you may call `FileName.DontFollowLink` on *path*.



Parameters
* **path** (*string*) – The name of the path to watch.
* **events** (*int*) – An optional filter to receive only events of particular types. This is currently implemented only for GTK.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    def AddTree(self, path, events=FSW_EVENT_ALL, filter="") -> bool:
        """ 

`AddTree`(*self*, *path*, *events=FSW\_EVENT\_ALL*, *filter=""*)[¶](#wx.FileSystemWatcher.AddTree "Permalink to this definition")
This is the same as [`Add`](sizers_overview.html#Add "Add") , but also recursively adds every file/directory in the tree rooted at *path*.


Additionally a file mask can be specified to include only files matching that particular mask.


This method is implemented efficiently on MSW and macOS, but should be used with care on other platforms for directories with lots of children (e.g. the root directory) as it calls [`Add`](sizers_overview.html#Add "Add") for each subdirectory, potentially creating a lot of watches and taking a long time to execute.


Note that on platforms that use symbolic links, you will probably want to have called `FileName.DontFollowLink` on *path*. This is especially important if the symlink targets may themselves be watched.



Parameters
* **path** (*string*) –
* **events** (*int*) –
* **filter** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    def GetWatchedPaths(self, paths: list[str]) -> int:
        """ 

`GetWatchedPaths`(*self*, *paths*)[¶](#wx.FileSystemWatcher.GetWatchedPaths "Permalink to this definition")
Retrieves all watched paths and places them in *paths*.


Returns the number of watched paths, which is also the number of entries added to *paths*.



Parameters
**paths** (*list of strings*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    def GetWatchedPathsCount(self) -> int:
        """ 

`GetWatchedPathsCount`(*self*)[¶](#wx.FileSystemWatcher.GetWatchedPathsCount "Permalink to this definition")
Returns the number of currently watched paths.



Return type
*int*





See also


[`GetWatchedPaths`](#wx.FileSystemWatcher.GetWatchedPaths "wx.FileSystemWatcher.GetWatchedPaths")





            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    def Remove(self, path: str) -> bool:
        """ 

`Remove`(*self*, *path*)[¶](#wx.FileSystemWatcher.Remove "Permalink to this definition")
Removes *path* from the list of watched paths.


See the comment in [`Add`](sizers_overview.html#Add "Add") about symbolic links. *path* should treat symbolic links in the same way as in the original [`Add`](sizers_overview.html#Add "Add") call.



Parameters
**path** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    def RemoveAll(self) -> bool:
        """ 

`RemoveAll`(*self*)[¶](#wx.FileSystemWatcher.RemoveAll "Permalink to this definition")
Clears the list of currently watched paths.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    def RemoveTree(self, path: str) -> bool:
        """ 

`RemoveTree`(*self*, *path*)[¶](#wx.FileSystemWatcher.RemoveTree "Permalink to this definition")
This is the same as [`Remove`](#wx.FileSystemWatcher.Remove "wx.FileSystemWatcher.Remove") , but also removes every file/directory belonging to the tree rooted at *path*.


See the comment in [`AddTree`](#wx.FileSystemWatcher.AddTree "wx.FileSystemWatcher.AddTree") about symbolic links. *path* should treat symbolic links in the same way as in the original [`AddTree`](#wx.FileSystemWatcher.AddTree "wx.FileSystemWatcher.AddTree") call.



Parameters
**path** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    def SetOwner(self, handler: 'EvtHandler') -> None:
        """ 

`SetOwner`(*self*, *handler*)[¶](#wx.FileSystemWatcher.SetOwner "Permalink to this definition")
Associates the file system watcher with the given *handler* object.


All the events generated by this object will be passed to the specified owner.



Parameters
**handler** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – 






            Source: https://docs.wxpython.org/wx.FileSystemWatcher.html
        """

    WatchedPathsCount: int  # `WatchedPathsCount`[¶](#wx.FileSystemWatcher.WatchedPathsCount "Permalink to this definition")See [`GetWatchedPathsCount`](#wx.FileSystemWatcher.GetWatchedPathsCount "wx.FileSystemWatcher.GetWatchedPathsCount")



class FileSystemWatcherEvent(Event):
    """ **Possible constructors**:



```
FileSystemWatcherEvent(changeType=0, watchid=ID_ANY)

FileSystemWatcherEvent(changeType, warningType, errorMsg,
                       watchid=ID_ANY)

FileSystemWatcherEvent(changeType, path, newPath, watchid=ID_ANY)

```


A class of events sent when a file system event occurs.


  


        Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FileSystemWatcherEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, changeType=0, watchid=ID\_ANY)*



Parameters
* **changeType** (*int*) –
* **watchid** (*int*) –






---

  



**\_\_init\_\_** *(self, changeType, warningType, errorMsg, watchid=ID\_ANY)*



Parameters
* **changeType** (*int*) –
* **warningType** ([*FSWWarningType*](wx.FSWWarningType.enumeration.html "FSWWarningType")) –
* **errorMsg** (*string*) –
* **watchid** (*int*) –






---

  



**\_\_init\_\_** *(self, changeType, path, newPath, watchid=ID\_ANY)*



Parameters
* **changeType** (*int*) –
* **path** (*string*) –
* **newPath** (*string*) –
* **watchid** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    def Clone(self) -> 'Event':
        """ 

`Clone`(*self*)[¶](#wx.FileSystemWatcherEvent.Clone "Permalink to this definition")

Return type
 [wx.Event](wx.Event.html#wx-event)






            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    def GetChangeType(self) -> int:
        """ 

`GetChangeType`(*self*)[¶](#wx.FileSystemWatcherEvent.GetChangeType "Permalink to this definition")
Returns the type of file system change that occurred.


See FSWFlags for the list of possible file system change types.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    def GetErrorDescription(self) -> str:
        """ 

`GetErrorDescription`(*self*)[¶](#wx.FileSystemWatcherEvent.GetErrorDescription "Permalink to this definition")
Return a description of the warning or error if this is an error event.


This string may be empty if the exact reason for the error or the warning is not known.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    def GetNewPath(self) -> str:
        """ 

`GetNewPath`(*self*)[¶](#wx.FileSystemWatcherEvent.GetNewPath "Permalink to this definition")
Returns the new path of the renamed file/directory if this is a rename event.


Otherwise it returns the same path as [`GetPath`](#wx.FileSystemWatcherEvent.GetPath "wx.FileSystemWatcherEvent.GetPath") .



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    def GetPath(self) -> str:
        """ 

`GetPath`(*self*)[¶](#wx.FileSystemWatcherEvent.GetPath "Permalink to this definition")
Returns the path at which the event occurred.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    def GetWarningType(self) -> 'FSWWarningType':
        """ 

`GetWarningType`(*self*)[¶](#wx.FileSystemWatcherEvent.GetWarningType "Permalink to this definition")
Return the type of the warning if this event is a warning one.


If this is not a warning event, i.e. if [`GetChangeType`](#wx.FileSystemWatcherEvent.GetChangeType "wx.FileSystemWatcherEvent.GetChangeType") doesn’t include `FSW_EVENT_WARNING`, returns `FSW_WARNING_NONE`.



Return type
 [wx.FSWWarningType](wx.FSWWarningType.enumeration.html#wx-fswwarningtype)





New in version 3.0.





            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    def IsError(self) -> bool:
        """ 

`IsError`(*self*)[¶](#wx.FileSystemWatcherEvent.IsError "Permalink to this definition")
Returns `true` if this error is an error event.


Error event is an event generated when a warning or error condition arises.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    def ToString(self) -> str:
        """ 

`ToString`(*self*)[¶](#wx.FileSystemWatcherEvent.ToString "Permalink to this definition")
Returns a *String* describing an event, useful for logging, debugging or testing.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileSystemWatcherEvent.html
        """

    ChangeType: int  # `ChangeType`[¶](#wx.FileSystemWatcherEvent.ChangeType "Permalink to this definition")See [`GetChangeType`](#wx.FileSystemWatcherEvent.GetChangeType "wx.FileSystemWatcherEvent.GetChangeType")
    ErrorDescription: str  # `ErrorDescription`[¶](#wx.FileSystemWatcherEvent.ErrorDescription "Permalink to this definition")See [`GetErrorDescription`](#wx.FileSystemWatcherEvent.GetErrorDescription "wx.FileSystemWatcherEvent.GetErrorDescription")
    NewPath: str  # `NewPath`[¶](#wx.FileSystemWatcherEvent.NewPath "Permalink to this definition")See [`GetNewPath`](#wx.FileSystemWatcherEvent.GetNewPath "wx.FileSystemWatcherEvent.GetNewPath")
    Path: str  # `Path`[¶](#wx.FileSystemWatcherEvent.Path "Permalink to this definition")See [`GetPath`](#wx.FileSystemWatcherEvent.GetPath "wx.FileSystemWatcherEvent.GetPath")
    WarningType: 'FSWWarningType'  # `WarningType`[¶](#wx.FileSystemWatcherEvent.WarningType "Permalink to this definition")See [`GetWarningType`](#wx.FileSystemWatcherEvent.GetWarningType "wx.FileSystemWatcherEvent.GetWarningType")



class FileTranslationsLoader(TranslationsLoader):
    """ Standard TranslationsLoader implementation.


  


        Source: https://docs.wxpython.org/wx.FileTranslationsLoader.html
    """
    @staticmethod
    def AddCatalogLookupPathPrefix(prefix: str) -> None:
        """ 

*static* `AddCatalogLookupPathPrefix`(*prefix*)[¶](#wx.FileTranslationsLoader.AddCatalogLookupPathPrefix "Permalink to this definition")
Add a prefix to the catalog lookup path: the message catalog files will be looked up under prefix/lang/LC\_MESSAGES and prefix/lang directories (in this order).


This only applies to subsequent invocations of [`wx.Translations.AddCatalog`](wx.Translations.html#wx.Translations.AddCatalog "wx.Translations.AddCatalog") .



Parameters
**prefix** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileTranslationsLoader.html
        """



class TranslationsLoader:
    """ **Possible constructors**:



```
TranslationsLoader()

```


Abstraction of translations discovery and loading.


  


        Source: https://docs.wxpython.org/wx.TranslationsLoader.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.TranslationsLoader.__init__ "Permalink to this definition")
Trivial default constructor.




            Source: https://docs.wxpython.org/wx.TranslationsLoader.html
        """

    def GetAvailableTranslations(self, domain: str) -> list[str]:
        """ 

`GetAvailableTranslations`(*self*, *domain*)[¶](#wx.TranslationsLoader.GetAvailableTranslations "Permalink to this definition")
Implements [`wx.Translations.GetAvailableTranslations`](wx.Translations.html#wx.Translations.GetAvailableTranslations "wx.Translations.GetAvailableTranslations") .



Parameters
**domain** (*string*) – 



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.TranslationsLoader.html
        """

    def LoadCatalog(self, domain, lang) -> 'MsgCatalog':
        """ 

`LoadCatalog`(*self*, *domain*, *lang*)[¶](#wx.TranslationsLoader.LoadCatalog "Permalink to this definition")
Called to load requested catalog.


If the catalog is found, [`LoadCatalog`](#wx.TranslationsLoader.LoadCatalog "wx.TranslationsLoader.LoadCatalog") should create *MsgCatalog* instance with its data and return it. The caller will take ownership of the catalog.



Parameters
* **domain** (*string*) – Domain to load.
* **lang** (*string*) – Language to look for. This is “canonical name” (see [`wx.Locale.GetCanonicalName`](wx.Locale.html#wx.Locale.GetCanonicalName "wx.Locale.GetCanonicalName") ), i.e. `ISO` 639 code, possibly combined with country code or additional modifiers (e.g. “fr”, “en\_GB” or “[ca@valencia](mailto:ca%40valencia)”).



Return type
*MsgCatalog*



Returns
Loaded catalog or `None` on failure.






            Source: https://docs.wxpython.org/wx.TranslationsLoader.html
        """



_Icon: TypeAlias = Icon

_IconLocation: TypeAlias = IconLocation

class FileType:
    """ **Possible constructors**:



```
FileType(ftInfo)

```


This class holds information about a given file type.


  


        Source: https://docs.wxpython.org/wx.FileType.html
    """
    def __init__(self, ftInfo: 'FileTypeInfo') -> None:
        """ 

`__init__`(*self*, *ftInfo*)[¶](#wx.FileType.__init__ "Permalink to this definition")
Copy constructor.



Parameters
**ftInfo** ([*wx.FileTypeInfo*](wx.FileTypeInfo.html#wx.FileTypeInfo "wx.FileTypeInfo")) – 






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    @staticmethod
    def ExpandCommand(command, params) -> str:
        """ 

*static* `ExpandCommand`(*command*, *params*)[¶](#wx.FileType.ExpandCommand "Permalink to this definition")
This function is primarily intended for GetOpenCommand and GetPrintCommand usage but may be also used by the application directly if, for example, you want to use some non-default command to open the file.


The function replaces all occurrences of:


* s with the full file name
* t with the MIME type
* %{param} with the value of the parameter *param* using the  [wx.FileType.MessageParameters](wx.FileType.MessageParameters.html#wx-filetype-messageparameters) object you pass to it.


If there is no ‘s’ in the command string (and the string is not empty), it is assumed that the command reads the data on stdin and so the effect is the same as ” %s” were appended to the string.


Unlike all other functions of this class, there is no error return for this function.



Parameters
* **command** (*string*) –
* **params** ([*wx.FileType.MessageParameters*](wx.FileType.MessageParameters.html#wx.FileType.MessageParameters "wx.FileType.MessageParameters")) –



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetAllCommands(self, params: FileType.MessageParameters) -> tuple:
        """ 

`GetAllCommands`(*self*, *params*)[¶](#wx.FileType.GetAllCommands "Permalink to this definition")
Returns a tuple containing the *verbs* and *commands* arrays, corresponding for the registered information for this mime type.



Parameters
**params** ([*FileType.MessageParameters*](wx.FileType.MessageParameters.html#wx.FileType.MessageParameters "wx.FileType.MessageParameters")) – 



Return type
*tuple*



Returns
( *verbs*, *commands* )






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetDescription(self) -> str:
        """ 

`GetDescription`(*self*)[¶](#wx.FileType.GetDescription "Permalink to this definition")

> Returns a brief description for this file type: for example, “text document” for
> the “text/plain” MIME type.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetExpandedCommand(self, verb, params) -> str:
        """ 

`GetExpandedCommand`(*self*, *verb*, *params*)[¶](#wx.FileType.GetExpandedCommand "Permalink to this definition")
The returned string is the command to be executed in order to open/print/edit the file of the given type.


If the string is empty, the lookup for the *verb* failed.


The name of the file is retrieved from the  [wx.FileType.MessageParameters](wx.FileType.MessageParameters.html#wx-filetype-messageparameters) class.



Parameters
* **verb** (*string*) –
* **params** ([*FileType.MessageParameters*](wx.FileType.MessageParameters.html#wx.FileType.MessageParameters "wx.FileType.MessageParameters")) –



Return type
`string`





New in version 4.1/wxWidgets-3.1.1.




See also


[`wx.Execute`](wx.functions.html#wx.Execute "wx.Execute")





            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetExtensions(self) -> list[str]:
        """ 

`GetExtensions`(*self*)[¶](#wx.FileType.GetExtensions "Permalink to this definition")

> Returns all extensions associated with this file type: for
> example, it may contain the following two elements for the MIME
> type “text/html” (notice the absence of the leading dot): “html”
> and “htm”.
> 
> 
> This function is not implemented on Windows, there is no (efficient)
> way to retrieve associated extensions from the given MIME type on
> this platform.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetIcon(self) -> 'Icon':
        """ 

`GetIcon`(*self*)[¶](#wx.FileType.GetIcon "Permalink to this definition")
Return the icon associated with this mime type, if any.



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetIconInfo(self) -> Any:
        """ 

`GetIconInfo`(*self*)[¶](#wx.FileType.GetIconInfo "Permalink to this definition")

> Returns a tuple containing the Icon for this file type, the file where the
> icon is found, and the index of the image in that file, if applicable.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetIconLocation(self) -> 'IconLocation':
        """ 

`GetIconLocation`(*self*)[¶](#wx.FileType.GetIconLocation "Permalink to this definition")
Returns a wx.IconLocation that can be used to fetch the icon for this mime type.



Return type
 [wx.IconLocation](wx.IconLocation.html#wx-iconlocation)






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetMimeType(self) -> str:
        """ 

`GetMimeType`(*self*)[¶](#wx.FileType.GetMimeType "Permalink to this definition")
Returns full MIME type specification for this file type: for example, “text/plain”.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetMimeTypes(self) -> list[str]:
        """ 

`GetMimeTypes`(*self*)[¶](#wx.FileType.GetMimeTypes "Permalink to this definition")

> Same as GetMimeType but returns a list of types. This will usually contain
> only one item, but sometimes, such as on Unix with KDE more than one type
> if there are differences between KDE< mailcap and mime.types.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetOpenCommand(self, *args, **kw) -> str:
        """ 

`GetOpenCommand`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FileType.GetOpenCommand "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetOpenCommand** *(self, params)*



> Returns the command which must be executed (see wx.Execute()) in order
> to open the file of the given type. The name of the file as well as
> any other parameters is retrieved from MessageParameters() class.



Return type
`string`






---

  



**GetOpenCommand** *(self, filename)*



> Returns the command which should be used to open the given
> filename. An empty string is returned to indicate that an error
> occurred (typically meaning that there is no standard way to open
> this kind of files).



Return type
`string`






---

  





            Source: https://docs.wxpython.org/wx.FileType.html
        """

    def GetPrintCommand(self, params) -> str:
        """ 

`GetPrintCommand`(*self*, *params*)[¶](#wx.FileType.GetPrintCommand "Permalink to this definition")

> Returns the command which must be executed (see Execute()) in order to
> print the file of the given type. The name of the file is retrieved from
> the MessageParameters class.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileType.html
        """

    Description: str  # `Description`[¶](#wx.FileType.Description "Permalink to this definition")See [`GetDescription`](#wx.FileType.GetDescription "wx.FileType.GetDescription")
    Extensions: list[str]  # `Extensions`[¶](#wx.FileType.Extensions "Permalink to this definition")See [`GetExtensions`](#wx.FileType.GetExtensions "wx.FileType.GetExtensions")
    Icon: '_Icon'  # `Icon`[¶](#wx.FileType.Icon "Permalink to this definition")See [`GetIcon`](#wx.FileType.GetIcon "wx.FileType.GetIcon")
    IconInfo: Any  # `IconInfo`[¶](#wx.FileType.IconInfo "Permalink to this definition")See [`GetIconInfo`](#wx.FileType.GetIconInfo "wx.FileType.GetIconInfo")
    IconLocation: '_IconLocation'  # `IconLocation`[¶](#wx.FileType.IconLocation "Permalink to this definition")See [`GetIconLocation`](#wx.FileType.GetIconLocation "wx.FileType.GetIconLocation")
    MimeType: str  # `MimeType`[¶](#wx.FileType.MimeType "Permalink to this definition")See [`GetMimeType`](#wx.FileType.GetMimeType "wx.FileType.GetMimeType")
    MimeTypes: list[str]  # `MimeTypes`[¶](#wx.FileType.MimeTypes "Permalink to this definition")See [`GetMimeTypes`](#wx.FileType.GetMimeTypes "wx.FileType.GetMimeTypes")
    OpenCommand: str  # `OpenCommand`[¶](#wx.FileType.OpenCommand "Permalink to this definition")See [`GetOpenCommand`](#wx.FileType.GetOpenCommand "wx.FileType.GetOpenCommand")
    PrintCommand: str  # `PrintCommand`[¶](#wx.FileType.PrintCommand "Permalink to this definition")See [`GetPrintCommand`](#wx.FileType.GetPrintCommand "wx.FileType.GetPrintCommand")



class FileTypeInfo:
    """ **Possible constructors**:



```
FileTypeInfo()

FileTypeInfo(mimeType)

FileTypeInfo(mimeType, openCmd, printCmd, description, extension)

FileTypeInfo(sArray)

```


Container of information about FileType.


  


        Source: https://docs.wxpython.org/wx.FileTypeInfo.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FileTypeInfo.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor creates an invalid file type info object.


Such invalid/empty object should be used to terminate the list of file types passed to [`wx.MimeTypesManager.AddFallbacks`](wx.MimeTypesManager.html#wx.MimeTypesManager.AddFallbacks "wx.MimeTypesManager.AddFallbacks") .




---

  



**\_\_init\_\_** *(self, mimeType)*


Constructor specifying just the MIME type name.


Use the various setter methods below to fully initialize the object.



Parameters
**mimeType** (*string*) – 





New in version 2.9.2.





---

  



**\_\_init\_\_** *(self, mimeType, openCmd, printCmd, description, extension)*


Constructor allowing to specify all the fields at once.


This is a vararg constructor taking an arbitrary number of extensions after the first four required parameters. The list must be terminated by `NullPtr` , notice that `NULL` can’t be used here in portable code (C++0x `nullptr` can be used as well if your compiler supports it).



Parameters
* **mimeType** (*string*) –
* **openCmd** (*string*) –
* **printCmd** (*string*) –
* **description** (*string*) –
* **extension** (*string*) –






---

  



**\_\_init\_\_** *(self, sArray)*


Constructor using an array of string elements corresponding to the parameters of the constructor above in the same order.



Parameters
**sArray** (*list of strings*) – 






---

  





            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def AddExtension(self, ext: str) -> None:
        """ 

`AddExtension`(*self*, *ext*)[¶](#wx.FileTypeInfo.AddExtension "Permalink to this definition")
Add another extension associated with this file type.



Parameters
**ext** (*string*) – 





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetDescription(self) -> str:
        """ 

`GetDescription`(*self*)[¶](#wx.FileTypeInfo.GetDescription "Permalink to this definition")
Get the long, user visible description.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetExtensions(self) -> list[str]:
        """ 

`GetExtensions`(*self*)[¶](#wx.FileTypeInfo.GetExtensions "Permalink to this definition")
Get the array of all extensions.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetExtensionsCount(self) -> int:
        """ 

`GetExtensionsCount`(*self*)[¶](#wx.FileTypeInfo.GetExtensionsCount "Permalink to this definition")
Get the number of extensions.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetIconFile(self) -> str:
        """ 

`GetIconFile`(*self*)[¶](#wx.FileTypeInfo.GetIconFile "Permalink to this definition")
Get the icon filename.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetIconIndex(self) -> int:
        """ 

`GetIconIndex`(*self*)[¶](#wx.FileTypeInfo.GetIconIndex "Permalink to this definition")
Get the index of the icon within the icon file.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetMimeType(self) -> str:
        """ 

`GetMimeType`(*self*)[¶](#wx.FileTypeInfo.GetMimeType "Permalink to this definition")
Get the MIME type.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetOpenCommand(self) -> str:
        """ 

`GetOpenCommand`(*self*)[¶](#wx.FileTypeInfo.GetOpenCommand "Permalink to this definition")
Get the open command.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetPrintCommand(self) -> str:
        """ 

`GetPrintCommand`(*self*)[¶](#wx.FileTypeInfo.GetPrintCommand "Permalink to this definition")
Get the print command.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def GetShortDesc(self) -> str:
        """ 

`GetShortDesc`(*self*)[¶](#wx.FileTypeInfo.GetShortDesc "Permalink to this definition")
Get the short description (only used under Win32 so far)



Return type
`string`






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def SetDescription(self, description: str) -> None:
        """ 

`SetDescription`(*self*, *description*)[¶](#wx.FileTypeInfo.SetDescription "Permalink to this definition")
Set the file type description.



Parameters
**description** (*string*) – 





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def SetIcon(self, iconFile, iconIndex=0) -> None:
        """ 

`SetIcon`(*self*, *iconFile*, *iconIndex=0*)[¶](#wx.FileTypeInfo.SetIcon "Permalink to this definition")
Set the icon information.



Parameters
* **iconFile** (*string*) –
* **iconIndex** (*int*) –






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def SetOpenCommand(self, command: str) -> None:
        """ 

`SetOpenCommand`(*self*, *command*)[¶](#wx.FileTypeInfo.SetOpenCommand "Permalink to this definition")
Set the command to be used for opening files of this type.



Parameters
**command** (*string*) – 





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def SetPrintCommand(self, command: str) -> None:
        """ 

`SetPrintCommand`(*self*, *command*)[¶](#wx.FileTypeInfo.SetPrintCommand "Permalink to this definition")
Set the command to be used for printing files of this type.



Parameters
**command** (*string*) – 





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    def SetShortDesc(self, shortDesc: str) -> None:
        """ 

`SetShortDesc`(*self*, *shortDesc*)[¶](#wx.FileTypeInfo.SetShortDesc "Permalink to this definition")
Set the short description for the files of this type.


This is only used under MSW for some of the registry keys used for the file type registration.



Parameters
**shortDesc** (*string*) – 






            Source: https://docs.wxpython.org/wx.FileTypeInfo.html
        """

    Description: str  # `Description`[¶](#wx.FileTypeInfo.Description "Permalink to this definition")See [`GetDescription`](#wx.FileTypeInfo.GetDescription "wx.FileTypeInfo.GetDescription") and [`SetDescription`](#wx.FileTypeInfo.SetDescription "wx.FileTypeInfo.SetDescription")
    Extensions: list[str]  # `Extensions`[¶](#wx.FileTypeInfo.Extensions "Permalink to this definition")See [`GetExtensions`](#wx.FileTypeInfo.GetExtensions "wx.FileTypeInfo.GetExtensions")
    ExtensionsCount: int  # `ExtensionsCount`[¶](#wx.FileTypeInfo.ExtensionsCount "Permalink to this definition")See [`GetExtensionsCount`](#wx.FileTypeInfo.GetExtensionsCount "wx.FileTypeInfo.GetExtensionsCount")
    IconFile: str  # `IconFile`[¶](#wx.FileTypeInfo.IconFile "Permalink to this definition")See [`GetIconFile`](#wx.FileTypeInfo.GetIconFile "wx.FileTypeInfo.GetIconFile")
    IconIndex: int  # `IconIndex`[¶](#wx.FileTypeInfo.IconIndex "Permalink to this definition")See [`GetIconIndex`](#wx.FileTypeInfo.GetIconIndex "wx.FileTypeInfo.GetIconIndex")
    MimeType: str  # `MimeType`[¶](#wx.FileTypeInfo.MimeType "Permalink to this definition")See [`GetMimeType`](#wx.FileTypeInfo.GetMimeType "wx.FileTypeInfo.GetMimeType")
    OpenCommand: str  # `OpenCommand`[¶](#wx.FileTypeInfo.OpenCommand "Permalink to this definition")See [`GetOpenCommand`](#wx.FileTypeInfo.GetOpenCommand "wx.FileTypeInfo.GetOpenCommand") and [`SetOpenCommand`](#wx.FileTypeInfo.SetOpenCommand "wx.FileTypeInfo.SetOpenCommand")
    PrintCommand: str  # `PrintCommand`[¶](#wx.FileTypeInfo.PrintCommand "Permalink to this definition")See [`GetPrintCommand`](#wx.FileTypeInfo.GetPrintCommand "wx.FileTypeInfo.GetPrintCommand") and [`SetPrintCommand`](#wx.FileTypeInfo.SetPrintCommand "wx.FileTypeInfo.SetPrintCommand")
    ShortDesc: str  # `ShortDesc`[¶](#wx.FileTypeInfo.ShortDesc "Permalink to this definition")See [`GetShortDesc`](#wx.FileTypeInfo.GetShortDesc "wx.FileTypeInfo.GetShortDesc") and [`SetShortDesc`](#wx.FileTypeInfo.SetShortDesc "wx.FileTypeInfo.SetShortDesc")



class FilterFSHandler(FileSystemHandler):
    """ **Possible constructors**:



```
FilterFSHandler()

```


Filter file system handler.


  


        Source: https://docs.wxpython.org/wx.FilterFSHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FilterFSHandler.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.FilterFSHandler.html
        """



class FindDialogEvent(CommandEvent):
    """ **Possible constructors**:



```
FindDialogEvent(commandType=wxEVT_NULL, id=0)

```


FindReplaceDialog events.


  


        Source: https://docs.wxpython.org/wx.FindDialogEvent.html
    """
    def __init__(self, commandType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *commandType=wxEVT\_NULL*, *id=0*)[¶](#wx.FindDialogEvent.__init__ "Permalink to this definition")
Constructor used by wxWidgets only.



Parameters
* **commandType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.FindDialogEvent.html
        """

    def GetDialog(self) -> 'FindReplaceDialog':
        """ 

`GetDialog`(*self*)[¶](#wx.FindDialogEvent.GetDialog "Permalink to this definition")
Return the pointer to the dialog which generated this event.



Return type
 [wx.FindReplaceDialog](wx.FindReplaceDialog.html#wx-findreplacedialog)






            Source: https://docs.wxpython.org/wx.FindDialogEvent.html
        """

    def GetFindString(self) -> str:
        """ 

`GetFindString`(*self*)[¶](#wx.FindDialogEvent.GetFindString "Permalink to this definition")
Return the string to find (never empty).



Return type
`string`






            Source: https://docs.wxpython.org/wx.FindDialogEvent.html
        """

    def GetFlags(self) -> int:
        """ 

`GetFlags`(*self*)[¶](#wx.FindDialogEvent.GetFlags "Permalink to this definition")
Get the currently selected flags: this is the combination of the  [wx.FindReplaceFlags](wx.FindReplaceFlags.enumeration.html#wx-findreplaceflags) enumeration values.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FindDialogEvent.html
        """

    def GetReplaceString(self) -> str:
        """ 

`GetReplaceString`(*self*)[¶](#wx.FindDialogEvent.GetReplaceString "Permalink to this definition")
Return the string to replace the search string with (only for replace and replace all events).



Return type
`string`






            Source: https://docs.wxpython.org/wx.FindDialogEvent.html
        """

    Dialog: 'FindReplaceDialog'  # `Dialog`[¶](#wx.FindDialogEvent.Dialog "Permalink to this definition")See [`GetDialog`](#wx.FindDialogEvent.GetDialog "wx.FindDialogEvent.GetDialog")
    FindString: str  # `FindString`[¶](#wx.FindDialogEvent.FindString "Permalink to this definition")See [`GetFindString`](#wx.FindDialogEvent.GetFindString "wx.FindDialogEvent.GetFindString")
    Flags: int  # `Flags`[¶](#wx.FindDialogEvent.Flags "Permalink to this definition")See [`GetFlags`](#wx.FindDialogEvent.GetFlags "wx.FindDialogEvent.GetFlags")
    ReplaceString: str  # `ReplaceString`[¶](#wx.FindDialogEvent.ReplaceString "Permalink to this definition")See [`GetReplaceString`](#wx.FindDialogEvent.GetReplaceString "wx.FindDialogEvent.GetReplaceString")



EVT_FIND: int  # Find button was pressed in the dialog.

EVT_FIND_NEXT: int  # Find next button was pressed in the dialog.

EVT_FIND_REPLACE: int  # Replace button was pressed in the dialog.

EVT_FIND_REPLACE_ALL: int  # Replace all button was pressed in the dialog.

EVT_FIND_CLOSE: int  # The dialog is being destroyed, any pointers to it cannot be used any longer. ^^

class FindReplaceDialog(Dialog):
    """ **Possible constructors**:



```
FindReplaceDialog()

FindReplaceDialog(parent, data, title="", style=0)

```


FindReplaceDialog is a standard modeless dialog which is used to
allow the user to search for some text (and possibly replace it with
something else).


  


        Source: https://docs.wxpython.org/wx.FindReplaceDialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FindReplaceDialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, data, title=””, style=0)*


After using default constructor [`Create`](#wx.FindReplaceDialog.Create "wx.FindReplaceDialog.Create") must be called.


The *parent* and *data* parameters must be not `None`.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.FindReplaceData*](wx.FindReplaceData.html#wx.FindReplaceData "wx.FindReplaceData")) –
* **title** (*string*) –
* **style** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.FindReplaceDialog.html
        """

    def Create(self, parent, data, title="", style=0) -> bool:
        """ 

`Create`(*self*, *parent*, *data*, *title=""*, *style=0*)[¶](#wx.FindReplaceDialog.Create "Permalink to this definition")
Creates the dialog; use [`wx.Window.Show`](wx.Window.html#wx.Window.Show "wx.Window.Show") to show it on screen.


The *parent* and *data* parameters must be not `None`.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.FindReplaceData*](wx.FindReplaceData.html#wx.FindReplaceData "wx.FindReplaceData")) –
* **title** (*string*) –
* **style** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FindReplaceDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.FindReplaceDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.FindReplaceDialog.html
        """

    def GetData(self) -> 'FindReplaceData':
        """ 

`GetData`(*self*)[¶](#wx.FindReplaceDialog.GetData "Permalink to this definition")
Get the  [wx.FindReplaceData](wx.FindReplaceData.html#wx-findreplacedata) object used by this dialog.



Return type
 [wx.FindReplaceData](wx.FindReplaceData.html#wx-findreplacedata)






            Source: https://docs.wxpython.org/wx.FindReplaceDialog.html
        """

    Data: 'FindReplaceData'  # `Data`[¶](#wx.FindReplaceDialog.Data "Permalink to this definition")See [`GetData`](#wx.FindReplaceDialog.GetData "wx.FindReplaceDialog.GetData")



class FindReplaceData(Object):
    """ **Possible constructors**:



```
FindReplaceData(flags=0)

```


FindReplaceData holds the data for FindReplaceDialog.


  


        Source: https://docs.wxpython.org/wx.FindReplaceData.html
    """
    def __init__(self, flags: 'int'=0) -> None:
        """ 

`__init__`(*self*, *flags=0*)[¶](#wx.FindReplaceData.__init__ "Permalink to this definition")
Constructor initializes the flags to default value (0).



Parameters
**flags** (*wx.int*) – 






            Source: https://docs.wxpython.org/wx.FindReplaceData.html
        """

    def GetFindString(self) -> str:
        """ 

`GetFindString`(*self*)[¶](#wx.FindReplaceData.GetFindString "Permalink to this definition")
Get the string to find.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FindReplaceData.html
        """

    def GetFlags(self) -> int:
        """ 

`GetFlags`(*self*)[¶](#wx.FindReplaceData.GetFlags "Permalink to this definition")
Get the combination of `FindReplaceFlags` values.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FindReplaceData.html
        """

    def GetReplaceString(self) -> str:
        """ 

`GetReplaceString`(*self*)[¶](#wx.FindReplaceData.GetReplaceString "Permalink to this definition")
Get the replacement string.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FindReplaceData.html
        """

    def SetFindString(self, str: str) -> None:
        """ 

`SetFindString`(*self*, *str*)[¶](#wx.FindReplaceData.SetFindString "Permalink to this definition")
Set the string to find (used as initial value by the dialog).



Parameters
**str** (*string*) – 






            Source: https://docs.wxpython.org/wx.FindReplaceData.html
        """

    def SetFlags(self, flags: 'int') -> None:
        """ 

`SetFlags`(*self*, *flags*)[¶](#wx.FindReplaceData.SetFlags "Permalink to this definition")
Set the flags to use to initialize the controls of the dialog.



Parameters
**flags** (*wx.int*) – 






            Source: https://docs.wxpython.org/wx.FindReplaceData.html
        """

    def SetReplaceString(self, str: str) -> None:
        """ 

`SetReplaceString`(*self*, *str*)[¶](#wx.FindReplaceData.SetReplaceString "Permalink to this definition")
Set the replacement string (used as initial value by the dialog).



Parameters
**str** (*string*) – 






            Source: https://docs.wxpython.org/wx.FindReplaceData.html
        """

    FindString: str  # `FindString`[¶](#wx.FindReplaceData.FindString "Permalink to this definition")See [`GetFindString`](#wx.FindReplaceData.GetFindString "wx.FindReplaceData.GetFindString") and [`SetFindString`](#wx.FindReplaceData.SetFindString "wx.FindReplaceData.SetFindString")
    Flags: int  # `Flags`[¶](#wx.FindReplaceData.Flags "Permalink to this definition")See [`GetFlags`](#wx.FindReplaceData.GetFlags "wx.FindReplaceData.GetFlags") and [`SetFlags`](#wx.FindReplaceData.SetFlags "wx.FindReplaceData.SetFlags")
    ReplaceString: str  # `ReplaceString`[¶](#wx.FindReplaceData.ReplaceString "Permalink to this definition")See [`GetReplaceString`](#wx.FindReplaceData.GetReplaceString "wx.FindReplaceData.GetReplaceString") and [`SetReplaceString`](#wx.FindReplaceData.SetReplaceString "wx.FindReplaceData.SetReplaceString")



class FlexGridSizer(GridSizer):
    """ **Possible constructors**:



```
FlexGridSizer(cols, vgap, hgap)

FlexGridSizer(cols, gap=Size(0,0))

FlexGridSizer(rows, cols, vgap, hgap)

FlexGridSizer(rows, cols, gap)

```


A flex grid sizer is a sizer which lays out its children in a two-
dimensional table with all table fields in one row having the same
height and all fields in one column having the same width, but all
rows or all columns are not necessarily the same height or width as in
the GridSizer.


  


        Source: https://docs.wxpython.org/wx.FlexGridSizer.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FlexGridSizer.__init__ "Permalink to this definition")
 [wx.FlexGridSizer](#wx-flexgridsizer) constructors.


Please see `GridSizer.__init__` documentation.



New in version 2.9.1: (except for the four argument overload)



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, cols, vgap, hgap)*



Parameters
* **cols** (*int*) –
* **vgap** (*int*) –
* **hgap** (*int*) –






---

  



**\_\_init\_\_** *(self, cols, gap=Size(0,0))*



Parameters
* **cols** (*int*) –
* **gap** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  



**\_\_init\_\_** *(self, rows, cols, vgap, hgap)*



Parameters
* **rows** (*int*) –
* **cols** (*int*) –
* **vgap** (*int*) –
* **hgap** (*int*) –






---

  



**\_\_init\_\_** *(self, rows, cols, gap)*



Parameters
* **rows** (*int*) –
* **cols** (*int*) –
* **gap** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  





            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def AddGrowableCol(self, idx, proportion=0) -> None:
        """ 

`AddGrowableCol`(*self*, *idx*, *proportion=0*)[¶](#wx.FlexGridSizer.AddGrowableCol "Permalink to this definition")
Specifies that column *idx* (starting from zero) should be grown if there is extra space available to the sizer.


The *proportion* parameter has the same meaning as the stretch factor for the sizers (see  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer)) except that if all proportions are 0, then all columns are resized equally (instead of not being resized at all).


Notice that the column must not be already growable, if you need to change the proportion you must call [`RemoveGrowableCol`](#wx.FlexGridSizer.RemoveGrowableCol "wx.FlexGridSizer.RemoveGrowableCol") first and then make it growable (with a different proportion) again. You can use [`IsColGrowable`](#wx.FlexGridSizer.IsColGrowable "wx.FlexGridSizer.IsColGrowable") to check whether a column is already growable.



Parameters
* **idx** (*int*) –
* **proportion** (*int*) –






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def AddGrowableRow(self, idx, proportion=0) -> None:
        """ 

`AddGrowableRow`(*self*, *idx*, *proportion=0*)[¶](#wx.FlexGridSizer.AddGrowableRow "Permalink to this definition")
Specifies that row idx (starting from zero) should be grown if there is extra space available to the sizer.


This is identical to [`AddGrowableCol`](#wx.FlexGridSizer.AddGrowableCol "wx.FlexGridSizer.AddGrowableCol") except that it works with rows and not columns.



Parameters
* **idx** (*int*) –
* **proportion** (*int*) –






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.FlexGridSizer.CalcMin "Permalink to this definition")
This method is abstract and has to be overwritten by any derived class.


Here, the sizer will do the actual calculation of its children’s minimal sizes.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def GetColWidths(self) -> int:
        """ 

`GetColWidths`(*self*)[¶](#wx.FlexGridSizer.GetColWidths "Permalink to this definition")
Returns a read-only array containing the widths of the columns in the sizer.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def GetFlexibleDirection(self) -> int:
        """ 

`GetFlexibleDirection`(*self*)[¶](#wx.FlexGridSizer.GetFlexibleDirection "Permalink to this definition")
Returns a  [wx.Orientation](wx.Orientation.enumeration.html#wx-orientation) value that specifies whether the sizer flexibly resizes its columns, rows, or both (default).



Return type
*int*



Returns
One of the following values:


* `wx.VERTICAL`: Rows are flexibly sized.
* `wx.HORIZONTAL`: Columns are flexibly sized.
* `wx.BOTH`: Both rows and columns are flexibly sized (this is the default value).








See also


[`SetFlexibleDirection`](#wx.FlexGridSizer.SetFlexibleDirection "wx.FlexGridSizer.SetFlexibleDirection")





            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def GetNonFlexibleGrowMode(self) -> 'FlexSizerGrowMode':
        """ 

`GetNonFlexibleGrowMode`(*self*)[¶](#wx.FlexGridSizer.GetNonFlexibleGrowMode "Permalink to this definition")
Returns the value that specifies how the sizer grows in the “non-flexible” direction if there is one.


The behaviour of the elements in the flexible direction (i.e. both rows and columns by default, or rows only if [`GetFlexibleDirection`](#wx.FlexGridSizer.GetFlexibleDirection "wx.FlexGridSizer.GetFlexibleDirection") is `VERTICAL` or columns only if it is `HORIZONTAL` ) is always governed by their proportion as specified in the call to [`AddGrowableRow`](#wx.FlexGridSizer.AddGrowableRow "wx.FlexGridSizer.AddGrowableRow") or [`AddGrowableCol`](#wx.FlexGridSizer.AddGrowableCol "wx.FlexGridSizer.AddGrowableCol") . What happens in the other direction depends on the value of returned by this function as described below.



Return type
 [wx.FlexSizerGrowMode](wx.FlexSizerGrowMode.enumeration.html#wx-flexsizergrowmode)



Returns
One of the following values:


* `wx.FLEX_GROWMODE_NONE`: Sizer doesn’t grow its elements at all in the non-flexible direction.
* `wx.FLEX_GROWMODE_SPECIFIED`: Sizer honors growable columns/rows set with [`AddGrowableCol`](#wx.FlexGridSizer.AddGrowableCol "wx.FlexGridSizer.AddGrowableCol") and [`AddGrowableRow`](#wx.FlexGridSizer.AddGrowableRow "wx.FlexGridSizer.AddGrowableRow") in the non-flexible direction as well. In this case equal sizing applies to minimum sizes of columns or rows (this is the default value).
* `wx.FLEX_GROWMODE_ALL`: Sizer equally stretches all columns or rows in the non-flexible direction, independently of the proportions applied in the flexible direction.








See also


[`SetFlexibleDirection`](#wx.FlexGridSizer.SetFlexibleDirection "wx.FlexGridSizer.SetFlexibleDirection") , [`SetNonFlexibleGrowMode`](#wx.FlexGridSizer.SetNonFlexibleGrowMode "wx.FlexGridSizer.SetNonFlexibleGrowMode")





            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def GetRowHeights(self) -> int:
        """ 

`GetRowHeights`(*self*)[¶](#wx.FlexGridSizer.GetRowHeights "Permalink to this definition")
Returns a read-only array containing the heights of the rows in the sizer.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def IsColGrowable(self, idx: int) -> bool:
        """ 

`IsColGrowable`(*self*, *idx*)[¶](#wx.FlexGridSizer.IsColGrowable "Permalink to this definition")
Returns `True` if column *idx* is growable.



Parameters
**idx** (*int*) – 



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def IsRowGrowable(self, idx: int) -> bool:
        """ 

`IsRowGrowable`(*self*, *idx*)[¶](#wx.FlexGridSizer.IsRowGrowable "Permalink to this definition")
Returns `True` if row *idx* is growable.



Parameters
**idx** (*int*) – 



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def RemoveGrowableCol(self, idx: int) -> None:
        """ 

`RemoveGrowableCol`(*self*, *idx*)[¶](#wx.FlexGridSizer.RemoveGrowableCol "Permalink to this definition")
Specifies that the *idx* column index is no longer growable.



Parameters
**idx** (*int*) – 






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def RemoveGrowableRow(self, idx: int) -> None:
        """ 

`RemoveGrowableRow`(*self*, *idx*)[¶](#wx.FlexGridSizer.RemoveGrowableRow "Permalink to this definition")
Specifies that the *idx* row index is no longer growable.



Parameters
**idx** (*int*) – 






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def RepositionChildren(self, minSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`RepositionChildren`(*self*, *minSize*)[¶](#wx.FlexGridSizer.RepositionChildren "Permalink to this definition")
Method which must be overridden in the derived sizer classes.


The implementation should reposition the children using the current total size available to the sizer ( `m_size` ) and the size computed by the last call to [`CalcMin`](#wx.FlexGridSizer.CalcMin "wx.FlexGridSizer.CalcMin") .


Note that you should never call this method directly, call `Layout` instead if you need to manually update the sizer elements positions. This method is only called by wxWidgets itself.



Parameters
**minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





New in version 4.1/wxWidgets-3.1.3: ,
before this version RecalcSizes() method not taking any arguments had to be overridden in the derived classes instead.





            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def SetFlexibleDirection(self, direction: int) -> None:
        """ 

`SetFlexibleDirection`(*self*, *direction*)[¶](#wx.FlexGridSizer.SetFlexibleDirection "Permalink to this definition")
Specifies whether the sizer should flexibly resize its columns, rows, or both.


Argument *direction* can be `VERTICAL` , `HORIZONTAL` or `BOTH` (which is the default value). Any other value is ignored.


See [`GetFlexibleDirection`](#wx.FlexGridSizer.GetFlexibleDirection "wx.FlexGridSizer.GetFlexibleDirection") for the explanation of these values. Note that this method does not trigger relayout.



Parameters
**direction** (*int*) – 






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    def SetNonFlexibleGrowMode(self, mode: FlexSizerGrowMode) -> None:
        """ 

`SetNonFlexibleGrowMode`(*self*, *mode*)[¶](#wx.FlexGridSizer.SetNonFlexibleGrowMode "Permalink to this definition")
Specifies how the sizer should grow in the non-flexible direction if there is one (so [`SetFlexibleDirection`](#wx.FlexGridSizer.SetFlexibleDirection "wx.FlexGridSizer.SetFlexibleDirection") must have been called previously).


Argument *mode* can be one of those documented in [`GetNonFlexibleGrowMode`](#wx.FlexGridSizer.GetNonFlexibleGrowMode "wx.FlexGridSizer.GetNonFlexibleGrowMode") , please see there for their explanation. Note that this method does not trigger relayout.



Parameters
**mode** ([*FlexSizerGrowMode*](wx.FlexSizerGrowMode.enumeration.html "FlexSizerGrowMode")) – 






            Source: https://docs.wxpython.org/wx.FlexGridSizer.html
        """

    ColWidths: int  # `ColWidths`[¶](#wx.FlexGridSizer.ColWidths "Permalink to this definition")See [`GetColWidths`](#wx.FlexGridSizer.GetColWidths "wx.FlexGridSizer.GetColWidths")
    FlexibleDirection: int  # `FlexibleDirection`[¶](#wx.FlexGridSizer.FlexibleDirection "Permalink to this definition")See [`GetFlexibleDirection`](#wx.FlexGridSizer.GetFlexibleDirection "wx.FlexGridSizer.GetFlexibleDirection") and [`SetFlexibleDirection`](#wx.FlexGridSizer.SetFlexibleDirection "wx.FlexGridSizer.SetFlexibleDirection")
    NonFlexibleGrowMode: 'FlexSizerGrowMode'  # `NonFlexibleGrowMode`[¶](#wx.FlexGridSizer.NonFlexibleGrowMode "Permalink to this definition")See [`GetNonFlexibleGrowMode`](#wx.FlexGridSizer.GetNonFlexibleGrowMode "wx.FlexGridSizer.GetNonFlexibleGrowMode") and [`SetNonFlexibleGrowMode`](#wx.FlexGridSizer.SetNonFlexibleGrowMode "wx.FlexGridSizer.SetNonFlexibleGrowMode")
    RowHeights: int  # `RowHeights`[¶](#wx.FlexGridSizer.RowHeights "Permalink to this definition")See [`GetRowHeights`](#wx.FlexGridSizer.GetRowHeights "wx.FlexGridSizer.GetRowHeights")



FLEX_GROWMODE_NONE: int

FLEX_GROWMODE_SPECIFIED: int

FLEX_GROWMODE_ALL: int

class GridSizer(Sizer):
    """ **Possible constructors**:



```
GridSizer(cols, vgap, hgap)

GridSizer(cols, gap=Size(0,0))

GridSizer(rows, cols, vgap, hgap)

GridSizer(rows, cols, gap)

```


A grid sizer is a sizer which lays out its children in a two-
dimensional table with all table fields having the same size, i.e.


  


        Source: https://docs.wxpython.org/wx.GridSizer.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GridSizer.__init__ "Permalink to this definition")
 [wx.GridSizer](#wx-gridsizer) constructors.


Usually only the number of columns in the flex grid sizer needs to be specified using *cols* argument. The number of rows will be deduced automatically depending on the number of the elements added to the sizer.


If a constructor form with *rows* parameter is used (and the value of *rows* argument is not zero, meaning “unspecified”) the sizer will check that no more than `cols*rows` elements are added to it, i.e. that no more than the given number of *rows* is used. Adding less than maximally allowed number of items is not an error however.


Finally, it is also possible to specify the number of rows and use 0 for *cols*. In this case, the sizer will use the given fixed number of rows and as many columns as necessary.


The *gap* (or *vgap* and *hgap*, which correspond to the height and width of the  [wx.Size](wx.Size.html#wx-size) object) argument defines the size of the padding between the rows (its vertical component, or *vgap*) and columns (its horizontal component, or *hgap*), in pixels.



New in version 2.9.1: (except for the four argument overload)



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, cols, vgap, hgap)*



Parameters
* **cols** (*int*) –
* **vgap** (*int*) –
* **hgap** (*int*) –






---

  



**\_\_init\_\_** *(self, cols, gap=Size(0,0))*



Parameters
* **cols** (*int*) –
* **gap** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  



**\_\_init\_\_** *(self, rows, cols, vgap, hgap)*



Parameters
* **rows** (*int*) –
* **cols** (*int*) –
* **vgap** (*int*) –
* **hgap** (*int*) –






---

  



**\_\_init\_\_** *(self, rows, cols, gap)*



Parameters
* **rows** (*int*) –
* **cols** (*int*) –
* **gap** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  





            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.GridSizer.CalcMin "Permalink to this definition")
This method is abstract and has to be overwritten by any derived class.


Here, the sizer will do the actual calculation of its children’s minimal sizes.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def CalcRowsCols(self) -> None:
        """ 

`CalcRowsCols`(*self*)[¶](#wx.GridSizer.CalcRowsCols "Permalink to this definition")
Calculates how many rows and columns will be in the sizer based
on the current number of items and also the rows, cols specified
in the constructor.




            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def GetCols(self) -> int:
        """ 

`GetCols`(*self*)[¶](#wx.GridSizer.GetCols "Permalink to this definition")
Returns the number of columns that has been specified for the sizer.


Returns zero if the sizer is automatically adjusting the number of columns depending on number of its children. To get the effective number of columns or rows being currently used, see [`GetEffectiveColsCount`](#wx.GridSizer.GetEffectiveColsCount "wx.GridSizer.GetEffectiveColsCount")



Return type
*int*






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def GetEffectiveColsCount(self) -> int:
        """ 

`GetEffectiveColsCount`(*self*)[¶](#wx.GridSizer.GetEffectiveColsCount "Permalink to this definition")
Returns the number of columns currently used by the sizer.


This will depend on the number of children the sizer has if the sizer is automatically adjusting the number of columns/rows.



Return type
*int*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def GetEffectiveRowsCount(self) -> int:
        """ 

`GetEffectiveRowsCount`(*self*)[¶](#wx.GridSizer.GetEffectiveRowsCount "Permalink to this definition")
Returns the number of rows currently used by the sizer.


This will depend on the number of children the sizer has if the sizer is automatically adjusting the number of columns/rows.



Return type
*int*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def GetHGap(self) -> int:
        """ 

`GetHGap`(*self*)[¶](#wx.GridSizer.GetHGap "Permalink to this definition")
Returns the horizontal gap (in pixels) between cells in the sizer.



Return type
*int*






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def GetRows(self) -> int:
        """ 

`GetRows`(*self*)[¶](#wx.GridSizer.GetRows "Permalink to this definition")
Returns the number of rows that has been specified for the sizer.


Returns zero if the sizer is automatically adjusting the number of rows depending on number of its children. To get the effective number of columns or rows being currently used, see [`GetEffectiveRowsCount`](#wx.GridSizer.GetEffectiveRowsCount "wx.GridSizer.GetEffectiveRowsCount") .



Return type
*int*






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def GetVGap(self) -> int:
        """ 

`GetVGap`(*self*)[¶](#wx.GridSizer.GetVGap "Permalink to this definition")
Returns the vertical gap (in pixels) between the cells in the sizer.



Return type
*int*






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def RepositionChildren(self, minSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`RepositionChildren`(*self*, *minSize*)[¶](#wx.GridSizer.RepositionChildren "Permalink to this definition")
Method which must be overridden in the derived sizer classes.


The implementation should reposition the children using the current total size available to the sizer ( `m_size` ) and the size computed by the last call to [`CalcMin`](#wx.GridSizer.CalcMin "wx.GridSizer.CalcMin") .


Note that you should never call this method directly, call [`Layout`](wx.Sizer.html#wx.Sizer.Layout "wx.Sizer.Layout") instead if you need to manually update the sizer elements positions. This method is only called by wxWidgets itself.



Parameters
**minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





New in version 4.1/wxWidgets-3.1.3: ,
before this version RecalcSizes() method not taking any arguments had to be overridden in the derived classes instead.





            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def SetCols(self, cols: int) -> None:
        """ 

`SetCols`(*self*, *cols*)[¶](#wx.GridSizer.SetCols "Permalink to this definition")
Sets the number of columns in the sizer.



Parameters
**cols** (*int*) – 






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def SetHGap(self, gap: int) -> None:
        """ 

`SetHGap`(*self*, *gap*)[¶](#wx.GridSizer.SetHGap "Permalink to this definition")
Sets the horizontal gap (in pixels) between cells in the sizer.



Parameters
**gap** (*int*) – 






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def SetRows(self, rows: int) -> None:
        """ 

`SetRows`(*self*, *rows*)[¶](#wx.GridSizer.SetRows "Permalink to this definition")
Sets the number of rows in the sizer.



Parameters
**rows** (*int*) – 






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    def SetVGap(self, gap: int) -> None:
        """ 

`SetVGap`(*self*, *gap*)[¶](#wx.GridSizer.SetVGap "Permalink to this definition")
Sets the vertical gap (in pixels) between the cells in the sizer.



Parameters
**gap** (*int*) – 






            Source: https://docs.wxpython.org/wx.GridSizer.html
        """

    Cols: int  # `Cols`[¶](#wx.GridSizer.Cols "Permalink to this definition")See [`GetCols`](#wx.GridSizer.GetCols "wx.GridSizer.GetCols") and [`SetCols`](#wx.GridSizer.SetCols "wx.GridSizer.SetCols")
    EffectiveColsCount: int  # `EffectiveColsCount`[¶](#wx.GridSizer.EffectiveColsCount "Permalink to this definition")See [`GetEffectiveColsCount`](#wx.GridSizer.GetEffectiveColsCount "wx.GridSizer.GetEffectiveColsCount")
    EffectiveRowsCount: int  # `EffectiveRowsCount`[¶](#wx.GridSizer.EffectiveRowsCount "Permalink to this definition")See [`GetEffectiveRowsCount`](#wx.GridSizer.GetEffectiveRowsCount "wx.GridSizer.GetEffectiveRowsCount")
    HGap: int  # `HGap`[¶](#wx.GridSizer.HGap "Permalink to this definition")See [`GetHGap`](#wx.GridSizer.GetHGap "wx.GridSizer.GetHGap") and [`SetHGap`](#wx.GridSizer.SetHGap "wx.GridSizer.SetHGap")
    Rows: int  # `Rows`[¶](#wx.GridSizer.Rows "Permalink to this definition")See [`GetRows`](#wx.GridSizer.GetRows "wx.GridSizer.GetRows") and [`SetRows`](#wx.GridSizer.SetRows "wx.GridSizer.SetRows")
    VGap: int  # `VGap`[¶](#wx.GridSizer.VGap "Permalink to this definition")See [`GetVGap`](#wx.GridSizer.GetVGap "wx.GridSizer.GetVGap") and [`SetVGap`](#wx.GridSizer.SetVGap "wx.GridSizer.SetVGap")



class FocusEvent(Event):
    """ **Possible constructors**:



```
FocusEvent(eventType=wxEVT_NULL, id=0)

```


A focus event is sent when a window’s focus changes.


  


        Source: https://docs.wxpython.org/wx.FocusEvent.html
    """
    def __init__(self, eventType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *eventType=wxEVT\_NULL*, *id=0*)[¶](#wx.FocusEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **eventType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.FocusEvent.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.FocusEvent.GetWindow "Permalink to this definition")
Returns the window associated with this event, that is the window which had the focus before for the `wxEVT_SET_FOCUS` event and the window which is going to receive focus for the `wxEVT_KILL_FOCUS` one.


Warning: the window pointer may be `None`!



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.FocusEvent.html
        """

    def SetWindow(self, win: 'Window') -> None:
        """ 

`SetWindow`(*self*, *win*)[¶](#wx.FocusEvent.SetWindow "Permalink to this definition")

Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.FocusEvent.html
        """

    Window: '_Window'  # `Window`[¶](#wx.FocusEvent.Window "Permalink to this definition")See [`GetWindow`](#wx.FocusEvent.GetWindow "wx.FocusEvent.GetWindow") and [`SetWindow`](#wx.FocusEvent.SetWindow "wx.FocusEvent.SetWindow")



class Font(GDIObject):
    """ **Possible constructors**:



```
Font()

Font(font)

Font(fontInfo)

Font(pointSize, family, style, weight, underline=False,
     faceName="", encoding=FONTENCODING_DEFAULT)

Font(pixelSize, family, style, weight, underline=False,
     faceName="", encoding=FONTENCODING_DEFAULT)

Font(nativeInfoString)

Font(nativeInfo)

```


A font is an object which determines the appearance of text.


  


        Source: https://docs.wxpython.org/wx.Font.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Font.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, font)*


Copy constructor, uses [reference counting](refcount_overview.html#reference-counting).



Parameters
**font** ([*wx.Font*](#wx.Font "wx.Font")) – 






---

  



**\_\_init\_\_** *(self, fontInfo)*


Creates a font object using the specified font description.


This is the preferred way to create font objects as using this constructor results in more readable code and it is also extensible, e.g. it could continue to be used if support for more font attributes is added in the future. For example, this constructor provides the only way of creating fonts with strike-through style.


Example of creating a font using this constructor:



```
# Create a font using wx.FontInfo
font = wx.Font( wx.FontInfo(10).Bold().Underline() )

```



Parameters
**fontInfo** ([*wx.FontInfo*](wx.FontInfo.html#wx.FontInfo "wx.FontInfo")) – 





New in version 2.9.5.





---

  



**\_\_init\_\_** *(self, pointSize, family, style, weight, underline=False, faceName=””, encoding=FONTENCODING\_DEFAULT)*


Creates a font object with the specified attributes and size in points.


Notice that the use of this constructor is often more verbose and less readable than using the constructor accepting a  [wx.FontInfo](wx.FontInfo.html#wx-fontinfo), e.g. the example in that constructor documentation would need to be written as:



```
# Create a font using the old-style constructor
font = wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, True)

```



Parameters
* **pointSize** (*int*) – Size in points. See [`SetPointSize`](#wx.Font.SetPointSize "wx.Font.SetPointSize") for more info. Notice that, for historical reasons, the value 70 here is interpreted at `DEFAULT` and results in creation of the font with the default size and not of a font with the size of 70pt. If you really need the latter, please use SetPointSize(70). Note that this constructor and the matching Create() method overload are the only places in  [wx.Font](#wx-font) API handling `DEFAULT` specially: neither [`SetPointSize`](#wx.Font.SetPointSize "wx.Font.SetPointSize") nor the constructor taking  [wx.FontInfo](wx.FontInfo.html#wx-fontinfo) handle this value in this way.
* **family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) – The font family: a generic portable way of referring to fonts without specifying a facename. This parameter must be one of the  [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily) enumeration values. If the *faceName* argument is provided, then it overrides the font family.
* **style** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) – One of `FONTSTYLE_NORMAL` , `FONTSTYLE_SLANT` and `FONTSTYLE_ITALIC` .
* **weight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) – Font weight, sometimes also referred to as font boldness. One of the  [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight) enumeration values.
* **underline** (*bool*) – The value can be `True` or `False`. At present this has an effect on Windows and Motif 2.x only.
* **faceName** (*string*) – An optional string specifying the face name to be used. If it is an empty string, a default face name will be chosen based on the family.
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – An encoding which may be one of the enumeration values of  [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding). If the specified encoding isn’t available, no font is created (see also [Font Encodings](font_encodings.html#font-encodings)).





Note


If the desired font does not exist, the closest match will be chosen. Under Windows, only scalable TrueType fonts are used.





---

  



**\_\_init\_\_** *(self, pixelSize, family, style, weight, underline=False, faceName=””, encoding=FONTENCODING\_DEFAULT)*


Creates a font object with the specified attributes and size in pixels.


Notice that the use of this constructor is often more verbose and less readable than the use of constructor from  [wx.FontInfo](wx.FontInfo.html#wx-fontinfo), consider using that constructor instead.



Parameters
* **pixelSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Size in pixels. See [`SetPixelSize`](#wx.Font.SetPixelSize "wx.Font.SetPixelSize") for more info.
* **family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) – The font family: a generic portable way of referring to fonts without specifying a facename. This parameter must be one of the  [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily) enumeration values. If the *faceName* argument is provided, then it overrides the font family.
* **style** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) – One of `FONTSTYLE_NORMAL` , `FONTSTYLE_SLANT` and `FONTSTYLE_ITALIC` .
* **weight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) – Font weight, sometimes also referred to as font boldness. One of the  [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight) enumeration values.
* **underline** (*bool*) – The value can be `True` or `False`. At present this has an effect on Windows and Motif 2.x only.
* **faceName** (*string*) – An optional string specifying the face name to be used. If it is an empty string, a default face name will be chosen based on the family.
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – An encoding which may be one of the enumeration values of  [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding). If the specified encoding isn’t available, no font is created (see also [Font Encodings](font_encodings.html#font-encodings)).





Note


If the desired font does not exist, the closest match will be chosen. Under Windows, only scalable TrueType fonts are used.





---

  



**\_\_init\_\_** *(self, nativeInfoString)*


Constructor from font description string.


This constructor uses [`SetNativeFontInfo`](#wx.Font.SetNativeFontInfo "wx.Font.SetNativeFontInfo") to initialize the font. If *fontdesc* is invalid the font remains uninitialized, i.e. its [`IsOk`](#wx.Font.IsOk "wx.Font.IsOk") method will return `False`.



Parameters
**nativeInfoString** (*string*) – 






---

  



**\_\_init\_\_** *(self, nativeInfo)*


Construct font from a native font info structure.



Parameters
**nativeInfo** ([*wx.NativeFontInfo*](wx.NativeFontInfo.html#wx.NativeFontInfo "wx.NativeFontInfo")) – 






---

  





            Source: https://docs.wxpython.org/wx.Font.html
        """

    @staticmethod
    def AddPrivateFont(filename: str) -> bool:
        """ 

*static* `AddPrivateFont`(*filename*)[¶](#wx.Font.AddPrivateFont "Permalink to this definition")
Specify the name of a file containing a TrueType font to be made available to the current application.


This method can be used to allow this application to use the font from the given file even if it is not globally installed on the system.


Under macOS this method actually doesn’t do anything other than check for the existence of the file in the “Fonts” subdirectory of the application bundle “Resources” directory. You are responsible for actually making the font file available in this directory and setting `ATSApplicationFontsPath` to `Fonts` value in your `Info.plist` file. See also [`wx.StandardPaths.GetResourcesDir`](wx.StandardPaths.html#wx.StandardPaths.GetResourcesDir "wx.StandardPaths.GetResourcesDir") .


Under MSW this method must be called before any  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) objects have been created, otherwise the private font won’t be usable from them.


Under Unix this method requires Pango 1.38 or later and will return `False` and log an error message explaining the problem if this requirement is not satisfied either at compile- or run-time.


Currently this method is implemented for all major platforms (subject to having Pango 1.38 or later when running configure under Unix) and `USE_PRIVATE_FONTS` is always set to 0 under the other platforms, making this function unavailable at compile-time.



Parameters
**filename** (*string*) – 



Return type
*bool*



Returns
`True` if the font was added and can now be used.





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def Bold(self) -> 'Font':
        """ 

`Bold`(*self*)[¶](#wx.Font.Bold "Permalink to this definition")
Returns a bold version of this font.



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`MakeBold`](#wx.Font.MakeBold "wx.Font.MakeBold")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    @staticmethod
    def CanUsePrivateFont() -> bool:
        """ 

*static* `CanUsePrivateFont`()[¶](#wx.Font.CanUsePrivateFont "Permalink to this definition")
Returns `True` if this build of wxPython supports using [`AddPrivateFont`](#wx.Font.AddPrivateFont "wx.Font.AddPrivateFont").



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetBaseFont(self) -> 'Font':
        """ 

`GetBaseFont`(*self*)[¶](#wx.Font.GetBaseFont "Permalink to this definition")
Returns a font with the same face/size as the given one but with normal weight and style and not underlined nor stricken through.



Return type
 [wx.Font](#wx-font)





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.Font.html
        """

    @staticmethod
    def GetDefaultEncoding() -> int:
        """ 

*static* `GetDefaultEncoding`()[¶](#wx.Font.GetDefaultEncoding "Permalink to this definition")
Returns the current application’s default encoding.



Return type
 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding)





See also


[Font Encodings](font_encodings.html#font-encodings), [`SetDefaultEncoding`](#wx.Font.SetDefaultEncoding "wx.Font.SetDefaultEncoding")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetEncoding(self) -> int:
        """ 

`GetEncoding`(*self*)[¶](#wx.Font.GetEncoding "Permalink to this definition")
Returns the encoding of this font.


Note that under wxGTK the returned value is always `FONTENCODING_UTF8` .



Return type
 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding)





See also


[`SetEncoding`](#wx.Font.SetEncoding "wx.Font.SetEncoding")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetFaceName(self) -> str:
        """ 

`GetFaceName`(*self*)[¶](#wx.Font.GetFaceName "Permalink to this definition")
Returns the face name associated with the font, or the empty string if there is no face information.



Return type
`string`





See also


[`SetFaceName`](#wx.Font.SetFaceName "wx.Font.SetFaceName")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetFamily(self) -> int:
        """ 

`GetFamily`(*self*)[¶](#wx.Font.GetFamily "Permalink to this definition")
Gets the font family if possible.


As described in  [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily) docs the returned value acts as a rough, basic classification of the main font properties (look, spacing).


If the current font face name is not recognized by  [wx.Font](#wx-font) or by the underlying system, `FONTFAMILY_DEFAULT` is returned.


Note that currently this function is not very precise and so not particularly useful. Font families mostly make sense only for font creation, see [`SetFamily`](#wx.Font.SetFamily "wx.Font.SetFamily") .



Return type
 [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily)





See also


[`SetFamily`](#wx.Font.SetFamily "wx.Font.SetFamily")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetFractionalPointSize(self) -> float:
        """ 

`GetFractionalPointSize`(*self*)[¶](#wx.Font.GetFractionalPointSize "Permalink to this definition")
Gets the point size as a floating number.



Return type
*float*





New in version 4.1/wxWidgets-3.1.2.




See also


SetPointSize(float)





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetHFONT(self) -> None:
        """ 

`GetHFONT`(*self*)[¶](#wx.Font.GetHFONT "Permalink to this definition")
Returns the font’s native handle.




            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetNativeFontInfo(self) -> 'NativeFontInfo':
        """ 

`GetNativeFontInfo`(*self*)[¶](#wx.Font.GetNativeFontInfo "Permalink to this definition")
Returns a font with the same face/size as the given one but with normal weight and style and not underlined nor stricken through.



Return type
 [wx.NativeFontInfo](wx.NativeFontInfo.html#wx-nativefontinfo)





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetNativeFontInfoDesc(self) -> str:
        """ 

`GetNativeFontInfoDesc`(*self*)[¶](#wx.Font.GetNativeFontInfoDesc "Permalink to this definition")
Returns the platform-dependent string completely describing this font.


Returned string is always non-empty unless the font is invalid (in which case an assert is triggered).


Note that the returned string is not meant to be shown or edited by the user: a typical use of this function is for serializing in string-form a  [wx.Font](#wx-font) object.



Return type
`string`





See also


[`SetNativeFontInfo`](#wx.Font.SetNativeFontInfo "wx.Font.SetNativeFontInfo") , [`GetNativeFontInfoUserDesc`](#wx.Font.GetNativeFontInfoUserDesc "wx.Font.GetNativeFontInfoUserDesc")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetNativeFontInfoUserDesc(self) -> str:
        """ 

`GetNativeFontInfoUserDesc`(*self*)[¶](#wx.Font.GetNativeFontInfoUserDesc "Permalink to this definition")
Returns a user-friendly string for this font object.


Returned string is always non-empty unless the font is invalid (in which case an assert is triggered).


The string does not encode all  [wx.Font](#wx-font) infos under all platforms; e.g. under wxMSW the font family is not present in the returned string.


Some examples of the formats of returned strings (which are platform-dependent) are in [`SetNativeFontInfoUserDesc`](#wx.Font.SetNativeFontInfoUserDesc "wx.Font.SetNativeFontInfoUserDesc") .



Return type
`string`





See also


[`SetNativeFontInfoUserDesc`](#wx.Font.SetNativeFontInfoUserDesc "wx.Font.SetNativeFontInfoUserDesc") , [`GetNativeFontInfoDesc`](#wx.Font.GetNativeFontInfoDesc "wx.Font.GetNativeFontInfoDesc")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetNumericWeight(self) -> int:
        """ 

`GetNumericWeight`(*self*)[¶](#wx.Font.GetNumericWeight "Permalink to this definition")
Gets the font weight as an integer value.


See  [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight) for a list of valid weight identifiers and their corresponding integer value.



Return type
*int*





New in version 4.1/wxWidgets-3.1.2.




See also


[`SetWeight`](#wx.Font.SetWeight "wx.Font.SetWeight")




See also


[`SetNumericWeight`](#wx.Font.SetNumericWeight "wx.Font.SetNumericWeight")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    @staticmethod
    def GetNumericWeightOf(weight: int) -> int:
        """ 

*static* `GetNumericWeightOf`(*weight*)[¶](#wx.Font.GetNumericWeightOf "Permalink to this definition")
Get the raw weight value corresponding to the given symbolic constant.


For compatibility, this function handles the values `NORMAL` , `LIGHT` and `BOLD` , that have values 90, 91 and 92, specially and converts them to the corresponding `FONTWEIGHT_XXX` weight value.



Parameters
**weight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) – A valid element of FontWeight enum, i.e. this argument can’t have value `FONTWEIGHT_INVALID`.



Return type
*int*



Returns
Numeric weight, between 1 and 1000.





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetPangoFontDescription(self) -> None:
        """ 

`GetPangoFontDescription`(*self*)[¶](#wx.Font.GetPangoFontDescription "Permalink to this definition")
Returns the font’s native handle.




            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetPixelSize(self) -> 'Size':
        """ 

`GetPixelSize`(*self*)[¶](#wx.Font.GetPixelSize "Permalink to this definition")
Gets the pixel size.


Note that under wxMSW if you passed to [`SetPixelSize`](#wx.Font.SetPixelSize "wx.Font.SetPixelSize") (or to the constructor) a  [wx.Size](wx.Size.html#wx-size) object with a null width value, you’ll get a null width in the returned object.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`SetPixelSize`](#wx.Font.SetPixelSize "wx.Font.SetPixelSize")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetPointSize(self) -> int:
        """ 

`GetPointSize`(*self*)[¶](#wx.Font.GetPointSize "Permalink to this definition")
Gets the point size as an integer number.


This function is kept for compatibility reasons. New code should use [`GetFractionalPointSize`](#wx.Font.GetFractionalPointSize "wx.Font.GetFractionalPointSize") and support fractional point sizes.



Return type
*int*





See also


[`SetPointSize`](#wx.Font.SetPointSize "wx.Font.SetPointSize") ,




See also


[`GetFractionalPointSize`](#wx.Font.GetFractionalPointSize "wx.Font.GetFractionalPointSize")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetStrikethrough(self) -> bool:
        """ 

`GetStrikethrough`(*self*)[¶](#wx.Font.GetStrikethrough "Permalink to this definition")
Returns `True` if the font is stricken-through, `False` otherwise.



Return type
*bool*





New in version 2.9.4.




See also


[`SetStrikethrough`](#wx.Font.SetStrikethrough "wx.Font.SetStrikethrough")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetStyle(self) -> int:
        """ 

`GetStyle`(*self*)[¶](#wx.Font.GetStyle "Permalink to this definition")
Gets the font style.


See  [wx.FontStyle](wx.FontStyle.enumeration.html#wx-fontstyle) for a list of valid styles.



Return type
 [wx.FontStyle](wx.FontStyle.enumeration.html#wx-fontstyle)





See also


[`SetStyle`](#wx.Font.SetStyle "wx.Font.SetStyle")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetUnderlined(self) -> bool:
        """ 

`GetUnderlined`(*self*)[¶](#wx.Font.GetUnderlined "Permalink to this definition")
Returns `True` if the font is underlined, `False` otherwise.



Return type
*bool*





See also


[`SetUnderlined`](#wx.Font.SetUnderlined "wx.Font.SetUnderlined")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def GetWeight(self) -> int:
        """ 

`GetWeight`(*self*)[¶](#wx.Font.GetWeight "Permalink to this definition")
Gets the font weight.


See  [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight) for a list of valid weight identifiers.



Return type
 [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight)





See also


[`SetWeight`](#wx.Font.SetWeight "wx.Font.SetWeight")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def IsFixedWidth(self) -> bool:
        """ 

`IsFixedWidth`(*self*)[¶](#wx.Font.IsFixedWidth "Permalink to this definition")
Returns `True` if the font is a fixed width (or monospaced) font, `False` if it is a proportional one or font is invalid.


Note that this function under some platforms is different from just testing for the font family being equal to `FONTFAMILY_TELETYPE` because native platform-specific functions are used for the check (resulting in a more accurate return value).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Font.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Font.IsOk "Permalink to this definition")
Returns `True` if this object is a valid font, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Font.html
        """

    def Italic(self) -> 'Font':
        """ 

`Italic`(*self*)[¶](#wx.Font.Italic "Permalink to this definition")
Returns an italic version of this font.



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`MakeItalic`](#wx.Font.MakeItalic "wx.Font.MakeItalic")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def Larger(self) -> 'Font':
        """ 

`Larger`(*self*)[¶](#wx.Font.Larger "Permalink to this definition")
Returns a larger version of this font.


The font size is multiplied by `1.2` , the factor of `1.2` being inspired by the `W3C` CSS specification.



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`MakeLarger`](#wx.Font.MakeLarger "wx.Font.MakeLarger") , [`Smaller`](#wx.Font.Smaller "wx.Font.Smaller") , [`Scaled`](#wx.Font.Scaled "wx.Font.Scaled")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def MakeBold(self) -> 'Font':
        """ 

`MakeBold`(*self*)[¶](#wx.Font.MakeBold "Permalink to this definition")
Changes this font to be bold.



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`Bold`](#wx.Font.Bold "wx.Font.Bold")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def MakeItalic(self) -> 'Font':
        """ 

`MakeItalic`(*self*)[¶](#wx.Font.MakeItalic "Permalink to this definition")
Changes this font to be italic.



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`Italic`](#wx.Font.Italic "wx.Font.Italic")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def MakeLarger(self) -> 'Font':
        """ 

`MakeLarger`(*self*)[¶](#wx.Font.MakeLarger "Permalink to this definition")
Changes this font to be larger.


The font size is multiplied by `1.2` , the factor of `1.2` being inspired by the `W3C` CSS specification.



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`Larger`](#wx.Font.Larger "wx.Font.Larger") , [`MakeSmaller`](#wx.Font.MakeSmaller "wx.Font.MakeSmaller") , [`Scale`](#wx.Font.Scale "wx.Font.Scale")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def MakeSmaller(self) -> 'Font':
        """ 

`MakeSmaller`(*self*)[¶](#wx.Font.MakeSmaller "Permalink to this definition")
Changes this font to be smaller.


The font size is divided by `1.2` , the factor of `1.2` being inspired by the `W3C` CSS specification.



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`Smaller`](#wx.Font.Smaller "wx.Font.Smaller") , [`MakeLarger`](#wx.Font.MakeLarger "wx.Font.MakeLarger") , [`Scale`](#wx.Font.Scale "wx.Font.Scale")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def MakeStrikethrough(self) -> 'Font':
        """ 

`MakeStrikethrough`(*self*)[¶](#wx.Font.MakeStrikethrough "Permalink to this definition")
Changes this font to be stricken-through.


Currently stricken-through fonts are only supported in wxMSW, wxGTK, and wxOSX.



Return type
 [wx.Font](#wx-font)





New in version 2.9.4.




See also


[`Strikethrough`](#wx.Font.Strikethrough "wx.Font.Strikethrough")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def MakeUnderlined(self) -> 'Font':
        """ 

`MakeUnderlined`(*self*)[¶](#wx.Font.MakeUnderlined "Permalink to this definition")
Changes this font to be underlined.



Return type
 [wx.Font](#wx-font)





New in version 2.9.2.




See also


[`Underlined`](#wx.Font.Underlined "wx.Font.Underlined")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    @staticmethod
    def New(*args, **kw) -> 'Font':
        """ 

*static* `New`(*\*args*, *\*\*kw*)[¶](#wx.Font.New "Permalink to this definition")
This function takes the same parameters as the relative [Font constructor](#wx-font) and returns a new font object allocated on the heap.


Their use is discouraged, use  [wx.Font](#wx-font) constructor from  [wx.FontInfo](wx.FontInfo.html#wx-fontinfo) instead.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**New** *(pointSize, family, style, weight, underline=False, faceName=””, encoding=FONTENCODING\_DEFAULT)*



Parameters
* **pointSize** (*int*) –
* **family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) –
* **style** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) –
* **weight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) –
* **underline** (*bool*) –
* **faceName** (*string*) –
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –



Return type
 [wx.Font](#wx-font)






---

  



**New** *(pointSize, family, flags=FONTFLAG\_DEFAULT, faceName=””, encoding=FONTENCODING\_DEFAULT)*



Parameters
* **pointSize** (*int*) –
* **family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) –
* **flags** (*int*) –
* **faceName** (*string*) –
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –



Return type
 [wx.Font](#wx-font)






---

  



**New** *(pixelSize, family, style, weight, underline=False, faceName=””, encoding=FONTENCODING\_DEFAULT)*



Parameters
* **pixelSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) –
* **style** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) –
* **weight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) –
* **underline** (*bool*) –
* **faceName** (*string*) –
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –



Return type
 [wx.Font](#wx-font)






---

  



**New** *(pixelSize, family, flags=FONTFLAG\_DEFAULT, faceName=””, encoding=FONTENCODING\_DEFAULT)*



Parameters
* **pixelSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) –
* **flags** (*int*) –
* **faceName** (*string*) –
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –



Return type
 [wx.Font](#wx-font)






---

  



**New** *(nativeInfo)*



Parameters
**nativeInfo** ([*wx.NativeFontInfo*](wx.NativeFontInfo.html#wx.NativeFontInfo "wx.NativeFontInfo")) – 



Return type
 [wx.Font](#wx-font)






---

  



**New** *(nativeInfoString)*



Parameters
**nativeInfoString** (*string*) – 



Return type
 [wx.Font](#wx-font)






---

  





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def OSXGetCGFont(self) -> None:
        """ 

`OSXGetCGFont`(*self*)[¶](#wx.Font.OSXGetCGFont "Permalink to this definition")
Returns the font’s native handle.




            Source: https://docs.wxpython.org/wx.Font.html
        """

    def Scale(self, x: float) -> 'Font':
        """ 

`Scale`(*self*, *x*)[¶](#wx.Font.Scale "Permalink to this definition")
Changes the size of this font.


The font size is multiplied by the given factor (which may be less than 1 to create a smaller version of the font).



Parameters
**x** (*float*) – 



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`Scaled`](#wx.Font.Scaled "wx.Font.Scaled") , [`MakeLarger`](#wx.Font.MakeLarger "wx.Font.MakeLarger") , [`MakeSmaller`](#wx.Font.MakeSmaller "wx.Font.MakeSmaller")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def Scaled(self, x: float) -> 'Font':
        """ 

`Scaled`(*self*, *x*)[¶](#wx.Font.Scaled "Permalink to this definition")
Returns a scaled version of this font.


The font size is multiplied by the given factor (which may be less than 1 to create a smaller version of the font).



Parameters
**x** (*float*) – 



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`Scale`](#wx.Font.Scale "wx.Font.Scale") , [`Larger`](#wx.Font.Larger "wx.Font.Larger") , [`Smaller`](#wx.Font.Smaller "wx.Font.Smaller")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    @staticmethod
    def SetDefaultEncoding(encoding: int) -> None:
        """ 

*static* `SetDefaultEncoding`(*encoding*)[¶](#wx.Font.SetDefaultEncoding "Permalink to this definition")
Sets the default font encoding.



Parameters
**encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – 





See also


[Font Encodings](font_encodings.html#font-encodings), [`GetDefaultEncoding`](#wx.Font.GetDefaultEncoding "wx.Font.GetDefaultEncoding")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetEncoding(self, encoding: int) -> None:
        """ 

`SetEncoding`(*self*, *encoding*)[¶](#wx.Font.SetEncoding "Permalink to this definition")
Sets the encoding for this font.


Note that under wxGTK this function has no effect (because the underlying Pango library always uses `FONTENCODING_UTF8` ).



Parameters
**encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – 





See also


[`GetEncoding`](#wx.Font.GetEncoding "wx.Font.GetEncoding")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetFaceName(self, faceName: str) -> bool:
        """ 

`SetFaceName`(*self*, *faceName*)[¶](#wx.Font.SetFaceName "Permalink to this definition")
Sets the facename for the font.



Parameters
**faceName** (*string*) – A valid facename, which should be on the end-user’s system.



Return type
*bool*



Returns
`True` if the given face name exists; if the face name doesn’t exist in the user’s system then the font is invalidated (so that [`IsOk`](#wx.Font.IsOk "wx.Font.IsOk") will return `False`) and `False` is returned.





Note


To avoid portability problems, don’t rely on a specific face, but specify the font family instead (see  [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily) and [`SetFamily`](#wx.Font.SetFamily "wx.Font.SetFamily") ).




See also


[`GetFaceName`](#wx.Font.GetFaceName "wx.Font.GetFaceName") , [`SetFamily`](#wx.Font.SetFamily "wx.Font.SetFamily")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetFamily(self, family: int) -> None:
        """ 

`SetFamily`(*self*, *family*)[¶](#wx.Font.SetFamily "Permalink to this definition")
Sets the font family.


As described in  [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily) docs the given *family* value acts as a rough, basic indication of the main font properties (look, spacing).


Note that changing the font family results in changing the font face name.



Parameters
**family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) – One of the  [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily) values.





See also


[`GetFamily`](#wx.Font.GetFamily "wx.Font.GetFamily") , [`SetFaceName`](#wx.Font.SetFaceName "wx.Font.SetFaceName")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetFractionalPointSize(self, pointSize: float) -> None:
        """ 

`SetFractionalPointSize`(*self*, *pointSize*)[¶](#wx.Font.SetFractionalPointSize "Permalink to this definition")
Sets the font size in points.


The *point size* is defined as 1/72 of the Anglo-Saxon inch (25.4 mm): it is approximately 0.0139 inch or 352.8 um.



Parameters
**pointSize** (*float*) – Size in points. This can also be a fractional point size like 11.5.





New in version 4.1/wxWidgets-3.1.2.




See also


[`GetFractionalPointSize`](#wx.Font.GetFractionalPointSize "wx.Font.GetFractionalPointSize") , [`SetPointSize`](#wx.Font.SetPointSize "wx.Font.SetPointSize")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetNativeFontInfo(self, *args, **kw) -> bool:
        """ 

`SetNativeFontInfo`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Font.SetNativeFontInfo "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetNativeFontInfo** *(self, info)*


Creates the font corresponding to the given native font description string which must have been previously returned by [`GetNativeFontInfoDesc`](#wx.Font.GetNativeFontInfoDesc "wx.Font.GetNativeFontInfoDesc") .


If the string is invalid, font is unchanged. This function is typically used for de-serializing a  [wx.Font](#wx-font) object previously saved in a string-form.



Parameters
**info** (*string*) – 



Return type
*bool*



Returns
`True` if the creation was successful.





See also


[`SetNativeFontInfoUserDesc`](#wx.Font.SetNativeFontInfoUserDesc "wx.Font.SetNativeFontInfoUserDesc")





---

  



**SetNativeFontInfo** *(self, info)*


Sets the encoding for this font.


Note that under wxGTK this function has no effect (because the underlying Pango library always uses `FONTENCODING_UTF8` ).



Parameters
**info** ([*wx.NativeFontInfo*](wx.NativeFontInfo.html#wx.NativeFontInfo "wx.NativeFontInfo")) – 





See also


[`GetEncoding`](#wx.Font.GetEncoding "wx.Font.GetEncoding")





---

  





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetNativeFontInfoUserDesc(self, info: str) -> bool:
        """ 

`SetNativeFontInfoUserDesc`(*self*, *info*)[¶](#wx.Font.SetNativeFontInfoUserDesc "Permalink to this definition")
Creates the font corresponding to the given native font description string and returns `True` if the creation was successful.


Unlike [`SetNativeFontInfo`](#wx.Font.SetNativeFontInfo "wx.Font.SetNativeFontInfo") , this function accepts strings which are user-friendly. Examples of accepted string formats are:








| platform | generic syntax | example |
| --- | --- | --- |
| wxGTK2 | `[underlined] [strikethrough] [FACE-NAME] [bold] [oblique|italic] [POINTSIZE]` | Monospace bold 10 |
| wxMSW | `[light|bold] [italic] [FACE-NAME] [POINTSIZE] [ENCODING]` | Tahoma 10 `WINDOWS-1252` |



  


For more detailed information about the allowed syntaxes you can look at the documentation of the native API used for font-rendering (e.g. `pango_font_description_from_string` under GTK, although notice that it doesn’t support the “underlined” and “strikethrough” attributes and so those are handled by wxWidgets itself).


Note that unlike [`SetNativeFontInfo`](#wx.Font.SetNativeFontInfo "wx.Font.SetNativeFontInfo") , this function doesn’t always restore all attributes of the  [wx.Font](#wx-font) object under all platforms; e.g. on wxMSW the font family is not restored (because GetNativeFontInfoUserDesc doesn’t return it on wxMSW). If you want to serialize/deserialize a font in string form, you should use [`GetNativeFontInfoDesc`](#wx.Font.GetNativeFontInfoDesc "wx.Font.GetNativeFontInfoDesc") and [`SetNativeFontInfo`](#wx.Font.SetNativeFontInfo "wx.Font.SetNativeFontInfo") instead.



Parameters
**info** (*string*) – 



Return type
*bool*





See also


[`SetNativeFontInfo`](#wx.Font.SetNativeFontInfo "wx.Font.SetNativeFontInfo")




Todo


add an example for Mac





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetNumericWeight(self, weight: int) -> None:
        """ 

`SetNumericWeight`(*self*, *weight*)[¶](#wx.Font.SetNumericWeight "Permalink to this definition")
Sets the font weight using an integer value.


See  [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight) for a list of valid weight identifiers and their corresponding integer value.



Parameters
**weight** (*int*) – An integer value int the range `1-1000`.





See also


[`GetNumericWeight`](#wx.Font.GetNumericWeight "wx.Font.GetNumericWeight")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetPixelSize(self, pixelSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetPixelSize`(*self*, *pixelSize*)[¶](#wx.Font.SetPixelSize "Permalink to this definition")
Sets the pixel size.


The height parameter of *pixelSize* must be positive while the width parameter may also be zero (to indicate that you’re not interested in the width of the characters: a suitable width will be chosen for best rendering).


This feature (specifying the font pixel size) is directly supported only under wxMSW and wxGTK currently; under other platforms a font with the closest size to the given one is found using binary search (this maybe slower).



Parameters
**pixelSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`GetPixelSize`](#wx.Font.GetPixelSize "wx.Font.GetPixelSize")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetPointSize(self, pointSize: int) -> None:
        """ 

`SetPointSize`(*self*, *pointSize*)[¶](#wx.Font.SetPointSize "Permalink to this definition")
Sets the font size in points to an integer value.


This is a legacy version of the function only supporting integer point sizes. It can still be used, but to avoid unnecessarily restricting the font size in points to integer values, consider using the new (added in wxWidgets 3.1.2) [`SetFractionalPointSize`](#wx.Font.SetFractionalPointSize "wx.Font.SetFractionalPointSize") function instead.



Parameters
**pointSize** (*int*) – 






            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetStrikethrough(self, strikethrough: bool) -> None:
        """ 

`SetStrikethrough`(*self*, *strikethrough*)[¶](#wx.Font.SetStrikethrough "Permalink to this definition")
Sets strike-through attribute of the font.


Currently stricken-through fonts are only supported in wxMSW, wxGTK, and wxOSX.



Parameters
**strikethrough** (*bool*) – `True` to add strike-through style, `False` to remove it.





New in version 2.9.4.




See also


[`GetStrikethrough`](#wx.Font.GetStrikethrough "wx.Font.GetStrikethrough")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetStyle(self, style: int) -> None:
        """ 

`SetStyle`(*self*, *style*)[¶](#wx.Font.SetStyle "Permalink to this definition")
Sets the font style.



Parameters
**style** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) – One of the  [wx.FontStyle](wx.FontStyle.enumeration.html#wx-fontstyle) enumeration values.





See also


[`GetStyle`](#wx.Font.GetStyle "wx.Font.GetStyle")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetSymbolicSize(self, size: FontSymbolicSize) -> None:
        """ 

`SetSymbolicSize`(*self*, *size*)[¶](#wx.Font.SetSymbolicSize "Permalink to this definition")
Sets the font size using a predefined symbolic size name.


This function allows changing font size to be (very) large or small compared to the standard font size.



Parameters
**size** ([*FontSymbolicSize*](wx.FontSymbolicSize.enumeration.html "FontSymbolicSize")) – 





New in version 2.9.2.




See also


[`SetSymbolicSizeRelativeTo`](#wx.Font.SetSymbolicSizeRelativeTo "wx.Font.SetSymbolicSizeRelativeTo") .





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetSymbolicSizeRelativeTo(self, size, base) -> None:
        """ 

`SetSymbolicSizeRelativeTo`(*self*, *size*, *base*)[¶](#wx.Font.SetSymbolicSizeRelativeTo "Permalink to this definition")
Sets the font size compared to the base font size.


This is the same as [`SetSymbolicSize`](#wx.Font.SetSymbolicSize "wx.Font.SetSymbolicSize") except that it uses the given font size as the normal font size instead of the standard font size.



Parameters
* **size** ([*FontSymbolicSize*](wx.FontSymbolicSize.enumeration.html "FontSymbolicSize")) –
* **base** (*int*) –





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetUnderlined(self, underlined: bool) -> None:
        """ 

`SetUnderlined`(*self*, *underlined*)[¶](#wx.Font.SetUnderlined "Permalink to this definition")
Sets underlining.



Parameters
**underlined** (*bool*) – `True` to underline, `False` otherwise.





See also


[`GetUnderlined`](#wx.Font.GetUnderlined "wx.Font.GetUnderlined")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def SetWeight(self, weight: int) -> None:
        """ 

`SetWeight`(*self*, *weight*)[¶](#wx.Font.SetWeight "Permalink to this definition")
Sets the font weight.



Parameters
**weight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) – One of the  [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight) values.





See also


[`GetWeight`](#wx.Font.GetWeight "wx.Font.GetWeight")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def Smaller(self) -> 'Font':
        """ 

`Smaller`(*self*)[¶](#wx.Font.Smaller "Permalink to this definition")
Returns a smaller version of this font.


The font size is divided by `1.2` , the factor of `1.2` being inspired by the `W3C` CSS specification.



Return type
 [wx.Font](#wx-font)





New in version 2.9.1.




See also


[`MakeSmaller`](#wx.Font.MakeSmaller "wx.Font.MakeSmaller") , [`Larger`](#wx.Font.Larger "wx.Font.Larger") , [`Scaled`](#wx.Font.Scaled "wx.Font.Scaled")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def Strikethrough(self) -> 'Font':
        """ 

`Strikethrough`(*self*)[¶](#wx.Font.Strikethrough "Permalink to this definition")
Returns stricken-through version of this font.


Currently stricken-through fonts are only supported in wxMSW, wxGTK, and wxOSX.



Return type
 [wx.Font](#wx-font)





New in version 2.9.4.




See also


[`MakeStrikethrough`](#wx.Font.MakeStrikethrough "wx.Font.MakeStrikethrough")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def Underlined(self) -> 'Font':
        """ 

`Underlined`(*self*)[¶](#wx.Font.Underlined "Permalink to this definition")
Returns underlined version of this font.



Return type
 [wx.Font](#wx-font)





New in version 2.9.2.




See also


[`MakeUnderlined`](#wx.Font.MakeUnderlined "wx.Font.MakeUnderlined")





            Source: https://docs.wxpython.org/wx.Font.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Font.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Font.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Font.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Font.html
        """

    def _copyFrom(self, other) -> None:
        """ 

`_copyFrom`(*self*, *other*)[¶](#wx.Font._copyFrom "Permalink to this definition")
For internal use only.




            Source: https://docs.wxpython.org/wx.Font.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.Font.__ne__ "Permalink to this definition")
Inequality operator.


See reference-counted object comparison for more info.



Parameters
**font** ([*wx.Font*](#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.Font.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.Font.__eq__ "Permalink to this definition")
Equality operator.


See reference-counted object comparison for more info.



Parameters
**font** ([*wx.Font*](#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.Font.html
        """

    Encoding: int  # `Encoding`[¶](#wx.Font.Encoding "Permalink to this definition")See [`GetEncoding`](#wx.Font.GetEncoding "wx.Font.GetEncoding") and [`SetEncoding`](#wx.Font.SetEncoding "wx.Font.SetEncoding")
    FaceName: str  # `FaceName`[¶](#wx.Font.FaceName "Permalink to this definition")See [`GetFaceName`](#wx.Font.GetFaceName "wx.Font.GetFaceName") and [`SetFaceName`](#wx.Font.SetFaceName "wx.Font.SetFaceName")
    Family: int  # `Family`[¶](#wx.Font.Family "Permalink to this definition")See [`GetFamily`](#wx.Font.GetFamily "wx.Font.GetFamily") and [`SetFamily`](#wx.Font.SetFamily "wx.Font.SetFamily")
    NativeFontInfoDesc: str  # `NativeFontInfoDesc`[¶](#wx.Font.NativeFontInfoDesc "Permalink to this definition")See [`GetNativeFontInfoDesc`](#wx.Font.GetNativeFontInfoDesc "wx.Font.GetNativeFontInfoDesc") and [`SetNativeFontInfo`](#wx.Font.SetNativeFontInfo "wx.Font.SetNativeFontInfo")
    NativeFontInfoUserDesc: str  # `NativeFontInfoUserDesc`[¶](#wx.Font.NativeFontInfoUserDesc "Permalink to this definition")See [`GetNativeFontInfoUserDesc`](#wx.Font.GetNativeFontInfoUserDesc "wx.Font.GetNativeFontInfoUserDesc") and [`SetNativeFontInfoUserDesc`](#wx.Font.SetNativeFontInfoUserDesc "wx.Font.SetNativeFontInfoUserDesc")
    PixelSize: 'Size'  # `PixelSize`[¶](#wx.Font.PixelSize "Permalink to this definition")See [`GetPixelSize`](#wx.Font.GetPixelSize "wx.Font.GetPixelSize") and [`SetPixelSize`](#wx.Font.SetPixelSize "wx.Font.SetPixelSize")
    PointSize: int  # `PointSize`[¶](#wx.Font.PointSize "Permalink to this definition")See [`GetPointSize`](#wx.Font.GetPointSize "wx.Font.GetPointSize") and [`SetPointSize`](#wx.Font.SetPointSize "wx.Font.SetPointSize")
    Style: int  # `Style`[¶](#wx.Font.Style "Permalink to this definition")See [`GetStyle`](#wx.Font.GetStyle "wx.Font.GetStyle") and [`SetStyle`](#wx.Font.SetStyle "wx.Font.SetStyle")
    Weight: int  # `Weight`[¶](#wx.Font.Weight "Permalink to this definition")See [`GetWeight`](#wx.Font.GetWeight "wx.Font.GetWeight") and [`SetWeight`](#wx.Font.SetWeight "wx.Font.SetWeight")



class FontData(Object):
    """ **Possible constructors**:



```
FontData()

```


This class holds a variety of information related to font dialogs.


  


        Source: https://docs.wxpython.org/wx.FontData.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FontData.__init__ "Permalink to this definition")
Constructor.


Initializes *fontColour* to black, *showHelp* to `False`, *allowSymbols* to `True`, *enableEffects* to `True`, *minSize* to 0 and *maxSize* to 0.




            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def EnableEffects(self, enable: bool) -> None:
        """ 

`EnableEffects`(*self*, *enable*)[¶](#wx.FontData.EnableEffects "Permalink to this definition")
Enables or disables “effects” under Windows or generic only.


This refers to the controls for manipulating colour, strikeout and underline properties.


The default value is `True`.



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def GetAllowSymbols(self) -> bool:
        """ 

`GetAllowSymbols`(*self*)[¶](#wx.FontData.GetAllowSymbols "Permalink to this definition")
Under Windows, returns a flag determining whether symbol fonts can be selected.


Has no effect on other platforms.


The default value is `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def GetChosenFont(self) -> 'Font':
        """ 

`GetChosenFont`(*self*)[¶](#wx.FontData.GetChosenFont "Permalink to this definition")
Gets the font chosen by the user if the user pressed `wx.OK` ( [`wx.FontDialog.ShowModal`](wx.FontDialog.html#wx.FontDialog.ShowModal "wx.FontDialog.ShowModal") returned `wx.ID_OK`).



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.FontData.GetColour "Permalink to this definition")
Gets the colour associated with the font dialog.


The default value is black.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def GetEnableEffects(self) -> bool:
        """ 

`GetEnableEffects`(*self*)[¶](#wx.FontData.GetEnableEffects "Permalink to this definition")
Determines whether “effects” are enabled under Windows.


This refers to the controls for manipulating colour, strikeout and underline properties.


The default value is `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def GetInitialFont(self) -> 'Font':
        """ 

`GetInitialFont`(*self*)[¶](#wx.FontData.GetInitialFont "Permalink to this definition")
Gets the font that will be initially used by the font dialog.


This should have previously been set by the application.



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def GetRestrictSelection(self) -> int:
        """ 

`GetRestrictSelection`(*self*)[¶](#wx.FontData.GetRestrictSelection "Permalink to this definition")
Returns the state of the flags restricting the selection.


Note that currently these flags are only effectively used in wxMSW.


The default value is `FONTRESTRICT_NONE` .



Return type
*int*



Returns
* `FONTRESTRICT_NONE` If no restriction applies, or a combination of the following flags:
* `FONTRESTRICT_SCALABLE` To show only scalable fonts - no raster fonts.
* `FONTRESTRICT_FIXEDPITCH` To show only monospaced fonts.








New in version 4.1/wxWidgets-3.1.4.





            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def GetShowHelp(self) -> bool:
        """ 

`GetShowHelp`(*self*)[¶](#wx.FontData.GetShowHelp "Permalink to this definition")
Returns `True` if the Help button will be shown (Windows only).


The default value is `False`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def RestrictSelection(self, flags: int) -> None:
        """ 

`RestrictSelection`(*self*, *flags*)[¶](#wx.FontData.RestrictSelection "Permalink to this definition")
Restricts the selection to a subset of the available fonts.


Note that currently these flags are only effectively used in wxMSW and are ignored in the other ports.


Possible values are:


* `FONTRESTRICT_NONE` No restriction, show all fonts in the dialog.
* `FONTRESTRICT_SCALABLE` To show only scalable fonts - no raster fonts.
* `FONTRESTRICT_FIXEDPITCH` To show only monospaced fonts.


The default value is `FONTRESTRICT_NONE` .



Parameters
**flags** (*int*) – 





New in version 4.1/wxWidgets-3.1.4.





            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def SetAllowSymbols(self, allowSymbols: bool) -> None:
        """ 

`SetAllowSymbols`(*self*, *allowSymbols*)[¶](#wx.FontData.SetAllowSymbols "Permalink to this definition")
Under Windows, determines whether symbol fonts can be selected.


Has no effect on other platforms.


The default value is `True`.



Parameters
**allowSymbols** (*bool*) – 






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def SetChosenFont(self, font: 'Font') -> None:
        """ 

`SetChosenFont`(*self*, *font*)[¶](#wx.FontData.SetChosenFont "Permalink to this definition")
Sets the font that will be returned to the user (for internal use only).



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def SetColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetColour`(*self*, *colour*)[¶](#wx.FontData.SetColour "Permalink to this definition")
Sets the colour that will be used for the font foreground colour.


The default colour is black.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def SetInitialFont(self, font: 'Font') -> None:
        """ 

`SetInitialFont`(*self*, *font*)[¶](#wx.FontData.SetInitialFont "Permalink to this definition")
Sets the font that will be initially used by the font dialog.



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def SetRange(self, min, max) -> None:
        """ 

`SetRange`(*self*, *min*, *max*)[¶](#wx.FontData.SetRange "Permalink to this definition")
Sets the valid range for the font point size (Windows only).


The default is 0, 0 (unrestricted range).



Parameters
* **min** (*int*) –
* **max** (*int*) –






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    def SetShowHelp(self, showHelp: bool) -> None:
        """ 

`SetShowHelp`(*self*, *showHelp*)[¶](#wx.FontData.SetShowHelp "Permalink to this definition")
Determines whether the Help button will be displayed in the font dialog (Windows only).


The default value is `False`.



Parameters
**showHelp** (*bool*) – 






            Source: https://docs.wxpython.org/wx.FontData.html
        """

    AllowSymbols: bool  # `AllowSymbols`[¶](#wx.FontData.AllowSymbols "Permalink to this definition")See [`GetAllowSymbols`](#wx.FontData.GetAllowSymbols "wx.FontData.GetAllowSymbols") and [`SetAllowSymbols`](#wx.FontData.SetAllowSymbols "wx.FontData.SetAllowSymbols")
    ChosenFont: 'Font'  # `ChosenFont`[¶](#wx.FontData.ChosenFont "Permalink to this definition")See [`GetChosenFont`](#wx.FontData.GetChosenFont "wx.FontData.GetChosenFont") and [`SetChosenFont`](#wx.FontData.SetChosenFont "wx.FontData.SetChosenFont")
    Colour: '_Colour'  # `Colour`[¶](#wx.FontData.Colour "Permalink to this definition")See [`GetColour`](#wx.FontData.GetColour "wx.FontData.GetColour") and [`SetColour`](#wx.FontData.SetColour "wx.FontData.SetColour")
    InitialFont: 'Font'  # `InitialFont`[¶](#wx.FontData.InitialFont "Permalink to this definition")See [`GetInitialFont`](#wx.FontData.GetInitialFont "wx.FontData.GetInitialFont") and [`SetInitialFont`](#wx.FontData.SetInitialFont "wx.FontData.SetInitialFont")
    ShowHelp: bool  # `ShowHelp`[¶](#wx.FontData.ShowHelp "Permalink to this definition")See [`GetShowHelp`](#wx.FontData.GetShowHelp "wx.FontData.GetShowHelp") and [`SetShowHelp`](#wx.FontData.SetShowHelp "wx.FontData.SetShowHelp")



_FontData: TypeAlias = FontData

class FontDialog(Dialog):
    """ **Possible constructors**:



```
FontDialog()

FontDialog(parent)

FontDialog(parent, data)

```


This class represents the font chooser dialog.


  


        Source: https://docs.wxpython.org/wx.FontDialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FontDialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


[`Create`](#wx.FontDialog.Create "wx.FontDialog.Create") must be called before the dialog can be shown.




---

  



**\_\_init\_\_** *(self, parent)*


Constructor with parent window.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






---

  



**\_\_init\_\_** *(self, parent, data)*


Constructor.


Pass a parent window, and the [font data](wx.FontData.html#wx-fontdata) object to be used to initialize the dialog controls.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.FontData*](wx.FontData.html#wx.FontData "wx.FontData")) –






---

  





            Source: https://docs.wxpython.org/wx.FontDialog.html
        """

    def Create(self, *args, **kw) -> None:
        """ 

`Create`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FontDialog.Create "Permalink to this definition")
Creates the dialog if the  [wx.FontDialog](#wx-fontdialog) object had been initialized using the default constructor.



Returns
`True` on success and `False` if an error occurred.




[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Create** *(self, parent)*



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*






---

  



**Create** *(self, parent, data)*



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.FontData*](wx.FontData.html#wx.FontData "wx.FontData")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.FontDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.FontDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.FontDialog.html
        """

    def GetFontData(self) -> 'FontData':
        """ 

`GetFontData`(*self*)[¶](#wx.FontDialog.GetFontData "Permalink to this definition")
Returns the [font data](wx.FontData.html#wx-fontdata) associated with the font dialog.



Return type
 [wx.FontData](wx.FontData.html#wx-fontdata)






            Source: https://docs.wxpython.org/wx.FontDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.FontDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning `ID_OK` if the user pressed Ok, and `ID_CANCEL` otherwise.


If the user cancels the dialog (ShowModal returns `ID_CANCEL` ), no font will be created. If the user presses `wx.OK`, a new  [wx.Font](wx.Font.html#wx-font) will be created and stored in the font dialog’s  [wx.FontData](wx.FontData.html#wx-fontdata) structure.



Return type
*int*





See also


[`GetFontData`](#wx.FontDialog.GetFontData "wx.FontDialog.GetFontData")





            Source: https://docs.wxpython.org/wx.FontDialog.html
        """

    FontData: '_FontData'  # `FontData`[¶](#wx.FontDialog.FontData "Permalink to this definition")See [`GetFontData`](#wx.FontDialog.GetFontData "wx.FontDialog.GetFontData")



class FontEnumerator:
    """ **Possible constructors**:



```
FontEnumerator()

```


FontEnumerator enumerates either all available fonts on the system
or only the ones with given attributes - either only fixed-width
(suited for use in programs such as terminal emulators and the like)
or the fonts available in the given encoding).


  


        Source: https://docs.wxpython.org/wx.FontEnumerator.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FontEnumerator.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """

    def EnumerateEncodings(self, font: str="") -> bool:
        """ 

`EnumerateEncodings`(*self*, *font=""*)[¶](#wx.FontEnumerator.EnumerateEncodings "Permalink to this definition")
Call [`OnFontEncoding`](#wx.FontEnumerator.OnFontEncoding "wx.FontEnumerator.OnFontEncoding") for each encoding supported by the given font - or for each encoding supported by at least some font if *font* is not specified.



Parameters
**font** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """

    def EnumerateFacenames(self, encoding=FONTENCODING_SYSTEM, fixedWidthOnly=False) -> bool:
        """ 

`EnumerateFacenames`(*self*, *encoding=FONTENCODING\_SYSTEM*, *fixedWidthOnly=False*)[¶](#wx.FontEnumerator.EnumerateFacenames "Permalink to this definition")
Call [`OnFacename`](#wx.FontEnumerator.OnFacename "wx.FontEnumerator.OnFacename") for each font which supports given encoding (only if it is not `FONTENCODING_SYSTEM` ) and is of fixed width (if *fixedWidthOnly* is `True`).


Calling this function with default arguments will result in enumerating all fonts available on the system.



Parameters
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –
* **fixedWidthOnly** (*bool*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """

    @staticmethod
    def GetEncodings(facename: str="") -> list[str]:
        """ 

*static* `GetEncodings`(*facename=""*)[¶](#wx.FontEnumerator.GetEncodings "Permalink to this definition")
Return array of strings containing all encodings found by [`EnumerateEncodings`](#wx.FontEnumerator.EnumerateEncodings "wx.FontEnumerator.EnumerateEncodings") .



Parameters
**facename** (*string*) – 



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """

    @staticmethod
    def GetFacenames(encoding=FONTENCODING_SYSTEM, fixedWidthOnly=False) -> list[str]:
        """ 

*static* `GetFacenames`(*encoding=FONTENCODING\_SYSTEM*, *fixedWidthOnly=False*)[¶](#wx.FontEnumerator.GetFacenames "Permalink to this definition")
Return array of strings containing all facenames found by [`EnumerateFacenames`](#wx.FontEnumerator.EnumerateFacenames "wx.FontEnumerator.EnumerateFacenames") .



Parameters
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –
* **fixedWidthOnly** (*bool*) –



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """

    @staticmethod
    def InvalidateCache() -> None:
        """ 

*static* `InvalidateCache`()[¶](#wx.FontEnumerator.InvalidateCache "Permalink to this definition")
Invalidate cache used by some of the methods of this class internally.


This method should be called if the list of the fonts available on the system changes, for whatever reason. In particular, it is called automatically by [`wx.Font.AddPrivateFont`](wx.Font.html#wx.Font.AddPrivateFont "wx.Font.AddPrivateFont") .



New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """

    @staticmethod
    def IsValidFacename(facename: str) -> bool:
        """ 

*static* `IsValidFacename`(*facename*)[¶](#wx.FontEnumerator.IsValidFacename "Permalink to this definition")
Returns `True` if the given string is valid face name, i.e.


it’s the face name of an installed font and it can safely be used with [`wx.Font.SetFaceName`](wx.Font.html#wx.Font.SetFaceName "wx.Font.SetFaceName") .



Parameters
**facename** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """

    def OnFacename(self, font: str) -> bool:
        """ 

`OnFacename`(*self*, *font*)[¶](#wx.FontEnumerator.OnFacename "Permalink to this definition")
Called by [`EnumerateFacenames`](#wx.FontEnumerator.EnumerateFacenames "wx.FontEnumerator.EnumerateFacenames") for each match.


Return `True` to continue enumeration or `False` to stop it.



Parameters
**font** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """

    def OnFontEncoding(self, font, encoding) -> bool:
        """ 

`OnFontEncoding`(*self*, *font*, *encoding*)[¶](#wx.FontEnumerator.OnFontEncoding "Permalink to this definition")
Called by [`EnumerateEncodings`](#wx.FontEnumerator.EnumerateEncodings "wx.FontEnumerator.EnumerateEncodings") for each match.


Return `True` to continue enumeration or `False` to stop it.



Parameters
* **font** (*string*) –
* **encoding** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontEnumerator.html
        """



class FontInfo:
    """ **Possible constructors**:



```
FontInfo()

FontInfo(pointSize)

FontInfo(pixelSize)

```


This class is a helper used for Font creation using named parameter
idiom: it allows specifying various Font attributes using the
chained calls to its clearly named methods instead of passing them in
the fixed order to Font constructors.


  


        Source: https://docs.wxpython.org/wx.FontInfo.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FontInfo.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor uses the default font size for the current platform.




---

  



**\_\_init\_\_** *(self, pointSize)*


Constructor setting the font size in points to use.


Note that until wxWidgets 3.1.2 fractional point sizes were not supported, and the type of *pointSize* was `int` .



Parameters
**pointSize** (*float*) – 





See also


[`wx.Font.SetPointSize`](wx.Font.html#wx.Font.SetPointSize "wx.Font.SetPointSize")





---

  



**\_\_init\_\_** *(self, pixelSize)*


Constructor setting the font size in pixels to use.



Parameters
**pixelSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`wx.Font.SetPixelSize`](wx.Font.html#wx.Font.SetPixelSize "wx.Font.SetPixelSize")





---

  





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def AllFlags(self, flags: int) -> 'FontInfo':
        """ 

`AllFlags`(*self*, *flags*)[¶](#wx.FontInfo.AllFlags "Permalink to this definition")
Set all the font attributes at once.


See  [wx.FontFlag](wx.FontFlag.enumeration.html#wx-fontflag) for the various flags that can be used.


Note that calling this method affects the font weight stored in this object: it is set to `FONTWEIGHT_LIGHT` or `FONTWEIGHT_BOLD` if the corresponding flag is present in *flags*, or `FONTWEIGHT_NORMAL` otherwise.



Parameters
**flags** (*int*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)






            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def AntiAliased(self, antiAliased: bool=True) -> 'FontInfo':
        """ 

`AntiAliased`(*self*, *antiAliased=True*)[¶](#wx.FontInfo.AntiAliased "Permalink to this definition")
Set anti-aliasing flag.


Force the use of anti-aliasing on or off.


Currently this is not implemented, i.e. using this method doesn’t do anything.



Parameters
**antiAliased** (*bool*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)






            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Bold(self, bold: bool=True) -> 'FontInfo':
        """ 

`Bold`(*self*, *bold=True*)[¶](#wx.FontInfo.Bold "Permalink to this definition")
Use a bold version of the font.


This is a wrapper for [`Weight`](#wx.FontInfo.Weight "wx.FontInfo.Weight") calling it with `FONTWEIGHT_BOLD` argument.



Parameters
**bold** (*bool*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)





See also


 [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight), [`wx.Font.SetWeight`](wx.Font.html#wx.Font.SetWeight "wx.Font.SetWeight")





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Encoding(self, encoding: int) -> 'FontInfo':
        """ 

`Encoding`(*self*, *encoding*)[¶](#wx.FontInfo.Encoding "Permalink to this definition")
Set the font encoding to use.


This is mostly unneeded in Unicode builds of wxWidgets.



Parameters
**encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – 



Return type
 [wx.FontInfo](#wx-fontinfo)





See also


 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding), [`wx.Font.SetEncoding`](wx.Font.html#wx.Font.SetEncoding "wx.Font.SetEncoding")





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def FaceName(self, faceName: str) -> 'FontInfo':
        """ 

`FaceName`(*self*, *faceName*)[¶](#wx.FontInfo.FaceName "Permalink to this definition")
Set the font face name to use.


Face names are not portable, so prefer to use [`Family`](#wx.FontInfo.Family "wx.FontInfo.Family") in portable code.



Parameters
**faceName** (*string*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)





See also


[`wx.Font.SetFaceName`](wx.Font.html#wx.Font.SetFaceName "wx.Font.SetFaceName")





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Family(self, family: int) -> 'FontInfo':
        """ 

`Family`(*self*, *family*)[¶](#wx.FontInfo.Family "Permalink to this definition")
Set the font family.


The family is a generic portable way of referring to fonts without specifying a precise face name. This parameter must be one of the  [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily) enumeration values.


If the [`FaceName`](#wx.FontInfo.FaceName "wx.FontInfo.FaceName") is used, then it overrides the font family.



Parameters
**family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) – 



Return type
 [wx.FontInfo](#wx-fontinfo)





See also


[`wx.Font.SetFamily`](wx.Font.html#wx.Font.SetFamily "wx.Font.SetFamily")





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    @staticmethod
    def GetWeightClosestToNumericValue(numWeight: int) -> int:
        """ 

*static* `GetWeightClosestToNumericValue`(*numWeight*)[¶](#wx.FontInfo.GetWeightClosestToNumericValue "Permalink to this definition")
Get the symbolic weight closest to the given raw weight value.



Parameters
**numWeight** (*int*) – A valid raw weight value, i.e. a value in the range 1 to 1000, inclusive.



Return type
 [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight)



Returns
A valid element of FontWeight enum.





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Italic(self, italic: bool=True) -> 'FontInfo':
        """ 

`Italic`(*self*, *italic=True*)[¶](#wx.FontInfo.Italic "Permalink to this definition")
Use an italic version of the font.


This is a wrapper for [`Style`](#wx.FontInfo.Style "wx.FontInfo.Style") calling it with `FONTSTYLE_ITALIC` argument.



Parameters
**italic** (*bool*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)





See also


 [wx.FontStyle](wx.FontStyle.enumeration.html#wx-fontstyle), [`wx.Font.SetStyle`](wx.Font.html#wx.Font.SetStyle "wx.Font.SetStyle")





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Light(self, light: bool=True) -> 'FontInfo':
        """ 

`Light`(*self*, *light=True*)[¶](#wx.FontInfo.Light "Permalink to this definition")
Use a lighter version of the font.


This is a wrapper for [`Weight`](#wx.FontInfo.Weight "wx.FontInfo.Weight") calling it with `FONTWEIGHT_LIGHT` argument.



Parameters
**light** (*bool*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)





See also


 [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight), [`wx.Font.SetWeight`](wx.Font.html#wx.Font.SetWeight "wx.Font.SetWeight")





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Slant(self, slant: bool=True) -> 'FontInfo':
        """ 

`Slant`(*self*, *slant=True*)[¶](#wx.FontInfo.Slant "Permalink to this definition")
Use a slanted version of the font.


This is a wrapper for [`Style`](#wx.FontInfo.Style "wx.FontInfo.Style") calling it with `FONTSTYLE_SLANT` argument.



Parameters
**slant** (*bool*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)





See also


 [wx.FontStyle](wx.FontStyle.enumeration.html#wx-fontstyle), [`wx.Font.SetStyle`](wx.Font.html#wx.Font.SetStyle "wx.Font.SetStyle")





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Strikethrough(self, strikethrough: bool=True) -> 'FontInfo':
        """ 

`Strikethrough`(*self*, *strikethrough=True*)[¶](#wx.FontInfo.Strikethrough "Permalink to this definition")
Use a strike-through version of the font.


Currently this is only implemented in wxMSW, wxGTK, and wxOSX.



Parameters
**strikethrough** (*bool*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)






            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Style(self, style: int) -> 'FontInfo':
        """ 

`Style`(*self*, *style*)[¶](#wx.FontInfo.Style "Permalink to this definition")
Specify the style of the font using one of FontStyle constants.



Parameters
**style** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) – 



Return type
 [wx.FontInfo](#wx-fontinfo)





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Underlined(self, underlined: bool=True) -> 'FontInfo':
        """ 

`Underlined`(*self*, *underlined=True*)[¶](#wx.FontInfo.Underlined "Permalink to this definition")
Use an underlined version of the font.



Parameters
**underlined** (*bool*) – 



Return type
 [wx.FontInfo](#wx-fontinfo)






            Source: https://docs.wxpython.org/wx.FontInfo.html
        """

    def Weight(self, weight: int) -> 'FontInfo':
        """ 

`Weight`(*self*, *weight*)[¶](#wx.FontInfo.Weight "Permalink to this definition")
Specify the weight of the font.



Parameters
**weight** (*int*) – A font weight in the range from 1 to 1000, inclusive, with 1 being the thinnest and 1000 the heaviest possible font variant. `FONTWEIGHT_XXX` values from FontWeight enum can be used here.



Return type
 [wx.FontInfo](#wx-fontinfo)





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.FontInfo.html
        """



class FontList:
    """ **Possible constructors**:



```
FontList()

```


A font list is a list containing all fonts which have been created.


  


        Source: https://docs.wxpython.org/wx.FontList.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FontList.__init__ "Permalink to this definition")
Constructor.


The application should not construct its own font list: use the object pointer *wx.TheFontList* .




            Source: https://docs.wxpython.org/wx.FontList.html
        """

    def FindOrCreateFont(self, *args, **kw) -> 'Font':
        """ 

`FindOrCreateFont`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FontList.FindOrCreateFont "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FindOrCreateFont** *(self, point\_size, family, style, weight, underline=False, facename=””, encoding=FONTENCODING\_DEFAULT)*


Finds a font of the given specification, or creates one and adds it to the list.


See the [Font constructor](wx.Font.html#wx-font) for details of the arguments.



Parameters
* **point\_size** (*int*) –
* **family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) –
* **style** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) –
* **weight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) –
* **underline** (*bool*) –
* **facename** (*string*) –
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –



Return type
 [wx.Font](wx.Font.html#wx-font)






---

  



**FindOrCreateFont** *(self, fontInfo)*


Finds a font of the given specification, or creates one and adds it to the list.


See the [Font constructor](wx.Font.html#wx-font) for details of the arguments.



Parameters
**fontInfo** ([*wx.FontInfo*](wx.FontInfo.html#wx.FontInfo "wx.FontInfo")) – 



Return type
 [wx.Font](wx.Font.html#wx-font)





New in version 4.1/wxWidgets-3.1.1.





---

  





            Source: https://docs.wxpython.org/wx.FontList.html
        """



class FontMapper:
    """ **Possible constructors**:



```
FontMapper()

```


FontMapper manages user-definable correspondence between logical
font names and the fonts present on the machine.


  


        Source: https://docs.wxpython.org/wx.FontMapper.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FontMapper.__init__ "Permalink to this definition")
Default constructor.



Note


The preferred way of creating a  [wx.FontMapper](#wx-fontmapper) instance is to call [`wx.FontMapper.Get`](#wx.FontMapper.Get "wx.FontMapper.Get") .





            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    def CharsetToEncoding(self, charset, interactive=True) -> int:
        """ 

`CharsetToEncoding`(*self*, *charset*, *interactive=True*)[¶](#wx.FontMapper.CharsetToEncoding "Permalink to this definition")
Returns the encoding for the given charset (in the form of `RFC` 2046) or `FONTENCODING_SYSTEM` if couldn’t decode it.


Be careful when using this function with *interactive* set to `True` (default value) as the function then may show a dialog box to the user which may lead to unexpected reentrancies and may also take a significantly longer time than a simple function call. For these reasons, it is almost always a bad idea to call this function from the event handlers for repeatedly generated events such as `EVT_PAINT` .



Parameters
* **charset** (*string*) –
* **interactive** (*bool*) –



Return type
 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding)






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    @staticmethod
    def Get() -> 'FontMapper':
        """ 

*static* `Get`()[¶](#wx.FontMapper.Get "Permalink to this definition")
Get the current font mapper object.


If there is no current object, creates one.



Return type
 [wx.FontMapper](#wx-fontmapper)





See also


[`Set`](#wx.FontMapper.Set "wx.FontMapper.Set")





            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    @staticmethod
    def GetAllEncodingNames(encoding) -> list[str]:
        """ 

*static* `GetAllEncodingNames`(*encoding*)[¶](#wx.FontMapper.GetAllEncodingNames "Permalink to this definition")

> Returns the array of all possible names for the given encoding. If it
> isn’t empty, the first name in it is the canonical encoding name,
> i.e. the same string as returned by GetEncodingName()



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    def GetAltForEncoding(self, encoding, facename="", interactive=True) -> tuple:
        """ 

`GetAltForEncoding`(*self*, *encoding*, *facename=""*, *interactive=True*)[¶](#wx.FontMapper.GetAltForEncoding "Permalink to this definition")
Find an alternative for the given encoding (which is supposed to not be available on this system).


If successful, return `True` and fill info structure with the parameters required to create the font, otherwise return `False`.


The first form is for wxWidgets’ internal use while the second one is better suitable for general use – it returns FontEncoding which can consequently be passed to  [wx.Font](wx.Font.html#wx-font) constructor.



Parameters
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –
* **facename** (*string*) –
* **interactive** (*bool*) –



Return type
*tuple*



Returns
( *bool*, *alt\_encoding* )






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    @staticmethod
    def GetEncoding(n: int) -> int:
        """ 

*static* `GetEncoding`(*n*)[¶](#wx.FontMapper.GetEncoding "Permalink to this definition")
Returns the *n-th* supported encoding.


Together with [`GetSupportedEncodingsCount`](#wx.FontMapper.GetSupportedEncodingsCount "wx.FontMapper.GetSupportedEncodingsCount") this method may be used to get all supported encodings.



Parameters
**n** (*int*) – 



Return type
 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding)






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    @staticmethod
    def GetEncodingDescription(encoding: int) -> str:
        """ 

*static* `GetEncodingDescription`(*encoding*)[¶](#wx.FontMapper.GetEncodingDescription "Permalink to this definition")
Return user-readable string describing the given encoding.



Parameters
**encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    @staticmethod
    def GetEncodingFromName(encoding: str) -> int:
        """ 

*static* `GetEncodingFromName`(*encoding*)[¶](#wx.FontMapper.GetEncodingFromName "Permalink to this definition")
Return the encoding corresponding to the given internal name.


This function is the inverse of [`GetEncodingName`](#wx.FontMapper.GetEncodingName "wx.FontMapper.GetEncodingName") and is intentionally less general than [`CharsetToEncoding`](#wx.FontMapper.CharsetToEncoding "wx.FontMapper.CharsetToEncoding") , i.e. it doesn’t try to make any guesses nor ever asks the user. It is meant just as a way of restoring objects previously serialized using [`GetEncodingName`](#wx.FontMapper.GetEncodingName "wx.FontMapper.GetEncodingName") .



Parameters
**encoding** (*string*) – 



Return type
 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding)






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    @staticmethod
    def GetEncodingName(encoding: int) -> str:
        """ 

*static* `GetEncodingName`(*encoding*)[¶](#wx.FontMapper.GetEncodingName "Permalink to this definition")
Return internal string identifier for the encoding (see also [`wx.FontMapper.GetEncodingDescription`](#wx.FontMapper.GetEncodingDescription "wx.FontMapper.GetEncodingDescription") ).



Parameters
**encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – 



Return type
`string`





See also


[`GetEncodingFromName`](#wx.FontMapper.GetEncodingFromName "wx.FontMapper.GetEncodingFromName")





            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    @staticmethod
    def GetSupportedEncodingsCount() -> int:
        """ 

*static* `GetSupportedEncodingsCount`()[¶](#wx.FontMapper.GetSupportedEncodingsCount "Permalink to this definition")
Returns the number of the font encodings supported by this class.


Together with [`GetEncoding`](#wx.FontMapper.GetEncoding "wx.FontMapper.GetEncoding") this method may be used to get all supported encodings.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    def IsEncodingAvailable(self, encoding, facename="") -> bool:
        """ 

`IsEncodingAvailable`(*self*, *encoding*, *facename=""*)[¶](#wx.FontMapper.IsEncodingAvailable "Permalink to this definition")
Check whether given encoding is available in given face or not.


If no facename is given, find *any* font in this encoding.



Parameters
* **encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) –
* **facename** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    @staticmethod
    def Set(mapper: 'FontMapper') -> 'FontMapper':
        """ 

*static* `Set`(*mapper*)[¶](#wx.FontMapper.Set "Permalink to this definition")
Set the current font mapper object and return previous one (may be `None`).


This method is only useful if you want to plug-in an alternative font mapper into wxWidgets.



Parameters
**mapper** ([*wx.FontMapper*](#wx.FontMapper "wx.FontMapper")) – 



Return type
 [wx.FontMapper](#wx-fontmapper)





See also


[`Get`](#wx.FontMapper.Get "wx.FontMapper.Get")





            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    def SetConfigPath(self, prefix: str) -> None:
        """ 

`SetConfigPath`(*self*, *prefix*)[¶](#wx.FontMapper.SetConfigPath "Permalink to this definition")
Set the root config path to use (should be an absolute path).



Parameters
**prefix** (*string*) – 






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    def SetDialogParent(self, parent: 'Window') -> None:
        """ 

`SetDialogParent`(*self*, *parent*)[¶](#wx.FontMapper.SetDialogParent "Permalink to this definition")
The parent window for modal dialogs.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """

    def SetDialogTitle(self, title: str) -> None:
        """ 

`SetDialogTitle`(*self*, *title*)[¶](#wx.FontMapper.SetDialogTitle "Permalink to this definition")
The title for the dialogs (note that default is quite reasonable).



Parameters
**title** (*string*) – 






            Source: https://docs.wxpython.org/wx.FontMapper.html
        """



class FontMetrics:
    """ **Possible constructors**:



```
FontMetrics()

```


Simple collection of various font metrics.


  


        Source: https://docs.wxpython.org/wx.FontMetrics.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.FontMetrics.__init__ "Permalink to this definition")
Constructor initializes all fields to 0.




            Source: https://docs.wxpython.org/wx.FontMetrics.html
        """

    ascent: Any  # `ascent`[¶](#wx.FontMetrics.ascent "Permalink to this definition")A public C++ attribute of type `int`. Part of the height above the baseline.
    averageWidth: Any  # `averageWidth`[¶](#wx.FontMetrics.averageWidth "Permalink to this definition")A public C++ attribute of type `int`. Average font width, a.k.a. “x-width”.
    descent: Any  # `descent`[¶](#wx.FontMetrics.descent "Permalink to this definition")A public C++ attribute of type `int`. Part of the height below the baseline.
    externalLeading: Any  # `externalLeading`[¶](#wx.FontMetrics.externalLeading "Permalink to this definition")A public C++ attribute of type `int`. Inter-line spacing.
    height: Any  # `height`[¶](#wx.FontMetrics.height "Permalink to this definition")A public C++ attribute of type `int`. Total character height.
    internalLeading: Any  # `internalLeading`[¶](#wx.FontMetrics.internalLeading "Permalink to this definition")A public C++ attribute of type `int`. Intra-line spacing.



class FontPickerCtrl(PickerBase):
    """ **Possible constructors**:



```
FontPickerCtrl()

FontPickerCtrl(parent, id=ID_ANY, font=NullFont, pos=DefaultPosition,
               size=DefaultSize, style=FNTP_DEFAULT_STYLE, validator=DefaultValidator,
               name=FontPickerCtrlNameStr)

```


This control allows the user to select a font.


  


        Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.FontPickerCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, font=NullFont, pos=DefaultPosition, size=DefaultSize, style=FNTP\_DEFAULT\_STYLE, validator=DefaultValidator, name=FontPickerCtrlNameStr)*


Initializes the object and calls [`Create`](#wx.FontPickerCtrl.Create "wx.FontPickerCtrl.Create") with all the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def Create(self, parent, id=ID_ANY, font=NullFont, pos=DefaultPosition, size=DefaultSize, style=FNTP_DEFAULT_STYLE, validator=DefaultValidator, name=FontPickerCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *font=NullFont*, *pos=DefaultPosition*, *size=DefaultSize*, *style=FNTP\_DEFAULT\_STYLE*, *validator=DefaultValidator*, *name=FontPickerCtrlNameStr*)[¶](#wx.FontPickerCtrl.Create "Permalink to this definition")
Creates this widget with given parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window, must not be not `None`.
* **id** (*wx.WindowID*) – The identifier for the control.
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – The initial font shown in the control. If `wx.NullFont` is given, the default font is used.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Initial position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Initial size.
* **style** (*long*) – The window style, see `FNTP_` flags.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Validator which can be used for additional data checks.
* **name** (*string*) – Control name.



Return type
*bool*



Returns
`True` if the control was successfully created or `False` if creation failed.






            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.FontPickerCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def GetMaxPointSize(self) -> int:
        """ 

`GetMaxPointSize`(*self*)[¶](#wx.FontPickerCtrl.GetMaxPointSize "Permalink to this definition")
Returns the maximum point size value allowed for the user-chosen font.



Return type
*int*






            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def GetMinPointSize(self) -> int:
        """ 

`GetMinPointSize`(*self*)[¶](#wx.FontPickerCtrl.GetMinPointSize "Permalink to this definition")
Returns the minimum point size value allowed for the user-chosen font.



Return type
*int*





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def GetSelectedColour(self) -> 'Colour':
        """ 

`GetSelectedColour`(*self*)[¶](#wx.FontPickerCtrl.GetSelectedColour "Permalink to this definition")
Returns the currently selected colour.


Note that the colour of the font can only be set by the user under Windows currently, elsewhere this method simply returns the colour previously set by [`SetSelectedColour`](#wx.FontPickerCtrl.SetSelectedColour "wx.FontPickerCtrl.SetSelectedColour") or black if it hadn’t been called.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def GetSelectedFont(self) -> 'Font':
        """ 

`GetSelectedFont`(*self*)[¶](#wx.FontPickerCtrl.GetSelectedFont "Permalink to this definition")
Returns the currently selected font.


Note that this function is completely different from [`wx.Window.GetFont`](wx.Window.html#wx.Window.GetFont "wx.Window.GetFont") .



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def SetMaxPointSize(self, max: int) -> None:
        """ 

`SetMaxPointSize`(*self*, *max*)[¶](#wx.FontPickerCtrl.SetMaxPointSize "Permalink to this definition")
Sets the maximum point size value allowed for the user-chosen font.


The default value is 100. Note that big fonts can require a lot of memory and `CPU` time both for creation and for rendering; thus, specially because the user has the option to specify the fontsize through a text control (see `wx.FNTP_USE_TEXTCTRL`), it’s a good idea to put a limit to the maximum font size when huge fonts do not make much sense.



Parameters
**max** (*int*) – 






            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def SetMinPointSize(self, min: int) -> None:
        """ 

`SetMinPointSize`(*self*, *min*)[¶](#wx.FontPickerCtrl.SetMinPointSize "Permalink to this definition")
Sets the minimum point size value allowed for the user-chosen font.


The default value is 0.



Parameters
**min** (*int*) – 





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def SetSelectedColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetSelectedColour`(*self*, *colour*)[¶](#wx.FontPickerCtrl.SetSelectedColour "Permalink to this definition")
Sets the font colour.


The font colour is actually only used under Windows currently, but this function is available under all platforms for consistency.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    def SetSelectedFont(self, font: 'Font') -> None:
        """ 

`SetSelectedFont`(*self*, *font*)[¶](#wx.FontPickerCtrl.SetSelectedFont "Permalink to this definition")
Sets the currently selected font.


Note that this function is completely different from [`wx.Window.SetFont`](wx.Window.html#wx.Window.SetFont "wx.Window.SetFont") .



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.FontPickerCtrl.html
        """

    MaxPointSize: int  # `MaxPointSize`[¶](#wx.FontPickerCtrl.MaxPointSize "Permalink to this definition")See [`GetMaxPointSize`](#wx.FontPickerCtrl.GetMaxPointSize "wx.FontPickerCtrl.GetMaxPointSize") and [`SetMaxPointSize`](#wx.FontPickerCtrl.SetMaxPointSize "wx.FontPickerCtrl.SetMaxPointSize")
    MinPointSize: int  # `MinPointSize`[¶](#wx.FontPickerCtrl.MinPointSize "Permalink to this definition")See [`GetMinPointSize`](#wx.FontPickerCtrl.GetMinPointSize "wx.FontPickerCtrl.GetMinPointSize") and [`SetMinPointSize`](#wx.FontPickerCtrl.SetMinPointSize "wx.FontPickerCtrl.SetMinPointSize")
    SelectedColour: 'Colour'  # `SelectedColour`[¶](#wx.FontPickerCtrl.SelectedColour "Permalink to this definition")See [`GetSelectedColour`](#wx.FontPickerCtrl.GetSelectedColour "wx.FontPickerCtrl.GetSelectedColour") and [`SetSelectedColour`](#wx.FontPickerCtrl.SetSelectedColour "wx.FontPickerCtrl.SetSelectedColour")
    SelectedFont: 'Font'  # `SelectedFont`[¶](#wx.FontPickerCtrl.SelectedFont "Permalink to this definition")See [`GetSelectedFont`](#wx.FontPickerCtrl.GetSelectedFont "wx.FontPickerCtrl.GetSelectedFont") and [`SetSelectedFont`](#wx.FontPickerCtrl.SetSelectedFont "wx.FontPickerCtrl.SetSelectedFont")



FNTP_DEFAULT_STYLE: int  # The default style: wx.FNTP_FONTDESC_AS_LABEL | wx.FNTP_USEFONT_FOR_LABEL.

FNTP_USE_TEXTCTRL: int  # Creates a text control to the left of the picker button which is completely managed by the   wx.FontPickerCtrl  and which can be used by the user to specify a font (see SetSelectedFont). The text control is automatically synchronized with button’s value. Use functions defined in   wx.PickerBase  to modify the text control.

FNTP_FONTDESC_AS_LABEL: int  # Keeps the label of the button updated with the fontface name and the font size. E.g. choosing “Times New Roman bold, italic withsize 10” from the fontdialog, will update the label (overwriting any previous label) with the “Times New Roman, 10” text.

FNTP_USEFONT_FOR_LABEL: int  # Uses the currently selected font to draw the label of the button. ^^

EVT_FONTPICKER_CHANGED: int  # The user changed the font selected in the control either using the button or using text control (see wx.FNTP_USE_TEXTCTRL; note that in this case the event is fired only if the user’s input is valid, i.e. recognizable). ^^

class FontPickerEvent(CommandEvent):
    """ **Possible constructors**:



```
FontPickerEvent(generator, id, font)

```


This event class is used for the events generated by FontPickerCtrl.


  


        Source: https://docs.wxpython.org/wx.FontPickerEvent.html
    """
    def __init__(self, generator, id, font) -> None:
        """ 

`__init__`(*self*, *generator*, *id*, *font*)[¶](#wx.FontPickerEvent.__init__ "Permalink to this definition")
The constructor is not normally used by the user code.



Parameters
* **generator** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) –
* **id** (*int*) –
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –






            Source: https://docs.wxpython.org/wx.FontPickerEvent.html
        """

    def GetFont(self) -> 'Font':
        """ 

`GetFont`(*self*)[¶](#wx.FontPickerEvent.GetFont "Permalink to this definition")
Retrieve the font the user has just selected.



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.FontPickerEvent.html
        """

    def SetFont(self: 'Font', f) -> None:
        """ 

`SetFont`(*self*, *f*)[¶](#wx.FontPickerEvent.SetFont "Permalink to this definition")
Set the font associated with the event.



Parameters
**f** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.FontPickerEvent.html
        """

    Font: '_Font'  # `Font`[¶](#wx.FontPickerEvent.Font "Permalink to this definition")See [`GetFont`](#wx.FontPickerEvent.GetFont "wx.FontPickerEvent.GetFont") and [`SetFont`](#wx.FontPickerEvent.SetFont "wx.FontPickerEvent.SetFont")



_MenuBar: TypeAlias = MenuBar

_StatusBar: TypeAlias = StatusBar

_ToolBar: TypeAlias = ToolBar

class Frame(TopLevelWindow):
    """ **Possible constructors**:



```
Frame()

Frame(parent, id=ID_ANY, title="", pos=DefaultPosition,
      size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)

```


A frame is a window whose size and position can (usually) be changed
by the user.


  


        Source: https://docs.wxpython.org/wx.Frame.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Frame.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, title=””, pos=DefaultPosition, size=DefaultSize, style=DEFAULT\_FRAME\_STYLE, name=FrameNameStr)*


Constructor, creating the window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window parent. This may be, and often is, `None`. If it is not `None`, the frame will be minimized when its parent is minimized and restored when it is restored (although it will still be possible to minimize and restore just this frame itself).
* **id** (*wx.WindowID*) – The window identifier. It may take a value of -1 to indicate a default value.
* **title** (*string*) – The caption to be displayed on the frame’s title bar.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The window position. The value DefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The window size. The value DefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
* **style** (*long*) – The window style. See  [wx.Frame](#wx-frame) class description.
* **name** (*string*) – The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.





Note


For Motif, `MWM` (the Motif Window Manager) should be running for any window styles to work (otherwise all styles take effect).




See also


[`Create`](#wx.Frame.Create "wx.Frame.Create")





---

  





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def Centre(self, direction: int=BOTH) -> None:
        """ 

`Centre`(*self*, *direction=BOTH*)[¶](#wx.Frame.Centre "Permalink to this definition")
Centres the frame on the display.



Parameters
**direction** (*int*) – The parameter may be `wx.HORIZONTAL`, `wx.VERTICAL` or `wx.BOTH`.






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def Create(self, parent, id=ID_ANY, title="", pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *title=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DEFAULT\_FRAME\_STYLE*, *name=FrameNameStr*)[¶](#wx.Frame.Create "Permalink to this definition")
Used in two-step frame construction.


See  [wx.Frame](#wx-frame) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def CreateStatusBar(self, number=1, style=STB_DEFAULT_STYLE, id=0, name=StatusBarNameStr) -> 'StatusBar':
        """ 

`CreateStatusBar`(*self*, *number=1*, *style=STB\_DEFAULT\_STYLE*, *id=0*, *name=StatusBarNameStr*)[¶](#wx.Frame.CreateStatusBar "Permalink to this definition")
Creates a status bar at the bottom of the frame.



Parameters
* **number** (*int*) – The number of fields to create. Specify a value greater than 1 to create a multi-field status bar.
* **style** (*long*) – The status bar style. See  [wx.StatusBar](wx.StatusBar.html#wx-statusbar) for a list of valid styles.
* **id** (*wx.WindowID*) – The status bar window identifier. If -1, an identifier will be chosen by wxWidgets.
* **name** (*string*) – The status bar window name.



Return type
 [wx.StatusBar](wx.StatusBar.html#wx-statusbar)



Returns
A pointer to the status bar if it was created successfully, `None` otherwise.





Note


The width of the status bar is the whole width of the frame (adjusted automatically when resizing), and the height and text size are chosen by the host windowing system.




See also


[`SetStatusText`](#wx.Frame.SetStatusText "wx.Frame.SetStatusText") , [`OnCreateStatusBar`](#wx.Frame.OnCreateStatusBar "wx.Frame.OnCreateStatusBar") , [`GetStatusBar`](#wx.Frame.GetStatusBar "wx.Frame.GetStatusBar")





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def CreateToolBar(self, style=TB_DEFAULT_STYLE, id=ID_ANY, name=ToolBarNameStr) -> 'ToolBar':
        """ 

`CreateToolBar`(*self*, *style=TB\_DEFAULT\_STYLE*, *id=ID\_ANY*, *name=ToolBarNameStr*)[¶](#wx.Frame.CreateToolBar "Permalink to this definition")
Creates a toolbar at the top or left of the frame.



Parameters
* **style** (*long*) – The toolbar style. See  [wx.ToolBar](wx.ToolBar.html#wx-toolbar) for a list of valid styles.
* **id** (*wx.WindowID*) – The toolbar window identifier. If -1, an identifier will be chosen by wxWidgets.
* **name** (*string*) – The toolbar window name.



Return type
 [wx.ToolBar](wx.ToolBar.html#wx-toolbar)



Returns
A pointer to the toolbar if it was created successfully, `None` otherwise.





Note


By default, the toolbar is an instance of  [wx.ToolBar](wx.ToolBar.html#wx-toolbar). To use a different class, override [`OnCreateToolBar`](#wx.Frame.OnCreateToolBar "wx.Frame.OnCreateToolBar") . When a toolbar has been created with this function, or made known to the frame with [`wx.Frame.SetToolBar`](#wx.Frame.SetToolBar "wx.Frame.SetToolBar") , the frame will manage the toolbar position and adjust the return value from [`wx.Window.GetClientSize`](wx.Window.html#wx.Window.GetClientSize "wx.Window.GetClientSize") to reflect the available space for application windows. Under Pocket `PC`, you should always use this function for creating the toolbar to be managed by the frame, so that wxWidgets can use a combined menubar and toolbar. Where you manage your own toolbars, create a  [wx.ToolBar](wx.ToolBar.html#wx-toolbar) as usual.




See also


[`CreateStatusBar`](#wx.Frame.CreateStatusBar "wx.Frame.CreateStatusBar") , [`OnCreateToolBar`](#wx.Frame.OnCreateToolBar "wx.Frame.OnCreateToolBar") , [`SetToolBar`](#wx.Frame.SetToolBar "wx.Frame.SetToolBar") , [`GetToolBar`](#wx.Frame.GetToolBar "wx.Frame.GetToolBar")





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def DoGiveHelp(self, text, show) -> None:
        """ 

`DoGiveHelp`(*self*, *text*, *show*)[¶](#wx.Frame.DoGiveHelp "Permalink to this definition")
Method used to show help string of the selected menu toolbar item.


This method is called by the default `wxEVT_MENU_HIGHLIGHT` event handler and also by  [wx.ToolBar](wx.ToolBar.html#wx-toolbar) to show the optional help string associated with the selected menu or toolbar item. It can be overridden if the default behaviour of showing this string in the frame status bar is not appropriate.



Parameters
* **text** (*string*) – The help string to show, may be empty. The default implementation simply shows this string in the frame status bar (after remembering its previous text to restore it later).
* **show** (*bool*) – Whether the help should be shown or hidden. The default implementation restores the previously saved status bar text when it is `False`.





See also


[`SetStatusBarPane`](#wx.Frame.SetStatusBarPane "wx.Frame.SetStatusBarPane")





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Frame.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def GetClientAreaOrigin(self) -> 'Point':
        """ 

`GetClientAreaOrigin`(*self*)[¶](#wx.Frame.GetClientAreaOrigin "Permalink to this definition")
Returns the origin of the frame client area (in client coordinates).


It may be different from (0, 0) if the frame has a toolbar.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def GetMenuBar(self) -> 'MenuBar':
        """ 

`GetMenuBar`(*self*)[¶](#wx.Frame.GetMenuBar "Permalink to this definition")
Returns a pointer to the menubar currently associated with the frame (if any).



Return type
 [wx.MenuBar](wx.MenuBar.html#wx-menubar)





See also


[`SetMenuBar`](#wx.Frame.SetMenuBar "wx.Frame.SetMenuBar") ,  [wx.MenuBar](wx.MenuBar.html#wx-menubar),  [wx.Menu](wx.Menu.html#wx-menu)





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def GetStatusBar(self) -> 'StatusBar':
        """ 

`GetStatusBar`(*self*)[¶](#wx.Frame.GetStatusBar "Permalink to this definition")
Returns a pointer to the status bar currently associated with the frame (if any).



Return type
 [wx.StatusBar](wx.StatusBar.html#wx-statusbar)





See also


[`CreateStatusBar`](#wx.Frame.CreateStatusBar "wx.Frame.CreateStatusBar") ,  [wx.StatusBar](wx.StatusBar.html#wx-statusbar)





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def GetStatusBarPane(self) -> int:
        """ 

`GetStatusBarPane`(*self*)[¶](#wx.Frame.GetStatusBarPane "Permalink to this definition")
Returns the status bar pane used to display menu and toolbar help.



Return type
*int*





See also


[`SetStatusBarPane`](#wx.Frame.SetStatusBarPane "wx.Frame.SetStatusBarPane")





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def GetToolBar(self) -> 'ToolBar':
        """ 

`GetToolBar`(*self*)[¶](#wx.Frame.GetToolBar "Permalink to this definition")
Returns a pointer to the toolbar currently associated with the frame (if any).



Return type
 [wx.ToolBar](wx.ToolBar.html#wx-toolbar)





See also


[`CreateToolBar`](#wx.Frame.CreateToolBar "wx.Frame.CreateToolBar") ,  [wx.ToolBar](wx.ToolBar.html#wx-toolbar), [`SetToolBar`](#wx.Frame.SetToolBar "wx.Frame.SetToolBar")





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def OnCreateStatusBar(self, number, style, id, name) -> 'StatusBar':
        """ 

`OnCreateStatusBar`(*self*, *number*, *style*, *id*, *name*)[¶](#wx.Frame.OnCreateStatusBar "Permalink to this definition")
Virtual function called when a status bar is requested by [`CreateStatusBar`](#wx.Frame.CreateStatusBar "wx.Frame.CreateStatusBar") .



Parameters
* **number** (*int*) – The number of fields to create.
* **style** (*long*) – The window style. See  [wx.StatusBar](wx.StatusBar.html#wx-statusbar) for a list of valid styles.
* **id** (*wx.WindowID*) – The window identifier. If -1, an identifier will be chosen by wxWidgets.
* **name** (*string*) – The window name.



Return type
 [wx.StatusBar](wx.StatusBar.html#wx-statusbar)



Returns
A status bar object.





Note


An application can override this function to return a different kind of status bar. The default implementation returns an instance of  [wx.StatusBar](wx.StatusBar.html#wx-statusbar).




See also


[`CreateStatusBar`](#wx.Frame.CreateStatusBar "wx.Frame.CreateStatusBar") ,  [wx.StatusBar](wx.StatusBar.html#wx-statusbar).





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def OnCreateToolBar(self, style, id, name) -> 'ToolBar':
        """ 

`OnCreateToolBar`(*self*, *style*, *id*, *name*)[¶](#wx.Frame.OnCreateToolBar "Permalink to this definition")
Virtual function called when a toolbar is requested by [`CreateToolBar`](#wx.Frame.CreateToolBar "wx.Frame.CreateToolBar") .



Parameters
* **style** (*long*) – The toolbar style. See  [wx.ToolBar](wx.ToolBar.html#wx-toolbar) for a list of valid styles.
* **id** (*wx.WindowID*) – The toolbar window identifier. If -1, an identifier will be chosen by wxWidgets.
* **name** (*string*) – The toolbar window name.



Return type
 [wx.ToolBar](wx.ToolBar.html#wx-toolbar)



Returns
A toolbar object.





Note


An application can override this function to return a different kind of toolbar. The default implementation returns an instance of  [wx.ToolBar](wx.ToolBar.html#wx-toolbar).




See also


[`CreateToolBar`](#wx.Frame.CreateToolBar "wx.Frame.CreateToolBar") ,  [wx.ToolBar](wx.ToolBar.html#wx-toolbar).





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def PopStatusText(self, number: int=0) -> None:
        """ 

`PopStatusText`(*self*, *number=0*)[¶](#wx.Frame.PopStatusText "Permalink to this definition")

Parameters
**number** (*int*) – 






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def ProcessCommand(self, id: int) -> bool:
        """ 

`ProcessCommand`(*self*, *id*)[¶](#wx.Frame.ProcessCommand "Permalink to this definition")
Simulate a menu command.



Parameters
**id** (*int*) – The identifier for a menu item.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def PushStatusText(self, text, number=0) -> None:
        """ 

`PushStatusText`(*self*, *text*, *number=0*)[¶](#wx.Frame.PushStatusText "Permalink to this definition")

Parameters
* **text** (*string*) –
* **number** (*int*) –






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def SetMenuBar(self, menuBar: 'MenuBar') -> None:
        """ 

`SetMenuBar`(*self*, *menuBar*)[¶](#wx.Frame.SetMenuBar "Permalink to this definition")
Tells the frame to show the given menu bar.



Parameters
**menuBar** ([*wx.MenuBar*](wx.MenuBar.html#wx.MenuBar "wx.MenuBar")) – The menu bar to associate with the frame.





Note


If the frame is destroyed, the menu bar and its menus will be destroyed also, so do not delete the menu bar explicitly (except by resetting the frame’s menu bar to another frame or `None`). Under Windows, a size event is generated, so be sure to initialize data members properly before calling [`SetMenuBar`](#wx.Frame.SetMenuBar "wx.Frame.SetMenuBar") . Note that on some platforms, it is not possible to call this function twice for the same frame object.




See also


[`GetMenuBar`](#wx.Frame.GetMenuBar "wx.Frame.GetMenuBar") ,  [wx.MenuBar](wx.MenuBar.html#wx-menubar),  [wx.Menu](wx.Menu.html#wx-menu).





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def SetStatusBar(self, statusBar: 'StatusBar') -> None:
        """ 

`SetStatusBar`(*self*, *statusBar*)[¶](#wx.Frame.SetStatusBar "Permalink to this definition")
Associates a status bar with the frame.


If *statusBar* is `None`, then the status bar, if present, is detached from the frame, but *not* deleted.



Parameters
**statusBar** ([*wx.StatusBar*](wx.StatusBar.html#wx.StatusBar "wx.StatusBar")) – 





See also


[`CreateStatusBar`](#wx.Frame.CreateStatusBar "wx.Frame.CreateStatusBar") ,  [wx.StatusBar](wx.StatusBar.html#wx-statusbar), [`GetStatusBar`](#wx.Frame.GetStatusBar "wx.Frame.GetStatusBar")





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def SetStatusBarPane(self, n: int) -> None:
        """ 

`SetStatusBarPane`(*self*, *n*)[¶](#wx.Frame.SetStatusBarPane "Permalink to this definition")
Set the status bar pane used to display menu and toolbar help.


Using -1 disables help display.



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def SetStatusText(self, text, number=0) -> None:
        """ 

`SetStatusText`(*self*, *text*, *number=0*)[¶](#wx.Frame.SetStatusText "Permalink to this definition")
Sets the status bar text and updates the status bar display.


This is a simple wrapper for [`wx.StatusBar.SetStatusText`](wx.StatusBar.html#wx.StatusBar.SetStatusText "wx.StatusBar.SetStatusText") which doesn’t do anything if the frame has no status bar, i.e. [`GetStatusBar`](#wx.Frame.GetStatusBar "wx.Frame.GetStatusBar") returns `None`.



Parameters
* **text** (*string*) – The text for the status field.
* **number** (*int*) – The status field (starting from zero).





Note


Use an empty string to clear the status bar.




See also


[`CreateStatusBar`](#wx.Frame.CreateStatusBar "wx.Frame.CreateStatusBar") ,  [wx.StatusBar](wx.StatusBar.html#wx-statusbar)





            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def SetStatusWidths(self, widths: list[int]) -> None:
        """ 

`SetStatusWidths`(*self*, *widths*)[¶](#wx.Frame.SetStatusWidths "Permalink to this definition")
Sets the widths of the fields in the status bar.



Parameters
**widths** (*list of integers*) – Must contain an array of n integers, each of which is a status field width in pixels. A value of -1 indicates that the field is variable width; at least one field must be -1. You should delete this array after calling [`SetStatusWidths`](#wx.Frame.SetStatusWidths "wx.Frame.SetStatusWidths") .






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    def SetToolBar(self, toolBar: 'ToolBar') -> None:
        """ 

`SetToolBar`(*self*, *toolBar*)[¶](#wx.Frame.SetToolBar "Permalink to this definition")
Associates a toolbar with the frame.



Parameters
**toolBar** ([*wx.ToolBar*](wx.ToolBar.html#wx.ToolBar "wx.ToolBar")) – 






            Source: https://docs.wxpython.org/wx.Frame.html
        """

    MenuBar: '_MenuBar'  # `MenuBar`[¶](#wx.Frame.MenuBar "Permalink to this definition")See [`GetMenuBar`](#wx.Frame.GetMenuBar "wx.Frame.GetMenuBar") and [`SetMenuBar`](#wx.Frame.SetMenuBar "wx.Frame.SetMenuBar")
    StatusBar: '_StatusBar'  # `StatusBar`[¶](#wx.Frame.StatusBar "Permalink to this definition")See [`GetStatusBar`](#wx.Frame.GetStatusBar "wx.Frame.GetStatusBar") and [`SetStatusBar`](#wx.Frame.SetStatusBar "wx.Frame.SetStatusBar")
    StatusBarPane: int  # `StatusBarPane`[¶](#wx.Frame.StatusBarPane "Permalink to this definition")See [`GetStatusBarPane`](#wx.Frame.GetStatusBarPane "wx.Frame.GetStatusBarPane") and [`SetStatusBarPane`](#wx.Frame.SetStatusBarPane "wx.Frame.SetStatusBarPane")
    ToolBar: '_ToolBar'  # `ToolBar`[¶](#wx.Frame.ToolBar "Permalink to this definition")See [`GetToolBar`](#wx.Frame.GetToolBar "wx.Frame.GetToolBar") and [`SetToolBar`](#wx.Frame.SetToolBar "wx.Frame.SetToolBar")



DEFAULT_FRAME_STYLE: int  # Defined as wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.RESIZE_BORDER | wx.SYSTEM_MENU | wx.CAPTION | wx.CLOSE_BOX | wx.CLIP_CHILDREN.

ICONIZE: int  # Display the frame iconized (minimized). Windows only.

MINIMIZE: int  # Identical to wx.ICONIZE. Windows only.

MAXIMIZE: int  # Displays the frame maximized. Windows and GTK+ only.

FRAME_TOOL_WINDOW: int  # Causes a frame with a small title bar to be created; the frame does not appear in the taskbar under Windows or GTK+.

FRAME_NO_TASKBAR: int  # Creates an otherwise normal frame but it does not appear in the taskbar under Windows or GTK+ (note that it will minimize to the desktop window under Windows which may seem strange to the users and thus it might be better to use this style only without wx.MINIMIZE_BOX style). In wxGTK, the flag is respected only if the window manager supports _NET_WM_STATE_SKIP_TASKBAR hint.

FRAME_FLOAT_ON_PARENT: int  # The frame will always be on top of its parent (unlike wx.STAY_ON_TOP). A frame created with this style must have a not None parent.

FRAME_SHAPED: int  # Windows with this style are allowed to have their shape changed with the SetShape  method. ^^

EVT_ICONIZE: int  # Process a  wxEVT_ICONIZE   event. See    wx.IconizeEvent.

EVT_MENU_OPEN: int  # A menu is about to be opened. See   wx.MenuEvent.

EVT_MENU_CLOSE: int  # A menu has been just closed. See   wx.MenuEvent.

EVT_MENU_HIGHLIGHT: int  # The menu item with the specified id has been highlighted: used to show help prompts in the status bar by   wx.Frame. See   wx.MenuEvent.

EVT_MENU_HIGHLIGHT_ALL: int  # A menu item has been highlighted, i.e. the currently selected menu item has changed. See   wx.MenuEvent. ^^

FRAME_EX_CONTEXTHELP: int

FRAME_EX_METAL: int

class FSFile(Object):
    """ **Possible constructors**:



```
FSFile(stream, location, mimetype, anchor, modif)

```


This class represents a single file opened by FileSystem.


  


        Source: https://docs.wxpython.org/wx.FSFile.html
    """
    def __init__(self, stream, location, mimetype, anchor, modif) -> None:
        """ 

`__init__`(*self*, *stream*, *location*, *mimetype*, *anchor*, *modif*)[¶](#wx.FSFile.__init__ "Permalink to this definition")
Constructor.


You probably won’t use it. See the Note for details.


It is seldom used by the application programmer but you will need it if you are writing your own virtual `FS`. For example you may need something similar to *MemoryInputStream* , but because *MemoryInputStream* doesn’t free the memory when destroyed and thus passing a memory stream pointer into  [wx.FSFile](#wx-fsfile) constructor would lead to memory leaks, you can write your own class derived from  [wx.FSFile](#wx-fsfile):



```
class MyFSFile(wx.FSFile):

    def __init__(self):

        wx.FSFile.__init__(self)

```


If you are not sure of the meaning of these params, see the description of the GetXXXX() functions.



Parameters
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – The input stream that will be used to access data
* **location** (*string*) – The full location (aka filename) of the file
* **mimetype** (*string*) – MIME type of this file. It may be left empty, in which case the type will be determined from file’s extension (location must not be empty in this case).
* **anchor** (*string*) – Anchor. See [`GetAnchor`](#wx.FSFile.GetAnchor "wx.FSFile.GetAnchor") for details.
* **modif** ([*wx.DateTime*](wx.DateTime.html#wx.DateTime "wx.DateTime")) – Modification date and time for this file.






            Source: https://docs.wxpython.org/wx.FSFile.html
        """

    def DetachStream(self) -> 'InputStream':
        """ 

`DetachStream`(*self*)[¶](#wx.FSFile.DetachStream "Permalink to this definition")
Detaches the stream from the  [wx.FSFile](#wx-fsfile) object.


That is, the stream obtained with [`GetStream`](#wx.FSFile.GetStream "wx.FSFile.GetStream") will continue its existence after the  [wx.FSFile](#wx-fsfile) object is deleted.


You will have to delete the stream yourself.



Return type
 [wx.InputStream](wx.InputStream.html#wx-inputstream)






            Source: https://docs.wxpython.org/wx.FSFile.html
        """

    def GetAnchor(self) -> str:
        """ 

`GetAnchor`(*self*)[¶](#wx.FSFile.GetAnchor "Permalink to this definition")
Returns anchor (if present).


The term of **anchor** can be easily explained using few examples:


Usually an anchor is presented only if the MIME type is ‘text/html’. But it may have some meaning with other files; for example myanim.avi#200 may refer to position in animation or *reality.wrl.MyView* may refer to a predefined view in `VRML`.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FSFile.html
        """

    def GetLocation(self) -> str:
        """ 

`GetLocation`(*self*)[¶](#wx.FSFile.GetLocation "Permalink to this definition")
Returns full location of the file, including path and protocol.


Examples:



Return type
`string`






            Source: https://docs.wxpython.org/wx.FSFile.html
        """

    def GetMimeType(self) -> str:
        """ 

`GetMimeType`(*self*)[¶](#wx.FSFile.GetMimeType "Permalink to this definition")
Returns the MIME type of the content of this file.


It is either extension-based (see  [wx.MimeTypesManager](wx.MimeTypesManager.html#wx-mimetypesmanager)) or extracted from `HTTP` protocol Content-Type header.



Return type
`string`






            Source: https://docs.wxpython.org/wx.FSFile.html
        """

    def GetModificationTime(self) -> 'DateTime':
        """ 

`GetModificationTime`(*self*)[¶](#wx.FSFile.GetModificationTime "Permalink to this definition")
Returns time when this file was modified.



Return type
 [wx.DateTime](wx.DateTime.html#wx-datetime)






            Source: https://docs.wxpython.org/wx.FSFile.html
        """

    def GetStream(self) -> 'InputStream':
        """ 

`GetStream`(*self*)[¶](#wx.FSFile.GetStream "Permalink to this definition")
Returns pointer to the stream.


You can use the returned stream to directly access data. You may suppose that the stream provide Seek and GetSize functionality (even in the case of the `HTTP` protocol which doesn’t provide this by default. Html uses local cache to work around this and to speed up the connection).



Return type
 [wx.InputStream](wx.InputStream.html#wx-inputstream)






            Source: https://docs.wxpython.org/wx.FSFile.html
        """

    Anchor: str  # `Anchor`[¶](#wx.FSFile.Anchor "Permalink to this definition")See [`GetAnchor`](#wx.FSFile.GetAnchor "wx.FSFile.GetAnchor")
    Location: str  # `Location`[¶](#wx.FSFile.Location "Permalink to this definition")See [`GetLocation`](#wx.FSFile.GetLocation "wx.FSFile.GetLocation")
    MimeType: str  # `MimeType`[¶](#wx.FSFile.MimeType "Permalink to this definition")See [`GetMimeType`](#wx.FSFile.GetMimeType "wx.FSFile.GetMimeType")
    ModificationTime: 'DateTime'  # `ModificationTime`[¶](#wx.FSFile.ModificationTime "Permalink to this definition")See [`GetModificationTime`](#wx.FSFile.GetModificationTime "wx.FSFile.GetModificationTime")
    Stream: 'InputStream'  # `Stream`[¶](#wx.FSFile.Stream "Permalink to this definition")See [`GetStream`](#wx.FSFile.GetStream "wx.FSFile.GetStream")



class FullScreenEvent(Event):
    """ **Possible constructors**:



```
FullScreenEvent(id=0, fullscreen=True)

```


An event being sent when the user enters or exits full screen mode.


  


        Source: https://docs.wxpython.org/wx.FullScreenEvent.html
    """
    def __init__(self, id=0, fullscreen=True) -> None:
        """ 

`__init__`(*self*, *id=0*, *fullscreen=True*)[¶](#wx.FullScreenEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **id** (*int*) –
* **fullscreen** (*bool*) –






            Source: https://docs.wxpython.org/wx.FullScreenEvent.html
        """

    def IsFullScreen(self) -> bool:
        """ 

`IsFullScreen`(*self*)[¶](#wx.FullScreenEvent.IsFullScreen "Permalink to this definition")
Returns `True` if the frame entered full screen, `False` if exited full screen.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.FullScreenEvent.html
        """



EVT_FULLSCREEN: int  # Process a  wxEVT_FULLSCREEN   event. ^^

class Gauge(Control):
    """ **Possible constructors**:



```
Gauge()

Gauge(parent, id=ID_ANY, range=100, pos=DefaultPosition,
      size=DefaultSize, style=GA_HORIZONTAL, validator=DefaultValidator,
      name=GaugeNameStr)

```


A gauge is a horizontal or vertical bar which shows a quantity (often
time).


  


        Source: https://docs.wxpython.org/wx.Gauge.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Gauge.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, range=100, pos=DefaultPosition, size=DefaultSize, style=GA\_HORIZONTAL, validator=DefaultValidator, name=GaugeNameStr)*


Constructor, creating and showing a gauge.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Window parent.
* **id** (*wx.WindowID*) – Window identifier.
* **range** (*int*) – Integer range (maximum value) of the gauge. See [`SetRange`](#wx.Gauge.SetRange "wx.Gauge.SetRange") for more details about the meaning of this value when using the gauge in indeterminate mode.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size.
* **style** (*long*) – Gauge style.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.Gauge.Create "wx.Gauge.Create")





---

  





            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    def Create(self, parent, id=ID_ANY, range=100, pos=DefaultPosition, size=DefaultSize, style=GA_HORIZONTAL, validator=DefaultValidator, name=GaugeNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *range=100*, *pos=DefaultPosition*, *size=DefaultSize*, *style=GA\_HORIZONTAL*, *validator=DefaultValidator*, *name=GaugeNameStr*)[¶](#wx.Gauge.Create "Permalink to this definition")
Creates the gauge for two-step construction.


See  [wx.Gauge](#wx-gauge) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **range** (*int*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Gauge.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    def GetRange(self) -> int:
        """ 

`GetRange`(*self*)[¶](#wx.Gauge.GetRange "Permalink to this definition")
Returns the maximum position of the gauge.



Return type
*int*





See also


[`SetRange`](#wx.Gauge.SetRange "wx.Gauge.SetRange")





            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.Gauge.GetValue "Permalink to this definition")
Returns the current position of the gauge.



Return type
*int*





See also


[`SetValue`](#wx.Gauge.SetValue "wx.Gauge.SetValue")





            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    def IsVertical(self) -> bool:
        """ 

`IsVertical`(*self*)[¶](#wx.Gauge.IsVertical "Permalink to this definition")
Returns `True` if the gauge is vertical (has `GA_VERTICAL` style) and `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    def Pulse(self) -> None:
        """ 

`Pulse`(*self*)[¶](#wx.Gauge.Pulse "Permalink to this definition")
Switch the gauge to indeterminate mode (if required) and makes the gauge move a bit to indicate the user that some progress has been made.



Note


After calling this function the value returned by [`GetValue`](#wx.Gauge.GetValue "wx.Gauge.GetValue") is undefined and thus you need to explicitly call [`SetValue`](#wx.Gauge.SetValue "wx.Gauge.SetValue") if you want to restore the determinate mode.





            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    def SetRange(self, range: int) -> None:
        """ 

`SetRange`(*self*, *range*)[¶](#wx.Gauge.SetRange "Permalink to this definition")
Sets the range (maximum value) of the gauge.


This function makes the gauge switch to determinate mode, if it’s not already.


When the gauge is in indeterminate mode, under wxMSW the gauge repeatedly goes from zero to *range* and back; under other ports when in indeterminate mode, the *range* setting is ignored.



Parameters
**range** (*int*) – 





See also


[`GetRange`](#wx.Gauge.GetRange "wx.Gauge.GetRange")





            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    def SetValue(self, pos: int) -> None:
        """ 

`SetValue`(*self*, *pos*)[¶](#wx.Gauge.SetValue "Permalink to this definition")
Sets the position of the gauge.


The *pos* must be between 0 and the gauge range as returned by [`GetRange`](#wx.Gauge.GetRange "wx.Gauge.GetRange") , inclusive.


This function makes the gauge switch to determinate mode, if it was in indeterminate mode before.



Parameters
**pos** (*int*) – Position for the gauge level.





See also


[`GetValue`](#wx.Gauge.GetValue "wx.Gauge.GetValue")





            Source: https://docs.wxpython.org/wx.Gauge.html
        """

    Range: int  # `Range`[¶](#wx.Gauge.Range "Permalink to this definition")See [`GetRange`](#wx.Gauge.GetRange "wx.Gauge.GetRange") and [`SetRange`](#wx.Gauge.SetRange "wx.Gauge.SetRange")
    Value: int  # `Value`[¶](#wx.Gauge.Value "Permalink to this definition")See [`GetValue`](#wx.Gauge.GetValue "wx.Gauge.GetValue") and [`SetValue`](#wx.Gauge.SetValue "wx.Gauge.SetValue")



GA_HORIZONTAL: int  # Creates a horizontal gauge.

GA_VERTICAL: int  # Creates a vertical gauge.

GA_SMOOTH: int  # Creates smooth progress bar with one pixel wide update step (not supported by all platforms).

GA_TEXT: int  # Display the current value in percents in the gauge itself. This style is only supported in Qt and ignored under the other platforms. This flag is only available in wxWidgets 3.1.0 and later.

GA_PROGRESS: int  # Reflect the value of gauge in the application taskbar button under Windows 7 and later and the dock icon under macOS, ignored under the other platforms. This flag is only available in wxWidgets 3.1.0 and later. ^^

class GBPosition:
    """ **Possible constructors**:



```
GBPosition()

GBPosition(row, col)

```


This class represents the position of an item in a virtual grid of
rows and columns managed by a GridBagSizer.


  


        Source: https://docs.wxpython.org/wx.GBPosition.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GBPosition.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor, setting the row and column to (0,0).




---

  



**\_\_init\_\_** *(self, row, col)*


Construct a new  [wx.GBPosition](#wx-gbposition), setting the row and column.



Parameters
* **row** (*int*) –
* **col** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.GBPosition.Get "Permalink to this definition")
Return the row and col properties as a tuple.



Return type
*tuple*



Returns
( [`row`](#wx.GBPosition.row "wx.GBPosition.row"), [`col`](#wx.GBPosition.col "wx.GBPosition.col") )






            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def GetCol(self) -> int:
        """ 

`GetCol`(*self*)[¶](#wx.GBPosition.GetCol "Permalink to this definition")
Get the current column value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.GBPosition.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.GBPosition` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.GBPosition`
with a simple statement like this: `obj = wx.GBPosition(imObj)`.




            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def GetRow(self) -> int:
        """ 

`GetRow`(*self*)[¶](#wx.GBPosition.GetRow "Permalink to this definition")
Get the current row value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def Set(self, row=0, col=0) -> None:
        """ 

`Set`(*self*, *row=0*, *col=0*)[¶](#wx.GBPosition.Set "Permalink to this definition")
Set both the row and column properties.




            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def SetCol(self, col: int) -> None:
        """ 

`SetCol`(*self*, *col*)[¶](#wx.GBPosition.SetCol "Permalink to this definition")
Set a new column value.



Parameters
**col** (*int*) – 






            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def SetRow(self, row: int) -> None:
        """ 

`SetRow`(*self*, *row*)[¶](#wx.GBPosition.SetRow "Permalink to this definition")
Set a new row value.



Parameters
**row** (*int*) – 






            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __bool__(self) -> None:
        """ 

`__bool__`(*self*)[¶](#wx.GBPosition.__bool__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.GBPosition.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.GBPosition.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.GBPosition.__nonzero__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.GBPosition.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.GBPosition.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.GBPosition.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.GBPosition.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.GBPosition.__ne__ "Permalink to this definition")
Compare inequality of two GBPositions.



Parameters
**p** ([*wx.GBPosition*](#wx.GBPosition "wx.GBPosition")) – 






            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.GBPosition.__eq__ "Permalink to this definition")
Compare equality of two GBPositions.



Parameters
**p** ([*wx.GBPosition*](#wx.GBPosition "wx.GBPosition")) – 






            Source: https://docs.wxpython.org/wx.GBPosition.html
        """

    Col: int  # `Col`[¶](#wx.GBPosition.Col "Permalink to this definition")See [`GetCol`](#wx.GBPosition.GetCol "wx.GBPosition.GetCol") and [`SetCol`](#wx.GBPosition.SetCol "wx.GBPosition.SetCol")
    Row: int  # `Row`[¶](#wx.GBPosition.Row "Permalink to this definition")See [`GetRow`](#wx.GBPosition.GetRow "wx.GBPosition.GetRow") and [`SetRow`](#wx.GBPosition.SetRow "wx.GBPosition.SetRow")
    col: Any  # `col`[¶](#wx.GBPosition.col "Permalink to this definition")See [`GetCol`](#wx.GBPosition.GetCol "wx.GBPosition.GetCol") and [`SetCol`](#wx.GBPosition.SetCol "wx.GBPosition.SetCol")
    row: Any  # `row`[¶](#wx.GBPosition.row "Permalink to this definition")See [`GetRow`](#wx.GBPosition.GetRow "wx.GBPosition.GetRow") and [`SetRow`](#wx.GBPosition.SetRow "wx.GBPosition.SetRow")



class GridBagSizer(FlexGridSizer):
    """ **Possible constructors**:



```
GridBagSizer(vgap=0, hgap=0)

```


A Sizer that can lay out items in a virtual grid like a
FlexGridSizer but in this case explicit positioning of the items is
allowed using GBPosition, and items can optionally span more than
one row and/or column using GBSpan.


  


        Source: https://docs.wxpython.org/wx.GridBagSizer.html
    """
    def __init__(self, vgap=0, hgap=0) -> None:
        """ 

`__init__`(*self*, *vgap=0*, *hgap=0*)[¶](#wx.GridBagSizer.__init__ "Permalink to this definition")
Constructor, with optional parameters to specify the gap between the rows and columns.



Parameters
* **vgap** (*int*) –
* **hgap** (*int*) –






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def Add(self, *args, **kw) -> 'SizerItem':
        """ 

`Add`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GridBagSizer.Add "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Add** *(self, window, pos, span=DefaultSpan, flag=0, border=0, userData=None)*


Adds the given item to the given position.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)



Returns
A valid pointer if the item was successfully placed at the given position, or `None` if something was already there.






---

  



**Add** *(self, sizer, pos, span=DefaultSpan, flag=0, border=0, userData=None)*


Adds the given item to the given position.



Parameters
* **sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)



Returns
A valid pointer if the item was successfully placed at the given position, or `None` if something was already there.






---

  



**Add** *(self, item)*


Adds the given item to the given position.



Parameters
**item** ([*wx.GBSizerItem*](wx.GBSizerItem.html#wx.GBSizerItem "wx.GBSizerItem")) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)



Returns
A valid pointer if the item was successfully placed at the given position, or `None` if something was already there.






---

  



**Add** *(self, width, height, pos, span=DefaultSpan, flag=0, border=0, userData=None)*


Adds a spacer to the given position.


*width* and *height* specify the dimension of the spacer to be added.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)



Returns
A valid pointer if the spacer was successfully placed at the given position, or `None` if something was already there.






---

  



**Add** *(self, size, pos, span=DefaultSpan, flag=0, border=0, /Transfer/=None)*


Add a spacer using a `Size` object.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  





            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.GridBagSizer.CalcMin "Permalink to this definition")
Called when the managed size of the sizer is needed or when layout needs done.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def CheckForIntersection(self, *args, **kw) -> bool:
        """ 

`CheckForIntersection`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GridBagSizer.CheckForIntersection "Permalink to this definition")
Look at all items and see if any intersect (or would overlap) the given item.


Returns `True` if so, `False` if there would be no overlap. If an *excludeItem* is given then it will not be checked for intersection, for example it may be the item we are checking the position of.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CheckForIntersection** *(self, item, excludeItem=None)*



Parameters
* **item** ([*wx.GBSizerItem*](wx.GBSizerItem.html#wx.GBSizerItem "wx.GBSizerItem")) –
* **excludeItem** ([*wx.GBSizerItem*](wx.GBSizerItem.html#wx.GBSizerItem "wx.GBSizerItem")) –



Return type
*bool*






---

  



**CheckForIntersection** *(self, pos, span, excludeItem=None)*



Parameters
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –
* **excludeItem** ([*wx.GBSizerItem*](wx.GBSizerItem.html#wx.GBSizerItem "wx.GBSizerItem")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def FindItem(self, *args, **kw) -> 'GBSizerItem':
        """ 

`FindItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GridBagSizer.FindItem "Permalink to this definition")
Find the sizer item for the given window or subsizer, returns `None` if not found.


(non-recursive)


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FindItem** *(self, window)*



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.GBSizerItem](wx.GBSizerItem.html#wx-gbsizeritem)






---

  



**FindItem** *(self, sizer)*



Parameters
**sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – 



Return type
 [wx.GBSizerItem](wx.GBSizerItem.html#wx-gbsizeritem)






---

  





            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def FindItemAtPoint(self, pt: Union[tuple[int, int], 'Point']) -> 'GBSizerItem':
        """ 

`FindItemAtPoint`(*self*, *pt*)[¶](#wx.GridBagSizer.FindItemAtPoint "Permalink to this definition")
Return the sizer item located at the point given in pt, or `None` if there is no item at that point.


The (x,y) coordinates in *pt* correspond to the client coordinates of the window using the sizer for layout. (non-recursive)



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.GBSizerItem](wx.GBSizerItem.html#wx-gbsizeritem)






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def FindItemAtPosition(self, pos: 'GBPosition') -> 'GBSizerItem':
        """ 

`FindItemAtPosition`(*self*, *pos*)[¶](#wx.GridBagSizer.FindItemAtPosition "Permalink to this definition")
Return the sizer item for the given grid cell, or `None` if there is no item at that position.


(non-recursive)



Parameters
**pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) – 



Return type
 [wx.GBSizerItem](wx.GBSizerItem.html#wx-gbsizeritem)






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def FindItemWithData(self, userData: 'Object') -> 'GBSizerItem':
        """ 

`FindItemWithData`(*self*, *userData*)[¶](#wx.GridBagSizer.FindItemWithData "Permalink to this definition")
Return the sizer item that has a matching user data (it only compares pointer values) or `None` if not found.


(non-recursive)



Parameters
**userData** ([*wx.Object*](wx.Object.html#wx.Object "wx.Object")) – 



Return type
 [wx.GBSizerItem](wx.GBSizerItem.html#wx-gbsizeritem)






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def GetCellSize(self, row, col) -> 'Size':
        """ 

`GetCellSize`(*self*, *row*, *col*)[¶](#wx.GridBagSizer.GetCellSize "Permalink to this definition")
Get the size of the specified cell, including hgap and vgap.


Only valid after window layout has been performed.



Parameters
* **row** (*int*) –
* **col** (*int*) –



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def GetEmptyCellSize(self) -> 'Size':
        """ 

`GetEmptyCellSize`(*self*)[¶](#wx.GridBagSizer.GetEmptyCellSize "Permalink to this definition")
Get the size used for cells in the grid with no item.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def GetItemPosition(self, *args, **kw) -> 'GBPosition':
        """ 

`GetItemPosition`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GridBagSizer.GetItemPosition "Permalink to this definition")
Get the grid position of the specified item.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetItemPosition** *(self, window)*



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.GBPosition](wx.GBPosition.html#wx-gbposition)






---

  



**GetItemPosition** *(self, sizer)*



Parameters
**sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – 



Return type
 [wx.GBPosition](wx.GBPosition.html#wx-gbposition)






---

  



**GetItemPosition** *(self, index)*



Parameters
**index** (*int*) – 



Return type
 [wx.GBPosition](wx.GBPosition.html#wx-gbposition)






---

  





            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def GetItemSpan(self, *args, **kw) -> 'GBSpan':
        """ 

`GetItemSpan`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GridBagSizer.GetItemSpan "Permalink to this definition")
Get the row/col spanning of the specified item.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetItemSpan** *(self, window)*



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.GBSpan](wx.GBSpan.html#wx-gbspan)






---

  



**GetItemSpan** *(self, sizer)*



Parameters
**sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – 



Return type
 [wx.GBSpan](wx.GBSpan.html#wx-gbspan)






---

  



**GetItemSpan** *(self, index)*



Parameters
**index** (*int*) – 



Return type
 [wx.GBSpan](wx.GBSpan.html#wx-gbspan)






---

  





            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def RepositionChildren(self, minSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`RepositionChildren`(*self*, *minSize*)[¶](#wx.GridBagSizer.RepositionChildren "Permalink to this definition")
Called when the managed size of the sizer is needed or when layout needs done.



Parameters
**minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def SetEmptyCellSize(self, sz: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetEmptyCellSize`(*self*, *sz*)[¶](#wx.GridBagSizer.SetEmptyCellSize "Permalink to this definition")
Set the size used for cells in the grid with no item.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def SetItemPosition(self, *args, **kw) -> bool:
        """ 

`SetItemPosition`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GridBagSizer.SetItemPosition "Permalink to this definition")
Set the grid position of the specified item.


Returns `True` on success. If the move is not allowed (because an item is already there) then `False` is returned.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetItemPosition** *(self, window, pos)*



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –



Return type
*bool*






---

  



**SetItemPosition** *(self, sizer, pos)*



Parameters
* **sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –



Return type
*bool*






---

  



**SetItemPosition** *(self, index, pos)*



Parameters
* **index** (*int*) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    def SetItemSpan(self, *args, **kw) -> bool:
        """ 

`SetItemSpan`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GridBagSizer.SetItemSpan "Permalink to this definition")
Set the row/col spanning of the specified item.


Returns `True` on success. If the move is not allowed (because an item is already there) then `False` is returned.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetItemSpan** *(self, window, span)*



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –



Return type
*bool*






---

  



**SetItemSpan** *(self, sizer, span)*



Parameters
* **sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –



Return type
*bool*






---

  



**SetItemSpan** *(self, index, span)*



Parameters
* **index** (*int*) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.GridBagSizer.html
        """

    EmptyCellSize: 'Size'  # `EmptyCellSize`[¶](#wx.GridBagSizer.EmptyCellSize "Permalink to this definition")See [`GetEmptyCellSize`](#wx.GridBagSizer.GetEmptyCellSize "wx.GridBagSizer.GetEmptyCellSize") and [`SetEmptyCellSize`](#wx.GridBagSizer.SetEmptyCellSize "wx.GridBagSizer.SetEmptyCellSize")



class GBSizerItem(SizerItem):
    """ **Possible constructors**:



```
GBSizerItem(width, height, pos, span=DefaultSpan, flag=0, border=0,
            userData=None)

GBSizerItem(window, pos, span=DefaultSpan, flag=0, border=0,
            userData=None)

GBSizerItem(sizer, pos, span=DefaultSpan, flag=0, border=0,
            userData=None)

```


The GBSizerItem class is used by the GridBagSizer for tracking the
items in the sizer.


  


        Source: https://docs.wxpython.org/wx.GBSizerItem.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GBSizerItem.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, width, height, pos, span=DefaultSpan, flag=0, border=0, userData=None)*


Construct a sizer item for tracking a spacer.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –






---

  



**\_\_init\_\_** *(self, window, pos, span=DefaultSpan, flag=0, border=0, userData=None)*


Construct a sizer item for tracking a window.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –






---

  



**\_\_init\_\_** *(self, sizer, pos, span=DefaultSpan, flag=0, border=0, userData=None)*


Construct a sizer item for tracking a subsizer.



Parameters
* **sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) –
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –






---

  





            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    def GetEndPos(self) -> tuple:
        """ 

`GetEndPos`(*self*)[¶](#wx.GBSizerItem.GetEndPos "Permalink to this definition")
Get the row and column of the endpoint of this item.



Return type
*tuple*



Returns
( *row*, *col* )






            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    def GetGBSizer(self) -> 'GridBagSizer':
        """ 

`GetGBSizer`(*self*)[¶](#wx.GBSizerItem.GetGBSizer "Permalink to this definition")

Return type
 [wx.GridBagSizer](wx.GridBagSizer.html#wx-gridbagsizer)






            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    def GetPos(self) -> 'GBPosition':
        """ 

`GetPos`(*self*)[¶](#wx.GBSizerItem.GetPos "Permalink to this definition")
Get the grid position of the item.



Return type
 [wx.GBPosition](wx.GBPosition.html#wx-gbposition)






            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    def GetSpan(self) -> 'GBSpan':
        """ 

`GetSpan`(*self*)[¶](#wx.GBSizerItem.GetSpan "Permalink to this definition")
Get the row and column spanning of the item.



Return type
 [wx.GBSpan](wx.GBSpan.html#wx-gbspan)






            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    def Intersects(self, *args, **kw) -> bool:
        """ 

`Intersects`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GBSizerItem.Intersects "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Intersects** *(self, other)*


Returns `True` if this item and the *other* item intersect.



Parameters
**other** ([*wx.GBSizerItem*](#wx.GBSizerItem "wx.GBSizerItem")) – 



Return type
*bool*






---

  



**Intersects** *(self, pos, span)*


Returns `True` if the given pos/span would intersect with this item.



Parameters
* **pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) –
* **span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    def SetGBSizer(self, sizer: 'GridBagSizer') -> None:
        """ 

`SetGBSizer`(*self*, *sizer*)[¶](#wx.GBSizerItem.SetGBSizer "Permalink to this definition")

Parameters
**sizer** ([*wx.GridBagSizer*](wx.GridBagSizer.html#wx.GridBagSizer "wx.GridBagSizer")) – 






            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    def SetPos(self, pos: 'GBPosition') -> bool:
        """ 

`SetPos`(*self*, *pos*)[¶](#wx.GBSizerItem.SetPos "Permalink to this definition")
If the item is already a member of a sizer then first ensure that there is no other item that would intersect with this one at the new position, then set the new position.


Returns `True` if the change is successful and after the next Layout the item will be moved.



Parameters
**pos** ([*wx.GBPosition*](wx.GBPosition.html#wx.GBPosition "wx.GBPosition")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    def SetSpan(self, span: 'GBSpan') -> bool:
        """ 

`SetSpan`(*self*, *span*)[¶](#wx.GBSizerItem.SetSpan "Permalink to this definition")
If the item is already a member of a sizer then first ensure that there is no other item that would intersect with this one with its new spanning size, then set the new spanning.


Returns `True` if the change is successful and after the next Layout the item will be resized.



Parameters
**span** ([*wx.GBSpan*](wx.GBSpan.html#wx.GBSpan "wx.GBSpan")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GBSizerItem.html
        """

    GBSizer: 'GridBagSizer'  # `GBSizer`[¶](#wx.GBSizerItem.GBSizer "Permalink to this definition")See [`GetGBSizer`](#wx.GBSizerItem.GetGBSizer "wx.GBSizerItem.GetGBSizer") and [`SetGBSizer`](#wx.GBSizerItem.SetGBSizer "wx.GBSizerItem.SetGBSizer")
    Pos: 'GBPosition'  # `Pos`[¶](#wx.GBSizerItem.Pos "Permalink to this definition")See [`GetPos`](#wx.GBSizerItem.GetPos "wx.GBSizerItem.GetPos") and [`SetPos`](#wx.GBSizerItem.SetPos "wx.GBSizerItem.SetPos")
    Span: 'GBSpan'  # `Span`[¶](#wx.GBSizerItem.Span "Permalink to this definition")See [`GetSpan`](#wx.GBSizerItem.GetSpan "wx.GBSizerItem.GetSpan") and [`SetSpan`](#wx.GBSizerItem.SetSpan "wx.GBSizerItem.SetSpan")



class GBSpan:
    """ **Possible constructors**:



```
GBSpan()

GBSpan(rowspan, colspan)

```


This class is used to hold the row and column spanning attributes of
items in a GridBagSizer.


  


        Source: https://docs.wxpython.org/wx.GBSpan.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GBSpan.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor, setting the rowspan and colspan to (1,1) meaning that the item occupies one cell in each direction.




---

  



**\_\_init\_\_** *(self, rowspan, colspan)*


Construct a new  [wx.GBSpan](#wx-gbspan), setting the [`rowspan`](#wx.GBSpan.rowspan "wx.GBSpan.rowspan") and [`colspan`](#wx.GBSpan.colspan "wx.GBSpan.colspan").



Parameters
* **rowspan** (*int*) –
* **colspan** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.GBSpan.Get "Permalink to this definition")
Return the rowspan and colspan properties as a tuple.



Return type
*tuple*



Returns
( [`rowspan`](#wx.GBSpan.rowspan "wx.GBSpan.rowspan"), [`colspan`](#wx.GBSpan.colspan "wx.GBSpan.colspan") )






            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def GetColspan(self) -> int:
        """ 

`GetColspan`(*self*)[¶](#wx.GBSpan.GetColspan "Permalink to this definition")
Get the current colspan value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.GBSpan.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.GBSpan` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.GBSpan`
with a simple statement like this: `obj = wx.GBSpan(imObj)`.




            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def GetRowspan(self) -> int:
        """ 

`GetRowspan`(*self*)[¶](#wx.GBSpan.GetRowspan "Permalink to this definition")
Get the current rowspan value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def Set(self, rowspan=0, colspan=0) -> None:
        """ 

`Set`(*self*, *rowspan=0*, *colspan=0*)[¶](#wx.GBSpan.Set "Permalink to this definition")
Set both the rowspan and colspan properties.




            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def SetColspan(self, colspan: int) -> None:
        """ 

`SetColspan`(*self*, *colspan*)[¶](#wx.GBSpan.SetColspan "Permalink to this definition")
Set a new colspan value.



Parameters
**colspan** (*int*) – 






            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def SetRowspan(self, rowspan: int) -> None:
        """ 

`SetRowspan`(*self*, *rowspan*)[¶](#wx.GBSpan.SetRowspan "Permalink to this definition")
Set a new rowspan value.



Parameters
**rowspan** (*int*) – 






            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __bool__(self) -> None:
        """ 

`__bool__`(*self*)[¶](#wx.GBSpan.__bool__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.GBSpan.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.GBSpan.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.GBSpan.__nonzero__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.GBSpan.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.GBSpan.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.GBSpan.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.GBSpan.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.GBSpan.__ne__ "Permalink to this definition")
Compare inequality of two GBSpans.



Parameters
**o** ([*wx.GBSpan*](#wx.GBSpan "wx.GBSpan")) – 






            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.GBSpan.__eq__ "Permalink to this definition")
Compare equality of two GBSpans.



Parameters
**o** ([*wx.GBSpan*](#wx.GBSpan "wx.GBSpan")) – 






            Source: https://docs.wxpython.org/wx.GBSpan.html
        """

    Colspan: int  # `Colspan`[¶](#wx.GBSpan.Colspan "Permalink to this definition")See [`GetColspan`](#wx.GBSpan.GetColspan "wx.GBSpan.GetColspan") and [`SetColspan`](#wx.GBSpan.SetColspan "wx.GBSpan.SetColspan")
    Rowspan: int  # `Rowspan`[¶](#wx.GBSpan.Rowspan "Permalink to this definition")See [`GetRowspan`](#wx.GBSpan.GetRowspan "wx.GBSpan.GetRowspan") and [`SetRowspan`](#wx.GBSpan.SetRowspan "wx.GBSpan.SetRowspan")
    colspan: Any  # `colspan`[¶](#wx.GBSpan.colspan "Permalink to this definition")See [`GetColspan`](#wx.GBSpan.GetColspan "wx.GBSpan.GetColspan") and [`SetColspan`](#wx.GBSpan.SetColspan "wx.GBSpan.SetColspan")
    rowspan: Any  # `rowspan`[¶](#wx.GBSpan.rowspan "Permalink to this definition")See [`GetRowspan`](#wx.GBSpan.GetRowspan "wx.GBSpan.GetRowspan") and [`SetRowspan`](#wx.GBSpan.SetRowspan "wx.GBSpan.SetRowspan")



class GCDC(DC):
    """ **Possible constructors**:



```
GCDC(windowDC)

GCDC(memoryDC)

GCDC(printerDC)

GCDC(context)

GCDC()

```


GCDC is a device context that draws on a GraphicsContext.


  


        Source: https://docs.wxpython.org/wx.GCDC.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GCDC.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, windowDC)*


Constructs a  [wx.GCDC](#wx-gcdc) from a  [wx.WindowDC](wx.WindowDC.html#wx-windowdc).



Parameters
**windowDC** ([*wx.WindowDC*](wx.WindowDC.html#wx.WindowDC "wx.WindowDC")) – 






---

  



**\_\_init\_\_** *(self, memoryDC)*


Constructs a  [wx.GCDC](#wx-gcdc) from a  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc).



Parameters
**memoryDC** ([*wx.MemoryDC*](wx.MemoryDC.html#wx.MemoryDC "wx.MemoryDC")) – 






---

  



**\_\_init\_\_** *(self, printerDC)*


Constructs a  [wx.GCDC](#wx-gcdc) from a  [wx.PrinterDC](wx.PrinterDC.html#wx-printerdc).



Parameters
**printerDC** ([*wx.PrinterDC*](wx.PrinterDC.html#wx.PrinterDC "wx.PrinterDC")) – 






---

  



**\_\_init\_\_** *(self, context)*


Construct a  [wx.GCDC](#wx-gcdc) from an existing graphics context.


Note that this object takes ownership of *context* and will delete it when it is destroyed or when [`SetGraphicsContext`](#wx.GCDC.SetGraphicsContext "wx.GCDC.SetGraphicsContext") is called with a different context object.


Also notice that *context* will continue using the same font, pen and brush as before until [`SetFont`](wx.DC.html#wx.DC.SetFont "wx.DC.SetFont") , [`SetPen`](wx.DC.html#wx.DC.SetPen "wx.DC.SetPen") or [`SetBrush`](wx.DC.html#wx.DC.SetBrush "wx.DC.SetBrush") is explicitly called to change them. This means that the code can use this DC-derived object to work using pens and brushes with alpha component, for example (which normally isn’t supported by  [wx.DC](wx.DC.html#wx-dc) API), but it also means that the return values of [`GetFont`](wx.DC.html#wx.DC.GetFont "wx.DC.GetFont") , [`GetPen`](wx.DC.html#wx.DC.GetPen "wx.DC.GetPen") and [`GetBrush`](wx.DC.html#wx.DC.GetBrush "wx.DC.GetBrush") won’t really correspond to the actually used objects because they simply can’t represent them anyhow. If you wish to avoid such discrepancy, you need to call the setter methods to bring  [wx.DC](wx.DC.html#wx-dc) and  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) font, pen and brush in sync with each other.



Parameters
**context** ([*wx.GraphicsContext*](wx.GraphicsContext.html#wx.GraphicsContext "wx.GraphicsContext")) – 






---

  



**\_\_init\_\_** *(self)*




---

  





            Source: https://docs.wxpython.org/wx.GCDC.html
        """

    def GetGraphicsContext(self) -> 'GraphicsContext':
        """ 

`GetGraphicsContext`(*self*)[¶](#wx.GCDC.GetGraphicsContext "Permalink to this definition")
Retrieves associated  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext).



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)






            Source: https://docs.wxpython.org/wx.GCDC.html
        """

    def SetGraphicsContext(self, context: 'GraphicsContext') -> None:
        """ 

`SetGraphicsContext`(*self*, *context*)[¶](#wx.GCDC.SetGraphicsContext "Permalink to this definition")
Set the graphics context to be used for this  [wx.GCDC](#wx-gcdc).


Note that this object takes ownership of *context* and will delete it when it is destroyed or when [`SetGraphicsContext`](#wx.GCDC.SetGraphicsContext "wx.GCDC.SetGraphicsContext") is called again.


Also, unlike the constructor taking  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext), this method will reapply the current font, pen and brush, so that this object continues to use them, if they had been changed before (which is never the case when constructing  [wx.GCDC](#wx-gcdc) directly from  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)).



Parameters
**context** ([*wx.GraphicsContext*](wx.GraphicsContext.html#wx.GraphicsContext "wx.GraphicsContext")) – 






            Source: https://docs.wxpython.org/wx.GCDC.html
        """

    GraphicsContext: '_GraphicsContext'  # `GraphicsContext`[¶](#wx.GCDC.GraphicsContext "Permalink to this definition")See [`GetGraphicsContext`](#wx.GCDC.GetGraphicsContext "wx.GCDC.GetGraphicsContext") and [`SetGraphicsContext`](#wx.GCDC.SetGraphicsContext "wx.GCDC.SetGraphicsContext")



_AntialiasMode: TypeAlias = AntialiasMode

_CompositionMode: TypeAlias = CompositionMode

_InterpolationQuality: TypeAlias = InterpolationQuality

class GraphicsContext(GraphicsObject):
    """ A GraphicsContext instance is the object that is drawn upon.


  


        Source: https://docs.wxpython.org/wx.GraphicsContext.html
    """
    def BeginLayer(self, opacity: 'Double') -> None:
        """ 

`BeginLayer`(*self*, *opacity*)[¶](#wx.GraphicsContext.BeginLayer "Permalink to this definition")
All rendering will be done into a fully transparent temporary context.


Layers can be nested by making balanced calls to [`BeginLayer`](#wx.GraphicsContext.BeginLayer "wx.GraphicsContext.BeginLayer") /EndLayer().



Parameters
**opacity** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def Clip(self, *args, **kw) -> None:
        """ 

`Clip`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.Clip "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Clip** *(self, region)*


Sets the clipping region to the intersection of the given region and the previously set clipping region.


The clipping region is an area to which drawing is restricted.



Parameters
**region** ([*wx.Region*](wx.Region.html#wx.Region "wx.Region")) – 





Note


* Clipping region should be given in logical coordinates.
* Calling this function can only make the clipping region smaller, never larger.
* You need to call [`ResetClip`](#wx.GraphicsContext.ResetClip "wx.GraphicsContext.ResetClip") first if you want to set the clipping region exactly to the region specified.
* If resulting clipping region is empty, then all drawing upon the context is clipped out (all changes made by drawing operations are masked out).





---

  



**Clip** *(self, x, y, w, h)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def ConcatTransform(self, matrix: 'GraphicsMatrix') -> None:
        """ 

`ConcatTransform`(*self*, *matrix*)[¶](#wx.GraphicsContext.ConcatTransform "Permalink to this definition")
Concatenates the passed in transform with the current transform of this context.



Parameters
**matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) – 






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    @staticmethod
    def Create(*args, **kw) -> 'GraphicsContext':
        """ 

*static* `Create`(*\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.Create "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Create** *(window)*


Creates a  [wx.GraphicsContext](#wx-graphicscontext) from a  [wx.Window](wx.Window.html#wx-window).



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





See also


[`wx.GraphicsRenderer.CreateContext`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateContext "wx.GraphicsRenderer.CreateContext")





---

  



**Create** *(windowDC)*


Creates a  [wx.GraphicsContext](#wx-graphicscontext) from a  [wx.WindowDC](wx.WindowDC.html#wx-windowdc).



Parameters
**windowDC** ([*wx.WindowDC*](wx.WindowDC.html#wx.WindowDC "wx.WindowDC")) – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





See also


[`wx.GraphicsRenderer.CreateContext`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateContext "wx.GraphicsRenderer.CreateContext")





---

  



**Create** *(memoryDC)*


Creates a  [wx.GraphicsContext](#wx-graphicscontext) from a  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc).



Parameters
**memoryDC** ([*wx.MemoryDC*](wx.MemoryDC.html#wx.MemoryDC "wx.MemoryDC")) – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





See also


[`wx.GraphicsRenderer.CreateContext`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateContext "wx.GraphicsRenderer.CreateContext")





---

  



**Create** *(printerDC)*


Creates a  [wx.GraphicsContext](#wx-graphicscontext) from a  [wx.PrinterDC](wx.PrinterDC.html#wx-printerdc).


Under GTK+, this will only work when using the GtkPrint printing backend which is available since GTK+ 2.10.



Parameters
**printerDC** ([*wx.PrinterDC*](wx.PrinterDC.html#wx.PrinterDC "wx.PrinterDC")) – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





See also


[`wx.GraphicsRenderer.CreateContext`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateContext "wx.GraphicsRenderer.CreateContext") ,





---

  



**Create** *(metaFileDC)*


Creates a  [wx.GraphicsContext](#wx-graphicscontext) from a EnhMetaFileDC.


This function, as EnhMetaFileDC class itself, is only available only under MSW.



Parameters
**metaFileDC** (`MetafileDC`) – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





See also


[`wx.GraphicsRenderer.CreateContext`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateContext "wx.GraphicsRenderer.CreateContext")





---

  



**Create** *(image)*


Creates a  [wx.GraphicsContext](#wx-graphicscontext) associated with a  [wx.Image](wx.Image.html#wx-image).


The image specifies the size of the context as well as whether alpha is supported (if [`wx.Image.HasAlpha`](wx.Image.html#wx.Image.HasAlpha "wx.Image.HasAlpha") ) or not and the initial contents of the context. The *image* object must have a life time greater than that of the new context as the context copies its contents back to the image when it is destroyed.



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





New in version 2.9.3.





---

  



**Create** *()*


Create a lightweight context that can be used only for measuring text.



Return type
 [wx.GraphicsContext](#wx-graphicscontext)






---

  



**Create** *(autoPaintDC)*



Return type
 [wx.GraphicsContext](#wx-graphicscontext)






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreateBitmap(self, bitmap: 'Bitmap') -> 'GraphicsBitmap':
        """ 

`CreateBitmap`(*self*, *bitmap*)[¶](#wx.GraphicsContext.CreateBitmap "Permalink to this definition")
Creates  [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap) from an existing  [wx.Bitmap](wx.Bitmap.html#wx-bitmap).


Returns an invalid NullGraphicsBitmap on failure.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 



Return type
 [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap)






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreateBitmapFromImage(self, image: 'Image') -> 'GraphicsBitmap':
        """ 

`CreateBitmapFromImage`(*self*, *image*)[¶](#wx.GraphicsContext.CreateBitmapFromImage "Permalink to this definition")
Creates  [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap) from an existing  [wx.Image](wx.Image.html#wx-image).


This method is more efficient than converting  [wx.Image](wx.Image.html#wx-image) to  [wx.Bitmap](wx.Bitmap.html#wx-bitmap) first and then calling [`CreateBitmap`](#wx.GraphicsContext.CreateBitmap "wx.GraphicsContext.CreateBitmap") but otherwise has the same effect.


Returns an invalid NullGraphicsBitmap on failure.



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 



Return type
 [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap)





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreateBrush(self, brush: 'Brush') -> 'GraphicsBrush':
        """ 

`CreateBrush`(*self*, *brush*)[¶](#wx.GraphicsContext.CreateBrush "Permalink to this definition")
Creates a native brush from a  [wx.Brush](wx.Brush.html#wx-brush).



Parameters
**brush** ([*wx.Brush*](wx.Brush.html#wx.Brush "wx.Brush")) – 



Return type
 [wx.GraphicsBrush](wx.GraphicsBrush.html#wx-graphicsbrush)






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreateFont(self, *args, **kw) -> 'GraphicsFont':
        """ 

`CreateFont`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.CreateFont "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreateFont** *(self, font, col=BLACK)*


Creates a native graphics font from a  [wx.Font](wx.Font.html#wx-font) and a text colour.



Parameters
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –



Return type
 [wx.GraphicsFont](wx.GraphicsFont.html#wx-graphicsfont)





Note


For Direct2D graphics fonts can be created from TrueType fonts only.





---

  



**CreateFont** *(self, sizeInPixels, facename, flags=FONTFLAG\_DEFAULT, col=BLACK)*


Creates a font object with the specified attributes.


The use of overload taking  [wx.Font](wx.Font.html#wx-font) is preferred, see [`wx.GraphicsRenderer.CreateFont`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateFont "wx.GraphicsRenderer.CreateFont") for more details.



Parameters
* **sizeInPixels** (*float*) –
* **facename** (*string*) –
* **flags** (*int*) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –



Return type
 [wx.GraphicsFont](wx.GraphicsFont.html#wx-graphicsfont)





New in version 2.9.3.




Note


For Direct2D graphics fonts can be created from TrueType fonts only.





---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    @staticmethod
    def CreateFromNative(context: Any) -> 'GraphicsContext':
        """ 

*static* `CreateFromNative`(*context*)[¶](#wx.GraphicsContext.CreateFromNative "Permalink to this definition")
Creates a  [wx.GraphicsContext](#wx-graphicscontext) from a native context.


This native context must be a CGContextRef for Core Graphics, a Graphics pointer for GDIPlus, or a cairo\_t pointer for cairo.



Parameters
**context** – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





See also


[`wx.GraphicsRenderer.CreateContextFromNativeContext`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateContextFromNativeContext "wx.GraphicsRenderer.CreateContextFromNativeContext")





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    @staticmethod
    def CreateFromNativeWindow(window: Any) -> 'GraphicsContext':
        """ 

*static* `CreateFromNativeWindow`(*window*)[¶](#wx.GraphicsContext.CreateFromNativeWindow "Permalink to this definition")
Creates a  [wx.GraphicsContext](#wx-graphicscontext) from a native window.



Parameters
**window** – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





See also


[`wx.GraphicsRenderer.CreateContextFromNativeWindow`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateContextFromNativeWindow "wx.GraphicsRenderer.CreateContextFromNativeWindow")





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    @staticmethod
    def CreateFromUnknownDC(dc: 'DC') -> 'GraphicsContext':
        """ 

*static* `CreateFromUnknownDC`(*dc*)[¶](#wx.GraphicsContext.CreateFromUnknownDC "Permalink to this definition")
Creates a  [wx.GraphicsContext](#wx-graphicscontext) from a DC of unknown specific type.


Creates a  [wx.GraphicsContext](#wx-graphicscontext) if *dc* is a supported type (i.e. has a corresponding [`Create`](#wx.GraphicsContext.Create "wx.GraphicsContext.Create") method, e.g.  [wx.WindowDC](wx.WindowDC.html#wx-windowdc) or  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc)). Returns `None` if the DC is unsupported.


This method is only useful as a helper in generic code that operates with  [wx.DC](wx.DC.html#wx-dc) and doesn’t known its exact type. Use [`Create`](#wx.GraphicsContext.Create "wx.GraphicsContext.Create") instead if you know that the DC is e.g.  [wx.WindowDC](wx.WindowDC.html#wx-windowdc).



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 



Return type
 [wx.GraphicsContext](#wx-graphicscontext)





New in version 4.1/wxWidgets-3.1.1.




See also


[`wx.GraphicsRenderer.CreateContextFromUnknownDC`](wx.GraphicsRenderer.html#wx.GraphicsRenderer.CreateContextFromUnknownDC "wx.GraphicsRenderer.CreateContextFromUnknownDC")





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreateLinearGradientBrush(self, *args, **kw) -> 'GraphicsBrush':
        """ 

`CreateLinearGradientBrush`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.CreateLinearGradientBrush "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreateLinearGradientBrush** *(self, x1, y1, x2, y2, c1, c2, matrix=NullGraphicsMatrix)*


Creates a native brush with a linear gradient.


The brush starts at (*x1*, *y1*) and ends at (*x2*, *y2*). Either just the start and end gradient colours (*c1* and *c2*) or full set of gradient *stops* can be specified.


The version taking  [wx.GraphicsGradientStops](wx.GraphicsGradientStops.html#wx-graphicsgradientstops) is new in wxWidgets 2.9.1.


The *matrix* parameter was added in wxWidgets 3.1.3



Parameters
* **x1** (*wx.Double*) –
* **y1** (*wx.Double*) –
* **x2** (*wx.Double*) –
* **y2** (*wx.Double*) –
* **c1** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **c2** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsBrush](wx.GraphicsBrush.html#wx-graphicsbrush)






---

  



**CreateLinearGradientBrush** *(self, x1, y1, x2, y2, stops, matrix=NullGraphicsMatrix)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **x1** (*wx.Double*) –
* **y1** (*wx.Double*) –
* **x2** (*wx.Double*) –
* **y2** (*wx.Double*) –
* **stops** ([*wx.GraphicsGradientStops*](wx.GraphicsGradientStops.html#wx.GraphicsGradientStops "wx.GraphicsGradientStops")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsBrush](wx.GraphicsBrush.html#wx-graphicsbrush)






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreateMatrix(self, *args, **kw) -> 'GraphicsMatrix':
        """ 

`CreateMatrix`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.CreateMatrix "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreateMatrix** *(self, a=1.0, b=0.0, c=0.0, d=1.0, tx=0.0, ty=0.0)*


Creates a native affine transformation matrix from the passed in values.


The default parameters result in an identity matrix.



Parameters
* **a** (*wx.Double*) –
* **b** (*wx.Double*) –
* **c** (*wx.Double*) –
* **d** (*wx.Double*) –
* **tx** (*wx.Double*) –
* **ty** (*wx.Double*) –



Return type
 [wx.GraphicsMatrix](wx.GraphicsMatrix.html#wx-graphicsmatrix)






---

  



**CreateMatrix** *(self, mat)*


Creates a native affine transformation matrix from the passed generic one.



Parameters
**mat** ([*wx.AffineMatrix2DBase*](wx.AffineMatrix2DBase.html#wx.AffineMatrix2DBase "wx.AffineMatrix2DBase")) – 



Return type
 [wx.GraphicsMatrix](wx.GraphicsMatrix.html#wx-graphicsmatrix)





New in version 2.9.4.





---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreatePath(self) -> 'GraphicsPath':
        """ 

`CreatePath`(*self*)[¶](#wx.GraphicsContext.CreatePath "Permalink to this definition")
Creates a native graphics path which is initially empty.



Return type
 [wx.GraphicsPath](wx.GraphicsPath.html#wx-graphicspath)






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreatePen(self, *args, **kw) -> 'GraphicsPen':
        """ 

`CreatePen`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.CreatePen "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreatePen** *(self, pen)*


Creates a native pen from a  [wx.Pen](wx.Pen.html#wx-pen).


Prefer to use the overload taking  [wx.GraphicsPenInfo](wx.GraphicsPenInfo.html#wx-graphicspeninfo) unless you already have a  [wx.Pen](wx.Pen.html#wx-pen) as constructing one only to pass it to this method is wasteful.



Parameters
**pen** ([*wx.Pen*](wx.Pen.html#wx.Pen "wx.Pen")) – 



Return type
 [wx.GraphicsPen](wx.GraphicsPen.html#wx-graphicspen)






---

  



**CreatePen** *(self, info)*


Creates a native pen from a  [wx.GraphicsPenInfo](wx.GraphicsPenInfo.html#wx-graphicspeninfo).



Parameters
**info** ([*wx.GraphicsPenInfo*](wx.GraphicsPenInfo.html#wx.GraphicsPenInfo "wx.GraphicsPenInfo")) – 



Return type
 [wx.GraphicsPen](wx.GraphicsPen.html#wx-graphicspen)





New in version 4.1/wxWidgets-3.1.1.





---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreateRadialGradientBrush(self, *args, **kw) -> 'GraphicsBrush':
        """ 

`CreateRadialGradientBrush`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.CreateRadialGradientBrush "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreateRadialGradientBrush** *(self, startX, startY, endX, endY, radius, oColor, cColor, matrix=NullGraphicsMatrix)*


Creates a native brush with a radial gradient.


The brush originates at (*startX*, *startY*) and ends on a circle around (*endX*, *endY*) with the given *radius*.


The gradient may be specified either by its start and end colours *oColor* and *cColor* or by a full set of gradient *stops*.


The version taking  [wx.GraphicsGradientStops](wx.GraphicsGradientStops.html#wx-graphicsgradientstops) is new in wxWidgets 2.9.1.


The ability to apply a transformation matrix to the gradient was added in 3.1.3



Parameters
* **startX** (*wx.Double*) –
* **startY** (*wx.Double*) –
* **endX** (*wx.Double*) –
* **endY** (*wx.Double*) –
* **radius** (*wx.Double*) –
* **oColor** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **cColor** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsBrush](wx.GraphicsBrush.html#wx-graphicsbrush)






---

  



**CreateRadialGradientBrush** *(self, startX, startY, endX, endY, radius, stops, matrix=NullGraphicsMatrix)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **startX** (*wx.Double*) –
* **startY** (*wx.Double*) –
* **endX** (*wx.Double*) –
* **endY** (*wx.Double*) –
* **radius** (*wx.Double*) –
* **stops** ([*wx.GraphicsGradientStops*](wx.GraphicsGradientStops.html#wx.GraphicsGradientStops "wx.GraphicsGradientStops")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsBrush](wx.GraphicsBrush.html#wx-graphicsbrush)






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def CreateSubBitmap(self, bitmap, x, y, w, h) -> 'GraphicsBitmap':
        """ 

`CreateSubBitmap`(*self*, *bitmap*, *x*, *y*, *w*, *h*)[¶](#wx.GraphicsContext.CreateSubBitmap "Permalink to this definition")
Extracts a sub-bitmap from an existing bitmap.



Parameters
* **bitmap** ([*wx.GraphicsBitmap*](wx.GraphicsBitmap.html#wx.GraphicsBitmap "wx.GraphicsBitmap")) –
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –



Return type
 [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap)






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DisableOffset(self) -> None:
        """ 

`DisableOffset`(*self*)[¶](#wx.GraphicsContext.DisableOffset "Permalink to this definition")
Helper to determine if a 0.5 offset should be applied for the drawing operation.




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DrawBitmap(self, *args, **kw) -> None:
        """ 

`DrawBitmap`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.DrawBitmap "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawBitmap** *(self, bmp, x, y, w, h)*


Draws the bitmap.


In case of a mono bitmap, this is treated as a mask and the current brushed is used for filling.



Parameters
* **bmp** ([*wx.GraphicsBitmap*](wx.GraphicsBitmap.html#wx.GraphicsBitmap "wx.GraphicsBitmap")) –
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






---

  



**DrawBitmap** *(self, bmp, x, y, w, h)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **bmp** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DrawEllipse(self, x, y, w, h) -> None:
        """ 

`DrawEllipse`(*self*, *x*, *y*, *w*, *h*)[¶](#wx.GraphicsContext.DrawEllipse "Permalink to this definition")
Draws an ellipse.



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DrawIcon(self, icon, x, y, w, h) -> None:
        """ 

`DrawIcon`(*self*, *icon*, *x*, *y*, *w*, *h*)[¶](#wx.GraphicsContext.DrawIcon "Permalink to this definition")
Draws the icon.



Parameters
* **icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) –
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DrawLines(self, point2Ds, fillStyle=ODDEVEN_RULE) -> None:
        """ 

`DrawLines`(*self*, *point2Ds*, *fillStyle=ODDEVEN\_RULE*)[¶](#wx.GraphicsContext.DrawLines "Permalink to this definition")
Draws a polygon.




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DrawPath(self, path, fillStyle=ODDEVEN_RULE) -> None:
        """ 

`DrawPath`(*self*, *path*, *fillStyle=ODDEVEN\_RULE*)[¶](#wx.GraphicsContext.DrawPath "Permalink to this definition")
Draws the path by first filling and then stroking.



Parameters
* **path** ([*wx.GraphicsPath*](wx.GraphicsPath.html#wx.GraphicsPath "wx.GraphicsPath")) –
* **fillStyle** ([*PolygonFillMode*](wx.PolygonFillMode.enumeration.html "PolygonFillMode")) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DrawRectangle(self, x, y, w, h) -> None:
        """ 

`DrawRectangle`(*self*, *x*, *y*, *w*, *h*)[¶](#wx.GraphicsContext.DrawRectangle "Permalink to this definition")
Draws a rectangle.



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DrawRoundedRectangle(self, x, y, w, h, radius) -> None:
        """ 

`DrawRoundedRectangle`(*self*, *x*, *y*, *w*, *h*, *radius*)[¶](#wx.GraphicsContext.DrawRoundedRectangle "Permalink to this definition")
Draws a rounded rectangle.



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –
* **radius** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def DrawText(self, *args, **kw) -> None:
        """ 

`DrawText`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.DrawText "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DrawText** *(self, str, x, y)*


Draws text at the defined position.



Parameters
* **str** (*string*) –
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –






---

  



**DrawText** *(self, str, x, y, angle)*


Draws text at the defined position.



Parameters
* **str** (*string*) – The text to draw.
* **x** (*wx.Double*) – The x coordinate position to draw the text at.
* **y** (*wx.Double*) – The y coordinate position to draw the text at.
* **angle** (*wx.Double*) – The angle, in radians, relative to the (default) horizontal direction to draw the string.






---

  



**DrawText** *(self, str, x, y, backgroundBrush)*


Draws text at the defined position.



Parameters
* **str** (*string*) – The text to draw.
* **x** (*wx.Double*) – The x coordinate position to draw the text at.
* **y** (*wx.Double*) – The y coordinate position to draw the text at.
* **backgroundBrush** ([*wx.GraphicsBrush*](wx.GraphicsBrush.html#wx.GraphicsBrush "wx.GraphicsBrush")) – Brush to fill the text with.






---

  



**DrawText** *(self, str, x, y, angle, backgroundBrush)*


Draws text at the defined position.



Parameters
* **str** (*string*) – The text to draw.
* **x** (*wx.Double*) – The x coordinate position to draw the text at.
* **y** (*wx.Double*) – The y coordinate position to draw the text at.
* **angle** (*wx.Double*) – The angle, in radians, relative to the (default) horizontal direction to draw the string.
* **backgroundBrush** ([*wx.GraphicsBrush*](wx.GraphicsBrush.html#wx.GraphicsBrush "wx.GraphicsBrush")) – Brush to fill the text with.






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def EnableOffset(self, enable: bool=True) -> None:
        """ 

`EnableOffset`(*self*, *enable=True*)[¶](#wx.GraphicsContext.EnableOffset "Permalink to this definition")
Indicates whether the context should try to offset for pixel boundaries.


This only makes sense on bitmap devices like screen. By default this is turned off.



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def EndDoc(self) -> None:
        """ 

`EndDoc`(*self*)[¶](#wx.GraphicsContext.EndDoc "Permalink to this definition")
Done with that document (relevant only for printing / pdf etc.)




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def EndLayer(self) -> None:
        """ 

`EndLayer`(*self*)[¶](#wx.GraphicsContext.EndLayer "Permalink to this definition")
Composites back the drawings into the context with the opacity given at the [`BeginLayer`](#wx.GraphicsContext.BeginLayer "wx.GraphicsContext.BeginLayer") call.




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def EndPage(self) -> None:
        """ 

`EndPage`(*self*)[¶](#wx.GraphicsContext.EndPage "Permalink to this definition")
Ends the current page (relevant only for printing / pdf etc.)




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def FillPath(self, path, fillStyle=ODDEVEN_RULE) -> None:
        """ 

`FillPath`(*self*, *path*, *fillStyle=ODDEVEN\_RULE*)[¶](#wx.GraphicsContext.FillPath "Permalink to this definition")
Fills the path with the current brush.



Parameters
* **path** ([*wx.GraphicsPath*](wx.GraphicsPath.html#wx.GraphicsPath "wx.GraphicsPath")) –
* **fillStyle** ([*PolygonFillMode*](wx.PolygonFillMode.enumeration.html "PolygonFillMode")) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def Flush(self) -> None:
        """ 

`Flush`(*self*)[¶](#wx.GraphicsContext.Flush "Permalink to this definition")
Make sure that the current content of this context is immediately visible.




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def FromDIP(self, *args, **kw) -> 'Size':
        """ 

`FromDIP`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.FromDIP "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FromDIP** *(self, sz)*


Convert DPI-independent pixel values to the value in pixels appropriate for the graphics context.


See *Window.FromDIP(const* Size& sz) and *DC.FromDIP(const* Size& sz) for more info about converting device independent pixel values.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.7.





---

  



**FromDIP** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**FromDIP** *(self, d)*


Convert DPI-independent value in pixels to the value in pixels appropriate for the graphics context.


This is the same as FromDIP(const Size& sz) overload, but assumes that the resolution is the same in horizontal and vertical directions.



Parameters
**d** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.7.





---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetAntialiasMode(self) -> 'AntialiasMode':
        """ 

`GetAntialiasMode`(*self*)[¶](#wx.GraphicsContext.GetAntialiasMode "Permalink to this definition")
Returns the current shape antialiasing mode.



Return type
 [wx.AntialiasMode](wx.AntialiasMode.enumeration.html#wx-antialiasmode)






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetClipBox(self, x, y, w, h) -> None:
        """ 

`GetClipBox`(*self*, *x*, *y*, *w*, *h*)[¶](#wx.GraphicsContext.GetClipBox "Permalink to this definition")
Returns bounding box of the current clipping region.



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –





New in version 4.1/wxWidgets-3.1.1.




Note


* If clipping region is empty, then empty rectangle is returned (*x*, *y*, *w*, *h* are set to zero).





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetCompositionMode(self) -> 'CompositionMode':
        """ 

`GetCompositionMode`(*self*)[¶](#wx.GraphicsContext.GetCompositionMode "Permalink to this definition")
Returns the current compositing operator.



Return type
 [wx.CompositionMode](wx.CompositionMode.enumeration.html#wx-compositionmode)






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetDPI(self) -> tuple:
        """ 

`GetDPI`(*self*)[¶](#wx.GraphicsContext.GetDPI "Permalink to this definition")
Returns the resolution of the graphics context in device points per inch.



Return type
*tuple*



Returns
( *dpiX*, *dpiY* )






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetInterpolationQuality(self) -> 'InterpolationQuality':
        """ 

`GetInterpolationQuality`(*self*)[¶](#wx.GraphicsContext.GetInterpolationQuality "Permalink to this definition")
Returns the current interpolation quality.



Return type
 [wx.InterpolationQuality](wx.InterpolationQuality.enumeration.html#wx-interpolationquality)






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetNativeContext(self) -> None:
        """ 

`GetNativeContext`(*self*)[¶](#wx.GraphicsContext.GetNativeContext "Permalink to this definition")
Returns the native context (CGContextRef for Core Graphics, Graphics pointer for GDIPlus and cairo\_t pointer for cairo).




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetPartialTextExtents(self, text: str) -> list[float]:
        """ 

`GetPartialTextExtents`(*self*, *text*)[¶](#wx.GraphicsContext.GetPartialTextExtents "Permalink to this definition")
Fills the *widths* array with the widths from the beginning of *text* to the corresponding character of *text*.



Parameters
**text** (*string*) – 



Return type
*list of floats*






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetSize(self) -> tuple:
        """ 

`GetSize`(*self*)[¶](#wx.GraphicsContext.GetSize "Permalink to this definition")
Returns the size of the graphics context in device coordinates.



Return type
*tuple*



Returns
( *width*, *height* )






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetFullTextExtent(self, *args, **kw) -> tuple:
        """ 

`GetFullTextExtent`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.GetFullTextExtent "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetFullTextExtent** *(self, text)*


Gets the dimensions of the string using the currently selected font.



Parameters
**text** (*string*) – The text string to measure.



Return type
*tuple*



Returns
( *width*, *height*, *descent*, *externalLeading* )






---

  



**GetFullTextExtent** *(self, text)*


Gets the dimensions of the string using the currently selected font.



Return type
*tuple*



Returns
( *width*, *height* )






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetTransform(self) -> 'GraphicsMatrix':
        """ 

`GetTransform`(*self*)[¶](#wx.GraphicsContext.GetTransform "Permalink to this definition")
Gets the current transformation matrix of this context.



Return type
 [wx.GraphicsMatrix](wx.GraphicsMatrix.html#wx-graphicsmatrix)






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.GraphicsContext.GetWindow "Permalink to this definition")
Returns the associated window if any.


If this context was created using [`Create`](#wx.GraphicsContext.Create "wx.GraphicsContext.Create") overload taking  [wx.Window](wx.Window.html#wx-window) or  [wx.WindowDC](wx.WindowDC.html#wx-windowdc), this method returns the corresponding window. Otherwise returns `None`.



Return type
 [wx.Window](wx.Window.html#wx-window)



Returns
A possibly `None` window pointer.





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def OffsetEnabled(self) -> bool:
        """ 

`OffsetEnabled`(*self*)[¶](#wx.GraphicsContext.OffsetEnabled "Permalink to this definition")
Helper to determine if a 0.5 offset should be applied for the drawing operation.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def PopState(self) -> None:
        """ 

`PopState`(*self*)[¶](#wx.GraphicsContext.PopState "Permalink to this definition")
Sets current state of the context to the state saved by a preceding call to [`PushState`](#wx.GraphicsContext.PushState "wx.GraphicsContext.PushState") and removes that state from the stack of saved states.



See also


[`PushState`](#wx.GraphicsContext.PushState "wx.GraphicsContext.PushState")





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def PushState(self) -> None:
        """ 

`PushState`(*self*)[¶](#wx.GraphicsContext.PushState "Permalink to this definition")
Push the current state (like transformations, clipping region and quality settings) of the context on a stack.


Multiple balanced calls to [`PushState`](#wx.GraphicsContext.PushState "wx.GraphicsContext.PushState") and [`PopState`](#wx.GraphicsContext.PopState "wx.GraphicsContext.PopState") can be nested.



See also


[`PopState`](#wx.GraphicsContext.PopState "wx.GraphicsContext.PopState")





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def ResetClip(self) -> None:
        """ 

`ResetClip`(*self*)[¶](#wx.GraphicsContext.ResetClip "Permalink to this definition")
Resets the clipping to original shape.




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def Rotate(self, angle: 'Double') -> None:
        """ 

`Rotate`(*self*, *angle*)[¶](#wx.GraphicsContext.Rotate "Permalink to this definition")
Rotates the current transformation matrix (in radians).



Parameters
**angle** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def Scale(self, xScale, yScale) -> None:
        """ 

`Scale`(*self*, *xScale*, *yScale*)[¶](#wx.GraphicsContext.Scale "Permalink to this definition")
Scales the current transformation matrix.



Parameters
* **xScale** (*wx.Double*) –
* **yScale** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def SetAntialiasMode(self, antialias: AntialiasMode) -> bool:
        """ 

`SetAntialiasMode`(*self*, *antialias*)[¶](#wx.GraphicsContext.SetAntialiasMode "Permalink to this definition")
Sets the antialiasing mode, returns `True` if it supported.



Parameters
**antialias** ([*AntialiasMode*](wx.AntialiasMode.enumeration.html "AntialiasMode")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def SetBrush(self, *args, **kw) -> None:
        """ 

`SetBrush`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.SetBrush "Permalink to this definition")
Sets the brush for filling paths.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetBrush** *(self, brush)*



Parameters
**brush** ([*wx.Brush*](wx.Brush.html#wx.Brush "wx.Brush")) – 






---

  



**SetBrush** *(self, brush)*



Parameters
**brush** ([*wx.GraphicsBrush*](wx.GraphicsBrush.html#wx.GraphicsBrush "wx.GraphicsBrush")) – 






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def SetCompositionMode(self, op: CompositionMode) -> bool:
        """ 

`SetCompositionMode`(*self*, *op*)[¶](#wx.GraphicsContext.SetCompositionMode "Permalink to this definition")
Sets the compositing operator, returns `True` if it supported.



Parameters
**op** ([*CompositionMode*](wx.CompositionMode.enumeration.html "CompositionMode")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def SetFont(self, *args, **kw) -> None:
        """ 

`SetFont`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.SetFont "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetFont** *(self, font, colour)*


Sets the font for drawing text.



Parameters
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –





Note


For Direct2D only TrueType fonts can be used.





---

  



**SetFont** *(self, font)*


Sets the font for drawing text.



Parameters
**font** ([*wx.GraphicsFont*](wx.GraphicsFont.html#wx.GraphicsFont "wx.GraphicsFont")) – 






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def SetInterpolationQuality(self, interpolation: InterpolationQuality) -> bool:
        """ 

`SetInterpolationQuality`(*self*, *interpolation*)[¶](#wx.GraphicsContext.SetInterpolationQuality "Permalink to this definition")
Sets the interpolation quality, returns `True` if it is supported.



Parameters
**interpolation** ([*InterpolationQuality*](wx.InterpolationQuality.enumeration.html "InterpolationQuality")) – 



Return type
*bool*





Note


Not implemented in Cairo backend currently.





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def SetPen(self, *args, **kw) -> None:
        """ 

`SetPen`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.SetPen "Permalink to this definition")
Sets the pen used for stroking.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetPen** *(self, pen)*



Parameters
**pen** ([*wx.Pen*](wx.Pen.html#wx.Pen "wx.Pen")) – 






---

  



**SetPen** *(self, pen)*



Parameters
**pen** ([*wx.GraphicsPen*](wx.GraphicsPen.html#wx.GraphicsPen "wx.GraphicsPen")) – 






---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def SetTransform(self, matrix: 'GraphicsMatrix') -> None:
        """ 

`SetTransform`(*self*, *matrix*)[¶](#wx.GraphicsContext.SetTransform "Permalink to this definition")
Sets the current transformation matrix of this context.



Parameters
**matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) – 






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def ShouldOffset(self) -> bool:
        """ 

`ShouldOffset`(*self*)[¶](#wx.GraphicsContext.ShouldOffset "Permalink to this definition")
Helper to determine if a 0.5 offset should be applied for the drawing operation.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def StartDoc(self, message: str) -> bool:
        """ 

`StartDoc`(*self*, *message*)[¶](#wx.GraphicsContext.StartDoc "Permalink to this definition")
Begin a new document (relevant only for printing / pdf etc.) If there is a progress dialog, message will be shown.



Parameters
**message** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def StartPage(self, width=0, height=0) -> None:
        """ 

`StartPage`(*self*, *width=0*, *height=0*)[¶](#wx.GraphicsContext.StartPage "Permalink to this definition")
Opens a new page (relevant only for printing / pdf etc.) with the given size in points.


(If both are null the default page size will be used.)



Parameters
* **width** (*wx.Double*) –
* **height** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def StrokeLine(self, x1, y1, x2, y2) -> None:
        """ 

`StrokeLine`(*self*, *x1*, *y1*, *x2*, *y2*)[¶](#wx.GraphicsContext.StrokeLine "Permalink to this definition")
Strokes a single line.



Parameters
* **x1** (*wx.Double*) –
* **y1** (*wx.Double*) –
* **x2** (*wx.Double*) –
* **y2** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def StrokeLineSegments(self, beginPoint2Ds, endPoint2Ds) -> None:
        """ 

`StrokeLineSegments`(*self*, *beginPoint2Ds*, *endPoint2Ds*)[¶](#wx.GraphicsContext.StrokeLineSegments "Permalink to this definition")
Stroke disconnected lines from begin to end points.




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def StrokeLines(self, point2Ds) -> None:
        """ 

`StrokeLines`(*self*, *point2Ds*)[¶](#wx.GraphicsContext.StrokeLines "Permalink to this definition")
Stroke lines connecting all the points.




            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def StrokePath(self, path: 'GraphicsPath') -> None:
        """ 

`StrokePath`(*self*, *path*)[¶](#wx.GraphicsContext.StrokePath "Permalink to this definition")
Strokes along a path with the current pen.



Parameters
**path** ([*wx.GraphicsPath*](wx.GraphicsPath.html#wx.GraphicsPath "wx.GraphicsPath")) – 






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def ToDIP(self, *args, **kw) -> 'Size':
        """ 

`ToDIP`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsContext.ToDIP "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ToDIP** *(self, sz)*


Convert pixel values of the current graphics context to DPI-independent pixel values.


See *Window.ToDIP(const* Size& sz) and *DC.ToDIP(const* Size& sz) for more info about converting device independent pixel values.



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.7.





---

  



**ToDIP** *(self, pt)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  



**ToDIP** *(self, d)*


Convert pixel values of the current graphics context to DPI-independent pixel values.


This is the same as ToDIP(const Size& sz) overload, but assumes that the resolution is the same in horizontal and vertical directions.



Parameters
**d** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.7.





---

  





            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    def Translate(self, dx, dy) -> None:
        """ 

`Translate`(*self*, *dx*, *dy*)[¶](#wx.GraphicsContext.Translate "Permalink to this definition")
Translates the current transformation matrix.



Parameters
* **dx** (*wx.Double*) –
* **dy** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsContext.html
        """

    AntialiasMode: '_AntialiasMode'  # `AntialiasMode`[¶](#wx.GraphicsContext.AntialiasMode "Permalink to this definition")See [`GetAntialiasMode`](#wx.GraphicsContext.GetAntialiasMode "wx.GraphicsContext.GetAntialiasMode") and [`SetAntialiasMode`](#wx.GraphicsContext.SetAntialiasMode "wx.GraphicsContext.SetAntialiasMode")
    CompositionMode: '_CompositionMode'  # `CompositionMode`[¶](#wx.GraphicsContext.CompositionMode "Permalink to this definition")See [`GetCompositionMode`](#wx.GraphicsContext.GetCompositionMode "wx.GraphicsContext.GetCompositionMode") and [`SetCompositionMode`](#wx.GraphicsContext.SetCompositionMode "wx.GraphicsContext.SetCompositionMode")
    InterpolationQuality: '_InterpolationQuality'  # `InterpolationQuality`[¶](#wx.GraphicsContext.InterpolationQuality "Permalink to this definition")See [`GetInterpolationQuality`](#wx.GraphicsContext.GetInterpolationQuality "wx.GraphicsContext.GetInterpolationQuality") and [`SetInterpolationQuality`](#wx.GraphicsContext.SetInterpolationQuality "wx.GraphicsContext.SetInterpolationQuality")
    NativeContext: None  # `NativeContext`[¶](#wx.GraphicsContext.NativeContext "Permalink to this definition")See [`GetNativeContext`](#wx.GraphicsContext.GetNativeContext "wx.GraphicsContext.GetNativeContext")
    TextExtent: Any  # `TextExtent`[¶](#wx.GraphicsContext.TextExtent "Permalink to this definition")See `GetTextExtent`
    Transform: 'GraphicsMatrix'  # `Transform`[¶](#wx.GraphicsContext.Transform "Permalink to this definition")See [`GetTransform`](#wx.GraphicsContext.GetTransform "wx.GraphicsContext.GetTransform") and [`SetTransform`](#wx.GraphicsContext.SetTransform "wx.GraphicsContext.SetTransform")
    Window: '_Window'  # `Window`[¶](#wx.GraphicsContext.Window "Permalink to this definition")See [`GetWindow`](#wx.GraphicsContext.GetWindow "wx.GraphicsContext.GetWindow")



class GDIObject(Object):
    """ **Possible constructors**:



```
GDIObject()

```


This class allows platforms to implement functionality to optimise GDI
objects, such as Pen, Brush and Font.


  


        Source: https://docs.wxpython.org/wx.GDIObject.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.GDIObject.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.GDIObject.html
        """



class Pen(GDIObject):
    """ **Possible constructors**:



```
Pen()

Pen(info)

Pen(colour, width=1, style=PENSTYLE_SOLID)

Pen(pen)

```


A pen is a drawing tool for drawing outlines.


  


        Source: https://docs.wxpython.org/wx.Pen.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Pen.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


The pen will be uninitialised, and [`IsOk`](#wx.Pen.IsOk "wx.Pen.IsOk") will return `False`.




---

  



**\_\_init\_\_** *(self, info)*


Creates a pen object using the specified pen description.



Parameters
**info** ([*wx.PenInfo*](wx.PenInfo.html#wx.PenInfo "wx.PenInfo")) – 






---

  



**\_\_init\_\_** *(self, colour, width=1, style=PENSTYLE\_SOLID)*


Constructs a pen from a colour object, pen width and style.



Parameters
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – A colour object.
* **width** (*int*) – Pen width. Under Windows, the pen width cannot be greater than 1 if the style is `PENSTYLE_DOT` , `PENSTYLE_LONG_DASH` , `PENSTYLE_SHORT_DASH` , `PENSTYLE_DOT_DASH` , or `PENSTYLE_USER_DASH` .
* **style** ([*PenStyle*](wx.PenStyle.enumeration.html "PenStyle")) – The style may be one of the  [wx.PenStyle](wx.PenStyle.enumeration.html#wx-penstyle) values.





Note


Different versions of Windows and different versions of other platforms support very different subsets of the styles above so handle with care.




See also


[`SetStyle`](#wx.Pen.SetStyle "wx.Pen.SetStyle") , [`SetColour`](#wx.Pen.SetColour "wx.Pen.SetColour") , [`SetWidth`](#wx.Pen.SetWidth "wx.Pen.SetWidth")





---

  



**\_\_init\_\_** *(self, pen)*


Copy constructor, uses [Reference Counting](refcount_overview.html#reference-counting).



Parameters
**pen** ([*wx.Pen*](#wx.Pen "wx.Pen")) – A pointer or reference to a pen to copy.






---

  





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def GetCap(self) -> 'PenCap':
        """ 

`GetCap`(*self*)[¶](#wx.Pen.GetCap "Permalink to this definition")
Returns the pen cap style, which may be one of `CAP_ROUND` , `CAP_PROJECTING` and `CAP_BUTT` .


The default is `CAP_ROUND` .



Return type
 [wx.PenCap](wx.PenCap.enumeration.html#wx-pencap)





See also


[`SetCap`](#wx.Pen.SetCap "wx.Pen.SetCap")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.Pen.GetColour "Permalink to this definition")
Returns a reference to the pen colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





See also


[`SetColour`](#wx.Pen.SetColour "wx.Pen.SetColour")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def GetDashes(self) -> int:
        """ 

`GetDashes`(*self*)[¶](#wx.Pen.GetDashes "Permalink to this definition")
Gets an array of dashes (defined as `char` in X, `DWORD` under Windows).


*dashes* is a pointer to the internal array. Do not deallocate or store this pointer.



Return type
*list of integers*



Returns
The number of dashes associated with this pen.





See also


[`SetDashes`](#wx.Pen.SetDashes "wx.Pen.SetDashes")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def GetJoin(self) -> 'PenJoin':
        """ 

`GetJoin`(*self*)[¶](#wx.Pen.GetJoin "Permalink to this definition")
Returns the pen join style, which may be one of `JOIN_BEVEL` , `JOIN_ROUND` and `JOIN_MITER` .


The default is `JOIN_ROUND` .



Return type
 [wx.PenJoin](wx.PenJoin.enumeration.html#wx-penjoin)





See also


[`SetJoin`](#wx.Pen.SetJoin "wx.Pen.SetJoin")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def GetQuality(self) -> 'PenQuality':
        """ 

`GetQuality`(*self*)[¶](#wx.Pen.GetQuality "Permalink to this definition")
Returns the pen quality.


The default is `PEN_QUALITY_DEFAULT`.



Return type
 [wx.PenQuality](wx.PenQuality.enumeration.html#wx-penquality)





See also


 [wx.PenQuality](wx.PenQuality.enumeration.html#wx-penquality), [`SetQuality`](#wx.Pen.SetQuality "wx.Pen.SetQuality")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def GetStipple(self) -> 'Bitmap':
        """ 

`GetStipple`(*self*)[¶](#wx.Pen.GetStipple "Permalink to this definition")
Gets a pointer to the stipple bitmap.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





See also


[`SetStipple`](#wx.Pen.SetStipple "wx.Pen.SetStipple")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def GetStyle(self) -> 'PenStyle':
        """ 

`GetStyle`(*self*)[¶](#wx.Pen.GetStyle "Permalink to this definition")
Returns the pen style.



Return type
 [wx.PenStyle](wx.PenStyle.enumeration.html#wx-penstyle)





See also


 [wx.Pen](#wx-pen), [`SetStyle`](#wx.Pen.SetStyle "wx.Pen.SetStyle")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.Pen.GetWidth "Permalink to this definition")
Returns the pen width.



Return type
*int*





See also


[`SetWidth`](#wx.Pen.SetWidth "wx.Pen.SetWidth")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def IsNonTransparent(self) -> bool:
        """ 

`IsNonTransparent`(*self*)[¶](#wx.Pen.IsNonTransparent "Permalink to this definition")
Returns `True` if the pen is a valid non-transparent pen.


This method returns `True` if the pen object is initialized and has a non-transparent style. Notice that this should be used instead of simply testing whether [`GetStyle`](#wx.Pen.GetStyle "wx.Pen.GetStyle") returns a style different from `wx.PENSTYLE_TRANSPARENT` if the pen may be invalid as [`GetStyle`](#wx.Pen.GetStyle "wx.Pen.GetStyle") would assert in this case.



Return type
*bool*





New in version 2.9.2..




See also


[`IsTransparent`](#wx.Pen.IsTransparent "wx.Pen.IsTransparent")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Pen.IsOk "Permalink to this definition")
Returns `True` if the pen is initialised.


Notice that an uninitialized pen object can’t be queried for any pen properties and all calls to the accessor methods on it will result in an assert failure.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def IsTransparent(self) -> bool:
        """ 

`IsTransparent`(*self*)[¶](#wx.Pen.IsTransparent "Permalink to this definition")
Returns `True` if the pen is transparent.


A transparent pen is simply a pen with `wx.PENSTYLE_TRANSPARENT` style.


Notice that this function works even for non-initialized pens (for which it returns `False`) unlike tests of the form [`GetStyle`](#wx.Pen.GetStyle "wx.Pen.GetStyle") == `wx.PENSTYLE_TRANSPARENT` which would assert if the pen is invalid.



Return type
*bool*





New in version 2.9.2..




See also


[`IsNonTransparent`](#wx.Pen.IsNonTransparent "wx.Pen.IsNonTransparent")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def SetCap(self, capStyle: PenCap) -> None:
        """ 

`SetCap`(*self*, *capStyle*)[¶](#wx.Pen.SetCap "Permalink to this definition")
Sets the pen cap style, which may be one of `CAP_ROUND` , `CAP_PROJECTING` and `CAP_BUTT` .


The default is `CAP_ROUND` .



Parameters
**capStyle** ([*PenCap*](wx.PenCap.enumeration.html "PenCap")) – 





See also


[`GetCap`](#wx.Pen.GetCap "wx.Pen.GetCap")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def SetColour(self, *args, **kw) -> None:
        """ 

`SetColour`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Pen.SetColour "Permalink to this definition")
The pen’s colour is changed to the given colour.



See also


[`GetColour`](#wx.Pen.GetColour "wx.Pen.GetColour")



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetColour** *(self, colour)*



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






---

  



**SetColour** *(self, red, green, blue)*



Parameters
* **red** (*int*) –
* **green** (*int*) –
* **blue** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def SetDashes(self, dashes: int) -> None:
        """ 

`SetDashes`(*self*, *dashes*)[¶](#wx.Pen.SetDashes "Permalink to this definition")
Associates an array of dash values (defined as `char` in X, `DWORD` under Windows) with the pen.


The array is not deallocated by  [wx.Pen](#wx-pen), but neither must it be deallocated by the calling application until the pen is deleted or this function is called with a `None` array.



Parameters
**dashes** (*list of integers*) – 





See also


[`GetDashes`](#wx.Pen.GetDashes "wx.Pen.GetDashes")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def SetJoin(self, join_style: PenJoin) -> None:
        """ 

`SetJoin`(*self*, *join\_style*)[¶](#wx.Pen.SetJoin "Permalink to this definition")
Sets the pen join style, which may be one of `JOIN_BEVEL` , `JOIN_ROUND` and `JOIN_MITER` .


The default is `JOIN_ROUND` .



Parameters
**join\_style** ([*PenJoin*](wx.PenJoin.enumeration.html "PenJoin")) – 





See also


[`GetJoin`](#wx.Pen.GetJoin "wx.Pen.GetJoin")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def SetQuality(self, quality: PenQuality) -> None:
        """ 

`SetQuality`(*self*, *quality*)[¶](#wx.Pen.SetQuality "Permalink to this definition")
Sets the pen quality.


Explicitly selecting low pen quality may be useful in wxMSW if drawing performance is more important than the exact appearance of the lines drawn with this pen.



Parameters
**quality** ([*PenQuality*](wx.PenQuality.enumeration.html "PenQuality")) – 





New in version 4.1/wxWidgets-3.1.5.




See also


 [wx.PenQuality](wx.PenQuality.enumeration.html#wx-penquality)





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def SetStipple(self, stipple: 'Bitmap') -> None:
        """ 

`SetStipple`(*self*, *stipple*)[¶](#wx.Pen.SetStipple "Permalink to this definition")
Sets the bitmap for stippling.



Parameters
**stipple** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 





See also


[`GetStipple`](#wx.Pen.GetStipple "wx.Pen.GetStipple")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def SetStyle(self, style: PenStyle) -> None:
        """ 

`SetStyle`(*self*, *style*)[¶](#wx.Pen.SetStyle "Permalink to this definition")
Set the pen style.



Parameters
**style** ([*PenStyle*](wx.PenStyle.enumeration.html "PenStyle")) – 





See also


 [wx.Pen](#wx-pen)





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.Pen.SetWidth "Permalink to this definition")
Sets the pen width.



Parameters
**width** (*int*) – 





See also


[`GetWidth`](#wx.Pen.GetWidth "wx.Pen.GetWidth")





            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def _copyFrom(self, other) -> None:
        """ 

`_copyFrom`(*self*, *other*)[¶](#wx.Pen._copyFrom "Permalink to this definition")
For internal use only.




            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.Pen.__ne__ "Permalink to this definition")
Inequality operator.


See reference-counted object comparison for more info.



Parameters
**pen** ([*wx.Pen*](#wx.Pen "wx.Pen")) – 






            Source: https://docs.wxpython.org/wx.Pen.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.Pen.__eq__ "Permalink to this definition")
Equality operator.


See reference-counted object comparison for more info.



Parameters
**pen** ([*wx.Pen*](#wx.Pen "wx.Pen")) – 






            Source: https://docs.wxpython.org/wx.Pen.html
        """

    Cap: 'PenCap'  # `Cap`[¶](#wx.Pen.Cap "Permalink to this definition")See [`GetCap`](#wx.Pen.GetCap "wx.Pen.GetCap") and [`SetCap`](#wx.Pen.SetCap "wx.Pen.SetCap")
    Colour: '_Colour'  # `Colour`[¶](#wx.Pen.Colour "Permalink to this definition")See [`GetColour`](#wx.Pen.GetColour "wx.Pen.GetColour") and [`SetColour`](#wx.Pen.SetColour "wx.Pen.SetColour")
    Dashes: int  # `Dashes`[¶](#wx.Pen.Dashes "Permalink to this definition")See [`GetDashes`](#wx.Pen.GetDashes "wx.Pen.GetDashes") and [`SetDashes`](#wx.Pen.SetDashes "wx.Pen.SetDashes")
    Join: 'PenJoin'  # `Join`[¶](#wx.Pen.Join "Permalink to this definition")See [`GetJoin`](#wx.Pen.GetJoin "wx.Pen.GetJoin") and [`SetJoin`](#wx.Pen.SetJoin "wx.Pen.SetJoin")
    Quality: 'PenQuality'  # `Quality`[¶](#wx.Pen.Quality "Permalink to this definition")See [`GetQuality`](#wx.Pen.GetQuality "wx.Pen.GetQuality") and [`SetQuality`](#wx.Pen.SetQuality "wx.Pen.SetQuality")
    Stipple: 'Bitmap'  # `Stipple`[¶](#wx.Pen.Stipple "Permalink to this definition")See [`GetStipple`](#wx.Pen.GetStipple "wx.Pen.GetStipple") and [`SetStipple`](#wx.Pen.SetStipple "wx.Pen.SetStipple")
    Style: 'PenStyle'  # `Style`[¶](#wx.Pen.Style "Permalink to this definition")See [`GetStyle`](#wx.Pen.GetStyle "wx.Pen.GetStyle") and [`SetStyle`](#wx.Pen.SetStyle "wx.Pen.SetStyle")
    Width: int  # `Width`[¶](#wx.Pen.Width "Permalink to this definition")See [`GetWidth`](#wx.Pen.GetWidth "wx.Pen.GetWidth") and [`SetWidth`](#wx.Pen.SetWidth "wx.Pen.SetWidth")



PENSTYLE_TRANSPARENT: int

class GenericDirCtrl(Control):
    """ **Possible constructors**:



```
GenericDirCtrl()

GenericDirCtrl(parent, id=ID_ANY, dir=DirDialogDefaultFolderStr,
               pos=DefaultPosition, size=DefaultSize, style=DIRCTRL_DEFAULT_STYLE,
               filter="", defaultFilter=0, name=TreeCtrlNameStr)

```


This control can be used to place a directory listing (with optional
files) on an arbitrary window.


  


        Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GenericDirCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, dir=DirDialogDefaultFolderStr, pos=DefaultPosition, size=DefaultSize, style=DIRCTRL\_DEFAULT\_STYLE, filter=””, defaultFilter=0, name=TreeCtrlNameStr)*


Main constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **id** (*wx.WindowID*) – Window identifier.
* **dir** (*string*) – Initial folder.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Size.
* **style** (*long*) – Window style. Please see  [wx.GenericDirCtrl](#wx-genericdirctrl) for a list of possible styles.
* **filter** (*string*) – A filter string, using the same syntax as that for  [wx.FileDialog](wx.FileDialog.html#wx-filedialog). This may be empty if filters are not being used. Example: `"All files (*.*)|*.*|JPEG files (*.jpg)|*.jpg"`
* **defaultFilter** (*int*) – The zero-indexed default filter setting.
* **name** (*string*) – The window name.






---

  





            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def CollapsePath(self, path: str) -> bool:
        """ 

`CollapsePath`(*self*, *path*)[¶](#wx.GenericDirCtrl.CollapsePath "Permalink to this definition")
Collapse the given *path*.



Parameters
**path** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def CollapseTree(self) -> None:
        """ 

`CollapseTree`(*self*)[¶](#wx.GenericDirCtrl.CollapseTree "Permalink to this definition")
Collapses the entire tree.




            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def Create(self, parent, id=ID_ANY, dir=DirDialogDefaultFolderStr, pos=DefaultPosition, size=DefaultSize, style=DIRCTRL_DEFAULT_STYLE, filter="", defaultFilter=0, name=TreeCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *dir=DirDialogDefaultFolderStr*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DIRCTRL\_DEFAULT\_STYLE*, *filter=""*, *defaultFilter=0*, *name=TreeCtrlNameStr*)[¶](#wx.GenericDirCtrl.Create "Permalink to this definition")
Create function for two-step construction.


See  [wx.GenericDirCtrl](#wx-genericdirctrl) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **dir** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **filter** (*string*) –
* **defaultFilter** (*int*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def ExpandPath(self, path: str) -> bool:
        """ 

`ExpandPath`(*self*, *path*)[¶](#wx.GenericDirCtrl.ExpandPath "Permalink to this definition")
Tries to expand as much of the given *path* as possible, so that the filename or directory is visible in the tree control.



Parameters
**path** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.GenericDirCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetDefaultPath(self) -> str:
        """ 

`GetDefaultPath`(*self*)[¶](#wx.GenericDirCtrl.GetDefaultPath "Permalink to this definition")
Gets the default path.



Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetFilePath(self) -> str:
        """ 

`GetFilePath`(*self*)[¶](#wx.GenericDirCtrl.GetFilePath "Permalink to this definition")
Gets selected filename path only (else empty string).


This function doesn’t count a directory as a selection.



Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetFilePaths(self, paths: list[str]) -> None:
        """ 

`GetFilePaths`(*self*, *paths*)[¶](#wx.GenericDirCtrl.GetFilePaths "Permalink to this definition")
Fills the array *paths* with the currently selected filepaths.


This function doesn’t count a directory as a selection.



Parameters
**paths** (*list of strings*) – 






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetFilter(self) -> str:
        """ 

`GetFilter`(*self*)[¶](#wx.GenericDirCtrl.GetFilter "Permalink to this definition")
Returns the filter string.



Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetFilterIndex(self) -> int:
        """ 

`GetFilterIndex`(*self*)[¶](#wx.GenericDirCtrl.GetFilterIndex "Permalink to this definition")
Returns the current filter index (zero-based).



Return type
*int*






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetFilterListCtrl(self) -> 'DirFilterListCtrl':
        """ 

`GetFilterListCtrl`(*self*)[¶](#wx.GenericDirCtrl.GetFilterListCtrl "Permalink to this definition")
Returns a pointer to the filter list control (if present).



Return type
 [wx.DirFilterListCtrl](wx.DirFilterListCtrl.html#wx-dirfilterlistctrl)






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetPath(self, *args, **kw) -> str:
        """ 

`GetPath`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GenericDirCtrl.GetPath "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetPath** *(self)*


Gets the currently-selected directory or filename.



Return type
`string`






---

  



**GetPath** *(self, itemId)*


Gets the path corresponding to the given tree control item.



Parameters
**itemId** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
`string`





New in version 2.9.5.





---

  





            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetPaths(self) -> list:
        """ 

`GetPaths`(*self*)[¶](#wx.GenericDirCtrl.GetPaths "Permalink to this definition")
Returns a list of the currently selected paths.



Return type
*list*






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetRootId(self) -> 'TreeItemId':
        """ 

`GetRootId`(*self*)[¶](#wx.GenericDirCtrl.GetRootId "Permalink to this definition")
Returns the root id for the tree control.



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def GetTreeCtrl(self) -> 'TreeCtrl':
        """ 

`GetTreeCtrl`(*self*)[¶](#wx.GenericDirCtrl.GetTreeCtrl "Permalink to this definition")
Returns a pointer to the tree control.



Return type
 [wx.TreeCtrl](wx.TreeCtrl.html#wx-treectrl)






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def Init(self) -> None:
        """ 

`Init`(*self*)[¶](#wx.GenericDirCtrl.Init "Permalink to this definition")
Initializes variables.




            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def ReCreateTree(self) -> None:
        """ 

`ReCreateTree`(*self*)[¶](#wx.GenericDirCtrl.ReCreateTree "Permalink to this definition")
Collapse and expand the tree, thus re-creating it from scratch.


May be used to update the displayed directory content.




            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def SelectPath(self, path, select=True) -> None:
        """ 

`SelectPath`(*self*, *path*, *select=True*)[¶](#wx.GenericDirCtrl.SelectPath "Permalink to this definition")
Selects the given item.


In multiple selection controls, can be also used to deselect a currently selected item if the value of `select` is `False`. Existing selections are not changed. Only visible items can be (de)selected, otherwise use [`ExpandPath`](#wx.GenericDirCtrl.ExpandPath "wx.GenericDirCtrl.ExpandPath") .



Parameters
* **path** (*string*) –
* **select** (*bool*) –






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def SelectPaths(self, paths: list[str]) -> None:
        """ 

`SelectPaths`(*self*, *paths*)[¶](#wx.GenericDirCtrl.SelectPaths "Permalink to this definition")
Selects only the specified paths, clearing any previous selection.


Only supported when `wx.DIRCTRL_MULTIPLE` is set.



Parameters
**paths** (*list of strings*) – 






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def SetDefaultPath(self, path: str) -> None:
        """ 

`SetDefaultPath`(*self*, *path*)[¶](#wx.GenericDirCtrl.SetDefaultPath "Permalink to this definition")
Sets the default path.



Parameters
**path** (*string*) – 






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def SetFilter(self, filter: str) -> None:
        """ 

`SetFilter`(*self*, *filter*)[¶](#wx.GenericDirCtrl.SetFilter "Permalink to this definition")
Sets the filter string.



Parameters
**filter** (*string*) – 






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def SetFilterIndex(self, n: int) -> None:
        """ 

`SetFilterIndex`(*self*, *n*)[¶](#wx.GenericDirCtrl.SetFilterIndex "Permalink to this definition")
Sets the current filter index (zero-based).



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def SetPath(self, path: str) -> None:
        """ 

`SetPath`(*self*, *path*)[¶](#wx.GenericDirCtrl.SetPath "Permalink to this definition")
Sets the current path.



Parameters
**path** (*string*) – 






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def ShowHidden(self, show: bool) -> None:
        """ 

`ShowHidden`(*self*, *show*)[¶](#wx.GenericDirCtrl.ShowHidden "Permalink to this definition")

Parameters
**show** (*bool*) – If `True`, hidden folders and files will be displayed by the control. If `False`, they will not be displayed.






            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    def UnselectAll(self) -> None:
        """ 

`UnselectAll`(*self*)[¶](#wx.GenericDirCtrl.UnselectAll "Permalink to this definition")
Removes the selection from all currently selected items.




            Source: https://docs.wxpython.org/wx.GenericDirCtrl.html
        """

    DefaultPath: str  # `DefaultPath`[¶](#wx.GenericDirCtrl.DefaultPath "Permalink to this definition")See [`GetDefaultPath`](#wx.GenericDirCtrl.GetDefaultPath "wx.GenericDirCtrl.GetDefaultPath") and [`SetDefaultPath`](#wx.GenericDirCtrl.SetDefaultPath "wx.GenericDirCtrl.SetDefaultPath")
    FilePath: str  # `FilePath`[¶](#wx.GenericDirCtrl.FilePath "Permalink to this definition")See [`GetFilePath`](#wx.GenericDirCtrl.GetFilePath "wx.GenericDirCtrl.GetFilePath")
    Filter: str  # `Filter`[¶](#wx.GenericDirCtrl.Filter "Permalink to this definition")See [`GetFilter`](#wx.GenericDirCtrl.GetFilter "wx.GenericDirCtrl.GetFilter") and [`SetFilter`](#wx.GenericDirCtrl.SetFilter "wx.GenericDirCtrl.SetFilter")
    FilterIndex: int  # `FilterIndex`[¶](#wx.GenericDirCtrl.FilterIndex "Permalink to this definition")See [`GetFilterIndex`](#wx.GenericDirCtrl.GetFilterIndex "wx.GenericDirCtrl.GetFilterIndex") and [`SetFilterIndex`](#wx.GenericDirCtrl.SetFilterIndex "wx.GenericDirCtrl.SetFilterIndex")
    FilterListCtrl: 'DirFilterListCtrl'  # `FilterListCtrl`[¶](#wx.GenericDirCtrl.FilterListCtrl "Permalink to this definition")See [`GetFilterListCtrl`](#wx.GenericDirCtrl.GetFilterListCtrl "wx.GenericDirCtrl.GetFilterListCtrl")
    Path: str  # `Path`[¶](#wx.GenericDirCtrl.Path "Permalink to this definition")See [`GetPath`](#wx.GenericDirCtrl.GetPath "wx.GenericDirCtrl.GetPath") and [`SetPath`](#wx.GenericDirCtrl.SetPath "wx.GenericDirCtrl.SetPath")
    Paths: list  # `Paths`[¶](#wx.GenericDirCtrl.Paths "Permalink to this definition")See [`GetPaths`](#wx.GenericDirCtrl.GetPaths "wx.GenericDirCtrl.GetPaths")
    RootId: 'TreeItemId'  # `RootId`[¶](#wx.GenericDirCtrl.RootId "Permalink to this definition")See [`GetRootId`](#wx.GenericDirCtrl.GetRootId "wx.GenericDirCtrl.GetRootId")
    TreeCtrl: '_TreeCtrl'  # `TreeCtrl`[¶](#wx.GenericDirCtrl.TreeCtrl "Permalink to this definition")See [`GetTreeCtrl`](#wx.GenericDirCtrl.GetTreeCtrl "wx.GenericDirCtrl.GetTreeCtrl")



DIRCTRL_DIR_ONLY: int  # Only show directories, and not files.

DIRCTRL_3D_INTERNAL: int  # Use 3D borders for internal controls. This is the default.

DIRCTRL_SELECT_FIRST: int  # When setting the default path, select the first file in the directory.

DIRCTRL_SHOW_FILTERS: int  # Show the drop-down filter list.

DIRCTRL_EDIT_LABELS: int  # Allow the folder and file labels to be editable.

DIRCTRL_MULTIPLE: int  # Allows multiple files and folders to be selected. ^^

EVT_DIRCTRL_SELECTIONCHANGED: int  # Selected directory has changed. Processes a  wxEVT_DIRCTRL_SELECTIONCHANGED   event type. Notice that this event is generated even for the changes done by the program itself and not only those done by the user. Available since wxWidgets 2.9.5.

EVT_DIRCTRL_FILEACTIVATED: int  # The user activated a file by double-clicking or pressing Enter. Available since wxWidgets 2.9.5. ^^

class GenericDragImage(Object):
    """ **Possible constructors**:



```
GenericDragImage()

GenericDragImage(image, cursor=NullCursor)

GenericDragImage(image, cursor=NullCursor)

GenericDragImage(text, cursor=NullCursor)

GenericDragImage(treeCtrl, id)

GenericDragImage(listCtrl, id)

```


This class is used when you wish to drag an object on the screen, and
a simple cursor is not enough.


  


        Source: https://docs.wxpython.org/wx.GenericDragImage.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GenericDragImage.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, image, cursor=NullCursor)*


Constructs a drag image from a bitmap and optional cursor.



Parameters
* **image** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – Bitmap to be used as the drag image. The bitmap can have a mask.
* **cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – Optional cursor to combine with the image.






---

  



**\_\_init\_\_** *(self, image, cursor=NullCursor)*


Constructs a drag image from an icon and optional cursor.



Parameters
* **image** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – Icon to be used as the drag image.
* **cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – Optional cursor to combine with the image.






---

  



**\_\_init\_\_** *(self, text, cursor=NullCursor)*


Constructs a drag image from a text string and optional cursor.



Parameters
* **text** (*string*) – Text used to construct a drag image.
* **cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – Optional cursor to combine with the image.






---

  



**\_\_init\_\_** *(self, treeCtrl, id)*


Constructs a drag image from the text in the given tree control item, and optional cursor.



Parameters
* **treeCtrl** ([*wx.TreeCtrl*](wx.TreeCtrl.html#wx.TreeCtrl "wx.TreeCtrl")) – Tree control for constructing a tree drag image.
* **id** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – Tree control item id.






---

  



**\_\_init\_\_** *(self, listCtrl, id)*


Constructs a drag image from the text in the given list control item, and optional cursor.



Parameters
* **listCtrl** ([*wx.ListCtrl*](wx.ListCtrl.html#wx.ListCtrl "wx.ListCtrl")) – List control for constructing a list drag image.
* **id** (*long*) – List control item id.






---

  





            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """

    def BeginDrag(self, *args, **kw) -> bool:
        """ 

`BeginDrag`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GenericDragImage.BeginDrag "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**BeginDrag** *(self, hotspot, window, fullScreen=False, rect=None)*


Start dragging the image, in a window or full screen.


You need to then call [`Show`](#wx.GenericDragImage.Show "wx.GenericDragImage.Show") and [`Move`](#wx.GenericDragImage.Move "wx.GenericDragImage.Move") to show the image on the screen. Call [`EndDrag`](#wx.GenericDragImage.EndDrag "wx.GenericDragImage.EndDrag") when the drag has finished.


Note that this call automatically calls CaptureMouse().



Parameters
* **hotspot** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The location of the drag position relative to the upper-left corner of the image.
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window that captures the mouse, and within which the dragging is limited unless fullScreen is `True`.
* **fullScreen** (*bool*) – If `True`, specifies that the drag will be visible over the full screen, or over as much of the screen as is specified by rect. Note that the mouse will still be captured in window.
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – If not `None`, specifies the rectangle (in screen coordinates) that bounds the dragging operation. Specifying this can make the operation more efficient by cutting down on the area under consideration, and it can also make a visual difference since the drag is clipped to this area.



Return type
*bool*






---

  



**BeginDrag** *(self, hotspot, window, boundingWindow)*


Start dragging the image, using the first window to capture the mouse and the second to specify the bounding area.


This form is equivalent to using the first form, but more convenient than working out the bounding rectangle explicitly.


You need to then call [`Show`](#wx.GenericDragImage.Show "wx.GenericDragImage.Show") and [`Move`](#wx.GenericDragImage.Move "wx.GenericDragImage.Move") to show the image on the screen. Call [`EndDrag`](#wx.GenericDragImage.EndDrag "wx.GenericDragImage.EndDrag") when the drag has finished.


Note that this call automatically calls CaptureMouse().



Parameters
* **hotspot** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The location of the drag position relative to the upper-left corner of the image.
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window that captures the mouse, and within which the dragging is limited.
* **boundingWindow** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Specifies the area within which the drag occurs.



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """

    def DoDrawImage(self, dc, pos) -> bool:
        """ 

`DoDrawImage`(*self*, *dc*, *pos*)[¶](#wx.GenericDragImage.DoDrawImage "Permalink to this definition")
Draws the image on the device context with top-left corner at the given position.


This function is only available with GenericDragImage, to allow applications to draw their own image instead of using an actual bitmap. If you override this function, you must also override [`GetImageRect`](#wx.GenericDragImage.GetImageRect "wx.GenericDragImage.GetImageRect") .



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """

    def EndDrag(self) -> bool:
        """ 

`EndDrag`(*self*)[¶](#wx.GenericDragImage.EndDrag "Permalink to this definition")
Call this when the drag has finished.



Return type
*bool*





Note


This function automatically releases mouse capture.





            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """

    def GetImageRect(self, pos: Union[tuple[int, int], 'Point']) -> 'Rect':
        """ 

`GetImageRect`(*self*, *pos*)[¶](#wx.GenericDragImage.GetImageRect "Permalink to this definition")
Returns the rectangle enclosing the image, assuming that the image is drawn with its top-left corner at the given point.


This function is available in GenericDragImage only, and may be overridden (together with [`DoDrawImage`](#wx.GenericDragImage.DoDrawImage "wx.GenericDragImage.DoDrawImage") ) to provide a virtual drawing capability.



Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """

    def Hide(self) -> bool:
        """ 

`Hide`(*self*)[¶](#wx.GenericDragImage.Hide "Permalink to this definition")
Hides the image.


You may wish to call this before updating the window contents (perhaps highlighting an item). Then call [`Move`](#wx.GenericDragImage.Move "wx.GenericDragImage.Move") and [`Show`](#wx.GenericDragImage.Show "wx.GenericDragImage.Show") .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """

    def Move(self, pt: Union[tuple[int, int], 'Point']) -> bool:
        """ 

`Move`(*self*, *pt*)[¶](#wx.GenericDragImage.Move "Permalink to this definition")
Call this to move the image to a new position.


The image will only be shown if [`Show`](#wx.GenericDragImage.Show "wx.GenericDragImage.Show") has been called previously (for example at the start of the drag).



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The position in client coordinates (relative to the window specified in [`BeginDrag`](#wx.GenericDragImage.BeginDrag "wx.GenericDragImage.BeginDrag") ).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """

    def Show(self) -> bool:
        """ 

`Show`(*self*)[¶](#wx.GenericDragImage.Show "Permalink to this definition")
Shows the image.


Call this at least once when dragging.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """

    def UpdateBackingFromWindow(self, windowDC, destDC, sourceRect, destRect) -> bool:
        """ 

`UpdateBackingFromWindow`(*self*, *windowDC*, *destDC*, *sourceRect*, *destRect*)[¶](#wx.GenericDragImage.UpdateBackingFromWindow "Permalink to this definition")
Override this if you wish to draw the window contents to the backing bitmap yourself.


This can be desirable if you wish to avoid flicker by not having to redraw the updated window itself just before dragging, which can cause a flicker just as the drag starts. Instead, paint the drag image’s backing bitmap to show the appropriate graphic *minus* the objects to be dragged, and leave the window itself to be updated by the drag image. This can provide eerily smooth, flicker-free drag behaviour.


The default implementation copies the window contents to the backing bitmap. A new implementation will normally copy information from another source, such as from its own backing bitmap if it has one, or directly from internal data structures.


This function is available in GenericDragImage only.



Parameters
* **windowDC** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **destDC** ([*wx.MemoryDC*](wx.MemoryDC.html#wx.MemoryDC "wx.MemoryDC")) –
* **sourceRect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **destRect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericDragImage.html
        """



class GenericMessageDialog(Dialog):
    """ **Possible constructors**:



```
GenericMessageDialog(parent, message, caption=MessageBoxCaptionStr,
                     style=OK|CENTRE, pos=DefaultPosition)

```


This class represents a dialog that shows a single or multi-line
message, with a choice of `wx.OK`, Yes, No and Cancel buttons.


  


        Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
    """
    def __init__(self, parent, message, caption=MessageBoxCaptionStr, style=OK|CENTRE, pos=DefaultPosition) -> None:
        """ 

`__init__`(*self*, *parent*, *message*, *caption=MessageBoxCaptionStr*, *style=OK|CENTRE*, *pos=DefaultPosition*)[¶](#wx.GenericMessageDialog.__init__ "Permalink to this definition")
Constructor specifying the message box properties.


Use [`ShowModal`](#wx.GenericMessageDialog.ShowModal "wx.GenericMessageDialog.ShowModal") to show the dialog.


*style* may be a bit list of the identifiers described above.


Notice that not all styles are compatible: only one of `OK` and `YES_NO` may be specified (and one of them must be specified) and at most one default button style can be used and it is only valid if the corresponding button is shown in the message box.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show in the dialog.
* **caption** (*string*) – The dialog title.
* **style** (*long*) – Combination of style flags described above.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position (ignored under MSW).






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def AddMessageDialogCheckBox(self, sizer: 'Sizer') -> None:
        """ 

`AddMessageDialogCheckBox`(*self*, *sizer*)[¶](#wx.GenericMessageDialog.AddMessageDialogCheckBox "Permalink to this definition")
Can be overridden to provide more contents for the dialog



Parameters
**sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – 






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def AddMessageDialogDetails(self, sizer: 'Sizer') -> None:
        """ 

`AddMessageDialogDetails`(*self*, *sizer*)[¶](#wx.GenericMessageDialog.AddMessageDialogDetails "Permalink to this definition")
Can be overridden to provide more contents for the dialog



Parameters
**sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – 






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetCancelLabel(self) -> str:
        """ 

`GetCancelLabel`(*self*)[¶](#wx.GenericMessageDialog.GetCancelLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetCaption(self) -> str:
        """ 

`GetCaption`(*self*)[¶](#wx.GenericMessageDialog.GetCaption "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.GenericMessageDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetEffectiveIcon(self) -> int:
        """ 

`GetEffectiveIcon`(*self*)[¶](#wx.GenericMessageDialog.GetEffectiveIcon "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetExtendedMessage(self) -> str:
        """ 

`GetExtendedMessage`(*self*)[¶](#wx.GenericMessageDialog.GetExtendedMessage "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetHelpLabel(self) -> str:
        """ 

`GetHelpLabel`(*self*)[¶](#wx.GenericMessageDialog.GetHelpLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetMessage(self) -> str:
        """ 

`GetMessage`(*self*)[¶](#wx.GenericMessageDialog.GetMessage "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetMessageDialogStyle(self) -> int:
        """ 

`GetMessageDialogStyle`(*self*)[¶](#wx.GenericMessageDialog.GetMessageDialogStyle "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetNoLabel(self) -> str:
        """ 

`GetNoLabel`(*self*)[¶](#wx.GenericMessageDialog.GetNoLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetOKLabel(self) -> str:
        """ 

`GetOKLabel`(*self*)[¶](#wx.GenericMessageDialog.GetOKLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def GetYesLabel(self) -> str:
        """ 

`GetYesLabel`(*self*)[¶](#wx.GenericMessageDialog.GetYesLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def HasCustomLabels(self) -> bool:
        """ 

`HasCustomLabels`(*self*)[¶](#wx.GenericMessageDialog.HasCustomLabels "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def SetExtendedMessage(self, extendedMessage: str) -> None:
        """ 

`SetExtendedMessage`(*self*, *extendedMessage*)[¶](#wx.GenericMessageDialog.SetExtendedMessage "Permalink to this definition")
Sets the extended message for the dialog: this message is usually an extension of the short message specified in the constructor or set with [`SetMessage`](#wx.GenericMessageDialog.SetMessage "wx.GenericMessageDialog.SetMessage") .


If it is set, the main message appears highlighted – if supported – and this message appears beneath it in normal font. On the platforms which don’t support extended messages, it is simply appended to the normal message with an empty line separating them.



Parameters
**extendedMessage** (*string*) – 





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def SetHelpLabel(self, help: MessageDialogButtonLabel) -> bool:
        """ 

`SetHelpLabel`(*self*, *help*)[¶](#wx.GenericMessageDialog.SetHelpLabel "Permalink to this definition")
Sets the label for the Help button.


Please see the remarks in [`SetYesNoLabels`](#wx.GenericMessageDialog.SetYesNoLabels "wx.GenericMessageDialog.SetYesNoLabels") documentation.


Notice that changing the label of the help button resets its special status (if any, this depends on the platform) and it will be treated just like another button in this case.



Parameters
**help** (*MessageDialogButtonLabel*) – 



Return type
*bool*





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def SetMessage(self, message: str) -> None:
        """ 

`SetMessage`(*self*, *message*)[¶](#wx.GenericMessageDialog.SetMessage "Permalink to this definition")
Sets the message shown by the dialog.



Parameters
**message** (*string*) – 





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def SetOKCancelLabels(self, ok, cancel) -> bool:
        """ 

`SetOKCancelLabels`(*self*, *ok*, *cancel*)[¶](#wx.GenericMessageDialog.SetOKCancelLabels "Permalink to this definition")
Overrides the default labels of the `wx.OK` and Cancel buttons.


Please see the remarks in [`SetYesNoLabels`](#wx.GenericMessageDialog.SetYesNoLabels "wx.GenericMessageDialog.SetYesNoLabels") documentation.



Parameters
* **ok** (*MessageDialogButtonLabel*) –
* **cancel** (*MessageDialogButtonLabel*) –



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def SetOKLabel(self, ok: MessageDialogButtonLabel) -> bool:
        """ 

`SetOKLabel`(*self*, *ok*)[¶](#wx.GenericMessageDialog.SetOKLabel "Permalink to this definition")
Overrides the default label of the `wx.OK` button.


Please see the remarks in [`SetYesNoLabels`](#wx.GenericMessageDialog.SetYesNoLabels "wx.GenericMessageDialog.SetYesNoLabels") documentation.



Parameters
**ok** (*MessageDialogButtonLabel*) – 



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def SetYesNoCancelLabels(self, yes, no, cancel) -> bool:
        """ 

`SetYesNoCancelLabels`(*self*, *yes*, *no*, *cancel*)[¶](#wx.GenericMessageDialog.SetYesNoCancelLabels "Permalink to this definition")
Overrides the default labels of the Yes, No and Cancel buttons.


Please see the remarks in [`SetYesNoLabels`](#wx.GenericMessageDialog.SetYesNoLabels "wx.GenericMessageDialog.SetYesNoLabels") documentation.



Parameters
* **yes** (*MessageDialogButtonLabel*) –
* **no** (*MessageDialogButtonLabel*) –
* **cancel** (*MessageDialogButtonLabel*) –



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def SetYesNoLabels(self, yes, no) -> bool:
        """ 

`SetYesNoLabels`(*self*, *yes*, *no*)[¶](#wx.GenericMessageDialog.SetYesNoLabels "Permalink to this definition")
Overrides the default labels of the Yes and No buttons.


The arguments of this function can be either strings or one of the standard identifiers, such as `ID_APPLY` or `ID_OPEN` . Notice that even if the label is specified as an identifier, the return value of the dialog [`ShowModal`](#wx.GenericMessageDialog.ShowModal "wx.GenericMessageDialog.ShowModal") method still remains one of `ID_OK` , `ID_CANCEL` , `ID_YES` or `ID_NO` values, i.e. this identifier changes only the label appearance but not the return code generated by the button. It is possible to mix stock identifiers and string labels in the same function call, for example:



```
dlg = wx.MessageDialog(parent, message, caption)
dlg.SetYesNoLabels(wx.ID_SAVE, "&Don't save")

```


Also notice that this function is not currently available on all platforms (although as of wxWidgets 2.9.0 it is implemented in all major ports), so it may return `False` to indicate that the labels couldn’t be changed. If it returns `True`, the labels were set successfully.


Typically, if the function was used successfully, the main dialog message may need to be changed, e.g.:



```
dlg = wx.MessageDialog(parent, message, caption)
if dlg.SetYesNoLabels("&Quit", "&Don't quit"):
    dlg.SetMessage("What do you want to do?")
else: # buttons have standard "Yes"/"No" values, so rephrase the question
    dlg.SetMessage("Do you really want to quit?")

```



Parameters
* **yes** (*MessageDialogButtonLabel*) –
* **no** (*MessageDialogButtonLabel*) –



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.GenericMessageDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning one of `wx.ID_OK`, `wx.ID_CANCEL`, `wx.ID_YES`, `wx.ID_NO` or `wx.ID_HELP`.


Notice that this method returns the identifier of the button which was clicked unlike [`wx.MessageBox`](wx.functions.html#wx.MessageBox "wx.MessageBox") function.



Return type
*int*






            Source: https://docs.wxpython.org/wx.GenericMessageDialog.html
        """

    CancelLabel: str  # `CancelLabel`[¶](#wx.GenericMessageDialog.CancelLabel "Permalink to this definition")See [`GetCancelLabel`](#wx.GenericMessageDialog.GetCancelLabel "wx.GenericMessageDialog.GetCancelLabel")
    Caption: str  # `Caption`[¶](#wx.GenericMessageDialog.Caption "Permalink to this definition")See [`GetCaption`](#wx.GenericMessageDialog.GetCaption "wx.GenericMessageDialog.GetCaption")
    EffectiveIcon: int  # `EffectiveIcon`[¶](#wx.GenericMessageDialog.EffectiveIcon "Permalink to this definition")See [`GetEffectiveIcon`](#wx.GenericMessageDialog.GetEffectiveIcon "wx.GenericMessageDialog.GetEffectiveIcon")
    ExtendedMessage: str  # `ExtendedMessage`[¶](#wx.GenericMessageDialog.ExtendedMessage "Permalink to this definition")See [`GetExtendedMessage`](#wx.GenericMessageDialog.GetExtendedMessage "wx.GenericMessageDialog.GetExtendedMessage") and [`SetExtendedMessage`](#wx.GenericMessageDialog.SetExtendedMessage "wx.GenericMessageDialog.SetExtendedMessage")
    HelpLabel: str  # `HelpLabel`[¶](#wx.GenericMessageDialog.HelpLabel "Permalink to this definition")See [`GetHelpLabel`](#wx.GenericMessageDialog.GetHelpLabel "wx.GenericMessageDialog.GetHelpLabel") and [`SetHelpLabel`](#wx.GenericMessageDialog.SetHelpLabel "wx.GenericMessageDialog.SetHelpLabel")
    Message: str  # `Message`[¶](#wx.GenericMessageDialog.Message "Permalink to this definition")See [`GetMessage`](#wx.GenericMessageDialog.GetMessage "wx.GenericMessageDialog.GetMessage") and [`SetMessage`](#wx.GenericMessageDialog.SetMessage "wx.GenericMessageDialog.SetMessage")
    MessageDialogStyle: int  # `MessageDialogStyle`[¶](#wx.GenericMessageDialog.MessageDialogStyle "Permalink to this definition")See [`GetMessageDialogStyle`](#wx.GenericMessageDialog.GetMessageDialogStyle "wx.GenericMessageDialog.GetMessageDialogStyle")
    NoLabel: str  # `NoLabel`[¶](#wx.GenericMessageDialog.NoLabel "Permalink to this definition")See [`GetNoLabel`](#wx.GenericMessageDialog.GetNoLabel "wx.GenericMessageDialog.GetNoLabel")
    OKLabel: str  # `OKLabel`[¶](#wx.GenericMessageDialog.OKLabel "Permalink to this definition")See [`GetOKLabel`](#wx.GenericMessageDialog.GetOKLabel "wx.GenericMessageDialog.GetOKLabel") and [`SetOKLabel`](#wx.GenericMessageDialog.SetOKLabel "wx.GenericMessageDialog.SetOKLabel")
    YesLabel: str  # `YesLabel`[¶](#wx.GenericMessageDialog.YesLabel "Permalink to this definition")See [`GetYesLabel`](#wx.GenericMessageDialog.GetYesLabel "wx.GenericMessageDialog.GetYesLabel")



YES_NO: int  # Puts Yes and No buttons in the message box. It is recommended to always use  CANCEL   with this style as otherwise the message box won’t have a close button under wxMSW and the user will be forced to answer it.

CANCEL_DEFAULT: int  # Makes the “Cancel” button default, can only be used with  CANCEL . This style is currently not supported (and ignored) in wxOSX.

YES_DEFAULT: int  # Makes the “Yes” button default, this is the default behaviour and this flag exists solely for symmetry with  NO_DEFAULT .

OK_DEFAULT: int  # Makes the “wx.OK” button default, this is the default behaviour and this flag exists solely for symmetry with  CANCEL_DEFAULT .

ICON_NONE: int  # Displays no icon in the dialog if possible (an icon might still be displayed if the current platform mandates its use). This style may be used to prevent the dialog from using the default icon based on  YES_NO   presence as explained in   ICON_QUESTION   and   ICON_INFORMATION   documentation below.

ICON_ERROR: int  # Displays an error icon in the dialog.

ICON_WARNING: int  # Displays a warning icon in the dialog. This style should be used for informative warnings or, in combination with  YES_NO   or   CANCEL , for questions that have potentially serious consequences (caution icon is used on macOS in this case).

ICON_QUESTION: int  # Displays a question mark symbol. This icon is automatically used with  YES_NO   so it’s usually unnecessary to specify it explicitly. This style is not supported for message dialogs under wxMSW when a task dialog is used to implement them (i.e. when running under Windows Vista or later) because  Microsoft guidelines  indicate that no icon should be used for routine confirmations. If it is specified, no icon will be displayed.

ICON_INFORMATION: int  # Displays an information symbol. This icon is used by default if  YES_NO   is not given so it is usually unnecessary to specify it explicitly.

ICON_EXCLAMATION: int  # Alias for  ICON_WARNING .

ICON_HAND: int  # Alias for  ICON_ERROR .

ICON_AUTH_NEEDED: int  # Displays an authentication needed symbol. This style is only supported for message dialogs under wxMSW when a task dialog is used to implement them (i.e. when running under Windows Vista or later). In other cases the default icon selection logic will be used. Note this can be combined with other styles to provide a fallback. For instance, using wx.ICON_AUTH_NEEDED | wx.ICON_QUESTION will show a shield symbol on Windows Vista or above and a question symbol on other platforms. Available since wxWidgets 2.9.5

CENTRE: int  # Centre the message box on its parent or on the screen if parent is not specified. Setting this style under MSW makes no differences as the dialog is always centered on the parent. ^^

class GenericProgressDialog(Dialog):
    """ **Possible constructors**:



```
GenericProgressDialog(title, message, maximum=100, parent=None,
                      style=PD_AUTO_HIDE|PD_APP_MODAL)

```


This class represents a dialog that shows a short message and a
progress bar.


  


        Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
    """
    def __init__(self, title, message, maximum=100, parent=None, style=PD_AUTO_HIDE|PD_APP_MODAL) -> None:
        """ 

`__init__`(*self*, *title*, *message*, *maximum=100*, *parent=None*, *style=PD\_AUTO\_HIDE|PD\_APP\_MODAL*)[¶](#wx.GenericProgressDialog.__init__ "Permalink to this definition")
Constructor.


Creates the dialog, displays it and disables user input for other windows, or, if `PD_APP_MODAL` flag is not given, for its parent window only.



Parameters
* **title** (*string*) – Dialog title to show in titlebar.
* **message** (*string*) – Message displayed above the progress bar.
* **maximum** (*int*) – Maximum value for the progress bar. In the generic implementation the progress bar is constructed only if this value is greater than zero.
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. It will be disabled while this dialog is shown if non-null (whether `PD_APP_MODAL` is specified or not). Note that if you specify null parent and don’t use `PD_APP_MODAL` , you need to take care to avoid reentrancies, i.e. avoiding showing the progress dialog again while this one is shown.
* **style** (*int*) – The dialog style. See  [wx.ProgressDialog](wx.ProgressDialog.html#wx-progressdialog).






            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.GenericProgressDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def GetMessage(self) -> str:
        """ 

`GetMessage`(*self*)[¶](#wx.GenericProgressDialog.GetMessage "Permalink to this definition")
Returns the last message passed to the [`Update`](#wx.GenericProgressDialog.Update "wx.GenericProgressDialog.Update") function; if you always passed “” to [`Update`](#wx.GenericProgressDialog.Update "wx.GenericProgressDialog.Update") then the message set through the constructor is returned.



Return type
`string`





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def GetRange(self) -> int:
        """ 

`GetRange`(*self*)[¶](#wx.GenericProgressDialog.GetRange "Permalink to this definition")
Returns the maximum value of the progress meter, as passed to the constructor or `NOT_FOUND` if the dialog has no progress bar.



Return type
*int*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.GenericProgressDialog.GetValue "Permalink to this definition")
Returns the last value passed to the [`Update`](#wx.GenericProgressDialog.Update "wx.GenericProgressDialog.Update") function or `NOT_FOUND` if the dialog has no progress bar.



Return type
*int*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def Pulse(self, newmsg: str="") -> tuple:
        """ 

`Pulse`(*self*, *newmsg=""*)[¶](#wx.GenericProgressDialog.Pulse "Permalink to this definition")
Like [`Update`](#wx.GenericProgressDialog.Update "wx.GenericProgressDialog.Update") but makes the gauge control run in indeterminate mode.


In indeterminate mode the remaining and the estimated time labels (if present) are set to “Unknown” or to *newmsg* (if it’s non-empty). Each call to this function moves the progress bar a bit to indicate that some progress was done.



Parameters
**newmsg** (*string*) – 



Return type
*tuple*



Returns
( *bool*, *skip* )





See also


[`wx.Gauge.Pulse`](wx.Gauge.html#wx.Gauge.Pulse "wx.Gauge.Pulse") , [`Update`](#wx.GenericProgressDialog.Update "wx.GenericProgressDialog.Update")





            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def Resume(self) -> None:
        """ 

`Resume`(*self*)[¶](#wx.GenericProgressDialog.Resume "Permalink to this definition")
Can be used to continue with the dialog, after the user had clicked the “Abort” button.




            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def SetRange(self, maximum: int) -> None:
        """ 

`SetRange`(*self*, *maximum*)[¶](#wx.GenericProgressDialog.SetRange "Permalink to this definition")
Changes the maximum value of the progress meter given in the constructor.


This function can only be called (with a positive value) if the value passed in the constructor was positive.



Parameters
**maximum** (*int*) – 





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def Update(self, value, newmsg="") -> tuple:
        """ 

`Update`(*self*, *value*, *newmsg=""*)[¶](#wx.GenericProgressDialog.Update "Permalink to this definition")
Updates the dialog, setting the progress bar to the new value and updating the message if new one is specified.


Returns `True` unless the “Cancel” button has been pressed.


If `False` is returned, the application can either immediately destroy the dialog or ask the user for the confirmation and if the abort is not confirmed the dialog may be resumed with [`Resume`](#wx.GenericProgressDialog.Resume "wx.GenericProgressDialog.Resume") function.


If *value* is the maximum value for the dialog, the behaviour of the function depends on whether `PD_AUTO_HIDE` was used when the dialog was created. If it was, the dialog is hidden and the function returns immediately. If it was not, the dialog becomes a modal dialog and waits for the user to dismiss it, meaning that this function does not return until this happens.


Notice that if *newmsg* is longer than the currently shown message, the dialog will be automatically made wider to account for it. However if the new message is shorter than the previous one, the dialog doesn’t shrink back to avoid constant resizes if the message is changed often. To do this and fit the dialog to its current contents you may call `Fit` explicitly. However the native MSW implementation of this class does make the dialog shorter if the new text has fewer lines of text than the old one, so it is recommended to keep the number of lines of text constant in order to avoid jarring dialog size changes. You may also want to make the initial message, specified when creating the dialog, wide enough to avoid having to resize the dialog later, e.g. by appending a long string of unbreakable spaces ( *String* (L’\u00a0’, 100)) to it.



Parameters
* **value** (*int*) – The new value of the progress meter. It should be less than or equal to the maximum value given to the constructor.
* **newmsg** (*string*) – The new messages for the progress dialog text, if it is empty (which is the default) the message is not changed.



Return type
*tuple*



Returns
( *bool*, *skip* )






            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def WasCancelled(self) -> bool:
        """ 

`WasCancelled`(*self*)[¶](#wx.GenericProgressDialog.WasCancelled "Permalink to this definition")
Returns `True` if the “Cancel” button was pressed.


Normally a Cancel button press is indicated by [`Update`](#wx.GenericProgressDialog.Update "wx.GenericProgressDialog.Update") returning `False` but sometimes it may be more convenient to check if the dialog was cancelled from elsewhere in the code and this function allows doing it.


It always returns `False` if the Cancel button is not shown at all.



Return type
*bool*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    def WasSkipped(self) -> bool:
        """ 

`WasSkipped`(*self*)[¶](#wx.GenericProgressDialog.WasSkipped "Permalink to this definition")
Returns `True` if the “Skip” button was pressed.


This is similar to [`WasCancelled`](#wx.GenericProgressDialog.WasCancelled "wx.GenericProgressDialog.WasCancelled") but returns `True` if the “Skip” button was pressed, not the “Cancel” one.



Return type
*bool*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.GenericProgressDialog.html
        """

    Message: str  # `Message`[¶](#wx.GenericProgressDialog.Message "Permalink to this definition")See [`GetMessage`](#wx.GenericProgressDialog.GetMessage "wx.GenericProgressDialog.GetMessage")
    Range: int  # `Range`[¶](#wx.GenericProgressDialog.Range "Permalink to this definition")See [`GetRange`](#wx.GenericProgressDialog.GetRange "wx.GenericProgressDialog.GetRange") and [`SetRange`](#wx.GenericProgressDialog.SetRange "wx.GenericProgressDialog.SetRange")
    Value: int  # `Value`[¶](#wx.GenericProgressDialog.Value "Permalink to this definition")See [`GetValue`](#wx.GenericProgressDialog.GetValue "wx.GenericProgressDialog.GetValue")



PD_APP_MODAL: int  # Make the progress dialog application-modal, i.e. disable all application windows while it is shown. If this flag is not given, it is only “locally” modal –

PD_AUTO_HIDE: int  # Causes the progress dialog to disappear from screen as soon as the maximum value of the progress meter has been reached. If this style is not present, the dialog will become a modal dialog (see wx.Dialog.ShowModal ) once the maximum value has been reached and wait for the user to dismiss it.

PD_SMOOTH: int  # Causes smooth progress of the gauge control (uses a   wx.Gauge  with the  GA_SMOOTH   style).

PD_CAN_ABORT: int  # This flag tells the dialog that it should have a “Cancel” button which the user may press. If this happens, the next call to Update  will return False.

PD_CAN_SKIP: int  # This flag tells the dialog that it should have a “Skip” button which the user may press. If this happens, the next call to Update  will return True in its skip parameter.

PD_ELAPSED_TIME: int  # This flag tells the dialog that it should show elapsed time (since creating the dialog).

PD_ESTIMATED_TIME: int  # This flag tells the dialog that it should show estimated time.

PD_REMAINING_TIME: int  # This flag tells the dialog that it should show remaining time. ^^

class GenericStaticBitmap(Control):
    """ **Possible constructors**:



```
GenericStaticBitmap()

GenericStaticBitmap(parent, id=ID_ANY, bitmap=NullBitmap,
                    pos=DefaultPosition, size=DefaultSize, style=0,
                    name=StaticBitmapNameStr)

```


A static bitmap control displays a bitmap.


  


        Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GenericStaticBitmap.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, bitmap=NullBitmap, pos=DefaultPosition, size=DefaultSize, style=0, name=StaticBitmapNameStr)*


Constructor, creating and showing a static bitmap control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Should not be `None`.
* **id** (*wx.WindowID*) – Control identifier. A value of -1 denotes a default value.
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size.
* **style** (*long*) – Window style. See  [wx.StaticBitmap](wx.StaticBitmap.html#wx-staticbitmap).
* **name** (*string*) – Window name.




Bitmap label.



See also


[`Create`](#wx.GenericStaticBitmap.Create "wx.GenericStaticBitmap.Create")





---

  





            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    def Create(self, parent, id=ID_ANY, bitmap=NullBitmap, pos=DefaultPosition, size=DefaultSize, style=0, name=StaticBitmapNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *bitmap=NullBitmap*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=StaticBitmapNameStr*)[¶](#wx.GenericStaticBitmap.Create "Permalink to this definition")
Creation function, for two-step construction.


For details see  [wx.StaticBitmap](wx.StaticBitmap.html#wx-staticbitmap).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    def GetBitmap(self) -> 'Bitmap':
        """ 

`GetBitmap`(*self*)[¶](#wx.GenericStaticBitmap.GetBitmap "Permalink to this definition")
Returns the bitmap currently used in the control.


Notice that this method can be called even if [`SetIcon`](#wx.GenericStaticBitmap.SetIcon "wx.GenericStaticBitmap.SetIcon") had been used.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





See also


[`SetBitmap`](#wx.GenericStaticBitmap.SetBitmap "wx.GenericStaticBitmap.SetBitmap")





            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.GenericStaticBitmap.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    def GetIcon(self) -> 'Icon':
        """ 

`GetIcon`(*self*)[¶](#wx.GenericStaticBitmap.GetIcon "Permalink to this definition")
Returns the icon currently used in the control.


Notice that this method can only be called if [`SetIcon`](#wx.GenericStaticBitmap.SetIcon "wx.GenericStaticBitmap.SetIcon") had been used: an icon can’t be retrieved from the control if a bitmap had been set (using [`wx.StaticBitmap.SetBitmap`](wx.StaticBitmap.html#wx.StaticBitmap.SetBitmap "wx.StaticBitmap.SetBitmap") ).



Return type
 [wx.Icon](wx.Icon.html#wx-icon)





See also


[`SetIcon`](#wx.GenericStaticBitmap.SetIcon "wx.GenericStaticBitmap.SetIcon")





            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    def GetScaleMode(self) -> 'ScaleMode':
        """ 

`GetScaleMode`(*self*)[¶](#wx.GenericStaticBitmap.GetScaleMode "Permalink to this definition")
Returns the scale mode currently used in the control.



Return type
 [wx.GenericStaticBitmap.ScaleMode](wx.GenericStaticBitmap.ScaleMode.enumeration.html#wx-genericstaticbitmap-scalemode)





New in version 4.1/wxWidgets-3.1.0.




See also


[`SetScaleMode`](#wx.GenericStaticBitmap.SetScaleMode "wx.GenericStaticBitmap.SetScaleMode")





            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    def SetBitmap(self, label: 'BitmapBundle') -> None:
        """ 

`SetBitmap`(*self*, *label*)[¶](#wx.GenericStaticBitmap.SetBitmap "Permalink to this definition")
Sets the bitmap label.



Parameters
**label** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – The new bitmap.





See also


[`GetBitmap`](#wx.GenericStaticBitmap.GetBitmap "wx.GenericStaticBitmap.GetBitmap")





            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    def SetIcon(self, label: 'Icon') -> None:
        """ 

`SetIcon`(*self*, *label*)[¶](#wx.GenericStaticBitmap.SetIcon "Permalink to this definition")
Sets the label to the given icon.



Parameters
**label** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – The new icon.






            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    def SetScaleMode(self, scaleMode: ScaleMode) -> None:
        """ 

`SetScaleMode`(*self*, *scaleMode*)[¶](#wx.GenericStaticBitmap.SetScaleMode "Permalink to this definition")
Sets the scale mode.



Parameters
**scaleMode** ([*ScaleMode*](wx.GenericStaticBitmap.ScaleMode.enumeration.html "ScaleMode")) – Controls how the bitmap is scaled inside the control.





New in version 4.1/wxWidgets-3.1.0.




Note


Currently only the generic implementation supports all scaling modes. You may use generic implementation GenericStaticBitmap declared in <wx/generic/statbmpg.h> in all ports.




See also


[`GetScaleMode`](#wx.GenericStaticBitmap.GetScaleMode "wx.GenericStaticBitmap.GetScaleMode")





            Source: https://docs.wxpython.org/wx.GenericStaticBitmap.html
        """

    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.GenericStaticBitmap.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.GenericStaticBitmap.GetBitmap "wx.GenericStaticBitmap.GetBitmap") and [`SetBitmap`](#wx.GenericStaticBitmap.SetBitmap "wx.GenericStaticBitmap.SetBitmap")
    Icon: '_Icon'  # `Icon`[¶](#wx.GenericStaticBitmap.Icon "Permalink to this definition")See [`GetIcon`](#wx.GenericStaticBitmap.GetIcon "wx.GenericStaticBitmap.GetIcon") and [`SetIcon`](#wx.GenericStaticBitmap.SetIcon "wx.GenericStaticBitmap.SetIcon")



class GestureEvent(Event):
    """ **Possible constructors**:



```
GestureEvent(winid=0, type=wxEVT_NULL)

```


This is the base class for all supported gesture events.


  


        Source: https://docs.wxpython.org/wx.GestureEvent.html
    """
    def __init__(self, winid=0, type=wxEVT_NULL) -> None:
        """ 

`__init__`(*self*, *winid=0*, *type=wxEVT\_NULL*)[¶](#wx.GestureEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **winid** (*wx.WindowID*) –
* **type** (*wx.EventType*) –






            Source: https://docs.wxpython.org/wx.GestureEvent.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.GestureEvent.GetPosition "Permalink to this definition")
Returns the position where the event took effect, in client coordinates: position of Pan event, center of zoom for Zoom event, center of rotation for Rotate event, center of box formed by 2 fingers for Two Finger Tap event and position of the pressed finger for Press and Tap Event.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.GestureEvent.html
        """

    def IsGestureEnd(self) -> bool:
        """ 

`IsGestureEnd`(*self*)[¶](#wx.GestureEvent.IsGestureEnd "Permalink to this definition")
Returns `True` if the event was the last in a gesture sequence.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GestureEvent.html
        """

    def IsGestureStart(self) -> bool:
        """ 

`IsGestureStart`(*self*)[¶](#wx.GestureEvent.IsGestureStart "Permalink to this definition")
Returns `True` if the event was the first in a gesture sequence.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GestureEvent.html
        """

    def SetGestureEnd(self, isEnd: bool=True) -> None:
        """ 

`SetGestureEnd`(*self*, *isEnd=True*)[¶](#wx.GestureEvent.SetGestureEnd "Permalink to this definition")
Sets the event to be the last in a gesture sequence.



Parameters
**isEnd** (*bool*) – 






            Source: https://docs.wxpython.org/wx.GestureEvent.html
        """

    def SetGestureStart(self, isStart: bool=True) -> None:
        """ 

`SetGestureStart`(*self*, *isStart=True*)[¶](#wx.GestureEvent.SetGestureStart "Permalink to this definition")
Sets the event to be the first in a gesture sequence.



Parameters
**isStart** (*bool*) – 






            Source: https://docs.wxpython.org/wx.GestureEvent.html
        """

    def SetPosition(self, pos: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetPosition`(*self*, *pos*)[¶](#wx.GestureEvent.SetPosition "Permalink to this definition")
Sets the position where the event took effect, in client coordinates: position of Pan event, center of zoom for Zoom event, center of rotation for Rotate event.



Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.GestureEvent.html
        """

    Position: 'Point'  # `Position`[¶](#wx.GestureEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.GestureEvent.GetPosition "wx.GestureEvent.GetPosition") and [`SetPosition`](#wx.GestureEvent.SetPosition "wx.GestureEvent.SetPosition")



class GIFHandler(ImageHandler):
    """ **Possible constructors**:



```
GIFHandler()

```


This is the image handler for the `GIF` format.


  


        Source: https://docs.wxpython.org/wx.GIFHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.GIFHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.GIFHandler](#wx-gifhandler).




            Source: https://docs.wxpython.org/wx.GIFHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.GIFHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GIFHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.GIFHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.GIFHandler.SaveFile "wx.GIFHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.GIFHandler.html
        """

    def SaveAnimation(self, images, stream, verbose=True, delayMilliSecs=1000) -> bool:
        """ 

`SaveAnimation`(*self*, *images*, *stream*, *verbose=True*, *delayMilliSecs=1000*)[¶](#wx.GIFHandler.SaveAnimation "Permalink to this definition")
Save the animated gif.



Parameters
* **images** (*ImageArray*) – The image array object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages
* **delayMilliSecs** (*int*) – How long, in milliseconds, to wait between each frame.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.






            Source: https://docs.wxpython.org/wx.GIFHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.GIFHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.GIFHandler.LoadFile "wx.GIFHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.GIFHandler.html
        """



class GraphicsBitmap(GraphicsObject):
    """ **Possible constructors**:



```
GraphicsBitmap()

```


Represents a bitmap.


  


        Source: https://docs.wxpython.org/wx.GraphicsBitmap.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.GraphicsBitmap.__init__ "Permalink to this definition")
Default constructor creates an invalid bitmap.




            Source: https://docs.wxpython.org/wx.GraphicsBitmap.html
        """

    def ConvertToImage(self) -> 'Image':
        """ 

`ConvertToImage`(*self*)[¶](#wx.GraphicsBitmap.ConvertToImage "Permalink to this definition")
Return the contents of this bitmap as  [wx.Image](wx.Image.html#wx-image).


Using this method is more efficient than converting  [wx.GraphicsBitmap](#wx-graphicsbitmap) to  [wx.Bitmap](wx.Bitmap.html#wx-bitmap) first and then to  [wx.Image](wx.Image.html#wx-image) and can be useful if, for example, you want to save  [wx.GraphicsBitmap](#wx-graphicsbitmap) as a disk file in a format not directly supported by  [wx.Bitmap](wx.Bitmap.html#wx-bitmap).


Invalid image is returned if the bitmap is invalid.



Return type
 [wx.Image](wx.Image.html#wx-image)





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.GraphicsBitmap.html
        """

    def GetNativeBitmap(self) -> None:
        """ 

`GetNativeBitmap`(*self*)[¶](#wx.GraphicsBitmap.GetNativeBitmap "Permalink to this definition")
Return the pointer to the native bitmap data.


(CGImageRef for Core Graphics, cairo\_surface\_t for Cairo, Bitmap for GDI+.)



New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.GraphicsBitmap.html
        """

    NativeBitmap: None  # `NativeBitmap`[¶](#wx.GraphicsBitmap.NativeBitmap "Permalink to this definition")See [`GetNativeBitmap`](#wx.GraphicsBitmap.GetNativeBitmap "wx.GraphicsBitmap.GetNativeBitmap")



class GraphicsBrush(GraphicsObject):
    """ A GraphicsBrush is a native representation of a brush.




        Source: https://docs.wxpython.org/wx.GraphicsBrush.html
    """


class GraphicsFont(GraphicsObject):
    """ A GraphicsFont is a native representation of a font.




        Source: https://docs.wxpython.org/wx.GraphicsFont.html
    """


class GraphicsGradientStop:
    """ **Possible constructors**:



```
GraphicsGradientStop(col=TransparentColour, pos=0.)

```


Represents a single gradient stop in a collection of gradient stops as
represented by GraphicsGradientStops.


  


        Source: https://docs.wxpython.org/wx.GraphicsGradientStop.html
    """
    def __init__(self, col=TransparentColour, pos=0.) -> None:
        """ 

`__init__`(*self*, *col=TransparentColour*, *pos=0.*)[¶](#wx.GraphicsGradientStop.__init__ "Permalink to this definition")
Creates a stop with the given colour and position.



Parameters
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The colour of this stop. Note that the alpha component of the colour is honoured thus allowing the background colours to partially show through the gradient.
* **pos** (*float*) – The stop position, must be in `[0`, `1]` range with 0 being the beginning and 1 the end of the gradient.






            Source: https://docs.wxpython.org/wx.GraphicsGradientStop.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.GraphicsGradientStop.GetColour "Permalink to this definition")
Return the stop colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.GraphicsGradientStop.html
        """

    def GetPosition(self) -> float:
        """ 

`GetPosition`(*self*)[¶](#wx.GraphicsGradientStop.GetPosition "Permalink to this definition")
Return the stop position.



Return type
*float*






            Source: https://docs.wxpython.org/wx.GraphicsGradientStop.html
        """

    def SetColour(self, col: Union[int, str, 'Colour']) -> None:
        """ 

`SetColour`(*self*, *col*)[¶](#wx.GraphicsGradientStop.SetColour "Permalink to this definition")
Change the stop colour.



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The new colour.






            Source: https://docs.wxpython.org/wx.GraphicsGradientStop.html
        """

    def SetPosition(self, pos: float) -> None:
        """ 

`SetPosition`(*self*, *pos*)[¶](#wx.GraphicsGradientStop.SetPosition "Permalink to this definition")
Change the stop position.



Parameters
**pos** (*float*) – The new position, must always be in `[0`, `1]` range.






            Source: https://docs.wxpython.org/wx.GraphicsGradientStop.html
        """

    Colour: '_Colour'  # `Colour`[¶](#wx.GraphicsGradientStop.Colour "Permalink to this definition")See [`GetColour`](#wx.GraphicsGradientStop.GetColour "wx.GraphicsGradientStop.GetColour") and [`SetColour`](#wx.GraphicsGradientStop.SetColour "wx.GraphicsGradientStop.SetColour")
    Position: float  # `Position`[¶](#wx.GraphicsGradientStop.Position "Permalink to this definition")See [`GetPosition`](#wx.GraphicsGradientStop.GetPosition "wx.GraphicsGradientStop.GetPosition") and [`SetPosition`](#wx.GraphicsGradientStop.SetPosition "wx.GraphicsGradientStop.SetPosition")



class GraphicsGradientStops:
    """ **Possible constructors**:



```
GraphicsGradientStops(startCol=TransparentColour,
                      endCol=TransparentColour)

```


Represents a collection of GraphicGradientStop values for use with
CreateLinearGradientBrush and CreateRadialGradientBrush.


  


        Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
    """
    def __init__(self, startCol=TransparentColour, endCol=TransparentColour) -> None:
        """ 

`__init__`(*self*, *startCol=TransparentColour*, *endCol=TransparentColour*)[¶](#wx.GraphicsGradientStops.__init__ "Permalink to this definition")
Initializes the gradient stops with the given boundary colours.


Creates a  [wx.GraphicsGradientStops](#wx-graphicsgradientstops) instance with start colour given by *startCol* and end colour given by *endCol*.



Parameters
* **startCol** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **endCol** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def Add(self, *args, **kw) -> None:
        """ 

`Add`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsGradientStops.Add "Permalink to this definition")
Add a new stop.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Add** *(self, stop)*



Parameters
**stop** ([*wx.GraphicsGradientStop*](wx.GraphicsGradientStop.html#wx.GraphicsGradientStop "wx.GraphicsGradientStop")) – 






---

  



**Add** *(self, col, pos)*



Parameters
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **pos** (*float*) –






---

  





            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def GetCount(self) -> int:
        """ 

`GetCount`(*self*)[¶](#wx.GraphicsGradientStops.GetCount "Permalink to this definition")
Returns the number of stops.



Return type
*int*






            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def GetEndColour(self) -> 'Colour':
        """ 

`GetEndColour`(*self*)[¶](#wx.GraphicsGradientStops.GetEndColour "Permalink to this definition")
Returns the end colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def GetStartColour(self) -> 'Colour':
        """ 

`GetStartColour`(*self*)[¶](#wx.GraphicsGradientStops.GetStartColour "Permalink to this definition")
Returns the start colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def Item(self, n: Any) -> 'GraphicsGradientStop':
        """ 

`Item`(*self*, *n*)[¶](#wx.GraphicsGradientStops.Item "Permalink to this definition")
Returns the stop at the given index.



Parameters
**n** – The index, must be in `[0`, [`GetCount`](#wx.GraphicsGradientStops.GetCount "wx.GraphicsGradientStops.GetCount") ) range.



Return type
 [wx.GraphicsGradientStop](wx.GraphicsGradientStop.html#wx-graphicsgradientstop)






            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def SetEndColour(self, col: Union[int, str, 'Colour']) -> None:
        """ 

`SetEndColour`(*self*, *col*)[¶](#wx.GraphicsGradientStops.SetEndColour "Permalink to this definition")
Set the end colour to *col*.



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def SetStartColour(self, col: Union[int, str, 'Colour']) -> None:
        """ 

`SetStartColour`(*self*, *col*)[¶](#wx.GraphicsGradientStops.SetStartColour "Permalink to this definition")
Set the start colour to *col*.



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def __getitem__(self, n) -> None:
        """ 

`__getitem__`(*self*, *n*)[¶](#wx.GraphicsGradientStops.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    def __len__(self) -> 'SIP_SSIZE_T':
        """ 

`__len__`(*self*)[¶](#wx.GraphicsGradientStops.__len__ "Permalink to this definition")

Return type
*SIP\_SSIZE\_T*






            Source: https://docs.wxpython.org/wx.GraphicsGradientStops.html
        """

    Count: int  # `Count`[¶](#wx.GraphicsGradientStops.Count "Permalink to this definition")See [`GetCount`](#wx.GraphicsGradientStops.GetCount "wx.GraphicsGradientStops.GetCount")
    EndColour: 'Colour'  # `EndColour`[¶](#wx.GraphicsGradientStops.EndColour "Permalink to this definition")See [`GetEndColour`](#wx.GraphicsGradientStops.GetEndColour "wx.GraphicsGradientStops.GetEndColour") and [`SetEndColour`](#wx.GraphicsGradientStops.SetEndColour "wx.GraphicsGradientStops.SetEndColour")
    StartColour: 'Colour'  # `StartColour`[¶](#wx.GraphicsGradientStops.StartColour "Permalink to this definition")See [`GetStartColour`](#wx.GraphicsGradientStops.GetStartColour "wx.GraphicsGradientStops.GetStartColour") and [`SetStartColour`](#wx.GraphicsGradientStops.SetStartColour "wx.GraphicsGradientStops.SetStartColour")



class GraphicsMatrix(GraphicsObject):
    """ A GraphicsMatrix is a native representation of an affine matrix.


  


        Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
    """
    def Concat(self, t: 'GraphicsMatrix') -> None:
        """ 

`Concat`(*self*, *t*)[¶](#wx.GraphicsMatrix.Concat "Permalink to this definition")
Concatenates the matrix passed with the current matrix.


The effect of the resulting transformation is to first apply the transformation in *t* to the coordinates and then apply the transformation in the current matrix to the coordinates.



```
# matrix = t * matrix

```



Parameters
**t** ([*wx.GraphicsMatrix*](#wx.GraphicsMatrix "wx.GraphicsMatrix")) – The parameter matrix is the multiplicand.






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.GraphicsMatrix.Get "Permalink to this definition")
Returns the component values of the matrix via the argument pointers.



Return type
*tuple*



Returns
( *a*, *b*, *c*, *d*, *tx*, *ty* )






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def GetNativeMatrix(self) -> None:
        """ 

`GetNativeMatrix`(*self*)[¶](#wx.GraphicsMatrix.GetNativeMatrix "Permalink to this definition")
Returns the native representation of the matrix.


For CoreGraphics this is a CFAffineMatrix pointer, for GDIPlus a Matrix Pointer, and for Cairo a cairo\_matrix\_t pointer.




            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def Invert(self) -> None:
        """ 

`Invert`(*self*)[¶](#wx.GraphicsMatrix.Invert "Permalink to this definition")
Inverts the matrix.




            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def IsEqual(self, t: 'GraphicsMatrix') -> bool:
        """ 

`IsEqual`(*self*, *t*)[¶](#wx.GraphicsMatrix.IsEqual "Permalink to this definition")
Returns `True` if the elements of the transformation matrix are equal.



Parameters
**t** ([*wx.GraphicsMatrix*](#wx.GraphicsMatrix "wx.GraphicsMatrix")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def IsIdentity(self) -> bool:
        """ 

`IsIdentity`(*self*)[¶](#wx.GraphicsMatrix.IsIdentity "Permalink to this definition")
Return `True` if this is the identity matrix.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def Rotate(self, angle: 'Double') -> None:
        """ 

`Rotate`(*self*, *angle*)[¶](#wx.GraphicsMatrix.Rotate "Permalink to this definition")
Rotates this matrix clockwise (in radians).



Parameters
**angle** (*wx.Double*) – Rotation angle in radians, clockwise.






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def Scale(self, xScale, yScale) -> None:
        """ 

`Scale`(*self*, *xScale*, *yScale*)[¶](#wx.GraphicsMatrix.Scale "Permalink to this definition")
Scales this matrix.



Parameters
* **xScale** (*wx.Double*) –
* **yScale** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def Set(self, a=1.0, b=0.0, c=0.0, d=1.0, tx=0.0, ty=0.0) -> None:
        """ 

`Set`(*self*, *a=1.0*, *b=0.0*, *c=0.0*, *d=1.0*, *tx=0.0*, *ty=0.0*)[¶](#wx.GraphicsMatrix.Set "Permalink to this definition")
Sets the matrix to the respective values (default values are the identity matrix).



Parameters
* **a** (*wx.Double*) –
* **b** (*wx.Double*) –
* **c** (*wx.Double*) –
* **d** (*wx.Double*) –
* **tx** (*wx.Double*) –
* **ty** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def TransformDistance(self, dx, dy) -> tuple:
        """ 

`TransformDistance`(*self*, *dx*, *dy*)[¶](#wx.GraphicsMatrix.TransformDistance "Permalink to this definition")
Applies this matrix to a distance (ie.


performs all transforms except translations).



Parameters
* **dx** (*wx.Double*) –
* **dy** (*wx.Double*) –



Return type
*tuple*



Returns
( *dx*, *dy* )






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def TransformPoint(self, x, y) -> tuple:
        """ 

`TransformPoint`(*self*, *x*, *y*)[¶](#wx.GraphicsMatrix.TransformPoint "Permalink to this definition")
Applies this matrix to a point.



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –



Return type
*tuple*



Returns
( *x*, *y* )






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    def Translate(self, dx, dy) -> None:
        """ 

`Translate`(*self*, *dx*, *dy*)[¶](#wx.GraphicsMatrix.Translate "Permalink to this definition")
Translates this matrix.



Parameters
* **dx** (*wx.Double*) –
* **dy** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsMatrix.html
        """

    NativeMatrix: None  # `NativeMatrix`[¶](#wx.GraphicsMatrix.NativeMatrix "Permalink to this definition")See [`GetNativeMatrix`](#wx.GraphicsMatrix.GetNativeMatrix "wx.GraphicsMatrix.GetNativeMatrix")



class GraphicsObject(Object):
    """ This class is the superclass of native graphics objects like pens etc.


  


        Source: https://docs.wxpython.org/wx.GraphicsObject.html
    """
    def GetRenderer(self) -> 'GraphicsRenderer':
        """ 

`GetRenderer`(*self*)[¶](#wx.GraphicsObject.GetRenderer "Permalink to this definition")
Returns the renderer that was used to create this instance, or `None` if it has not been initialized yet.



Return type
 [wx.GraphicsRenderer](wx.GraphicsRenderer.html#wx-graphicsrenderer)






            Source: https://docs.wxpython.org/wx.GraphicsObject.html
        """

    def IsNull(self) -> bool:
        """ 

`IsNull`(*self*)[¶](#wx.GraphicsObject.IsNull "Permalink to this definition")

Return type
*bool*



Returns
`False` if this object is valid, otherwise returns `True`.






            Source: https://docs.wxpython.org/wx.GraphicsObject.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.GraphicsObject.IsOk "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsObject.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.GraphicsObject.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.GraphicsObject.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.GraphicsObject.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.GraphicsObject.html
        """

    Renderer: 'GraphicsRenderer'  # `Renderer`[¶](#wx.GraphicsObject.Renderer "Permalink to this definition")See [`GetRenderer`](#wx.GraphicsObject.GetRenderer "wx.GraphicsObject.GetRenderer")



class GraphicsPath(GraphicsObject):
    """ A GraphicsPath is a native representation of a geometric path.


  


        Source: https://docs.wxpython.org/wx.GraphicsPath.html
    """
    def AddArc(self, *args, **kw) -> None:
        """ 

`AddArc`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsPath.AddArc "Permalink to this definition")
Adds an arc of a circle.


The circle is defined by the coordinates of its centre (*x*, *y*) or *c* and its radius *r*. The arc goes from the starting angle *startAngle* to *endAngle* either clockwise or counter-clockwise depending on the value of *clockwise* argument.


The angles are measured in radians but, contrary to the usual mathematical convention, are always *clockwise* from the horizontal axis.


If for clockwise arc *endAngle* is less than *startAngle* it will be progressively increased by 2pi until it is greater than *startAngle*. If for counter-clockwise arc *endAngle* is greater than *startAngle* it will be progressively decreased by 2pi until it is less than *startAngle*.


If there is a current point set, an initial line segment will be added to the path to connect the current point to the beginning of the arc.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddArc** *(self, x, y, r, startAngle, endAngle, clockwise)*



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **r** (*wx.Double*) –
* **startAngle** (*wx.Double*) –
* **endAngle** (*wx.Double*) –
* **clockwise** (*bool*) –






---

  



**AddArc** *(self, c, r, startAngle, endAngle, clockwise)*



Parameters
* **c** ([*wx.Point2D*](wx.Point2D.html#wx.Point2D "wx.Point2D")) –
* **r** (*wx.Double*) –
* **startAngle** (*wx.Double*) –
* **endAngle** (*wx.Double*) –
* **clockwise** (*bool*) –






---

  





            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddArcToPoint(self, x1, y1, x2, y2, r) -> None:
        """ 

`AddArcToPoint`(*self*, *x1*, *y1*, *x2*, *y2*, *r*)[¶](#wx.GraphicsPath.AddArcToPoint "Permalink to this definition")
Adds an arc (of a circle with radius *r*) that is tangent to the line connecting current point and (*x1*, *y1*) and to the line connecting (*x1*, *y1*) and (*x2*, *y2*).


If the current point and the starting point of the arc are different, a straight line connecting these points is also appended. If there is no current point before the call to [`AddArcToPoint`](#wx.GraphicsPath.AddArcToPoint "wx.GraphicsPath.AddArcToPoint") this function will behave as if preceded by a call to MoveToPoint(0, 0). After this call the current point will be at the ending point of the arc.



![_staticimagesoverviewsdrawing-addarctopoint.png](_staticimagesoverviewsdrawing-addarctopoint.png)


  



Parameters
* **x1** (*wx.Double*) –
* **y1** (*wx.Double*) –
* **x2** (*wx.Double*) –
* **y2** (*wx.Double*) –
* **r** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddCircle(self, x, y, r) -> None:
        """ 

`AddCircle`(*self*, *x*, *y*, *r*)[¶](#wx.GraphicsPath.AddCircle "Permalink to this definition")
Appends a circle around (*x*,`y`) with radius *r* as a new closed subpath.


After this call the current point will be at ( *x+* *r* *,* *y*).



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **r** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddCurveToPoint(self, *args, **kw) -> None:
        """ 

`AddCurveToPoint`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsPath.AddCurveToPoint "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddCurveToPoint** *(self, cx1, cy1, cx2, cy2, x, y)*


Adds a cubic bezier curve from the current point, using two control points and an end point.


If there is no current point before the call to [`AddCurveToPoint`](#wx.GraphicsPath.AddCurveToPoint "wx.GraphicsPath.AddCurveToPoint") this function will behave as if preceded by a call to MoveToPoint(*cx1*, *cy1*).



Parameters
* **cx1** (*wx.Double*) –
* **cy1** (*wx.Double*) –
* **cx2** (*wx.Double*) –
* **cy2** (*wx.Double*) –
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –






---

  



**AddCurveToPoint** *(self, c1, c2, e)*


Adds a cubic bezier curve from the current point, using two control points and an end point.


If there is no current point before the call to [`AddCurveToPoint`](#wx.GraphicsPath.AddCurveToPoint "wx.GraphicsPath.AddCurveToPoint") this function will behave as if preceded by a call to MoveToPoint(*c1*).



Parameters
* **c1** ([*wx.Point2D*](wx.Point2D.html#wx.Point2D "wx.Point2D")) –
* **c2** ([*wx.Point2D*](wx.Point2D.html#wx.Point2D "wx.Point2D")) –
* **e** ([*wx.Point2D*](wx.Point2D.html#wx.Point2D "wx.Point2D")) –






---

  





            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddEllipse(self, x, y, w, h) -> None:
        """ 

`AddEllipse`(*self*, *x*, *y*, *w*, *h*)[¶](#wx.GraphicsPath.AddEllipse "Permalink to this definition")
Appends an ellipse fitting into the passed in rectangle as a new closed subpath.


After this call the current point will be at ( *x+* *w* *,* *y+* *h/2* *)* .



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddLineToPoint(self, *args, **kw) -> None:
        """ 

`AddLineToPoint`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsPath.AddLineToPoint "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddLineToPoint** *(self, x, y)*


Adds a straight line from the current point to (*x*,`y`).


If current point is not yet set before the call to [`AddLineToPoint`](#wx.GraphicsPath.AddLineToPoint "wx.GraphicsPath.AddLineToPoint") this function will behave as [`MoveToPoint`](#wx.GraphicsPath.MoveToPoint "wx.GraphicsPath.MoveToPoint") .



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –






---

  



**AddLineToPoint** *(self, p)*


Adds a straight line from the current point to *p*.


If current point is not yet set before the call to [`AddLineToPoint`](#wx.GraphicsPath.AddLineToPoint "wx.GraphicsPath.AddLineToPoint") this function will behave as [`MoveToPoint`](#wx.GraphicsPath.MoveToPoint "wx.GraphicsPath.MoveToPoint") .



Parameters
**p** ([*wx.Point2D*](wx.Point2D.html#wx.Point2D "wx.Point2D")) – 






---

  





            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddPath(self, path: 'GraphicsPath') -> None:
        """ 

`AddPath`(*self*, *path*)[¶](#wx.GraphicsPath.AddPath "Permalink to this definition")
Adds another path onto the current path.


After this call the current point will be at the added path’s current point. For Direct2D the path being appended shouldn’t contain a started non-empty subpath when this function is called.



Parameters
**path** ([*wx.GraphicsPath*](#wx.GraphicsPath "wx.GraphicsPath")) – 






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddQuadCurveToPoint(self, cx, cy, x, y) -> None:
        """ 

`AddQuadCurveToPoint`(*self*, *cx*, *cy*, *x*, *y*)[¶](#wx.GraphicsPath.AddQuadCurveToPoint "Permalink to this definition")
Adds a quadratic bezier curve from the current point, using a control point and an end point.


If there is no current point before the call to [`AddQuadCurveToPoint`](#wx.GraphicsPath.AddQuadCurveToPoint "wx.GraphicsPath.AddQuadCurveToPoint") this function will behave as if preceded by a call to MoveToPoint(*cx*, *cy*).



Parameters
* **cx** (*wx.Double*) –
* **cy** (*wx.Double*) –
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddRectangle(self, x, y, w, h) -> None:
        """ 

`AddRectangle`(*self*, *x*, *y*, *w*, *h*)[¶](#wx.GraphicsPath.AddRectangle "Permalink to this definition")
Appends a rectangle as a new closed subpath.


After this call the current point will be at (*x*, *y*).



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def AddRoundedRectangle(self, x, y, w, h, radius) -> None:
        """ 

`AddRoundedRectangle`(*self*, *x*, *y*, *w*, *h*, *radius*)[¶](#wx.GraphicsPath.AddRoundedRectangle "Permalink to this definition")
Appends a rounded rectangle as a new closed subpath.


If *radius* equals 0 this function will behave as [`AddRectangle`](#wx.GraphicsPath.AddRectangle "wx.GraphicsPath.AddRectangle") , otherwise after this call the current point will be at ( *x+* *w* *,* *y+* *h/2* *)* .



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –
* **radius** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def CloseSubpath(self) -> None:
        """ 

`CloseSubpath`(*self*)[¶](#wx.GraphicsPath.CloseSubpath "Permalink to this definition")
Closes the current sub-path.


After this call the current point will be at the joined endpoint of the sub-path.




            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def Contains(self, *args, **kw) -> None:
        """ 

`Contains`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsPath.Contains "Permalink to this definition")

Returns
`True` if the point is within the path.




[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Contains** *(self, c, fillStyle=ODDEVEN\_RULE)*



Parameters
* **c** ([*wx.Point2D*](wx.Point2D.html#wx.Point2D "wx.Point2D")) –
* **fillStyle** ([*PolygonFillMode*](wx.PolygonFillMode.enumeration.html "PolygonFillMode")) –



Return type
*bool*






---

  



**Contains** *(self, x, y, fillStyle=ODDEVEN\_RULE)*



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **fillStyle** ([*PolygonFillMode*](wx.PolygonFillMode.enumeration.html "PolygonFillMode")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def GetBox(self) -> 'Rect2D':
        """ 

`GetBox`(*self*)[¶](#wx.GraphicsPath.GetBox "Permalink to this definition")
Gets the bounding box enclosing all points (possibly including control points).



Return type
 [wx.Rect2D](wx.Rect2D.html#wx-rect2d)






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def GetCurrentPoint(self) -> 'Point2D':
        """ 

`GetCurrentPoint`(*self*)[¶](#wx.GraphicsPath.GetCurrentPoint "Permalink to this definition")
Gets the last point of the current path, (0,0) if not yet set.



Return type
 [wx.Point2D](wx.Point2D.html#wx-point2d)






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def GetNativePath(self) -> None:
        """ 

`GetNativePath`(*self*)[¶](#wx.GraphicsPath.GetNativePath "Permalink to this definition")
Returns the native path (CGPathRef for Core Graphics, Path pointer for GDIPlus and a cairo\_path\_t pointer for cairo).




            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def MoveToPoint(self, *args, **kw) -> None:
        """ 

`MoveToPoint`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsPath.MoveToPoint "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**MoveToPoint** *(self, x, y)*


Begins a new subpath at (*x*,`y`).



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –






---

  



**MoveToPoint** *(self, p)*


Begins a new subpath at *p*.



Parameters
**p** ([*wx.Point2D*](wx.Point2D.html#wx.Point2D "wx.Point2D")) – 






---

  





            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def Transform(self, matrix: 'GraphicsMatrix') -> None:
        """ 

`Transform`(*self*, *matrix*)[¶](#wx.GraphicsPath.Transform "Permalink to this definition")
Transforms each point of this path by the matrix.


For Direct2D the current path shouldn’t contain a started non-empty subpath when this function is called.



Parameters
**matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) – 






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    def UnGetNativePath(self, p: Any) -> None:
        """ 

`UnGetNativePath`(*self*, *p*)[¶](#wx.GraphicsPath.UnGetNativePath "Permalink to this definition")
Gives back the native path returned by [`GetNativePath`](#wx.GraphicsPath.GetNativePath "wx.GraphicsPath.GetNativePath") because there might be some deallocations necessary (e.g.


on cairo the native path returned by [`GetNativePath`](#wx.GraphicsPath.GetNativePath "wx.GraphicsPath.GetNativePath") is newly allocated each time).



Parameters
**p** – 






            Source: https://docs.wxpython.org/wx.GraphicsPath.html
        """

    Box: 'Rect2D'  # `Box`[¶](#wx.GraphicsPath.Box "Permalink to this definition")See [`GetBox`](#wx.GraphicsPath.GetBox "wx.GraphicsPath.GetBox")
    CurrentPoint: 'Point2D'  # `CurrentPoint`[¶](#wx.GraphicsPath.CurrentPoint "Permalink to this definition")See [`GetCurrentPoint`](#wx.GraphicsPath.GetCurrentPoint "wx.GraphicsPath.GetCurrentPoint")
    NativePath: None  # `NativePath`[¶](#wx.GraphicsPath.NativePath "Permalink to this definition")See [`GetNativePath`](#wx.GraphicsPath.GetNativePath "wx.GraphicsPath.GetNativePath")



class GraphicsPen(GraphicsObject):
    """ A GraphicsPen is a native representation of a pen.




        Source: https://docs.wxpython.org/wx.GraphicsPen.html
    """


_GradientType: TypeAlias = GradientType

class GraphicsPenInfo:
    """ **Possible constructors**:



```
GraphicsPenInfo(colour=Colour(), width=1.0, style=PENSTYLE_SOLID)

```


This class is a helper used for GraphicsPen creation using named
parameter idiom: it allows specifying various GraphicsPen attributes
using the chained calls to its clearly named methods instead of
passing them in the fixed order to GraphicsPen constructors.


  


        Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
    """
    def __init__(*args, **kwargs) -> None:
        """ 

`__init__`(*self*, *colour=Colour()*, *width=1.0*, *style=PENSTYLE\_SOLID*)[¶](#wx.GraphicsPenInfo.__init__ "Permalink to this definition")

Parameters
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **width** (*wx.Double*) –
* **style** ([*PenStyle*](wx.PenStyle.enumeration.html "PenStyle")) –






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def Cap(self, cap: PenCap) -> 'GraphicsPenInfo':
        """ 

`Cap`(*self*, *cap*)[¶](#wx.GraphicsPenInfo.Cap "Permalink to this definition")

Parameters
**cap** ([*PenCap*](wx.PenCap.enumeration.html "PenCap")) – 



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def Colour(self, col: Union[int, str, 'Colour']) -> 'GraphicsPenInfo':
        """ 

`Colour`(*self*, *col*)[¶](#wx.GraphicsPenInfo.Colour "Permalink to this definition")

Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetCap(self) -> 'PenCap':
        """ 

`GetCap`(*self*)[¶](#wx.GraphicsPenInfo.GetCap "Permalink to this definition")

Return type
 [wx.PenCap](wx.PenCap.enumeration.html#wx-pencap)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.GraphicsPenInfo.GetColour "Permalink to this definition")

Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetEndX(self) -> 'Double':
        """ 

`GetEndX`(*self*)[¶](#wx.GraphicsPenInfo.GetEndX "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetEndY(self) -> 'Double':
        """ 

`GetEndY`(*self*)[¶](#wx.GraphicsPenInfo.GetEndY "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetGradientType(self) -> 'GradientType':
        """ 

`GetGradientType`(*self*)[¶](#wx.GraphicsPenInfo.GetGradientType "Permalink to this definition")

Return type
 [wx.GradientType](wx.GradientType.enumeration.html#wx-gradienttype)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetJoin(self) -> 'PenJoin':
        """ 

`GetJoin`(*self*)[¶](#wx.GraphicsPenInfo.GetJoin "Permalink to this definition")

Return type
 [wx.PenJoin](wx.PenJoin.enumeration.html#wx-penjoin)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetRadius(self) -> 'Double':
        """ 

`GetRadius`(*self*)[¶](#wx.GraphicsPenInfo.GetRadius "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetStartX(self) -> 'Double':
        """ 

`GetStartX`(*self*)[¶](#wx.GraphicsPenInfo.GetStartX "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetStartY(self) -> 'Double':
        """ 

`GetStartY`(*self*)[¶](#wx.GraphicsPenInfo.GetStartY "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetStipple(self) -> 'Bitmap':
        """ 

`GetStipple`(*self*)[¶](#wx.GraphicsPenInfo.GetStipple "Permalink to this definition")

Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetStops(self) -> 'GraphicsGradientStops':
        """ 

`GetStops`(*self*)[¶](#wx.GraphicsPenInfo.GetStops "Permalink to this definition")

Return type
 [wx.GraphicsGradientStops](wx.GraphicsGradientStops.html#wx-graphicsgradientstops)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetStyle(self) -> 'PenStyle':
        """ 

`GetStyle`(*self*)[¶](#wx.GraphicsPenInfo.GetStyle "Permalink to this definition")

Return type
 [wx.PenStyle](wx.PenStyle.enumeration.html#wx-penstyle)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetWidth(self) -> 'Double':
        """ 

`GetWidth`(*self*)[¶](#wx.GraphicsPenInfo.GetWidth "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetX1(self) -> 'Double':
        """ 

`GetX1`(*self*)[¶](#wx.GraphicsPenInfo.GetX1 "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetX2(self) -> 'Double':
        """ 

`GetX2`(*self*)[¶](#wx.GraphicsPenInfo.GetX2 "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetY1(self) -> 'Double':
        """ 

`GetY1`(*self*)[¶](#wx.GraphicsPenInfo.GetY1 "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def GetY2(self) -> 'Double':
        """ 

`GetY2`(*self*)[¶](#wx.GraphicsPenInfo.GetY2 "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def IsTransparent(self) -> bool:
        """ 

`IsTransparent`(*self*)[¶](#wx.GraphicsPenInfo.IsTransparent "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def Join(self, join: PenJoin) -> 'GraphicsPenInfo':
        """ 

`Join`(*self*, *join*)[¶](#wx.GraphicsPenInfo.Join "Permalink to this definition")

Parameters
**join** ([*PenJoin*](wx.PenJoin.enumeration.html "PenJoin")) – 



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def LinearGradient(self, *args, **kw) -> 'GraphicsPenInfo':
        """ 

`LinearGradient`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsPenInfo.LinearGradient "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**LinearGradient** *(self, x1, y1, x2, y2, c1, c2, matrix=NullGraphicsMatrix)*



Parameters
* **x1** (*wx.Double*) –
* **y1** (*wx.Double*) –
* **x2** (*wx.Double*) –
* **y2** (*wx.Double*) –
* **c1** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **c2** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






---

  



**LinearGradient** *(self, x1, y1, x2, y2, stops, matrix=NullGraphicsMatrix)*



Parameters
* **x1** (*wx.Double*) –
* **y1** (*wx.Double*) –
* **x2** (*wx.Double*) –
* **y2** (*wx.Double*) –
* **stops** ([*wx.GraphicsGradientStops*](wx.GraphicsGradientStops.html#wx.GraphicsGradientStops "wx.GraphicsGradientStops")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






---

  





            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def RadialGradient(self, *args, **kw) -> 'GraphicsPenInfo':
        """ 

`RadialGradient`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsPenInfo.RadialGradient "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**RadialGradient** *(self, startX, startY, endX, endY, radius, oColor, cColor, matrix=NullGraphicsMatrix)*



Parameters
* **startX** (*wx.Double*) –
* **startY** (*wx.Double*) –
* **endX** (*wx.Double*) –
* **endY** (*wx.Double*) –
* **radius** (*wx.Double*) –
* **oColor** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **cColor** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






---

  



**RadialGradient** *(self, startX, startY, endX, endY, radius, stops, matrix=NullGraphicsMatrix)*



Parameters
* **startX** (*wx.Double*) –
* **startY** (*wx.Double*) –
* **endX** (*wx.Double*) –
* **endY** (*wx.Double*) –
* **radius** (*wx.Double*) –
* **stops** ([*wx.GraphicsGradientStops*](wx.GraphicsGradientStops.html#wx.GraphicsGradientStops "wx.GraphicsGradientStops")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






---

  





            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def Stipple(self, stipple: 'Bitmap') -> 'GraphicsPenInfo':
        """ 

`Stipple`(*self*, *stipple*)[¶](#wx.GraphicsPenInfo.Stipple "Permalink to this definition")

Parameters
**stipple** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def Style(self, style: PenStyle) -> 'GraphicsPenInfo':
        """ 

`Style`(*self*, *style*)[¶](#wx.GraphicsPenInfo.Style "Permalink to this definition")

Parameters
**style** ([*PenStyle*](wx.PenStyle.enumeration.html "PenStyle")) – 



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    def Width(self, width: 'Double') -> 'GraphicsPenInfo':
        """ 

`Width`(*self*, *width*)[¶](#wx.GraphicsPenInfo.Width "Permalink to this definition")

Parameters
**width** (*wx.Double*) – 



Return type
 [wx.GraphicsPenInfo](#wx-graphicspeninfo)






            Source: https://docs.wxpython.org/wx.GraphicsPenInfo.html
        """

    EndX: 'Double'  # `EndX`[¶](#wx.GraphicsPenInfo.EndX "Permalink to this definition")See [`GetEndX`](#wx.GraphicsPenInfo.GetEndX "wx.GraphicsPenInfo.GetEndX")
    EndY: 'Double'  # `EndY`[¶](#wx.GraphicsPenInfo.EndY "Permalink to this definition")See [`GetEndY`](#wx.GraphicsPenInfo.GetEndY "wx.GraphicsPenInfo.GetEndY")
    GradientType: '_GradientType'  # `GradientType`[¶](#wx.GraphicsPenInfo.GradientType "Permalink to this definition")See [`GetGradientType`](#wx.GraphicsPenInfo.GetGradientType "wx.GraphicsPenInfo.GetGradientType")
    Radius: 'Double'  # `Radius`[¶](#wx.GraphicsPenInfo.Radius "Permalink to this definition")See [`GetRadius`](#wx.GraphicsPenInfo.GetRadius "wx.GraphicsPenInfo.GetRadius")
    StartX: 'Double'  # `StartX`[¶](#wx.GraphicsPenInfo.StartX "Permalink to this definition")See [`GetStartX`](#wx.GraphicsPenInfo.GetStartX "wx.GraphicsPenInfo.GetStartX")
    StartY: 'Double'  # `StartY`[¶](#wx.GraphicsPenInfo.StartY "Permalink to this definition")See [`GetStartY`](#wx.GraphicsPenInfo.GetStartY "wx.GraphicsPenInfo.GetStartY")
    Stops: 'GraphicsGradientStops'  # `Stops`[¶](#wx.GraphicsPenInfo.Stops "Permalink to this definition")See [`GetStops`](#wx.GraphicsPenInfo.GetStops "wx.GraphicsPenInfo.GetStops")
    X1: 'Double'  # `X1`[¶](#wx.GraphicsPenInfo.X1 "Permalink to this definition")See [`GetX1`](#wx.GraphicsPenInfo.GetX1 "wx.GraphicsPenInfo.GetX1")
    X2: 'Double'  # `X2`[¶](#wx.GraphicsPenInfo.X2 "Permalink to this definition")See [`GetX2`](#wx.GraphicsPenInfo.GetX2 "wx.GraphicsPenInfo.GetX2")
    Y1: 'Double'  # `Y1`[¶](#wx.GraphicsPenInfo.Y1 "Permalink to this definition")See [`GetY1`](#wx.GraphicsPenInfo.GetY1 "wx.GraphicsPenInfo.GetY1")
    Y2: 'Double'  # `Y2`[¶](#wx.GraphicsPenInfo.Y2 "Permalink to this definition")See [`GetY2`](#wx.GraphicsPenInfo.GetY2 "wx.GraphicsPenInfo.GetY2")



class GraphicsRenderer(Object):
    """ A GraphicsRenderer is the instance corresponding to the rendering
engine used.


  


        Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
    """
    def CreateBitmap(self, bitmap: 'Bitmap') -> 'GraphicsBitmap':
        """ 

`CreateBitmap`(*self*, *bitmap*)[¶](#wx.GraphicsRenderer.CreateBitmap "Permalink to this definition")
Creates  [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap) from an existing  [wx.Bitmap](wx.Bitmap.html#wx-bitmap).


Returns an invalid NullGraphicsBitmap on failure.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 



Return type
 [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateBitmapFromImage(self, image: 'Image') -> 'GraphicsBitmap':
        """ 

`CreateBitmapFromImage`(*self*, *image*)[¶](#wx.GraphicsRenderer.CreateBitmapFromImage "Permalink to this definition")
Creates  [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap) from an existing  [wx.Image](wx.Image.html#wx-image).


This method is more efficient than converting  [wx.Image](wx.Image.html#wx-image) to  [wx.Bitmap](wx.Bitmap.html#wx-bitmap) first and then calling [`CreateBitmap`](#wx.GraphicsRenderer.CreateBitmap "wx.GraphicsRenderer.CreateBitmap") but otherwise has the same effect.


Returns an invalid NullGraphicsBitmap on failure.



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 



Return type
 [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap)





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateBitmapFromNativeBitmap(self, bitmap: Any) -> 'GraphicsBitmap':
        """ 

`CreateBitmapFromNativeBitmap`(*self*, *bitmap*)[¶](#wx.GraphicsRenderer.CreateBitmapFromNativeBitmap "Permalink to this definition")
Creates  [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap) from a native bitmap handle.


*bitmap* meaning is platform-dependent. Currently it’s a GDI+ `Bitmap` pointer under MSW, `CGImage` pointer under macOS or a `cairo_surface_t` pointer when using Cairo under any platform.


Notice that this method takes ownership of *bitmap*, i.e. it will be destroyed when the returned  [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap) is.



Parameters
**bitmap** – 



Return type
 [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateBrush(self, brush: 'Brush') -> 'GraphicsBrush':
        """ 

`CreateBrush`(*self*, *brush*)[¶](#wx.GraphicsRenderer.CreateBrush "Permalink to this definition")
Creates a native brush from a  [wx.Brush](wx.Brush.html#wx-brush).



Parameters
**brush** ([*wx.Brush*](wx.Brush.html#wx.Brush "wx.Brush")) – 



Return type
 [wx.GraphicsBrush](wx.GraphicsBrush.html#wx-graphicsbrush)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateContext(self, *args, **kw) -> 'GraphicsContext':
        """ 

`CreateContext`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsRenderer.CreateContext "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreateContext** *(self, window)*


Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) from a  [wx.Window](wx.Window.html#wx-window).



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)






---

  



**CreateContext** *(self, windowDC)*


Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) from a  [wx.WindowDC](wx.WindowDC.html#wx-windowdc).



Parameters
**windowDC** ([*wx.WindowDC*](wx.WindowDC.html#wx.WindowDC "wx.WindowDC")) – 



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)






---

  



**CreateContext** *(self, memoryDC)*


Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) from a  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc).



Parameters
**memoryDC** ([*wx.MemoryDC*](wx.MemoryDC.html#wx.MemoryDC "wx.MemoryDC")) – 



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)






---

  



**CreateContext** *(self, printerDC)*


Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) from a  [wx.PrinterDC](wx.PrinterDC.html#wx-printerdc).



Parameters
**printerDC** ([*wx.PrinterDC*](wx.PrinterDC.html#wx.PrinterDC "wx.PrinterDC")) – 



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)





Note


Not implemented for Direct2D renderer (on MSW).





---

  





            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateContextFromImage(self, image: 'Image') -> 'GraphicsContext':
        """ 

`CreateContextFromImage`(*self*, *image*)[¶](#wx.GraphicsRenderer.CreateContextFromImage "Permalink to this definition")
Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) associated with a  [wx.Image](wx.Image.html#wx-image).


This function is used by *Context.CreateFromImage()* and is not normally called directly.



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateContextFromNativeContext(self, context: Any) -> 'GraphicsContext':
        """ 

`CreateContextFromNativeContext`(*self*, *context*)[¶](#wx.GraphicsRenderer.CreateContextFromNativeContext "Permalink to this definition")
Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) from a native context.


This native context must be a CGContextRef for Core Graphics, a Graphics pointer for GDIPlus, an ID2D1RenderTarget pointer for Direct2D, a cairo\_t pointer or `HDC` for Cairo on MSW, or a cairo\_t pointer for Cairo on any other platform.



Parameters
**context** – 



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateContextFromNativeWindow(self, window: Any) -> 'GraphicsContext':
        """ 

`CreateContextFromNativeWindow`(*self*, *window*)[¶](#wx.GraphicsRenderer.CreateContextFromNativeWindow "Permalink to this definition")
Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) from a native window.



Parameters
**window** – 



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateContextFromUnknownDC(self, dc: 'DC') -> 'GraphicsContext':
        """ 

`CreateContextFromUnknownDC`(*self*, *dc*)[¶](#wx.GraphicsRenderer.CreateContextFromUnknownDC "Permalink to this definition")
Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) from a DC of unknown specific type.


Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) if *dc* is a supported type (i.e. has a corresponding [`CreateContext`](#wx.GraphicsRenderer.CreateContext "wx.GraphicsRenderer.CreateContext") method, e.g.  [wx.WindowDC](wx.WindowDC.html#wx-windowdc) or  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc)). Returns `None` if the DC is unsupported.


This method is only useful as a helper in generic code that operates with  [wx.DC](wx.DC.html#wx-dc) and doesn’t known its exact type. Use the appropriate [`CreateContext`](#wx.GraphicsRenderer.CreateContext "wx.GraphicsRenderer.CreateContext") overload instead if you know that the DC is e.g.  [wx.WindowDC](wx.WindowDC.html#wx-windowdc).



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)





New in version 4.1/wxWidgets-3.1.3.




See also


[`wx.GraphicsContext.CreateFromUnknownDC`](wx.GraphicsContext.html#wx.GraphicsContext.CreateFromUnknownDC "wx.GraphicsContext.CreateFromUnknownDC")





            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateFont(self, *args, **kw) -> 'GraphicsFont':
        """ 

`CreateFont`(*self*, *\*args*, *\*\*kw*)[¶](#wx.GraphicsRenderer.CreateFont "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreateFont** *(self, font, col=BLACK)*


Creates a native graphics font from a  [wx.Font](wx.Font.html#wx-font) and a text colour.



Parameters
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –



Return type
 [wx.GraphicsFont](wx.GraphicsFont.html#wx-graphicsfont)






---

  



**CreateFont** *(self, sizeInPixels, facename, flags=FONTFLAG\_DEFAULT, col=BLACK)*


Creates a graphics font with the given characteristics.


If possible, the [`CreateFont`](#wx.GraphicsRenderer.CreateFont "wx.GraphicsRenderer.CreateFont") overload taking  [wx.Font](wx.Font.html#wx-font) should be used instead. The main advantage of this overload is that it can be used without X server connection under Unix when using Cairo.



Parameters
* **sizeInPixels** (*float*) – Height of the font in user space units, i.e. normally pixels. Notice that this is different from the overload taking  [wx.Font](wx.Font.html#wx-font) as  [wx.Font](wx.Font.html#wx-font) size is specified in points.
* **facename** (*string*) – The name of the font. The same font name might not be available under all platforms so the font name can also be empty to use the default platform font.
* **flags** (*int*) – Combination of FontFlag enum elements. Currently only `FONTFLAG_ITALIC` and `FONTFLAG_BOLD` are supported. By default the normal font version is used.
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The font colour, black by default.



Return type
 [wx.GraphicsFont](wx.GraphicsFont.html#wx-graphicsfont)





New in version 2.9.3.





---

  





            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateFontAtDPI(self, font, dpi, col=BLACK) -> 'GraphicsFont':
        """ 

`CreateFontAtDPI`(*self*, *font*, *dpi*, *col=BLACK*)[¶](#wx.GraphicsRenderer.CreateFontAtDPI "Permalink to this definition")
Creates a native graphics font from a  [wx.Font](wx.Font.html#wx-font) and a text colour.


The specified `DPI` is used to convert the (fractional)  [wx.Font](wx.Font.html#wx-font) point-size to a fractional pixel-size.



Parameters
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –
* **dpi** ([*wx.RealPoint*](wx.RealPoint.html#wx.RealPoint "wx.RealPoint")) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –



Return type
 [wx.GraphicsFont](wx.GraphicsFont.html#wx-graphicsfont)





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateImageFromBitmap(self, bmp: 'GraphicsBitmap') -> 'Image':
        """ 

`CreateImageFromBitmap`(*self*, *bmp*)[¶](#wx.GraphicsRenderer.CreateImageFromBitmap "Permalink to this definition")
Creates a  [wx.Image](wx.Image.html#wx-image) from a  [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap).


This method is used by the more convenient [`wx.GraphicsBitmap.ConvertToImage`](wx.GraphicsBitmap.html#wx.GraphicsBitmap.ConvertToImage "wx.GraphicsBitmap.ConvertToImage") .



Parameters
**bmp** ([*wx.GraphicsBitmap*](wx.GraphicsBitmap.html#wx.GraphicsBitmap "wx.GraphicsBitmap")) – 



Return type
 [wx.Image](wx.Image.html#wx-image)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateLinearGradientBrush(self, x1, y1, x2, y2, stops, matrix=NullGraphicsMatrix) -> 'GraphicsBrush':
        """ 

`CreateLinearGradientBrush`(*self*, *x1*, *y1*, *x2*, *y2*, *stops*, *matrix=NullGraphicsMatrix*)[¶](#wx.GraphicsRenderer.CreateLinearGradientBrush "Permalink to this definition")
Creates a native brush with a linear gradient.


Stops support is new since wxWidgets 2.9.1, previously only the start and end colours could be specified.


The ability to apply a transformation matrix to the gradient was added in 3.1.3



Parameters
* **x1** (*wx.Double*) –
* **y1** (*wx.Double*) –
* **x2** (*wx.Double*) –
* **y2** (*wx.Double*) –
* **stops** ([*wx.GraphicsGradientStops*](wx.GraphicsGradientStops.html#wx.GraphicsGradientStops "wx.GraphicsGradientStops")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsBrush](wx.GraphicsBrush.html#wx-graphicsbrush)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateMatrix(self, a=1.0, b=0.0, c=0.0, d=1.0, tx=0.0, ty=0.0) -> 'GraphicsMatrix':
        """ 

`CreateMatrix`(*self*, *a=1.0*, *b=0.0*, *c=0.0*, *d=1.0*, *tx=0.0*, *ty=0.0*)[¶](#wx.GraphicsRenderer.CreateMatrix "Permalink to this definition")
Creates a native affine transformation matrix from the passed in values.


The defaults result in an identity matrix.



Parameters
* **a** (*wx.Double*) –
* **b** (*wx.Double*) –
* **c** (*wx.Double*) –
* **d** (*wx.Double*) –
* **tx** (*wx.Double*) –
* **ty** (*wx.Double*) –



Return type
 [wx.GraphicsMatrix](wx.GraphicsMatrix.html#wx-graphicsmatrix)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateMeasuringContext(self) -> 'GraphicsContext':
        """ 

`CreateMeasuringContext`(*self*)[¶](#wx.GraphicsRenderer.CreateMeasuringContext "Permalink to this definition")
Creates a  [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext) that can be used for measuring texts only.


No drawing commands are allowed.



Return type
 [wx.GraphicsContext](wx.GraphicsContext.html#wx-graphicscontext)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreatePath(self) -> 'GraphicsPath':
        """ 

`CreatePath`(*self*)[¶](#wx.GraphicsRenderer.CreatePath "Permalink to this definition")
Creates a native graphics path which is initially empty.



Return type
 [wx.GraphicsPath](wx.GraphicsPath.html#wx-graphicspath)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreatePen(self, info: 'GraphicsPenInfo') -> 'GraphicsPen':
        """ 

`CreatePen`(*self*, *info*)[¶](#wx.GraphicsRenderer.CreatePen "Permalink to this definition")
Creates a native pen from its description.



Parameters
**info** ([*wx.GraphicsPenInfo*](wx.GraphicsPenInfo.html#wx.GraphicsPenInfo "wx.GraphicsPenInfo")) – 



Return type
 [wx.GraphicsPen](wx.GraphicsPen.html#wx-graphicspen)





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateRadialGradientBrush(self, startX, startY, endX, endY, radius, stops, matrix=NullGraphicsMatrix) -> 'GraphicsBrush':
        """ 

`CreateRadialGradientBrush`(*self*, *startX*, *startY*, *endX*, *endY*, *radius*, *stops*, *matrix=NullGraphicsMatrix*)[¶](#wx.GraphicsRenderer.CreateRadialGradientBrush "Permalink to this definition")
Creates a native brush with a radial gradient.


Stops support is new since wxWidgets 2.9.1, previously only the start and end colours could be specified.


The ability to apply a transformation matrix to the gradient was added in 3.1.3



Parameters
* **startX** (*wx.Double*) –
* **startY** (*wx.Double*) –
* **endX** (*wx.Double*) –
* **endY** (*wx.Double*) –
* **radius** (*wx.Double*) –
* **stops** ([*wx.GraphicsGradientStops*](wx.GraphicsGradientStops.html#wx.GraphicsGradientStops "wx.GraphicsGradientStops")) –
* **matrix** ([*wx.GraphicsMatrix*](wx.GraphicsMatrix.html#wx.GraphicsMatrix "wx.GraphicsMatrix")) –



Return type
 [wx.GraphicsBrush](wx.GraphicsBrush.html#wx-graphicsbrush)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def CreateSubBitmap(self, bitmap, x, y, w, h) -> 'GraphicsBitmap':
        """ 

`CreateSubBitmap`(*self*, *bitmap*, *x*, *y*, *w*, *h*)[¶](#wx.GraphicsRenderer.CreateSubBitmap "Permalink to this definition")
Extracts a sub-bitmap from an existing bitmap.



Parameters
* **bitmap** ([*wx.GraphicsBitmap*](wx.GraphicsBitmap.html#wx.GraphicsBitmap "wx.GraphicsBitmap")) –
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –



Return type
 [wx.GraphicsBitmap](wx.GraphicsBitmap.html#wx-graphicsbitmap)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    @staticmethod
    def GetCairoRenderer() -> 'GraphicsRenderer':
        """ 

*static* `GetCairoRenderer`()[¶](#wx.GraphicsRenderer.GetCairoRenderer "Permalink to this definition")
Returns Cairo renderer.



Return type
 [wx.GraphicsRenderer](#wx-graphicsrenderer)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    @staticmethod
    def GetDefaultRenderer() -> 'GraphicsRenderer':
        """ 

*static* `GetDefaultRenderer`()[¶](#wx.GraphicsRenderer.GetDefaultRenderer "Permalink to this definition")
Returns the default renderer on this platform.


On macOS this is the Core Graphics (a.k.a. Quartz `2D`) renderer, on MSW the GDIPlus renderer, and on GTK we currently default to the Cairo renderer.



Return type
 [wx.GraphicsRenderer](#wx-graphicsrenderer)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    @staticmethod
    def GetDirect2DRenderer() -> 'GraphicsRenderer':
        """ 

*static* `GetDirect2DRenderer`()[¶](#wx.GraphicsRenderer.GetDirect2DRenderer "Permalink to this definition")
Returns Direct2D renderer (MSW and Python3 only).



Return type
 [wx.GraphicsRenderer](#wx-graphicsrenderer)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    @staticmethod
    def GetGDIPlusRenderer() -> 'GraphicsRenderer':
        """ 

*static* `GetGDIPlusRenderer`()[¶](#wx.GraphicsRenderer.GetGDIPlusRenderer "Permalink to this definition")
Returns GDI+ renderer (MSW only).



Return type
 [wx.GraphicsRenderer](#wx-graphicsrenderer)






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.GraphicsRenderer.GetName "Permalink to this definition")
Returns the name of the technology used by the renderer.


Currently this function returns “gdiplus” for Windows GDI+ implementation, “direct2d” for Windows Direct2D implementation, “cairo” for Cairo implementation and “cg” for macOS CoreGraphics implementation.



Return type
`string`





New in version 4.1/wxWidgets-3.1.0.




Note


The string returned by this method is not user-readable and is expected to be used internally by the program only.





            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def GetType(self) -> None:
        """ 

`GetType`(*self*)[¶](#wx.GraphicsRenderer.GetType "Permalink to this definition")
Returns the name of the GraphicsRenderer class.




            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    def GetVersion(self, major, minor=None, micro=None) -> None:
        """ 

`GetVersion`(*self*, *major*, *minor=None*, *micro=None*)[¶](#wx.GraphicsRenderer.GetVersion "Permalink to this definition")
Returns the version major, minor and micro/build of the technology used by the renderer.


Currently this function returns the OS major and minor versions in the parameters with the matching names and sets *micro* to 0 for the GDI+ and CoreGraphics engines which are considered to be parts of their respective OS.


For Cairo, this is the major,minor,micro version of the Cairo library which is returned.



Parameters
* **major** (*int*) –
* **minor** (*int*) –
* **micro** (*int*) –






            Source: https://docs.wxpython.org/wx.GraphicsRenderer.html
        """

    Name: str  # `Name`[¶](#wx.GraphicsRenderer.Name "Permalink to this definition")See [`GetName`](#wx.GraphicsRenderer.GetName "wx.GraphicsRenderer.GetName")
    Type: None  # `Type`[¶](#wx.GraphicsRenderer.Type "Permalink to this definition")See [`GetType`](#wx.GraphicsRenderer.GetType "wx.GraphicsRenderer.GetType")



class Sizer(Object):
    """ **Possible constructors**:



```
Sizer()

```


Sizer is the abstract base class used for laying out subwindows in a
window.


  


        Source: https://docs.wxpython.org/wx.Sizer.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.Sizer.__init__ "Permalink to this definition")
The constructor.


Note that  [wx.Sizer](#wx-sizer) is an abstract base class and may not be instantiated.




            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Add(self, *args, **kw) -> 'SizerItem':
        """ 

`Add`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.Add "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Add** *(self, window, flags)*


Appends a child to the sizer.


 [wx.Sizer](#wx-sizer) itself is an abstract class, but the parameters are equivalent in the derived classes that you will instantiate to use it so they are described here:



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window to be added to the sizer. Its initial size (either set explicitly by the user or calculated internally when using DefaultSize) is interpreted as the minimal and in many cases also the initial size.
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) – A  [wx.SizerFlags](wx.SizerFlags.html#wx-sizerflags) object that enables you to specify most of the above parameters more conveniently.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Add** *(self, window, proportion=0, flag=0, border=0, userData=None)*


Appends a child to the sizer.


 [wx.Sizer](#wx-sizer) itself is an abstract class, but the parameters are equivalent in the derived classes that you will instantiate to use it so they are described here:



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window to be added to the sizer. Its initial size (either set explicitly by the user or calculated internally when using DefaultSize) is interpreted as the minimal and in many cases also the initial size.
* **proportion** (*int*) – Although the meaning of this parameter is undefined in  [wx.Sizer](#wx-sizer), it is used in  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) to indicate if a child of a sizer can change its size in the main orientation of the  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) - where 0 stands for not changeable and a value of more than zero is interpreted relative to the value of other children of the same  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer). For example, you might have a horizontal  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) with three children, two of which are supposed to change their size with the sizer. Then the two stretchable windows would get a value of 1 each to make them grow and shrink equally with the sizer’s horizontal dimension.
* **flag** (*int*) – OR-combination of flags affecting sizer’s behaviour. See [Sizer flags list](#wx-sizer) for details.
* **border** (*int*) – Determines the border width, if the flag parameter is set to include any border flag.
* **userData** (*PyUserData*) – Allows an extra object to be attached to the sizer item, for use in derived classes when sizing information is more complex than the proportion and flag will allow for.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Add** *(self, sizer, flags)*


Appends a child to the sizer.


 [wx.Sizer](#wx-sizer) itself is an abstract class, but the parameters are equivalent in the derived classes that you will instantiate to use it so they are described here:



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) – The (child-)sizer to be added to the sizer. This allows placing a child sizer in a sizer and thus to create hierarchies of sizers (typically a vertical box as the top sizer and several horizontal boxes on the level beneath).
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) – A  [wx.SizerFlags](wx.SizerFlags.html#wx-sizerflags) object that enables you to specify most of the above parameters more conveniently.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Add** *(self, sizer, proportion=0, flag=0, border=0, userData=None)*


Appends a child to the sizer.


 [wx.Sizer](#wx-sizer) itself is an abstract class, but the parameters are equivalent in the derived classes that you will instantiate to use it so they are described here:



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) – The (child-)sizer to be added to the sizer. This allows placing a child sizer in a sizer and thus to create hierarchies of sizers (typically a vertical box as the top sizer and several horizontal boxes on the level beneath).
* **proportion** (*int*) – Although the meaning of this parameter is undefined in  [wx.Sizer](#wx-sizer), it is used in  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) to indicate if a child of a sizer can change its size in the main orientation of the  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) - where 0 stands for not changeable and a value of more than zero is interpreted relative to the value of other children of the same  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer). For example, you might have a horizontal  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) with three children, two of which are supposed to change their size with the sizer. Then the two stretchable windows would get a value of 1 each to make them grow and shrink equally with the sizer’s horizontal dimension.
* **flag** (*int*) – OR-combination of flags affecting sizer’s behaviour. See [Sizer flags list](#wx-sizer) for details.
* **border** (*int*) – Determines the border width, if the flag parameter is set to include any border flag.
* **userData** (*PyUserData*) – Allows an extra object to be attached to the sizer item, for use in derived classes when sizing information is more complex than the proportion and flag will allow for.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Add** *(self, width, height, proportion=0, flag=0, border=0, userData=None)*


Appends a spacer child to the sizer.


 [wx.Sizer](#wx-sizer) itself is an abstract class, but the parameters are equivalent in the derived classes that you will instantiate to use it so they are described here.


*width* and *height* specify the dimension of a spacer to be added to the sizer. Adding spacers to sizers gives more flexibility in the design of dialogs; imagine for example a horizontal box with two buttons at the bottom of a dialog: you might want to insert a space between the two buttons and make that space stretchable using the proportion flag and the result will be that the left button will be aligned with the left side of the dialog and the right button with the right side - the space in between will shrink and grow with the dialog.



Parameters
* **width** (*int*) – Width of the spacer.
* **height** (*int*) – Height of the spacer.
* **proportion** (*int*) – Although the meaning of this parameter is undefined in  [wx.Sizer](#wx-sizer), it is used in  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) to indicate if a child of a sizer can change its size in the main orientation of the  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) - where 0 stands for not changeable and a value of more than zero is interpreted relative to the value of other children of the same  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer). For example, you might have a horizontal  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) with three children, two of which are supposed to change their size with the sizer. Then the two stretchable windows would get a value of 1 each to make them grow and shrink equally with the sizer’s horizontal dimension.
* **flag** (*int*) – OR-combination of flags affecting sizer’s behaviour. See [Sizer flags list](#wx-sizer) for details.
* **border** (*int*) – Determines the border width, if the flag parameter is set to include any border flag.
* **userData** (*PyUserData*) – Allows an extra object to be attached to the sizer item, for use in derived classes when sizing information is more complex than the proportion and flag will allow for.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Add** *(self, width, height, flags)*


Appends a spacer child to the sizer.



Parameters
* **width** (*int*) – Width of the spacer.
* **height** (*int*) – Height of the spacer.
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) – A  [wx.SizerFlags](wx.SizerFlags.html#wx-sizerflags) object that enables you to specify most of the other parameters more conveniently.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Add** *(self, item)*



Parameters
**item** ([*wx.SizerItem*](wx.SizerItem.html#wx.SizerItem "wx.SizerItem")) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Add** *(self, size, proportion=0, flag=0, border=0, /Transfer/=None)*


Add a spacer using a [`Size`](#wx.Sizer.Size "wx.Sizer.Size") object.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Add** *(self, size, flags)*


Add a spacer using a [`Size`](#wx.Sizer.Size "wx.Sizer.Size") object.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def AddMany(self, items) -> None:
        """ 

`AddMany`(*self*, *items*)[¶](#wx.Sizer.AddMany "Permalink to this definition")
[`AddMany`](#wx.Sizer.AddMany "wx.Sizer.AddMany") is a convenience method for adding several items to a sizer
at one time. Simply pass it a list of tuples, where each tuple
consists of the parameters that you would normally pass to the [`Add`](sizers_overview.html#Add "Add")
method.




            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def AddSpacer(self, size: int) -> 'SizerItem':
        """ 

`AddSpacer`(*self*, *size*)[¶](#wx.Sizer.AddSpacer "Permalink to this definition")
This base function adds non-stretchable space to both the horizontal and vertical orientation of the sizer.


More readable way of calling:



```
wx.Sizer.Add(size, size, 0)

```



Parameters
**size** (*int*) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)





See also


[`wx.BoxSizer.AddSpacer`](wx.BoxSizer.html#wx.BoxSizer.AddSpacer "wx.BoxSizer.AddSpacer")





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def AddStretchSpacer(self, prop: int=1) -> 'SizerItem':
        """ 

`AddStretchSpacer`(*self*, *prop=1*)[¶](#wx.Sizer.AddStretchSpacer "Permalink to this definition")
Adds stretchable space to the sizer.


More readable way of calling:



```
wx.Sizer.Add(0, 0, proportion)

```



Parameters
**prop** (*int*) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.Sizer.CalcMin "Permalink to this definition")
This method is abstract and has to be overwritten by any derived class.


Here, the sizer will do the actual calculation of its children’s minimal sizes.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Clear(self, delete_windows: bool=False) -> None:
        """ 

`Clear`(*self*, *delete\_windows=False*)[¶](#wx.Sizer.Clear "Permalink to this definition")
Detaches all children from the sizer.


If *delete\_windows* is `True` then child windows will also be deleted.


Notice that child sizers are always deleted, as a general consequence of the principle that sizers own their sizer children, but don’t own their window children (because they are already owned by their parent windows).



Parameters
**delete\_windows** (*bool*) – 






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def ComputeFittingClientSize(self, window: 'Window') -> 'Size':
        """ 

`ComputeFittingClientSize`(*self*, *window*)[¶](#wx.Sizer.ComputeFittingClientSize "Permalink to this definition")
Computes client area size for *window* so that it matches the sizer’s minimal size.


Unlike [`GetMinSize`](#wx.Sizer.GetMinSize "wx.Sizer.GetMinSize") , this method accounts for other constraints imposed on *window*, namely display’s size (returned size will never be too large for the display) and maximum window size if previously set by [`wx.Window.SetMaxSize`](wx.Window.html#wx.Window.SetMaxSize "wx.Window.SetMaxSize") .


The returned value is suitable for passing to [`wx.Window.SetClientSize`](wx.Window.html#wx.Window.SetClientSize "wx.Window.SetClientSize") or [`wx.Window.SetMinClientSize`](wx.Window.html#wx.Window.SetMinClientSize "wx.Window.SetMinClientSize") .



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.8.8.




See also


[`ComputeFittingWindowSize`](#wx.Sizer.ComputeFittingWindowSize "wx.Sizer.ComputeFittingWindowSize") , [`Fit`](#wx.Sizer.Fit "wx.Sizer.Fit")





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def ComputeFittingWindowSize(self, window: 'Window') -> 'Size':
        """ 

`ComputeFittingWindowSize`(*self*, *window*)[¶](#wx.Sizer.ComputeFittingWindowSize "Permalink to this definition")
Like [`ComputeFittingClientSize`](#wx.Sizer.ComputeFittingClientSize "wx.Sizer.ComputeFittingClientSize") , but converts the result into window size.


The returned value is suitable for passing to [`wx.Window.SetSize`](wx.Window.html#wx.Window.SetSize "wx.Window.SetSize") or [`wx.Window.SetMinSize`](wx.Window.html#wx.Window.SetMinSize "wx.Window.SetMinSize") .



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.8.8.




See also


[`ComputeFittingClientSize`](#wx.Sizer.ComputeFittingClientSize "wx.Sizer.ComputeFittingClientSize") , [`Fit`](#wx.Sizer.Fit "wx.Sizer.Fit")





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Detach(self, *args, **kw) -> bool:
        """ 

`Detach`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.Detach "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Detach** *(self, window)*


Detach the child *window* from the sizer without destroying it.


This method does not cause any layout or resizing to take place, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") to update the layout “on screen” after detaching a child from the sizer.


Returns `True` if the child item was found and detached, `False` otherwise.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*





See also


[`Remove`](#wx.Sizer.Remove "wx.Sizer.Remove")





---

  



**Detach** *(self, sizer)*


Detach the child *sizer* from the sizer without destroying it.


This method does not cause any layout or resizing to take place, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") to update the layout “on screen” after detaching a child from the sizer.


Returns `True` if the child item was found and detached, `False` otherwise.



Parameters
**sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) – 



Return type
*bool*





See also


[`Remove`](#wx.Sizer.Remove "wx.Sizer.Remove")





---

  



**Detach** *(self, index)*


Detach an item at position *index* from the sizer without destroying it.


This method does not cause any layout or resizing to take place, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") to update the layout “on screen” after detaching a child from the sizer. Returns `True` if the child item was found and detached, `False` otherwise.



Parameters
**index** (*int*) – 



Return type
*bool*





See also


[`Remove`](#wx.Sizer.Remove "wx.Sizer.Remove")





---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Fit(self, window: 'Window') -> 'Size':
        """ 

`Fit`(*self*, *window*)[¶](#wx.Sizer.Fit "Permalink to this definition")
Tell the sizer to resize the *window* so that its client area matches the sizer’s minimal size ( [`ComputeFittingClientSize`](#wx.Sizer.ComputeFittingClientSize "wx.Sizer.ComputeFittingClientSize") is called to determine it).


This is commonly done in the constructor of the window itself, see sample in the description of  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer).



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)



Returns
The new window size.





See also


[`ComputeFittingClientSize`](#wx.Sizer.ComputeFittingClientSize "wx.Sizer.ComputeFittingClientSize") , [`ComputeFittingWindowSize`](#wx.Sizer.ComputeFittingWindowSize "wx.Sizer.ComputeFittingWindowSize")





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def FitInside(self, window: 'Window') -> None:
        """ 

`FitInside`(*self*, *window*)[¶](#wx.Sizer.FitInside "Permalink to this definition")
Tell the sizer to resize the virtual size of the *window* to match the sizer’s minimal size.


This will not alter the on screen size of the window, but may cause the addition/removal/alteration of scrollbars required to view the virtual area in windows which manage it.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 





See also


[`wx.Scrolled.SetScrollbars`](wx.Scrolled.html#wx.Scrolled.SetScrollbars "wx.Scrolled.SetScrollbars") , `SetVirtualSizeHints`





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def GetChildren(self) -> 'SizerItemList':
        """ 

`GetChildren`(*self*)[¶](#wx.Sizer.GetChildren "Permalink to this definition")
Returns the list of the items in this sizer.


The elements of type-safe List `SizerItemList` are pointers to objects of type  [wx.SizerItem](wx.SizerItem.html#wx-sizeritem).



Return type
*SizerItemList*






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def GetContainingWindow(self) -> 'Window':
        """ 

`GetContainingWindow`(*self*)[¶](#wx.Sizer.GetContainingWindow "Permalink to this definition")
Returns the window this sizer is used in or `None` if none.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def GetItem(self, *args, **kw) -> 'SizerItem':
        """ 

`GetItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.GetItem "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetItem** *(self, window, recursive=False)*


Finds the  [wx.SizerItem](wx.SizerItem.html#wx-sizeritem) which holds the given *window*.


Use parameter *recursive* to search in subsizers too.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **recursive** (*bool*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)



Returns
Pointer to the item or `None` if there is no item with the window.






---

  



**GetItem** *(self, sizer, recursive=False)*


Finds the  [wx.SizerItem](wx.SizerItem.html#wx-sizeritem) which holds the given *sizer*.


Use parameter *recursive* to search in subsizers too.



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **recursive** (*bool*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)



Returns
Pointer to the item or `None` if the given sizer is not in the sizer.






---

  



**GetItem** *(self, index)*


Finds the  [wx.SizerItem](wx.SizerItem.html#wx-sizeritem) which is located in the sizer at position *index*.



Parameters
**index** (*int*) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)



Returns
Pointer to the item or `None` if there is no item at that index.






---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def GetItemById(self, id, recursive=False) -> 'SizerItem':
        """ 

`GetItemById`(*self*, *id*, *recursive=False*)[¶](#wx.Sizer.GetItemById "Permalink to this definition")
Finds the item in the sizer which has the given *id*.


This *id* is not the window id but the id of the  [wx.SizerItem](wx.SizerItem.html#wx-sizeritem) itself. This is mainly useful for retrieving the sizers created from `XRC` resources. Use parameter *recursive* to search in subsizers too.



Parameters
* **id** (*int*) –
* **recursive** (*bool*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)



Returns
Pointer to item or `None` if no item has that id.






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def GetItemCount(self) -> int:
        """ 

`GetItemCount`(*self*)[¶](#wx.Sizer.GetItemCount "Permalink to this definition")
Returns the number of items in the sizer.


If you just need to test whether the sizer is empty or not you can also use the [`IsEmpty`](#wx.Sizer.IsEmpty "wx.Sizer.IsEmpty") function.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def GetMinSize(self) -> 'Size':
        """ 

`GetMinSize`(*self*)[¶](#wx.Sizer.GetMinSize "Permalink to this definition")
Returns the minimal size of the sizer.


This is either the combined minimal size of all the children and their borders or the minimal size set by [`SetMinSize`](#wx.Sizer.SetMinSize "wx.Sizer.SetMinSize") , depending on which is bigger. Note that the returned value is client size, not window size. In particular, if you use the value to set toplevel window’s minimal or actual size, use [`wx.Window.SetMinClientSize`](wx.Window.html#wx.Window.SetMinClientSize "wx.Window.SetMinClientSize") or [`wx.Window.SetClientSize`](wx.Window.html#wx.Window.SetClientSize "wx.Window.SetClientSize") , not [`wx.Window.SetMinSize`](wx.Window.html#wx.Window.SetMinSize "wx.Window.SetMinSize") or [`wx.Window.SetSize`](wx.Window.html#wx.Window.SetSize "wx.Window.SetSize") .



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.Sizer.GetPosition "Permalink to this definition")
Returns the current position of the sizer.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.Sizer.GetSize "Permalink to this definition")
Returns the current size of the sizer.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Hide(self, *args, **kw) -> bool:
        """ 

`Hide`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.Hide "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Hide** *(self, window, recursive=False)*


Hides the child *window*.


To make a sizer item disappear, use [`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") followed by [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") .


Use parameter *recursive* to hide elements found in subsizers. Returns `True` if the child item was found, `False` otherwise.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **recursive** (*bool*) –



Return type
*bool*





See also


[`IsShown`](#wx.Sizer.IsShown "wx.Sizer.IsShown") , [`Show`](#wx.Sizer.Show "wx.Sizer.Show")





---

  



**Hide** *(self, sizer, recursive=False)*


Hides the child *sizer*.


To make a sizer item disappear, use [`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") followed by [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") .


Use parameter *recursive* to hide elements found in subsizers. Returns `True` if the child item was found, `False` otherwise.



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **recursive** (*bool*) –



Return type
*bool*





See also


[`IsShown`](#wx.Sizer.IsShown "wx.Sizer.IsShown") , [`Show`](#wx.Sizer.Show "wx.Sizer.Show")





---

  



**Hide** *(self, index)*


Hides the item at position *index*.


To make a sizer item disappear, use [`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") followed by [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") .


Use parameter *recursive* to hide elements found in subsizers. Returns `True` if the child item was found, `False` otherwise.



Parameters
**index** (*int*) – 



Return type
*bool*





See also


[`IsShown`](#wx.Sizer.IsShown "wx.Sizer.IsShown") , [`Show`](#wx.Sizer.Show "wx.Sizer.Show")





---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def InformFirstDirection(self, direction, size, availableOtherDir) -> bool:
        """ 

`InformFirstDirection`(*self*, *direction*, *size*, *availableOtherDir*)[¶](#wx.Sizer.InformFirstDirection "Permalink to this definition")
Inform sizer about the first direction that has been decided (by parent item).


Returns `True` if it made use of the information (and recalculated min size).



Parameters
* **direction** (*int*) –
* **size** (*int*) –
* **availableOtherDir** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Insert(self, *args, **kw) -> 'SizerItem':
        """ 

`Insert`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.Insert "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Insert** *(self, index, window, flags)*


Insert a child into the sizer before any existing item at *index*.


See [`Add`](sizers_overview.html#Add "Add") for the meaning of the other parameters.



Parameters
* **index** (*int*) –
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Insert** *(self, index, window, proportion=0, flag=0, border=0, userData=None)*


Insert a child into the sizer before any existing item at *index*.


See [`Add`](sizers_overview.html#Add "Add") for the meaning of the other parameters.



Parameters
* **index** (*int*) –
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Insert** *(self, index, sizer, flags)*


Insert a child into the sizer before any existing item at *index*.


See [`Add`](sizers_overview.html#Add "Add") for the meaning of the other parameters.



Parameters
* **index** (*int*) –
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Insert** *(self, index, sizer, proportion=0, flag=0, border=0, userData=None)*


Insert a child into the sizer before any existing item at *index*.


See [`Add`](sizers_overview.html#Add "Add") for the meaning of the other parameters.



Parameters
* **index** (*int*) –
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Insert** *(self, index, width, height, proportion=0, flag=0, border=0, userData=None)*


Insert a child into the sizer before any existing item at *index*.


See [`Add`](sizers_overview.html#Add "Add") for the meaning of the other parameters.



Parameters
* **index** (*int*) –
* **width** (*int*) –
* **height** (*int*) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Insert** *(self, index, width, height, flags)*


Insert a child into the sizer before any existing item at *index*.


See [`Add`](sizers_overview.html#Add "Add") for the meaning of the other parameters.



Parameters
* **index** (*int*) –
* **width** (*int*) –
* **height** (*int*) –
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Insert** *(self, index, item)*



Parameters
* **index** (*int*) –
* **item** ([*wx.SizerItem*](wx.SizerItem.html#wx.SizerItem "wx.SizerItem")) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Insert** *(self, index, size, proportion=0, flag=0, border=0, /Transfer/=None)*


Insert a spacer using a [`Size`](#wx.Sizer.Size "wx.Sizer.Size") object.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Insert** *(self, index, size, flags)*


Insert a spacer using a [`Size`](#wx.Sizer.Size "wx.Sizer.Size") object.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def InsertSpacer(self, index, size) -> 'SizerItem':
        """ 

`InsertSpacer`(*self*, *index*, *size*)[¶](#wx.Sizer.InsertSpacer "Permalink to this definition")
Inserts non-stretchable space to the sizer.


More readable way of calling *Sizer.Insert(index,* size, size).



Parameters
* **index** (*int*) –
* **size** (*int*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def InsertStretchSpacer(self, index, prop=1) -> 'SizerItem':
        """ 

`InsertStretchSpacer`(*self*, *index*, *prop=1*)[¶](#wx.Sizer.InsertStretchSpacer "Permalink to this definition")
Inserts stretchable space to the sizer.


More readable way of calling *Sizer.Insert(0,* 0, prop).



Parameters
* **index** (*int*) –
* **prop** (*int*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.Sizer.IsEmpty "Permalink to this definition")
Return `True` if the sizer has no elements.



Return type
*bool*





See also


[`GetItemCount`](#wx.Sizer.GetItemCount "wx.Sizer.GetItemCount")





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def IsShown(self, *args, **kw) -> bool:
        """ 

`IsShown`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.IsShown "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**IsShown** *(self, window)*


Returns `True` if the *window* is shown.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*





See also


[`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") , [`Show`](#wx.Sizer.Show "wx.Sizer.Show") , [`wx.SizerItem.IsShown`](wx.SizerItem.html#wx.SizerItem.IsShown "wx.SizerItem.IsShown")





---

  



**IsShown** *(self, sizer)*


Returns `True` if the *sizer* is shown.



Parameters
**sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) – 



Return type
*bool*





See also


[`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") , [`Show`](#wx.Sizer.Show "wx.Sizer.Show") , [`wx.SizerItem.IsShown`](wx.SizerItem.html#wx.SizerItem.IsShown "wx.SizerItem.IsShown")





---

  



**IsShown** *(self, index)*


Returns `True` if the item at *index* is shown.



Parameters
**index** (*int*) – 



Return type
*bool*





See also


[`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") , [`Show`](#wx.Sizer.Show "wx.Sizer.Show") , [`wx.SizerItem.IsShown`](wx.SizerItem.html#wx.SizerItem.IsShown "wx.SizerItem.IsShown")





---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Layout(self) -> None:
        """ 

`Layout`(*self*)[¶](#wx.Sizer.Layout "Permalink to this definition")
Call this to force layout of the children anew, e.g. after having added a child to or removed a child (window, other sizer or space) from the sizer while keeping the current dimension.




            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Prepend(self, *args, **kw) -> 'SizerItem':
        """ 

`Prepend`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.Prepend "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Prepend** *(self, window, flags)*


Same as [`Add`](sizers_overview.html#Add "Add") , but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Prepend** *(self, window, proportion=0, flag=0, border=0, userData=None)*


Same as [`Add`](sizers_overview.html#Add "Add") , but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Prepend** *(self, sizer, flags)*


Same as [`Add`](sizers_overview.html#Add "Add") , but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Prepend** *(self, sizer, proportion=0, flag=0, border=0, userData=None)*


Same as [`Add`](sizers_overview.html#Add "Add") , but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Prepend** *(self, width, height, proportion=0, flag=0, border=0, userData=None)*


Same as [`Add`](sizers_overview.html#Add "Add") , but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Prepend** *(self, width, height, flags)*


Same as [`Add`](sizers_overview.html#Add "Add") , but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) –



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Prepend** *(self, item)*



Parameters
**item** ([*wx.SizerItem*](wx.SizerItem.html#wx.SizerItem "wx.SizerItem")) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Prepend** *(self, size, proportion=0, flag=0, border=0, /Transfer/=None)*


Prepend a spacer using a [`Size`](#wx.Sizer.Size "wx.Sizer.Size") object.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  



**Prepend** *(self, size, flags)*


Prepend a spacer using a [`Size`](#wx.Sizer.Size "wx.Sizer.Size") object.



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def PrependSpacer(self, size: int) -> 'SizerItem':
        """ 

`PrependSpacer`(*self*, *size*)[¶](#wx.Sizer.PrependSpacer "Permalink to this definition")
Prepends non-stretchable space to the sizer.


More readable way of calling *Sizer.Prepend(size,* size, 0).



Parameters
**size** (*int*) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def PrependStretchSpacer(self, prop: int=1) -> 'SizerItem':
        """ 

`PrependStretchSpacer`(*self*, *prop=1*)[¶](#wx.Sizer.PrependStretchSpacer "Permalink to this definition")
Prepends stretchable space to the sizer.


More readable way of calling *Sizer.Prepend(0,* 0, prop).



Parameters
**prop** (*int*) – 



Return type
 [wx.SizerItem](wx.SizerItem.html#wx-sizeritem)






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def RecalcSizes(self) -> None:
        """ 

`RecalcSizes`(*self*)[¶](#wx.Sizer.RecalcSizes "Permalink to this definition")
This is a deprecated version of RepositionChildren()


This is a deprecated version of RepositionChildren() which doesn’t take
the minimal size parameter which is not needed for very simple sizers
but typically is for anything more complicated, so prefer to override
RepositionChildren() in new code.


If RepositionChildren() is not overridden, this method must be
overridden, calling the base class version results in an assertion
failure.




            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Remove(self, *args, **kw) -> bool:
        """ 

`Remove`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.Remove "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Remove** *(self, sizer)*


Removes a sizer child from the sizer and destroys it.



Parameters
**sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) – The  [wx.Sizer](#wx-sizer) to be removed.



Return type
*bool*



Returns
`True` if the child item was found and removed, `False` otherwise.





Note


This method does not cause any layout or resizing to take place, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") to update the layout “on screen” after removing a child from the sizer.





---

  



**Remove** *(self, index)*


Removes a child from the sizer and destroys it if it is a sizer or a spacer, but not if it is a window (because windows are owned by their parent window, not the sizer).



Parameters
**index** (*int*) – The position of the child in the sizer, e.g. 0 for the first item.



Return type
*bool*



Returns
`True` if the child item was found and removed, `False` otherwise.





Note


This method does not cause any layout or resizing to take place, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") to update the layout “on screen” after removing a child from the sizer.





---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Replace(self, *args, **kw) -> bool:
        """ 

`Replace`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.Replace "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Replace** *(self, oldwin, newwin, recursive=False)*


Detaches the given *oldwin* from the sizer and replaces it with the given *newwin*.


The detached child window is **not** deleted (because windows are owned by their parent window, not the sizer).


Use parameter *recursive* to search the given element recursively in subsizers.


This method does not cause any layout or resizing to take place, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") to update the layout “on screen” after replacing a child from the sizer.


Returns `True` if the child item was found and removed, `False` otherwise.



Parameters
* **oldwin** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **newwin** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **recursive** (*bool*) –



Return type
*bool*






---

  



**Replace** *(self, oldsz, newsz, recursive=False)*


Detaches the given *oldsz* from the sizer and replaces it with the given *newsz*.


The detached child sizer is deleted.


Use parameter *recursive* to search the given element recursively in subsizers.


This method does not cause any layout or resizing to take place, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") to update the layout “on screen” after replacing a child from the sizer.


Returns `True` if the child item was found and removed, `False` otherwise.



Parameters
* **oldsz** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **newsz** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **recursive** (*bool*) –



Return type
*bool*






---

  



**Replace** *(self, index, newitem)*


Detaches the given item at position *index* from the sizer and replaces it with the given  [wx.SizerItem](wx.SizerItem.html#wx-sizeritem) *newitem*.


The detached child is deleted **only** if it is a sizer or a spacer (but not if it is a  [wx.Window](wx.Window.html#wx-window) because windows are owned by their parent window, not the sizer).


This method does not cause any layout or resizing to take place, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") to update the layout “on screen” after replacing a child from the sizer.


Returns `True` if the child item was found and removed, `False` otherwise.



Parameters
* **index** (*int*) –
* **newitem** ([*wx.SizerItem*](wx.SizerItem.html#wx.SizerItem "wx.SizerItem")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def RepositionChildren(self, minSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`RepositionChildren`(*self*, *minSize*)[¶](#wx.Sizer.RepositionChildren "Permalink to this definition")
Method which must be overridden in the derived sizer classes.


The implementation should reposition the children using the current total size available to the sizer ( `m_size` ) and the size computed by the last call to [`CalcMin`](#wx.Sizer.CalcMin "wx.Sizer.CalcMin") .


Note that you should never call this method directly, call [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") instead if you need to manually update the sizer elements positions. This method is only called by wxWidgets itself.



Parameters
**minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





New in version 4.1/wxWidgets-3.1.3: ,
before this version RecalcSizes() method not taking any arguments had to be overridden in the derived classes instead.





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def SetContainingWindow(self, window: 'Window') -> None:
        """ 

`SetContainingWindow`(*self*, *window*)[¶](#wx.Sizer.SetContainingWindow "Permalink to this definition")
Set the window this sizer is used in.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def SetDimension(self, *args, **kw) -> None:
        """ 

`SetDimension`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.SetDimension "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetDimension** *(self, x, y, width, height)*


Call this to force the sizer to take the given dimension and thus force the items owned by the sizer to resize themselves according to the rules defined by the parameter in the [`Add`](sizers_overview.html#Add "Add") and [`Prepend`](#wx.Sizer.Prepend "wx.Sizer.Prepend") methods.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –






---

  



**SetDimension** *(self, pos, size)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def SetItemMinSize(self, *args, **kw) -> None:
        """ 

`SetItemMinSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.SetItemMinSize "Permalink to this definition")
Set an item’s minimum size by window, sizer, or position.


This function enables an application to set the size of an item after initial creation.


The *window* or *sizer* will be found recursively in the sizer’s descendants.



Returns
`True` if the minimal size was successfully set or `False` if the item was not found.





See also


[`wx.SizerItem.SetMinSize`](wx.SizerItem.html#wx.SizerItem.SetMinSize "wx.SizerItem.SetMinSize")



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetItemMinSize** *(self, window, width, height)*



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **width** (*int*) –
* **height** (*int*) –



Return type
*bool*






---

  



**SetItemMinSize** *(self, window, size)*



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –



Return type
*bool*






---

  



**SetItemMinSize** *(self, sizer, width, height)*



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **width** (*int*) –
* **height** (*int*) –



Return type
*bool*






---

  



**SetItemMinSize** *(self, sizer, size)*



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –



Return type
*bool*






---

  



**SetItemMinSize** *(self, index, width, height)*



Parameters
* **index** (*int*) –
* **width** (*int*) –
* **height** (*int*) –



Return type
*bool*






---

  



**SetItemMinSize** *(self, index, size)*



Parameters
* **index** (*int*) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def SetMinSize(self, *args, **kw) -> None:
        """ 

`SetMinSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.SetMinSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetMinSize** *(self, size)*


Call this to give the sizer a minimal size.


Normally, the sizer will calculate its minimal size based purely on how much space its children need. After calling this method [`GetMinSize`](#wx.Sizer.GetMinSize "wx.Sizer.GetMinSize") will return either the minimal size as requested by its children or the minimal size set here, depending on which is bigger.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**SetMinSize** *(self, width, height)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **width** (*int*) –
* **height** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def SetSizeHints(self, window: 'Window') -> None:
        """ 

`SetSizeHints`(*self*, *window*)[¶](#wx.Sizer.SetSizeHints "Permalink to this definition")
This method first calls [`Fit`](#wx.Sizer.Fit "wx.Sizer.Fit") and then [`wx.TopLevelWindow.SetSizeHints`](wx.TopLevelWindow.html#wx.TopLevelWindow.SetSizeHints "wx.TopLevelWindow.SetSizeHints") on the *window* passed to it.


This function is only when *window* is actually a  [wx.TopLevelWindow](wx.TopLevelWindow.html#wx-toplevelwindow) such as a  [wx.Frame](wx.Frame.html#wx-frame) or a  [wx.Dialog](wx.Dialog.html#wx-dialog), since SetSizeHints only has any effect in these classes. It does nothing in normal windows or controls.


Note that *window* does *not* need to be the window using this sizer and it is, in fact, common to call this function on the sizer associated with the panel covering the client area of a frame passing it the frame pointer, as this has the desired effect of adjusting the frame size to the size fitting the panel, e.g.:



```
# In a frame's __init__
...
panel = wx.Panel(self)
sizer = wx.BoxSizer(wx.VERTICAL)
sizer.Add(...)
sizer.Add(...)
panel.SetSizer(sizer)

# Use the panel sizer to set the initial and minimal size of the
# frame to fit its contents.
sizer.SetSizeHints(self)

```


This function is also used by [`wx.Window.SetSizerAndFit`](wx.Window.html#wx.Window.SetSizerAndFit "wx.Window.SetSizerAndFit") which is commonly invoked in the constructor of Dialog-derived classes, which don’t need to use an intermediate panel, see the example in BoxSizer overview.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def Show(self, *args, **kw) -> bool:
        """ 

`Show`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Sizer.Show "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Show** *(self, window, show=True, recursive=False)*


Shows or hides the *window*.


To make a sizer item disappear or reappear, use [`Show`](#wx.Sizer.Show "wx.Sizer.Show") followed by [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") .


Use parameter *recursive* to show or hide elements found in subsizers.


Returns `True` if the child item was found, `False` otherwise.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **show** (*bool*) –
* **recursive** (*bool*) –



Return type
*bool*





See also


[`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") , [`IsShown`](#wx.Sizer.IsShown "wx.Sizer.IsShown")





---

  



**Show** *(self, sizer, show=True, recursive=False)*


Shows or hides *sizer*.


To make a sizer item disappear or reappear, use [`Show`](#wx.Sizer.Show "wx.Sizer.Show") followed by [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") .


Use parameter *recursive* to show or hide elements found in subsizers.


Returns `True` if the child item was found, `False` otherwise.



Parameters
* **sizer** ([*wx.Sizer*](#wx.Sizer "wx.Sizer")) –
* **show** (*bool*) –
* **recursive** (*bool*) –



Return type
*bool*





See also


[`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") , [`IsShown`](#wx.Sizer.IsShown "wx.Sizer.IsShown")





---

  



**Show** *(self, index, show=True)*


Shows the item at *index*.


To make a sizer item disappear or reappear, use [`Show`](#wx.Sizer.Show "wx.Sizer.Show") followed by [`Layout`](#wx.Sizer.Layout "wx.Sizer.Layout") .


Returns `True` if the child item was found, `False` otherwise.



Parameters
* **index** (*int*) –
* **show** (*bool*) –



Return type
*bool*





See also


[`Hide`](#wx.Sizer.Hide "wx.Sizer.Hide") , [`IsShown`](#wx.Sizer.IsShown "wx.Sizer.IsShown")





---

  





            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def ShowItems(self, show: bool) -> None:
        """ 

`ShowItems`(*self*, *show*)[¶](#wx.Sizer.ShowItems "Permalink to this definition")
Show or hide all items managed by the sizer.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def __iter__(self) -> None:
        """ 

`__iter__`(*self*)[¶](#wx.Sizer.__iter__ "Permalink to this definition")
A Python convenience method that allows Sizers to act as iterables that will yield their wx.SizerItems.




            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.Sizer.__nonzero__ "Permalink to this definition")
Can be used to test if the C++ part of the sizer still exists, with
code like this:



```
if theSizer:
        doSomething()

```




            Source: https://docs.wxpython.org/wx.Sizer.html
        """

    Children: 'SizerItemList'  # `Children`[¶](#wx.Sizer.Children "Permalink to this definition")See [`GetChildren`](#wx.Sizer.GetChildren "wx.Sizer.GetChildren")
    ContainingWindow: 'Window'  # `ContainingWindow`[¶](#wx.Sizer.ContainingWindow "Permalink to this definition")See [`GetContainingWindow`](#wx.Sizer.GetContainingWindow "wx.Sizer.GetContainingWindow") and [`SetContainingWindow`](#wx.Sizer.SetContainingWindow "wx.Sizer.SetContainingWindow")
    ItemCount: int  # `ItemCount`[¶](#wx.Sizer.ItemCount "Permalink to this definition")See [`GetItemCount`](#wx.Sizer.GetItemCount "wx.Sizer.GetItemCount")
    MinSize: 'Size'  # `MinSize`[¶](#wx.Sizer.MinSize "Permalink to this definition")See [`GetMinSize`](#wx.Sizer.GetMinSize "wx.Sizer.GetMinSize") and [`SetMinSize`](#wx.Sizer.SetMinSize "wx.Sizer.SetMinSize")
    Position: 'Point'  # `Position`[¶](#wx.Sizer.Position "Permalink to this definition")See [`GetPosition`](#wx.Sizer.GetPosition "wx.Sizer.GetPosition")
    Size: '_Size'  # `Size`[¶](#wx.Sizer.Size "Permalink to this definition")See [`GetSize`](#wx.Sizer.GetSize "wx.Sizer.GetSize")



ALL: int

EXPAND: int

SHAPED: int

FIXED_MINSIZE: int

RESERVE_SPACE_EVEN_IF_HIDDEN: int

ALIGN_CENTER: int

ALIGN_CENTRE: int

ALIGN_LEFT: int

ALIGN_TOP: int

ALIGN_BOTTOM: int

ALIGN_CENTER_VERTICAL: int

ALIGN_CENTRE_VERTICAL: int

ALIGN_CENTER_HORIZONTAL: int

ALIGN_CENTRE_HORIZONTAL: int

class GUIEventLoop(EventLoopBase):
    """ **Possible constructors**:



```
GUIEventLoop()

```


A generic implementation of the GUI event loop.


  


        Source: https://docs.wxpython.org/wx.GUIEventLoop.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.GUIEventLoop.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.GUIEventLoop.html
        """



class HeaderButtonParams:
    """ **Possible constructors**:



```
HeaderButtonParams()

```


This struct can optionally be used with
*RendererNative.DrawHeaderButton()* to specify custom values used to
draw the text or bitmap label.


  


        Source: https://docs.wxpython.org/wx.HeaderButtonParams.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.HeaderButtonParams.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.HeaderButtonParams.html
        """

    m_arrowColour: Any  # `m_arrowColour`[¶](#wx.HeaderButtonParams.m_arrowColour "Permalink to this definition")A public C++ attribute of type [`Colour`](wx.Colour.html#wx.Colour "wx.Colour") .
    m_labelAlignment: Any  # `m_labelAlignment`[¶](#wx.HeaderButtonParams.m_labelAlignment "Permalink to this definition")A public C++ attribute of type `int`.
    m_labelBitmap: Any  # `m_labelBitmap`[¶](#wx.HeaderButtonParams.m_labelBitmap "Permalink to this definition")A public C++ attribute of type [`Bitmap`](wx.Bitmap.html#wx.Bitmap "wx.Bitmap") .
    m_labelColour: Any  # `m_labelColour`[¶](#wx.HeaderButtonParams.m_labelColour "Permalink to this definition")A public C++ attribute of type [`Colour`](wx.Colour.html#wx.Colour "wx.Colour") .
    m_labelFont: Any  # `m_labelFont`[¶](#wx.HeaderButtonParams.m_labelFont "Permalink to this definition")A public C++ attribute of type [`Font`](wx.Font.html#wx.Font "wx.Font") .
    m_labelText: Any  # `m_labelText`[¶](#wx.HeaderButtonParams.m_labelText "Permalink to this definition")A public C++ attribute of type `string`.
    m_selectionColour: Any  # `m_selectionColour`[¶](#wx.HeaderButtonParams.m_selectionColour "Permalink to this definition")A public C++ attribute of type [`Colour`](wx.Colour.html#wx.Colour "wx.Colour") .



_BitmapBundle: TypeAlias = BitmapBundle

class HeaderColumn:
    """ Represents a column header in controls displaying tabular data such as
DataViewCtrl or Grid.


  


        Source: https://docs.wxpython.org/wx.HeaderColumn.html
    """
    def GetAlignment(self) -> int:
        """ 

`GetAlignment`(*self*)[¶](#wx.HeaderColumn.GetAlignment "Permalink to this definition")
Returns the current column alignment.



Return type
 [wx.Alignment](wx.Alignment.enumeration.html#wx-alignment)



Returns
One of `wx.ALIGN_CENTRE`, `wx.ALIGN_LEFT` or `wx.ALIGN_RIGHT`.






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def GetBitmap(self) -> 'Bitmap':
        """ 

`GetBitmap`(*self*)[¶](#wx.HeaderColumn.GetBitmap "Permalink to this definition")
This function exists only for backwards compatibility, it’s recommended to override [`GetBitmapBundle`](#wx.HeaderColumn.GetBitmapBundle "wx.HeaderColumn.GetBitmapBundle") in the new code and override this one to do nothing, as it will never be called if [`GetBitmapBundle`](#wx.HeaderColumn.GetBitmapBundle "wx.HeaderColumn.GetBitmapBundle") is overridden.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def GetBitmapBundle(self) -> 'BitmapBundle':
        """ 

`GetBitmapBundle`(*self*)[¶](#wx.HeaderColumn.GetBitmapBundle "Permalink to this definition")
Returns the bitmap in the header of the column, if any.


If the column has no associated bitmap, empty  [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle) should be returned.


Override this function to return the bundle containing the bitmap to show in the column header. By default delegates to [`GetBitmap`](#wx.HeaderColumn.GetBitmap "wx.HeaderColumn.GetBitmap") but should be overridden if the bitmaps are used.



Return type
 [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle)





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def GetFlags(self) -> int:
        """ 

`GetFlags`(*self*)[¶](#wx.HeaderColumn.GetFlags "Permalink to this definition")
Get the column flags.


This method retrieves all the flags at once, you can also use [`HasFlag`](#wx.HeaderColumn.HasFlag "wx.HeaderColumn.HasFlag") to test for any individual flag or [`IsResizeable`](#wx.HeaderColumn.IsResizeable "wx.HeaderColumn.IsResizeable") , [`IsSortable`](#wx.HeaderColumn.IsSortable "wx.HeaderColumn.IsSortable") , [`IsReorderable`](#wx.HeaderColumn.IsReorderable "wx.HeaderColumn.IsReorderable") and [`IsHidden`](#wx.HeaderColumn.IsHidden "wx.HeaderColumn.IsHidden") to test for particular flags.



Return type
*int*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def GetMinWidth(self) -> int:
        """ 

`GetMinWidth`(*self*)[¶](#wx.HeaderColumn.GetMinWidth "Permalink to this definition")
Return the minimal column width.



Return type
*int*



Returns
The minimal width such that the user can’t resize the column to lesser size (notice that it is still possible to set the column width to smaller value from the program code). Return 0 from here to allow resizing the column to arbitrarily small size.






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def GetTitle(self) -> str:
        """ 

`GetTitle`(*self*)[¶](#wx.HeaderColumn.GetTitle "Permalink to this definition")
Get the text shown in the column header.



Return type
`string`






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.HeaderColumn.GetWidth "Permalink to this definition")
Returns the current width of the column.



Return type
*int*



Returns
Width of the column in pixels, never `wx.COL_WIDTH_DEFAULT` or `wx.COL_WIDTH_AUTOSIZE`.






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def HasFlag(self, flag: int) -> bool:
        """ 

`HasFlag`(*self*, *flag*)[¶](#wx.HeaderColumn.HasFlag "Permalink to this definition")
Return `True` if the specified flag is currently set for this column.



Parameters
**flag** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def IsHidden(self) -> bool:
        """ 

`IsHidden`(*self*)[¶](#wx.HeaderColumn.IsHidden "Permalink to this definition")
Returns `True` if the column is currently hidden.


This corresponds to `wx.COL_HIDDEN` flag which is off by default.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def IsReorderable(self) -> bool:
        """ 

`IsReorderable`(*self*)[¶](#wx.HeaderColumn.IsReorderable "Permalink to this definition")
Returns `True` if the column can be dragged by user to change its order.


This corresponds to `wx.COL_REORDERABLE` flag which is on by default.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def IsResizeable(self) -> bool:
        """ 

`IsResizeable`(*self*)[¶](#wx.HeaderColumn.IsResizeable "Permalink to this definition")
Return `True` if the column can be resized by the user.


Equivalent to HasFlag(wxCOL\_RESIZABLE).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def IsShown(self) -> bool:
        """ 

`IsShown`(*self*)[¶](#wx.HeaderColumn.IsShown "Permalink to this definition")
Returns `True` if the column is currently shown.


This corresponds to the absence of `wx.COL_HIDDEN` flag.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def IsSortKey(self) -> bool:
        """ 

`IsSortKey`(*self*)[¶](#wx.HeaderColumn.IsSortKey "Permalink to this definition")
Returns `True` if the column is currently used for sorting.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def IsSortOrderAscending(self) -> bool:
        """ 

`IsSortOrderAscending`(*self*)[¶](#wx.HeaderColumn.IsSortOrderAscending "Permalink to this definition")
Returns `True`, if the sort order is ascending.


Notice that it only makes sense to call this function if the column is used for sorting at all, i.e. if [`IsSortKey`](#wx.HeaderColumn.IsSortKey "wx.HeaderColumn.IsSortKey") returns `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    def IsSortable(self) -> bool:
        """ 

`IsSortable`(*self*)[¶](#wx.HeaderColumn.IsSortable "Permalink to this definition")
Returns `True` if the column can be clicked by user to sort the control contents by the field in this column.


This corresponds to `wx.COL_SORTABLE` flag which is off by default.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumn.html
        """

    Alignment: int  # `Alignment`[¶](#wx.HeaderColumn.Alignment "Permalink to this definition")See [`GetAlignment`](#wx.HeaderColumn.GetAlignment "wx.HeaderColumn.GetAlignment")
    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.HeaderColumn.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.HeaderColumn.GetBitmap "wx.HeaderColumn.GetBitmap")
    BitmapBundle: '_BitmapBundle'  # `BitmapBundle`[¶](#wx.HeaderColumn.BitmapBundle "Permalink to this definition")See [`GetBitmapBundle`](#wx.HeaderColumn.GetBitmapBundle "wx.HeaderColumn.GetBitmapBundle")
    Flags: int  # `Flags`[¶](#wx.HeaderColumn.Flags "Permalink to this definition")See [`GetFlags`](#wx.HeaderColumn.GetFlags "wx.HeaderColumn.GetFlags")
    Hidden: Any  # `Hidden`[¶](#wx.HeaderColumn.Hidden "Permalink to this definition")See [`IsHidden`](#wx.HeaderColumn.IsHidden "wx.HeaderColumn.IsHidden")
    MinWidth: int  # `MinWidth`[¶](#wx.HeaderColumn.MinWidth "Permalink to this definition")See [`GetMinWidth`](#wx.HeaderColumn.GetMinWidth "wx.HeaderColumn.GetMinWidth")
    Reorderable: Any  # `Reorderable`[¶](#wx.HeaderColumn.Reorderable "Permalink to this definition")See [`IsReorderable`](#wx.HeaderColumn.IsReorderable "wx.HeaderColumn.IsReorderable")
    Resizeable: Any  # `Resizeable`[¶](#wx.HeaderColumn.Resizeable "Permalink to this definition")See [`IsResizeable`](#wx.HeaderColumn.IsResizeable "wx.HeaderColumn.IsResizeable")
    Shown: Any  # `Shown`[¶](#wx.HeaderColumn.Shown "Permalink to this definition")See [`IsShown`](#wx.HeaderColumn.IsShown "wx.HeaderColumn.IsShown")
    SortKey: Any  # `SortKey`[¶](#wx.HeaderColumn.SortKey "Permalink to this definition")See [`IsSortKey`](#wx.HeaderColumn.IsSortKey "wx.HeaderColumn.IsSortKey")
    SortOrderAscending: Any  # `SortOrderAscending`[¶](#wx.HeaderColumn.SortOrderAscending "Permalink to this definition")See [`IsSortOrderAscending`](#wx.HeaderColumn.IsSortOrderAscending "wx.HeaderColumn.IsSortOrderAscending")
    Sortable: Any  # `Sortable`[¶](#wx.HeaderColumn.Sortable "Permalink to this definition")See [`IsSortable`](#wx.HeaderColumn.IsSortable "wx.HeaderColumn.IsSortable")
    Title: str  # `Title`[¶](#wx.HeaderColumn.Title "Permalink to this definition")See [`GetTitle`](#wx.HeaderColumn.GetTitle "wx.HeaderColumn.GetTitle")
    Width: int  # `Width`[¶](#wx.HeaderColumn.Width "Permalink to this definition")See [`GetWidth`](#wx.HeaderColumn.GetWidth "wx.HeaderColumn.GetWidth")



COL_WIDTH_DEFAULT: int

COL_WIDTH_AUTOSIZE: int

COL_HIDDEN: int

COL_REORDERABLE: int

COL_SORTABLE: int

class HeaderColumnSimple(SettableHeaderColumn):
    """ **Possible constructors**:



```
HeaderColumnSimple(title, width=COL_WIDTH_DEFAULT, align=ALIGN_NOT,
                   flags=COL_DEFAULT_FLAGS)

HeaderColumnSimple(bitmap, width=COL_WIDTH_DEFAULT, align=ALIGN_CENTER,
                   flags=COL_DEFAULT_FLAGS)

```


Simple container for the information about the column.


  


        Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HeaderColumnSimple.__init__ "Permalink to this definition")
Constructor for a column header.


The first constructor creates a header showing the given text *title* while the second one creates one showing the specified *bitmap* image.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, title, width=COL\_WIDTH\_DEFAULT, align=ALIGN\_NOT, flags=COL\_DEFAULT\_FLAGS)*



Parameters
* **title** (*string*) –
* **width** (*int*) –
* **align** ([*Alignment*](wx.Alignment.enumeration.html "Alignment")) –
* **flags** (*int*) –






---

  



**\_\_init\_\_** *(self, bitmap, width=COL\_WIDTH\_DEFAULT, align=ALIGN\_CENTER, flags=COL\_DEFAULT\_FLAGS)*



Parameters
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **width** (*int*) –
* **align** ([*Alignment*](wx.Alignment.enumeration.html "Alignment")) –
* **flags** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def GetAlignment(self) -> int:
        """ 

`GetAlignment`(*self*)[¶](#wx.HeaderColumnSimple.GetAlignment "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
 [wx.Alignment](wx.Alignment.enumeration.html#wx-alignment)






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def GetBitmap(self) -> 'Bitmap':
        """ 

`GetBitmap`(*self*)[¶](#wx.HeaderColumnSimple.GetBitmap "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def GetBitmapBundle(self) -> 'BitmapBundle':
        """ 

`GetBitmapBundle`(*self*)[¶](#wx.HeaderColumnSimple.GetBitmapBundle "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
 [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle)






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def GetFlags(self) -> int:
        """ 

`GetFlags`(*self*)[¶](#wx.HeaderColumnSimple.GetFlags "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
*int*






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def GetMinWidth(self) -> int:
        """ 

`GetMinWidth`(*self*)[¶](#wx.HeaderColumnSimple.GetMinWidth "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
*int*






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def GetTitle(self) -> str:
        """ 

`GetTitle`(*self*)[¶](#wx.HeaderColumnSimple.GetTitle "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
`string`






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.HeaderColumnSimple.GetWidth "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
*int*






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def IsSortKey(self) -> bool:
        """ 

`IsSortKey`(*self*)[¶](#wx.HeaderColumnSimple.IsSortKey "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def IsSortOrderAscending(self) -> bool:
        """ 

`IsSortOrderAscending`(*self*)[¶](#wx.HeaderColumnSimple.IsSortOrderAscending "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def SetAlignment(self, align: int) -> None:
        """ 

`SetAlignment`(*self*, *align*)[¶](#wx.HeaderColumnSimple.SetAlignment "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Parameters
**align** ([*Alignment*](wx.Alignment.enumeration.html "Alignment")) – 






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def SetBitmap(self, bitmap: 'BitmapBundle') -> None:
        """ 

`SetBitmap`(*self*, *bitmap*)[¶](#wx.HeaderColumnSimple.SetBitmap "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Parameters
**bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def SetFlags(self, flags: int) -> None:
        """ 

`SetFlags`(*self*, *flags*)[¶](#wx.HeaderColumnSimple.SetFlags "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Parameters
**flags** (*int*) – 






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def SetMinWidth(self, minWidth: int) -> None:
        """ 

`SetMinWidth`(*self*, *minWidth*)[¶](#wx.HeaderColumnSimple.SetMinWidth "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Parameters
**minWidth** (*int*) – 






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def SetSortOrder(self, ascending: bool) -> None:
        """ 

`SetSortOrder`(*self*, *ascending*)[¶](#wx.HeaderColumnSimple.SetSortOrder "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Parameters
**ascending** (*bool*) – 






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def SetTitle(self, title: str) -> None:
        """ 

`SetTitle`(*self*, *title*)[¶](#wx.HeaderColumnSimple.SetTitle "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Parameters
**title** (*string*) – 






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.HeaderColumnSimple.SetWidth "Permalink to this definition")
Trivial implementations of the base class pure virtual functions.



Parameters
**width** (*int*) – 






            Source: https://docs.wxpython.org/wx.HeaderColumnSimple.html
        """

    Alignment: int  # `Alignment`[¶](#wx.HeaderColumnSimple.Alignment "Permalink to this definition")See [`GetAlignment`](#wx.HeaderColumnSimple.GetAlignment "wx.HeaderColumnSimple.GetAlignment") and [`SetAlignment`](#wx.HeaderColumnSimple.SetAlignment "wx.HeaderColumnSimple.SetAlignment")
    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.HeaderColumnSimple.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.HeaderColumnSimple.GetBitmap "wx.HeaderColumnSimple.GetBitmap") and [`SetBitmap`](#wx.HeaderColumnSimple.SetBitmap "wx.HeaderColumnSimple.SetBitmap")
    BitmapBundle: '_BitmapBundle'  # `BitmapBundle`[¶](#wx.HeaderColumnSimple.BitmapBundle "Permalink to this definition")See [`GetBitmapBundle`](#wx.HeaderColumnSimple.GetBitmapBundle "wx.HeaderColumnSimple.GetBitmapBundle")
    Flags: int  # `Flags`[¶](#wx.HeaderColumnSimple.Flags "Permalink to this definition")See [`GetFlags`](#wx.HeaderColumnSimple.GetFlags "wx.HeaderColumnSimple.GetFlags") and [`SetFlags`](#wx.HeaderColumnSimple.SetFlags "wx.HeaderColumnSimple.SetFlags")
    MinWidth: int  # `MinWidth`[¶](#wx.HeaderColumnSimple.MinWidth "Permalink to this definition")See [`GetMinWidth`](#wx.HeaderColumnSimple.GetMinWidth "wx.HeaderColumnSimple.GetMinWidth") and [`SetMinWidth`](#wx.HeaderColumnSimple.SetMinWidth "wx.HeaderColumnSimple.SetMinWidth")
    Title: str  # `Title`[¶](#wx.HeaderColumnSimple.Title "Permalink to this definition")See [`GetTitle`](#wx.HeaderColumnSimple.GetTitle "wx.HeaderColumnSimple.GetTitle") and [`SetTitle`](#wx.HeaderColumnSimple.SetTitle "wx.HeaderColumnSimple.SetTitle")
    Width: int  # `Width`[¶](#wx.HeaderColumnSimple.Width "Permalink to this definition")See [`GetWidth`](#wx.HeaderColumnSimple.GetWidth "wx.HeaderColumnSimple.GetWidth") and [`SetWidth`](#wx.HeaderColumnSimple.SetWidth "wx.HeaderColumnSimple.SetWidth")



class HeaderCtrl(Control):
    """ **Possible constructors**:



```
HeaderCtrl()

HeaderCtrl(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize,
           style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr)

```


HeaderCtrl is the control containing the column headings which is
usually used for display of tabular data.


  


        Source: https://docs.wxpython.org/wx.HeaderCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HeaderCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor not creating the underlying window.


You must use [`Create`](#wx.HeaderCtrl.Create "wx.HeaderCtrl.Create") after creating the object using this constructor.




---

  



**\_\_init\_\_** *(self, parent, winid=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=HD\_DEFAULT\_STYLE, name=HeaderCtrlNameStr)*


Constructor creating the window.


Please see [`Create`](#wx.HeaderCtrl.Create "wx.HeaderCtrl.Create") for the parameters documentation.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winid** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def AddColumnsItems(self, menu, idColumnsBase=0) -> None:
        """ 

`AddColumnsItems`(*self*, *menu*, *idColumnsBase=0*)[¶](#wx.HeaderCtrl.AddColumnsItems "Permalink to this definition")
Helper function appending the checkable items corresponding to all the columns to the given menu.


This function is used by [`ShowColumnsMenu`](#wx.HeaderCtrl.ShowColumnsMenu "wx.HeaderCtrl.ShowColumnsMenu") but can also be used if you show your own custom columns menu and still want all the columns shown in it. It appends menu items with column labels as their text and consecutive ids starting from *idColumnsBase* to the menu and checks the items corresponding to the currently visible columns.


Example of use:



```
def ColumnItems(self):

    menu = wx.Menu()
    menu.Append(100, "Some custom command")
    menu.AppendSeparator()
    self.AddColumnsItems(menu, 200)
    rc = self.GetPopupMenuSelectionFromUser(menu, pt)

    if rc >= 200:
        # ... toggle visibility of the column rc-200 ...
        ToggleVisibility()

```



Parameters
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – The menu to append the items to. It may be currently empty or not.
* **idColumnsBase** (*int*) – The id for the menu item corresponding to the first column, the other ones are consecutive starting from it. It should be positive.






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def Create(self, parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *winid=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=HD\_DEFAULT\_STYLE*, *name=HeaderCtrlNameStr*)[¶](#wx.HeaderCtrl.Create "Permalink to this definition")
Create the header control window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window. The header control should be typically positioned along the top edge of this window.
* **winid** (*wx.WindowID*) – Id of the control or `ID_ANY` if you don’t care.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The initial position of the control.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The initial size of the control (usually not very useful as this control will typically be resized to have the same width as the associated data display control).
* **style** (*long*) – The control style, `HD_DEFAULT_STYLE` by default. Notice that the default style allows the user to reorder the columns by dragging them and you need to explicitly turn this feature off by using:

```
wx.HD_DEFAULT_STYLE & ~wx.HD_ALLOW_REORDER

```


if this is undesirable.
* **name** (*string*) – The name of the control.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.HeaderCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def GetColumn(self, idx: int) -> 'HeaderColumn':
        """ 

`GetColumn`(*self*, *idx*)[¶](#wx.HeaderCtrl.GetColumn "Permalink to this definition")
Method to be implemented by the derived classes to return the information for the given column.



Parameters
**idx** (*int*) – The column index, between 0 and the value last passed to [`SetColumnCount`](#wx.HeaderCtrl.SetColumnCount "wx.HeaderCtrl.SetColumnCount") .



Return type
 [wx.HeaderColumn](wx.HeaderColumn.html#wx-headercolumn)






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def GetColumnAt(self, pos: int) -> int:
        """ 

`GetColumnAt`(*self*, *pos*)[¶](#wx.HeaderCtrl.GetColumnAt "Permalink to this definition")
Return the index of the column displayed at the given position.



Parameters
**pos** (*int*) – The display position, e.g. 0 for the left-most column, 1 for the next one and so on until [`GetColumnCount`](#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount") - 1.



Return type
*int*





See also


[`GetColumnPos`](#wx.HeaderCtrl.GetColumnPos "wx.HeaderCtrl.GetColumnPos")





            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def GetColumnCount(self) -> int:
        """ 

`GetColumnCount`(*self*)[¶](#wx.HeaderCtrl.GetColumnCount "Permalink to this definition")
Return the number of columns in the control.



Return type
*int*



Returns
Number of columns as previously set by [`SetColumnCount`](#wx.HeaderCtrl.SetColumnCount "wx.HeaderCtrl.SetColumnCount") .





See also


[`IsEmpty`](#wx.HeaderCtrl.IsEmpty "wx.HeaderCtrl.IsEmpty")





            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def GetColumnPos(self, idx: int) -> int:
        """ 

`GetColumnPos`(*self*, *idx*)[¶](#wx.HeaderCtrl.GetColumnPos "Permalink to this definition")
Get the position at which this column is currently displayed.


Notice that a valid position is returned even for the hidden columns currently.



Parameters
**idx** (*int*) – The column index, must be less than [`GetColumnCount`](#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount") .



Return type
*int*





See also


[`GetColumnAt`](#wx.HeaderCtrl.GetColumnAt "wx.HeaderCtrl.GetColumnAt")





            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def GetColumnTitleWidth(self, *args, **kw) -> int:
        """ 

`GetColumnTitleWidth`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HeaderCtrl.GetColumnTitleWidth "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetColumnTitleWidth** *(self, col)*


Returns width needed for given column’s title.



Parameters
**col** ([*wx.HeaderColumn*](wx.HeaderColumn.html#wx.HeaderColumn "wx.HeaderColumn")) – 



Return type
*int*





New in version 2.9.4.





---

  



**GetColumnTitleWidth** *(self, idx)*


Returns width needed for the column with the given index.


This is just a convenient wrapper for the overload taking  [wx.HeaderColumn](wx.HeaderColumn.html#wx-headercolumn).



Parameters
**idx** (*int*) – 



Return type
*int*





New in version 4.1/wxWidgets-3.1.3.





---

  





            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def GetColumnsOrder(self) -> int:
        """ 

`GetColumnsOrder`(*self*)[¶](#wx.HeaderCtrl.GetColumnsOrder "Permalink to this definition")
Return the array describing the columns display order.


For the controls without `wx.HD_ALLOW_REORDER` style the returned array will be the same as was passed to [`SetColumnsOrder`](#wx.HeaderCtrl.SetColumnsOrder "wx.HeaderCtrl.SetColumnsOrder") previously or define the default order (with n-th element being n) if it hadn’t been called. But for the controls with `wx.HD_ALLOW_REORDER` style, the columns can be also reordered by user.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.HeaderCtrl.IsEmpty "Permalink to this definition")
Return whether the control has any columns.



Return type
*bool*





See also


[`GetColumnCount`](#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount")





            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    @staticmethod
    def MoveColumnInOrderArray(order, idx, pos) -> None:
        """ 

*static* `MoveColumnInOrderArray`(*order*, *idx*, *pos*)[¶](#wx.HeaderCtrl.MoveColumnInOrderArray "Permalink to this definition")
Helper function to manipulate the array of column indices.


This function reshuffles the array of column indices indexed by positions (i.e. using the same convention as for [`SetColumnsOrder`](#wx.HeaderCtrl.SetColumnsOrder "wx.HeaderCtrl.SetColumnsOrder") ) so that the column with the given index is found at the specified position.



Parameters
* **order** (*list of integers*) – Array containing the indices of columns in order of their positions.
* **idx** (*int*) – The index of the column to move.
* **pos** (*int*) – The new position for the column *idx*.






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def OnColumnCountChanging(self, count: int) -> None:
        """ 

`OnColumnCountChanging`(*self*, *count*)[¶](#wx.HeaderCtrl.OnColumnCountChanging "Permalink to this definition")
Can be overridden in the derived class to update internal data structures when the number of the columns in the control changes.


This method is called by [`SetColumnCount`](#wx.HeaderCtrl.SetColumnCount "wx.HeaderCtrl.SetColumnCount") before effectively changing the number of columns.


The base class version does nothing but it is good practice to still call it from the overridden version in the derived class.



Parameters
**count** (*int*) – 






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def ResetColumnsOrder(self) -> None:
        """ 

`ResetColumnsOrder`(*self*)[¶](#wx.HeaderCtrl.ResetColumnsOrder "Permalink to this definition")
Reset the columns order to the natural one.


After calling this function, the column with index `idx` appears at position `idx` in the control.




            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def SetColumnCount(self, count: int) -> None:
        """ 

`SetColumnCount`(*self*, *count*)[¶](#wx.HeaderCtrl.SetColumnCount "Permalink to this definition")
Set the number of columns in the control.


The control will use [`GetColumn`](#wx.HeaderCtrl.GetColumn "wx.HeaderCtrl.GetColumn") to get information about all the new columns and refresh itself, i.e. this method also has the same effect as calling [`UpdateColumn`](#wx.HeaderCtrl.UpdateColumn "wx.HeaderCtrl.UpdateColumn") for all columns but it should only be used if the number of columns really changed.



Parameters
**count** (*int*) – 






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def SetColumnsOrder(self, order: int) -> None:
        """ 

`SetColumnsOrder`(*self*, *order*)[¶](#wx.HeaderCtrl.SetColumnsOrder "Permalink to this definition")
Change the columns display order.


The display order defines the order in which the columns appear on the screen and does *not* affect the interpretation of indices by all the other class methods.


The *order* array specifies the column indices corresponding to the display positions.



Parameters
**order** (*list of integers*) – A permutation of all column indices, i.e. an array of size [`GetColumnsOrder`](#wx.HeaderCtrl.GetColumnsOrder "wx.HeaderCtrl.GetColumnsOrder") containing all column indices exactly once. The n-th element of this array defines the index of the column shown at the n-th position from left (for the default left-to-right writing direction).





See also


[`wx.ListCtrl.SetColumnsOrder`](wx.ListCtrl.html#wx.ListCtrl.SetColumnsOrder "wx.ListCtrl.SetColumnsOrder")





            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def ShowColumnsMenu(self, pt, title="") -> bool:
        """ 

`ShowColumnsMenu`(*self*, *pt*, *title=""*)[¶](#wx.HeaderCtrl.ShowColumnsMenu "Permalink to this definition")
Show the popup menu allowing the user to show or hide the columns.


This functions shows the popup menu containing all columns with check marks for the ones which are currently shown and allows the user to check or uncheck them to toggle their visibility. It is called from the default `EVT_HEADER_RIGHT_CLICK` handler for the controls which have `wx.HD_ALLOW_HIDE` style. And if the column has `wx.HD_ALLOW_REORDER` style as well, the menu also contains an item to customize the columns shown using which results in [`ShowCustomizeDialog`](#wx.HeaderCtrl.ShowCustomizeDialog "wx.HeaderCtrl.ShowCustomizeDialog") being called, please see its description for more details.


If a column was toggled, [`UpdateColumnVisibility`](#wx.HeaderCtrl.UpdateColumnVisibility "wx.HeaderCtrl.UpdateColumnVisibility") virtual function is called so it must be implemented for the controls with `wx.HD_ALLOW_HIDE` style or if you call this function explicitly.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The position of the menu, in the header window coordinates.
* **title** (*string*) – The title for the menu if not empty.



Return type
*bool*



Returns
`True` if a column was shown or hidden or `False` if nothing was done, e.g. because the menu was cancelled.






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def ShowCustomizeDialog(self) -> bool:
        """ 

`ShowCustomizeDialog`(*self*)[¶](#wx.HeaderCtrl.ShowCustomizeDialog "Permalink to this definition")
Show the column customization dialog.


This function displays a modal dialog containing the list of all columns which the user can use to reorder them as well as show or hide individual columns.


If the user accepts the changes done in the dialog, the virtual methods [`UpdateColumnVisibility`](#wx.HeaderCtrl.UpdateColumnVisibility "wx.HeaderCtrl.UpdateColumnVisibility") and [`UpdateColumnsOrder`](#wx.HeaderCtrl.UpdateColumnsOrder "wx.HeaderCtrl.UpdateColumnsOrder") will be called so they must be overridden in the derived class if this method is ever called. Please notice that the user will be able to invoke it interactively from the header popup menu if the control has both `wx.HD_ALLOW_HIDE` and `wx.HD_ALLOW_REORDER` styles.



Return type
*bool*





See also


 [wx.RearrangeDialog](wx.RearrangeDialog.html#wx-rearrangedialog)





            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def UpdateColumn(self, idx: int) -> None:
        """ 

`UpdateColumn`(*self*, *idx*)[¶](#wx.HeaderCtrl.UpdateColumn "Permalink to this definition")
Update the column with the given index.


When the value returned by [`GetColumn`](#wx.HeaderCtrl.GetColumn "wx.HeaderCtrl.GetColumn") changes, this method must be called to notify the control about the change and update the visual display to match the new column data.



Parameters
**idx** (*int*) – The column index, must be less than [`GetColumnCount`](#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount") .






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def UpdateColumnVisibility(self, idx, show) -> None:
        """ 

`UpdateColumnVisibility`(*self*, *idx*, *show*)[¶](#wx.HeaderCtrl.UpdateColumnVisibility "Permalink to this definition")
Method called when the column visibility is changed by the user.


This method is called from [`ShowColumnsMenu`](#wx.HeaderCtrl.ShowColumnsMenu "wx.HeaderCtrl.ShowColumnsMenu") or [`ShowCustomizeDialog`](#wx.HeaderCtrl.ShowCustomizeDialog "wx.HeaderCtrl.ShowCustomizeDialog") when the user interactively hides or shows a column. A typical implementation will simply update the internally stored column state. Notice that there is no need to call [`UpdateColumn`](#wx.HeaderCtrl.UpdateColumn "wx.HeaderCtrl.UpdateColumn") from this method as it is already done by  [wx.HeaderCtrl](#wx-headerctrl) itself.


The base class version doesn’t do anything and must be overridden if this method is called.



Parameters
* **idx** (*int*) – The index of the column whose visibility was toggled.
* **show** (*bool*) – The new visibility value, `True` if the column is now shown or `False` if it is not hidden.






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def UpdateColumnWidthToFit(self, idx, widthTitle) -> bool:
        """ 

`UpdateColumnWidthToFit`(*self*, *idx*, *widthTitle*)[¶](#wx.HeaderCtrl.UpdateColumnWidthToFit "Permalink to this definition")
Method which may be implemented by the derived classes to allow double clicking the column separator to resize the column to fit its contents.


When a separator is double clicked, the default handler of `EVT_HEADER_SEPARATOR_DCLICK` event calls this function and refreshes the column if it returns `True` so to implement the resizing of the column to fit its width on header double click you need to implement this method using logic similar to this example:



```
class MyHeaderColumn(wx.HeaderColumn):

    def __init__(self):

        wx.HeaderColumn.__init__(self)


    def SetWidth(self, width):

        self.width = width


    def GetWidth(self):

        return self.width


class MyHeaderCtrl(wx.HeaderCtrl):

    def __init__(self, parent):

        wx.HeaderCtrl.__init__(self, parent)
        self.cols = []


    def GetColumn(idx):

        return self.cols[idx]


    def UpdateColumnWidthToFit(self, idx, widthTitle):

        # ... compute minimal width for column idx ...
        widthContents = self.CalculateMinWidth(idx)
        self.cols[idx].SetWidth(max(widthContents, widthTitle))

        return True

```


Base class version simply returns `False`.



Parameters
* **idx** (*int*) – The zero-based index of the column to update.
* **widthTitle** (*int*) – Contains minimal width needed to display the column header itself and will usually be used as a starting point for the fitting width calculation.



Return type
*bool*



Returns
`True` to indicate that the column was resized, i.e. [`GetColumn`](#wx.HeaderCtrl.GetColumn "wx.HeaderCtrl.GetColumn") now returns the new width value, and so must be refreshed or `False` meaning that the control didn’t reach to the separator double click.






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    def UpdateColumnsOrder(self, order: int) -> None:
        """ 

`UpdateColumnsOrder`(*self*, *order*)[¶](#wx.HeaderCtrl.UpdateColumnsOrder "Permalink to this definition")
Method called when the columns order is changed in the customization dialog.


This method is only called from [`ShowCustomizeDialog`](#wx.HeaderCtrl.ShowCustomizeDialog "wx.HeaderCtrl.ShowCustomizeDialog") when the user changes the order of columns. In particular it is *not* called if a single column changes place because the user dragged it to the new location, the `EVT_HEADER_END_REORDER` event handler should be used to react to this.


A typical implementation in a derived class will update the display order of the columns in the associated control, if any. Notice that there is no need to call [`SetColumnsOrder`](#wx.HeaderCtrl.SetColumnsOrder "wx.HeaderCtrl.SetColumnsOrder") from it as  [wx.HeaderCtrl](#wx-headerctrl) does it itself.


The base class version doesn’t do anything and must be overridden if this method is called.



Parameters
**order** (*list of integers*) – The new column order. This array uses the same convention as [`SetColumnsOrder`](#wx.HeaderCtrl.SetColumnsOrder "wx.HeaderCtrl.SetColumnsOrder") .






            Source: https://docs.wxpython.org/wx.HeaderCtrl.html
        """

    ColumnCount: int  # `ColumnCount`[¶](#wx.HeaderCtrl.ColumnCount "Permalink to this definition")See [`GetColumnCount`](#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount") and [`SetColumnCount`](#wx.HeaderCtrl.SetColumnCount "wx.HeaderCtrl.SetColumnCount")
    ColumnsOrder: int  # `ColumnsOrder`[¶](#wx.HeaderCtrl.ColumnsOrder "Permalink to this definition")See [`GetColumnsOrder`](#wx.HeaderCtrl.GetColumnsOrder "wx.HeaderCtrl.GetColumnsOrder") and [`SetColumnsOrder`](#wx.HeaderCtrl.SetColumnsOrder "wx.HeaderCtrl.SetColumnsOrder")



HD_ALLOW_REORDER: int  # If this style is specified (it is by default), the user can reorder the control columns by dragging them.

HD_ALLOW_HIDE: int  # If this style is specified, the control shows a popup menu allowing the user to change the columns visibility on right mouse click. Notice that the program can always hide or show the columns, this style only affects the users capability to do it.

HD_BITMAP_ON_RIGHT: int  # The column image, if any, will be shown on the right side if this style is used. Note that this style is only implemented in wxMSW currently and doesn’t do anything under the other platforms. It is available since wxWidgets 3.1.1.

HD_DEFAULT_STYLE: int  # Symbolic name for the default control style, currently equal to  HD_ALLOW_REORDER . ^^

EVT_HEADER_CLICK: int  # A column heading was clicked.

EVT_HEADER_RIGHT_CLICK: int  # A column heading was right clicked.

EVT_HEADER_MIDDLE_CLICK: int  # A column heading was clicked with the middle mouse button.

EVT_HEADER_DCLICK: int  # A column heading was double clicked.

EVT_HEADER_RIGHT_DCLICK: int  # A column heading was right double clicked.

EVT_HEADER_MIDDLE_DCLICK: int  # A column heading was double clicked with the middle mouse button.

EVT_HEADER_SEPARATOR_DCLICK: int  # Separator to the right of the specified column was double clicked (this action is commonly used to resize the column to fit its contents width and the control provides UpdateColumnWidthToFit  method to make implementing this easier).

EVT_HEADER_BEGIN_RESIZE: int  # The user started to drag the separator to the right of the column with the specified index (this can only happen for the columns for which wx.HeaderColumn.IsResizeable   returns True). The event can be vetoed to prevent the column from being resized. If it isn’t, the resizing and end resize (or dragging cancelled) events will be generated later.

EVT_HEADER_RESIZING: int  # The user is dragging the column with the specified index resizing it and its current width is wx.HeaderCtrlEvent.GetWidth . The event can be vetoed to stop the dragging operation completely at any time.

EVT_HEADER_END_RESIZE: int  # The user stopped dragging the column by releasing the mouse. The column should normally be resized to the value of wx.HeaderCtrlEvent.GetWidth .

EVT_HEADER_BEGIN_REORDER: int  # The user started to drag the column with the specified index (this can only happen for the controls with wx.HD_ALLOW_REORDER style). This event can be vetoed to prevent the column from being reordered, otherwise the end reorder message will be generated later.

EVT_HEADER_END_REORDER: int  # The user dropped the column in its new location. The event can be vetoed to prevent the column from being placed at the new position or handled to update the display of the data in the associated control to match the new column location (available from wx.HeaderCtrlEvent.GetNewOrder ).

EVT_HEADER_DRAGGING_CANCELLED: int  # The resizing or reordering operation currently in progress was cancelled. This can happen if the user pressed Esc key while dragging the mouse or the mouse capture was lost for some other reason. You only need to handle this event if your application entered into some modal mode when resizing or reordering began, in which case it should handle this event in addition to the matching end resizing or reordering ones. ^^

class HeaderCtrlEvent(NotifyEvent):
    """ **Possible constructors**:



```
HeaderCtrlEvent(commandType=wxEVT_NULL, winid=0)

HeaderCtrlEvent(event)

```


Event class representing the events generated by HeaderCtrl.


  


        Source: https://docs.wxpython.org/wx.HeaderCtrlEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HeaderCtrlEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, commandType=wxEVT\_NULL, winid=0)*



Parameters
* **commandType** (*wx.EventType*) –
* **winid** (*int*) –






---

  



**\_\_init\_\_** *(self, event)*



Parameters
**event** ([*wx.HeaderCtrlEvent*](#wx.HeaderCtrlEvent "wx.HeaderCtrlEvent")) – 






---

  





            Source: https://docs.wxpython.org/wx.HeaderCtrlEvent.html
        """

    def GetColumn(self) -> int:
        """ 

`GetColumn`(*self*)[¶](#wx.HeaderCtrlEvent.GetColumn "Permalink to this definition")
Return the index of the column affected by this event.


This method can be called for all header control events.



Return type
*int*






            Source: https://docs.wxpython.org/wx.HeaderCtrlEvent.html
        """

    def GetNewOrder(self) -> int:
        """ 

`GetNewOrder`(*self*)[¶](#wx.HeaderCtrlEvent.GetNewOrder "Permalink to this definition")
Return the new order of the column.


This method can only be called for a reorder event for which it indicates the tentative new position for the column [`GetColumn`](#wx.HeaderCtrlEvent.GetColumn "wx.HeaderCtrlEvent.GetColumn") selected by the user. If the event is not vetoed, this will become the new column position in [`wx.HeaderCtrl.GetColumnsOrder`](wx.HeaderCtrl.html#wx.HeaderCtrl.GetColumnsOrder "wx.HeaderCtrl.GetColumnsOrder") .



Return type
*int*






            Source: https://docs.wxpython.org/wx.HeaderCtrlEvent.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.HeaderCtrlEvent.GetWidth "Permalink to this definition")
Return the current width of the column.


This method can only be called for the dragging events.



Return type
*int*






            Source: https://docs.wxpython.org/wx.HeaderCtrlEvent.html
        """

    def SetColumn(self, col: int) -> None:
        """ 

`SetColumn`(*self*, *col*)[¶](#wx.HeaderCtrlEvent.SetColumn "Permalink to this definition")

Parameters
**col** (*int*) – 






            Source: https://docs.wxpython.org/wx.HeaderCtrlEvent.html
        """

    def SetNewOrder(self, order: int) -> None:
        """ 

`SetNewOrder`(*self*, *order*)[¶](#wx.HeaderCtrlEvent.SetNewOrder "Permalink to this definition")

Parameters
**order** (*int*) – 






            Source: https://docs.wxpython.org/wx.HeaderCtrlEvent.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.HeaderCtrlEvent.SetWidth "Permalink to this definition")

Parameters
**width** (*int*) – 






            Source: https://docs.wxpython.org/wx.HeaderCtrlEvent.html
        """

    Column: int  # `Column`[¶](#wx.HeaderCtrlEvent.Column "Permalink to this definition")See [`GetColumn`](#wx.HeaderCtrlEvent.GetColumn "wx.HeaderCtrlEvent.GetColumn") and [`SetColumn`](#wx.HeaderCtrlEvent.SetColumn "wx.HeaderCtrlEvent.SetColumn")
    NewOrder: int  # `NewOrder`[¶](#wx.HeaderCtrlEvent.NewOrder "Permalink to this definition")See [`GetNewOrder`](#wx.HeaderCtrlEvent.GetNewOrder "wx.HeaderCtrlEvent.GetNewOrder") and [`SetNewOrder`](#wx.HeaderCtrlEvent.SetNewOrder "wx.HeaderCtrlEvent.SetNewOrder")
    Width: int  # `Width`[¶](#wx.HeaderCtrlEvent.Width "Permalink to this definition")See [`GetWidth`](#wx.HeaderCtrlEvent.GetWidth "wx.HeaderCtrlEvent.GetWidth") and [`SetWidth`](#wx.HeaderCtrlEvent.SetWidth "wx.HeaderCtrlEvent.SetWidth")



class HeaderCtrlSimple(HeaderCtrl):
    """ **Possible constructors**:



```
HeaderCtrlSimple()

HeaderCtrlSimple(parent, winid=ID_ANY, pos=DefaultPosition,
                 size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr)

```


HeaderCtrlSimple is a concrete header control which can be used
directly, without inheriting from it as you need to do when using
HeaderCtrl itself.


  


        Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HeaderCtrlSimple.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor not creating the underlying window.


You must use [`Create`](wx.HeaderCtrl.html#wx.HeaderCtrl.Create "wx.HeaderCtrl.Create") after creating the object using this constructor.




---

  



**\_\_init\_\_** *(self, parent, winid=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=HD\_DEFAULT\_STYLE, name=HeaderCtrlNameStr)*


Constructor creating the window.


Please see the base class [`wx.HeaderCtrl.Create`](wx.HeaderCtrl.html#wx.HeaderCtrl.Create "wx.HeaderCtrl.Create") method for the parameters description.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winid** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    def AppendColumn(self, col: 'HeaderColumnSimple') -> None:
        """ 

`AppendColumn`(*self*, *col*)[¶](#wx.HeaderCtrlSimple.AppendColumn "Permalink to this definition")
Append the column to the end of the control.



Parameters
**col** ([*wx.HeaderColumnSimple*](wx.HeaderColumnSimple.html#wx.HeaderColumnSimple "wx.HeaderColumnSimple")) – 





See also


[`InsertColumn`](#wx.HeaderCtrlSimple.InsertColumn "wx.HeaderCtrlSimple.InsertColumn")





            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    def DeleteColumn(self, idx: int) -> None:
        """ 

`DeleteColumn`(*self*, *idx*)[¶](#wx.HeaderCtrlSimple.DeleteColumn "Permalink to this definition")
Delete the column at the given position.



Parameters
**idx** (*int*) – 





See also


[`InsertColumn`](#wx.HeaderCtrlSimple.InsertColumn "wx.HeaderCtrlSimple.InsertColumn") , [`AppendColumn`](#wx.HeaderCtrlSimple.AppendColumn "wx.HeaderCtrlSimple.AppendColumn")





            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    def GetBestFittingWidth(self, idx: int) -> int:
        """ 

`GetBestFittingWidth`(*self*, *idx*)[¶](#wx.HeaderCtrlSimple.GetBestFittingWidth "Permalink to this definition")
This function can be overridden in the classes deriving from this control instead of overriding [`UpdateColumnWidthToFit`](wx.HeaderCtrl.html#wx.HeaderCtrl.UpdateColumnWidthToFit "wx.HeaderCtrl.UpdateColumnWidthToFit") .


To implement automatic column resizing to fit its contents width when the column divider is double clicked, you need to simply return the fitting width for the given column *idx* from this method, the control will automatically use the biggest value between the one returned from here and the one needed for the display of the column title itself.


The base class version returns -1 indicating that this function is not implemented.



Parameters
**idx** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.HeaderCtrlSimple.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    def HideColumn(self, idx: int) -> None:
        """ 

`HideColumn`(*self*, *idx*)[¶](#wx.HeaderCtrlSimple.HideColumn "Permalink to this definition")
Hide the column with the given index.


This is the same as calling:



```
self.ShowColumn(idx, False)

```



Parameters
**idx** (*int*) – The index of the column to show or hide, from 0 to [`GetColumnCount`](wx.HeaderCtrl.html#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount") .






            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    def InsertColumn(self, col, idx) -> None:
        """ 

`InsertColumn`(*self*, *col*, *idx*)[¶](#wx.HeaderCtrlSimple.InsertColumn "Permalink to this definition")
Insert the column at the given position.



Parameters
* **col** ([*wx.HeaderColumnSimple*](wx.HeaderColumnSimple.html#wx.HeaderColumnSimple "wx.HeaderColumnSimple")) – The column to insert. Notice that because of the existence of implicit conversion from *String* to  [wx.HeaderColumn](wx.HeaderColumn.html#wx-headercolumn) a string can be passed directly here.
* **idx** (*int*) – The position of the new column, from 0 to [`GetColumnCount`](wx.HeaderCtrl.html#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount") . Using [`GetColumnCount`](wx.HeaderCtrl.html#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount") means to append the column to the end.





See also


[`AppendColumn`](#wx.HeaderCtrlSimple.AppendColumn "wx.HeaderCtrlSimple.AppendColumn")





            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    def RemoveSortIndicator(self) -> None:
        """ 

`RemoveSortIndicator`(*self*)[¶](#wx.HeaderCtrlSimple.RemoveSortIndicator "Permalink to this definition")
Remove the sort indicator from the column being used as sort key.



See also


[`ShowSortIndicator`](#wx.HeaderCtrlSimple.ShowSortIndicator "wx.HeaderCtrlSimple.ShowSortIndicator")





            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    def ShowColumn(self, idx, show=True) -> None:
        """ 

`ShowColumn`(*self*, *idx*, *show=True*)[¶](#wx.HeaderCtrlSimple.ShowColumn "Permalink to this definition")
Show or hide the column.


Initially the column is shown by default or hidden if it was added with `wx.COL_HIDDEN` flag set.


When a column is hidden, it doesn’t appear at all on the screen but its index is still taken into account when working with other columns. E.g. if there are three columns 0, 1 and 2 and the column 1 is hidden you still need to use index 2 to refer to the last visible column.



Parameters
* **idx** (*int*) – The index of the column to show or hide, from 0 to [`GetColumnCount`](wx.HeaderCtrl.html#wx.HeaderCtrl.GetColumnCount "wx.HeaderCtrl.GetColumnCount") .
* **show** (*bool*) – Indicates whether the column should be shown (default) or hidden.






            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """

    def ShowSortIndicator(self, idx, sortOrder=True) -> None:
        """ 

`ShowSortIndicator`(*self*, *idx*, *sortOrder=True*)[¶](#wx.HeaderCtrlSimple.ShowSortIndicator "Permalink to this definition")
Update the column sort indicator.


The sort indicator, if shown, is typically an arrow pointing upwards or downwards depending on whether the control contents is sorted in ascending or descending order.



Parameters
* **idx** (*int*) – The column to set the sort indicator for. If `-1` is given, then the currently shown sort indicator will be removed.
* **sortOrder** (*bool*) – If `True` or `False` show the sort indicator corresponding to ascending or descending sort order respectively.






            Source: https://docs.wxpython.org/wx.HeaderCtrlSimple.html
        """



class HelpControllerBase(Object):
    """ **Possible constructors**:



```
HelpControllerBase(parentWindow=None)

```


This is the abstract base class a family of classes by which
applications may invoke a help viewer to provide on-line help.


  


        Source: https://docs.wxpython.org/wx.HelpControllerBase.html
    """
    def __init__(self, parentWindow: Optional['Window']=None) -> None:
        """ 

`__init__`(*self*, *parentWindow=None*)[¶](#wx.HelpControllerBase.__init__ "Permalink to this definition")
Constructs a help instance object, but does not invoke the help viewer.


If you provide a window, it will be used by some help controller classes, such as CHMHelpController, WinHelpController and  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller), as the parent for the help window instead of the value of [`wx.App.GetTopWindow`](wx.PyApp.html#wx.PyApp.GetTopWindow "wx.PyApp.GetTopWindow") .


You can also change the parent window later with [`SetParentWindow`](#wx.HelpControllerBase.SetParentWindow "wx.HelpControllerBase.SetParentWindow") .



Parameters
**parentWindow** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def DisplayBlock(self, blockNo: int) -> bool:
        """ 

`DisplayBlock`(*self*, *blockNo*)[¶](#wx.HelpControllerBase.DisplayBlock "Permalink to this definition")
If the help viewer is not running, runs it and displays the file at the given block number.


* *WinHelp:* Refers to the context number.
* *MS* HTML Help: Refers to the context number.
* *External* HTML help: the same as for [`DisplaySection`](#wx.HelpControllerBase.DisplaySection "wx.HelpControllerBase.DisplaySection") .
* `  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller): ` *sectionNo* is an identifier as specified in the [Help Files Format](html_overview.html#help-files-format).



Parameters
**blockNo** (*long*) – 



Return type
*bool*





Deprecated


This function is for backward compatibility only, and applications should use [`DisplaySection`](#wx.HelpControllerBase.DisplaySection "wx.HelpControllerBase.DisplaySection") instead.





            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def DisplayContents(self) -> bool:
        """ 

`DisplayContents`(*self*)[¶](#wx.HelpControllerBase.DisplayContents "Permalink to this definition")
If the help viewer is not running, runs it and displays the contents.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def DisplayContextPopup(self, contextId: int) -> bool:
        """ 

`DisplayContextPopup`(*self*, *contextId*)[¶](#wx.HelpControllerBase.DisplayContextPopup "Permalink to this definition")
Displays the section as a popup window using a context id.


Returns `False` if unsuccessful or not implemented.



Parameters
**contextId** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def DisplaySection(self, *args, **kw) -> bool:
        """ 

`DisplaySection`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HelpControllerBase.DisplaySection "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DisplaySection** *(self, section)*


If the help viewer is not running, runs it and displays the given section.


The interpretation of section differs between help viewers. For most viewers, this call is equivalent to KeywordSearch. For MS HTML Help, HTML help and external HTML help, if section has a .htm or .html extension, that HTML file will be displayed; otherwise a keyword search is done.



Parameters
**section** (*string*) – 



Return type
*bool*






---

  



**DisplaySection** *(self, sectionNo)*


If the help viewer is not running, runs it and displays the given section.


* *WinHelp*, MS HTML Help *sectionNo* is a context id.
* *MS* HTML Help: Pass -1 in *sectionNo* to display the index.
* *External* HTML help:  [wx.adv.ExtHelpController](wx.adv.ExtHelpController.html#wx-adv-exthelpcontroller) implements *sectionNo* as an id in a map file, which is of the form:
* `  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller): ` *sectionNo* is an identifier as specified in the [Help Files Format](html_overview.html#help-files-format). See also the help sample for notes on how to specify section numbers for various help file formats.



Parameters
**sectionNo** (*int*) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def DisplayTextPopup(self, text, pos) -> bool:
        """ 

`DisplayTextPopup`(*self*, *text*, *pos*)[¶](#wx.HelpControllerBase.DisplayTextPopup "Permalink to this definition")
Displays the text in a popup window, if possible.


Returns `False` if unsuccessful or not implemented.



Parameters
* **text** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def GetFrameParameters(self) -> tuple:
        """ 

`GetFrameParameters`(*self*)[¶](#wx.HelpControllerBase.GetFrameParameters "Permalink to this definition")
For  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller), returns the latest frame size and position settings and whether a new frame is drawn with each invocation.


For all other help controllers, this function does nothing and just returns `None`.



Return type
*tuple*



Returns
(  [wx.Frame](wx.Frame.html#wx-frame), *size*, *pos*, *newFrameEachTime* )






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def GetParentWindow(self) -> 'Window':
        """ 

`GetParentWindow`(*self*)[¶](#wx.HelpControllerBase.GetParentWindow "Permalink to this definition")
Returns the window to be used as the parent for the help window.


This window is used by CHMHelpController, WinHelpController and  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller).



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def Initialize(self, file: str) -> bool:
        """ 

`Initialize`(*self*, *file*)[¶](#wx.HelpControllerBase.Initialize "Permalink to this definition")
Initializes the help instance with a help filename.


Does not invoke the help viewer. This must be called directly after the help instance object is created and before any attempts to communicate with the viewer.


You may omit the file extension and a suitable one will be chosen. For  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller), the extensions zip, htb and hhp will be appended while searching for a suitable file. For WinHelp, the hlp extension is appended.



Parameters
**file** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def KeywordSearch(self, keyWord, mode=HELP_SEARCH_ALL) -> bool:
        """ 

`KeywordSearch`(*self*, *keyWord*, *mode=HELP\_SEARCH\_ALL*)[¶](#wx.HelpControllerBase.KeywordSearch "Permalink to this definition")
If the help viewer is not running, runs it, and searches for sections matching the given keyword.


If one match is found, the file is displayed at this section. The optional parameter allows searching the index (wx``wx.HELP\_SEARCH\_INDEX``) but this currently is only supported by the  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller).


* *WinHelp*, MS HTML Help: If more than one match is found, the first topic is displayed.
* *MS* HTML Help: Pass an empty string to display the search page.
* *External* HTML help, simple HTML help: If more than one match is found, a choice of topics is displayed.
* `  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller): ` see [`wx.html.HtmlHelpController.KeywordSearch`](wx.html.HtmlHelpController.html#wx.html.HtmlHelpController.KeywordSearch "wx.html.HtmlHelpController.KeywordSearch") .



Parameters
* **keyWord** (*string*) –
* **mode** ([*HelpSearchMode*](wx.HelpSearchMode.enumeration.html "HelpSearchMode")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def LoadFile(self, file: str="") -> bool:
        """ 

`LoadFile`(*self*, *file=""*)[¶](#wx.HelpControllerBase.LoadFile "Permalink to this definition")
If the help viewer is not running, runs it and loads the given file.


If the filename is not supplied or is empty, the file specified in *wx.Initialize* is used.


If the viewer is already displaying the specified file, it will not be reloaded. This member function may be used before each display call in case the user has opened another file.


 [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller) ignores this call.



Parameters
**file** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def OnQuit(self) -> None:
        """ 

`OnQuit`(*self*)[¶](#wx.HelpControllerBase.OnQuit "Permalink to this definition")
Overridable member called when this application’s viewer is quit by the user.


This does not work for all help controllers.




            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def Quit(self) -> bool:
        """ 

`Quit`(*self*)[¶](#wx.HelpControllerBase.Quit "Permalink to this definition")
If the viewer is running, quits it by disconnecting.


For Windows Help, the viewer will only close if no other application is using it.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def SetFrameParameters(self, titleFormat, size, pos=DefaultPosition, newFrameEachTime=False) -> None:
        """ 

`SetFrameParameters`(*self*, *titleFormat*, *size*, *pos=DefaultPosition*, *newFrameEachTime=False*)[¶](#wx.HelpControllerBase.SetFrameParameters "Permalink to this definition")
Set the parameters of the frame window.


For  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller), *titleFormat* specifies the title string format (with `s` being replaced by the actual page title) and *size* and *position* specify the geometry of the frame.


For all other help controllers this function has no effect.


Finally, *newFrameEachTime* is always ignored currently.



Parameters
* **titleFormat** (*string*) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **newFrameEachTime** (*bool*) –






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def SetParentWindow(self, parentWindow: 'Window') -> None:
        """ 

`SetParentWindow`(*self*, *parentWindow*)[¶](#wx.HelpControllerBase.SetParentWindow "Permalink to this definition")
Sets the window to be used as the parent for the help window.


This is used by CHMHelpController, WinHelpController and  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller).



Parameters
**parentWindow** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    def SetViewer(self, viewer, flags=HELP_NETSCAPE) -> None:
        """ 

`SetViewer`(*self*, *viewer*, *flags=HELP\_NETSCAPE*)[¶](#wx.HelpControllerBase.SetViewer "Permalink to this definition")
Sets detailed viewer information.


So far this is only relevant to  [wx.adv.ExtHelpController](wx.adv.ExtHelpController.html#wx-adv-exthelpcontroller). Some examples of usage:



```
self.help.SetViewer("kdehelp")
self.help.SetViewer("gnome-help-browser")
self.help.SetViewer("netscape", wx.HELP_NETSCAPE)

```



Parameters
* **viewer** (*string*) – This defaults to “netscape” for  [wx.adv.ExtHelpController](wx.adv.ExtHelpController.html#wx-adv-exthelpcontroller).
* **flags** (*long*) – This defaults to `wx.HELP_NETSCAPE` for  [wx.adv.ExtHelpController](wx.adv.ExtHelpController.html#wx-adv-exthelpcontroller), indicating that the viewer is a variant of Netscape Navigator.





Todo


modernize this function with [`wx.LaunchDefaultBrowser`](wx.functions.html#wx.LaunchDefaultBrowser "wx.LaunchDefaultBrowser")





            Source: https://docs.wxpython.org/wx.HelpControllerBase.html
        """

    FrameParameters: tuple  # `FrameParameters`[¶](#wx.HelpControllerBase.FrameParameters "Permalink to this definition")See [`GetFrameParameters`](#wx.HelpControllerBase.GetFrameParameters "wx.HelpControllerBase.GetFrameParameters") and [`SetFrameParameters`](#wx.HelpControllerBase.SetFrameParameters "wx.HelpControllerBase.SetFrameParameters")
    ParentWindow: 'Window'  # `ParentWindow`[¶](#wx.HelpControllerBase.ParentWindow "Permalink to this definition")See [`GetParentWindow`](#wx.HelpControllerBase.GetParentWindow "wx.HelpControllerBase.GetParentWindow") and [`SetParentWindow`](#wx.HelpControllerBase.SetParentWindow "wx.HelpControllerBase.SetParentWindow")



HELP_NETSCAPE: int

class HelpControllerHelpProvider(SimpleHelpProvider):
    """ **Possible constructors**:



```
HelpControllerHelpProvider(hc=None)

```


HelpControllerHelpProvider is an implementation of HelpProvider
which supports both context identifiers and plain text help strings.


  


        Source: https://docs.wxpython.org/wx.HelpControllerHelpProvider.html
    """
    def __init__(self, hc: Optional['HelpControllerBase']=None) -> None:
        """ 

`__init__`(*self*, *hc=None*)[¶](#wx.HelpControllerHelpProvider.__init__ "Permalink to this definition")
Note that the instance doesn’t own the help controller.


The help controller should be deleted separately.



Parameters
**hc** ([*wx.HelpControllerBase*](wx.HelpControllerBase.html#wx.HelpControllerBase "wx.HelpControllerBase")) – 






            Source: https://docs.wxpython.org/wx.HelpControllerHelpProvider.html
        """

    def GetHelpController(self) -> 'HelpControllerBase':
        """ 

`GetHelpController`(*self*)[¶](#wx.HelpControllerHelpProvider.GetHelpController "Permalink to this definition")
Returns the help controller associated with this help provider.



Return type
 [wx.HelpControllerBase](wx.HelpControllerBase.html#wx-helpcontrollerbase)






            Source: https://docs.wxpython.org/wx.HelpControllerHelpProvider.html
        """

    def SetHelpController(self, hc: 'HelpControllerBase') -> None:
        """ 

`SetHelpController`(*self*, *hc*)[¶](#wx.HelpControllerHelpProvider.SetHelpController "Permalink to this definition")
Sets the help controller associated with this help provider.



Parameters
**hc** ([*wx.HelpControllerBase*](wx.HelpControllerBase.html#wx.HelpControllerBase "wx.HelpControllerBase")) – 






            Source: https://docs.wxpython.org/wx.HelpControllerHelpProvider.html
        """

    HelpController: 'HelpControllerBase'  # `HelpController`[¶](#wx.HelpControllerHelpProvider.HelpController "Permalink to this definition")See [`GetHelpController`](#wx.HelpControllerHelpProvider.GetHelpController "wx.HelpControllerHelpProvider.GetHelpController") and [`SetHelpController`](#wx.HelpControllerHelpProvider.SetHelpController "wx.HelpControllerHelpProvider.SetHelpController")



class HelpProvider:
    """ HelpProvider is an abstract class used by a program implementing
context-sensitive help to show the help text for the given window.


  


        Source: https://docs.wxpython.org/wx.HelpProvider.html
    """
    def AddHelp(self, *args, **kw) -> None:
        """ 

`AddHelp`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HelpProvider.AddHelp "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddHelp** *(self, window, text)*


Associates the text with the given window.



Parameters
* **window** ([*wx.WindowBase*](wx.WindowBase.html#wx.WindowBase "wx.WindowBase")) –
* **text** (*string*) –





Note


Although all help providers have these functions to allow making [`wx.Window.SetHelpText`](wx.Window.html#wx.Window.SetHelpText "wx.Window.SetHelpText") work, not all of them implement the functions.





---

  



**AddHelp** *(self, id, text)*


Associates the text with the given `ID`.


This help text will be shown for all windows with `ID` *id*, unless they have more specific help text associated using the other [`AddHelp`](#wx.HelpProvider.AddHelp "wx.HelpProvider.AddHelp") prototype. May be used to set the same help string for all Cancel buttons in the application, for example.



Parameters
* **id** (*wx.WindowID*) –
* **text** (*string*) –





Note


Although all help providers have these functions to allow making [`wx.Window.SetHelpText`](wx.Window.html#wx.Window.SetHelpText "wx.Window.SetHelpText") work, not all of them implement the functions.





---

  





            Source: https://docs.wxpython.org/wx.HelpProvider.html
        """

    @staticmethod
    def Get() -> 'HelpProvider':
        """ 

*static* `Get`()[¶](#wx.HelpProvider.Get "Permalink to this definition")
Returns pointer to help provider instance.


Unlike some other classes, the help provider is not created on demand. This must be explicitly done by the application using [`Set`](#wx.HelpProvider.Set "wx.HelpProvider.Set") .



Return type
 [wx.HelpProvider](#wx-helpprovider)






            Source: https://docs.wxpython.org/wx.HelpProvider.html
        """

    def GetHelp(self, window: 'Window') -> str:
        """ 

`GetHelp`(*self*, *window*)[¶](#wx.HelpProvider.GetHelp "Permalink to this definition")
This version associates the given text with all windows with this id.


May be used to set the same help string for all Cancel buttons in the application, for example.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.HelpProvider.html
        """

    def RemoveHelp(self, window: 'WindowBase') -> None:
        """ 

`RemoveHelp`(*self*, *window*)[¶](#wx.HelpProvider.RemoveHelp "Permalink to this definition")
Removes the association between the window pointer and the help text.


This is called by the  [wx.Window](wx.Window.html#wx-window) destructor. Without this, the table of help strings will fill up and when window pointers are reused, the wrong help string will be found.



Parameters
**window** ([*wx.WindowBase*](wx.WindowBase.html#wx.WindowBase "wx.WindowBase")) – 






            Source: https://docs.wxpython.org/wx.HelpProvider.html
        """

    @staticmethod
    def Set(helpProvider: 'HelpProvider') -> 'HelpProvider':
        """ 

*static* `Set`(*helpProvider*)[¶](#wx.HelpProvider.Set "Permalink to this definition")
Set the current, application-wide help provider.



Parameters
**helpProvider** ([*wx.HelpProvider*](#wx.HelpProvider "wx.HelpProvider")) – 



Return type
 [wx.HelpProvider](#wx-helpprovider)



Returns
Pointer to previous help provider or `None` if there wasn’t any.






            Source: https://docs.wxpython.org/wx.HelpProvider.html
        """

    def ShowHelp(self, window: 'WindowBase') -> bool:
        """ 

`ShowHelp`(*self*, *window*)[¶](#wx.HelpProvider.ShowHelp "Permalink to this definition")
Shows help for the given window.


Override this function if the help doesn’t depend on the exact position inside the window, otherwise you need to override [`ShowHelpAtPoint`](#wx.HelpProvider.ShowHelpAtPoint "wx.HelpProvider.ShowHelpAtPoint") . Returns `True` if help was shown, or `False` if no help was available for this window.



Parameters
**window** ([*wx.WindowBase*](wx.WindowBase.html#wx.WindowBase "wx.WindowBase")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HelpProvider.html
        """

    def ShowHelpAtPoint(self, window, point, origin) -> bool:
        """ 

`ShowHelpAtPoint`(*self*, *window*, *point*, *origin*)[¶](#wx.HelpProvider.ShowHelpAtPoint "Permalink to this definition")
This function may be overridden to show help for the window when it should depend on the position inside the window, By default this method forwards to [`ShowHelp`](#wx.HelpProvider.ShowHelp "wx.HelpProvider.ShowHelp") , so it is enough to only implement the latter if the help doesn’t depend on the position.



Parameters
* **window** ([*wx.WindowBase*](wx.WindowBase.html#wx.WindowBase "wx.WindowBase")) – Window to show help text for.
* **point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Coordinates of the mouse at the moment of help event emission.
* **origin** (*HelpEvent.Origin*) – Help event origin, see [`wx.HelpEvent.GetOrigin`](wx.HelpEvent.html#wx.HelpEvent.GetOrigin "wx.HelpEvent.GetOrigin") .



Return type
*bool*



Returns
`True` if help was shown, or `False` if no help was available for this window.





New in version 2.7.0.





            Source: https://docs.wxpython.org/wx.HelpProvider.html
        """



class HelpEvent(CommandEvent):
    """ **Possible constructors**:



```
HelpEvent(type=wxEVT_NULL, winid=0, pt=DefaultPosition,
          origin=Origin_Unknown)

```


A help event is sent when the user has requested context-sensitive
help.


  


        Source: https://docs.wxpython.org/wx.HelpEvent.html
    """
    def __init__(self, type=wxEVT_NULL, winid=0, pt=DefaultPosition, origin=Origin_Unknown) -> None:
        """ 

`__init__`(*self*, *type=wxEVT\_NULL*, *winid=0*, *pt=DefaultPosition*, *origin=Origin\_Unknown*)[¶](#wx.HelpEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **type** (*wx.EventType*) –
* **winid** (*wx.WindowID*) –
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **origin** (*HelpEvent.Origin*) –






            Source: https://docs.wxpython.org/wx.HelpEvent.html
        """

    def GetOrigin(self) -> 'Origin':
        """ 

`GetOrigin`(*self*)[¶](#wx.HelpEvent.GetOrigin "Permalink to this definition")
Returns the origin of the help event which is one of the  [wx.HelpEvent.Origin](wx.HelpEvent.Origin.enumeration.html#wx-helpevent-origin) values.


The application may handle events generated using the keyboard or mouse differently, e.g. by using [`wx.GetMousePosition`](wx.functions.html#wx.GetMousePosition "wx.GetMousePosition") for the mouse events.



Return type
 [wx.HelpEvent.Origin](wx.HelpEvent.Origin.enumeration.html#wx-helpevent-origin)





See also


[`SetOrigin`](#wx.HelpEvent.SetOrigin "wx.HelpEvent.SetOrigin")





            Source: https://docs.wxpython.org/wx.HelpEvent.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.HelpEvent.GetPosition "Permalink to this definition")
Returns the left-click position of the mouse, in screen coordinates.


This allows the application to position the help appropriately.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.HelpEvent.html
        """

    def SetOrigin(self, origin: HelpEvent.Origin) -> None:
        """ 

`SetOrigin`(*self*, *origin*)[¶](#wx.HelpEvent.SetOrigin "Permalink to this definition")
Set the help event origin, only used internally by wxWidgets normally.



Parameters
**origin** (*HelpEvent.Origin*) – 





See also


[`GetOrigin`](#wx.HelpEvent.GetOrigin "wx.HelpEvent.GetOrigin")





            Source: https://docs.wxpython.org/wx.HelpEvent.html
        """

    def SetPosition(self, pt: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetPosition`(*self*, *pt*)[¶](#wx.HelpEvent.SetPosition "Permalink to this definition")
Sets the left-click position of the mouse, in screen coordinates.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.HelpEvent.html
        """

    Position: 'Point'  # `Position`[¶](#wx.HelpEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.HelpEvent.GetPosition "wx.HelpEvent.GetPosition") and [`SetPosition`](#wx.HelpEvent.SetPosition "wx.HelpEvent.SetPosition")



class HScrolledWindow(Panel,VarHScrollHelper):
    """ **Possible constructors**:



```
HScrolledWindow()

HScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition,
                size=DefaultSize, style=0, name=PanelNameStr)

```


In the name of this class, “H” stands for “horizontal” because it can
be used for scrolling columns of variable widths.


  


        Source: https://docs.wxpython.org/wx.HScrolledWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HScrolledWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor, you must call [`Create`](#wx.HScrolledWindow.Create "wx.HScrolledWindow.Create") later.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)*


This is the normal constructor, no need to call [`Create`](#wx.HScrolledWindow.Create "wx.HScrolledWindow.Create") after using this constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window, must not be `None`.
* **id** (*wx.WindowID*) – The identifier of this window, `wx.ID_ANY` by default.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The initial window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The initial window size.
* **style** (*long*) – The window style. There are no special style bits defined for this class.
* **name** (*string*) – The name for this window; usually not used.





Note


`HSCROLL` is always automatically added to the style, there is no need to specify it explicitly.





---

  





            Source: https://docs.wxpython.org/wx.HScrolledWindow.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=PanelNameStr*)[¶](#wx.HScrolledWindow.Create "Permalink to this definition")
Same as the non-default constructor, but returns a status code: `True` if ok, `False` if the window couldn’t be created.


Just as with the constructor, the `HSCROLL` style is always used, there is no need to specify it explicitly.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HScrolledWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.HScrolledWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.HScrolledWindow.html
        """



class HTMLDataObject(DataObjectSimple):
    """ **Possible constructors**:



```
HTMLDataObject(html="")

```


HTMLDataObject is used for working with HTML-formatted text.


  


        Source: https://docs.wxpython.org/wx.HTMLDataObject.html
    """
    def __init__(self, html: str="") -> None:
        """ 

`__init__`(*self*, *html=""*)[¶](#wx.HTMLDataObject.__init__ "Permalink to this definition")
Constructor.



Parameters
**html** (*string*) – 






            Source: https://docs.wxpython.org/wx.HTMLDataObject.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.HTMLDataObject.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.HTMLDataObject.html
        """

    def GetHTML(self) -> str:
        """ 

`GetHTML`(*self*)[¶](#wx.HTMLDataObject.GetHTML "Permalink to this definition")
Returns the HTML string.



Return type
`string`






            Source: https://docs.wxpython.org/wx.HTMLDataObject.html
        """

    def SetData(self, format, buf) -> bool:
        """ 

`SetData`(*self*, *format*, *buf*)[¶](#wx.HTMLDataObject.SetData "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.HTMLDataObject.html
        """

    def SetHTML(self, html: str) -> None:
        """ 

`SetHTML`(*self*, *html*)[¶](#wx.HTMLDataObject.SetHTML "Permalink to this definition")
Sets the HTML string.



Parameters
**html** (*string*) – 






            Source: https://docs.wxpython.org/wx.HTMLDataObject.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.HTMLDataObject.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.HTMLDataObject.GetAllFormats "wx.HTMLDataObject.GetAllFormats")
    HTML: str  # `HTML`[¶](#wx.HTMLDataObject.HTML "Permalink to this definition")See [`GetHTML`](#wx.HTMLDataObject.GetHTML "wx.HTMLDataObject.GetHTML") and [`SetHTML`](#wx.HTMLDataObject.SetHTML "wx.HTMLDataObject.SetHTML")



class HVScrolledWindow(Panel,VarHVScrollHelper):
    """ **Possible constructors**:



```
HVScrolledWindow()

HVScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition,
                 size=DefaultSize, style=0, name=PanelNameStr)

```


This window inherits all functionality of both vertical and
horizontal, variable scrolled windows.


  


        Source: https://docs.wxpython.org/wx.HVScrolledWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.HVScrolledWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor, you must call [`Create`](#wx.HVScrolledWindow.Create "wx.HVScrolledWindow.Create") later.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)*


This is the normal constructor, no need to call [`Create`](#wx.HVScrolledWindow.Create "wx.HVScrolledWindow.Create") after using this constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window, must not be `None`.
* **id** (*wx.WindowID*) – The identifier of this window, `wx.ID_ANY` by default.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The initial window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The initial window size.
* **style** (*long*) – The window style. There are no special style bits defined for this class.
* **name** (*string*) – The name for this window; usually not used.





Note


`HSCROLL` and `VSCROLL` are always automatically added to the style, there is no need to specify it explicitly.





---

  





            Source: https://docs.wxpython.org/wx.HVScrolledWindow.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=PanelNameStr*)[¶](#wx.HVScrolledWindow.Create "Permalink to this definition")
Same as the non-default constructor, but returns a status code: `True` if ok, `False` if the window couldn’t be created.


Just as with the constructor, the `HSCROLL` and `VSCROLL` styles are always used, there is no need to specify them explicitly.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.HVScrolledWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.HVScrolledWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.HVScrolledWindow.html
        """



class Icon(GDIObject):
    """ **Possible constructors**:



```
Icon()

Icon(icon)

Icon(name, type=BITMAP_TYPE_ANY, desiredWidth=-1, desiredHeight=-1)

Icon(loc)

Icon(bmp)

```


An icon is a small rectangular bitmap usually used for denoting a
minimized application.


  


        Source: https://docs.wxpython.org/wx.Icon.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Icon.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Constructs an icon object with no data; an assignment or another member function such as [`LoadFile`](#wx.Icon.LoadFile "wx.Icon.LoadFile") must be called subsequently.




---

  



**\_\_init\_\_** *(self, icon)*


Copy constructor.



Parameters
**icon** ([*wx.Icon*](#wx.Icon "wx.Icon")) – 






---

  



**\_\_init\_\_** *(self, name, type=BITMAP\_TYPE\_ANY, desiredWidth=-1, desiredHeight=-1)*


Loads an icon from a file or resource.



Parameters
* **name** (*string*) – This can refer to a resource name or a filename under MS Windows and X. Its meaning is determined by the *type* parameter.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – May be one of the  [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype) values and indicates which type of bitmap should be loaded. See the note in the class detailed description. Note that the `ICON_DEFAULT_TYPE` constant has different value under different wxWidgets ports. See the *icon.h* header for the value it takes for a specific port.
* **desiredWidth** (*int*) – Specifies the desired width of the icon. This parameter only has an effect in Windows where icon resources can contain several icons of different sizes.
* **desiredHeight** (*int*) – Specifies the desired height of the icon. This parameter only has an effect in Windows where icon resources can contain several icons of different sizes.





See also


[`LoadFile`](#wx.Icon.LoadFile "wx.Icon.LoadFile")





---

  



**\_\_init\_\_** *(self, loc)*


Loads an icon from the specified location.



Parameters
**loc** ([*wx.IconLocation*](wx.IconLocation.html#wx.IconLocation "wx.IconLocation")) – 






---

  



**\_\_init\_\_** *(self, bmp)*


Construct an Icon from a Bitmap.




---

  





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def CopyFromBitmap(self, bmp: 'Bitmap') -> None:
        """ 

`CopyFromBitmap`(*self*, *bmp*)[¶](#wx.Icon.CopyFromBitmap "Permalink to this definition")
Copies *bmp* bitmap to this icon.


Under MS Windows the bitmap must have mask colour set.



Parameters
**bmp** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 





See also


[`LoadFile`](#wx.Icon.LoadFile "wx.Icon.LoadFile")





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def CreateFromHICON(self, hicon) -> bool:
        """ 

`CreateFromHICON`(*self*, *hicon*)[¶](#wx.Icon.CreateFromHICON "Permalink to this definition")
MSW-only method to create a wx.Icon from a native icon handle.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetDepth(self) -> int:
        """ 

`GetDepth`(*self*)[¶](#wx.Icon.GetDepth "Permalink to this definition")
Gets the colour depth of the icon.


A value of 1 indicates a monochrome icon.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetHandle(self) -> int:
        """ 

`GetHandle`(*self*)[¶](#wx.Icon.GetHandle "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetHeight(self) -> int:
        """ 

`GetHeight`(*self*)[¶](#wx.Icon.GetHeight "Permalink to this definition")
Gets the height of the icon in physical pixels.



Return type
*int*





See also


[`GetWidth`](#wx.Icon.GetWidth "wx.Icon.GetWidth") , [`GetLogicalHeight`](#wx.Icon.GetLogicalHeight "wx.Icon.GetLogicalHeight")





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetLogicalHeight(self) -> float:
        """ 

`GetLogicalHeight`(*self*)[¶](#wx.Icon.GetLogicalHeight "Permalink to this definition")
Gets the height of the icon in logical pixels.


See [`wx.Bitmap.GetLogicalHeight`](wx.Bitmap.html#wx.Bitmap.GetLogicalHeight "wx.Bitmap.GetLogicalHeight") .



Return type
*float*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetLogicalSize(self) -> 'Size':
        """ 

`GetLogicalSize`(*self*)[¶](#wx.Icon.GetLogicalSize "Permalink to this definition")
Gets the size of the icon in logical pixels.


See [`wx.Bitmap.GetLogicalSize`](wx.Bitmap.html#wx.Bitmap.GetLogicalSize "wx.Bitmap.GetLogicalSize") .



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetLogicalWidth(self) -> float:
        """ 

`GetLogicalWidth`(*self*)[¶](#wx.Icon.GetLogicalWidth "Permalink to this definition")
Gets the width of the icon in logical pixels.


See [`wx.Bitmap.GetLogicalWidth`](wx.Bitmap.html#wx.Bitmap.GetLogicalWidth "wx.Bitmap.GetLogicalWidth") .



Return type
*float*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetScaleFactor(self) -> float:
        """ 

`GetScaleFactor`(*self*)[¶](#wx.Icon.GetScaleFactor "Permalink to this definition")
Gets the scale factor of this icon.


See [`wx.Bitmap.GetScaleFactor`](wx.Bitmap.html#wx.Bitmap.GetScaleFactor "wx.Bitmap.GetScaleFactor") .



Return type
*float*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.Icon.GetSize "Permalink to this definition")
Gets the size of the icon in physical pixels.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`GetLogicalSize`](#wx.Icon.GetLogicalSize "wx.Icon.GetLogicalSize")





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.Icon.GetWidth "Permalink to this definition")
Gets the width of the icon in physical pixels.



Return type
*int*





See also


[`GetHeight`](#wx.Icon.GetHeight "wx.Icon.GetHeight") , [`GetLogicalWidth`](#wx.Icon.GetLogicalWidth "wx.Icon.GetLogicalWidth")





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Icon.IsOk "Permalink to this definition")
Returns `True` if icon data is present.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def LoadFile(self, name, type=BITMAP_TYPE_ANY, desiredWidth=-1, desiredHeight=-1) -> bool:
        """ 

`LoadFile`(*self*, *name*, *type=BITMAP\_TYPE\_ANY*, *desiredWidth=-1*, *desiredHeight=-1*)[¶](#wx.Icon.LoadFile "Permalink to this definition")
Loads an icon from a file or resource.



Parameters
* **name** (*string*) – Either a filename or a Windows resource name. The meaning of name is determined by the *type* parameter.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – One of the  [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype) values; see the note in the class detailed description. Note that the `ICON_DEFAULT_TYPE` constant has different value under different wxWidgets ports. See the *icon.h* header for the value it takes for a specific port.
* **desiredWidth** (*int*) – Specifies the desired width of the icon. This parameter only has an effect in Windows where icon resources can contain several icons of different sizes.
* **desiredHeight** (*int*) – Specifies the desired height of the icon. This parameter only has an effect in Windows where icon resources can contain several icons of different sizes.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.






            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def SetDepth(self, depth: int) -> None:
        """ 

`SetDepth`(*self*, *depth*)[¶](#wx.Icon.SetDepth "Permalink to this definition")
Sets the depth member (does not affect the icon data).



Parameters
**depth** (*int*) – Icon depth.





Deprecated


This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time.





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def SetHandle(self, handle) -> None:
        """ 

`SetHandle`(*self*, *handle*)[¶](#wx.Icon.SetHandle "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def SetHeight(self, height: int) -> None:
        """ 

`SetHeight`(*self*, *height*)[¶](#wx.Icon.SetHeight "Permalink to this definition")
Sets the height member (does not affect the icon data).



Parameters
**height** (*int*) – Icon height in pixels.





Deprecated


This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time.





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.Icon.SetWidth "Permalink to this definition")
Sets the width member (does not affect the icon data).



Parameters
**width** (*int*) – Icon width in pixels.





Deprecated


This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time.





            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Icon.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Icon.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Icon.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Icon.html
        """

    Depth: int  # `Depth`[¶](#wx.Icon.Depth "Permalink to this definition")See [`GetDepth`](#wx.Icon.GetDepth "wx.Icon.GetDepth") and [`SetDepth`](#wx.Icon.SetDepth "wx.Icon.SetDepth")
    Handle: int  # `Handle`[¶](#wx.Icon.Handle "Permalink to this definition")See [`GetHandle`](#wx.Icon.GetHandle "wx.Icon.GetHandle") and [`SetHandle`](#wx.Icon.SetHandle "wx.Icon.SetHandle")
    Height: int  # `Height`[¶](#wx.Icon.Height "Permalink to this definition")See [`GetHeight`](#wx.Icon.GetHeight "wx.Icon.GetHeight") and [`SetHeight`](#wx.Icon.SetHeight "wx.Icon.SetHeight")
    LogicalHeight: float  # `LogicalHeight`[¶](#wx.Icon.LogicalHeight "Permalink to this definition")See [`GetLogicalHeight`](#wx.Icon.GetLogicalHeight "wx.Icon.GetLogicalHeight")
    LogicalSize: 'Size'  # `LogicalSize`[¶](#wx.Icon.LogicalSize "Permalink to this definition")See [`GetLogicalSize`](#wx.Icon.GetLogicalSize "wx.Icon.GetLogicalSize")
    LogicalWidth: float  # `LogicalWidth`[¶](#wx.Icon.LogicalWidth "Permalink to this definition")See [`GetLogicalWidth`](#wx.Icon.GetLogicalWidth "wx.Icon.GetLogicalWidth")
    ScaleFactor: float  # `ScaleFactor`[¶](#wx.Icon.ScaleFactor "Permalink to this definition")See [`GetScaleFactor`](#wx.Icon.GetScaleFactor "wx.Icon.GetScaleFactor")
    Size: '_Size'  # `Size`[¶](#wx.Icon.Size "Permalink to this definition")See [`GetSize`](#wx.Icon.GetSize "wx.Icon.GetSize")
    Width: int  # `Width`[¶](#wx.Icon.Width "Permalink to this definition")See [`GetWidth`](#wx.Icon.GetWidth "wx.Icon.GetWidth") and [`SetWidth`](#wx.Icon.SetWidth "wx.Icon.SetWidth")



class IconBundle(GDIObject):
    """ **Possible constructors**:



```
IconBundle()

IconBundle(file, type=BITMAP_TYPE_ANY)

IconBundle(stream, type=BITMAP_TYPE_ANY)

IconBundle(icon)

IconBundle(ic)

```


This class contains multiple copies of an icon in different sizes.


  


        Source: https://docs.wxpython.org/wx.IconBundle.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.IconBundle.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, file, type=BITMAP\_TYPE\_ANY)*


Initializes the bundle with the icon(s) found in the file.



Parameters
* **file** (*string*) –
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) –






---

  



**\_\_init\_\_** *(self, stream, type=BITMAP\_TYPE\_ANY)*


Initializes the bundle with the icon(s) found in the stream.


Notice that the *stream* must be seekable, at least if it contains more than one icon. The stream pointer is positioned after the last icon read from the stream when this function returns.



Parameters
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) –
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) –





New in version 2.9.0.





---

  



**\_\_init\_\_** *(self, icon)*


Initializes the bundle with a single icon.



Parameters
**icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – 






---

  



**\_\_init\_\_** *(self, ic)*


Copy constructor.



Parameters
**ic** ([*wx.IconBundle*](#wx.IconBundle "wx.IconBundle")) – 






---

  





            Source: https://docs.wxpython.org/wx.IconBundle.html
        """

    def AddIcon(self, *args, **kw) -> None:
        """ 

`AddIcon`(*self*, *\*args*, *\*\*kw*)[¶](#wx.IconBundle.AddIcon "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddIcon** *(self, file, type=BITMAP\_TYPE\_ANY)*


Adds all the icons contained in the file to the bundle; if the collection already contains icons with the same width and height, they are replaced by the new ones.



Parameters
* **file** (*string*) –
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) –






---

  



**AddIcon** *(self, stream, type=BITMAP\_TYPE\_ANY)*


Adds all the icons contained in the stream to the bundle; if the collection already contains icons with the same width and height, they are replaced by the new ones.


Notice that, as well as in the constructor loading the icon bundle from stream, the *stream* must be seekable, at least if more than one icon is to be loaded from it.



Parameters
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) –
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) –





New in version 2.9.0.





---

  



**AddIcon** *(self, icon)*


Adds the icon to the collection; if the collection already contains an icon with the same width and height, it is replaced by the new one.



Parameters
**icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – 






---

  





            Source: https://docs.wxpython.org/wx.IconBundle.html
        """

    def GetIcon(self, *args, **kw) -> 'Icon':
        """ 

`GetIcon`(*self*, *\*args*, *\*\*kw*)[¶](#wx.IconBundle.GetIcon "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetIcon** *(self, size, flags=FALLBACK\_SYSTEM)*


Returns the icon with the given size.


If *size* is `wx.DefaultSize` , it is interpreted as the standard system icon size, i.e. the size returned by [`wx.SystemSettings.GetMetric`](wx.SystemSettings.html#wx.SystemSettings.GetMetric "wx.SystemSettings.GetMetric") for `SYS_ICON_X` and `SYS_ICON_Y` .


If the bundle contains an icon with exactly the requested size, it’s always returned. Otherwise, the behaviour depends on the flags. If only `wx.IconBundle.FALLBACK_NONE` is given, the function returns an invalid icon. If `wx.IconBundle.FALLBACK_SYSTEM` is given, it tries to find the icon of standard system size, regardless of the size passed as parameter. Otherwise, or if the icon system size is not found either, but `wx.IconBundle.FALLBACK_NEAREST_LARGER` flag is specified, the function returns the smallest icon of the size larger than the requested one or, if this fails too, just the icon closest to the specified size.


The *flags* parameter is available only since wxWidgets 2.9.4.



Parameters
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **flags** (*int*) –



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






---

  



**GetIcon** *(self, size=DefaultCoord, flags=FALLBACK\_SYSTEM)*


Same as.



```
GetIcon(wx.Size(size, size))

```



Parameters
* **size** (*int*) –
* **flags** (*int*) –



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






---

  





            Source: https://docs.wxpython.org/wx.IconBundle.html
        """

    def GetIconByIndex(self, n: int) -> 'Icon':
        """ 

`GetIconByIndex`(*self*, *n*)[¶](#wx.IconBundle.GetIconByIndex "Permalink to this definition")
return the icon at index (must be < [`GetIconCount`](#wx.IconBundle.GetIconCount "wx.IconBundle.GetIconCount") )



Parameters
**n** (*int*) – 



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






            Source: https://docs.wxpython.org/wx.IconBundle.html
        """

    def GetIconCount(self) -> int:
        """ 

`GetIconCount`(*self*)[¶](#wx.IconBundle.GetIconCount "Permalink to this definition")
return the number of available icons



Return type
*int*






            Source: https://docs.wxpython.org/wx.IconBundle.html
        """

    def GetIconOfExactSize(self, size: Union[tuple[int, int], 'Size']) -> 'Icon':
        """ 

`GetIconOfExactSize`(*self*, *size*)[¶](#wx.IconBundle.GetIconOfExactSize "Permalink to this definition")
Returns the icon with exactly the given size or `wx.NullIcon` if this size is not available.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






            Source: https://docs.wxpython.org/wx.IconBundle.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.IconBundle.IsEmpty "Permalink to this definition")
Returns `True` if the bundle doesn’t contain any icons, `False` otherwise (in which case a call to [`GetIcon`](#wx.IconBundle.GetIcon "wx.IconBundle.GetIcon") with default parameter should return a valid icon).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.IconBundle.html
        """

    Icon: '_Icon'  # `Icon`[¶](#wx.IconBundle.Icon "Permalink to this definition")See [`GetIcon`](#wx.IconBundle.GetIcon "wx.IconBundle.GetIcon")
    IconCount: int  # `IconCount`[¶](#wx.IconBundle.IconCount "Permalink to this definition")See [`GetIconCount`](#wx.IconBundle.GetIconCount "wx.IconBundle.GetIconCount")



class IconizeEvent(Event):
    """ **Possible constructors**:



```
IconizeEvent(id=0, iconized=True)

```


An event being sent when the frame is iconized (minimized) or
restored.


  


        Source: https://docs.wxpython.org/wx.IconizeEvent.html
    """
    def __init__(self, id=0, iconized=True) -> None:
        """ 

`__init__`(*self*, *id=0*, *iconized=True*)[¶](#wx.IconizeEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **id** (*int*) –
* **iconized** (*bool*) –






            Source: https://docs.wxpython.org/wx.IconizeEvent.html
        """

    def IsIconized(self) -> bool:
        """ 

`IsIconized`(*self*)[¶](#wx.IconizeEvent.IsIconized "Permalink to this definition")
Returns `True` if the frame has been iconized, `False` if it has been restored.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.IconizeEvent.html
        """



class IconLocation:
    """ **Possible constructors**:



```
IconLocation()

IconLocation(filename, num=0)

```


IconLocation is a tiny class describing the location of an
(external, i.e.


  


        Source: https://docs.wxpython.org/wx.IconLocation.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.IconLocation.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, filename, num=0)*




---

  





            Source: https://docs.wxpython.org/wx.IconLocation.html
        """

    def GetFileName(self) -> str:
        """ 

`GetFileName`(*self*)[¶](#wx.IconLocation.GetFileName "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.IconLocation.html
        """

    def GetIndex(self) -> int:
        """ 

`GetIndex`(*self*)[¶](#wx.IconLocation.GetIndex "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.IconLocation.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.IconLocation.IsOk "Permalink to this definition")
Returns `True` if the object is valid, i.e. was properly initialized, and `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.IconLocation.html
        """

    def SetFileName(self, filename: str) -> None:
        """ 

`SetFileName`(*self*, *filename*)[¶](#wx.IconLocation.SetFileName "Permalink to this definition")

Parameters
**filename** (*string*) – 






            Source: https://docs.wxpython.org/wx.IconLocation.html
        """

    def SetIndex(self, num) -> None:
        """ 

`SetIndex`(*self*, *num*)[¶](#wx.IconLocation.SetIndex "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.IconLocation.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.IconLocation.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.IconLocation.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.IconLocation.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.IconLocation.html
        """

    FileName: str  # `FileName`[¶](#wx.IconLocation.FileName "Permalink to this definition")See [`GetFileName`](#wx.IconLocation.GetFileName "wx.IconLocation.GetFileName") and [`SetFileName`](#wx.IconLocation.SetFileName "wx.IconLocation.SetFileName")
    Index: int  # `Index`[¶](#wx.IconLocation.Index "Permalink to this definition")See [`GetIndex`](#wx.IconLocation.GetIndex "wx.IconLocation.GetIndex") and [`SetIndex`](#wx.IconLocation.SetIndex "wx.IconLocation.SetIndex")



class IdleEvent(Event):
    """ **Possible constructors**:



```
IdleEvent()

```


This class is used for idle events, which are generated when the
system becomes idle.


  


        Source: https://docs.wxpython.org/wx.IdleEvent.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.IdleEvent.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.IdleEvent.html
        """

    @staticmethod
    def GetMode() -> 'IdleMode':
        """ 

*static* `GetMode`()[¶](#wx.IdleEvent.GetMode "Permalink to this definition")
Static function returning a value specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events.



Return type
 [wx.IdleMode](wx.IdleMode.enumeration.html#wx-idlemode)





See also


[`SetMode`](#wx.IdleEvent.SetMode "wx.IdleEvent.SetMode") .





            Source: https://docs.wxpython.org/wx.IdleEvent.html
        """

    def MoreRequested(self) -> bool:
        """ 

`MoreRequested`(*self*)[¶](#wx.IdleEvent.MoreRequested "Permalink to this definition")
Returns `True` if the OnIdle function processing this event requested more processing time.



Return type
*bool*





See also


[`RequestMore`](#wx.IdleEvent.RequestMore "wx.IdleEvent.RequestMore")





            Source: https://docs.wxpython.org/wx.IdleEvent.html
        """

    def RequestMore(self, needMore: bool=True) -> None:
        """ 

`RequestMore`(*self*, *needMore=True*)[¶](#wx.IdleEvent.RequestMore "Permalink to this definition")
Tells wxWidgets that more processing is required.


This function can be called by an OnIdle handler for a window or window event handler to indicate that *App.OnIdle* should forward the OnIdle event once more to the application windows.


If no window calls this function during OnIdle, then the application will remain in a passive event loop (not calling OnIdle) until a new event is posted to the application by the windowing system.



Parameters
**needMore** (*bool*) – 





See also


[`MoreRequested`](#wx.IdleEvent.MoreRequested "wx.IdleEvent.MoreRequested")





            Source: https://docs.wxpython.org/wx.IdleEvent.html
        """

    @staticmethod
    def SetMode(mode: IdleMode) -> None:
        """ 

*static* `SetMode`(*mode*)[¶](#wx.IdleEvent.SetMode "Permalink to this definition")
Static function for specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events.



Parameters
**mode** ([*IdleMode*](wx.IdleMode.enumeration.html "IdleMode")) – Can be one of the  [wx.IdleMode](wx.IdleMode.enumeration.html#wx-idlemode) values. The default is `wx.IDLE_PROCESS_ALL`.






            Source: https://docs.wxpython.org/wx.IdleEvent.html
        """



IDLE_PROCESS_SPECIFIED: int

IDLE_PROCESS_ALL: int

class IdManager:
    """ IdManager is responsible for allocating and releasing window IDs.


  


        Source: https://docs.wxpython.org/wx.IdManager.html
    """
    @staticmethod
    def ReserveId(count: int=1) -> int:
        """ 

*static* `ReserveId`(*count=1*)[¶](#wx.IdManager.ReserveId "Permalink to this definition")
Called directly by [`wx.Window.NewControlId`](wx.Window.html#wx.Window.NewControlId "wx.Window.NewControlId") , this function will create a new `ID` or range of IDs.


The IDs will be reserved until assigned to a WindowIDRef() or unreserved with UnreserveControlId(). Only `ID` values that are not assigned to a WindowIDRef() need to be unreserved.



Parameters
**count** (*int*) – The number of sequential IDs to reserve.



Return type
*wx.WindowID*



Returns
The value of the first `ID` in the sequence, or `wx.ID_NONE`.






            Source: https://docs.wxpython.org/wx.IdManager.html
        """

    @staticmethod
    def UnreserveId(id, count=1) -> None:
        """ 

*static* `UnreserveId`(*id*, *count=1*)[¶](#wx.IdManager.UnreserveId "Permalink to this definition")
Called directly by [`wx.Window.UnreserveControlId`](wx.Window.html#wx.Window.UnreserveControlId "wx.Window.UnreserveControlId") , this function will unreserve an `ID` or range of IDs that is currently reserved.


This should only be called for IDs returned by ReserveControlId() that have NOT been assigned to a WindowIDRef (see [Window IDs](window_ids_overview.html#window-ids)).



Parameters
* **id** (*wx.WindowID*) – The first of the range of IDs to unreserve.
* **count** (*int*) – The number of sequential IDs to unreserve.






            Source: https://docs.wxpython.org/wx.IdManager.html
        """



class IFFHandler(ImageHandler):
    """ **Possible constructors**:



```
IFFHandler()

```


This is the image handler for the `IFF` format.


  


        Source: https://docs.wxpython.org/wx.IFFHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.IFFHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.IFFHandler](#wx-iffhandler).




            Source: https://docs.wxpython.org/wx.IFFHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.IFFHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.IFFHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.IFFHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.IFFHandler.SaveFile "wx.IFFHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.IFFHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.IFFHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.IFFHandler.LoadFile "wx.IFFHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.IFFHandler.html
        """



class Image(Object):
    """ **Possible constructors**:



```
Image()

Image(width, height, clear=True)

Image(sz, clear=True)

Image(name, type=BITMAP_TYPE_ANY, index=-1)

Image(name, mimetype, index=-1)

Image(stream, type=BITMAP_TYPE_ANY, index=-1)

Image(stream, mimetype, index=-1)

Image(width, height, data)

Image(width, height, data, alpha)

Image(size, data)

Image(size, data, alpha)

```


This class encapsulates a platform-independent image.


  


        Source: https://docs.wxpython.org/wx.Image.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Creates an empty  [wx.Image](#wx-image) object without an alpha channel.




---

  



**\_\_init\_\_** *(self, width, height, clear=True)*


Creates an image with the given size and clears it if requested.


Does not create an alpha channel.



Parameters
* **width** (*int*) – Specifies the width of the image.
* **height** (*int*) – Specifies the height of the image.
* **clear** (*bool*) – If `True`, initialize the image to black.






---

  



**\_\_init\_\_** *(self, sz, clear=True)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **clear** (*bool*) –






---

  



**\_\_init\_\_** *(self, name, type=BITMAP\_TYPE\_ANY, index=-1)*


Creates an image from a file.



Parameters
* **name** (*string*) – Name of the file from which to load the image.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – May be one of the following:

	+ `wx.BITMAP_TYPE_BMP`: Load a Windows bitmap file.
	+ `wx.BITMAP_TYPE_GIF`: Load a `GIF` bitmap file.
	+ `wx.BITMAP_TYPE_JPEG`: Load a `JPEG` bitmap file.
	+ `wx.BITMAP_TYPE_PNG`: Load a `PNG` bitmap file.
	+ `wx.BITMAP_TYPE_PCX`: Load a `PCX` bitmap file.
	+ `wx.BITMAP_TYPE_PNM`: Load a `PNM` bitmap file.
	+ `wx.BITMAP_TYPE_TIFF`: Load a `TIFF` bitmap file.
	+ `wx.BITMAP_TYPE_TGA`: Load a `TGA` bitmap file.
	+ `wx.BITMAP_TYPE_XPM`: Load a XPM bitmap file.
	+ `wx.BITMAP_TYPE_ICO`: Load a Windows icon file (`ICO`).
	+ `wx.BITMAP_TYPE_CUR`: Load a Windows cursor file (`CUR`).
	+ `wx.BITMAP_TYPE_ANI`: Load a Windows animated cursor file (`ANI`).
	+ `wx.BITMAP_TYPE_ANY`: Will try to autodetect the format.
* **index** (*int*) – Index of the image to load in the case that the image file contains multiple images. This is only used by `GIF`, `ICO` and `TIFF` handlers. The default value (-1) means “choose the default image” and is interpreted as the first image (index=0) by the `GIF` and `TIFF` handler and as the largest and most colourful one by the `ICO` handler.





Note


Depending on how wxWidgets has been configured and by which handlers have been loaded, not all formats may be available. Any handler other than `BMP` must be previously initialized with [`wx.Image.AddHandler`](#wx.Image.AddHandler "wx.Image.AddHandler") or InitAllImageHandlers.




Note


You can use [`GetOptionInt`](#wx.Image.GetOptionInt "wx.Image.GetOptionInt") to get the hotspot when loading cursor files:



```
hotspot_x = image.GetOptionInt(wx.IMAGE_OPTION_CUR_HOTSPOT_X)
hotspot_y = image.GetOptionInt(wx.IMAGE_OPTION_CUR_HOTSPOT_Y)

```




See also


[`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile")





---

  



**\_\_init\_\_** *(self, name, mimetype, index=-1)*


Creates an image from a file using MIME-types to specify the type.



Parameters
* **name** (*string*) – Name of the file from which to load the image.
* **mimetype** (*string*) – MIME type string (for example ‘image/jpeg’)
* **index** (*int*) – See description in  [wx.Image](#wx-image) overload.






---

  



**\_\_init\_\_** *(self, stream, type=BITMAP\_TYPE\_ANY, index=-1)*


Creates an image from a stream.



Parameters
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream from which to load the image. Currently, the stream must support seeking.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – See description in  [wx.Image](#wx-image) overload.
* **index** (*int*) – See description in  [wx.Image](#wx-image) overload.






---

  



**\_\_init\_\_** *(self, stream, mimetype, index=-1)*


Creates an image from a stream using MIME-types to specify the type.



Parameters
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream from which to load the image. Currently, the stream must support seeking.
* **mimetype** (*string*) – MIME type string (for example ‘image/jpeg’)
* **index** (*int*) – See description in  [wx.Image](#wx-image) overload.






---

  



**\_\_init\_\_** *(self, width, height, data)*


Creates an image from `RGB` data in memory.




---

  



**\_\_init\_\_** *(self, width, height, data, alpha)*


Creates an image from `RGB` data in memory, plus an alpha channel




---

  



**\_\_init\_\_** *(self, size, data)*


Creates an image from `RGB` data in memory.




---

  



**\_\_init\_\_** *(self, size, data, alpha)*


Creates an image from `RGB` data in memory, plus an alpha channel




---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def AddHandler(handler: 'ImageHandler') -> None:
        """ 

*static* `AddHandler`(*handler*)[¶](#wx.Image.AddHandler "Permalink to this definition")
Register an image handler.


Typical example of use:



```
wx.Image.AddHandler(wx.PNGHandler)

```


See [Available image handlers](#wx-image) for a list of the available handlers. You can also use [`wx.InitAllImageHandlers`](wx.functions.html#wx.InitAllImageHandlers "wx.InitAllImageHandlers") to add handlers for all the image formats supported by wxWidgets at once.



Parameters
**handler** ([*wx.ImageHandler*](wx.ImageHandler.html#wx.ImageHandler "wx.ImageHandler")) – A heap-allocated handler object which will be deleted by  [wx.Image](#wx-image) if it is removed later by [`RemoveHandler`](#wx.Image.RemoveHandler "wx.Image.RemoveHandler") or at program shutdown.






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def AdjustChannels(self, factor_red, factor_green, factor_blue, factor_alpha=1.0) -> 'Image':
        """ 

`AdjustChannels`(*self*, *factor\_red*, *factor\_green*, *factor\_blue*, *factor\_alpha=1.0*)[¶](#wx.Image.AdjustChannels "Permalink to this definition")

> This function muliplies all 4 channels (red, green, blue, alpha) with
> a factor (around 1.0). Useful for gamma correction, colour correction
> and to add a certain amount of transparency to a image (fade in fade
> out effects). If factor\_alpha is given but the original image has no
> alpha channel then a alpha channel will be added.



Return type
 [wx.Image](#wx-image)






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Blur(self, blurRadius: int) -> 'Image':
        """ 

`Blur`(*self*, *blurRadius*)[¶](#wx.Image.Blur "Permalink to this definition")
Blurs the image in both horizontal and vertical directions by the specified pixel *blurRadius*.


This should not be used when using a single mask colour for transparency.



Parameters
**blurRadius** (*int*) – 



Return type
 [wx.Image](#wx-image)





See also


[`BlurHorizontal`](#wx.Image.BlurHorizontal "wx.Image.BlurHorizontal") , [`BlurVertical`](#wx.Image.BlurVertical "wx.Image.BlurVertical")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def BlurHorizontal(self, blurRadius: int) -> 'Image':
        """ 

`BlurHorizontal`(*self*, *blurRadius*)[¶](#wx.Image.BlurHorizontal "Permalink to this definition")
Blurs the image in the horizontal direction only.


This should not be used when using a single mask colour for transparency.



Parameters
**blurRadius** (*int*) – 



Return type
 [wx.Image](#wx-image)





See also


[`Blur`](#wx.Image.Blur "wx.Image.Blur") , [`BlurVertical`](#wx.Image.BlurVertical "wx.Image.BlurVertical")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def BlurVertical(self, blurRadius: int) -> 'Image':
        """ 

`BlurVertical`(*self*, *blurRadius*)[¶](#wx.Image.BlurVertical "Permalink to this definition")
Blurs the image in the vertical direction only.


This should not be used when using a single mask colour for transparency.



Parameters
**blurRadius** (*int*) – 



Return type
 [wx.Image](#wx-image)





See also


[`Blur`](#wx.Image.Blur "wx.Image.Blur") , [`BlurHorizontal`](#wx.Image.BlurHorizontal "wx.Image.BlurHorizontal")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def CanRead(*args, **kw) -> bool:
        """ 

*static* `CanRead`(*\*args*, *\*\*kw*)[¶](#wx.Image.CanRead "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CanRead** *(filename)*


Returns `True` if at least one of the available image handlers can read the file with the given name.


See [`wx.ImageHandler.CanRead`](wx.ImageHandler.html#wx.ImageHandler.CanRead "wx.ImageHandler.CanRead") for more info.



Parameters
**filename** (*string*) – 



Return type
*bool*






---

  



**CanRead** *(stream)*


Returns `True` if at least one of the available image handlers can read the data in the given stream.


See [`wx.ImageHandler.CanRead`](wx.ImageHandler.html#wx.ImageHandler.CanRead "wx.ImageHandler.CanRead") for more info.



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ChangeBrightness(self, factor: float) -> None:
        """ 

`ChangeBrightness`(*self*, *factor*)[¶](#wx.Image.ChangeBrightness "Permalink to this definition")
Changes the brightness (value) of each pixel in the image.


factor is a float in the range [-1.0..+1.0], where -1.0 corresponds to -100 percent and +1.0 corresponds to +100 percent.



Parameters
**factor** (*float*) – 





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ChangeHSV(self, angleH, factorS, factorV) -> None:
        """ 

`ChangeHSV`(*self*, *angleH*, *factorS*, *factorV*)[¶](#wx.Image.ChangeHSV "Permalink to this definition")
Changes the hue, the saturation and the brightness (value) of each pixel in the image.


angleH is a float in the range [-1.0..+1.0], where -1.0 corresponds to -360 degrees and +1.0 corresponds to +360 degrees, factorS is a float in the range [-1.0..+1.0], where -1.0 corresponds to -100 percent and +1.0 corresponds to +100 percent and factorV is a float in the range [-1.0..+1.0], where -1.0 corresponds to -100 percent and +1.0 corresponds to +100 percent.



Parameters
* **angleH** (*float*) –
* **factorS** (*float*) –
* **factorV** (*float*) –





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ChangeLightness(self, alpha: int) -> 'Image':
        """ 

`ChangeLightness`(*self*, *alpha*)[¶](#wx.Image.ChangeLightness "Permalink to this definition")
Returns a changed version of the image based on the given lightness.


This utility function simply darkens or lightens a color, based on the specified percentage *ialpha*. *ialpha* of 0 would make the color completely black, 200 completely white and 100 would not change the color.



Parameters
**alpha** (*int*) – 



Return type
 [wx.Image](#wx-image)





New in version 4.1/wxWidgets-3.1.6.




Note


This function calls [`wx.Colour.ChangeLightness`](wx.Colour.html#wx.Colour.ChangeLightness "wx.Colour.ChangeLightness") for each pixel in the image.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ChangeSaturation(self, factor: float) -> None:
        """ 

`ChangeSaturation`(*self*, *factor*)[¶](#wx.Image.ChangeSaturation "Permalink to this definition")
Changes the saturation of each pixel in the image.


factor is a float in the range [-1.0..+1.0], where -1.0 corresponds to -100 percent and +1.0 corresponds to +100 percent.



Parameters
**factor** (*float*) – 





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def CleanUpHandlers() -> None:
        """ 

*static* `CleanUpHandlers`()[¶](#wx.Image.CleanUpHandlers "Permalink to this definition")
Deletes all image handlers.


This function is called by wxWidgets on exit.




            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Clear(self, value: int=0) -> None:
        """ 

`Clear`(*self*, *value=0*)[¶](#wx.Image.Clear "Permalink to this definition")
Initialize the image data with zeroes (the default) or with the byte value given as *value*.



Parameters
**value** (*int*) – 





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ClearAlpha(self) -> None:
        """ 

`ClearAlpha`(*self*)[¶](#wx.Image.ClearAlpha "Permalink to this definition")
Removes the alpha channel from the image.


This function should only be called if the image has alpha channel data, use [`HasAlpha`](#wx.Image.HasAlpha "wx.Image.HasAlpha") to check for this.



New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ComputeHistogram(self, histogram: 'ImageHistogram') -> int:
        """ 

`ComputeHistogram`(*self*, *histogram*)[¶](#wx.Image.ComputeHistogram "Permalink to this definition")
Computes the histogram of the image.


*histogram* is a reference to  [wx.ImageHistogram](wx.ImageHistogram.html#wx-imagehistogram) object.  [wx.ImageHistogram](wx.ImageHistogram.html#wx-imagehistogram) is a specialization of *HashMap* “template” and is defined as follows:



```
# This is a raw translation of the ImageHistogramEntry
# code in C++, not a real Python class
class ImageHistogramEntry(object):

    def __init__(self):

        self.index = 0
        self.value = 0

```



Parameters
**histogram** ([*wx.ImageHistogram*](wx.ImageHistogram.html#wx.ImageHistogram "wx.ImageHistogram")) – 



Return type
*int*



Returns
Returns number of colours in the histogram.






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ConvertAlphaToMask(self, *args, **kw) -> bool:
        """ 

`ConvertAlphaToMask`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.ConvertAlphaToMask "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ConvertAlphaToMask** *(self, threshold=IMAGE\_ALPHA\_THRESHOLD)*


If the image has alpha channel, this method converts it to mask.


If the image has an alpha channel, all pixels with alpha value less than *threshold* are replaced with the mask colour and the alpha channel is removed. Otherwise nothing is done.


The mask colour is chosen automatically using [`FindFirstUnusedColour`](#wx.Image.FindFirstUnusedColour "wx.Image.FindFirstUnusedColour") , see the overload below if this is not appropriate.



Parameters
**threshold** (*int*) – 



Return type
*bool*



Returns
Returns `True` on success, `False` on error.






---

  



**ConvertAlphaToMask** *(self, mr, mg, mb, threshold=IMAGE\_ALPHA\_THRESHOLD)*


If the image has alpha channel, this method converts it to mask using the specified colour as the mask colour.


If the image has an alpha channel, all pixels with alpha value less than *threshold* are replaced with the mask colour and the alpha channel is removed. Otherwise nothing is done.



Parameters
* **mr** (*int*) – The red component of the mask colour.
* **mg** (*int*) – The green component of the mask colour.
* **mb** (*int*) – The blue component of the mask colour.
* **threshold** (*int*) – Pixels with alpha channel values below the given threshold are considered to be transparent, i.e. the corresponding mask pixels are set. Pixels with the alpha values above the threshold are considered to be opaque.



Return type
*bool*



Returns
Returns `True` on success, `False` on error.





New in version 2.9.0.





---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ConvertToBitmap(self, depth=-1) -> 'Bitmap':
        """ 

`ConvertToBitmap`(*self*, *depth=-1*)[¶](#wx.Image.ConvertToBitmap "Permalink to this definition")
Convert the image to a [`wx.Bitmap`](wx.Bitmap.html#wx.Bitmap "wx.Bitmap").




            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ConvertToDisabled(self, brightness: int=255) -> 'Image':
        """ 

`ConvertToDisabled`(*self*, *brightness=255*)[¶](#wx.Image.ConvertToDisabled "Permalink to this definition")
Returns disabled (dimmed) version of the image.



Parameters
**brightness** (*int*) – 



Return type
 [wx.Image](#wx-image)





New in version 2.9.0.




Note


This function calls [`wx.Colour.MakeDisabled`](wx.Colour.html#wx.Colour.MakeDisabled "wx.Colour.MakeDisabled") for each pixel in the image.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ConvertToGreyscale(self, *args, **kw) -> 'Image':
        """ 

`ConvertToGreyscale`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.ConvertToGreyscale "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ConvertToGreyscale** *(self, weight\_r, weight\_g, weight\_b)*


Returns a greyscale version of the image.


The returned image uses the luminance component of the original to calculate the greyscale. Defaults to using the standard `ITU-T` BT.601 when converting to `YUV`, where every pixel equals (R *weight\_r*) + (G *weight\_g*) + (B *weight\_b*).



Parameters
* **weight\_r** (*float*) –
* **weight\_g** (*float*) –
* **weight\_b** (*float*) –



Return type
 [wx.Image](#wx-image)





Note


This function calls [`wx.Colour.MakeGrey`](wx.Colour.html#wx.Colour.MakeGrey "wx.Colour.MakeGrey") for each pixel in the image.





---

  



**ConvertToGreyscale** *(self)*


Returns a greyscale version of the image.



Return type
 [wx.Image](#wx-image)





New in version 2.9.0.





---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ConvertToMono(self, r, g, b) -> 'Image':
        """ 

`ConvertToMono`(*self*, *r*, *g*, *b*)[¶](#wx.Image.ConvertToMono "Permalink to this definition")
Returns monochromatic version of the image.


The returned image has white colour where the original has (r,g,b) colour and black colour everywhere else.



Parameters
* **r** (*int*) –
* **g** (*int*) –
* **b** (*int*) –



Return type
 [wx.Image](#wx-image)





Note


This function calls [`wx.Colour.MakeMono`](wx.Colour.html#wx.Colour.MakeMono "wx.Colour.MakeMono") for each pixel in the image.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ConvertToMonoBitmap(self, red, green, blue) -> None:
        """ 

`ConvertToMonoBitmap`(*self*, *red*, *green*, *blue*)[¶](#wx.Image.ConvertToMonoBitmap "Permalink to this definition")
Creates a monochrome version of the image and returns it as a [`wx.Bitmap`](wx.Bitmap.html#wx.Bitmap "wx.Bitmap").




            Source: https://docs.wxpython.org/wx.Image.html
        """

    def ConvertToRegion(self, R=-1, G=-1, B=-1, tolerance=0) -> 'Region':
        """ 

`ConvertToRegion`(*self*, *R=-1*, *G=-1*, *B=-1*, *tolerance=0*)[¶](#wx.Image.ConvertToRegion "Permalink to this definition")
Create a [`wx.Region`](wx.Region.html#wx.Region "wx.Region") where the transparent areas match the given `RGB` values.


If the `RGB` values are not given, then the image’s mask colour components will
be used instead. If a non-zero tolerance is given then the pixels that fall
into the range of (R,G,B) to (R+tolerance, G+tolerance, B+tolerance) will be
considered to be transparent.


If there are no pixels matching the transparent colours then the region
returned will match the image’s full dimensions.



Parameters
* **`R`** (*int*) – The red component of the transparent colour.
* **`G`** (*int*) – The red component of the transparent colour.
* **`B`** (*int*) – The red component of the transparent colour.
* **tolerance** (*int*) – Broadens the range of colours that will
be considered transparent.



Returns
a [`wx.Region`](wx.Region.html#wx.Region "wx.Region") object.



Return type
 [wx.Region](wx.Region.html#wx-region)






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Copy(self) -> 'Image':
        """ 

`Copy`(*self*)[¶](#wx.Image.Copy "Permalink to this definition")
Returns an identical copy of this image.



Return type
 [wx.Image](#wx-image)






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Create(self, *args, **kw) -> bool:
        """ 

`Create`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.Create "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Create** *(self, width, height, clear=True)*


Creates a fresh image.


See `Image.__init__` for more info.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **clear** (*bool*) –



Return type
*bool*



Returns
`True` if the call succeeded, `False` otherwise.






---

  



**Create** *(self, sz, clear=True)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **clear** (*bool*) –



Return type
*bool*






---

  



**Create** *(self, width, height, data)*


Create a new image initialized with the given `RGB` data.



Return type
*bool*






---

  



**Create** *(self, width, height, data, alpha)*


Create a new image initialized with the given `RGB` data and Alpha data.



Return type
*bool*






---

  



**Create** *(self, size, data)*


Create a new image initialized with the given `RGB` data.



Return type
*bool*






---

  



**Create** *(self, size, data, alpha)*


Create a new image initialized with the given `RGB` data and Alpha data.



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Destroy(self) -> None:
        """ 

`Destroy`(*self*)[¶](#wx.Image.Destroy "Permalink to this definition")
Destroys the image data.




            Source: https://docs.wxpython.org/wx.Image.html
        """

    def FindFirstUnusedColour(self, startR=1, startG=0, startB=0) -> tuple:
        """ 

`FindFirstUnusedColour`(*self*, *startR=1*, *startG=0*, *startB=0*)[¶](#wx.Image.FindFirstUnusedColour "Permalink to this definition")
Finds the first colour that is never used in the image.


The search begins at given initial colour and continues by increasing R, G and B components (in this order) by 1 until an unused colour is found or the colour space exhausted.


The parameters *r*, *g*, *b* are pointers to variables to save the colour.


The parameters *startR*, *startG*, *startB* define the initial values of the colour. The returned colour will have `RGB` values equal to or greater than these.



Parameters
* **startR** (*int*) –
* **startG** (*int*) –
* **startB** (*int*) –



Return type
*tuple*



Returns
( *r*, *g*, *b* )





Note


This method involves computing the histogram, which is a computationally intensive operation.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def FindHandler(*args, **kw) -> 'ImageHandler':
        """ 

*static* `FindHandler`(*\*args*, *\*\*kw*)[¶](#wx.Image.FindHandler "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FindHandler** *(name)*


Finds the handler with the given name.



Parameters
**name** (*string*) – The handler name.



Return type
 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)



Returns
A pointer to the handler if found, `None` otherwise.





See also


 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)





---

  



**FindHandler** *(extension, imageType)*


Finds the handler associated with the given extension and type.



Parameters
* **extension** (*string*) – The file extension, such as “bmp”.
* **imageType** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – The image type; one of the  [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype) values.



Return type
 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)



Returns
A pointer to the handler if found, `None` otherwise.





See also


 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)





---

  



**FindHandler** *(imageType)*


Finds the handler associated with the given image type.



Parameters
**imageType** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – The image type; one of the  [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype) values.



Return type
 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)



Returns
A pointer to the handler if found, `None` otherwise.





See also


 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)





---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def FindHandlerMime(mimetype: str) -> 'ImageHandler':
        """ 

*static* `FindHandlerMime`(*mimetype*)[¶](#wx.Image.FindHandlerMime "Permalink to this definition")
Finds the handler associated with the given MIME type.



Parameters
**mimetype** (*string*) – MIME type.



Return type
 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)



Returns
A pointer to the handler if found, `None` otherwise.





See also


 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetAlpha(self, *args, **kw) -> int:
        """ 

`GetAlpha`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.GetAlpha "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetAlpha** *(self, x, y)*


Return alpha value at given pixel location.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*int*






---

  



**GetAlpha** *(self)*


Returns a copy of the Alpha bytes of the image.



Return type
*PyObject*






---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetAlphaBuffer(self) -> Any:
        """ 

`GetAlphaBuffer`(*self*)[¶](#wx.Image.GetAlphaBuffer "Permalink to this definition")

> Returns a writable Python buffer object that is pointing at the Alpha
> data buffer inside the `Image`. You need to ensure that you do
> not use this buffer object after the image has been destroyed.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetBlue(self, x, y) -> int:
        """ 

`GetBlue`(*self*, *x*, *y*)[¶](#wx.Image.GetBlue "Permalink to this definition")
Returns the blue intensity at the given coordinate.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetData(self) -> Any:
        """ 

`GetData`(*self*)[¶](#wx.Image.GetData "Permalink to this definition")
Returns a copy of the `RGB` bytes of the image.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetDataBuffer(self) -> Any:
        """ 

`GetDataBuffer`(*self*)[¶](#wx.Image.GetDataBuffer "Permalink to this definition")

> Returns a writable Python buffer object that is pointing at the `RGB`
> image data buffer inside the `Image`. You need to ensure that you do
> not use this buffer object after the image has been destroyed.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def GetDefaultLoadFlags() -> int:
        """ 

*static* `GetDefaultLoadFlags`()[¶](#wx.Image.GetDefaultLoadFlags "Permalink to this definition")
Returns the currently used default file load flags.


See [`SetDefaultLoadFlags`](#wx.Image.SetDefaultLoadFlags "wx.Image.SetDefaultLoadFlags") for more information about these flags.



Return type
*int*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetGreen(self, x, y) -> int:
        """ 

`GetGreen`(*self*, *x*, *y*)[¶](#wx.Image.GetGreen "Permalink to this definition")
Returns the green intensity at the given coordinate.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetHeight(self) -> int:
        """ 

`GetHeight`(*self*)[¶](#wx.Image.GetHeight "Permalink to this definition")
Gets the height of the image in pixels.



Return type
*int*





See also


[`GetWidth`](#wx.Image.GetWidth "wx.Image.GetWidth") , [`GetSize`](#wx.Image.GetSize "wx.Image.GetSize")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def GetImageCount(*args, **kw) -> None:
        """ 

*static* `GetImageCount`(*\*args*, *\*\*kw*)[¶](#wx.Image.GetImageCount "Permalink to this definition")
If the image file contains more than one image and the image handler is capable of retrieving these individually, this function will return the number of available images.


For the overload taking the parameter *filename*, that’s the name of the file to query. For the overload taking the parameter *stream*, that’s the opened input stream with image data.


See [`wx.ImageHandler.GetImageCount`](wx.ImageHandler.html#wx.ImageHandler.GetImageCount "wx.ImageHandler.GetImageCount") for more info.


The parameter *type* may be one of the following values:


* `wx.BITMAP_TYPE_BMP`: Load a Windows bitmap file.
* `wx.BITMAP_TYPE_GIF`: Load a `GIF` bitmap file.
* `wx.BITMAP_TYPE_JPEG`: Load a `JPEG` bitmap file.
* `wx.BITMAP_TYPE_PNG`: Load a `PNG` bitmap file.
* `wx.BITMAP_TYPE_PCX`: Load a `PCX` bitmap file.
* `wx.BITMAP_TYPE_PNM`: Load a `PNM` bitmap file.
* `wx.BITMAP_TYPE_TIFF`: Load a `TIFF` bitmap file.
* `wx.BITMAP_TYPE_TGA`: Load a `TGA` bitmap file.
* `wx.BITMAP_TYPE_XPM`: Load a XPM bitmap file.
* `wx.BITMAP_TYPE_ICO`: Load a Windows icon file (`ICO`).
* `wx.BITMAP_TYPE_CUR`: Load a Windows cursor file (`CUR`).
* `wx.BITMAP_TYPE_ANI`: Load a Windows animated cursor file (`ANI`).
* `wx.BITMAP_TYPE_ANY`: Will try to autodetect the format.



Returns
Number of available images. For most image handlers, this is 1 (exceptions are `TIFF` and `ICO` formats as well as animated GIFs for which this function returns the number of frames in the animation).




[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetImageCount** *(filename, type=BITMAP\_TYPE\_ANY)*



Parameters
* **filename** (*string*) –
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) –



Return type
*int*






---

  



**GetImageCount** *(stream, type=BITMAP\_TYPE\_ANY)*



Parameters
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) –
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) –



Return type
*int*






---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def GetImageExtWildcard() -> str:
        """ 

*static* `GetImageExtWildcard`()[¶](#wx.Image.GetImageExtWildcard "Permalink to this definition")
Iterates all registered  [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler) objects, and returns a string containing file extension masks suitable for passing to file open/save dialog boxes.



Return type
`string`



Returns
The format of the returned string is `"(*.ext1;*.ext2)|*.ext1;*.ext2"` . It is usually a good idea to prepend a description before passing the result to the dialog. Example:



```
FileDlg = wx.FileDialog(self, "Choose Image", os.getcwd(), "",
                        "Image Files " + wx.Image.GetImageExtWildcard(),
                        wx.FD_OPEN)

```








See also


 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetLoadFlags(self) -> int:
        """ 

`GetLoadFlags`(*self*)[¶](#wx.Image.GetLoadFlags "Permalink to this definition")
Returns the file load flags used for this object.


See [`SetLoadFlags`](#wx.Image.SetLoadFlags "wx.Image.SetLoadFlags") for more information about these flags.



Return type
*int*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetMaskBlue(self) -> int:
        """ 

`GetMaskBlue`(*self*)[¶](#wx.Image.GetMaskBlue "Permalink to this definition")
Gets the blue value of the mask colour.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetMaskGreen(self) -> int:
        """ 

`GetMaskGreen`(*self*)[¶](#wx.Image.GetMaskGreen "Permalink to this definition")
Gets the green value of the mask colour.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetMaskRed(self) -> int:
        """ 

`GetMaskRed`(*self*)[¶](#wx.Image.GetMaskRed "Permalink to this definition")
Gets the red value of the mask colour.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetOption(self, name: str) -> str:
        """ 

`GetOption`(*self*, *name*)[¶](#wx.Image.GetOption "Permalink to this definition")
Gets a user-defined string-valued option.


Generic options:


* `IMAGE_OPTION_FILENAME:` The name of the file from which the image was loaded.


Options specific to
 [wx.GIFHandler](wx.GIFHandler.html#wx-gifhandler):


* `IMAGE_OPTION_GIF_COMMENT:` The comment text that is read from or written to the `GIF` file. In an animated `GIF` each frame can have its own comment. If there is only a comment in the first frame of a `GIF` it will not be repeated in other frames.



Parameters
**name** (*string*) – The name of the option, case-insensitive.



Return type
`string`



Returns
The value of the option or an empty string if not found. Use [`HasOption`](#wx.Image.HasOption "wx.Image.HasOption") if an empty string can be a valid option value.





See also


[`SetOption`](#wx.Image.SetOption "wx.Image.SetOption") , [`GetOptionInt`](#wx.Image.GetOptionInt "wx.Image.GetOptionInt") , [`HasOption`](#wx.Image.HasOption "wx.Image.HasOption")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetOptionInt(self, name: str) -> int:
        """ 

`GetOptionInt`(*self*, *name*)[¶](#wx.Image.GetOptionInt "Permalink to this definition")
Gets a user-defined integer-valued option.


The function is case-insensitive to *name*. If the given option is not present, the function returns 0. Use [`HasOption`](#wx.Image.HasOption "wx.Image.HasOption") if 0 is a possibly valid value for the option.


Generic options:


* `IMAGE_OPTION_MAX_WIDTH` and `IMAGE_OPTION_MAX_HEIGHT:` If either of these options is specified, the loaded image will be scaled down (preserving its aspect ratio) so that its width is less than the max width given if it is not 0 *and* its height is less than the max height given if it is not 0. This is typically used for loading thumbnails and the advantage of using these options compared to calling [`Rescale`](#wx.Image.Rescale "wx.Image.Rescale") after loading is that some handlers (only `JPEG` one right now) support rescaling the image during loading which is vastly more efficient than loading the entire huge image and rescaling it later (if these options are not supported by the handler, this is still what happens however). These options must be set before calling [`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") to have any effect.
* `IMAGE_OPTION_ORIGINAL_WIDTH` and `IMAGE_OPTION_ORIGINAL_HEIGHT:` These options will return the original size of the image if either `IMAGE_OPTION_MAX_WIDTH` or `IMAGE_OPTION_MAX_HEIGHT` is specified.



> New in version 2.9.3.


* `IMAGE_OPTION_QUALITY:` `JPEG` quality used when saving. This is an integer in 0..100 range with 0 meaning very poor and 100 excellent (but very badly compressed). This option is currently ignored for the other formats.
* `IMAGE_OPTION_RESOLUTIONUNIT:` The value of this option determines whether the resolution of the image is specified in centimetres or inches, see ImageResolution enum elements.
* `IMAGE_OPTION_RESOLUTION` , `IMAGE_OPTION_RESOLUTIONX` and `IMAGE_OPTION_RESOLUTIONY:` These options define the resolution of the image in the units corresponding to `IMAGE_OPTION_RESOLUTIONUNIT` options value. The first option can be set before saving the image to set both horizontal and vertical resolution to the same value. The X and Y options are set by the image handlers if they support the image resolution (currently `BMP`, `JPEG` and `TIFF` handlers do) and the image provides the resolution information and can be queried after loading the image.


Options specific to
 [wx.PNGHandler](wx.PNGHandler.html#wx-pnghandler):


* `IMAGE_OPTION_PNG_FORMAT:` Format for saving a `PNG` file, see ImagePNGType for the supported values.
* `IMAGE_OPTION_PNG_BITDEPTH:` Bit depth for every channel (R/G/B/A).
* `IMAGE_OPTION_PNG_FILTER:` Filter for saving a `PNG` file, see libpng (<http://www.libpng.org/pub/png/libpng-1.2.5-manual.html>) for possible values (e.g. `PNG_FILTER_NONE`, `PNG_FILTER_SUB`, `PNG_FILTER_UP`, etc).
* `IMAGE_OPTION_PNG_COMPRESSION_LEVEL:` Compression level (0..9) for saving a `PNG` file. A high value creates smaller-but-slower `PNG` file. Note that unlike other formats (e.g. `JPEG`) the `PNG` format is always lossless and thus this compression level doesn’t tradeoff the image quality.
* `IMAGE_OPTION_PNG_COMPRESSION_MEM_LEVEL:` Compression memory usage level (1..9) for saving a `PNG` file. A high value means the saving process consumes more memory, but may create smaller `PNG` file.
* `IMAGE_OPTION_PNG_COMPRESSION_STRATEGY:` Possible values are 0 for default strategy, 1 for filter, and 2 for Huffman-only. You can use OptiPNG (<http://optipng.sourceforge.net/>) to get a suitable value for your application.
* `IMAGE_OPTION_PNG_COMPRESSION_BUFFER_SIZE:` Internal buffer size (in bytes) for saving a `PNG` file. Ideally this should be as big as the resulting `PNG` file. Use this option if your application produces images with small size variation.


Options specific to
 [wx.TIFFHandler](wx.TIFFHandler.html#wx-tiffhandler):


* `IMAGE_OPTION_TIFF_BITSPERSAMPLE:` Number of bits per sample (channel). Currently values of 1 and 8 are supported. A value of 1 results in a black and white image. A value of 8 (the default) can mean greyscale or `RGB`, depending on the value of `IMAGE_OPTION_TIFF_SAMPLESPERPIXEL` .
* `IMAGE_OPTION_TIFF_SAMPLESPERPIXEL:` Number of samples (channels) per pixel. Currently values of 1 and 3 are supported. A value of 1 results in either a greyscale (by default) or black and white image, depending on the value of `IMAGE_OPTION_TIFF_BITSPERSAMPLE` . A value of 3 (the default) will result in an `RGB` image.
* `IMAGE_OPTION_TIFF_COMPRESSION:` Compression type. By default it is set to 1 (`COMPRESSION_NONE`). Typical other values are 5 (`COMPRESSION_LZW`) and 7 (`COMPRESSION_JPEG`). See tiff.h for more options.
* `IMAGE_OPTION_TIFF_PHOTOMETRIC:` Specifies the photometric interpretation. By default it is set to 2 (`PHOTOMETRIC_RGB`) for `RGB` images and 0 (`PHOTOMETRIC_MINISWHITE`) for greyscale or black and white images. It can also be set to 1 (`PHOTOMETRIC_MINISBLACK`) to treat the lowest value as black and highest as white. If you want a greyscale image it is also sufficient to only specify `IMAGE_OPTION_TIFF_PHOTOMETRIC` and set it to either `PHOTOMETRIC_MINISWHITE` or `PHOTOMETRIC_MINISBLACK`. The other values are taken care of.


Options specific to
 [wx.GIFHandler](wx.GIFHandler.html#wx-gifhandler):


* `IMAGE_OPTION_GIF_TRANSPARENCY:` How to deal with transparent pixels. By default, the color of transparent pixels is changed to bright pink, so that if the image is accidentally drawn without transparency, it will be obvious. Normally, this would not be noticed, as these pixels will not be rendered. But in some cases it might be useful to load a `GIF` without making any modifications to its colours. Use `IMAGE_OPTION_GIF_TRANSPARENCY_UNCHANGED` to keep the colors correct. Use `IMAGE_OPTION_GIF_TRANSPARENCY_HIGHLIGHT` to convert transparent pixels to pink (default). This option has been added in wxWidgets 3.1.1.



Parameters
**name** (*string*) – The name of the option, case-insensitive.



Return type
*int*



Returns
The value of the option or 0 if not found. Use [`HasOption`](#wx.Image.HasOption "wx.Image.HasOption") if 0 can be a valid option value.





Note


Be careful when combining the options `IMAGE_OPTION_TIFF_SAMPLESPERPIXEL` , `IMAGE_OPTION_TIFF_BITSPERSAMPLE` , and `IMAGE_OPTION_TIFF_PHOTOMETRIC` . While some measures are taken to prevent illegal combinations and/or values, it is still easy to abuse them and come up with invalid results in the form of either corrupted images or crashes.




See also


[`SetOption`](#wx.Image.SetOption "wx.Image.SetOption") , [`GetOption`](#wx.Image.GetOption "wx.Image.GetOption")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetOrFindMaskColour(self) -> tuple:
        """ 

`GetOrFindMaskColour`(*self*)[¶](#wx.Image.GetOrFindMaskColour "Permalink to this definition")
Get the current mask colour or find a suitable unused colour that could be used as a mask colour.


Returns `True` if the image currently has a mask.



Return type
*tuple*



Returns
( *r*, *g*, *b* )






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetPalette(self) -> 'Palette':
        """ 

`GetPalette`(*self*)[¶](#wx.Image.GetPalette "Permalink to this definition")
Returns the palette associated with the image.


Currently the palette is only used when converting to  [wx.Bitmap](wx.Bitmap.html#wx-bitmap) under Windows.


Some of the  [wx.Image](#wx-image) handlers have been modified to set the palette if one exists in the image file (usually 256 or less colour images in `GIF` or `PNG` format).



Return type
 [wx.Palette](wx.Palette.html#wx-palette)






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetRed(self, x, y) -> int:
        """ 

`GetRed`(*self*, *x*, *y*)[¶](#wx.Image.GetRed "Permalink to this definition")
Returns the red intensity at the given coordinate.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.Image.GetSize "Permalink to this definition")
Returns the size of the image in pixels.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.0.




See also


[`GetHeight`](#wx.Image.GetHeight "wx.Image.GetHeight") , [`GetWidth`](#wx.Image.GetWidth "wx.Image.GetWidth")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetSubImage(self, rect: 'Rect') -> 'Image':
        """ 

`GetSubImage`(*self*, *rect*)[¶](#wx.Image.GetSubImage "Permalink to this definition")
Returns a sub image of the current one as long as the rect belongs entirely to the image.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
 [wx.Image](#wx-image)






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetType(self) -> 'BitmapType':
        """ 

`GetType`(*self*)[¶](#wx.Image.GetType "Permalink to this definition")
Gets the type of image found by [`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") or specified with [`SaveFile`](#wx.Image.SaveFile "wx.Image.SaveFile") .



Return type
 [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype)





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.Image.GetWidth "Permalink to this definition")
Gets the width of the image in pixels.



Return type
*int*





See also


[`GetHeight`](#wx.Image.GetHeight "wx.Image.GetHeight") , [`GetSize`](#wx.Image.GetSize "wx.Image.GetSize")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def HSVtoRGB(hsv: HSVValue) -> 'RGBValue':
        """ 

*static* `HSVtoRGB`(*hsv*)[¶](#wx.Image.HSVtoRGB "Permalink to this definition")
Converts a color in `HSV` color space to `RGB` color space.



Parameters
**hsv** ([*HSVValue*](wx.Image.HSVValue.html#wx.Image.HSVValue "wx.Image.HSVValue")) – 



Return type
[`RGBValue`](wx.Image.RGBValue.html#wx.Image.RGBValue "wx.Image.RGBValue")






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def HasAlpha(self) -> bool:
        """ 

`HasAlpha`(*self*)[¶](#wx.Image.HasAlpha "Permalink to this definition")
Returns `True` if this image has alpha channel, `False` otherwise.



Return type
*bool*





See also


[`GetAlpha`](#wx.Image.GetAlpha "wx.Image.GetAlpha") , [`SetAlpha`](#wx.Image.SetAlpha "wx.Image.SetAlpha")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def HasMask(self) -> bool:
        """ 

`HasMask`(*self*)[¶](#wx.Image.HasMask "Permalink to this definition")
Returns `True` if there is a mask active, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def HasOption(self, name: str) -> bool:
        """ 

`HasOption`(*self*, *name*)[¶](#wx.Image.HasOption "Permalink to this definition")
Returns `True` if the given option is present.


The function is case-insensitive to *name*.


The lists of the currently supported options are in [`GetOption`](#wx.Image.GetOption "wx.Image.GetOption") and [`GetOptionInt`](#wx.Image.GetOptionInt "wx.Image.GetOptionInt") function docs.



Parameters
**name** (*string*) – 



Return type
*bool*





See also


[`SetOption`](#wx.Image.SetOption "wx.Image.SetOption") , [`GetOption`](#wx.Image.GetOption "wx.Image.GetOption") , [`GetOptionInt`](#wx.Image.GetOptionInt "wx.Image.GetOptionInt")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def InitAlpha(self) -> None:
        """ 

`InitAlpha`(*self*)[¶](#wx.Image.InitAlpha "Permalink to this definition")
Initializes the image alpha channel data.


It is an error to call it if the image already has alpha data. If it doesn’t, alpha data will be by default initialized to all pixels being fully opaque. But if the image has a mask colour, all mask pixels will be completely transparent.




            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def InitStandardHandlers() -> None:
        """ 

*static* `InitStandardHandlers`()[¶](#wx.Image.InitStandardHandlers "Permalink to this definition")
Internal use only.


Adds standard image format handlers. It only install BMPHandler for the time being, which is used by  [wx.Bitmap](wx.Bitmap.html#wx-bitmap).


This function is called by wxWidgets on startup, and shouldn’t be called by the user.



See also


 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler), [`wx.InitAllImageHandlers`](wx.functions.html#wx.InitAllImageHandlers "wx.InitAllImageHandlers") , *Quantize*





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def InsertHandler(handler: 'ImageHandler') -> None:
        """ 

*static* `InsertHandler`(*handler*)[¶](#wx.Image.InsertHandler "Permalink to this definition")
Adds a handler at the start of the static list of format handlers.



Parameters
**handler** ([*wx.ImageHandler*](wx.ImageHandler.html#wx.ImageHandler "wx.ImageHandler")) – A new image format handler object. There is usually only one instance of a given handler class in an application session.





See also


 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Image.IsOk "Permalink to this definition")
Returns `True` if image data is present.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def IsTransparent(self, x, y, threshold=IMAGE_ALPHA_THRESHOLD) -> bool:
        """ 

`IsTransparent`(*self*, *x*, *y*, *threshold=IMAGE\_ALPHA\_THRESHOLD*)[¶](#wx.Image.IsTransparent "Permalink to this definition")
Returns `True` if the given pixel is transparent, i.e. either has the mask colour if this image has a mask or if this image has alpha channel and alpha value of this pixel is strictly less than *threshold*.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **threshold** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def LoadFile(self, *args, **kw) -> bool:
        """ 

`LoadFile`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.LoadFile "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**LoadFile** *(self, stream, type=BITMAP\_TYPE\_ANY, index=-1)*


Loads an image from an input stream.


If the file can’t be loaded, this function returns `False` and logs an error using [`wx.LogError`](wx.functions.html#wx.LogError "wx.LogError") . If the file can be loaded but some problems were detected while doing it, it can also call [`wx.LogWarning`](wx.functions.html#wx.LogWarning "wx.LogWarning") to notify about these problems. If this is undesirable, use [`SetLoadFlags`](#wx.Image.SetLoadFlags "wx.Image.SetLoadFlags") to reset `Load_Verbose` flag and suppress these warnings.



Parameters
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream from which to load the image. Currently, the stream must support seeking.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – May be one of the following:

	+ `wx.BITMAP_TYPE_BMP`: Load a Windows bitmap file.
	+ `wx.BITMAP_TYPE_GIF`: Load a `GIF` bitmap file.
	+ `wx.BITMAP_TYPE_JPEG`: Load a `JPEG` bitmap file.
	+ `wx.BITMAP_TYPE_PNG`: Load a `PNG` bitmap file.
	+ `wx.BITMAP_TYPE_PCX`: Load a `PCX` bitmap file.
	+ `wx.BITMAP_TYPE_PNM`: Load a `PNM` bitmap file.
	+ `wx.BITMAP_TYPE_TIFF`: Load a `TIFF` bitmap file.
	+ `wx.BITMAP_TYPE_TGA`: Load a `TGA` bitmap file.
	+ `wx.BITMAP_TYPE_XPM`: Load a XPM bitmap file.
	+ `wx.BITMAP_TYPE_ICO`: Load a Windows icon file (`ICO`).
	+ `wx.BITMAP_TYPE_CUR`: Load a Windows cursor file (`CUR`).
	+ `wx.BITMAP_TYPE_ANI`: Load a Windows animated cursor file (`ANI`).
	+ `wx.BITMAP_TYPE_ANY`: Will try to autodetect the format.
* **index** (*int*) – Index of the image to load in the case that the image file contains multiple images. This is only used by `GIF`, `ICO` and `TIFF` handlers. The default value (-1) means “choose the default image” and is interpreted as the first image (index=0) by the `GIF` and `TIFF` handler and as the largest and most colourful one by the `ICO` handler.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise. If the optional index parameter is out of range, `False` is returned and a call to [`wx.LogError`](wx.functions.html#wx.LogError "wx.LogError") takes place.





Note


Depending on how wxWidgets has been configured, not all formats may be available.




Note


You can use [`GetOptionInt`](#wx.Image.GetOptionInt "wx.Image.GetOptionInt") to get the hotspot when loading cursor files:



```
hotspot_x = image.GetOptionInt(wx.IMAGE_OPTION_CUR_HOTSPOT_X)
hotspot_y = image.GetOptionInt(wx.IMAGE_OPTION_CUR_HOTSPOT_Y)

```




See also


[`SaveFile`](#wx.Image.SaveFile "wx.Image.SaveFile")





---

  



**LoadFile** *(self, name, type=BITMAP\_TYPE\_ANY, index=-1)*


Loads an image from a file.


If no handler type is provided, the library will try to autodetect the format.



Parameters
* **name** (*string*) – Name of the file from which to load the image.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – See the description in the [`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") overload.
* **index** (*int*) – See the description in the [`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") overload.



Return type
*bool*






---

  



**LoadFile** *(self, name, mimetype, index=-1)*


Loads an image from a file.


If no handler type is provided, the library will try to autodetect the format.



Parameters
* **name** (*string*) – Name of the file from which to load the image.
* **mimetype** (*string*) – MIME type string (for example ‘image/jpeg’)
* **index** (*int*) – See the description in the [`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") overload.



Return type
*bool*






---

  



**LoadFile** *(self, stream, mimetype, index=-1)*


Loads an image from an input stream.



Parameters
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream from which to load the image. Currently, the stream must support seeking.
* **mimetype** (*string*) – MIME type string (for example ‘image/jpeg’)
* **index** (*int*) – See the description in the [`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") overload.



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Mirror(self, horizontally: bool=True) -> 'Image':
        """ 

`Mirror`(*self*, *horizontally=True*)[¶](#wx.Image.Mirror "Permalink to this definition")
Returns a mirrored copy of the image.


The parameter *horizontally* indicates the orientation.



Parameters
**horizontally** (*bool*) – 



Return type
 [wx.Image](#wx-image)






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Paste(self, image, x, y, alphaBlend=IMAGE_ALPHA_BLEND_OVER) -> None:
        """ 

`Paste`(*self*, *image*, *x*, *y*, *alphaBlend=IMAGE\_ALPHA\_BLEND\_OVER*)[¶](#wx.Image.Paste "Permalink to this definition")
Copy the data of the given *image* to the specified position in this image.


Takes care of the mask colour and out of bounds problems.



Parameters
* **image** ([*wx.Image*](#wx.Image "wx.Image")) – The image containing the data to copy, must be valid.
* **x** (*int*) – The horizontal position of the position to copy the data to.
* **y** (*int*) – The vertical position of the position to copy the data to.
* **alphaBlend** ([*ImageAlphaBlendMode*](wx.ImageAlphaBlendMode.enumeration.html "ImageAlphaBlendMode")) – This parameter (new in 3.1.5) determines whether the alpha values of the original image replace (default) or are composed with the alpha channel of this image. Notice that alpha blending overrides the mask handling.






            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def RGBtoHSV(rgb: RGBValue) -> 'HSVValue':
        """ 

*static* `RGBtoHSV`(*rgb*)[¶](#wx.Image.RGBtoHSV "Permalink to this definition")
Converts a color in `RGB` color space to `HSV` color space.



Parameters
**rgb** ([*RGBValue*](wx.Image.RGBValue.html#wx.Image.RGBValue "wx.Image.RGBValue")) – 



Return type
[`HSVValue`](wx.Image.HSVValue.html#wx.Image.HSVValue "wx.Image.HSVValue")






            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def RemoveHandler(name: str) -> bool:
        """ 

*static* `RemoveHandler`(*name*)[¶](#wx.Image.RemoveHandler "Permalink to this definition")
Finds the handler with the given name, and removes it.


The handler is also deleted.



Parameters
**name** (*string*) – The handler name.



Return type
*bool*



Returns
`True` if the handler was found and removed, `False` otherwise.





See also


 [wx.ImageHandler](wx.ImageHandler.html#wx-imagehandler)





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Replace(self, r1, g1, b1, r2, g2, b2) -> None:
        """ 

`Replace`(*self*, *r1*, *g1*, *b1*, *r2*, *g2*, *b2*)[¶](#wx.Image.Replace "Permalink to this definition")
Replaces the colour specified by *r1*,g1,b1 by the colour *r2*,g2,b2.



Parameters
* **r1** (*int*) –
* **g1** (*int*) –
* **b1** (*int*) –
* **r2** (*int*) –
* **g2** (*int*) –
* **b2** (*int*) –






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Rescale(self, width, height, quality=IMAGE_QUALITY_NORMAL) -> 'Image':
        """ 

`Rescale`(*self*, *width*, *height*, *quality=IMAGE\_QUALITY\_NORMAL*)[¶](#wx.Image.Rescale "Permalink to this definition")
Changes the size of the image in-place by scaling it: after a call to this function,the image will have the given width and height.


For a description of the *quality* parameter, see the [`Scale`](#wx.Image.Scale "wx.Image.Scale") function. Returns the (modified) image itself.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **quality** ([*ImageResizeQuality*](wx.ImageResizeQuality.enumeration.html "ImageResizeQuality")) –



Return type
 [wx.Image](#wx-image)





See also


[`Scale`](#wx.Image.Scale "wx.Image.Scale")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Resize(self, size, pos, red=-1, green=-1, blue=-1) -> 'Image':
        """ 

`Resize`(*self*, *size*, *pos*, *red=-1*, *green=-1*, *blue=-1*)[¶](#wx.Image.Resize "Permalink to this definition")
Changes the size of the image in-place without scaling it by adding either a border with the given colour or cropping as necessary.


The image is pasted into a new image with the given *size* and background colour at the position *pos* relative to the upper left of the new image.


If *red* = green = blue = -1 then use either the current mask colour if set or find, use, and set a suitable mask colour for any newly exposed areas.



Parameters
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **red** (*int*) –
* **green** (*int*) –
* **blue** (*int*) –



Return type
 [wx.Image](#wx-image)



Returns
The (modified) image itself.





See also


 [wx.Size](wx.Size.html#wx-size)





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Rotate(self, angle, rotationCentre, interpolating=True, offsetAfterRotation=None) -> 'Image':
        """ 

`Rotate`(*self*, *angle*, *rotationCentre*, *interpolating=True*, *offsetAfterRotation=None*)[¶](#wx.Image.Rotate "Permalink to this definition")
Rotates the image about the given point, by *angle* radians.


Passing `True` to *interpolating* results in better image quality, but is slower.


If the image has a mask, then the mask colour is used for the uncovered pixels in the rotated image background. Else, black (rgb 0, 0, 0) will be used.


Returns the rotated image, leaving this image intact.



Parameters
* **angle** (*float*) –
* **rotationCentre** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **interpolating** (*bool*) –
* **offsetAfterRotation** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –



Return type
 [wx.Image](#wx-image)






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Rotate180(self) -> 'Image':
        """ 

`Rotate180`(*self*)[¶](#wx.Image.Rotate180 "Permalink to this definition")
Returns a copy of the image rotated by 180 degrees.



Return type
 [wx.Image](#wx-image)





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Rotate90(self, clockwise: bool=True) -> 'Image':
        """ 

`Rotate90`(*self*, *clockwise=True*)[¶](#wx.Image.Rotate90 "Permalink to this definition")
Returns a copy of the image rotated 90 degrees in the direction indicated by *clockwise*.



Parameters
**clockwise** (*bool*) – 



Return type
 [wx.Image](#wx-image)






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def RotateHue(self, angle: float) -> None:
        """ 

`RotateHue`(*self*, *angle*)[¶](#wx.Image.RotateHue "Permalink to this definition")
Rotates the hue of each pixel in the image by *angle*, which is a float in the range [-1.0..+1.0], where -1.0 corresponds to -360 degrees and +1.0 corresponds to +360 degrees.



Parameters
**angle** (*float*) – 






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SaveFile(self, *args, **kw) -> bool:
        """ 

`SaveFile`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.SaveFile "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SaveFile** *(self, stream, mimetype)*


Saves an image in the given stream.



Parameters
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream to save the image to.
* **mimetype** (*string*) – MIME type.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





Note


Depending on how wxWidgets has been configured, not all formats may be available.




Note


You can use [`SetOption`](#wx.Image.SetOption "wx.Image.SetOption") to set the hotspot when saving an image into a cursor file (default hotspot is in the centre of the image):



```
image.SetOption(wx.IMAGE_OPTION_CUR_HOTSPOT_X, hotspotX)
image.SetOption(wx.IMAGE_OPTION_CUR_HOTSPOT_Y, hotspotY)

```




See also


[`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile")





---

  



**SaveFile** *(self, name, type)*


Saves an image in the named file.



Parameters
* **name** (*string*) – Name of the file to save the image to.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – Currently these types can be used:

	+ `wx.BITMAP_TYPE_BMP`: Save a `BMP` image file.
	+ `wx.BITMAP_TYPE_JPEG`: Save a `JPEG` image file.
	+ `wx.BITMAP_TYPE_PNG`: Save a `PNG` image file.
	+ `wx.BITMAP_TYPE_PCX`: Save a `PCX` image file (tries to save as 8-bit if possible, falls back to 24-bit otherwise).
	+ `wx.BITMAP_TYPE_PNM`: Save a `PNM` image file (as raw `RGB` always).
	+ `wx.BITMAP_TYPE_TIFF`: Save a `TIFF` image file.
	+ `wx.BITMAP_TYPE_XPM`: Save a XPM image file.
	+ `wx.BITMAP_TYPE_ICO`: Save a Windows icon file (`ICO`). The size may be up to 255 wide by 127 high. A single image is saved in 8 colors at the size supplied.
	+ `wx.BITMAP_TYPE_CUR`: Save a Windows cursor file (`CUR`).



Return type
*bool*






---

  



**SaveFile** *(self, name, mimetype)*


Saves an image in the named file.



Parameters
* **name** (*string*) – Name of the file to save the image to.
* **mimetype** (*string*) – MIME type.



Return type
*bool*






---

  



**SaveFile** *(self, name)*


Saves an image in the named file.


File type is determined from the extension of the file name. Note that this function may fail if the extension is not recognized! You can use one of the forms above to save images to files with non-standard extensions.



Parameters
**name** (*string*) – Name of the file to save the image to.



Return type
*bool*






---

  



**SaveFile** *(self, stream, type)*


Saves an image in the given stream.



Parameters
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream to save the image to.
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – MIME type.



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Scale(self, width, height, quality=IMAGE_QUALITY_NORMAL) -> 'Image':
        """ 

`Scale`(*self*, *width*, *height*, *quality=IMAGE\_QUALITY\_NORMAL*)[¶](#wx.Image.Scale "Permalink to this definition")
Returns a scaled version of the image.


This is also useful for scaling bitmaps in general as the only other way to scale bitmaps is to blit a  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc) into another  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc).


The parameter *quality* determines what method to use for resampling the image, see ImageResizeQuality documentation.


It should be noted that although using `IMAGE_QUALITY_HIGH` produces much nicer looking results it is a slower method. Downsampling will use the box averaging method which seems to operate very fast. If you are upsampling larger images using this method you will most likely notice that it is a bit slower and in extreme cases it will be quite substantially slower as the bicubic algorithm has to process a lot of data.


It should also be noted that the high quality scaling may not work as expected when using a single mask colour for transparency, as the scaling will blur the image and will therefore remove the mask partially. Using the alpha channel will work.


Example:



```
# get the bitmap from somewhere
bmp = wx.Bitmap('my_png.png', wx.BITMAP_TYPE_PNG)

# rescale it to have size of 32*32
if bmp.GetWidth() != 32 or bmp.GetHeight() != 32:

    image = bmp.ConvertToImage()
    bmp = wx.Bitmap(image.Scale(32, 32))

    # another possibility:
    image.Rescale(32, 32)
    bmp = wx.Bitmap(image)

```



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **quality** ([*ImageResizeQuality*](wx.ImageResizeQuality.enumeration.html "ImageResizeQuality")) –



Return type
 [wx.Image](#wx-image)





Note


The algorithm used for the default (normal) quality value doesn’t work with images larger than 65536 (2^16) pixels in either dimension for 32-bit programs. For 64-bit programs the limit is 2^48 and so not relevant in practice.




See also


[`Rescale`](#wx.Image.Rescale "wx.Image.Rescale")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetAlpha(self, *args, **kw) -> None:
        """ 

`SetAlpha`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.SetAlpha "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetAlpha** *(self, x, y, alpha)*


Sets the alpha value for the given pixel.


This function should only be called if the image has alpha channel data, use [`HasAlpha`](#wx.Image.HasAlpha "wx.Image.HasAlpha") to check for this.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **alpha** (*int*) –






---

  



**SetAlpha** *(self, alpha)*


This function is similar to [`SetData`](#wx.Image.SetData "wx.Image.SetData") and has similar restrictions.


The pointer passed to it may however be `None` in which case the function will allocate the alpha array internally – this is useful to add alpha channel data to an image which doesn’t have any.


If the pointer is not `None`, it must have one byte for each image pixel and be allocated with malloc().  [wx.Image](#wx-image) takes ownership of the pointer and will free it unless *static\_data* parameter is set to `True` – in this case the caller should do it.




---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetAlphaBuffer(self, alpha) -> None:
        """ 

`SetAlphaBuffer`(*self*, *alpha*)[¶](#wx.Image.SetAlphaBuffer "Permalink to this definition")
Sets the internal image alpha pointer to point at a Python buffer
object. This can save making an extra copy of the data but you must
ensure that the buffer object lives lives at least as long as the
`Image` does.




            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetData(self, *args, **kw) -> None:
        """ 

`SetData`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.SetData "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetData** *(self, data)*


Sets the image data without performing checks.


The data given must have the size (widthheight3) or results will be unexpected. Don’t use this method if you aren’t sure you know what you are doing.


The data must have been allocated with `malloc()` , **NOT** with `operator` new.


If *static\_data* is `False`, after this call the pointer to the data is owned by the  [wx.Image](#wx-image) object, that will be responsible for deleting it. Do not pass to this function a pointer obtained through [`GetData`](#wx.Image.GetData "wx.Image.GetData") .




---

  



**SetData** *(self, data, new\_width, new\_height)*




---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetDataBuffer(self, *args, **kw) -> None:
        """ 

`SetDataBuffer`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.SetDataBuffer "Permalink to this definition")

> Sets the internal image data pointer to point at a Python buffer
> object. This can save making an extra copy of the data but you must
> ensure that the buffer object lives lives at least as long as the
> `Image` does.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetDataBuffer** *(self, data)*




---

  



**SetDataBuffer** *(self, data, new\_width, new\_height)*




---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    @staticmethod
    def SetDefaultLoadFlags(flags: int) -> None:
        """ 

*static* `SetDefaultLoadFlags`(*flags*)[¶](#wx.Image.SetDefaultLoadFlags "Permalink to this definition")
Sets the default value for the flags used for loading image files.


This method changes the global value of the flags used for all the subsequently created  [wx.Image](#wx-image) objects by default. It doesn’t affect the already existing objects.


By default, the global flags include `Load_Verbose` flag value.



Parameters
**flags** (*int*) – 





New in version 4.1/wxWidgets-3.1.0.




See also


[`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") , [`SetLoadFlags`](#wx.Image.SetLoadFlags "wx.Image.SetLoadFlags") , [`GetDefaultLoadFlags`](#wx.Image.GetDefaultLoadFlags "wx.Image.GetDefaultLoadFlags")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetLoadFlags(self, flags: int) -> None:
        """ 

`SetLoadFlags`(*self*, *flags*)[¶](#wx.Image.SetLoadFlags "Permalink to this definition")
Sets the flags used for loading image files by this object.


The flags will affect any future calls to [`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") for this object. To change the flags for all image objects, call [`SetDefaultLoadFlags`](#wx.Image.SetDefaultLoadFlags "wx.Image.SetDefaultLoadFlags") before creating any of them.


Currently the only defined flag is `Load_Verbose` which determines if the non-fatal (i.e. not preventing the file from being loaded completely) problems should result in the calls to [`wx.LogWarning`](wx.functions.html#wx.LogWarning "wx.LogWarning") function. It is recommended to customize handling of these warnings by e.g. defining a custom log target (see [Logging Overview](log_classes_overview.html#logging-overview)), but if such warnings should be completely suppressed, clearing this flag provides a simple way to do it, for example:



```
image = wx.Image()
image.SetLoadFlags(image.GetLoadFlags() & ~wx.Image.Load_Verbose)
image.LoadFile(...)

```



Parameters
**flags** (*int*) – 





New in version 4.1/wxWidgets-3.1.0.




See also


[`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") , [`SetLoadFlags`](#wx.Image.SetLoadFlags "wx.Image.SetLoadFlags") , [`GetLoadFlags`](#wx.Image.GetLoadFlags "wx.Image.GetLoadFlags")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetMask(self, hasMask: bool=True) -> None:
        """ 

`SetMask`(*self*, *hasMask=True*)[¶](#wx.Image.SetMask "Permalink to this definition")
Specifies whether there is a mask or not.


The area of the mask is determined by the current mask colour.



Parameters
**hasMask** (*bool*) – 






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetMaskColour(self, red, green, blue) -> None:
        """ 

`SetMaskColour`(*self*, *red*, *green*, *blue*)[¶](#wx.Image.SetMaskColour "Permalink to this definition")
Sets the mask colour for this image (and tells the image to use the mask).



Parameters
* **red** (*int*) –
* **green** (*int*) –
* **blue** (*int*) –






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetMaskFromImage(self, mask, mr, mg, mb) -> bool:
        """ 

`SetMaskFromImage`(*self*, *mask*, *mr*, *mg*, *mb*)[¶](#wx.Image.SetMaskFromImage "Permalink to this definition")
Sets image’s mask so that the pixels that have `RGB` value of mr,mg,mb in mask will be masked in the image.


This is done by first finding an unused colour in the image, setting this colour as the mask colour and then using this colour to draw all pixels in the image who corresponding pixel in mask has given `RGB` value.


The parameter *mask* is the mask image to extract mask shape from. It must have the same dimensions as the image.


The parameters *mr*, *mg*, *mb* are the `RGB` values of the pixels in mask that will be used to create the mask.



Parameters
* **mask** ([*wx.Image*](#wx.Image "wx.Image")) –
* **mr** (*int*) –
* **mg** (*int*) –
* **mb** (*int*) –



Return type
*bool*



Returns
Returns `False` if mask does not have same dimensions as the image or if there is no unused colour left. Returns `True` if the mask was successfully applied.





Note


Note that this method involves computing the histogram, which is a computationally intensive operation.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetOption(self, *args, **kw) -> None:
        """ 

`SetOption`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.SetOption "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetOption** *(self, name, value)*


Sets a user-defined option.


The function is case-insensitive to *name*.


For example, when saving as a `JPEG` file, the option **quality** is used, which is a number between 0 and 100 (0 is terrible, 100 is very good).


The lists of the currently supported options are in [`GetOption`](#wx.Image.GetOption "wx.Image.GetOption") and [`GetOptionInt`](#wx.Image.GetOptionInt "wx.Image.GetOptionInt") function docs.



Parameters
* **name** (*string*) –
* **value** (*string*) –





See also


[`GetOption`](#wx.Image.GetOption "wx.Image.GetOption") , [`GetOptionInt`](#wx.Image.GetOptionInt "wx.Image.GetOptionInt") , [`HasOption`](#wx.Image.HasOption "wx.Image.HasOption")





---

  



**SetOption** *(self, name, value)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **name** (*string*) –
* **value** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetPalette(self, palette: 'Palette') -> None:
        """ 

`SetPalette`(*self*, *palette*)[¶](#wx.Image.SetPalette "Permalink to this definition")
Associates a palette with the image.


The palette may be used when converting  [wx.Image](#wx-image) to  [wx.Bitmap](wx.Bitmap.html#wx-bitmap) (MSW only at present) or in file save operations (none as yet).



Parameters
**palette** ([*wx.Palette*](wx.Palette.html#wx.Palette "wx.Palette")) – 






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetRGB(self, *args, **kw) -> None:
        """ 

`SetRGB`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Image.SetRGB "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetRGB** *(self, x, y, r, g, b)*


Set the color of the pixel at the given x and y coordinate.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **r** (*int*) –
* **g** (*int*) –
* **b** (*int*) –






---

  



**SetRGB** *(self, rect, red, green, blue)*


Sets the colour of the pixels within the given rectangle.


This routine performs bounds-checks for the coordinate so it can be considered a safe way to manipulate the data.



Parameters
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **red** (*int*) –
* **green** (*int*) –
* **blue** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def SetType(self, type: BitmapType) -> None:
        """ 

`SetType`(*self*, *type*)[¶](#wx.Image.SetType "Permalink to this definition")
Set the type of image returned by [`GetType`](#wx.Image.GetType "wx.Image.GetType") .


This method is mostly used internally by the library but can also be called from the user code if the image was created from data in the given bitmap format without using [`LoadFile`](#wx.Image.LoadFile "wx.Image.LoadFile") (which would set the type correctly automatically).


Notice that the image must be created before this function is called.



Parameters
**type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – One of bitmap type constants, `BITMAP_TYPE_INVALID` is a valid value for it and can be used to reset the bitmap type to default but `BITMAP_TYPE_MAX` is not allowed here.





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def Size(self, size, pos, red=-1, green=-1, blue=-1) -> 'Image':
        """ 

`Size`(*self*, *size*, *pos*, *red=-1*, *green=-1*, *blue=-1*)[¶](#wx.Image.Size "Permalink to this definition")
Returns a resized version of this image without scaling it by adding either a border with the given colour or cropping as necessary.


The image is pasted into a new image with the given *size* and background colour at the position *pos* relative to the upper left of the new image.


If *red* = green = blue = -1 then the areas of the larger image not covered by this image are made transparent by filling them with the image mask colour (which will be allocated automatically if it isn’t currently set).


Otherwise, the areas will be filled with the colour with the specified `RGB` components.



Parameters
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **red** (*int*) –
* **green** (*int*) –
* **blue** (*int*) –



Return type
 [wx.Image](#wx-image)





See also


[`Resize`](#wx.Image.Resize "wx.Image.Resize")





            Source: https://docs.wxpython.org/wx.Image.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Image.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Image.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Image.html
        """

    Height: int  # `Height`[¶](#wx.Image.Height "Permalink to this definition")See [`GetHeight`](#wx.Image.GetHeight "wx.Image.GetHeight")
    MaskBlue: int  # `MaskBlue`[¶](#wx.Image.MaskBlue "Permalink to this definition")See [`GetMaskBlue`](#wx.Image.GetMaskBlue "wx.Image.GetMaskBlue")
    MaskGreen: int  # `MaskGreen`[¶](#wx.Image.MaskGreen "Permalink to this definition")See [`GetMaskGreen`](#wx.Image.GetMaskGreen "wx.Image.GetMaskGreen")
    MaskRed: int  # `MaskRed`[¶](#wx.Image.MaskRed "Permalink to this definition")See [`GetMaskRed`](#wx.Image.GetMaskRed "wx.Image.GetMaskRed")
    Type: 'BitmapType'  # `Type`[¶](#wx.Image.Type "Permalink to this definition")See [`GetType`](#wx.Image.GetType "wx.Image.GetType") and [`SetType`](#wx.Image.SetType "wx.Image.SetType")
    Width: int  # `Width`[¶](#wx.Image.Width "Permalink to this definition")See [`GetWidth`](#wx.Image.GetWidth "wx.Image.GetWidth")



BITMAP_TYPE_BMP: int

BITMAP_TYPE_GIF: int

BITMAP_TYPE_JPEG: int

BITMAP_TYPE_PNG: int

BITMAP_TYPE_PCX: int

BITMAP_TYPE_PNM: int

BITMAP_TYPE_TIFF: int

BITMAP_TYPE_TGA: int

BITMAP_TYPE_XPM: int

BITMAP_TYPE_ICO: int

BITMAP_TYPE_CUR: int

BITMAP_TYPE_ANI: int

BITMAP_TYPE_ANY: int

_Image: TypeAlias = Image

class ImageDataObject(CustomDataObject):
    """ **Possible constructors**:



```
ImageDataObject(image=NullImage)

```


ImageDataObject is a specialization of DataObject for image data.


  


        Source: https://docs.wxpython.org/wx.ImageDataObject.html
    """
    def __init__(self, image: 'Image'=NullImage) -> None:
        """ 

`__init__`(*self*, *image=NullImage*)[¶](#wx.ImageDataObject.__init__ "Permalink to this definition")
Constructor, optionally passing an image (otherwise use [`SetImage`](#wx.ImageDataObject.SetImage "wx.ImageDataObject.SetImage") later).



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 






            Source: https://docs.wxpython.org/wx.ImageDataObject.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.ImageDataObject.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.ImageDataObject.html
        """

    def GetImage(self) -> 'Image':
        """ 

`GetImage`(*self*)[¶](#wx.ImageDataObject.GetImage "Permalink to this definition")
Returns the image associated with the data object.



Return type
 [wx.Image](wx.Image.html#wx-image)






            Source: https://docs.wxpython.org/wx.ImageDataObject.html
        """

    def SetData(self, format, buf) -> bool:
        """ 

`SetData`(*self*, *format*, *buf*)[¶](#wx.ImageDataObject.SetData "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ImageDataObject.html
        """

    def SetImage(self, image: 'Image') -> None:
        """ 

`SetImage`(*self*, *image*)[¶](#wx.ImageDataObject.SetImage "Permalink to this definition")
Sets the image stored by the data object.



Parameters
**image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – 






            Source: https://docs.wxpython.org/wx.ImageDataObject.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.ImageDataObject.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.ImageDataObject.GetAllFormats "wx.ImageDataObject.GetAllFormats")
    Image: '_Image'  # `Image`[¶](#wx.ImageDataObject.Image "Permalink to this definition")See [`GetImage`](#wx.ImageDataObject.GetImage "wx.ImageDataObject.GetImage") and [`SetImage`](#wx.ImageDataObject.SetImage "wx.ImageDataObject.SetImage")



class ImageHandler(Object):
    """ **Possible constructors**:



```
ImageHandler()

```


This is the base class for implementing image file loading/saving, and
image creation from data.


  


        Source: https://docs.wxpython.org/wx.ImageHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ImageHandler.__init__ "Permalink to this definition")
Default constructor.


In your own default constructor, initialise the members m\_name, m\_extension and m\_type.




            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def CanRead(self, *args, **kw) -> bool:
        """ 

`CanRead`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ImageHandler.CanRead "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CanRead** *(self, stream)*


Returns `True` if this handler supports the image format contained in the given stream.


This function doesn’t modify the current stream position (because it restores the original position before returning; this however requires the stream to be seekable; see [`wx.StreamBase.IsSeekable`](wx.StreamBase.html#wx.StreamBase.IsSeekable "wx.StreamBase.IsSeekable") ).



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






---

  



**CanRead** *(self, filename)*


Returns `True` if this handler supports the image format contained in the file with the given name.


This function doesn’t modify the current stream position (because it restores the original position before returning; this however requires the stream to be seekable; see [`wx.StreamBase.IsSeekable`](wx.StreamBase.html#wx.StreamBase.IsSeekable "wx.StreamBase.IsSeekable") ).



Parameters
**filename** (*string*) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.ImageHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def DoGetImageCount(self, stream: 'InputStream') -> int:
        """ 

`DoGetImageCount`(*self*, *stream*)[¶](#wx.ImageHandler.DoGetImageCount "Permalink to this definition")
Called to get the number of images available in a multi-image file type, if supported.


`NOTE`: this function is allowed to change the current stream position since [`GetImageCount`](#wx.ImageHandler.GetImageCount "wx.ImageHandler.GetImageCount") will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def GetAltExtensions(self) -> list[str]:
        """ 

`GetAltExtensions`(*self*)[¶](#wx.ImageHandler.GetAltExtensions "Permalink to this definition")
Returns the other file extensions associated with this handler.


The preferred extension for this handler is returned by [`GetExtension`](#wx.ImageHandler.GetExtension "wx.ImageHandler.GetExtension") .



Return type
*list of strings*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def GetExtension(self) -> str:
        """ 

`GetExtension`(*self*)[¶](#wx.ImageHandler.GetExtension "Permalink to this definition")
Gets the preferred file extension associated with this handler.



Return type
`string`





See also


[`GetAltExtensions`](#wx.ImageHandler.GetAltExtensions "wx.ImageHandler.GetAltExtensions")





            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def GetImageCount(self, stream: 'InputStream') -> int:
        """ 

`GetImageCount`(*self*, *stream*)[¶](#wx.ImageHandler.GetImageCount "Permalink to this definition")
If the image file contains more than one image and the image handler is capable of retrieving these individually, this function will return the number of available images.



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data. This function doesn’t modify the current stream position (because it restores the original position before returning; this however requires the stream to be seekable; see [`wx.StreamBase.IsSeekable`](wx.StreamBase.html#wx.StreamBase.IsSeekable "wx.StreamBase.IsSeekable") ).



Return type
*int*



Returns
Number of available images. For most image handlers, this is 1 (exceptions are `TIFF` and `ICO` formats as well as animated GIFs for which this function returns the number of frames in the animation).






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def GetMimeType(self) -> str:
        """ 

`GetMimeType`(*self*)[¶](#wx.ImageHandler.GetMimeType "Permalink to this definition")
Gets the MIME type associated with this handler.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.ImageHandler.GetName "Permalink to this definition")
Gets the name of this handler.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def GetType(self) -> 'BitmapType':
        """ 

`GetType`(*self*)[¶](#wx.ImageHandler.GetType "Permalink to this definition")
Gets the image type associated with this handler.



Return type
 [wx.BitmapType](wx.BitmapType.enumeration.html#wx-bitmaptype)






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.ImageHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.ImageHandler.SaveFile "wx.ImageHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.ImageHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.ImageHandler.LoadFile "wx.ImageHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def SetAltExtensions(self, extensions: list[str]) -> None:
        """ 

`SetAltExtensions`(*self*, *extensions*)[¶](#wx.ImageHandler.SetAltExtensions "Permalink to this definition")
Sets the alternative file extensions associated with this handler.



Parameters
**extensions** (*list of strings*) – Array of file extensions.





New in version 2.9.0.




See also


[`SetExtension`](#wx.ImageHandler.SetExtension "wx.ImageHandler.SetExtension")





            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def SetExtension(self, extension: str) -> None:
        """ 

`SetExtension`(*self*, *extension*)[¶](#wx.ImageHandler.SetExtension "Permalink to this definition")
Sets the preferred file extension associated with this handler.



Parameters
**extension** (*string*) – File extension without leading dot.





See also


[`SetAltExtensions`](#wx.ImageHandler.SetAltExtensions "wx.ImageHandler.SetAltExtensions")





            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def SetMimeType(self, mimetype: str) -> None:
        """ 

`SetMimeType`(*self*, *mimetype*)[¶](#wx.ImageHandler.SetMimeType "Permalink to this definition")
Sets the handler MIME type.



Parameters
**mimetype** (*string*) – Handler MIME type.






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def SetName(self, name: str) -> None:
        """ 

`SetName`(*self*, *name*)[¶](#wx.ImageHandler.SetName "Permalink to this definition")
Sets the handler name.



Parameters
**name** (*string*) – Handler name.






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    def SetType(self, type: BitmapType) -> None:
        """ 

`SetType`(*self*, *type*)[¶](#wx.ImageHandler.SetType "Permalink to this definition")
Sets the bitmap type for the handler.



Parameters
**type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) – The bitmap type.






            Source: https://docs.wxpython.org/wx.ImageHandler.html
        """

    AltExtensions: list[str]  # `AltExtensions`[¶](#wx.ImageHandler.AltExtensions "Permalink to this definition")See [`GetAltExtensions`](#wx.ImageHandler.GetAltExtensions "wx.ImageHandler.GetAltExtensions") and [`SetAltExtensions`](#wx.ImageHandler.SetAltExtensions "wx.ImageHandler.SetAltExtensions")
    Extension: str  # `Extension`[¶](#wx.ImageHandler.Extension "Permalink to this definition")See [`GetExtension`](#wx.ImageHandler.GetExtension "wx.ImageHandler.GetExtension") and [`SetExtension`](#wx.ImageHandler.SetExtension "wx.ImageHandler.SetExtension")
    MimeType: str  # `MimeType`[¶](#wx.ImageHandler.MimeType "Permalink to this definition")See [`GetMimeType`](#wx.ImageHandler.GetMimeType "wx.ImageHandler.GetMimeType") and [`SetMimeType`](#wx.ImageHandler.SetMimeType "wx.ImageHandler.SetMimeType")
    Name: str  # `Name`[¶](#wx.ImageHandler.Name "Permalink to this definition")See [`GetName`](#wx.ImageHandler.GetName "wx.ImageHandler.GetName") and [`SetName`](#wx.ImageHandler.SetName "wx.ImageHandler.SetName")
    Type: 'BitmapType'  # `Type`[¶](#wx.ImageHandler.Type "Permalink to this definition")See [`GetType`](#wx.ImageHandler.GetType "wx.ImageHandler.GetType") and [`SetType`](#wx.ImageHandler.SetType "wx.ImageHandler.SetType")



class ImageHistogram:
    """ **Possible constructors**:



```
ImageHistogram()

```


  


        Source: https://docs.wxpython.org/wx.ImageHistogram.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ImageHistogram.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ImageHistogram.html
        """

    def FindFirstUnusedColour(self, startR=1, startG=0, startB=0) -> tuple:
        """ 

`FindFirstUnusedColour`(*self*, *startR=1*, *startG=0*, *startB=0*)[¶](#wx.ImageHistogram.FindFirstUnusedColour "Permalink to this definition")

Parameters
* **startR** (*int*) –
* **startG** (*int*) –
* **startB** (*int*) –



Return type
*tuple*



Returns
( *r*, *g*, *b* )






            Source: https://docs.wxpython.org/wx.ImageHistogram.html
        """

    @staticmethod
    def MakeKey(r, g, b) -> int:
        """ 

*static* `MakeKey`(*r*, *g*, *b*)[¶](#wx.ImageHistogram.MakeKey "Permalink to this definition")

Parameters
* **r** (*int*) –
* **g** (*int*) –
* **b** (*int*) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.ImageHistogram.html
        """



class ImageList(Object):
    """ **Possible constructors**:



```
ImageList()

ImageList(width, height, mask=True, initialCount=1)

```


A ImageList contains a list of images, which are stored in an
unspecified form.


  


        Source: https://docs.wxpython.org/wx.ImageList.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ImageList.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, width, height, mask=True, initialCount=1)*


Constructor specifying the image size, whether image masks should be created, and the initial size of the list.


Note that the size is specified in logical pixels.



Parameters
* **width** (*int*) – Width of the images in the list.
* **height** (*int*) – Height of the images in the list.
* **mask** (*bool*) – If `True`, all images will have masks, with the mask being created from the light grey pixels if not specified otherwise, i.e. if the image doesn’t have neither alpha channel nor mask and no mask is explicitly specified when adding it. Note that if an image does have alpha channel or mask, it will always be used, whether this parameter is `True` or `False`.
* **initialCount** (*int*) – The initial size of the list.





See also


[`Create`](#wx.ImageList.Create "wx.ImageList.Create")





---

  





            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def Add(self, *args, **kw) -> int:
        """ 

`Add`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ImageList.Add "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Add** *(self, bitmap, mask=NullBitmap)*


Adds a new image or images using a bitmap and optional mask bitmap.


The logical size of the bitmap should be the same as the size specified when constructing  [wx.ImageList](#wx-imagelist). If the logical width of the bitmap is greater than the image list width, bitmap is split into smaller images of the required width.



Parameters
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – Bitmap representing the opaque areas of the image.
* **mask** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – Monochrome mask bitmap, representing the transparent areas of the image.



Return type
*int*



Returns
The new zero-based image index.






---

  



**Add** *(self, bitmap, maskColour)*


Adds a new image or images using a bitmap and mask colour.


The logical size of the bitmap should be the same as the size specified when constructing  [wx.ImageList](#wx-imagelist). If the logical width of the bitmap is greater than the image list width, bitmap is split into smaller images of the required width.



Parameters
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – Bitmap representing the opaque areas of the image.
* **maskColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – Colour indicating which parts of the image are transparent.



Return type
*int*



Returns
The new zero-based image index.






---

  



**Add** *(self, icon)*


Adds a new image using an icon.


The logical size of the icon should be the same as the size specified when constructing  [wx.ImageList](#wx-imagelist).



Parameters
**icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – Icon to use as the image.



Return type
*int*



Returns
The new zero-based image index.





Availability


Only available for MSW, OSX.





---

  





            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def Create(self, width, height, mask=True, initialCount=1) -> bool:
        """ 

`Create`(*self*, *width*, *height*, *mask=True*, *initialCount=1*)[¶](#wx.ImageList.Create "Permalink to this definition")
Initializes the list.


See  [wx.ImageList](#wx-imagelist) for details.


This function can be called only once after creating the object using its default constructor or after calling [`Destroy`](#wx.ImageList.Destroy "wx.ImageList.Destroy") .



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **mask** (*bool*) –
* **initialCount** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def Destroy(self) -> None:
        """ 

`Destroy`(*self*)[¶](#wx.ImageList.Destroy "Permalink to this definition")
Destroys the current list.


This function resets the object to its initial state and does more than just [`RemoveAll`](#wx.ImageList.RemoveAll "wx.ImageList.RemoveAll") in the native wxMSW version.


After calling it, [`Create`](#wx.ImageList.Create "wx.ImageList.Create") may be called again to recreate the image list, e.g. using a different size.



New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def Draw(self, index, dc, x, y, flags=IMAGELIST_DRAW_NORMAL, solidBackground=False) -> bool:
        """ 

`Draw`(*self*, *index*, *dc*, *x*, *y*, *flags=IMAGELIST\_DRAW\_NORMAL*, *solidBackground=False*)[¶](#wx.ImageList.Draw "Permalink to this definition")
Draws a specified image onto a device context.



Parameters
* **index** (*int*) – Image index, starting from zero.
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – Device context to draw on.
* **x** (*int*) – X position on the device context.
* **y** (*int*) – Y position on the device context.
* **flags** (*int*) – How to draw the image. A bitlist of a selection of the following:

	+ `wx.IMAGELIST_DRAW_NORMAL`: Draw the image normally.
	+ `wx.IMAGELIST_DRAW_TRANSPARENT`: Draw the image with transparency.
	+ `wx.IMAGELIST_DRAW_SELECTED`: Draw the image in selected state.
	+ `wx.IMAGELIST_DRAW_FOCUSED`: Draw the image in a focused state.
* **solidBackground** (*bool*) – For optimisation - drawing can be faster if the function is told that the background is solid.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def GetBitmap(self, index: int) -> 'Bitmap':
        """ 

`GetBitmap`(*self*, *index*)[¶](#wx.ImageList.GetBitmap "Permalink to this definition")
Returns the bitmap corresponding to the given index.



Parameters
**index** (*int*) – 



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def GetIcon(self, index: int) -> 'Icon':
        """ 

`GetIcon`(*self*, *index*)[¶](#wx.ImageList.GetIcon "Permalink to this definition")
Returns the icon corresponding to the given index.



Parameters
**index** (*int*) – 



Return type
 [wx.Icon](wx.Icon.html#wx-icon)






            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def GetImageCount(self) -> int:
        """ 

`GetImageCount`(*self*)[¶](#wx.ImageList.GetImageCount "Permalink to this definition")
Returns the number of images in the list.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def GetSize(self, *args, **kw) -> tuple:
        """ 

`GetSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ImageList.GetSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetSize** *(self, index)*


Retrieves the size of the images in the list.


Currently, the *index* parameter is ignored as all images in the list have the same size.



Parameters
**index** (*int*) – currently unused, should be 0



Return type
*tuple*



Returns
( *width*, *height* )






---

  



**GetSize** *(self)*


Retrieves the size of the image list as passed to [`Create`](#wx.ImageList.Create "wx.ImageList.Create") .



Return type
 [wx.Size](wx.Size.html#wx-size)



Returns
the size of the image list, which may be zero if the image list was not yet initialised.






---

  





            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def Remove(self, index: int) -> bool:
        """ 

`Remove`(*self*, *index*)[¶](#wx.ImageList.Remove "Permalink to this definition")
Removes the image at the given position.



Parameters
**index** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def RemoveAll(self) -> bool:
        """ 

`RemoveAll`(*self*)[¶](#wx.ImageList.RemoveAll "Permalink to this definition")
Removes all the images in the list.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    def Replace(self, *args, **kw) -> bool:
        """ 

`Replace`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ImageList.Replace "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Replace** *(self, index, bitmap, mask=NullBitmap)*


Replaces the existing image with the new image.



Parameters
* **index** (*int*) – The index of the bitmap to be replaced.
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – Bitmap representing the opaque areas of the image.
* **mask** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – Monochrome mask bitmap, representing the transparent areas of the image.



Return type
*bool*



Returns
`True` if the replacement was successful, `False` otherwise.





Note


The original bitmap or icon is not affected by the [`Replace`](#wx.ImageList.Replace "wx.ImageList.Replace") operation, and can be deleted afterwards.





---

  



**Replace** *(self, index, icon)*


Replaces the existing image with the new image.



Parameters
* **index** (*int*) – The index of the bitmap to be replaced.
* **icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – Icon to use as the image.



Return type
*bool*



Returns
`True` if the replacement was successful, `False` otherwise.





Note


The original bitmap or icon is not affected by the [`Replace`](#wx.ImageList.Replace "wx.ImageList.Replace") operation, and can be deleted afterwards.




Availability


Only available for MSW, OSX.





---

  





            Source: https://docs.wxpython.org/wx.ImageList.html
        """

    ImageCount: int  # `ImageCount`[¶](#wx.ImageList.ImageCount "Permalink to this definition")See [`GetImageCount`](#wx.ImageList.GetImageCount "wx.ImageList.GetImageCount")
    Size: tuple  # `Size`[¶](#wx.ImageList.Size "Permalink to this definition")See [`GetSize`](#wx.ImageList.GetSize "wx.ImageList.GetSize")



IMAGELIST_DRAW_NORMAL: int

IMAGELIST_DRAW_TRANSPARENT: int

IMAGELIST_DRAW_SELECTED: int

IMAGELIST_DRAW_FOCUSED: int

_Relationship: TypeAlias = Relationship

class IndividualLayoutConstraint(Object):
    """ **Possible constructors**:



```
IndividualLayoutConstraint()

```


  


        Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.IndividualLayoutConstraint.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def Above(self, sibling, margin=LAYOUT_DEFAULT_MARGIN) -> None:
        """ 

`Above`(*self*, *sibling*, *margin=LAYOUT\_DEFAULT\_MARGIN*)[¶](#wx.IndividualLayoutConstraint.Above "Permalink to this definition")

Parameters
* **sibling** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **margin** (*int*) –






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def Absolute(self, val: int) -> None:
        """ 

`Absolute`(*self*, *val*)[¶](#wx.IndividualLayoutConstraint.Absolute "Permalink to this definition")

Parameters
**val** (*int*) – 






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def AsIs(self) -> None:
        """ 

`AsIs`(*self*)[¶](#wx.IndividualLayoutConstraint.AsIs "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def Below(self, sibling, margin=LAYOUT_DEFAULT_MARGIN) -> None:
        """ 

`Below`(*self*, *sibling*, *margin=LAYOUT\_DEFAULT\_MARGIN*)[¶](#wx.IndividualLayoutConstraint.Below "Permalink to this definition")

Parameters
* **sibling** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **margin** (*int*) –






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetDone(self) -> bool:
        """ 

`GetDone`(*self*)[¶](#wx.IndividualLayoutConstraint.GetDone "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetEdge(self, which, thisWin, other) -> int:
        """ 

`GetEdge`(*self*, *which*, *thisWin*, *other*)[¶](#wx.IndividualLayoutConstraint.GetEdge "Permalink to this definition")

Parameters
* **which** ([*Edge*](wx.Edge.enumeration.html "Edge")) –
* **thisWin** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **other** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetMargin(self) -> int:
        """ 

`GetMargin`(*self*)[¶](#wx.IndividualLayoutConstraint.GetMargin "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetMyEdge(self) -> 'Edge':
        """ 

`GetMyEdge`(*self*)[¶](#wx.IndividualLayoutConstraint.GetMyEdge "Permalink to this definition")

Return type
 [wx.Edge](wx.Edge.enumeration.html#wx-edge)






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetOtherEdge(self) -> int:
        """ 

`GetOtherEdge`(*self*)[¶](#wx.IndividualLayoutConstraint.GetOtherEdge "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetOtherWindow(self) -> 'Window':
        """ 

`GetOtherWindow`(*self*)[¶](#wx.IndividualLayoutConstraint.GetOtherWindow "Permalink to this definition")

Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetPercent(self) -> int:
        """ 

`GetPercent`(*self*)[¶](#wx.IndividualLayoutConstraint.GetPercent "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetRelationship(self) -> 'Relationship':
        """ 

`GetRelationship`(*self*)[¶](#wx.IndividualLayoutConstraint.GetRelationship "Permalink to this definition")

Return type
 [wx.Relationship](wx.Relationship.enumeration.html#wx-relationship)






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.IndividualLayoutConstraint.GetValue "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def LeftOf(self, sibling, margin=LAYOUT_DEFAULT_MARGIN) -> None:
        """ 

`LeftOf`(*self*, *sibling*, *margin=LAYOUT\_DEFAULT\_MARGIN*)[¶](#wx.IndividualLayoutConstraint.LeftOf "Permalink to this definition")

Parameters
* **sibling** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **margin** (*int*) –






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def PercentOf(self, otherW, wh, per) -> None:
        """ 

`PercentOf`(*self*, *otherW*, *wh*, *per*)[¶](#wx.IndividualLayoutConstraint.PercentOf "Permalink to this definition")

Parameters
* **otherW** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **wh** ([*Edge*](wx.Edge.enumeration.html "Edge")) –
* **per** (*int*) –






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def ResetIfWin(self, otherW: 'Window') -> bool:
        """ 

`ResetIfWin`(*self*, *otherW*)[¶](#wx.IndividualLayoutConstraint.ResetIfWin "Permalink to this definition")

Parameters
**otherW** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def RightOf(self, sibling, margin=LAYOUT_DEFAULT_MARGIN) -> None:
        """ 

`RightOf`(*self*, *sibling*, *margin=LAYOUT\_DEFAULT\_MARGIN*)[¶](#wx.IndividualLayoutConstraint.RightOf "Permalink to this definition")

Parameters
* **sibling** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **margin** (*int*) –






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def SameAs(self, otherW, edge, margin=LAYOUT_DEFAULT_MARGIN) -> None:
        """ 

`SameAs`(*self*, *otherW*, *edge*, *margin=LAYOUT\_DEFAULT\_MARGIN*)[¶](#wx.IndividualLayoutConstraint.SameAs "Permalink to this definition")

Parameters
* **otherW** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **edge** ([*Edge*](wx.Edge.enumeration.html "Edge")) –
* **margin** (*int*) –






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def SatisfyConstraint(self, constraints, win) -> bool:
        """ 

`SatisfyConstraint`(*self*, *constraints*, *win*)[¶](#wx.IndividualLayoutConstraint.SatisfyConstraint "Permalink to this definition")

Parameters
* **constraints** ([*wx.LayoutConstraints*](wx.LayoutConstraints.html#wx.LayoutConstraints "wx.LayoutConstraints")) –
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def Set(self, rel, otherW, otherE, val=0, margin=LAYOUT_DEFAULT_MARGIN) -> None:
        """ 

`Set`(*self*, *rel*, *otherW*, *otherE*, *val=0*, *margin=LAYOUT\_DEFAULT\_MARGIN*)[¶](#wx.IndividualLayoutConstraint.Set "Permalink to this definition")

Parameters
* **rel** ([*Relationship*](wx.Relationship.enumeration.html "Relationship")) –
* **otherW** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **otherE** ([*Edge*](wx.Edge.enumeration.html "Edge")) –
* **val** (*int*) –
* **margin** (*int*) –






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def SetDone(self, d: bool) -> None:
        """ 

`SetDone`(*self*, *d*)[¶](#wx.IndividualLayoutConstraint.SetDone "Permalink to this definition")

Parameters
**d** (*bool*) – 






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def SetEdge(self, which: Edge) -> None:
        """ 

`SetEdge`(*self*, *which*)[¶](#wx.IndividualLayoutConstraint.SetEdge "Permalink to this definition")

Parameters
**which** ([*Edge*](wx.Edge.enumeration.html "Edge")) – 






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def SetMargin(self, m: int) -> None:
        """ 

`SetMargin`(*self*, *m*)[¶](#wx.IndividualLayoutConstraint.SetMargin "Permalink to this definition")

Parameters
**m** (*int*) – 






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def SetRelationship(self, r: Relationship) -> None:
        """ 

`SetRelationship`(*self*, *r*)[¶](#wx.IndividualLayoutConstraint.SetRelationship "Permalink to this definition")

Parameters
**r** ([*Relationship*](wx.Relationship.enumeration.html "Relationship")) – 






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def SetValue(self, v: int) -> None:
        """ 

`SetValue`(*self*, *v*)[¶](#wx.IndividualLayoutConstraint.SetValue "Permalink to this definition")

Parameters
**v** (*int*) – 






            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    def Unconstrained(self) -> None:
        """ 

`Unconstrained`(*self*)[¶](#wx.IndividualLayoutConstraint.Unconstrained "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.IndividualLayoutConstraint.html
        """

    Done: bool  # `Done`[¶](#wx.IndividualLayoutConstraint.Done "Permalink to this definition")See [`GetDone`](#wx.IndividualLayoutConstraint.GetDone "wx.IndividualLayoutConstraint.GetDone") and [`SetDone`](#wx.IndividualLayoutConstraint.SetDone "wx.IndividualLayoutConstraint.SetDone")
    Margin: int  # `Margin`[¶](#wx.IndividualLayoutConstraint.Margin "Permalink to this definition")See [`GetMargin`](#wx.IndividualLayoutConstraint.GetMargin "wx.IndividualLayoutConstraint.GetMargin") and [`SetMargin`](#wx.IndividualLayoutConstraint.SetMargin "wx.IndividualLayoutConstraint.SetMargin")
    MyEdge: 'Edge'  # `MyEdge`[¶](#wx.IndividualLayoutConstraint.MyEdge "Permalink to this definition")See [`GetMyEdge`](#wx.IndividualLayoutConstraint.GetMyEdge "wx.IndividualLayoutConstraint.GetMyEdge")
    OtherEdge: int  # `OtherEdge`[¶](#wx.IndividualLayoutConstraint.OtherEdge "Permalink to this definition")See [`GetOtherEdge`](#wx.IndividualLayoutConstraint.GetOtherEdge "wx.IndividualLayoutConstraint.GetOtherEdge")
    OtherWindow: 'Window'  # `OtherWindow`[¶](#wx.IndividualLayoutConstraint.OtherWindow "Permalink to this definition")See [`GetOtherWindow`](#wx.IndividualLayoutConstraint.GetOtherWindow "wx.IndividualLayoutConstraint.GetOtherWindow")
    Percent: int  # `Percent`[¶](#wx.IndividualLayoutConstraint.Percent "Permalink to this definition")See [`GetPercent`](#wx.IndividualLayoutConstraint.GetPercent "wx.IndividualLayoutConstraint.GetPercent")
    Relationship: '_Relationship'  # `Relationship`[¶](#wx.IndividualLayoutConstraint.Relationship "Permalink to this definition")See [`GetRelationship`](#wx.IndividualLayoutConstraint.GetRelationship "wx.IndividualLayoutConstraint.GetRelationship") and [`SetRelationship`](#wx.IndividualLayoutConstraint.SetRelationship "wx.IndividualLayoutConstraint.SetRelationship")
    Value: int  # `Value`[¶](#wx.IndividualLayoutConstraint.Value "Permalink to this definition")See [`GetValue`](#wx.IndividualLayoutConstraint.GetValue "wx.IndividualLayoutConstraint.GetValue") and [`SetValue`](#wx.IndividualLayoutConstraint.SetValue "wx.IndividualLayoutConstraint.SetValue")



_ShowEffect: TypeAlias = ShowEffect

class InfoBar(Control):
    """ **Possible constructors**:



```
InfoBar()

InfoBar(parent, winid=ID_ANY)

```


An info bar is a transient window shown at top or bottom of its parent
window to display non-critical information to the user.


  


        Source: https://docs.wxpython.org/wx.InfoBar.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.InfoBar.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Use [`Create`](#wx.InfoBar.Create "wx.InfoBar.Create") for the objects created using this constructor.




---

  



**\_\_init\_\_** *(self, parent, winid=ID\_ANY)*


Constructor creating the info bar window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winid** (*wx.WindowID*) –





See also


[`Create`](#wx.InfoBar.Create "wx.InfoBar.Create")





---

  





            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def AddButton(self, btnid, label="") -> None:
        """ 

`AddButton`(*self*, *btnid*, *label=""*)[¶](#wx.InfoBar.AddButton "Permalink to this definition")
Add a button to be shown in the info bar.


The button added by this method will be shown to the right of the text (in `LTR` layout), with each successive button being added to the right of the previous one. If any buttons are added to the info bar using this method, the default “Close” button is not shown as it is assumed that the extra buttons already allow the user to close it.


Clicking the button will generate a normal `EVT_COMMAND_BUTTON_CLICKED` event which can be handled as usual. The default handler in  [wx.InfoBar](#wx-infobar) itself closes the window whenever a button in it is clicked so if you wish the info bar to be hidden when the button is clicked, simply call `event.Skip()` in the button handler to let the base class handler do it (calling [`Dismiss`](#wx.InfoBar.Dismiss "wx.InfoBar.Dismiss") explicitly works too, of course). On the other hand, if you don’t skip the event, the info bar will remain opened so make sure to do it for at least some buttons to allow the user to close it.


Notice that the generic  [wx.InfoBar](#wx-infobar) implementation handles the button events itself and so they are not propagated to the info bar parent and you need to either inherit from  [wx.InfoBar](#wx-infobar) and handle them in your derived class or use [`wx.EvtHandler.Bind`](wx.EvtHandler.html#wx.EvtHandler.Bind "wx.EvtHandler.Bind") , as is done in the dialogs sample, to handle the button events in the parent frame.



Parameters
* **btnid** (*wx.WindowID*) – Id of the button. It will be used in the button message clicking this button will generate.
* **label** (*string*) – The label of the button. It may only be empty if *btnid* is one of the stock ids in which case the corresponding stock label (see [`wx.GetStockLabel`](wx.functions.html#wx.GetStockLabel "wx.GetStockLabel") ) will be used.






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def Create(self, parent, winid=ID_ANY) -> bool:
        """ 

`Create`(*self*, *parent*, *winid=ID\_ANY*)[¶](#wx.InfoBar.Create "Permalink to this definition")
Create the info bar window.


Notice that unlike most of the other Window-derived classes,  [wx.InfoBar](#wx-infobar) is created hidden and is only shown when [`ShowMessage`](#wx.InfoBar.ShowMessage "wx.InfoBar.ShowMessage") is called. This is more convenient as usually the info bar is created to be shown at some later time and not immediately and so creating it hidden avoids the need to call `Hide` explicitly from the code using it.


This should be only called if the object was created using its default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – A valid parent window pointer.
* **winid** (*wx.WindowID*) – The id of the info bar window, usually unused as currently no events are generated by this class.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def Dismiss(self) -> None:
        """ 

`Dismiss`(*self*)[¶](#wx.InfoBar.Dismiss "Permalink to this definition")
Hide the info bar window.


This method hides the window and lays out the parent window to account for its disappearance (unlike a simple `Hide` ).




            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def GetButtonCount(self) -> int:
        """ 

`GetButtonCount`(*self*)[¶](#wx.InfoBar.GetButtonCount "Permalink to this definition")
Returns the number of currently shown buttons.


This is simply the number of calls to [`AddButton`](#wx.InfoBar.AddButton "wx.InfoBar.AddButton") minus the number of calls to [`RemoveButton`](#wx.InfoBar.RemoveButton "wx.InfoBar.RemoveButton") so far.



Return type
*int*



Returns
The number of currently shown buttons, possibly 0.





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def GetButtonId(self, idx: int) -> int:
        """ 

`GetButtonId`(*self*, *idx*)[¶](#wx.InfoBar.GetButtonId "Permalink to this definition")
Returns the `ID` of the button at the given position.


The positions of the buttons are counted in order of their addition.



Parameters
**idx** (*int*) – The position of the button in 0 to [`GetButtonCount`](#wx.InfoBar.GetButtonCount "wx.InfoBar.GetButtonCount") range.



Return type
*wx.WindowID*



Returns
The `ID` of the button at the given position or `wx.ID_NONE` if it is out of range (this also results in an assertion failure).





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.InfoBar.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def GetEffectDuration(self) -> int:
        """ 

`GetEffectDuration`(*self*)[¶](#wx.InfoBar.GetEffectDuration "Permalink to this definition")
Return the effect animation duration currently used.



Return type
*int*






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def GetHideEffect(self) -> 'ShowEffect':
        """ 

`GetHideEffect`(*self*)[¶](#wx.InfoBar.GetHideEffect "Permalink to this definition")
Return the effect currently used for hiding the bar.



Return type
 [wx.ShowEffect](wx.ShowEffect.enumeration.html#wx-showeffect)






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def GetShowEffect(self) -> 'ShowEffect':
        """ 

`GetShowEffect`(*self*)[¶](#wx.InfoBar.GetShowEffect "Permalink to this definition")
Return the effect currently used for showing the bar.



Return type
 [wx.ShowEffect](wx.ShowEffect.enumeration.html#wx-showeffect)






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def HasButtonId(self, btnid: int) -> bool:
        """ 

`HasButtonId`(*self*, *btnid*)[¶](#wx.InfoBar.HasButtonId "Permalink to this definition")
Returns whether a button with the given `ID` is currently shown.



Parameters
**btnid** (*wx.WindowID*) – `ID` of the button to check for.



Return type
*bool*



Returns
`True` if the button with this `ID` is currently shown.





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def RemoveButton(self, btnid: int) -> None:
        """ 

`RemoveButton`(*self*, *btnid*)[¶](#wx.InfoBar.RemoveButton "Permalink to this definition")
Remove a button previously added by [`AddButton`](#wx.InfoBar.AddButton "wx.InfoBar.AddButton") .



Parameters
**btnid** (*wx.WindowID*) – Id of the button to remove. If more than one button with the same id is used in the info bar (which is in any case not recommended), the last, i.e. most recently added, button with this id is removed.






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def SetEffectDuration(self, duration: int) -> None:
        """ 

`SetEffectDuration`(*self*, *duration*)[¶](#wx.InfoBar.SetEffectDuration "Permalink to this definition")
Set the duration of the animation used when showing or hiding the bar.


By default, 500ms duration is used.



Parameters
**duration** (*int*) – Duration of the animation, in milliseconds.






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def SetFont(self, font: 'Font') -> bool:
        """ 

`SetFont`(*self*, *font*)[¶](#wx.InfoBar.SetFont "Permalink to this definition")
Overridden base class methods changes the font of the text message.


 [wx.InfoBar](#wx-infobar) overrides this method to use the font passed to it for its text message part. By default a larger and bold version of the standard font is used.


This method is generic-only.



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def SetShowHideEffects(self, showEffect, hideEffect) -> None:
        """ 

`SetShowHideEffects`(*self*, *showEffect*, *hideEffect*)[¶](#wx.InfoBar.SetShowHideEffects "Permalink to this definition")
Set the effects to use when showing and hiding the bar.


Either or both of the parameters can be set to `wx.SHOW_EFFECT_NONE` to disable using effects entirely.


By default, the info bar uses `wx.SHOW_EFFECT_SLIDE_TO_BOTTOM` effect for showing itself and `wx.SHOW_EFFECT_SLIDE_TO_TOP` for hiding if it is the first element of the containing sizer and reverse effects if it’s the last one. If it is neither the first nor the last element, no effect is used to avoid the use of an inappropriate one and this function must be called if an effect is desired.



Parameters
* **showEffect** ([*ShowEffect*](wx.ShowEffect.enumeration.html "ShowEffect")) – The effect to use when showing the bar.
* **hideEffect** ([*ShowEffect*](wx.ShowEffect.enumeration.html "ShowEffect")) – The effect to use when hiding the bar.






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    def ShowMessage(self, msg, flags=ICON_INFORMATION) -> None:
        """ 

`ShowMessage`(*self*, *msg*, *flags=ICON\_INFORMATION*)[¶](#wx.InfoBar.ShowMessage "Permalink to this definition")
Show a message in the bar.


If the bar is currently hidden, it will be shown. Otherwise its message will be updated in place.



Parameters
* **msg** (*string*) – The text of the message.
* **flags** (*int*) – One of `wx.ICON_NONE`, `wx.ICON_INFORMATION` (default), `wx.ICON_QUESTION`, `wx.ICON_WARNING` or `wx.ICON_ERROR` values. These flags have the same meaning as in  [wx.MessageDialog](wx.MessageDialog.html#wx-messagedialog) for the generic version, i.e. show (or not, in case of `wx.ICON_NONE`) the corresponding icon in the bar but can be interpreted by the native versions. For example, the GTK+ native implementation doesn’t show icons at all but uses this parameter to select the appropriate background colour for the notification.






            Source: https://docs.wxpython.org/wx.InfoBar.html
        """

    ButtonCount: int  # `ButtonCount`[¶](#wx.InfoBar.ButtonCount "Permalink to this definition")See [`GetButtonCount`](#wx.InfoBar.GetButtonCount "wx.InfoBar.GetButtonCount")
    EffectDuration: int  # `EffectDuration`[¶](#wx.InfoBar.EffectDuration "Permalink to this definition")See [`GetEffectDuration`](#wx.InfoBar.GetEffectDuration "wx.InfoBar.GetEffectDuration") and [`SetEffectDuration`](#wx.InfoBar.SetEffectDuration "wx.InfoBar.SetEffectDuration")
    HideEffect: 'ShowEffect'  # `HideEffect`[¶](#wx.InfoBar.HideEffect "Permalink to this definition")See [`GetHideEffect`](#wx.InfoBar.GetHideEffect "wx.InfoBar.GetHideEffect")
    ShowEffect: '_ShowEffect'  # `ShowEffect`[¶](#wx.InfoBar.ShowEffect "Permalink to this definition")See [`GetShowEffect`](#wx.InfoBar.GetShowEffect "wx.InfoBar.GetShowEffect")



SHOW_EFFECT_NONE: int

SHOW_EFFECT_SLIDE_TO_BOTTOM: int

SHOW_EFFECT_SLIDE_TO_TOP: int

class InitDialogEvent(Event):
    """ **Possible constructors**:



```
InitDialogEvent(id=0)

```


A InitDialogEvent is sent as a dialog or panel is being initialised.


  


        Source: https://docs.wxpython.org/wx.InitDialogEvent.html
    """
    def __init__(self, id: int=0) -> None:
        """ 

`__init__`(*self*, *id=0*)[¶](#wx.InitDialogEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**id** (*int*) – 






            Source: https://docs.wxpython.org/wx.InitDialogEvent.html
        """



class InputStream(StreamBase):
    """ **Possible constructors**:



```
InputStream()

```


InputStream is an abstract base class which may not be used
directly.


  


        Source: https://docs.wxpython.org/wx.InputStream.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.InputStream.__init__ "Permalink to this definition")
Creates a dummy input stream.




            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def CanRead(self) -> bool:
        """ 

`CanRead`(*self*)[¶](#wx.InputStream.CanRead "Permalink to this definition")
Returns `True` if some data is available in the stream right now, so that calling [`Read`](#wx.InputStream.Read "wx.InputStream.Read") wouldn’t block.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def Eof(self) -> bool:
        """ 

`Eof`(*self*)[¶](#wx.InputStream.Eof "Permalink to this definition")
Returns `True` after an attempt has been made to read past the end of the stream.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def GetC(self) -> int:
        """ 

`GetC`(*self*)[¶](#wx.InputStream.GetC "Permalink to this definition")
Returns the first character in the input queue and removes it, blocking until it appears if necessary.


On success returns a value between 0 - 255; on end of file returns `EOF` .



Return type
*int*






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def LastRead(self) -> int:
        """ 

`LastRead`(*self*)[¶](#wx.InputStream.LastRead "Permalink to this definition")
Returns the last number of bytes read.



Return type
*int*






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def Peek(self) -> int:
        """ 

`Peek`(*self*)[¶](#wx.InputStream.Peek "Permalink to this definition")
Returns the first character in the input queue without removing it.



Return type
*int*






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def Read(self, *args, **kw) -> 'InputStream':
        """ 

`Read`(*self*, *\*args*, *\*\*kw*)[¶](#wx.InputStream.Read "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Read** *(self, buffer, size)*


Reads the specified amount of bytes and stores the data in buffer.


To check if the call was successful you must use [`LastRead`](#wx.InputStream.LastRead "wx.InputStream.LastRead") to check if this call did actually read *size* bytes (if it didn’t, [`GetLastError`](wx.StreamBase.html#wx.StreamBase.GetLastError "wx.StreamBase.GetLastError") should return a meaningful value).



Parameters
* **buffer** –
* **size** (*int*) –



Return type
 [wx.InputStream](#wx-inputstream)



Returns
This function returns a reference on the current object, so the user can test any states of the stream right away.





Warning


The buffer absolutely needs to have at least the specified size.





---

  



**Read** *(self, stream\_out)*


Reads data from the input queue and stores it in the specified output stream.


The data is read until an error is raised by one of the two streams.



Parameters
**stream\_out** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – 



Return type
 [wx.InputStream](#wx-inputstream)



Returns
This function returns a reference on the current object, so the user can test any states of the stream right away.






---

  





            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def ReadAll(self, buffer, size) -> bool:
        """ 

`ReadAll`(*self*, *buffer*, *size*)[¶](#wx.InputStream.ReadAll "Permalink to this definition")
Reads exactly the specified number of bytes into the buffer.


Returns `True` only if the entire amount of data was read, otherwise `False` is returned and the number of bytes really read can be retrieved using [`LastRead`](#wx.InputStream.LastRead "wx.InputStream.LastRead") , as with [`Read`](#wx.InputStream.Read "wx.InputStream.Read") .


This method uses repeated calls to [`Read`](#wx.InputStream.Read "wx.InputStream.Read") (which may return after reading less than the requested number of bytes) if necessary.



Parameters
* **buffer** –
* **size** (*int*) –



Return type
*bool*





New in version 2.9.5.




Warning


The buffer absolutely needs to have at least the specified size.





            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def SeekI(self, pos, mode=FromStart) -> 'FileOffset':
        """ 

`SeekI`(*self*, *pos*, *mode=FromStart*)[¶](#wx.InputStream.SeekI "Permalink to this definition")
Changes the stream current position.


This operation in general is possible only for seekable streams (see [`wx.StreamBase.IsSeekable`](wx.StreamBase.html#wx.StreamBase.IsSeekable "wx.StreamBase.IsSeekable") ); non-seekable streams support only seeking positive amounts in mode `FromCurrent` (this is implemented by reading data and simply discarding it).



Parameters
* **pos** (*wx.FileOffset*) – Offset to seek to.
* **mode** ([*SeekMode*](wx.SeekMode.enumeration.html "SeekMode")) – One of FromStart, FromEnd, FromCurrent.



Return type
*wx.FileOffset*



Returns
The new stream position or `InvalidOffset` on error.






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def TellI(self) -> 'FileOffset':
        """ 

`TellI`(*self*)[¶](#wx.InputStream.TellI "Permalink to this definition")
Returns the current stream position or `InvalidOffset` if it’s not available (e.g.


socket streams do not have a size nor a current stream position).



Return type
*wx.FileOffset*






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def Ungetch(self, *args, **kw) -> int:
        """ 

`Ungetch`(*self*, *\*args*, *\*\*kw*)[¶](#wx.InputStream.Ungetch "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Ungetch** *(self, buffer, size)*


This function is only useful in read mode.


It is the manager of the “Write-Back” buffer. This buffer acts like a temporary buffer where data which has to be read during the next read `IO` call are put. This is useful when you get a big block of data which you didn’t want to read: you can replace them at the top of the input queue by this way.


Be very careful about this call in connection with calling [`SeekI`](#wx.InputStream.SeekI "wx.InputStream.SeekI") on the same stream. Any call to [`SeekI`](#wx.InputStream.SeekI "wx.InputStream.SeekI") will invalidate any previous call to this method (otherwise you could [`SeekI`](#wx.InputStream.SeekI "wx.InputStream.SeekI") to one position, “unread” a few bytes there, [`SeekI`](#wx.InputStream.SeekI "wx.InputStream.SeekI") to another position and data would be either lost or corrupted).



Parameters
* **buffer** –
* **size** (*int*) –



Return type
*int*



Returns
Returns the amount of bytes saved in the Write-Back buffer.






---

  



**Ungetch** *(self, c)*


This function acts like the previous one except that it takes only one character: it is sometimes shorter to use than the generic function.



Parameters
**c** (*int*) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def close(self) -> None:
        """ 

`close`(*self*)[¶](#wx.InputStream.close "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def eof(self) -> bool:
        """ 

`eof`(*self*)[¶](#wx.InputStream.eof "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def flush(self) -> None:
        """ 

`flush`(*self*)[¶](#wx.InputStream.flush "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def read(self, *args, **kw) -> Any:
        """ 

`read`(*self*, *\*args*, *\*\*kw*)[¶](#wx.InputStream.read "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**read** *(self)*



Return type
*PyObject*






---

  



**read** *(self, size)*



Return type
*PyObject*






---

  





            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def readline(self, *args, **kw) -> Any:
        """ 

`readline`(*self*, *\*args*, *\*\*kw*)[¶](#wx.InputStream.readline "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**readline** *(self)*



Return type
*PyObject*






---

  



**readline** *(self, size)*



Return type
*PyObject*






---

  





            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def readlines(self, *args, **kw) -> Any:
        """ 

`readlines`(*self*, *\*args*, *\*\*kw*)[¶](#wx.InputStream.readlines "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**readlines** *(self)*



Return type
*PyObject*






---

  



**readlines** *(self, sizehint)*



Return type
*PyObject*






---

  





            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def seek(self, offset, whence=0) -> None:
        """ 

`seek`(*self*, *offset*, *whence=0*)[¶](#wx.InputStream.seek "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    def tell(self) -> 'FileOffset':
        """ 

`tell`(*self*)[¶](#wx.InputStream.tell "Permalink to this definition")

Return type
*wx.FileOffset*






            Source: https://docs.wxpython.org/wx.InputStream.html
        """

    C: int  # `C`[¶](#wx.InputStream.C "Permalink to this definition")See [`GetC`](#wx.InputStream.GetC "wx.InputStream.GetC")



class InternetFSHandler(FileSystemHandler):
    """ **Possible constructors**:



```
InternetFSHandler()

```


A file system handler for accessing files from internet servers.


  


        Source: https://docs.wxpython.org/wx.InternetFSHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.InternetFSHandler.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.InternetFSHandler.html
        """



class ItemAttr:
    """ **Possible constructors**:



```
ItemAttr()

ItemAttr(colText, colBack, font)

```


Represents the attributes (colour, font, …) of an item of a control
with multiple items such as e.g.


  


        Source: https://docs.wxpython.org/wx.ItemAttr.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ItemAttr.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default Constructor.




---

  



**\_\_init\_\_** *(self, colText, colBack, font)*


Construct a  [wx.ItemAttr](#wx-itemattr) with the specified foreground and background colours and font.



Parameters
* **colText** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **colBack** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –






---

  





            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def GetBackgroundColour(self) -> 'Colour':
        """ 

`GetBackgroundColour`(*self*)[¶](#wx.ItemAttr.GetBackgroundColour "Permalink to this definition")
Returns the currently set background colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def GetFont(self) -> 'Font':
        """ 

`GetFont`(*self*)[¶](#wx.ItemAttr.GetFont "Permalink to this definition")
Returns the currently set font.



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def GetTextColour(self) -> 'Colour':
        """ 

`GetTextColour`(*self*)[¶](#wx.ItemAttr.GetTextColour "Permalink to this definition")
Returns the currently set text colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def HasBackgroundColour(self) -> bool:
        """ 

`HasBackgroundColour`(*self*)[¶](#wx.ItemAttr.HasBackgroundColour "Permalink to this definition")
Returns `True` if the currently set background colour is valid.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def HasColours(self) -> bool:
        """ 

`HasColours`(*self*)[¶](#wx.ItemAttr.HasColours "Permalink to this definition")
Returns `True` if either text or background colour is set.



Return type
*bool*





See also


[`HasBackgroundColour`](#wx.ItemAttr.HasBackgroundColour "wx.ItemAttr.HasBackgroundColour") , [`HasTextColour`](#wx.ItemAttr.HasTextColour "wx.ItemAttr.HasTextColour")





            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def HasFont(self) -> bool:
        """ 

`HasFont`(*self*)[¶](#wx.ItemAttr.HasFont "Permalink to this definition")
Returns `True` if the currently set font is valid.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def HasTextColour(self) -> bool:
        """ 

`HasTextColour`(*self*)[¶](#wx.ItemAttr.HasTextColour "Permalink to this definition")
Returns `True` if the currently set text colour is valid.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def IsDefault(self) -> bool:
        """ 

`IsDefault`(*self*)[¶](#wx.ItemAttr.IsDefault "Permalink to this definition")
Returns `True` if this object has no custom attributes set.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def SetBackgroundColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetBackgroundColour`(*self*, *colour*)[¶](#wx.ItemAttr.SetBackgroundColour "Permalink to this definition")
Sets a new background colour.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def SetFont(self, font: 'Font') -> None:
        """ 

`SetFont`(*self*, *font*)[¶](#wx.ItemAttr.SetFont "Permalink to this definition")
Sets a new font.



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def SetTextColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetTextColour`(*self*, *colour*)[¶](#wx.ItemAttr.SetTextColour "Permalink to this definition")
Sets a new text colour.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.ItemAttr.__ne__ "Permalink to this definition")
Compare two item attributes for inequality.



Parameters
**other** ([*wx.ItemAttr*](#wx.ItemAttr "wx.ItemAttr")) – 






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.ItemAttr.__eq__ "Permalink to this definition")
Compare two item attributes for equality.



Parameters
**other** ([*wx.ItemAttr*](#wx.ItemAttr "wx.ItemAttr")) – 






            Source: https://docs.wxpython.org/wx.ItemAttr.html
        """

    BackgroundColour: 'Colour'  # `BackgroundColour`[¶](#wx.ItemAttr.BackgroundColour "Permalink to this definition")See [`GetBackgroundColour`](#wx.ItemAttr.GetBackgroundColour "wx.ItemAttr.GetBackgroundColour") and [`SetBackgroundColour`](#wx.ItemAttr.SetBackgroundColour "wx.ItemAttr.SetBackgroundColour")
    Font: '_Font'  # `Font`[¶](#wx.ItemAttr.Font "Permalink to this definition")See [`GetFont`](#wx.ItemAttr.GetFont "wx.ItemAttr.GetFont") and [`SetFont`](#wx.ItemAttr.SetFont "wx.ItemAttr.SetFont")
    TextColour: 'Colour'  # `TextColour`[¶](#wx.ItemAttr.TextColour "Permalink to this definition")See [`GetTextColour`](#wx.ItemAttr.GetTextColour "wx.ItemAttr.GetTextColour") and [`SetTextColour`](#wx.ItemAttr.SetTextColour "wx.ItemAttr.SetTextColour")



class ItemContainerImmutable:
    """ **Possible constructors**:



```
ItemContainerImmutable()

```


ItemContainer defines an interface which is implemented by all
controls which have string subitems each of which may be selected.


  


        Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ItemContainerImmutable.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def FindString(self, string, caseSensitive=False) -> int:
        """ 

`FindString`(*self*, *string*, *caseSensitive=False*)[¶](#wx.ItemContainerImmutable.FindString "Permalink to this definition")
Finds an item whose label matches the given string.



Parameters
* **string** (*string*) – String to find.
* **caseSensitive** (*bool*) – Whether search is case sensitive (default is not).



Return type
*int*



Returns
The zero-based position of the item, or `wx.NOT_FOUND` if the string was not found.






            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def GetCount(self) -> int:
        """ 

`GetCount`(*self*)[¶](#wx.ItemContainerImmutable.GetCount "Permalink to this definition")
Returns the number of items in the control.



Return type
*int*





See also


[`IsEmpty`](#wx.ItemContainerImmutable.IsEmpty "wx.ItemContainerImmutable.IsEmpty")





            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.ItemContainerImmutable.GetSelection "Permalink to this definition")
Returns the index of the selected item or `NOT_FOUND` if no item is selected.



Return type
*int*



Returns
The position of the current selection.





See also


[`SetSelection`](#wx.ItemContainerImmutable.SetSelection "wx.ItemContainerImmutable.SetSelection") , [`GetStringSelection`](#wx.ItemContainerImmutable.GetStringSelection "wx.ItemContainerImmutable.GetStringSelection")





            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def GetString(self, n: int) -> str:
        """ 

`GetString`(*self*, *n*)[¶](#wx.ItemContainerImmutable.GetString "Permalink to this definition")
Returns the label of the item with the given index.


The index must be valid, i.e. less than the value returned by [`GetCount`](#wx.ItemContainerImmutable.GetCount "wx.ItemContainerImmutable.GetCount") , otherwise an assert is triggered. Notably, this function can’t be called if the control is empty.



Parameters
**n** (*int*) – The zero-based index.



Return type
`string`



Returns
The label of the item.






            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def GetStringSelection(self) -> str:
        """ 

`GetStringSelection`(*self*)[¶](#wx.ItemContainerImmutable.GetStringSelection "Permalink to this definition")
Returns the label of the selected item or an empty string if no item is selected.



Return type
`string`





See also


[`GetSelection`](#wx.ItemContainerImmutable.GetSelection "wx.ItemContainerImmutable.GetSelection")





            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def GetStrings(self) -> list[str]:
        """ 

`GetStrings`(*self*)[¶](#wx.ItemContainerImmutable.GetStrings "Permalink to this definition")
Returns the array of the labels of all items in the control.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.ItemContainerImmutable.IsEmpty "Permalink to this definition")
Returns `True` if the control is empty or `False` if it has some items.



Return type
*bool*





See also


[`GetCount`](#wx.ItemContainerImmutable.GetCount "wx.ItemContainerImmutable.GetCount")





            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def Select(self, n: int) -> None:
        """ 

`Select`(*self*, *n*)[¶](#wx.ItemContainerImmutable.Select "Permalink to this definition")
This is the same as [`SetSelection`](#wx.ItemContainerImmutable.SetSelection "wx.ItemContainerImmutable.SetSelection") and exists only because it is slightly more natural for controls which support multiple selection.



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def SetSelection(self, n: int) -> None:
        """ 

`SetSelection`(*self*, *n*)[¶](#wx.ItemContainerImmutable.SetSelection "Permalink to this definition")
Sets the selection to the given item *n* or removes the selection entirely if *n* == `NOT_FOUND` .


Note that this does not cause any command events to be emitted nor does it deselect any other items in the controls which support multiple selections.



Parameters
**n** (*int*) – The string position to select, starting from zero.





See also


[`SetString`](#wx.ItemContainerImmutable.SetString "wx.ItemContainerImmutable.SetString") , [`SetStringSelection`](#wx.ItemContainerImmutable.SetStringSelection "wx.ItemContainerImmutable.SetStringSelection")





            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def SetString(self, n, string) -> None:
        """ 

`SetString`(*self*, *n*, *string*)[¶](#wx.ItemContainerImmutable.SetString "Permalink to this definition")
Sets the label for the given item.



Parameters
* **n** (*int*) – The zero-based item index.
* **string** (*string*) – The label to set.






            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    def SetStringSelection(self, string: str) -> bool:
        """ 

`SetStringSelection`(*self*, *string*)[¶](#wx.ItemContainerImmutable.SetStringSelection "Permalink to this definition")
Selects the item with the specified string in the control.


This method doesn’t cause any command events to be emitted.


Notice that this method is case-insensitive, i.e. the string is compared with all the elements of the control case-insensitively and the first matching entry is selected, even if it doesn’t have exactly the same case as this string and there is an exact match afterwards.



Parameters
**string** (*string*) – The string to select.



Return type
*bool*



Returns
`True` if the specified string has been selected, `False` if it wasn’t found in the control.






            Source: https://docs.wxpython.org/wx.ItemContainerImmutable.html
        """

    Count: int  # `Count`[¶](#wx.ItemContainerImmutable.Count "Permalink to this definition")See [`GetCount`](#wx.ItemContainerImmutable.GetCount "wx.ItemContainerImmutable.GetCount")
    Selection: int  # `Selection`[¶](#wx.ItemContainerImmutable.Selection "Permalink to this definition")See [`GetSelection`](#wx.ItemContainerImmutable.GetSelection "wx.ItemContainerImmutable.GetSelection") and [`SetSelection`](#wx.ItemContainerImmutable.SetSelection "wx.ItemContainerImmutable.SetSelection")
    StringSelection: str  # `StringSelection`[¶](#wx.ItemContainerImmutable.StringSelection "Permalink to this definition")See [`GetStringSelection`](#wx.ItemContainerImmutable.GetStringSelection "wx.ItemContainerImmutable.GetStringSelection") and [`SetStringSelection`](#wx.ItemContainerImmutable.SetStringSelection "wx.ItemContainerImmutable.SetStringSelection")
    Strings: list[str]  # `Strings`[¶](#wx.ItemContainerImmutable.Strings "Permalink to this definition")See [`GetStrings`](#wx.ItemContainerImmutable.GetStrings "wx.ItemContainerImmutable.GetStrings")



class JoystickEvent(Event):
    """ **Possible constructors**:



```
JoystickEvent(eventType=wxEVT_NULL, state=0, joystick=JOYSTICK1,
              change=0)

```


This event class contains information about joystick events,
particularly events received by windows.


  


        Source: https://docs.wxpython.org/wx.JoystickEvent.html
    """
    def __init__(self, eventType=wxEVT_NULL, state=0, joystick=JOYSTICK1, change=0) -> None:
        """ 

`__init__`(*self*, *eventType=wxEVT\_NULL*, *state=0*, *joystick=JOYSTICK1*, *change=0*)[¶](#wx.JoystickEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **eventType** (*wx.EventType*) –
* **state** (*int*) –
* **joystick** (*int*) –
* **change** (*int*) –






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def ButtonDown(self, button: int=JOY_BUTTON_ANY) -> bool:
        """ 

`ButtonDown`(*self*, *button=JOY\_BUTTON\_ANY*)[¶](#wx.JoystickEvent.ButtonDown "Permalink to this definition")
Returns `True` if the event was a down event from the specified button (or any button).



Parameters
**button** (*int*) – Can be `JOY_BUTTONn` where `n` is 1, 2, 3 or 4; or `JOY_BUTTON_ANY` to indicate any button down event.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def ButtonIsDown(self, button: int=JOY_BUTTON_ANY) -> bool:
        """ 

`ButtonIsDown`(*self*, *button=JOY\_BUTTON\_ANY*)[¶](#wx.JoystickEvent.ButtonIsDown "Permalink to this definition")
Returns `True` if the specified button (or any button) was in a down state.



Parameters
**button** (*int*) – Can be `JOY_BUTTONn` where `n` is 1, 2, 3 or 4; or `JOY_BUTTON_ANY` to indicate any button down event.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def ButtonUp(self, button: int=JOY_BUTTON_ANY) -> bool:
        """ 

`ButtonUp`(*self*, *button=JOY\_BUTTON\_ANY*)[¶](#wx.JoystickEvent.ButtonUp "Permalink to this definition")
Returns `True` if the event was an up event from the specified button (or any button).



Parameters
**button** (*int*) – Can be `JOY_BUTTONn` where `n` is 1, 2, 3 or 4; or `JOY_BUTTON_ANY` to indicate any button down event.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def GetButtonChange(self) -> int:
        """ 

`GetButtonChange`(*self*)[¶](#wx.JoystickEvent.GetButtonChange "Permalink to this definition")
Returns the identifier of the button changing state.


The return value is:



```
1 << n

```


where `n` is the index of the button changing state, which can also be retrieved using [`GetButtonOrdinal`](#wx.JoystickEvent.GetButtonOrdinal "wx.JoystickEvent.GetButtonOrdinal") .


Note that for `n` equal to 1, 2, 3 or 4 there are predefined `JOY_BUTTONn` constants which can be used for more clarity, however these constants are not defined for the buttons beyond the first four.



Return type
*int*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def GetButtonOrdinal(self) -> int:
        """ 

`GetButtonOrdinal`(*self*)[¶](#wx.JoystickEvent.GetButtonOrdinal "Permalink to this definition")
Returns the 0-indexed ordinal of the button changing state.



Return type
*int*





New in version 4.1/wxWidgets-3.1.2: .




See also


[`GetButtonChange`](#wx.JoystickEvent.GetButtonChange "wx.JoystickEvent.GetButtonChange")





            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def GetButtonState(self) -> int:
        """ 

`GetButtonState`(*self*)[¶](#wx.JoystickEvent.GetButtonState "Permalink to this definition")
Returns the down state of the buttons.


This is a `JOY_BUTTONn` identifier, where `n` is one of 1, 2, 3, 4.



Return type
*int*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def GetJoystick(self) -> int:
        """ 

`GetJoystick`(*self*)[¶](#wx.JoystickEvent.GetJoystick "Permalink to this definition")
Returns the identifier of the joystick generating the event - one of `wx.JOYSTICK1` and `wx.JOYSTICK2`.



Return type
*int*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.JoystickEvent.GetPosition "Permalink to this definition")
Returns the x, y position of the joystick event.


These coordinates are valid for all the events except wxEVT\_JOY\_ZMOVE.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def GetZPosition(self) -> int:
        """ 

`GetZPosition`(*self*)[¶](#wx.JoystickEvent.GetZPosition "Permalink to this definition")
Returns the z position of the joystick event.


This method can only be used for wxEVT\_JOY\_ZMOVE events.



Return type
*int*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def IsButton(self) -> bool:
        """ 

`IsButton`(*self*)[¶](#wx.JoystickEvent.IsButton "Permalink to this definition")
Returns `True` if this was a button up or down event (*not* ‘is any button down?’).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def IsMove(self) -> bool:
        """ 

`IsMove`(*self*)[¶](#wx.JoystickEvent.IsMove "Permalink to this definition")
Returns `True` if this was an x, y move event.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    def IsZMove(self) -> bool:
        """ 

`IsZMove`(*self*)[¶](#wx.JoystickEvent.IsZMove "Permalink to this definition")
Returns `True` if this was a z move event.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.JoystickEvent.html
        """

    ButtonChange: int  # `ButtonChange`[¶](#wx.JoystickEvent.ButtonChange "Permalink to this definition")See [`GetButtonChange`](#wx.JoystickEvent.GetButtonChange "wx.JoystickEvent.GetButtonChange")
    ButtonOrdinal: int  # `ButtonOrdinal`[¶](#wx.JoystickEvent.ButtonOrdinal "Permalink to this definition")See [`GetButtonOrdinal`](#wx.JoystickEvent.GetButtonOrdinal "wx.JoystickEvent.GetButtonOrdinal")
    ButtonState: int  # `ButtonState`[¶](#wx.JoystickEvent.ButtonState "Permalink to this definition")See [`GetButtonState`](#wx.JoystickEvent.GetButtonState "wx.JoystickEvent.GetButtonState")
    Joystick: int  # `Joystick`[¶](#wx.JoystickEvent.Joystick "Permalink to this definition")See [`GetJoystick`](#wx.JoystickEvent.GetJoystick "wx.JoystickEvent.GetJoystick")
    Position: 'Point'  # `Position`[¶](#wx.JoystickEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.JoystickEvent.GetPosition "wx.JoystickEvent.GetPosition")
    ZPosition: int  # `ZPosition`[¶](#wx.JoystickEvent.ZPosition "Permalink to this definition")See [`GetZPosition`](#wx.JoystickEvent.GetZPosition "wx.JoystickEvent.GetZPosition")



EVT_JOY_BUTTON_DOWN: int  # Process a  wxEVT_JOY_BUTTON_DOWN   event.

EVT_JOY_BUTTON_UP: int  # Process a  wxEVT_JOY_BUTTON_UP   event.

EVT_JOY_MOVE: int  # Process a  wxEVT_JOY_MOVE   event.

EVT_JOY_ZMOVE: int  # Process a  wxEVT_JOY_ZMOVE   event.

EVT_JOYSTICK_EVENTS: int  # Processes all joystick events. ^^

JOYSTICK1: int

JOYSTICK2: int

class JPEGHandler(ImageHandler):
    """ **Possible constructors**:



```
JPEGHandler()

```


This is the image handler for the `JPEG` format.


  


        Source: https://docs.wxpython.org/wx.JPEGHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.JPEGHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.JPEGHandler](#wx-jpeghandler).




            Source: https://docs.wxpython.org/wx.JPEGHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.JPEGHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.JPEGHandler.html
        """

    @staticmethod
    def GetLibraryVersionInfo() -> 'VersionInfo':
        """ 

*static* `GetLibraryVersionInfo`()[¶](#wx.JPEGHandler.GetLibraryVersionInfo "Permalink to this definition")
Retrieve the version information about the `JPEG` library used by this handler.



Return type
 [wx.VersionInfo](wx.VersionInfo.html#wx-versioninfo)





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.JPEGHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.JPEGHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.JPEGHandler.SaveFile "wx.JPEGHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.JPEGHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.JPEGHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.JPEGHandler.LoadFile "wx.JPEGHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.JPEGHandler.html
        """



class KeyboardState:
    """ **Possible constructors**:



```
KeyboardState(controlDown=False, shiftDown=False, altDown=False,
              metaDown=False)

```


Provides methods for testing the state of the keyboard modifier keys.


  


        Source: https://docs.wxpython.org/wx.KeyboardState.html
    """
    def __init__(self, controlDown=False, shiftDown=False, altDown=False, metaDown=False) -> None:
        """ 

`__init__`(*self*, *controlDown=False*, *shiftDown=False*, *altDown=False*, *metaDown=False*)[¶](#wx.KeyboardState.__init__ "Permalink to this definition")
Constructor initializes the modifier key settings.


By default, no modifiers are active.



Parameters
* **controlDown** (*bool*) –
* **shiftDown** (*bool*) –
* **altDown** (*bool*) –
* **metaDown** (*bool*) –






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def AltDown(self) -> bool:
        """ 

`AltDown`(*self*)[¶](#wx.KeyboardState.AltDown "Permalink to this definition")
Returns `True` if the Alt key is pressed.


Notice that [`GetModifiers`](#wx.KeyboardState.GetModifiers "wx.KeyboardState.GetModifiers") should usually be used instead of this one.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def CmdDown(self) -> bool:
        """ 

`CmdDown`(*self*)[¶](#wx.KeyboardState.CmdDown "Permalink to this definition")
Returns `True` if the key used for command accelerators is pressed.


Same as [`ControlDown`](#wx.KeyboardState.ControlDown "wx.KeyboardState.ControlDown") . Deprecated.


Notice that [`GetModifiers`](#wx.KeyboardState.GetModifiers "wx.KeyboardState.GetModifiers") should usually be used instead of this one.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def ControlDown(self) -> bool:
        """ 

`ControlDown`(*self*)[¶](#wx.KeyboardState.ControlDown "Permalink to this definition")
Returns `True` if the Control key or Apple/Command key under macOS is pressed.


This function doesn’t distinguish between right and left control keys.


Notice that [`GetModifiers`](#wx.KeyboardState.GetModifiers "wx.KeyboardState.GetModifiers") should usually be used instead of this one.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def GetModifiers(self) -> int:
        """ 

`GetModifiers`(*self*)[¶](#wx.KeyboardState.GetModifiers "Permalink to this definition")
Return the bit mask of all pressed modifier keys.


The return value is a combination of `MOD_ALT` , `MOD_CONTROL` , `MOD_SHIFT` and `MOD_META` bit masks. Additionally, `MOD_NONE` is defined as 0, i.e. corresponds to no modifiers (see [`HasAnyModifiers`](#wx.KeyboardState.HasAnyModifiers "wx.KeyboardState.HasAnyModifiers") ) and `MOD_CMD` is either `MOD_CONTROL` (MSW and Unix) or `MOD_META` (Mac), see [`CmdDown`](#wx.KeyboardState.CmdDown "wx.KeyboardState.CmdDown") . See  [wx.KeyModifier](wx.KeyModifier.enumeration.html#wx-keymodifier) for the full list of modifiers.


Notice that this function is easier to use correctly than, for example, [`ControlDown`](#wx.KeyboardState.ControlDown "wx.KeyboardState.ControlDown") because when using the latter you also have to remember to test that none of the other modifiers is pressed:



```
if ControlDown() and not AltDown() and not ShiftDown() and not MetaDown():
    # handle Ctrl-XXX ...
    HandleControl()

```


and forgetting to do it can result in serious program bugs (e.g. program not working with European keyboard layout where `AltGr` key which is seen by the program as combination of `CTRL` and `ALT` is used). On the other hand, you can simply write:



```
if GetModifiers() == wx.MOD_CONTROL:
    # handle Ctrl-XXX ...
    HandleControl()

```


with this function.



Return type
*int*






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def HasAnyModifiers(self) -> bool:
        """ 

`HasAnyModifiers`(*self*)[¶](#wx.KeyboardState.HasAnyModifiers "Permalink to this definition")
Returns `True` if any modifiers at all are pressed.


This is equivalent to [`GetModifiers`](#wx.KeyboardState.GetModifiers "wx.KeyboardState.GetModifiers") `!=` `MOD_NONE` .


Notice that this is different from [`HasModifiers`](#wx.KeyboardState.HasModifiers "wx.KeyboardState.HasModifiers") method which doesn’t take e.g. Shift modifier into account. This method is most suitable for mouse events when any modifier, including Shift, can change the interpretation of the event.



Return type
*bool*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def HasModifiers(self) -> bool:
        """ 

`HasModifiers`(*self*)[¶](#wx.KeyboardState.HasModifiers "Permalink to this definition")
Returns `True` if Control or Alt are pressed.


Checks if Control, Alt or, under macOS only, Command key are pressed (notice that the real Control key is still taken into account under OS X too).


This method returns `False` if only Shift is pressed for compatibility reasons and also because pressing Shift usually doesn’t change the interpretation of key events, see [`HasAnyModifiers`](#wx.KeyboardState.HasAnyModifiers "wx.KeyboardState.HasAnyModifiers") if you want to take Shift into account as well.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def MetaDown(self) -> bool:
        """ 

`MetaDown`(*self*)[¶](#wx.KeyboardState.MetaDown "Permalink to this definition")
Returns `True` if the Meta/Windows/Apple key is pressed.


This function tests the state of the key traditionally called Meta under Unix systems, Windows keys under MSW Notice that [`GetModifiers`](#wx.KeyboardState.GetModifiers "wx.KeyboardState.GetModifiers") should usually be used instead of this one.



Return type
*bool*





See also


[`CmdDown`](#wx.KeyboardState.CmdDown "wx.KeyboardState.CmdDown")





            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def RawControlDown(self) -> bool:
        """ 

`RawControlDown`(*self*)[¶](#wx.KeyboardState.RawControlDown "Permalink to this definition")
Returns `True` if the Control key (also under macOS).


This function doesn’t distinguish between right and left control keys.


Notice that [`GetModifiers`](#wx.KeyboardState.GetModifiers "wx.KeyboardState.GetModifiers") should usually be used instead of this one.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def SetAltDown(self, down: bool) -> None:
        """ 

`SetAltDown`(*self*, *down*)[¶](#wx.KeyboardState.SetAltDown "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def SetControlDown(self, down: bool) -> None:
        """ 

`SetControlDown`(*self*, *down*)[¶](#wx.KeyboardState.SetControlDown "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def SetMetaDown(self, down: bool) -> None:
        """ 

`SetMetaDown`(*self*, *down*)[¶](#wx.KeyboardState.SetMetaDown "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def SetRawControlDown(self, down: bool) -> None:
        """ 

`SetRawControlDown`(*self*, *down*)[¶](#wx.KeyboardState.SetRawControlDown "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def SetShiftDown(self, down: bool) -> None:
        """ 

`SetShiftDown`(*self*, *down*)[¶](#wx.KeyboardState.SetShiftDown "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    def ShiftDown(self) -> bool:
        """ 

`ShiftDown`(*self*)[¶](#wx.KeyboardState.ShiftDown "Permalink to this definition")
Returns `True` if the Shift key is pressed.


This function doesn’t distinguish between right and left shift keys.


Notice that [`GetModifiers`](#wx.KeyboardState.GetModifiers "wx.KeyboardState.GetModifiers") should usually be used instead of this one.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.KeyboardState.html
        """

    altDown: Any  # `altDown`[¶](#wx.KeyboardState.altDown "Permalink to this definition")See [`AltDown`](#wx.KeyboardState.AltDown "wx.KeyboardState.AltDown") and [`SetAltDown`](#wx.KeyboardState.SetAltDown "wx.KeyboardState.SetAltDown")
    cmdDown: Any  # `cmdDown`[¶](#wx.KeyboardState.cmdDown "Permalink to this definition")See [`CmdDown`](#wx.KeyboardState.CmdDown "wx.KeyboardState.CmdDown")
    controlDown: Any  # `controlDown`[¶](#wx.KeyboardState.controlDown "Permalink to this definition")See [`ControlDown`](#wx.KeyboardState.ControlDown "wx.KeyboardState.ControlDown") and [`SetControlDown`](#wx.KeyboardState.SetControlDown "wx.KeyboardState.SetControlDown")
    metaDown: Any  # `metaDown`[¶](#wx.KeyboardState.metaDown "Permalink to this definition")See [`MetaDown`](#wx.KeyboardState.MetaDown "wx.KeyboardState.MetaDown") and [`SetMetaDown`](#wx.KeyboardState.SetMetaDown "wx.KeyboardState.SetMetaDown")
    rawControlDown: Any  # `rawControlDown`[¶](#wx.KeyboardState.rawControlDown "Permalink to this definition")See [`RawControlDown`](#wx.KeyboardState.RawControlDown "wx.KeyboardState.RawControlDown") and [`SetRawControlDown`](#wx.KeyboardState.SetRawControlDown "wx.KeyboardState.SetRawControlDown")
    shiftDown: Any  # `shiftDown`[¶](#wx.KeyboardState.shiftDown "Permalink to this definition")See [`ShiftDown`](#wx.KeyboardState.ShiftDown "wx.KeyboardState.ShiftDown") and [`SetShiftDown`](#wx.KeyboardState.SetShiftDown "wx.KeyboardState.SetShiftDown")



class KeyEvent(Event,KeyboardState):
    """ **Possible constructors**:



```
KeyEvent(keyEventType=wxEVT_NULL)

```


This event class contains information about key press and release
events.


  


        Source: https://docs.wxpython.org/wx.KeyEvent.html
    """
    def __init__(self, keyEventType: int=wxEVT_NULL) -> None:
        """ 

`__init__`(*self*, *keyEventType=wxEVT\_NULL*)[¶](#wx.KeyEvent.__init__ "Permalink to this definition")
Constructor.


Currently, the only valid event types are `wxEVT_CHAR` and `wxEVT_CHAR_HOOK` .



Parameters
**keyEventType** (*wx.EventType*) – 






            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def DoAllowNextEvent(self) -> None:
        """ 

`DoAllowNextEvent`(*self*)[¶](#wx.KeyEvent.DoAllowNextEvent "Permalink to this definition")
Allow normal key events generation.


Can be called from `wxEVT_CHAR_HOOK` handler to indicate that the generation of normal events should *not* be suppressed, as it happens by default when this event is handled.


The intended use of this method is to allow some window object to prevent `wxEVT_CHAR_HOOK` handler in its parent window from running by defining its own handler for this event. Without calling this method, this would result in not generating `wxEVT_KEY_DOWN` nor `wxEVT_CHAR` events at all but by calling it you can ensure that these events would still be generated, even if `wxEVT_CHAR_HOOK` event was handled.



New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def GetKeyCode(self) -> int:
        """ 

`GetKeyCode`(*self*)[¶](#wx.KeyEvent.GetKeyCode "Permalink to this definition")
Returns the key code of the key that generated this event.


`ASCII` symbols return normal `ASCII` values, while events from special keys such as “left cursor arrow” ( `WXK_LEFT` ) return values outside of the `ASCII` range. See  [wx.KeyCode](wx.KeyCode.enumeration.html#wx-keycode) for a full list of the virtual key codes.


Note that this method returns a meaningful value only for special non-alphanumeric keys or if the user entered a Latin-1 character (this includes `ASCII` and the accented letters found in Western European languages but not letters of other alphabets such as e.g. Cyrillic). Otherwise it simply method returns `WXK_NONE` and [`GetUnicodeKey`](#wx.KeyEvent.GetUnicodeKey "wx.KeyEvent.GetUnicodeKey") should be used to obtain the corresponding Unicode character.


Using [`GetUnicodeKey`](#wx.KeyEvent.GetUnicodeKey "wx.KeyEvent.GetUnicodeKey") is in general the right thing to do if you are interested in the characters typed by the user, [`GetKeyCode`](#wx.KeyEvent.GetKeyCode "wx.KeyEvent.GetKeyCode") should be only used for special keys (for which [`GetUnicodeKey`](#wx.KeyEvent.GetUnicodeKey "wx.KeyEvent.GetUnicodeKey") returns `WXK_NONE` ). To handle both kinds of keys you might write:



```
def OnChar(self, event):

    keycode = event.GetUnicodeKey()

    if keycode != wx.WXK_NONE:

        # It's a printable character
        wx.LogMessage("You pressed '%c'"%keycode)

    else:

        # It's a special key, deal with all the known ones:
        keycode = event.GetKeyCode()
        if keycode in [wx.WXK_LEFT, wx.WXK_RIGHT]:
            # move cursor ...
            MoveCursor()

        elif keycode == wx.WXK_F1:
            # give help ...
            GiveHelp()

```



Return type
*int*






            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.KeyEvent.GetPosition "Permalink to this definition")
Obtains the position (in client coordinates) at which the key was pressed.


Notice that under most platforms this position is simply the current mouse pointer position and has no special relationship to the key event itself.


*x* and *y* may be `None` if the corresponding coordinate is not needed.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def GetRawKeyCode(self) -> int:
        """ 

`GetRawKeyCode`(*self*)[¶](#wx.KeyEvent.GetRawKeyCode "Permalink to this definition")
Returns the raw key code for this event.


The flags are platform-dependent and should only be used if the functionality provided by other  [wx.KeyEvent](#wx-keyevent) methods is insufficient.


Under MSW, the raw key code is the value of `wParam` parameter of the corresponding message.


Under GTK, the raw key code is the `keyval` field of the corresponding `GDK` event.


Under macOS, the raw key code is the `keyCode` field of the corresponding NSEvent.



Return type
*wx.int*





Note


Currently the raw key codes are not supported by all ports, use #ifdef `HAS_RAW_KEY_CODES` to determine if this feature is available.





            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def GetRawKeyFlags(self) -> int:
        """ 

`GetRawKeyFlags`(*self*)[¶](#wx.KeyEvent.GetRawKeyFlags "Permalink to this definition")
Returns the low level key flags for this event.


The flags are platform-dependent and should only be used if the functionality provided by other  [wx.KeyEvent](#wx-keyevent) methods is insufficient.


Under MSW, the raw flags are just the value of `lParam` parameter of the corresponding message.


Under GTK, the raw flags contain the `hardware_keycode` field of the corresponding `GDK` event.


Under macOS, the raw flags contain the modifiers state.



Return type
*wx.int*





Note


Currently the raw key flags are not supported by all ports, use #ifdef `HAS_RAW_KEY_CODES` to determine if this feature is available.





            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def GetUnicodeKey(self) -> int:
        """ 

`GetUnicodeKey`(*self*)[¶](#wx.KeyEvent.GetUnicodeKey "Permalink to this definition")
Returns the Unicode character corresponding to this key event.


If the key pressed doesn’t have any character value (e.g. a cursor key) this method will return `WXK_NONE` . In this case you should use [`GetKeyCode`](#wx.KeyEvent.GetKeyCode "wx.KeyEvent.GetKeyCode") to retrieve the value of the key.


This function is only available in Unicode build, i.e. when `USE_UNICODE` is 1.



Return type
*int*






            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def GetX(self) -> 'Coord':
        """ 

`GetX`(*self*)[¶](#wx.KeyEvent.GetX "Permalink to this definition")
Returns the X position (in client coordinates) of the event.



Return type
*wx.Coord*





See also


[`GetPosition`](#wx.KeyEvent.GetPosition "wx.KeyEvent.GetPosition")





            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def GetY(self) -> 'Coord':
        """ 

`GetY`(*self*)[¶](#wx.KeyEvent.GetY "Permalink to this definition")
Returns the Y position (in client coordinates) of the event.



Return type
*wx.Coord*





See also


[`GetPosition`](#wx.KeyEvent.GetPosition "wx.KeyEvent.GetPosition")





            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def IsAutoRepeat(self) -> bool:
        """ 

`IsAutoRepeat`(*self*)[¶](#wx.KeyEvent.IsAutoRepeat "Permalink to this definition")
Returns `True` if this event is an auto-repeat of the key, `False` if this is the initial key press.



Return type
*bool*





Availability


Only available for OSX, MSW, `QT`.





            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def IsKeyInCategory(self, category: int) -> bool:
        """ 

`IsKeyInCategory`(*self*, *category*)[¶](#wx.KeyEvent.IsKeyInCategory "Permalink to this definition")
Returns `True` if the key is in the given key category.



Parameters
**category** (*int*) – A bitwise combination of named  [wx.KeyCategoryFlags](wx.KeyCategoryFlags.enumeration.html#wx-keycategoryflags) constants.



Return type
*bool*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def IsNextEventAllowed(self) -> bool:
        """ 

`IsNextEventAllowed`(*self*)[¶](#wx.KeyEvent.IsNextEventAllowed "Permalink to this definition")
Returns `True` if [`DoAllowNextEvent`](#wx.KeyEvent.DoAllowNextEvent "wx.KeyEvent.DoAllowNextEvent") had been called, `False` by default.


This method is used by wxWidgets itself to determine whether the normal key events should be generated after `wxEVT_CHAR_HOOK` processing.



Return type
*bool*





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def SetKeyCode(self, keyCode) -> None:
        """ 

`SetKeyCode`(*self*, *keyCode*)[¶](#wx.KeyEvent.SetKeyCode "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def SetRawKeyCode(self, rawKeyCode) -> None:
        """ 

`SetRawKeyCode`(*self*, *rawKeyCode*)[¶](#wx.KeyEvent.SetRawKeyCode "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def SetRawKeyFlags(self, rawFlags) -> None:
        """ 

`SetRawKeyFlags`(*self*, *rawFlags*)[¶](#wx.KeyEvent.SetRawKeyFlags "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    def SetUnicodeKey(self, uniChar) -> None:
        """ 

`SetUnicodeKey`(*self*, *uniChar*)[¶](#wx.KeyEvent.SetUnicodeKey "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.KeyEvent.html
        """

    KeyCode: int  # `KeyCode`[¶](#wx.KeyEvent.KeyCode "Permalink to this definition")See [`GetKeyCode`](#wx.KeyEvent.GetKeyCode "wx.KeyEvent.GetKeyCode") and [`SetKeyCode`](#wx.KeyEvent.SetKeyCode "wx.KeyEvent.SetKeyCode")
    Position: 'Point'  # `Position`[¶](#wx.KeyEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.KeyEvent.GetPosition "wx.KeyEvent.GetPosition")
    RawKeyCode: int  # `RawKeyCode`[¶](#wx.KeyEvent.RawKeyCode "Permalink to this definition")See [`GetRawKeyCode`](#wx.KeyEvent.GetRawKeyCode "wx.KeyEvent.GetRawKeyCode") and [`SetRawKeyCode`](#wx.KeyEvent.SetRawKeyCode "wx.KeyEvent.SetRawKeyCode")
    RawKeyFlags: int  # `RawKeyFlags`[¶](#wx.KeyEvent.RawKeyFlags "Permalink to this definition")See [`GetRawKeyFlags`](#wx.KeyEvent.GetRawKeyFlags "wx.KeyEvent.GetRawKeyFlags") and [`SetRawKeyFlags`](#wx.KeyEvent.SetRawKeyFlags "wx.KeyEvent.SetRawKeyFlags")
    UnicodeKey: int  # `UnicodeKey`[¶](#wx.KeyEvent.UnicodeKey "Permalink to this definition")See [`GetUnicodeKey`](#wx.KeyEvent.GetUnicodeKey "wx.KeyEvent.GetUnicodeKey") and [`SetUnicodeKey`](#wx.KeyEvent.SetUnicodeKey "wx.KeyEvent.SetUnicodeKey")
    X: 'Coord'  # `X`[¶](#wx.KeyEvent.X "Permalink to this definition")See [`GetX`](#wx.KeyEvent.GetX "wx.KeyEvent.GetX")
    Y: 'Coord'  # `Y`[¶](#wx.KeyEvent.Y "Permalink to this definition")See [`GetY`](#wx.KeyEvent.GetY "wx.KeyEvent.GetY")



class LanguageInfo:
    """ Encapsulates a Language identifier together with OS-specific
information related to that language.


  


        Source: https://docs.wxpython.org/wx.LanguageInfo.html
    """
    def GetCanonicalWithRegion(self) -> str:
        """ 

`GetCanonicalWithRegion`(*self*)[¶](#wx.LanguageInfo.GetCanonicalWithRegion "Permalink to this definition")
Return the canonical locale name including the region, if known.


The value is identical to `CanonicalRef` , if not empty, otherwise it is identical to `CanonicalName` .



Return type
`string`





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.LanguageInfo.html
        """

    def GetLocaleName(self) -> str:
        """ 

`GetLocaleName`(*self*)[¶](#wx.LanguageInfo.GetLocaleName "Permalink to this definition")
Return the locale name corresponding to this language usable with `setlocale()` on the current system.


If setting locale for this language is not supported, the returned string is empty.



Return type
`string`






            Source: https://docs.wxpython.org/wx.LanguageInfo.html
        """

    CanonicalName: Any  # `CanonicalName`[¶](#wx.LanguageInfo.CanonicalName "Permalink to this definition")A public C++ attribute of type `string`. Canonical name of the language, e.g. `fr_FR` .
    CanonicalRef: Any  # `CanonicalRef`[¶](#wx.LanguageInfo.CanonicalRef "Permalink to this definition")A public C++ attribute of type `string`. Canonical reference including region.
    CanonicalWithRegion: str  # `CanonicalWithRegion`[¶](#wx.LanguageInfo.CanonicalWithRegion "Permalink to this definition")See [`GetCanonicalWithRegion`](#wx.LanguageInfo.GetCanonicalWithRegion "wx.LanguageInfo.GetCanonicalWithRegion")
    Description: Any  # `Description`[¶](#wx.LanguageInfo.Description "Permalink to this definition")A public C++ attribute of type `string`. Human-readable name of the language in English.
    DescriptionNative: Any  # `DescriptionNative`[¶](#wx.LanguageInfo.DescriptionNative "Permalink to this definition")A public C++ attribute of type `string`. Human-readable name of the language in this language itself.
    Language: Any  # `Language`[¶](#wx.LanguageInfo.Language "Permalink to this definition")A public C++ attribute of type `int`.  [wx.Language](wx.Language.enumeration.html#wx-language) id.
    LayoutDirection: Any  # `LayoutDirection`[¶](#wx.LanguageInfo.LayoutDirection "Permalink to this definition")A public C++ attribute of type `LayoutDirection` . The layout direction used for this language.
    LocaleName: str  # `LocaleName`[¶](#wx.LanguageInfo.LocaleName "Permalink to this definition")See [`GetLocaleName`](#wx.LanguageInfo.GetLocaleName "wx.LanguageInfo.GetLocaleName")
    LocaleTag: Any  # `LocaleTag`[¶](#wx.LanguageInfo.LocaleTag "Permalink to this definition")A public C++ attribute of type `string`. Tag for locale in `BCP` 47-like notation.



Language: TypeAlias = int  # Enumeration

LANGUAGE_DEFAULT: int

LANGUAGE_UNKNOWN: int

LANGUAGE_ABKHAZIAN: int

LANGUAGE_AFAR: int

LANGUAGE_AFAR_DJIBOUTI: int

LANGUAGE_AFAR_ERITREA: int

LANGUAGE_AFAR_ETHIOPIA: int

LANGUAGE_AFRIKAANS: int

LANGUAGE_AFRIKAANS_NAMIBIA: int

LANGUAGE_AFRIKAANS_SOUTH_AFRICA: int

LANGUAGE_AGHEM: int

LANGUAGE_AGHEM_CAMEROON: int

LANGUAGE_AKAN: int

LANGUAGE_AKAN_GHANA: int

LANGUAGE_ALBANIAN: int

LANGUAGE_ALBANIAN_ALBANIA: int

LANGUAGE_ALBANIAN_KOSOVO: int

LANGUAGE_ALBANIAN_NORTH_MACEDONIA: int

LANGUAGE_ALSATIAN_FRANCE: int

LANGUAGE_AMHARIC: int

LANGUAGE_AMHARIC_ETHIOPIA: int

LANGUAGE_ARABIC: int

LANGUAGE_ARABIC_ALGERIA: int

LANGUAGE_ARABIC_BAHRAIN: int

LANGUAGE_ARABIC_CHAD: int

LANGUAGE_ARABIC_COMOROS: int

LANGUAGE_ARABIC_DJIBOUTI: int

LANGUAGE_ARABIC_EGYPT: int

LANGUAGE_ARABIC_ERITREA: int

LANGUAGE_ARABIC_IRAQ: int

LANGUAGE_ARABIC_ISRAEL: int

LANGUAGE_ARABIC_JORDAN: int

LANGUAGE_ARABIC_KUWAIT: int

LANGUAGE_ARABIC_LEBANON: int

LANGUAGE_ARABIC_LIBYA: int

LANGUAGE_ARABIC_MAURITANIA: int

LANGUAGE_ARABIC_MOROCCO: int

LANGUAGE_ARABIC_OMAN: int

LANGUAGE_ARABIC_PALESTINIAN_AUTHORITY: int

LANGUAGE_ARABIC_QATAR: int

LANGUAGE_ARABIC_SAUDI_ARABIA: int

LANGUAGE_ARABIC_SOMALIA: int

LANGUAGE_ARABIC_SOUTH_SUDAN: int

LANGUAGE_ARABIC_SUDAN: int

LANGUAGE_ARABIC_SYRIA: int

LANGUAGE_ARABIC_TUNISIA: int

LANGUAGE_ARABIC_UAE: int

LANGUAGE_ARABIC_WORLD: int

LANGUAGE_ARABIC_YEMEN: int

LANGUAGE_ARMENIAN: int

LANGUAGE_ARMENIAN_ARMENIA: int

LANGUAGE_ASSAMESE: int

LANGUAGE_ASSAMESE_INDIA: int

LANGUAGE_ASTURIAN: int

LANGUAGE_ASTURIAN_SPAIN: int

LANGUAGE_ASU: int

LANGUAGE_ASU_TANZANIA: int

LANGUAGE_AYMARA: int

LANGUAGE_AZERBAIJANI: int

LANGUAGE_AZERBAIJANI_CYRILLIC: int

LANGUAGE_AZERBAIJANI_CYRILLIC_AZERBAIJAN: int

LANGUAGE_AZERBAIJANI_LATIN: int

LANGUAGE_AZERBAIJANI_LATIN_AZERBAIJAN: int

LANGUAGE_BAFIA: int

LANGUAGE_BAFIA_CAMEROON: int

LANGUAGE_BAMANANKAN: int

LANGUAGE_BAMANANKAN_LATIN: int

LANGUAGE_BAMANANKAN_LATIN_MALI: int

LANGUAGE_BANGLA: int

LANGUAGE_BANGLA_BANGLADESH: int

LANGUAGE_BANGLA_INDIA: int

LANGUAGE_BASAA: int

LANGUAGE_BASAA_CAMEROON: int

LANGUAGE_BASHKIR: int

LANGUAGE_BASHKIR_RUSSIA: int

LANGUAGE_BASQUE: int

LANGUAGE_BASQUE_SPAIN: int

LANGUAGE_BELARUSIAN: int

LANGUAGE_BELARUSIAN_BELARUS: int

LANGUAGE_BEMBA: int

LANGUAGE_BEMBA_ZAMBIA: int

LANGUAGE_BENA: int

LANGUAGE_BENA_TANZANIA: int

LANGUAGE_BIHARI: int

LANGUAGE_BISLAMA: int

LANGUAGE_BLIN: int

LANGUAGE_BLIN_ERITREA: int

LANGUAGE_BODO: int

LANGUAGE_BODO_INDIA: int

LANGUAGE_BOSNIAN: int

LANGUAGE_BOSNIAN_CYRILLIC: int

LANGUAGE_BOSNIAN_CYRILLIC_BOSNIA_AND_HERZEGOVINA: int

LANGUAGE_BOSNIAN_LATIN: int

LANGUAGE_BOSNIAN_LATIN_BOSNIA_AND_HERZEGOVINA: int

LANGUAGE_BRETON: int

LANGUAGE_BRETON_FRANCE: int

LANGUAGE_BULGARIAN: int

LANGUAGE_BULGARIAN_BULGARIA: int

LANGUAGE_BURMESE: int

LANGUAGE_BURMESE_MYANMAR: int

LANGUAGE_CATALAN: int

LANGUAGE_CATALAN_ANDORRA: int

LANGUAGE_CATALAN_FRANCE: int

LANGUAGE_CATALAN_ITALY: int

LANGUAGE_CATALAN_SPAIN: int

LANGUAGE_CEBUANO: int

LANGUAGE_CEBUANO_LATIN: int

LANGUAGE_CEBUANO_LATIN_PHILIPPINES: int

LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT: int

LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_ARABIC: int

LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_ARABIC_MOROCCO: int

LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_LATIN: int

LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_LATIN_ALGERIA: int

LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_LATIN_MOROCCO: int

LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_TIFINAGH: int

LANGUAGE_CENTRAL_ATLAS_TAMAZIGHT_TIFINAGH_MOROCCO: int

LANGUAGE_CENTRAL_KURDISH: int

LANGUAGE_CENTRAL_KURDISH_IRAQ: int

LANGUAGE_CHAKMA: int

LANGUAGE_CHAKMA_CHAKMA: int

LANGUAGE_CHAKMA_CHAKMA_BANGLADESH: int

LANGUAGE_CHAKMA_CHAKMA_INDIA: int

LANGUAGE_CHECHEN: int

LANGUAGE_CHECHEN_RUSSIA: int

LANGUAGE_CHEROKEE: int

LANGUAGE_CHEROKEE_CHEROKEE: int

LANGUAGE_CHEROKEE_US: int

LANGUAGE_CHIGA: int

LANGUAGE_CHIGA_UGANDA: int

LANGUAGE_CHINESE: int

LANGUAGE_CHINESE_CHINA: int

LANGUAGE_CHINESE_HONGKONG: int

LANGUAGE_CHINESE_MACAO: int

LANGUAGE_CHINESE_SIMPLIFIED_EXPLICIT: int

LANGUAGE_CHINESE_SIMPLIFIED_HONGKONG: int

LANGUAGE_CHINESE_SIMPLIFIED_MACAO: int

LANGUAGE_CHINESE_SINGAPORE: int

LANGUAGE_CHINESE_TAIWAN: int

LANGUAGE_CHINESE_TRADITIONAL_EXPLICIT: int

LANGUAGE_CHURCH_SLAVIC: int

LANGUAGE_CHURCH_SLAVIC_RUSSIA: int

LANGUAGE_COLOGNIAN: int

LANGUAGE_COLOGNIAN_GERMANY: int

LANGUAGE_CORNISH: int

LANGUAGE_CORNISH_UK: int

LANGUAGE_CORSICAN: int

LANGUAGE_CORSICAN_FRANCE: int

LANGUAGE_CROATIAN: int

LANGUAGE_CROATIAN_BOSNIA_AND_HERZEGOVINA: int

LANGUAGE_CROATIAN_CROATIA: int

LANGUAGE_CZECH: int

LANGUAGE_CZECH_CZECHIA: int

LANGUAGE_DANISH: int

LANGUAGE_DANISH_DENMARK: int

LANGUAGE_DANISH_GREENLAND: int

LANGUAGE_DARI: int

LANGUAGE_DARI_AFGHANISTAN: int

LANGUAGE_DIVEHI: int

LANGUAGE_DIVEHI_MALDIVES: int

LANGUAGE_DUALA: int

LANGUAGE_DUALA_CAMEROON: int

LANGUAGE_DUTCH: int

LANGUAGE_DUTCH_ARUBA: int

LANGUAGE_DUTCH_BELGIAN: int

LANGUAGE_DUTCH_BONAIRE_SINT_EUSTATIUS_AND_SABA: int

LANGUAGE_DUTCH_CURACAO: int

LANGUAGE_DUTCH_NETHERLANDS: int

LANGUAGE_DUTCH_SINT_MAARTEN: int

LANGUAGE_DUTCH_SURINAME: int

LANGUAGE_DZONGKHA: int

LANGUAGE_DZONGKHA_BHUTAN: int

LANGUAGE_EDO: int

LANGUAGE_EDO_NIGERIA: int

LANGUAGE_EMBU: int

LANGUAGE_EMBU_KENYA: int

LANGUAGE_ENGLISH: int

LANGUAGE_ENGLISH_AMERICAN_SAMOA: int

LANGUAGE_ENGLISH_ANGUILLA: int

LANGUAGE_ENGLISH_ANTIGUA_AND_BARBUDA: int

LANGUAGE_ENGLISH_AUSTRALIA: int

LANGUAGE_ENGLISH_AUSTRIA: int

LANGUAGE_ENGLISH_BAHAMAS: int

LANGUAGE_ENGLISH_BARBADOS: int

LANGUAGE_ENGLISH_BELGIUM: int

LANGUAGE_ENGLISH_BELIZE: int

LANGUAGE_ENGLISH_BERMUDA: int

LANGUAGE_ENGLISH_BOTSWANA: int

LANGUAGE_ENGLISH_BRITISH_INDIAN_OCEAN_TERRITORY: int

LANGUAGE_ENGLISH_BRITISH_VIRGIN_ISLANDS: int

LANGUAGE_ENGLISH_BURUNDI: int

LANGUAGE_ENGLISH_CAMEROON: int

LANGUAGE_ENGLISH_CANADA: int

LANGUAGE_ENGLISH_CARIBBEAN: int

LANGUAGE_ENGLISH_CARIBBEAN_CB: int

LANGUAGE_ENGLISH_CAYMAN_ISLANDS: int

LANGUAGE_ENGLISH_CHRISTMAS_ISLAND: int

LANGUAGE_ENGLISH_COCOS_KEELING_ISLANDS: int

LANGUAGE_ENGLISH_COOK_ISLANDS: int

LANGUAGE_ENGLISH_CYPRUS: int

LANGUAGE_ENGLISH_DENMARK: int

LANGUAGE_ENGLISH_DOMINICA: int

LANGUAGE_ENGLISH_EIRE: int

LANGUAGE_ENGLISH_ERITREA: int

LANGUAGE_ENGLISH_ESWATINI: int

LANGUAGE_ENGLISH_EUROPE: int

LANGUAGE_ENGLISH_FALKLAND_ISLANDS: int

LANGUAGE_ENGLISH_FIJI: int

LANGUAGE_ENGLISH_FINLAND: int

LANGUAGE_ENGLISH_GAMBIA: int

LANGUAGE_ENGLISH_GERMANY: int

LANGUAGE_ENGLISH_GHANA: int

LANGUAGE_ENGLISH_GIBRALTAR: int

LANGUAGE_ENGLISH_GRENADA: int

LANGUAGE_ENGLISH_GUAM: int

LANGUAGE_ENGLISH_GUERNSEY: int

LANGUAGE_ENGLISH_GUYANA: int

LANGUAGE_ENGLISH_HONG_KONG_SAR: int

LANGUAGE_ENGLISH_INDIA: int

LANGUAGE_ENGLISH_INDONESIA: int

LANGUAGE_ENGLISH_ISLE_OF_MAN: int

LANGUAGE_ENGLISH_ISRAEL: int

LANGUAGE_ENGLISH_JAMAICA: int

LANGUAGE_ENGLISH_JERSEY: int

LANGUAGE_ENGLISH_KENYA: int

LANGUAGE_ENGLISH_KIRIBATI: int

LANGUAGE_ENGLISH_LESOTHO: int

LANGUAGE_ENGLISH_LIBERIA: int

LANGUAGE_ENGLISH_MACAO_SAR: int

LANGUAGE_ENGLISH_MADAGASCAR: int

LANGUAGE_ENGLISH_MALAWI: int

LANGUAGE_ENGLISH_MALAYSIA: int

LANGUAGE_ENGLISH_MALTA: int

LANGUAGE_ENGLISH_MARSHALL_ISLANDS: int

LANGUAGE_ENGLISH_MAURITIUS: int

LANGUAGE_ENGLISH_MICRONESIA: int

LANGUAGE_ENGLISH_MONTSERRAT: int

LANGUAGE_ENGLISH_NAMIBIA: int

LANGUAGE_ENGLISH_NAURU: int

LANGUAGE_ENGLISH_NETHERLANDS: int

LANGUAGE_ENGLISH_NEW_ZEALAND: int

LANGUAGE_ENGLISH_NIGERIA: int

LANGUAGE_ENGLISH_NIUE: int

LANGUAGE_ENGLISH_NORFOLK_ISLAND: int

LANGUAGE_ENGLISH_NORTHERN_MARIANA_ISLANDS: int

LANGUAGE_ENGLISH_PAKISTAN: int

LANGUAGE_ENGLISH_PALAU: int

LANGUAGE_ENGLISH_PAPUA_NEW_GUINEA: int

LANGUAGE_ENGLISH_PHILIPPINES: int

LANGUAGE_ENGLISH_PITCAIRN_ISLANDS: int

LANGUAGE_ENGLISH_PUERTO_RICO: int

LANGUAGE_ENGLISH_RWANDA: int

LANGUAGE_ENGLISH_SAMOA: int

LANGUAGE_ENGLISH_SEYCHELLES: int

LANGUAGE_ENGLISH_SIERRA_LEONE: int

LANGUAGE_ENGLISH_SINGAPORE: int

LANGUAGE_ENGLISH_SINT_MAARTEN: int

LANGUAGE_ENGLISH_SLOVENIA: int

LANGUAGE_ENGLISH_SOLOMON_ISLANDS: int

LANGUAGE_ENGLISH_SOUTH_AFRICA: int

LANGUAGE_ENGLISH_SOUTH_SUDAN: int

LANGUAGE_ENGLISH_ST_HELENA_ASCENSION_TRISTAN_DA_CUNHA: int

LANGUAGE_ENGLISH_ST_KITTS_AND_NEVIS: int

LANGUAGE_ENGLISH_ST_LUCIA: int

LANGUAGE_ENGLISH_ST_VINCENT_AND_GRENADINES: int

LANGUAGE_ENGLISH_SUDAN: int

LANGUAGE_ENGLISH_SWEDEN: int

LANGUAGE_ENGLISH_SWITZERLAND: int

LANGUAGE_ENGLISH_TANZANIA: int

LANGUAGE_ENGLISH_TOKELAU: int

LANGUAGE_ENGLISH_TONGA: int

LANGUAGE_ENGLISH_TRINIDAD: int

LANGUAGE_ENGLISH_TURKS_AND_CAICOS_ISLANDS: int

LANGUAGE_ENGLISH_TUVALU: int

LANGUAGE_ENGLISH_UGANDA: int

LANGUAGE_ENGLISH_UK: int

LANGUAGE_ENGLISH_UNITED_ARAB_EMIRATES: int

LANGUAGE_ENGLISH_US: int

LANGUAGE_ENGLISH_US_OUTLYING_ISLANDS: int

LANGUAGE_ENGLISH_US_VIRGIN_ISLANDS: int

LANGUAGE_ENGLISH_VANUATU: int

LANGUAGE_ENGLISH_WORLD: int

LANGUAGE_ENGLISH_ZAMBIA: int

LANGUAGE_ENGLISH_ZIMBABWE: int

LANGUAGE_ESPERANTO: int

LANGUAGE_ESPERANTO_WORLD: int

LANGUAGE_ESTONIAN: int

LANGUAGE_ESTONIAN_ESTONIA: int

LANGUAGE_EWE: int

LANGUAGE_EWE_GHANA: int

LANGUAGE_EWE_TOGO: int

LANGUAGE_EWONDO: int

LANGUAGE_EWONDO_CAMEROON: int

LANGUAGE_FAEROESE: int

LANGUAGE_FAEROESE_DENMARK: int

LANGUAGE_FAEROESE_FAROE_ISLANDS: int

LANGUAGE_FARSI: int

LANGUAGE_FIJI: int

LANGUAGE_FILIPINO: int

LANGUAGE_FILIPINO_PHILIPPINES: int

LANGUAGE_FINNISH: int

LANGUAGE_FINNISH_FINLAND: int

LANGUAGE_FRENCH: int

LANGUAGE_FRENCH_ALGERIA: int

LANGUAGE_FRENCH_BELGIAN: int

LANGUAGE_FRENCH_BENIN: int

LANGUAGE_FRENCH_BURKINA_FASO: int

LANGUAGE_FRENCH_BURUNDI: int

LANGUAGE_FRENCH_CAMEROON: int

LANGUAGE_FRENCH_CANADIAN: int

LANGUAGE_FRENCH_CARIBBEAN: int

LANGUAGE_FRENCH_CENTRAL_AFRICAN_REPUBLIC: int

LANGUAGE_FRENCH_CHAD: int

LANGUAGE_FRENCH_COMOROS: int

LANGUAGE_FRENCH_CONGO: int

LANGUAGE_FRENCH_CONGO_DRC: int

LANGUAGE_FRENCH_COTE_DIVOIRE: int

LANGUAGE_FRENCH_DJIBOUTI: int

LANGUAGE_FRENCH_EQUATORIAL_GUINEA: int

LANGUAGE_FRENCH_FRANCE: int

LANGUAGE_FRENCH_FRENCH_GUIANA: int

LANGUAGE_FRENCH_FRENCH_POLYNESIA: int

LANGUAGE_FRENCH_GABON: int

LANGUAGE_FRENCH_GUADELOUPE: int

LANGUAGE_FRENCH_GUINEA: int

LANGUAGE_FRENCH_HAITI: int

LANGUAGE_FRENCH_LUXEMBOURG: int

LANGUAGE_FRENCH_MADAGASCAR: int

LANGUAGE_FRENCH_MALI: int

LANGUAGE_FRENCH_MARTINIQUE: int

LANGUAGE_FRENCH_MAURITANIA: int

LANGUAGE_FRENCH_MAURITIUS: int

LANGUAGE_FRENCH_MAYOTTE: int

LANGUAGE_FRENCH_MONACO: int

LANGUAGE_FRENCH_MOROCCO: int

LANGUAGE_FRENCH_NEW_CALEDONIA: int

LANGUAGE_FRENCH_NIGER: int

LANGUAGE_FRENCH_REUNION: int

LANGUAGE_FRENCH_RWANDA: int

LANGUAGE_FRENCH_SENEGAL: int

LANGUAGE_FRENCH_SEYCHELLES: int

LANGUAGE_FRENCH_ST_BARTHELEMY: int

LANGUAGE_FRENCH_ST_MARTIN: int

LANGUAGE_FRENCH_ST_PIERRE_AND_MIQUELON: int

LANGUAGE_FRENCH_SWISS: int

LANGUAGE_FRENCH_SYRIA: int

LANGUAGE_FRENCH_TOGO: int

LANGUAGE_FRENCH_TUNISIA: int

LANGUAGE_FRENCH_VANUATU: int

LANGUAGE_FRENCH_WALLIS_AND_FUTUNA: int

LANGUAGE_FRISIAN: int

LANGUAGE_FRISIAN_NETHERLANDS: int

LANGUAGE_FRIULIAN: int

LANGUAGE_FRIULIAN_ITALY: int

LANGUAGE_FULAH: int

LANGUAGE_FULAH_LATIN: int

LANGUAGE_FULAH_LATIN_BURKINA_FASO: int

LANGUAGE_FULAH_LATIN_CAMEROON: int

LANGUAGE_FULAH_LATIN_GAMBIA: int

LANGUAGE_FULAH_LATIN_GHANA: int

LANGUAGE_FULAH_LATIN_GUINEA: int

LANGUAGE_FULAH_LATIN_GUINEA_BISSAU: int

LANGUAGE_FULAH_LATIN_LIBERIA: int

LANGUAGE_FULAH_LATIN_MAURITANIA: int

LANGUAGE_FULAH_LATIN_NIGER: int

LANGUAGE_FULAH_LATIN_NIGERIA: int

LANGUAGE_FULAH_LATIN_SENEGAL: int

LANGUAGE_FULAH_LATIN_SIERRA_LEONE: int

LANGUAGE_GALICIAN: int

LANGUAGE_GALICIAN_SPAIN: int

LANGUAGE_GANDA: int

LANGUAGE_GANDA_UGANDA: int

LANGUAGE_GEORGIAN: int

LANGUAGE_GEORGIAN_GEORGIA: int

LANGUAGE_GERMAN: int

LANGUAGE_GERMAN_AUSTRIAN: int

LANGUAGE_GERMAN_BELGIUM: int

LANGUAGE_GERMAN_GERMANY: int

LANGUAGE_GERMAN_ITALY: int

LANGUAGE_GERMAN_LIECHTENSTEIN: int

LANGUAGE_GERMAN_LUXEMBOURG: int

LANGUAGE_GERMAN_SWISS: int

LANGUAGE_GREEK: int

LANGUAGE_GREEK_CYPRUS: int

LANGUAGE_GREEK_GREECE: int

LANGUAGE_GREENLANDIC: int

LANGUAGE_GUARANI: int

LANGUAGE_GUARANI_PARAGUAY: int

LANGUAGE_GUJARATI: int

LANGUAGE_GUJARATI_INDIA: int

LANGUAGE_GUSII: int

LANGUAGE_GUSII_KENYA: int

LANGUAGE_HAUSA: int

LANGUAGE_HAUSA_LATIN: int

LANGUAGE_HAUSA_LATIN_GHANA: int

LANGUAGE_HAUSA_LATIN_NIGER: int

LANGUAGE_HAUSA_LATIN_NIGERIA: int

LANGUAGE_HAWAIIAN: int

LANGUAGE_HAWAIIAN_US: int

LANGUAGE_HEBREW: int

LANGUAGE_HEBREW_ISRAEL: int

LANGUAGE_HINDI: int

LANGUAGE_HINDI_INDIA: int

LANGUAGE_HUNGARIAN: int

LANGUAGE_HUNGARIAN_HUNGARY: int

LANGUAGE_IBIBIO: int

LANGUAGE_IBIBIO_NIGERIA: int

LANGUAGE_ICELANDIC: int

LANGUAGE_ICELANDIC_ICELAND: int

LANGUAGE_IGBO: int

LANGUAGE_IGBO_NIGERIA: int

LANGUAGE_INDONESIAN: int

LANGUAGE_INDONESIAN_INDONESIA: int

LANGUAGE_INTERLINGUA: int

LANGUAGE_INTERLINGUA_WORLD: int

LANGUAGE_INTERLINGUE: int

LANGUAGE_INUKTITUT: int

LANGUAGE_INUKTITUT_LATIN: int

LANGUAGE_INUKTITUT_LATIN_CANADA: int

LANGUAGE_INUKTITUT_SYLLABICS: int

LANGUAGE_INUKTITUT_SYLLABICS_CANADA: int

LANGUAGE_INUPIAK: int

LANGUAGE_IRISH: int

LANGUAGE_IRISH_IRELAND: int

LANGUAGE_ITALIAN: int

LANGUAGE_ITALIAN_ITALY: int

LANGUAGE_ITALIAN_SAN_MARINO: int

LANGUAGE_ITALIAN_SWISS: int

LANGUAGE_ITALIAN_VATICAN_CITY: int

LANGUAGE_JAPANESE: int

LANGUAGE_JAPANESE_JAPAN: int

LANGUAGE_JAVANESE: int

LANGUAGE_JAVANESE_INDONESIA: int

LANGUAGE_JAVANESE_JAVANESE: int

LANGUAGE_JAVANESE_JAVANESE_INDONESIA: int

LANGUAGE_JOLA_FONYI: int

LANGUAGE_JOLA_FONYI_SENEGAL: int

LANGUAGE_KABUVERDIANU: int

LANGUAGE_KABUVERDIANU_CABO_VERDE: int

LANGUAGE_KABYLE: int

LANGUAGE_KABYLE_ALGERIA: int

LANGUAGE_KAKO: int

LANGUAGE_KAKO_CAMEROON: int

LANGUAGE_KALAALLISUT: int

LANGUAGE_KALENJIN: int

LANGUAGE_KALENJIN_KENYA: int

LANGUAGE_KAMBA: int

LANGUAGE_KAMBA_KENYA: int

LANGUAGE_KANNADA: int

LANGUAGE_KANNADA_INDIA: int

LANGUAGE_KANURI: int

LANGUAGE_KANURI_LATIN: int

LANGUAGE_KANURI_NIGERIA: int

LANGUAGE_KASHMIRI: int

LANGUAGE_KASHMIRI_DEVANAGARI: int

LANGUAGE_KASHMIRI_DEVANAGARI_INDIA: int

LANGUAGE_KASHMIRI_INDIA: int

LANGUAGE_KASHMIRI_PERSO_ARABIC: int

LANGUAGE_KASHMIRI_PERSO_ARABIC_INDIA: int

LANGUAGE_KAZAKH: int

LANGUAGE_KAZAKH_KAZAKHSTAN: int

LANGUAGE_KHMER: int

LANGUAGE_KHMER_CAMBODIA: int

LANGUAGE_KICHE: int

LANGUAGE_KICHE_GUATEMALA: int

LANGUAGE_KICHE_LATIN: int

LANGUAGE_KIKUYU: int

LANGUAGE_KIKUYU_KENYA: int

LANGUAGE_KINYARWANDA: int

LANGUAGE_KINYARWANDA_RWANDA: int

LANGUAGE_KIRGHIZ: int

LANGUAGE_KIRGHIZ_KYRGYZSTAN: int

LANGUAGE_KIRUNDI: int

LANGUAGE_KIRUNDI_BURUNDI: int

LANGUAGE_KONKANI: int

LANGUAGE_KONKANI_INDIA: int

LANGUAGE_KOREAN: int

LANGUAGE_KOREAN_KOREA: int

LANGUAGE_KOREAN_NORTH_KOREA: int

LANGUAGE_KOYRABORO_SENNI: int

LANGUAGE_KOYRABORO_SENNI_MALI: int

LANGUAGE_KOYRA_CHIINI: int

LANGUAGE_KOYRA_CHIINI_MALI: int

LANGUAGE_KURDISH: int

LANGUAGE_KURDISH_PERSO_ARABIC_IRAN: int

LANGUAGE_KWASIO: int

LANGUAGE_KWASIO_CAMEROON: int

LANGUAGE_LAKOTA: int

LANGUAGE_LAKOTA_US: int

LANGUAGE_LANGI: int

LANGUAGE_LANGI_TANZANIA: int

LANGUAGE_LAOTHIAN: int

LANGUAGE_LAOTHIAN_LAOS: int

LANGUAGE_LATIN: int

LANGUAGE_LATIN_WORLD: int

LANGUAGE_LATVIAN: int

LANGUAGE_LATVIAN_LATVIA: int

LANGUAGE_LINGALA: int

LANGUAGE_LINGALA_ANGOLA: int

LANGUAGE_LINGALA_CENTRAL_AFRICAN_REPUBLIC: int

LANGUAGE_LINGALA_CONGO: int

LANGUAGE_LINGALA_CONGO_DRC: int

LANGUAGE_LITHUANIAN: int

LANGUAGE_LITHUANIAN_LITHUANIA: int

LANGUAGE_LOWER_SORBIAN: int

LANGUAGE_LOWER_SORBIAN_GERMANY: int

LANGUAGE_LOW_GERMAN: int

LANGUAGE_LOW_GERMAN_GERMANY: int

LANGUAGE_LOW_GERMAN_NETHERLANDS: int

LANGUAGE_LUBA_KATANGA: int

LANGUAGE_LUBA_KATANGA_CONGO_DRC: int

LANGUAGE_LUO: int

LANGUAGE_LUO_KENYA: int

LANGUAGE_LUXEMBOURGISH: int

LANGUAGE_LUXEMBOURGISH_LUXEMBOURG: int

LANGUAGE_LUYIA: int

LANGUAGE_LUYIA_KENYA: int

LANGUAGE_MACEDONIAN: int

LANGUAGE_MACEDONIAN_NORTH_MACEDONIA: int

LANGUAGE_MACHAME: int

LANGUAGE_MACHAME_TANZANIA: int

LANGUAGE_MAKHUWA_MEETTO: int

LANGUAGE_MAKHUWA_MEETTO_MOZAMBIQUE: int

LANGUAGE_MAKONDE: int

LANGUAGE_MAKONDE_TANZANIA: int

LANGUAGE_MALAGASY: int

LANGUAGE_MALAGASY_MADAGASCAR: int

LANGUAGE_MALAY: int

LANGUAGE_MALAYALAM: int

LANGUAGE_MALAYALAM_INDIA: int

LANGUAGE_MALAY_BRUNEI: int

LANGUAGE_MALAY_MALAYSIA: int

LANGUAGE_MALAY_SINGAPORE: int

LANGUAGE_MALTESE: int

LANGUAGE_MALTESE_MALTA: int

LANGUAGE_MANIPURI: int

LANGUAGE_MANIPURI_INDIA: int

LANGUAGE_MANX: int

LANGUAGE_MANX_ISLE_OF_MAN: int

LANGUAGE_MAORI: int

LANGUAGE_MAORI_NEW_ZEALAND: int

LANGUAGE_MAPUCHE: int

LANGUAGE_MAPUCHE_CHILE: int

LANGUAGE_MARATHI: int

LANGUAGE_MARATHI_INDIA: int

LANGUAGE_MASAI: int

LANGUAGE_MASAI_KENYA: int

LANGUAGE_MASAI_TANZANIA: int

LANGUAGE_MAZANDERANI: int

LANGUAGE_MAZANDERANI_IRAN: int

LANGUAGE_MERU: int

LANGUAGE_MERU_KENYA: int

LANGUAGE_META: int

LANGUAGE_META_CAMEROON: int

LANGUAGE_MOHAWK: int

LANGUAGE_MOHAWK_CANADA: int

LANGUAGE_MOLDAVIAN: int

LANGUAGE_MONGOLIAN: int

LANGUAGE_MONGOLIAN_CYRILLIC: int

LANGUAGE_MONGOLIAN_MONGOLIA: int

LANGUAGE_MONGOLIAN_TRADITIONAL: int

LANGUAGE_MONGOLIAN_TRADITIONAL_CHINA: int

LANGUAGE_MONGOLIAN_TRADITIONAL_MONGOLIA: int

LANGUAGE_MORISYEN: int

LANGUAGE_MORISYEN_MAURITIUS: int

LANGUAGE_MUNDANG: int

LANGUAGE_MUNDANG_CAMEROON: int

LANGUAGE_NAMA: int

LANGUAGE_NAMA_NAMIBIA: int

LANGUAGE_NAURU: int

LANGUAGE_NEPALI: int

LANGUAGE_NEPALI_INDIA: int

LANGUAGE_NEPALI_NEPAL: int

LANGUAGE_NGIEMBOON: int

LANGUAGE_NGIEMBOON_CAMEROON: int

LANGUAGE_NGOMBA: int

LANGUAGE_NGOMBA_CAMEROON: int

LANGUAGE_NKO: int

LANGUAGE_NKO_GUINEA: int

LANGUAGE_NORTHERN_LURI: int

LANGUAGE_NORTHERN_LURI_IRAN: int

LANGUAGE_NORTHERN_LURI_IRAQ: int

LANGUAGE_NORTH_NDEBELE: int

LANGUAGE_NORTH_NDEBELE_ZIMBABWE: int

LANGUAGE_NORWEGIAN: int

LANGUAGE_NORWEGIAN_BOKMAL: int

LANGUAGE_NORWEGIAN_BOKMAL_NORWAY: int

LANGUAGE_NORWEGIAN_BOKMAL_SVALBARD_AND_JAN_MAYEN: int

LANGUAGE_NORWEGIAN_NYNORSK: int

LANGUAGE_NORWEGIAN_NYNORSK_NORWAY: int

LANGUAGE_NUER: int

LANGUAGE_NUER_SOUTH_SUDAN: int

LANGUAGE_NYANKOLE: int

LANGUAGE_NYANKOLE_UGANDA: int

LANGUAGE_OCCITAN: int

LANGUAGE_OCCITAN_FRANCE: int

LANGUAGE_ODIA: int

LANGUAGE_ODIA_INDIA: int

LANGUAGE_OROMO: int

LANGUAGE_OROMO_ETHIOPIA: int

LANGUAGE_OROMO_KENYA: int

LANGUAGE_OSSETIC: int

LANGUAGE_OSSETIC_GEORGIA: int

LANGUAGE_OSSETIC_RUSSIA: int

LANGUAGE_PAPIAMENTO: int

LANGUAGE_PAPIAMENTO_CARIBBEAN: int

LANGUAGE_PASHTO: int

LANGUAGE_PASHTO_AFGHANISTAN: int

LANGUAGE_PASHTO_PAKISTAN: int

LANGUAGE_PERSIAN_IRAN: int

LANGUAGE_POLISH: int

LANGUAGE_POLISH_POLAND: int

LANGUAGE_PORTUGUESE: int

LANGUAGE_PORTUGUESE_ANGOLA: int

LANGUAGE_PORTUGUESE_BRAZILIAN: int

LANGUAGE_PORTUGUESE_CABO_VERDE: int

LANGUAGE_PORTUGUESE_EQUATORIAL_GUINEA: int

LANGUAGE_PORTUGUESE_GUINEA_BISSAU: int

LANGUAGE_PORTUGUESE_LUXEMBOURG: int

LANGUAGE_PORTUGUESE_MACAO_SAR: int

LANGUAGE_PORTUGUESE_MOZAMBIQUE: int

LANGUAGE_PORTUGUESE_PORTUGAL: int

LANGUAGE_PORTUGUESE_SAO_TOME_AND_PRINCIPE: int

LANGUAGE_PORTUGUESE_SWITZERLAND: int

LANGUAGE_PORTUGUESE_TIMOR_LESTE: int

LANGUAGE_PRUSSIAN: int

LANGUAGE_PRUSSIAN_WORLD: int

LANGUAGE_PUNJABI: int

LANGUAGE_PUNJABI_ARABIC: int

LANGUAGE_PUNJABI_GURMUKHI: int

LANGUAGE_PUNJABI_INDIA: int

LANGUAGE_PUNJABI_PAKISTAN: int

LANGUAGE_QUECHUA: int

LANGUAGE_QUECHUA_BOLIVIA: int

LANGUAGE_QUECHUA_ECUADOR: int

LANGUAGE_QUECHUA_MACRO: int

LANGUAGE_QUECHUA_PERU: int

LANGUAGE_RHAETO_ROMANCE: int

LANGUAGE_RHAETO_ROMANCE_SWITZERLAND: int

LANGUAGE_ROMANIAN: int

LANGUAGE_ROMANIAN_MOLDOVA: int

LANGUAGE_ROMANIAN_ROMANIA: int

LANGUAGE_ROMBO: int

LANGUAGE_ROMBO_TANZANIA: int

LANGUAGE_RUSSIAN: int

LANGUAGE_RUSSIAN_BELARUS: int

LANGUAGE_RUSSIAN_KAZAKHSTAN: int

LANGUAGE_RUSSIAN_KYRGYZSTAN: int

LANGUAGE_RUSSIAN_MOLDOVA: int

LANGUAGE_RUSSIAN_RUSSIA: int

LANGUAGE_RUSSIAN_UKRAINE: int

LANGUAGE_RWA: int

LANGUAGE_RWA_TANZANIA: int

LANGUAGE_SAHO: int

LANGUAGE_SAHO_ERITREA: int

LANGUAGE_SAKHA: int

LANGUAGE_SAKHA_RUSSIA: int

LANGUAGE_SAMBURU: int

LANGUAGE_SAMBURU_KENYA: int

LANGUAGE_SAMI: int

LANGUAGE_SAMI_FINLAND: int

LANGUAGE_SAMI_INARI: int

LANGUAGE_SAMI_INARI_FINLAND: int

LANGUAGE_SAMI_LULE: int

LANGUAGE_SAMI_LULE_NORWAY: int

LANGUAGE_SAMI_LULE_SWEDEN: int

LANGUAGE_SAMI_NORWAY: int

LANGUAGE_SAMI_SKOLT: int

LANGUAGE_SAMI_SKOLT_FINLAND: int

LANGUAGE_SAMI_SOUTHERN: int

LANGUAGE_SAMI_SOUTHERN_NORWAY: int

LANGUAGE_SAMI_SOUTHERN_SWEDEN: int

LANGUAGE_SAMI_SWEDEN: int

LANGUAGE_SAMOAN: int

LANGUAGE_SANGHO: int

LANGUAGE_SANGHO_CENTRAL_AFRICAN_REPUBLIC: int

LANGUAGE_SANGU: int

LANGUAGE_SANGU_TANZANIA: int

LANGUAGE_SANSKRIT: int

LANGUAGE_SANSKRIT_INDIA: int

LANGUAGE_SCOTS_GAELIC: int

LANGUAGE_SCOTS_GAELIC_UK: int

LANGUAGE_SENA: int

LANGUAGE_SENA_MOZAMBIQUE: int

LANGUAGE_SERBIAN: int

LANGUAGE_SERBIAN_CYRILLIC: int

LANGUAGE_SERBIAN_CYRILLIC_BOSNIA_AND_HERZEGOVINA: int

LANGUAGE_SERBIAN_CYRILLIC_KOSOVO: int

LANGUAGE_SERBIAN_CYRILLIC_MONTENEGRO: int

LANGUAGE_SERBIAN_CYRILLIC_SERBIA: int

LANGUAGE_SERBIAN_CYRILLIC_YU: int

LANGUAGE_SERBIAN_LATIN: int

LANGUAGE_SERBIAN_LATIN_BOSNIA_AND_HERZEGOVINA: int

LANGUAGE_SERBIAN_LATIN_KOSOVO: int

LANGUAGE_SERBIAN_LATIN_MONTENEGRO: int

LANGUAGE_SERBIAN_LATIN_SERBIA: int

LANGUAGE_SERBIAN_LATIN_YU: int

LANGUAGE_SERBIAN_SERBIA: int

LANGUAGE_SERBIAN_YU: int

LANGUAGE_SERBO_CROATIAN: int

LANGUAGE_SESOTHO: int

LANGUAGE_SESOTHO_LESOTHO: int

LANGUAGE_SESOTHO_SA_LEBOA: int

LANGUAGE_SESOTHO_SA_LEBOA_SOUTH_AFRICA: int

LANGUAGE_SESOTHO_SOUTH_AFRICA: int

LANGUAGE_SETSWANA: int

LANGUAGE_SETSWANA_BOTSWANA: int

LANGUAGE_SETSWANA_SOUTH_AFRICA: int

LANGUAGE_SHAMBALA: int

LANGUAGE_SHAMBALA_TANZANIA: int

LANGUAGE_SHONA: int

LANGUAGE_SHONA_LATIN: int

LANGUAGE_SHONA_LATIN_ZIMBABWE: int

LANGUAGE_SINDHI: int

LANGUAGE_SINDHI_ARABIC: int

LANGUAGE_SINDHI_DEVANAGARI: int

LANGUAGE_SINDHI_DEVANAGARI_INDIA: int

LANGUAGE_SINDHI_PAKISTAN: int

LANGUAGE_SINHALESE: int

LANGUAGE_SINHALESE_SRI_LANKA: int

LANGUAGE_SISWATI: int

LANGUAGE_SISWATI_ESWATINI: int

LANGUAGE_SISWATI_SOUTH_AFRICA: int

LANGUAGE_SLOVAK: int

LANGUAGE_SLOVAK_SLOVAKIA: int

LANGUAGE_SLOVENIAN: int

LANGUAGE_SLOVENIAN_SLOVENIA: int

LANGUAGE_SOGA: int

LANGUAGE_SOGA_UGANDA: int

LANGUAGE_SOMALI: int

LANGUAGE_SOMALI_DJIBOUTI: int

LANGUAGE_SOMALI_ETHIOPIA: int

LANGUAGE_SOMALI_KENYA: int

LANGUAGE_SOMALI_SOMALIA: int

LANGUAGE_SOUTH_NDEBELE: int

LANGUAGE_SOUTH_NDEBELE_SOUTH_AFRICA: int

LANGUAGE_SPANISH: int

LANGUAGE_SPANISH_ARGENTINA: int

LANGUAGE_SPANISH_BELIZE: int

LANGUAGE_SPANISH_BOLIVIA: int

LANGUAGE_SPANISH_BRAZIL: int

LANGUAGE_SPANISH_CHILE: int

LANGUAGE_SPANISH_COLOMBIA: int

LANGUAGE_SPANISH_COSTA_RICA: int

LANGUAGE_SPANISH_CUBA: int

LANGUAGE_SPANISH_DOMINICAN_REPUBLIC: int

LANGUAGE_SPANISH_ECUADOR: int

LANGUAGE_SPANISH_EL_SALVADOR: int

LANGUAGE_SPANISH_EQUATORIAL_GUINEA: int

LANGUAGE_SPANISH_GUATEMALA: int

LANGUAGE_SPANISH_HONDURAS: int

LANGUAGE_SPANISH_LATIN_AMERICA: int

LANGUAGE_SPANISH_MEXICAN: int

LANGUAGE_SPANISH_NICARAGUA: int

LANGUAGE_SPANISH_PANAMA: int

LANGUAGE_SPANISH_PARAGUAY: int

LANGUAGE_SPANISH_PERU: int

LANGUAGE_SPANISH_PHILIPPINES: int

LANGUAGE_SPANISH_PUERTO_RICO: int

LANGUAGE_SPANISH_SPAIN: int

LANGUAGE_SPANISH_URUGUAY: int

LANGUAGE_SPANISH_US: int

LANGUAGE_SPANISH_VENEZUELA: int

LANGUAGE_STANDARD_MOROCCAN_TAMAZIGHT: int

LANGUAGE_STANDARD_MOROCCAN_TAMAZIGHT_TIFINAGH: int

LANGUAGE_STANDARD_MOROCCAN_TAMAZIGHT_TIFINAGH_MOROCCO: int

LANGUAGE_SUNDANESE: int

LANGUAGE_SWAHILI: int

LANGUAGE_SWAHILI_CONGO_DRC: int

LANGUAGE_SWAHILI_KENYA: int

LANGUAGE_SWAHILI_TANZANIA: int

LANGUAGE_SWAHILI_UGANDA: int

LANGUAGE_SWEDISH: int

LANGUAGE_SWEDISH_ALAND_ISLANDS: int

LANGUAGE_SWEDISH_FINLAND: int

LANGUAGE_SWEDISH_SWEDEN: int

LANGUAGE_SWISS_GERMAN: int

LANGUAGE_SWISS_GERMAN_LIECHTENSTEIN: int

LANGUAGE_SWISS_GERMAN_SWITZERLAND: int

LANGUAGE_SYRIAC: int

LANGUAGE_SYRIAC_SYRIA: int

LANGUAGE_TACHELHIT: int

LANGUAGE_TACHELHIT_LATIN: int

LANGUAGE_TACHELHIT_LATIN_MOROCCO: int

LANGUAGE_TACHELHIT_TIFINAGH: int

LANGUAGE_TACHELHIT_TIFINAGH_MOROCCO: int

LANGUAGE_TAGALOG: int

LANGUAGE_TAITA: int

LANGUAGE_TAITA_KENYA: int

LANGUAGE_TAJIK: int

LANGUAGE_TAJIK_CYRILLIC: int

LANGUAGE_TAJIK_CYRILLIC_TAJIKISTAN: int

LANGUAGE_TAMIL: int

LANGUAGE_TAMIL_INDIA: int

LANGUAGE_TAMIL_MALAYSIA: int

LANGUAGE_TAMIL_SINGAPORE: int

LANGUAGE_TAMIL_SRI_LANKA: int

LANGUAGE_TASAWAQ: int

LANGUAGE_TASAWAQ_NIGER: int

LANGUAGE_TATAR: int

LANGUAGE_TATAR_RUSSIA: int

LANGUAGE_TELUGU: int

LANGUAGE_TELUGU_INDIA: int

LANGUAGE_TESO: int

LANGUAGE_TESO_KENYA: int

LANGUAGE_TESO_UGANDA: int

LANGUAGE_THAI: int

LANGUAGE_THAI_THAILAND: int

LANGUAGE_TIBETAN: int

LANGUAGE_TIBETAN_CHINA: int

LANGUAGE_TIBETAN_INDIA: int

LANGUAGE_TIGRE: int

LANGUAGE_TIGRE_ERITREA: int

LANGUAGE_TIGRINYA: int

LANGUAGE_TIGRINYA_ERITREA: int

LANGUAGE_TIGRINYA_ETHIOPIA: int

LANGUAGE_TONGA: int

LANGUAGE_TONGA_TONGA: int

LANGUAGE_TSONGA: int

LANGUAGE_TSONGA_SOUTH_AFRICA: int

LANGUAGE_TURKISH: int

LANGUAGE_TURKISH_CYPRUS: int

LANGUAGE_TURKISH_TURKEY: int

LANGUAGE_TURKMEN: int

LANGUAGE_TURKMEN_TURKMENISTAN: int

LANGUAGE_TWI: int

LANGUAGE_UIGHUR: int

LANGUAGE_UIGHUR_CHINA: int

LANGUAGE_UKRAINIAN: int

LANGUAGE_UKRAINIAN_UKRAINE: int

LANGUAGE_UPPER_SORBIAN: int

LANGUAGE_UPPER_SORBIAN_GERMANY: int

LANGUAGE_URDU: int

LANGUAGE_URDU_INDIA: int

LANGUAGE_URDU_PAKISTAN: int

LANGUAGE_UZBEK: int

LANGUAGE_UZBEK_CYRILLIC: int

LANGUAGE_UZBEK_CYRILLIC_UZBEKISTAN: int

LANGUAGE_UZBEK_LATIN: int

LANGUAGE_UZBEK_LATIN_UZBEKISTAN: int

LANGUAGE_UZBEK_PERSO_ARABIC: int

LANGUAGE_UZBEK_PERSO_ARABIC_AFGHANISTAN: int

LANGUAGE_VAI: int

LANGUAGE_VAI_LATIN: int

LANGUAGE_VAI_LATIN_LIBERIA: int

LANGUAGE_VAI_VAI: int

LANGUAGE_VAI_VAI_LIBERIA: int

LANGUAGE_VALENCIAN: int

LANGUAGE_VENDA: int

LANGUAGE_VENDA_SOUTH_AFRICA: int

LANGUAGE_VIETNAMESE: int

LANGUAGE_VIETNAMESE_VIETNAM: int

LANGUAGE_VOLAPUK: int

LANGUAGE_VOLAPUK_WORLD: int

LANGUAGE_VUNJO: int

LANGUAGE_VUNJO_TANZANIA: int

LANGUAGE_WALSER: int

LANGUAGE_WALSER_SWITZERLAND: int

LANGUAGE_WELSH: int

LANGUAGE_WELSH_UK: int

LANGUAGE_WOLAYTTA: int

LANGUAGE_WOLAYTTA_ETHIOPIA: int

LANGUAGE_WOLOF: int

LANGUAGE_WOLOF_SENEGAL: int

LANGUAGE_XHOSA: int

LANGUAGE_XHOSA_SOUTH_AFRICA: int

LANGUAGE_YANGBEN: int

LANGUAGE_YANGBEN_CAMEROON: int

LANGUAGE_YI: int

LANGUAGE_YIDDISH: int

LANGUAGE_YIDDISH_WORLD: int

LANGUAGE_YI_CHINA: int

LANGUAGE_YORUBA: int

LANGUAGE_YORUBA_BENIN: int

LANGUAGE_YORUBA_NIGERIA: int

LANGUAGE_ZARMA: int

LANGUAGE_ZARMA_NIGER: int

LANGUAGE_ZHUANG: int

LANGUAGE_ZULU: int

LANGUAGE_ZULU_SOUTH_AFRICA: int

LANGUAGE_USER_DEFINED: int

LANGUAGE_AZERI: int

LANGUAGE_AZERI_CYRILLIC: int

LANGUAGE_AZERI_LATIN: int

LANGUAGE_BENGALI: int

LANGUAGE_BENGALI_BANGLADESH: int

LANGUAGE_BENGALI_INDIA: int

LANGUAGE_BHUTANI: int

LANGUAGE_CHINESE_SIMPLIFIED: int

LANGUAGE_CHINESE_TRADITIONAL: int

LANGUAGE_CHINESE_MACAU: int

LANGUAGE_KERNEWEK: int

LANGUAGE_MALAY_BRUNEI_DARUSSALAM: int

LANGUAGE_ORIYA: int

LANGUAGE_ORIYA_INDIA: int

LANGUAGE_SPANISH_MODERN: int

LANGUAGE_CAMBODIAN: int

class LayoutConstraints(Object):
    """ **Possible constructors**:



```
LayoutConstraints()

```


  


        Source: https://docs.wxpython.org/wx.LayoutConstraints.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.LayoutConstraints.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.LayoutConstraints.html
        """

    def AreSatisfied(self) -> bool:
        """ 

`AreSatisfied`(*self*)[¶](#wx.LayoutConstraints.AreSatisfied "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.LayoutConstraints.html
        """

    def SatisfyConstraints(self, win, noChanges) -> bool:
        """ 

`SatisfyConstraints`(*self*, *win*, *noChanges*)[¶](#wx.LayoutConstraints.SatisfyConstraints "Permalink to this definition")

Parameters
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **noChanges** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.LayoutConstraints.html
        """

    bottom: Any  # `bottom`[¶](#wx.LayoutConstraints.bottom "Permalink to this definition")A public C++ attribute of type [`IndividualLayoutConstraint`](wx.IndividualLayoutConstraint.html#wx.IndividualLayoutConstraint "wx.IndividualLayoutConstraint") .
    centreX: Any  # `centreX`[¶](#wx.LayoutConstraints.centreX "Permalink to this definition")A public C++ attribute of type [`IndividualLayoutConstraint`](wx.IndividualLayoutConstraint.html#wx.IndividualLayoutConstraint "wx.IndividualLayoutConstraint") .
    centreY: Any  # `centreY`[¶](#wx.LayoutConstraints.centreY "Permalink to this definition")A public C++ attribute of type [`IndividualLayoutConstraint`](wx.IndividualLayoutConstraint.html#wx.IndividualLayoutConstraint "wx.IndividualLayoutConstraint") .
    height: Any  # `height`[¶](#wx.LayoutConstraints.height "Permalink to this definition")A public C++ attribute of type [`IndividualLayoutConstraint`](wx.IndividualLayoutConstraint.html#wx.IndividualLayoutConstraint "wx.IndividualLayoutConstraint") .
    left: Any  # `left`[¶](#wx.LayoutConstraints.left "Permalink to this definition")A public C++ attribute of type [`IndividualLayoutConstraint`](wx.IndividualLayoutConstraint.html#wx.IndividualLayoutConstraint "wx.IndividualLayoutConstraint") .
    right: Any  # `right`[¶](#wx.LayoutConstraints.right "Permalink to this definition")A public C++ attribute of type [`IndividualLayoutConstraint`](wx.IndividualLayoutConstraint.html#wx.IndividualLayoutConstraint "wx.IndividualLayoutConstraint") .
    top: Any  # `top`[¶](#wx.LayoutConstraints.top "Permalink to this definition")A public C++ attribute of type [`IndividualLayoutConstraint`](wx.IndividualLayoutConstraint.html#wx.IndividualLayoutConstraint "wx.IndividualLayoutConstraint") .
    width: Any  # `width`[¶](#wx.LayoutConstraints.width "Permalink to this definition")A public C++ attribute of type [`IndividualLayoutConstraint`](wx.IndividualLayoutConstraint.html#wx.IndividualLayoutConstraint "wx.IndividualLayoutConstraint") .



class LinuxDistributionInfo:
    """ A structure containing information about a Linux distribution as
returned by the lsb\_release utility.


  


        Source: https://docs.wxpython.org/wx.LinuxDistributionInfo.html
    """
    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.LinuxDistributionInfo.__ne__ "Permalink to this definition")

Parameters
**ldi** ([*wx.LinuxDistributionInfo*](#wx.LinuxDistributionInfo "wx.LinuxDistributionInfo")) – 






            Source: https://docs.wxpython.org/wx.LinuxDistributionInfo.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.LinuxDistributionInfo.__eq__ "Permalink to this definition")

Parameters
**ldi** ([*wx.LinuxDistributionInfo*](#wx.LinuxDistributionInfo "wx.LinuxDistributionInfo")) – 






            Source: https://docs.wxpython.org/wx.LinuxDistributionInfo.html
        """

    CodeName: Any  # `CodeName`[¶](#wx.LinuxDistributionInfo.CodeName "Permalink to this definition")A public C++ attribute of type `string`. The code name of the distribution; e.g. “jaunty”.
    Description: Any  # `Description`[¶](#wx.LinuxDistributionInfo.Description "Permalink to this definition")A public C++ attribute of type `string`. The description of the distribution; e.g. “Ubuntu 9.04”.
    Id: Any  # `Id`[¶](#wx.LinuxDistributionInfo.Id "Permalink to this definition")A public C++ attribute of type `string`. The id of the distribution; e.g. “Ubuntu”.
    Release: Any  # `Release`[¶](#wx.LinuxDistributionInfo.Release "Permalink to this definition")A public C++ attribute of type `string`. The version of the distribution; e.g. “9.04”.



class ListCtrl(Control):
    """ **Possible constructors**:



```
ListCtrl()

ListCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
         style=LC_ICON, validator=DefaultValidator, name=ListCtrlNameStr)

```


A list control presents lists in a number of formats: list view,
report view, icon view and small icon view.


  


        Source: https://docs.wxpython.org/wx.ListCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=LC\_ICON, validator=DefaultValidator, name=ListCtrlNameStr)*


Constructor, creating and showing a list control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then the window is sized appropriately.
* **style** (*long*) – Window style. See  [wx.ListCtrl](#wx-listctrl).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.ListCtrl.Create "wx.ListCtrl.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def Append(self, entry) -> None:
        """ 

`Append`(*self*, *entry*)[¶](#wx.ListCtrl.Append "Permalink to this definition")
Append an item to the list control. The *entry* parameter should be a
sequence with an item for each column




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def AppendColumn(self, heading, format=LIST_FORMAT_LEFT, width=-1) -> int:
        """ 

`AppendColumn`(*self*, *heading*, *format=LIST\_FORMAT\_LEFT*, *width=-1*)[¶](#wx.ListCtrl.AppendColumn "Permalink to this definition")
Adds a new column to the list control in report view mode.


This is just a convenient wrapper for [`InsertColumn`](#wx.ListCtrl.InsertColumn "wx.ListCtrl.InsertColumn") which adds the new column after all the existing ones without having to specify its position explicitly.



Parameters
* **heading** (*string*) –
* **format** ([*ListColumnFormat*](wx.ListColumnFormat.enumeration.html "ListColumnFormat")) –
* **width** (*int*) –



Return type
*long*





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def Arrange(self, flag: int=LIST_ALIGN_DEFAULT) -> bool:
        """ 

`Arrange`(*self*, *flag=LIST\_ALIGN\_DEFAULT*)[¶](#wx.ListCtrl.Arrange "Permalink to this definition")
Arranges the items in icon or small icon view.


This only has effect on Win32. *flag* is one of:


* `wx.LIST_ALIGN_DEFAULT`: Default alignment.
* `wx.LIST_ALIGN_LEFT`: Align to the left side of the control.
* `wx.LIST_ALIGN_TOP`: Align to the top side of the control.
* `wx.LIST_ALIGN_SNAP_TO_GRID`: Snap to grid.



Parameters
**flag** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def AssignImageList(self, imageList, which) -> None:
        """ 

`AssignImageList`(*self*, *imageList*, *which*)[¶](#wx.ListCtrl.AssignImageList "Permalink to this definition")
Sets the image list associated with the control and takes ownership of it.


Not that it is recommended to use [`SetNormalImages`](#wx.ListCtrl.SetNormalImages "wx.ListCtrl.SetNormalImages") or [`SetSmallImages`](#wx.ListCtrl.SetSmallImages "wx.ListCtrl.SetSmallImages") instead of this function in the new code.


After calling this function the control will, unlike when using [`SetImageList`](#wx.ListCtrl.SetImageList "wx.ListCtrl.SetImageList") , delete the list when destroyed. *which* must be one of `IMAGE_LIST_NORMAL` , `IMAGE_LIST_SMALL` , `IMAGE_LIST_STATE` (support for the last one is unimplemented).



Parameters
* **imageList** ([*wx.ImageList*](wx.ImageList.html#wx.ImageList "wx.ImageList")) –
* **which** (*int*) –





See also


[`SetImageList`](#wx.ListCtrl.SetImageList "wx.ListCtrl.SetImageList")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def CheckItem(self, item, check=True) -> None:
        """ 

`CheckItem`(*self*, *item*, *check=True*)[¶](#wx.ListCtrl.CheckItem "Permalink to this definition")
Check or uncheck a  [wx.ListItem](wx.ListItem.html#wx-listitem) in a control using checkboxes.


This method only works if checkboxes support had been successfully enabled using [`EnableCheckBoxes`](#wx.ListCtrl.EnableCheckBoxes "wx.ListCtrl.EnableCheckBoxes") .



Parameters
* **item** (*long*) – Item (zero-based) index.
* **check** (*bool*) – If `True`, check the item, otherwise uncheck.





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def ClearAll(self) -> None:
        """ 

`ClearAll`(*self*)[¶](#wx.ListCtrl.ClearAll "Permalink to this definition")
Deletes all items and all columns.



Note


This sends an event of type `wxEVT_LIST_DELETE_ALL_ITEMS` under all platforms.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def ClearColumnImage(self, col) -> None:
        """ 

`ClearColumnImage`(*self*, *col*)[¶](#wx.ListCtrl.ClearColumnImage "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=LC_ICON, validator=DefaultValidator, name=ListCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=LC\_ICON*, *validator=DefaultValidator*, *name=ListCtrlNameStr*)[¶](#wx.ListCtrl.Create "Permalink to this definition")
Creates the list control.


See  [wx.ListCtrl](#wx-listctrl) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def DeleteAllColumns(self) -> bool:
        """ 

`DeleteAllColumns`(*self*)[¶](#wx.ListCtrl.DeleteAllColumns "Permalink to this definition")
Delete all columns in the list control.



Return type
*bool*



Returns
`True` if all columns were successfully deleted, `False` otherwise.






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def DeleteAllItems(self) -> bool:
        """ 

`DeleteAllItems`(*self*)[¶](#wx.ListCtrl.DeleteAllItems "Permalink to this definition")
Deletes all items in the list control.


This function does *not* send the `wxEVT_LIST_DELETE_ITEM` event because deleting many items from the control would be too slow then (unlike [`wx.ListCtrl.DeleteItem`](#wx.ListCtrl.DeleteItem "wx.ListCtrl.DeleteItem") ) but it does send the special `wxEVT_LIST_DELETE_ALL_ITEMS` event if the control was not empty. If it was already empty, nothing is done and no event is sent.



Return type
*bool*



Returns
`True` if the items were successfully deleted or if the control was already empty, `False` if an error occurred while deleting the items.






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def DeleteColumn(self, col: int) -> bool:
        """ 

`DeleteColumn`(*self*, *col*)[¶](#wx.ListCtrl.DeleteColumn "Permalink to this definition")
Deletes a column.



Parameters
**col** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def DeleteItem(self, item: int) -> bool:
        """ 

`DeleteItem`(*self*, *item*)[¶](#wx.ListCtrl.DeleteItem "Permalink to this definition")
Deletes the specified item.


This function sends the `wxEVT_LIST_DELETE_ITEM` event for the item being deleted.



Parameters
**item** (*long*) – 



Return type
*bool*





See also


[`DeleteAllItems`](#wx.ListCtrl.DeleteAllItems "wx.ListCtrl.DeleteAllItems")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def EditLabel(self, item: int) -> 'TextCtrl':
        """ 

`EditLabel`(*self*, *item*)[¶](#wx.ListCtrl.EditLabel "Permalink to this definition")
Starts editing the label of the given item.


This function generates a `EVT_LIST_BEGIN_LABEL_EDIT` event which can be vetoed so that no text control will appear for in-place editing.


If the user changed the label (i.e. s/he does not press `ESC` or leave the text control without changes, a `EVT_LIST_END_LABEL_EDIT` event will be sent which can be vetoed as well.



Parameters
**item** (*long*) – 



Return type
 [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def EnableAlternateRowColours(self, enable: bool=True) -> None:
        """ 

`EnableAlternateRowColours`(*self*, *enable=True*)[¶](#wx.ListCtrl.EnableAlternateRowColours "Permalink to this definition")
Enable alternating row background colours (also called zebra striping).


This method can only be called for the control in virtual report mode, i.e. having `LC_REPORT` and `LC_VIRTUAL` styles.


When enabling alternating colours, the appropriate colour for the even rows is chosen automatically depending on the default foreground and background colours which are used for the odd rows.



Parameters
**enable** (*bool*) – If `True`, enable alternating row background colours, i.e. different colours for the odd and even rows. If `False`, disable this feature and use the same background colour for all rows.





New in version 2.9.5.




See also


[`SetAlternateRowColour`](#wx.ListCtrl.SetAlternateRowColour "wx.ListCtrl.SetAlternateRowColour")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def EnableBellOnNoMatch(self, on: bool=True) -> None:
        """ 

`EnableBellOnNoMatch`(*self*, *on=True*)[¶](#wx.ListCtrl.EnableBellOnNoMatch "Permalink to this definition")
Enable or disable a beep if there is no match for the currently entered text when searching for the item from keyboard.


The default is to not beep in this case except in wxMSW where the beep is always generated by the native control and cannot be disabled, i.e. calls to this function do nothing there.



Parameters
**on** (*bool*) – 





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def EnableCheckBoxes(self, enable: bool=True) -> bool:
        """ 

`EnableCheckBoxes`(*self*, *enable=True*)[¶](#wx.ListCtrl.EnableCheckBoxes "Permalink to this definition")
Enable or disable checkboxes for list items.



Parameters
**enable** (*bool*) – If `True`, enable checkboxes, otherwise disable checkboxes.



Return type
*bool*




In a list control with `wx.LC_VIRTUAL` style you have to keep track of the checkbox state. When a checkbox is clicked (`EVT_LIST_ITEM_CHECKED` or `EVT_LIST_ITEM_UNCHECKED`) you have to update the state and refresh the item yourself.



Returns
`True` if checkboxes are supported, `False` otherwise.





New in version 4.1/wxWidgets-3.1.0.




See also


[`OnGetItemIsChecked`](#wx.ListCtrl.OnGetItemIsChecked "wx.ListCtrl.OnGetItemIsChecked") [`RefreshItem`](#wx.ListCtrl.RefreshItem "wx.ListCtrl.RefreshItem")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def EnableSystemTheme(self, enable: bool=True) -> None:
        """ 

`EnableSystemTheme`(*self*, *enable=True*)[¶](#wx.ListCtrl.EnableSystemTheme "Permalink to this definition")
Can be used to disable the system theme of controls using it by default.


On Windows there an alternative theme available for the list and list-like
controls since Windows Vista. This theme is used by Windows Explorer list
and tree view and so is arguably more familiar to the users than the standard
appearance of these controls. This class automatically uses the new theme,
but if that is not desired then this method can be used to turn it off.


Please note that this method should be called before the widget is
actually created, using the 2-phase create pattern. Something like this:



```
# This creates the object, but not the window
widget = wx.ListCtrl()

# Disable the system theme
widget.EnableSystemTheme(False)

# Now create the window
widget.Create(parent, wx.``wx.ID_ANY``)

```


This method has no effect on other platorms



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def EnsureVisible(self, item: int) -> bool:
        """ 

`EnsureVisible`(*self*, *item*)[¶](#wx.ListCtrl.EnsureVisible "Permalink to this definition")
Ensures this item is visible.



Parameters
**item** (*long*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def ExtendRulesAndAlternateColour(self, extend: bool=True) -> None:
        """ 

`ExtendRulesAndAlternateColour`(*self*, *extend=True*)[¶](#wx.ListCtrl.ExtendRulesAndAlternateColour "Permalink to this definition")
Extend rules and alternate rows background to the entire client area.


By default, the rules (when enabled with `wx.LC_HRULES` and `wx.LC_VRULES`) and alternate row background (when [`EnableAlternateRowColours`](#wx.ListCtrl.EnableAlternateRowColours "wx.ListCtrl.EnableAlternateRowColours") was called) are only shown in the part of the control occupied by the items, which can be smaller than the entire window if there are few items in the control.


Calling this function extends the display of the rules and alternate background rows to the entire client area.


Similarly to [`EnableAlternateRowColours`](#wx.ListCtrl.EnableAlternateRowColours "wx.ListCtrl.EnableAlternateRowColours") , this method can only be used with controls having `LC_REPORT` and `LC_VIRTUAL` styles.


Note that this method is currently not implemented in the native MSW version and does nothing there.



Parameters
**extend** (*bool*) – if `True`, draws horizontal rules and vertical rules on empty rows and uses the colour parameter to paint the background of alternate rows when those rows are blank, empty, with no data.





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def FindItem(self, *args, **kw) -> int:
        """ 

`FindItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListCtrl.FindItem "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FindItem** *(self, start, str, partial=False)*


Find an item whose label matches this string, starting from start or the beginning if start is `-1` .


The string comparison is case insensitive.


If *partial* is `True` then this method will look for items which begin with *str*.



Parameters
* **start** (*long*) –
* **str** (*string*) –
* **partial** (*bool*) –



Return type
*long*



Returns
The next matching item if any or `-1` (wx``wx.NOT\_FOUND``) otherwise.






---

  



**FindItem** *(self, start, data)*


Find an item whose data matches this data, starting from start or the beginning if ‘start’ is `-1` .




---

  



**FindItem** *(self, start, pt, direction)*


Find an item nearest this position in the specified direction, starting from *start* or the beginning if *start* is -1.




---

  





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def Focus(self, idx) -> None:
        """ 

`Focus`(*self*, *idx*)[¶](#wx.ListCtrl.Focus "Permalink to this definition")
Focus and show the given item.




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetAlternateRowColour(self) -> 'Colour':
        """ 

`GetAlternateRowColour`(*self*)[¶](#wx.ListCtrl.GetAlternateRowColour "Permalink to this definition")
Get the alternative row background colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





New in version 4.1/wxWidgets-3.1.0.




See also


[`SetAlternateRowColour`](#wx.ListCtrl.SetAlternateRowColour "wx.ListCtrl.SetAlternateRowColour")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ListCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetColumn(self, col) -> 'ListItem':
        """ 

`GetColumn`(*self*, *col*)[¶](#wx.ListCtrl.GetColumn "Permalink to this definition")
Gets information about this column. See SetItem() for more information.



Return type
 [wx.ListItem](wx.ListItem.html#wx-listitem)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetColumnCount(self) -> int:
        """ 

`GetColumnCount`(*self*)[¶](#wx.ListCtrl.GetColumnCount "Permalink to this definition")
Returns the number of columns.


The control can have multiple columns only in `wx.LC_REPORT` mode. In `wx.LC_LIST` mode this function returns 1, as a list is still considered to have a (single) column. In `wx.LC_SMALL_ICON` and `wx.LC_ICON` modes, it returns 0 as there are no columns at all.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetColumnIndexFromOrder(self, pos: int) -> int:
        """ 

`GetColumnIndexFromOrder`(*self*, *pos*)[¶](#wx.ListCtrl.GetColumnIndexFromOrder "Permalink to this definition")
Gets the column index from its position in visual order.


After calling [`SetColumnsOrder`](#wx.ListCtrl.SetColumnsOrder "wx.ListCtrl.SetColumnsOrder") , the index returned by this function corresponds to the value of the element number *pos* in the array returned by [`GetColumnsOrder`](#wx.ListCtrl.GetColumnsOrder "wx.ListCtrl.GetColumnsOrder") .



Parameters
**pos** (*int*) – 



Return type
*int*





Note


This function makes sense for report view only and currently is only implemented in the wxMSW port. Use `HAS_LISTCTRL_COLUMN_ORDER` to guard uses of this function so that they will start working under the other platforms when support for the column reordering is added there.




See also


[`GetColumnOrder`](#wx.ListCtrl.GetColumnOrder "wx.ListCtrl.GetColumnOrder")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetColumnOrder(self, col: int) -> int:
        """ 

`GetColumnOrder`(*self*, *col*)[¶](#wx.ListCtrl.GetColumnOrder "Permalink to this definition")
Gets the column visual order position.


This function returns the index of the column which appears at the given visual position, e.g. calling it with *col* equal to 0 returns the index of the first shown column.



Parameters
**col** (*int*) – 



Return type
*int*





Note


This function makes sense for report view only and currently is only implemented in the wxMSW port. Use `HAS_LISTCTRL_COLUMN_ORDER` to guard uses of this function so that they will start working under the other platforms when support for the column reordering is added there.




See also


[`GetColumnsOrder`](#wx.ListCtrl.GetColumnsOrder "wx.ListCtrl.GetColumnsOrder") , [`GetColumnIndexFromOrder`](#wx.ListCtrl.GetColumnIndexFromOrder "wx.ListCtrl.GetColumnIndexFromOrder")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetColumnWidth(self, col: int) -> int:
        """ 

`GetColumnWidth`(*self*, *col*)[¶](#wx.ListCtrl.GetColumnWidth "Permalink to this definition")
Gets the column width (report view only).



Parameters
**col** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetColumnsOrder(self) -> int:
        """ 

`GetColumnsOrder`(*self*)[¶](#wx.ListCtrl.GetColumnsOrder "Permalink to this definition")
Returns the array containing the orders of all columns.


On error, an empty array is returned.



Return type
*list of integers*





Note


This function makes sense for report view only and currently is only implemented in the wxMSW port. Use `HAS_LISTCTRL_COLUMN_ORDER` to guard uses of this function so that they will start working under the other platforms when support for the column reordering is added there.




See also


[`GetColumnOrder`](#wx.ListCtrl.GetColumnOrder "wx.ListCtrl.GetColumnOrder") , [`GetColumnIndexFromOrder`](#wx.ListCtrl.GetColumnIndexFromOrder "wx.ListCtrl.GetColumnIndexFromOrder")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetCountPerPage(self) -> int:
        """ 

`GetCountPerPage`(*self*)[¶](#wx.ListCtrl.GetCountPerPage "Permalink to this definition")
Gets the number of items that can fit vertically in the visible area of the list control (list or report view) or the total number of items in the list control (icon or small icon view).



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetEditControl(self) -> 'TextCtrl':
        """ 

`GetEditControl`(*self*)[¶](#wx.ListCtrl.GetEditControl "Permalink to this definition")
Returns the edit control being currently used to edit a label.


Returns `None` if no label is being edited.



Return type
 [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl)





Note


It is currently only implemented for wxMSW and the generic version, not for the native macOS version.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetFirstSelected(self, *args) -> int:
        """ 

`GetFirstSelected`(*self*, *\*args*)[¶](#wx.ListCtrl.GetFirstSelected "Permalink to this definition")
Returns the first selected item, or -1 when none is selected.




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetFocusedItem(self) -> int:
        """ 

`GetFocusedItem`(*self*)[¶](#wx.ListCtrl.GetFocusedItem "Permalink to this definition")
Gets the currently focused item or -1 if none is focused.




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetImageList(self, which: int) -> 'ImageList':
        """ 

`GetImageList`(*self*, *which*)[¶](#wx.ListCtrl.GetImageList "Permalink to this definition")
Returns the specified image list.


*which* may be one of:


* `wx.IMAGE_LIST_NORMAL`: The normal (large icon) image list.
* `wx.IMAGE_LIST_SMALL`: The small icon image list.
* `wx.IMAGE_LIST_STATE`: The user-defined state image list (unimplemented).



Parameters
**which** (*int*) – 



Return type
 [wx.ImageList](wx.ImageList.html#wx-imagelist)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItem(self, itemIdx, col=0) -> 'ListItem':
        """ 

`GetItem`(*self*, *itemIdx*, *col=0*)[¶](#wx.ListCtrl.GetItem "Permalink to this definition")
Gets information about the item. See SetItem() for more information.



Return type
 [wx.ListItem](wx.ListItem.html#wx-listitem)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemBackgroundColour(self, item: int) -> 'Colour':
        """ 

`GetItemBackgroundColour`(*self*, *item*)[¶](#wx.ListCtrl.GetItemBackgroundColour "Permalink to this definition")
Returns the colour for this item.


If the item has no specific colour, returns an invalid colour (and not the default background colour of the control itself).



Parameters
**item** (*long*) – 



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





See also


[`GetItemTextColour`](#wx.ListCtrl.GetItemTextColour "wx.ListCtrl.GetItemTextColour")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemCount(self) -> int:
        """ 

`GetItemCount`(*self*)[¶](#wx.ListCtrl.GetItemCount "Permalink to this definition")
Returns the number of items in the list control.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemData(self, item: int) -> int:
        """ 

`GetItemData`(*self*, *item*)[¶](#wx.ListCtrl.GetItemData "Permalink to this definition")
Gets the application-defined data associated with this item.



Parameters
**item** (*long*) – 



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemFont(self, item: int) -> 'Font':
        """ 

`GetItemFont`(*self*, *item*)[¶](#wx.ListCtrl.GetItemFont "Permalink to this definition")
Returns the item’s font.



Parameters
**item** (*long*) – 



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemPosition(self, item) -> 'Point':
        """ 

`GetItemPosition`(*self*, *item*)[¶](#wx.ListCtrl.GetItemPosition "Permalink to this definition")
Returns the position of the item, in icon or small icon view.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemRect(self, item, code=LIST_RECT_BOUNDS) -> 'Rect':
        """ 

`GetItemRect`(*self*, *item*, *code=LIST\_RECT\_BOUNDS*)[¶](#wx.ListCtrl.GetItemRect "Permalink to this definition")

> Returns the rectangle representing the item’s size and position, in physical coordinates.
> code is one of wx.``wx.LIST\_RECT\_BOUNDS``, wx.``wx.LIST\_RECT\_ICON``, wx.``wx.LIST\_RECT\_LABEL``.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemSpacing(self) -> 'Size':
        """ 

`GetItemSpacing`(*self*)[¶](#wx.ListCtrl.GetItemSpacing "Permalink to this definition")
Retrieves the spacing between icons in pixels: horizontal spacing is returned as `x` component of the  [wx.Size](wx.Size.html#wx-size) object and the vertical spacing as its `y` component.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemState(self, item, stateMask) -> int:
        """ 

`GetItemState`(*self*, *item*, *stateMask*)[¶](#wx.ListCtrl.GetItemState "Permalink to this definition")
Gets the item state.


For a list of state flags, see [`SetItem`](#wx.ListCtrl.SetItem "wx.ListCtrl.SetItem") . The *stateMask* indicates which state flags are of interest.



Parameters
* **item** (*long*) –
* **stateMask** (*long*) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemText(self, item, col=0) -> str:
        """ 

`GetItemText`(*self*, *item*, *col=0*)[¶](#wx.ListCtrl.GetItemText "Permalink to this definition")
Gets the item text for this item.



Parameters
* **item** (*long*) – Item (zero-based) index.
* **col** (*int*) – Item column (zero-based) index. Column 0 is the default. This parameter is new in wxWidgets 2.9.1.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetItemTextColour(self, item: int) -> 'Colour':
        """ 

`GetItemTextColour`(*self*, *item*)[¶](#wx.ListCtrl.GetItemTextColour "Permalink to this definition")
Returns the colour for this item.


If the item has no specific colour, returns an invalid colour (and not the default foreground colour of the control itself as this wouldn’t allow distinguishing between items having the same colour as the current control foreground and items with default colour which, hence, have always the same colour as the control).



Parameters
**item** (*long*) – 



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetMainWindow(self) -> 'Window':
        """ 

`GetMainWindow`(*self*)[¶](#wx.ListCtrl.GetMainWindow "Permalink to this definition")

Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetNextItem(self, item, geometry=LIST_NEXT_ALL, state=LIST_STATE_DONTCARE) -> int:
        """ 

`GetNextItem`(*self*, *item*, *geometry=LIST\_NEXT\_ALL*, *state=LIST\_STATE\_DONTCARE*)[¶](#wx.ListCtrl.GetNextItem "Permalink to this definition")
Searches for an item with the given geometry or state, starting from *item* but excluding the *item* itself.


If *item* is -1, the first item that matches the specified flags will be returned. Returns the first item with given state following *item* or -1 if no such item found. This function may be used to find all selected items in the control like this:



```
item = -1

while 1:
    item = listctrl.GetNextItem(item,
                                wx.LIST_NEXT_ALL,
                                wx.LIST_STATE_SELECTED)
    if item == -1:
        break

    # This item is selected - do whatever is needed with it
    wx.LogMessage("Item %ld is selected"%item)

```


*geometry* can be one of:


* `wx.LIST_NEXT_ABOVE`: Searches for an item above the specified item.
* `wx.LIST_NEXT_ALL`: Searches for subsequent item by index.
* `wx.LIST_NEXT_BELOW`: Searches for an item below the specified item.
* `wx.LIST_NEXT_LEFT`: Searches for an item to the left of the specified item.
* `wx.LIST_NEXT_RIGHT`: Searches for an item to the right of the specified item.


*state* can be a bitlist of the following:


* `wx.LIST_STATE_DONTCARE`: Don’t care what the state is.
* `wx.LIST_STATE_DROPHILITED`: The item indicates it is a drop target.
* `wx.LIST_STATE_FOCUSED`: The item has the focus.
* `wx.LIST_STATE_SELECTED`: The item is selected.
* `wx.LIST_STATE_CUT`: The item is selected as part of a cut and paste operation.



Parameters
* **item** (*long*) –
* **geometry** (*int*) –
* **state** (*int*) –



Return type
*long*





Note


this parameter is only supported by wxMSW currently and ignored on other platforms.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetNextSelected(self, item) -> int:
        """ 

`GetNextSelected`(*self*, *item*)[¶](#wx.ListCtrl.GetNextSelected "Permalink to this definition")
Returns subsequent selected items, or -1 when no more are selected.




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetSelectedItemCount(self) -> int:
        """ 

`GetSelectedItemCount`(*self*)[¶](#wx.ListCtrl.GetSelectedItemCount "Permalink to this definition")
Returns the number of selected items in the list control.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetSortIndicator(self) -> int:
        """ 

`GetSortIndicator`(*self*)[¶](#wx.ListCtrl.GetSortIndicator "Permalink to this definition")
Returns the column that shows the sort indicator.


Can return `-1` if there is no sort indicator currently shown.



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetSubItemRect(self, item, subItem, rect, code=LIST_RECT_BOUNDS) -> bool:
        """ 

`GetSubItemRect`(*self*, *item*, *subItem*, *rect*, *code=LIST\_RECT\_BOUNDS*)[¶](#wx.ListCtrl.GetSubItemRect "Permalink to this definition")
Returns the rectangle representing the size and position, in physical coordinates, of the given subitem, i.e.


the part of the row *item* in the column *subItem*.


This method is only meaningful when the  [wx.ListCtrl](#wx-listctrl) is in the report mode. If *subItem* parameter is equal to the special value `LIST_GETSUBITEMRECT_WHOLEITEM` the return value is the same as for [`GetItemRect`](#wx.ListCtrl.GetItemRect "wx.ListCtrl.GetItemRect") .


`code` can be one of `LIST_RECT_BOUNDS` , `LIST_RECT_ICON` or `LIST_RECT_LABEL` .


Note that using `LIST_RECT_ICON` with any sub-item but the first one isn’t very useful as only the first sub-item can have an icon in  [wx.ListCtrl](#wx-listctrl). In this case, i.e. for `subItem` > 0, this function simply returns an empty rectangle in *rect*.



Parameters
* **item** (*long*) –
* **subItem** (*long*) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **code** (*int*) –



Return type
*bool*





New in version 2.7.0.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetTextColour(self) -> 'Colour':
        """ 

`GetTextColour`(*self*)[¶](#wx.ListCtrl.GetTextColour "Permalink to this definition")
Gets the text colour of the list control.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetTopItem(self) -> int:
        """ 

`GetTopItem`(*self*)[¶](#wx.ListCtrl.GetTopItem "Permalink to this definition")
Gets the index of the topmost visible item when in list or report view.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetUpdatedAscendingSortIndicator(self, col: int) -> bool:
        """ 

`GetUpdatedAscendingSortIndicator`(*self*, *col*)[¶](#wx.ListCtrl.GetUpdatedAscendingSortIndicator "Permalink to this definition")
Returns the new value to use for sort indicator after clicking a column.


This helper function can be useful in the `EVT_LIST_COL_CLICK` handler when it updates the sort indicator after the user clicked on a column.


For example:



```
def OnColClick(self, event):
    col = event.GetColumn()
    if col == -1:
        return # clicked outside any column.

    ascending = self.GetUpdatedAscendingSortIndicator(col)
    self.SortItems(self.MyCompareFunction, ascending)
    self.ShowSortIndicator(col, ascending)

```



Parameters
**col** (*int*) – 



Return type
*bool*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def GetViewRect(self) -> 'Rect':
        """ 

`GetViewRect`(*self*)[¶](#wx.ListCtrl.GetViewRect "Permalink to this definition")
Returns the rectangle taken by all items in the control.


In other words, if the controls client size were equal to the size of this rectangle, no scrollbars would be needed and no free space would be left.


Note that this function only works in the icon and small icon views, not in list or report views (this is a limitation of the native Win32 control).



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def HasCheckBoxes(self) -> bool:
        """ 

`HasCheckBoxes`(*self*)[¶](#wx.ListCtrl.HasCheckBoxes "Permalink to this definition")
Returns `True` if checkboxes are enabled for list items.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.0.




See also


[`EnableCheckBoxes`](#wx.ListCtrl.EnableCheckBoxes "wx.ListCtrl.EnableCheckBoxes")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def HasColumnOrderSupport(self) -> bool:
        """ 

`HasColumnOrderSupport`(*self*)[¶](#wx.ListCtrl.HasColumnOrderSupport "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def HitTest(self, point) -> None:
        """ 

`HitTest`(*self*, *point*)[¶](#wx.ListCtrl.HitTest "Permalink to this definition")
Determines which item (if any) is at the specified point, giving details in *flags*.


Returns index of the item or `NOT_FOUND` if no item is at the specified point.


*flags* will be a combination of the following flags:


* `wx.LIST_HITTEST_ABOVE`: Above the control’s client area.
* `wx.LIST_HITTEST_BELOW`: Below the control’s client area.
* `wx.LIST_HITTEST_TOLEFT`: To the left of the control’s client area.
* `wx.LIST_HITTEST_TORIGHT`: To the right of the control’s client area.
* `wx.LIST_HITTEST_NOWHERE`: Inside the control’s client area but not over an item.
* `wx.LIST_HITTEST_ONITEMICON`: Over an item’s icon.
* `wx.LIST_HITTEST_ONITEMLABEL`: Over an item’s text.
* `wx.LIST_HITTEST_ONITEMSTATEICON`: Over the checkbox of an item.
* `wx.LIST_HITTEST_ONITEM`: Combination of `LIST_HITTEST_ONITEMICON` , `LIST_HITTEST_ONITEMLABEL` , `LIST_HITTEST_ONITEMSTATEICON` .


If *ptrSubItem* is not `None` and the  [wx.ListCtrl](#wx-listctrl) is in the report mode the subitem (or column) number will also be provided. This feature is only available in version 2.7.0 or higher and is currently only implemented under wxMSW and requires at least comctl32.dll of version 4.70 on the host system or the value stored in *ptrSubItem* will be always -1. To compile this feature into wxWidgets library you need to have access to commctrl.h of version 4.70 that is provided by Microsoft.




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def HitTestSubItem(self, point) -> tuple:
        """ 

`HitTestSubItem`(*self*, *point*)[¶](#wx.ListCtrl.HitTestSubItem "Permalink to this definition")
Determines which item (if any) is at the specified point, giving details in flags.



Return type
*tuple*



Returns
( *item*, *flags*, *subitem* )






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def InReportView(self) -> bool:
        """ 

`InReportView`(*self*)[¶](#wx.ListCtrl.InReportView "Permalink to this definition")
Returns `True` if the control is currently using `LC_REPORT` style.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def InsertColumn(self, *args, **kw) -> int:
        """ 

`InsertColumn`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListCtrl.InsertColumn "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**InsertColumn** *(self, col, info)*


For report view mode (only), inserts a column.


For more details, see [`SetItem`](#wx.ListCtrl.SetItem "wx.ListCtrl.SetItem") . Also see [`InsertColumn`](#wx.ListCtrl.InsertColumn "wx.ListCtrl.InsertColumn") overload for a usually more convenient alternative to this method and the description of how the item width is interpreted by this method.



Parameters
* **col** (*long*) –
* **info** ([*wx.ListItem*](wx.ListItem.html#wx.ListItem "wx.ListItem")) –



Return type
*long*






---

  



**InsertColumn** *(self, col, heading, format=LIST\_FORMAT\_LEFT, width=LIST\_AUTOSIZE)*


For report view mode (only), inserts a column.


Insert a new column in the list control in report view mode at the given position specifying its most common attributes.


Notice that to set the image for the column you need to use [`InsertColumn`](#wx.ListCtrl.InsertColumn "wx.ListCtrl.InsertColumn") overload and specify `LIST_MASK_IMAGE` in the item mask.



Parameters
* **col** (*long*) – The index where the column should be inserted. Valid indices are from 0 up to [`GetColumnCount`](#wx.ListCtrl.GetColumnCount "wx.ListCtrl.GetColumnCount") inclusive and the latter can be used to append the new column after the last existing one.
* **heading** (*string*) – The string specifying the column heading.
* **format** (*int*) – The flags specifying the control heading text alignment.
* **width** (*int*) – If positive, the width of the column in pixels. Otherwise it can be `LIST_AUTOSIZE` to choose the default size for the column or `LIST_AUTOSIZE_USEHEADER` to fit the column width to *heading* or to extend to fill all the remaining space for the last column. Notice that in case of `LIST_AUTOSIZE` fixed width is used as there are no items in this column to use for determining its best size yet. If you want to fit the column to its contents, use [`SetColumnWidth`](#wx.ListCtrl.SetColumnWidth "wx.ListCtrl.SetColumnWidth") after adding the items with values in this column.



Return type
*long*



Returns
The index of the inserted column or -1 if adding it failed.






---

  





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def InsertItem(self, *args, **kw) -> int:
        """ 

`InsertItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListCtrl.InsertItem "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**InsertItem** *(self, info)*


Inserts an item, returning the index of the new item if successful, -1 otherwise.



Parameters
**info** ([*wx.ListItem*](wx.ListItem.html#wx.ListItem "wx.ListItem")) –  [wx.ListItem](wx.ListItem.html#wx-listitem) object



Return type
*long*






---

  



**InsertItem** *(self, index, label)*


Insert a string item.



Parameters
* **index** (*long*) – Index of the new item, supplied by the application
* **label** (*string*) – String label



Return type
*long*






---

  



**InsertItem** *(self, index, imageIndex)*


Insert an image item.



Parameters
* **index** (*long*) – Index of the new item, supplied by the application
* **imageIndex** (*int*) – Index into the image list associated with this control and view style



Return type
*long*






---

  



**InsertItem** *(self, index, label, imageIndex)*


Insert an image/string item.



Parameters
* **index** (*long*) – Index of the new item, supplied by the application
* **label** (*string*) – String label
* **imageIndex** (*int*) – Index into the image list associated with this control and view style



Return type
*long*






---

  





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def IsAscendingSortIndicator(self) -> bool:
        """ 

`IsAscendingSortIndicator`(*self*)[¶](#wx.ListCtrl.IsAscendingSortIndicator "Permalink to this definition")
Returns `True` if the sort indicator direction is ascending, `False` when the direction is descending.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.ListCtrl.IsEmpty "Permalink to this definition")
Returns `True` if the control doesn’t currently contain any items.


Note that the control with some columns is still considered to be empty if it has no rows.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def IsItemChecked(self, item: int) -> bool:
        """ 

`IsItemChecked`(*self*, *item*)[¶](#wx.ListCtrl.IsItemChecked "Permalink to this definition")
Return `True` if the checkbox for the given  [wx.ListItem](wx.ListItem.html#wx-listitem) is checked.


Always returns `False` if checkboxes support hadn’t been enabled.



Parameters
**item** (*long*) – Item (zero-based) index.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def IsSelected(self, idx) -> bool:
        """ 

`IsSelected`(*self*, *idx*)[¶](#wx.ListCtrl.IsSelected "Permalink to this definition")
Returns `True` if the item is selected.




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def IsVirtual(self) -> bool:
        """ 

`IsVirtual`(*self*)[¶](#wx.ListCtrl.IsVirtual "Permalink to this definition")
Returns `True` if the control is currently in virtual report view.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def IsVisible(self, item: int) -> bool:
        """ 

`IsVisible`(*self*, *item*)[¶](#wx.ListCtrl.IsVisible "Permalink to this definition")
Check if the item is visible.


An item is considered visible if at least one pixel of it is present on the screen.



Parameters
**item** (*long*) – 



Return type
*bool*





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def OnGetItemAttr(self, item: int) -> Optional['ItemAttr']:
        """ 

`OnGetItemAttr`(*self*, *item*)[¶](#wx.ListCtrl.OnGetItemAttr "Permalink to this definition")
This function may be overridden in the derived class for a control with `LC_VIRTUAL` style.


It should return the attribute for the specified `item` or `None` to use the default appearance parameters.


 [wx.ListCtrl](#wx-listctrl) will not delete the pointer or keep a reference of it. You can return the same  [wx.ItemAttr](wx.ItemAttr.html#wx-itemattr) pointer for every [`OnGetItemAttr`](#wx.ListCtrl.OnGetItemAttr "wx.ListCtrl.OnGetItemAttr") call.


The base class version always returns `None`.



Parameters
**item** (*long*) – 



Return type
 [wx.ItemAttr](wx.ItemAttr.html#wx-itemattr)





See also


[`OnGetItemImage`](#wx.ListCtrl.OnGetItemImage "wx.ListCtrl.OnGetItemImage") , [`OnGetItemColumnImage`](#wx.ListCtrl.OnGetItemColumnImage "wx.ListCtrl.OnGetItemColumnImage") , [`OnGetItemText`](#wx.ListCtrl.OnGetItemText "wx.ListCtrl.OnGetItemText") , `OnGetItemColumnAttr` , [`OnGetItemIsChecked`](#wx.ListCtrl.OnGetItemIsChecked "wx.ListCtrl.OnGetItemIsChecked")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def OnGetItemColumnImage(self, item, column) -> int:
        """ 

`OnGetItemColumnImage`(*self*, *item*, *column*)[¶](#wx.ListCtrl.OnGetItemColumnImage "Permalink to this definition")
Override this function in the derived class for a control with `LC_VIRTUAL` and `LC_REPORT` styles in order to specify the image index for the given line and column.


The base class version always calls [`OnGetItemImage`](#wx.ListCtrl.OnGetItemImage "wx.ListCtrl.OnGetItemImage") for the first column, else it returns -1.



Parameters
* **item** (*long*) –
* **column** (*long*) –



Return type
*int*





See also


[`OnGetItemText`](#wx.ListCtrl.OnGetItemText "wx.ListCtrl.OnGetItemText") , [`OnGetItemImage`](#wx.ListCtrl.OnGetItemImage "wx.ListCtrl.OnGetItemImage") , [`OnGetItemAttr`](#wx.ListCtrl.OnGetItemAttr "wx.ListCtrl.OnGetItemAttr") , `OnGetItemColumnAttr`





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def OnGetItemImage(self, item: int) -> int:
        """ 

`OnGetItemImage`(*self*, *item*)[¶](#wx.ListCtrl.OnGetItemImage "Permalink to this definition")
This function must be overridden in the derived class for a control with `LC_VIRTUAL` style using images.


If the control doesn’t use images, i.e. [`SetNormalImages`](#wx.ListCtrl.SetNormalImages "wx.ListCtrl.SetNormalImages") or [`SetSmallImages`](#wx.ListCtrl.SetSmallImages "wx.ListCtrl.SetSmallImages") hadn’t been called, it is not necessary to override it.


It should return the index of the items image in the controls image list or -1 for no image.


In a control with `LC_REPORT` style, [`OnGetItemImage`](#wx.ListCtrl.OnGetItemImage "wx.ListCtrl.OnGetItemImage") only gets called for the first column of each line.


The base class version always returns -1.



Parameters
**item** (*long*) – 



Return type
*int*





See also


[`OnGetItemText`](#wx.ListCtrl.OnGetItemText "wx.ListCtrl.OnGetItemText") , [`OnGetItemColumnImage`](#wx.ListCtrl.OnGetItemColumnImage "wx.ListCtrl.OnGetItemColumnImage") , [`OnGetItemAttr`](#wx.ListCtrl.OnGetItemAttr "wx.ListCtrl.OnGetItemAttr")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def OnGetItemIsChecked(self, item: int) -> bool:
        """ 

`OnGetItemIsChecked`(*self*, *item*)[¶](#wx.ListCtrl.OnGetItemIsChecked "Permalink to this definition")
This function **must** be overridden in the derived class for a control with `LC_VIRTUAL` style that uses checkboxes.


It should return whether the checkbox of the specified `item` is checked.



Parameters
**item** (*long*) – 



Return type
*bool*





New in version 4.1/wxWidgets-3.1.2.




See also


[`EnableCheckBoxes`](#wx.ListCtrl.EnableCheckBoxes "wx.ListCtrl.EnableCheckBoxes") , [`OnGetItemText`](#wx.ListCtrl.OnGetItemText "wx.ListCtrl.OnGetItemText")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def OnGetItemText(self, item, column) -> str:
        """ 

`OnGetItemText`(*self*, *item*, *column*)[¶](#wx.ListCtrl.OnGetItemText "Permalink to this definition")
This function **must** be overridden in the derived class for a control with `LC_VIRTUAL` style.


It should return the string containing the text of the given *column* for the specified `item` .



Parameters
* **item** (*long*) –
* **column** (*long*) –



Return type
`string`





See also


[`SetItemCount`](#wx.ListCtrl.SetItemCount "wx.ListCtrl.SetItemCount") , [`OnGetItemImage`](#wx.ListCtrl.OnGetItemImage "wx.ListCtrl.OnGetItemImage") , [`OnGetItemColumnImage`](#wx.ListCtrl.OnGetItemColumnImage "wx.ListCtrl.OnGetItemColumnImage") , [`OnGetItemAttr`](#wx.ListCtrl.OnGetItemAttr "wx.ListCtrl.OnGetItemAttr")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def RefreshItem(self, item: int) -> None:
        """ 

`RefreshItem`(*self*, *item*)[¶](#wx.ListCtrl.RefreshItem "Permalink to this definition")
Redraws the given *item*.


This is only useful for the virtual list controls as without calling this function the displayed value of the item doesn’t change even when the underlying data does change.



Parameters
**item** (*long*) – 





See also


[`RefreshItems`](#wx.ListCtrl.RefreshItems "wx.ListCtrl.RefreshItems")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def RefreshItems(self, itemFrom, itemTo) -> None:
        """ 

`RefreshItems`(*self*, *itemFrom*, *itemTo*)[¶](#wx.ListCtrl.RefreshItems "Permalink to this definition")
Redraws the items between *itemFrom* and *itemTo*.


The starting item must be less than or equal to the ending one.


Just as [`RefreshItem`](#wx.ListCtrl.RefreshItem "wx.ListCtrl.RefreshItem") this is only useful for virtual list controls.



Parameters
* **itemFrom** (*long*) –
* **itemTo** (*long*) –






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def RemoveSortIndicator(self) -> None:
        """ 

`RemoveSortIndicator`(*self*)[¶](#wx.ListCtrl.RemoveSortIndicator "Permalink to this definition")
Remove the sort indicator from the column being used as sort key.



New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def ScrollList(self, dx, dy) -> bool:
        """ 

`ScrollList`(*self*, *dx*, *dy*)[¶](#wx.ListCtrl.ScrollList "Permalink to this definition")
Scrolls the list control.


If in icon, small icon or report view mode, *dx* specifies the number of pixels to scroll. If in list view mode, *dx* specifies the number of columns to scroll. *dy* always specifies the number of pixels to scroll vertically.



Parameters
* **dx** (*int*) –
* **dy** (*int*) –



Return type
*bool*





Note


This method is currently only implemented in the Windows version.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def Select(self, idx, on=1) -> None:
        """ 

`Select`(*self*, *idx*, *on=1*)[¶](#wx.ListCtrl.Select "Permalink to this definition")
Selects/deselects an item.




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetAlternateRowColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetAlternateRowColour`(*self*, *colour*)[¶](#wx.ListCtrl.SetAlternateRowColour "Permalink to this definition")
Set the alternative row background colour to a specific colour.


It is recommended to call [`EnableAlternateRowColours`](#wx.ListCtrl.EnableAlternateRowColours "wx.ListCtrl.EnableAlternateRowColours") instead of using these methods as native implementations of this control might support alternating row colours but not setting the exact colour to be used for them.


As [`EnableAlternateRowColours`](#wx.ListCtrl.EnableAlternateRowColours "wx.ListCtrl.EnableAlternateRowColours") , this method can only be used with controls having `LC_REPORT` and `LC_VIRTUAL` styles.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – A valid alternative row background colour to enable alternating rows or invalid colour to disable them and use the same colour for all rows.





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetBackgroundColour(self, col: Union[int, str, 'Colour']) -> bool:
        """ 

`SetBackgroundColour`(*self*, *col*)[¶](#wx.ListCtrl.SetBackgroundColour "Permalink to this definition")
Sets the background colour.


Note that the [`wx.Window.GetBackgroundColour`](wx.Window.html#wx.Window.GetBackgroundColour "wx.Window.GetBackgroundColour") function of  [wx.Window](wx.Window.html#wx-window) base class can be used to retrieve the current background colour.



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
*bool*





Note


If alternate row colouring is enabled, then call [`EnableAlternateRowColours`](#wx.ListCtrl.EnableAlternateRowColours "wx.ListCtrl.EnableAlternateRowColours") again after changing the background colour. This will update the alternate row color to match the new background colour.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetColumn(self, col, item) -> bool:
        """ 

`SetColumn`(*self*, *col*, *item*)[¶](#wx.ListCtrl.SetColumn "Permalink to this definition")
Sets information about this column.


See [`SetItem`](#wx.ListCtrl.SetItem "wx.ListCtrl.SetItem") for more information.



Parameters
* **col** (*int*) –
* **item** ([*wx.ListItem*](wx.ListItem.html#wx.ListItem "wx.ListItem")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetColumnImage(self, col, image) -> None:
        """ 

`SetColumnImage`(*self*, *col*, *image*)[¶](#wx.ListCtrl.SetColumnImage "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetColumnWidth(self, col, width) -> bool:
        """ 

`SetColumnWidth`(*self*, *col*, *width*)[¶](#wx.ListCtrl.SetColumnWidth "Permalink to this definition")
Sets the column width.


*width* can be a width in pixels or `LIST_AUTOSIZE` (-1) or `LIST_AUTOSIZE_USEHEADER` (-2).



> `LIST_AUTOSIZE` will resize the column to the length of its longest item.
> 
> 
> `LIST_AUTOSIZE_USEHEADER` will resize the column to the length of the header (Win32) or 80 pixels (other platforms).


In small or normal icon view, *col* must be -1, and the column width is set for all columns.



Parameters
* **col** (*int*) –
* **width** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetColumnsOrder(self, orders: int) -> bool:
        """ 

`SetColumnsOrder`(*self*, *orders*)[¶](#wx.ListCtrl.SetColumnsOrder "Permalink to this definition")
Changes the order in which the columns are shown.


The *orders* array must have the same number elements as the number of columns and contain each position exactly once. Its n-th element contains the index of the column to be shown in n-th position, so for a control with three columns passing an array with elements 2, 0 and 1 results in the third column being displayed first, the first one next and the second one last.



Parameters
**orders** (*list of integers*) – 



Return type
*bool*





Note


This function makes sense for report view only and currently is only implemented in the wxMSW port. Use `HAS_LISTCTRL_COLUMN_ORDER` to guard uses of this function so that they will start working under the other platforms when support for the column reordering is added there.




See also


[`GetColumnsOrder`](#wx.ListCtrl.GetColumnsOrder "wx.ListCtrl.GetColumnsOrder")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetHeaderAttr(self, attr: 'ItemAttr') -> bool:
        """ 

`SetHeaderAttr`(*self*, *attr*)[¶](#wx.ListCtrl.SetHeaderAttr "Permalink to this definition")
Change the font and the colours used for the list control header.


This method can be used to change the appearance of the header shown by the control in report mode (unless `LC_NO_HEADER` style is used).


Currently it is implemented only for wxMSW and does nothing in the other ports.



Parameters
**attr** ([*wx.ItemAttr*](wx.ItemAttr.html#wx.ItemAttr "wx.ItemAttr")) – The object containing the font and text and background colours to use. It may be default, i.e. not specify any custom font nor colours, to reset any previously set custom attribute.



Return type
*bool*



Returns
`True` if the attributes have been updated or `False` if this is not supported by the current platform.





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetImageList(self, imageList, which) -> None:
        """ 

`SetImageList`(*self*, *imageList*, *which*)[¶](#wx.ListCtrl.SetImageList "Permalink to this definition")
Sets the image list associated with the control.


Not that it is recommended to use [`SetNormalImages`](#wx.ListCtrl.SetNormalImages "wx.ListCtrl.SetNormalImages") or [`SetSmallImages`](#wx.ListCtrl.SetSmallImages "wx.ListCtrl.SetSmallImages") instead of this function in the new code.


*which* must be one of `IMAGE_LIST_NORMAL` , `IMAGE_LIST_SMALL` , `IMAGE_LIST_STATE` (support for the last one is unimplemented).


This method does not take ownership of the image list, you have to delete it yourself.


Note that, unlike for most of the other methods of this class, it is possible to call this function before the corresponding window is created, i.e. do it in a constructor of a class derived from  [wx.ListCtrl](#wx-listctrl) before calling [`Create`](#wx.ListCtrl.Create "wx.ListCtrl.Create") .



Parameters
* **imageList** ([*wx.ImageList*](wx.ImageList.html#wx.ImageList "wx.ImageList")) –
* **which** (*int*) –





See also


[`AssignImageList`](#wx.ListCtrl.AssignImageList "wx.ListCtrl.AssignImageList")





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItem(self, *args, **kw) -> bool:
        """ 

`SetItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListCtrl.SetItem "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetItem** *(self, info)*


Sets the data of an item.


Using the  [wx.ListItem](wx.ListItem.html#wx-listitem)’s mask and state mask, you can change only selected attributes of a  [wx.ListCtrl](#wx-listctrl) item.



Parameters
**info** ([*wx.ListItem*](wx.ListItem.html#wx.ListItem "wx.ListItem")) – 



Return type
*bool*



Returns
`True` if the item was successfully updated or `False` if the update failed for some reason (e.g. an invalid item index).






---

  



**SetItem** *(self, index, column, label, imageId=-1)*


Sets an item string field at a particular column.



Parameters
* **index** (*long*) –
* **column** (*int*) –
* **label** (*string*) –
* **imageId** (*int*) –



Return type
*bool*



Returns
`True` if the item was successfully updated or `False` if the update failed for some reason (e.g. an invalid item index).






---

  





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemBackgroundColour(self, item, col) -> None:
        """ 

`SetItemBackgroundColour`(*self*, *item*, *col*)[¶](#wx.ListCtrl.SetItemBackgroundColour "Permalink to this definition")
Sets the background colour for this item.


This function only works in report view mode. The colour can be retrieved using [`GetItemBackgroundColour`](#wx.ListCtrl.GetItemBackgroundColour "wx.ListCtrl.GetItemBackgroundColour") .



Parameters
* **item** (*long*) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemColumnImage(self, item, column, image) -> bool:
        """ 

`SetItemColumnImage`(*self*, *item*, *column*, *image*)[¶](#wx.ListCtrl.SetItemColumnImage "Permalink to this definition")
Sets the image associated with the item.


In report view, you can specify the column. The image is an index into the image list associated with the list control.



Parameters
* **item** (*long*) –
* **column** (*long*) –
* **image** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemCount(self, count: int) -> None:
        """ 

`SetItemCount`(*self*, *count*)[¶](#wx.ListCtrl.SetItemCount "Permalink to this definition")
This method can only be used with virtual list controls.


It is used to indicate to the control the number of items it contains. After calling it, the main program should be ready to handle calls to various item callbacks (such as [`wx.ListCtrl.OnGetItemText`](#wx.ListCtrl.OnGetItemText "wx.ListCtrl.OnGetItemText") ) for all items in the range from 0 to *count*.


Notice that the control is not necessarily redrawn after this call as it may be undesirable if an item which is not visible on the screen anyhow was added to or removed from a control displaying many items, if you do need to refresh the display you can just call `Refresh` manually.



Parameters
**count** (*long*) – 






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemData(self, item, data) -> bool:
        """ 

`SetItemData`(*self*, *item*, *data*)[¶](#wx.ListCtrl.SetItemData "Permalink to this definition")
Associates application-defined data with this item.


Notice that this function cannot be used to associate pointers with the control items, use `SetItemPtrData` instead.



Parameters
* **item** (*long*) –
* **data** (*long*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemFont(self, item, font) -> None:
        """ 

`SetItemFont`(*self*, *item*, *font*)[¶](#wx.ListCtrl.SetItemFont "Permalink to this definition")
Sets the item’s font.



Parameters
* **item** (*long*) –
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemImage(self, item, image, selImage=-1) -> bool:
        """ 

`SetItemImage`(*self*, *item*, *image*, *selImage=-1*)[¶](#wx.ListCtrl.SetItemImage "Permalink to this definition")
Sets the unselected and selected images associated with the item.


The images are indices into the image list associated with the list control.



Parameters
* **item** (*long*) –
* **image** (*int*) –
* **selImage** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemPosition(self, item, pos) -> bool:
        """ 

`SetItemPosition`(*self*, *item*, *pos*)[¶](#wx.ListCtrl.SetItemPosition "Permalink to this definition")
Sets the position of the item, in icon or small icon view.


Windows only.



Parameters
* **item** (*long*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemState(self, item, state, stateMask) -> bool:
        """ 

`SetItemState`(*self*, *item*, *state*, *stateMask*)[¶](#wx.ListCtrl.SetItemState "Permalink to this definition")
Sets the item state.


The *stateMask* is a combination of `LIST_STATE_XXX` constants described in  [wx.ListItem](wx.ListItem.html#wx-listitem) documentation. For each of the bits specified in *stateMask*, the corresponding state is set or cleared depending on whether *state* argument contains the same bit or not.


So to select an item you can use



```
listCtrl.SetItemState(item, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)

```


while to deselect it you should use



```
listCtrl.SetItemState(item, 0, wx.LIST_STATE_SELECTED)

```


Consider using  [wx.ListView](wx.ListView.html#wx-listview) if possible to avoid dealing with this error-prone and confusing method.


Also notice that contrary to the usual rule that only user actions generate events, this method does generate wxEVT\_LIST\_ITEM\_SELECTED event when it is used to select an item.



Parameters
* **item** (*long*) –
* **state** (*long*) –
* **stateMask** (*long*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemText(self, item, text) -> None:
        """ 

`SetItemText`(*self*, *item*, *text*)[¶](#wx.ListCtrl.SetItemText "Permalink to this definition")
Sets the item text for this item.



Parameters
* **item** (*long*) –
* **text** (*string*) –






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetItemTextColour(self, item, col) -> None:
        """ 

`SetItemTextColour`(*self*, *item*, *col*)[¶](#wx.ListCtrl.SetItemTextColour "Permalink to this definition")
Sets the colour for this item.


This function only works in report view. The colour can be retrieved using [`GetItemTextColour`](#wx.ListCtrl.GetItemTextColour "wx.ListCtrl.GetItemTextColour") .



Parameters
* **item** (*long*) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetNormalImages(self, images: Vector) -> None:
        """ 

`SetNormalImages`(*self*, *images*)[¶](#wx.ListCtrl.SetNormalImages "Permalink to this definition")
Sets the images to use when showing large, normal icons in this control.


These images are used by the items when the list control is in `wx.LC_ICON` mode, in all the other modes the images set by [`SetSmallImages`](#wx.ListCtrl.SetSmallImages "wx.ListCtrl.SetSmallImages") are used.


This function should be preferred to calling [`SetImageList`](#wx.ListCtrl.SetImageList "wx.ListCtrl.SetImageList") or [`AssignImageList`](#wx.ListCtrl.AssignImageList "wx.ListCtrl.AssignImageList") with `IMAGE_LIST_NORMAL` argument in the new code, as using  [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle) makes it possible to specify multiple versions of the icons, allowing the control to choose the right one for the current `DPI` scaling.



Parameters
**images** (*Vector*) – 





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetSingleStyle(self, style, add=True) -> None:
        """ 

`SetSingleStyle`(*self*, *style*, *add=True*)[¶](#wx.ListCtrl.SetSingleStyle "Permalink to this definition")
Adds or removes a single window style.



Parameters
* **style** (*long*) –
* **add** (*bool*) –






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetSmallImages(self, images: Vector) -> None:
        """ 

`SetSmallImages`(*self*, *images*)[¶](#wx.ListCtrl.SetSmallImages "Permalink to this definition")
Sets the images to use when showing small icons in this control.


These images are used by the items when the list control is in `wx.LC_SMALL_ICON` or `wx.LC_REPORT` mode, use [`SetNormalImages`](#wx.ListCtrl.SetNormalImages "wx.ListCtrl.SetNormalImages") for the icons used in `wx.LC_ICON` mode.


This function should be preferred to calling [`SetImageList`](#wx.ListCtrl.SetImageList "wx.ListCtrl.SetImageList") or [`AssignImageList`](#wx.ListCtrl.AssignImageList "wx.ListCtrl.AssignImageList") with `IMAGE_LIST_SMALL` argument in the new code, as using  [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle) makes it possible to specify multiple versions of the icons, allowing the control to choose the right one for the current `DPI` scaling.



Parameters
**images** (*Vector*) – 





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetTextColour(self, col: Union[int, str, 'Colour']) -> None:
        """ 

`SetTextColour`(*self*, *col*)[¶](#wx.ListCtrl.SetTextColour "Permalink to this definition")
Sets the text colour of the list control.



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SetWindowStyleFlag(self, style: int) -> None:
        """ 

`SetWindowStyleFlag`(*self*, *style*)[¶](#wx.ListCtrl.SetWindowStyleFlag "Permalink to this definition")
Sets the whole window style, deleting all items.



Parameters
**style** (*long*) – 






            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def ShowSortIndicator(self, col, ascending=True) -> None:
        """ 

`ShowSortIndicator`(*self*, *col*, *ascending=True*)[¶](#wx.ListCtrl.ShowSortIndicator "Permalink to this definition")
Show the sort indicator of a specific column in a specific direction.


Sort indicators are only shown in report view and in the native wxMSW version override any column icon, i.e. if the sort indicator is shown for a column, no (other) icon is shown.


This function should typically be called from `EVT_LIST_COL_CLICK` handler.



Parameters
* **col** (*int*) – The column to set the sort indicator for. If `-1` is given, then the currently shown sort indicator will be removed.
* **ascending** (*bool*) – If `True` or `False` show the sort indicator corresponding to ascending or descending sort order respectively.





New in version 4.1/wxWidgets-3.1.6.




Note


This does not actually sort the list, use [`SortItems`](#wx.ListCtrl.SortItems "wx.ListCtrl.SortItems") for this.





            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    def SortItems(self, fnSortCallBack) -> None:
        """ 

`SortItems`(*self*, *fnSortCallBack*)[¶](#wx.ListCtrl.SortItems "Permalink to this definition")
Call this function to sort the items in the list control.


Sorting is done using the specified *fnSortCallBack* function. This function must have the following prototype:



```
def ListCompareFunction(self, item1, item2):

    pass

```


It is called each time when the two items must be compared and should return 0 if the items are equal, negative value if the first item is less than the second one and positive value if the first one is greater than the second one (the same convention as used by `qsort(3)` ).


The parameter *item1* is the client data associated with the first item (**NOT** the index). The parameter *item2* is the client data associated with the second item (**NOT** the index). The parameter *data* is the value passed to [`SortItems`](#wx.ListCtrl.SortItems "wx.ListCtrl.SortItems") itself.


Notice that the control may only be sorted on client data associated with the items, so you must use SetItemData if you want to be able to sort the items in the control.


Please see the List Control Sample for an example of using this function.




            Source: https://docs.wxpython.org/wx.ListCtrl.html
        """

    AlternateRowColour: 'Colour'  # `AlternateRowColour`[¶](#wx.ListCtrl.AlternateRowColour "Permalink to this definition")See [`GetAlternateRowColour`](#wx.ListCtrl.GetAlternateRowColour "wx.ListCtrl.GetAlternateRowColour") and [`SetAlternateRowColour`](#wx.ListCtrl.SetAlternateRowColour "wx.ListCtrl.SetAlternateRowColour")
    Column: 'ListItem'  # `Column`[¶](#wx.ListCtrl.Column "Permalink to this definition")See [`GetColumn`](#wx.ListCtrl.GetColumn "wx.ListCtrl.GetColumn") and [`SetColumn`](#wx.ListCtrl.SetColumn "wx.ListCtrl.SetColumn")
    ColumnCount: int  # `ColumnCount`[¶](#wx.ListCtrl.ColumnCount "Permalink to this definition")See [`GetColumnCount`](#wx.ListCtrl.GetColumnCount "wx.ListCtrl.GetColumnCount")
    ColumnsOrder: int  # `ColumnsOrder`[¶](#wx.ListCtrl.ColumnsOrder "Permalink to this definition")See [`GetColumnsOrder`](#wx.ListCtrl.GetColumnsOrder "wx.ListCtrl.GetColumnsOrder") and [`SetColumnsOrder`](#wx.ListCtrl.SetColumnsOrder "wx.ListCtrl.SetColumnsOrder")
    CountPerPage: int  # `CountPerPage`[¶](#wx.ListCtrl.CountPerPage "Permalink to this definition")See [`GetCountPerPage`](#wx.ListCtrl.GetCountPerPage "wx.ListCtrl.GetCountPerPage")
    EditControl: 'TextCtrl'  # `EditControl`[¶](#wx.ListCtrl.EditControl "Permalink to this definition")See [`GetEditControl`](#wx.ListCtrl.GetEditControl "wx.ListCtrl.GetEditControl")
    FocusedItem: None  # `FocusedItem`[¶](#wx.ListCtrl.FocusedItem "Permalink to this definition")See [`GetFocusedItem`](#wx.ListCtrl.GetFocusedItem "wx.ListCtrl.GetFocusedItem")
    Item: 'ListItem'  # `Item`[¶](#wx.ListCtrl.Item "Permalink to this definition")See [`GetItem`](#wx.ListCtrl.GetItem "wx.ListCtrl.GetItem") and [`SetItem`](#wx.ListCtrl.SetItem "wx.ListCtrl.SetItem")
    ItemCount: int  # `ItemCount`[¶](#wx.ListCtrl.ItemCount "Permalink to this definition")See [`GetItemCount`](#wx.ListCtrl.GetItemCount "wx.ListCtrl.GetItemCount") and [`SetItemCount`](#wx.ListCtrl.SetItemCount "wx.ListCtrl.SetItemCount")
    ItemPosition: 'Point'  # `ItemPosition`[¶](#wx.ListCtrl.ItemPosition "Permalink to this definition")See [`GetItemPosition`](#wx.ListCtrl.GetItemPosition "wx.ListCtrl.GetItemPosition") and [`SetItemPosition`](#wx.ListCtrl.SetItemPosition "wx.ListCtrl.SetItemPosition")
    ItemRect: 'Rect'  # `ItemRect`[¶](#wx.ListCtrl.ItemRect "Permalink to this definition")See [`GetItemRect`](#wx.ListCtrl.GetItemRect "wx.ListCtrl.GetItemRect")
    ItemSpacing: 'Size'  # `ItemSpacing`[¶](#wx.ListCtrl.ItemSpacing "Permalink to this definition")See [`GetItemSpacing`](#wx.ListCtrl.GetItemSpacing "wx.ListCtrl.GetItemSpacing")
    MainWindow: 'Window'  # `MainWindow`[¶](#wx.ListCtrl.MainWindow "Permalink to this definition")See [`GetMainWindow`](#wx.ListCtrl.GetMainWindow "wx.ListCtrl.GetMainWindow")
    SelectedItemCount: int  # `SelectedItemCount`[¶](#wx.ListCtrl.SelectedItemCount "Permalink to this definition")See [`GetSelectedItemCount`](#wx.ListCtrl.GetSelectedItemCount "wx.ListCtrl.GetSelectedItemCount")
    SortIndicator: int  # `SortIndicator`[¶](#wx.ListCtrl.SortIndicator "Permalink to this definition")See [`GetSortIndicator`](#wx.ListCtrl.GetSortIndicator "wx.ListCtrl.GetSortIndicator")
    TextColour: 'Colour'  # `TextColour`[¶](#wx.ListCtrl.TextColour "Permalink to this definition")See [`GetTextColour`](#wx.ListCtrl.GetTextColour "wx.ListCtrl.GetTextColour") and [`SetTextColour`](#wx.ListCtrl.SetTextColour "wx.ListCtrl.SetTextColour")
    TopItem: int  # `TopItem`[¶](#wx.ListCtrl.TopItem "Permalink to this definition")See [`GetTopItem`](#wx.ListCtrl.GetTopItem "wx.ListCtrl.GetTopItem")
    ViewRect: 'Rect'  # `ViewRect`[¶](#wx.ListCtrl.ViewRect "Permalink to this definition")See [`GetViewRect`](#wx.ListCtrl.GetViewRect "wx.ListCtrl.GetViewRect")



LC_LIST: int  # Multicolumn list view, with optional small icons. Columns are computed automatically, i.e. you don’t set columns as in  LC_REPORT . In other words, the list wraps, unlike a    wx.ListBox.

LC_REPORT: int  # Single or multicolumn report view, with optional header.

LC_VIRTUAL: int  # The application provides items text on demand. May only be used with  LC_REPORT .

LC_ICON: int  # Large icon view, with optional labels.

LC_SMALL_ICON: int  # Small icon view, with optional labels.

LC_ALIGN_TOP: int  # Icons align to the top. Win32 default, Win32 only.

LC_ALIGN_LEFT: int  # Icons align to the left.

LC_AUTOARRANGE: int  # Icons arrange themselves. Win32 only.

LC_EDIT_LABELS: int  # Labels are editable: the application will be notified when editing starts.

LC_NO_HEADER: int  # No header in report mode.

LC_SINGLE_SEL: int  # Single selection (default is multiple).

LC_SORT_ASCENDING: int  # Sort in ascending order. (You must still supply a comparison callback in wx.ListCtrl.SortItems .)

LC_SORT_DESCENDING: int  # Sort in descending order. (You must still supply a comparison callback in wx.ListCtrl.SortItems .)

LC_HRULES: int  # Draws light horizontal rules between rows in report mode.

LC_VRULES: int  # Draws light vertical rules between columns in report mode. ^^

EVT_LIST_BEGIN_DRAG: int  # Begin dragging with the left mouse button. Processes a  wxEVT_LIST_BEGIN_DRAG   event type.

EVT_LIST_BEGIN_RDRAG: int  # Begin dragging with the right mouse button. Processes a  wxEVT_LIST_BEGIN_RDRAG   event type.

EVT_LIST_BEGIN_LABEL_EDIT: int  # Begin editing a label. This can be prevented by calling Veto(). Processes a  wxEVT_LIST_BEGIN_LABEL_EDIT   event type.

EVT_LIST_END_LABEL_EDIT: int  # Finish editing a label. This can be prevented by calling Veto(). Processes a  wxEVT_LIST_END_LABEL_EDIT   event type.

EVT_LIST_DELETE_ITEM: int  # An item was deleted. Processes a  wxEVT_LIST_DELETE_ITEM   event type.

EVT_LIST_DELETE_ALL_ITEMS: int  # All items were deleted. Processes a  wxEVT_LIST_DELETE_ALL_ITEMS   event type.

EVT_LIST_ITEM_SELECTED: int  # The item has been selected. Notice that the mouse is captured by the control itself when this event is generated, see event handling overview. Processes a  wxEVT_LIST_ITEM_SELECTED   event type.

EVT_LIST_ITEM_DESELECTED: int  # The item has been deselected. Processes a  wxEVT_LIST_ITEM_DESELECTED   event type.

EVT_LIST_ITEM_ACTIVATED: int  # The item has been activated (ENTER or double click). Processes a  wxEVT_LIST_ITEM_ACTIVATED   event type.

EVT_LIST_ITEM_FOCUSED: int  # The currently focused item has changed. Processes a  wxEVT_LIST_ITEM_FOCUSED   event type.

EVT_LIST_ITEM_MIDDLE_CLICK: int  # The middle mouse button has been clicked on an item. This is only supported by the generic control. Processes a  wxEVT_LIST_ITEM_MIDDLE_CLICK   event type.

EVT_LIST_ITEM_RIGHT_CLICK: int  # The right mouse button has been clicked on an item. Processes a  wxEVT_LIST_ITEM_RIGHT_CLICK   event type.

EVT_LIST_KEY_DOWN: int  # A key has been pressed. Processes a  wxEVT_LIST_KEY_DOWN   event type.

EVT_LIST_INSERT_ITEM: int  # An item has been inserted. Processes a  wxEVT_LIST_INSERT_ITEM   event type.

EVT_LIST_COL_CLICK: int  # A column (m_col) has been left-clicked. Processes a  wxEVT_LIST_COL_CLICK   event type.

EVT_LIST_COL_RIGHT_CLICK: int  # A column (m_col) has been right-clicked. Processes a  wxEVT_LIST_COL_RIGHT_CLICK   event type.

EVT_LIST_COL_BEGIN_DRAG: int  # The user started resizing a column - can be vetoed. Processes a  wxEVT_LIST_COL_BEGIN_DRAG   event type.

EVT_LIST_COL_DRAGGING: int  # The divider between columns is being dragged. Processes a  wxEVT_LIST_COL_DRAGGING   event type.

EVT_LIST_COL_END_DRAG: int  # A column has been resized by the user. Processes a  wxEVT_LIST_COL_END_DRAG   event type.

EVT_LIST_CACHE_HINT: int  # Prepare cache for a virtual list control. Processes a  wxEVT_LIST_CACHE_HINT   event type.

EVT_LIST_ITEM_CHECKED: int  # The item has been checked. Processes a  wxEVT_LIST_ITEM_CHECKED   event type (new since wxWidgets 3.1.0).

EVT_LIST_ITEM_UNCHECKED: int  # The item has been unchecked. Processes a  wxEVT_LIST_ITEM_UNCHECKED   event type (new since wxWidgets 3.1.0). ^^

LIST_ALIGN_DEFAULT: int

LIST_ALIGN_LEFT: int

LIST_ALIGN_TOP: int

LIST_ALIGN_SNAP_TO_GRID: int

IMAGE_LIST_NORMAL: int

IMAGE_LIST_SMALL: int

IMAGE_LIST_STATE: int

LIST_NEXT_ABOVE: int

LIST_NEXT_ALL: int

LIST_NEXT_BELOW: int

LIST_NEXT_LEFT: int

LIST_NEXT_RIGHT: int

LIST_STATE_DONTCARE: int

LIST_STATE_DROPHILITED: int

LIST_STATE_FOCUSED: int

LIST_STATE_SELECTED: int

LIST_STATE_CUT: int

LIST_HITTEST_ABOVE: int

LIST_HITTEST_BELOW: int

LIST_HITTEST_TOLEFT: int

LIST_HITTEST_TORIGHT: int

LIST_HITTEST_NOWHERE: int

LIST_HITTEST_ONITEMICON: int

LIST_HITTEST_ONITEMLABEL: int

LIST_HITTEST_ONITEMSTATEICON: int

LIST_HITTEST_ONITEM: int

_Point: TypeAlias = Point

class ListEvent(NotifyEvent):
    """ **Possible constructors**:



```
ListEvent(commandType=wxEVT_NULL, id=0)

```


A list event holds information about events associated with ListCtrl
objects.


  


        Source: https://docs.wxpython.org/wx.ListEvent.html
    """
    def __init__(self, commandType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *commandType=wxEVT\_NULL*, *id=0*)[¶](#wx.ListEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **commandType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetCacheFrom(self) -> int:
        """ 

`GetCacheFrom`(*self*)[¶](#wx.ListEvent.GetCacheFrom "Permalink to this definition")
For `EVT_LIST_CACHE_HINT` event only: return the first item which the list control advises us to cache.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetCacheTo(self) -> int:
        """ 

`GetCacheTo`(*self*)[¶](#wx.ListEvent.GetCacheTo "Permalink to this definition")
For `EVT_LIST_CACHE_HINT` event only: return the last item (inclusive) which the list control advises us to cache.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetColumn(self) -> int:
        """ 

`GetColumn`(*self*)[¶](#wx.ListEvent.GetColumn "Permalink to this definition")
The column position: it is only used with `COL` events.


For the column dragging events, it is the column to the left of the divider being dragged, for the column click events it may be -1 if the user clicked in the list control header outside any column.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetData(self) -> int:
        """ 

`GetData`(*self*)[¶](#wx.ListEvent.GetData "Permalink to this definition")
The data.



Return type
*wx.UIntPtr*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetImage(self) -> int:
        """ 

`GetImage`(*self*)[¶](#wx.ListEvent.GetImage "Permalink to this definition")
The image.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetIndex(self) -> int:
        """ 

`GetIndex`(*self*)[¶](#wx.ListEvent.GetIndex "Permalink to this definition")
The item index.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetItem(self) -> 'ListItem':
        """ 

`GetItem`(*self*)[¶](#wx.ListEvent.GetItem "Permalink to this definition")
An item object, used by some events.


See also [`wx.ListCtrl.SetItem`](wx.ListCtrl.html#wx.ListCtrl.SetItem "wx.ListCtrl.SetItem") .



Return type
 [wx.ListItem](wx.ListItem.html#wx-listitem)






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetKeyCode(self) -> int:
        """ 

`GetKeyCode`(*self*)[¶](#wx.ListEvent.GetKeyCode "Permalink to this definition")
Key code if the event is a keypress event.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetLabel(self) -> str:
        """ 

`GetLabel`(*self*)[¶](#wx.ListEvent.GetLabel "Permalink to this definition")
The (new) item label for `EVT_LIST_END_LABEL_EDIT` event.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetMask(self) -> int:
        """ 

`GetMask`(*self*)[¶](#wx.ListEvent.GetMask "Permalink to this definition")
The mask.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetPoint(self) -> 'Point':
        """ 

`GetPoint`(*self*)[¶](#wx.ListEvent.GetPoint "Permalink to this definition")
The position of the mouse pointer if the event is a drag event.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def GetText(self) -> str:
        """ 

`GetText`(*self*)[¶](#wx.ListEvent.GetText "Permalink to this definition")
The text.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def IsEditCancelled(self) -> bool:
        """ 

`IsEditCancelled`(*self*)[¶](#wx.ListEvent.IsEditCancelled "Permalink to this definition")
This method only makes sense for `EVT_LIST_END_LABEL_EDIT` message and returns `True` if it the label editing has been cancelled by the user ( [`GetLabel`](#wx.ListEvent.GetLabel "wx.ListEvent.GetLabel") returns an empty string in this case but it doesn’t allow the application to distinguish between really cancelling the edit and the admittedly rare case when the user wants to rename it to an empty string).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def SetCacheFrom(self, cacheFrom: int) -> None:
        """ 

`SetCacheFrom`(*self*, *cacheFrom*)[¶](#wx.ListEvent.SetCacheFrom "Permalink to this definition")

Parameters
**cacheFrom** (*long*) – 





See also


[`GetCacheFrom`](#wx.ListEvent.GetCacheFrom "wx.ListEvent.GetCacheFrom")





            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def SetCacheTo(self, cacheTo: int) -> None:
        """ 

`SetCacheTo`(*self*, *cacheTo*)[¶](#wx.ListEvent.SetCacheTo "Permalink to this definition")

Parameters
**cacheTo** (*long*) – 





See also


[`GetCacheTo`](#wx.ListEvent.GetCacheTo "wx.ListEvent.GetCacheTo")





            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def SetColumn(self, col: int) -> None:
        """ 

`SetColumn`(*self*, *col*)[¶](#wx.ListEvent.SetColumn "Permalink to this definition")

Parameters
**col** (*int*) – 





See also


[`GetColumn`](#wx.ListEvent.GetColumn "wx.ListEvent.GetColumn")





            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def SetIndex(self, index: int) -> None:
        """ 

`SetIndex`(*self*, *index*)[¶](#wx.ListEvent.SetIndex "Permalink to this definition")

Parameters
**index** (*long*) – 





See also


[`GetIndex`](#wx.ListEvent.GetIndex "wx.ListEvent.GetIndex")





            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def SetItem(self, item: 'ListItem') -> None:
        """ 

`SetItem`(*self*, *item*)[¶](#wx.ListEvent.SetItem "Permalink to this definition")

Parameters
**item** ([*wx.ListItem*](wx.ListItem.html#wx.ListItem "wx.ListItem")) – 





See also


[`GetItem`](#wx.ListEvent.GetItem "wx.ListEvent.GetItem")





            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def SetKeyCode(self, code: int) -> None:
        """ 

`SetKeyCode`(*self*, *code*)[¶](#wx.ListEvent.SetKeyCode "Permalink to this definition")

Parameters
**code** (*int*) – 





See also


[`GetKeyCode`](#wx.ListEvent.GetKeyCode "wx.ListEvent.GetKeyCode")





            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    def SetPoint(self, point: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetPoint`(*self*, *point*)[¶](#wx.ListEvent.SetPoint "Permalink to this definition")

Parameters
**point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 





See also


[`GetPoint`](#wx.ListEvent.GetPoint "wx.ListEvent.GetPoint")





            Source: https://docs.wxpython.org/wx.ListEvent.html
        """

    CacheFrom: int  # `CacheFrom`[¶](#wx.ListEvent.CacheFrom "Permalink to this definition")See [`GetCacheFrom`](#wx.ListEvent.GetCacheFrom "wx.ListEvent.GetCacheFrom") and [`SetCacheFrom`](#wx.ListEvent.SetCacheFrom "wx.ListEvent.SetCacheFrom")
    CacheTo: int  # `CacheTo`[¶](#wx.ListEvent.CacheTo "Permalink to this definition")See [`GetCacheTo`](#wx.ListEvent.GetCacheTo "wx.ListEvent.GetCacheTo") and [`SetCacheTo`](#wx.ListEvent.SetCacheTo "wx.ListEvent.SetCacheTo")
    Column: int  # `Column`[¶](#wx.ListEvent.Column "Permalink to this definition")See [`GetColumn`](#wx.ListEvent.GetColumn "wx.ListEvent.GetColumn") and [`SetColumn`](#wx.ListEvent.SetColumn "wx.ListEvent.SetColumn")
    Data: int  # `Data`[¶](#wx.ListEvent.Data "Permalink to this definition")See [`GetData`](#wx.ListEvent.GetData "wx.ListEvent.GetData")
    Image: int  # `Image`[¶](#wx.ListEvent.Image "Permalink to this definition")See [`GetImage`](#wx.ListEvent.GetImage "wx.ListEvent.GetImage")
    Index: int  # `Index`[¶](#wx.ListEvent.Index "Permalink to this definition")See [`GetIndex`](#wx.ListEvent.GetIndex "wx.ListEvent.GetIndex") and [`SetIndex`](#wx.ListEvent.SetIndex "wx.ListEvent.SetIndex")
    Item: 'ListItem'  # `Item`[¶](#wx.ListEvent.Item "Permalink to this definition")See [`GetItem`](#wx.ListEvent.GetItem "wx.ListEvent.GetItem") and [`SetItem`](#wx.ListEvent.SetItem "wx.ListEvent.SetItem")
    KeyCode: int  # `KeyCode`[¶](#wx.ListEvent.KeyCode "Permalink to this definition")See [`GetKeyCode`](#wx.ListEvent.GetKeyCode "wx.ListEvent.GetKeyCode") and [`SetKeyCode`](#wx.ListEvent.SetKeyCode "wx.ListEvent.SetKeyCode")
    Label: str  # `Label`[¶](#wx.ListEvent.Label "Permalink to this definition")See [`GetLabel`](#wx.ListEvent.GetLabel "wx.ListEvent.GetLabel")
    Mask: int  # `Mask`[¶](#wx.ListEvent.Mask "Permalink to this definition")See [`GetMask`](#wx.ListEvent.GetMask "wx.ListEvent.GetMask")
    Point: '_Point'  # `Point`[¶](#wx.ListEvent.Point "Permalink to this definition")See [`GetPoint`](#wx.ListEvent.GetPoint "wx.ListEvent.GetPoint") and [`SetPoint`](#wx.ListEvent.SetPoint "wx.ListEvent.SetPoint")
    Text: str  # `Text`[¶](#wx.ListEvent.Text "Permalink to this definition")See [`GetText`](#wx.ListEvent.GetText "wx.ListEvent.GetText")



class ListItem(Object):
    """ **Possible constructors**:



```
ListItem()

```


This class stores information about a ListCtrl item or column.


  


        Source: https://docs.wxpython.org/wx.ListItem.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ListItem.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.ListItem.Clear "Permalink to this definition")
Resets the item state to the default.




            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetAlign(self) -> 'ListColumnFormat':
        """ 

`GetAlign`(*self*)[¶](#wx.ListItem.GetAlign "Permalink to this definition")
Returns the alignment for this item.


Can be one of `LIST_FORMAT_LEFT` , `LIST_FORMAT_RIGHT` or `LIST_FORMAT_CENTRE` .



Return type
 [wx.ListColumnFormat](wx.ListColumnFormat.enumeration.html#wx-listcolumnformat)






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetBackgroundColour(self) -> 'Colour':
        """ 

`GetBackgroundColour`(*self*)[¶](#wx.ListItem.GetBackgroundColour "Permalink to this definition")
Returns the background colour for this item.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetColumn(self) -> int:
        """ 

`GetColumn`(*self*)[¶](#wx.ListItem.GetColumn "Permalink to this definition")
Returns the zero-based column; meaningful only in report mode.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetData(self) -> int:
        """ 

`GetData`(*self*)[¶](#wx.ListItem.GetData "Permalink to this definition")
Returns client data associated with the control.


Please note that client data is associated with the item and not with subitems.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetFont(self) -> 'Font':
        """ 

`GetFont`(*self*)[¶](#wx.ListItem.GetFont "Permalink to this definition")
Returns the font used to display the item.



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetId(self) -> int:
        """ 

`GetId`(*self*)[¶](#wx.ListItem.GetId "Permalink to this definition")
Returns the zero-based item position.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetImage(self) -> int:
        """ 

`GetImage`(*self*)[¶](#wx.ListItem.GetImage "Permalink to this definition")
Returns the zero-based index of the image associated with the item into the image list.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetMask(self) -> int:
        """ 

`GetMask`(*self*)[¶](#wx.ListItem.GetMask "Permalink to this definition")
Returns a bit mask indicating which fields of the structure are valid.


Can be any combination of the following values:


* `wx.LIST_MASK_STATE`: **GetState** is valid.
* `wx.LIST_MASK_TEXT`: **GetText** is valid.
* `wx.LIST_MASK_IMAGE`: **GetImage** is valid.
* `wx.LIST_MASK_DATA`: **GetData** is valid.
* `wx.LIST_MASK_WIDTH`: **GetWidth** is valid.
* `wx.LIST_MASK_FORMAT`: **GetFormat** is valid.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetState(self) -> int:
        """ 

`GetState`(*self*)[¶](#wx.ListItem.GetState "Permalink to this definition")
Returns a bit field representing the state of the item.


Can be any combination of:


* `wx.LIST_STATE_DONTCARE`: No special flags (the values of this constant is 0).
* `wx.LIST_STATE_DROPHILITED`: The item is highlighted to receive a drop event. Win32 only.
* `wx.LIST_STATE_FOCUSED`: The item has the focus.
* `wx.LIST_STATE_SELECTED`: The item is selected.
* `wx.LIST_STATE_CUT`: The item is in the cut state. Win32 only.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetText(self) -> str:
        """ 

`GetText`(*self*)[¶](#wx.ListItem.GetText "Permalink to this definition")
Returns the label/header text.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetTextColour(self) -> 'Colour':
        """ 

`GetTextColour`(*self*)[¶](#wx.ListItem.GetTextColour "Permalink to this definition")
Returns the text colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.ListItem.GetWidth "Permalink to this definition")
Meaningful only for column headers in report mode.


Returns the column width.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetAlign(self, align: ListColumnFormat) -> None:
        """ 

`SetAlign`(*self*, *align*)[¶](#wx.ListItem.SetAlign "Permalink to this definition")
Sets the alignment for the item.


See also [`GetAlign`](#wx.ListItem.GetAlign "wx.ListItem.GetAlign")



Parameters
**align** ([*ListColumnFormat*](wx.ListColumnFormat.enumeration.html "ListColumnFormat")) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetBackgroundColour(self, colBack: Union[int, str, 'Colour']) -> None:
        """ 

`SetBackgroundColour`(*self*, *colBack*)[¶](#wx.ListItem.SetBackgroundColour "Permalink to this definition")
Sets the background colour for the item.



Parameters
**colBack** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetColumn(self, col: int) -> None:
        """ 

`SetColumn`(*self*, *col*)[¶](#wx.ListItem.SetColumn "Permalink to this definition")
Sets the zero-based column.


Meaningful only in report mode.



Parameters
**col** (*int*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetData(self, data: int) -> None:
        """ 

`SetData`(*self*, *data*)[¶](#wx.ListItem.SetData "Permalink to this definition")
Sets client data for the item.


Please note that client data is associated with the item and not with subitems.



Parameters
**data** (*long*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetFont(self, font: 'Font') -> None:
        """ 

`SetFont`(*self*, *font*)[¶](#wx.ListItem.SetFont "Permalink to this definition")
Sets the font for the item.



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetId(self, id: int) -> None:
        """ 

`SetId`(*self*, *id*)[¶](#wx.ListItem.SetId "Permalink to this definition")
Sets the zero-based item position.



Parameters
**id** (*long*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetImage(self, image: int) -> None:
        """ 

`SetImage`(*self*, *image*)[¶](#wx.ListItem.SetImage "Permalink to this definition")
Sets the zero-based index of the image associated with the item into the image list.



Parameters
**image** (*int*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetMask(self, mask: int) -> None:
        """ 

`SetMask`(*self*, *mask*)[¶](#wx.ListItem.SetMask "Permalink to this definition")
Sets the mask of valid fields.


See [`GetMask`](#wx.ListItem.GetMask "wx.ListItem.GetMask") .



Parameters
**mask** (*long*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetState(self, state: int) -> None:
        """ 

`SetState`(*self*, *state*)[¶](#wx.ListItem.SetState "Permalink to this definition")
Sets the item state flags (note that the valid state flags are influenced by the value of the state mask, see [`wx.ListItem.SetStateMask`](#wx.ListItem.SetStateMask "wx.ListItem.SetStateMask") ).


See [`GetState`](#wx.ListItem.GetState "wx.ListItem.GetState") for valid flag values.



Parameters
**state** (*long*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetStateMask(self, stateMask: int) -> None:
        """ 

`SetStateMask`(*self*, *stateMask*)[¶](#wx.ListItem.SetStateMask "Permalink to this definition")
Sets the bitmask that is used to determine which of the state flags are to be set.


See also [`SetState`](#wx.ListItem.SetState "wx.ListItem.SetState") .



Parameters
**stateMask** (*long*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetText(self, text: str) -> None:
        """ 

`SetText`(*self*, *text*)[¶](#wx.ListItem.SetText "Permalink to this definition")
Sets the text label for the item.



Parameters
**text** (*string*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetTextColour(self, colText: Union[int, str, 'Colour']) -> None:
        """ 

`SetTextColour`(*self*, *colText*)[¶](#wx.ListItem.SetTextColour "Permalink to this definition")
Sets the text colour for the item.



Parameters
**colText** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.ListItem.SetWidth "Permalink to this definition")
Meaningful only for column headers in report mode.


Sets the column width.



Parameters
**width** (*int*) – 






            Source: https://docs.wxpython.org/wx.ListItem.html
        """

    Align: 'ListColumnFormat'  # `Align`[¶](#wx.ListItem.Align "Permalink to this definition")See [`GetAlign`](#wx.ListItem.GetAlign "wx.ListItem.GetAlign") and [`SetAlign`](#wx.ListItem.SetAlign "wx.ListItem.SetAlign")
    BackgroundColour: 'Colour'  # `BackgroundColour`[¶](#wx.ListItem.BackgroundColour "Permalink to this definition")See [`GetBackgroundColour`](#wx.ListItem.GetBackgroundColour "wx.ListItem.GetBackgroundColour") and [`SetBackgroundColour`](#wx.ListItem.SetBackgroundColour "wx.ListItem.SetBackgroundColour")
    Column: int  # `Column`[¶](#wx.ListItem.Column "Permalink to this definition")See [`GetColumn`](#wx.ListItem.GetColumn "wx.ListItem.GetColumn") and [`SetColumn`](#wx.ListItem.SetColumn "wx.ListItem.SetColumn")
    Data: int  # `Data`[¶](#wx.ListItem.Data "Permalink to this definition")See [`GetData`](#wx.ListItem.GetData "wx.ListItem.GetData") and [`SetData`](#wx.ListItem.SetData "wx.ListItem.SetData")
    Font: '_Font'  # `Font`[¶](#wx.ListItem.Font "Permalink to this definition")See [`GetFont`](#wx.ListItem.GetFont "wx.ListItem.GetFont") and [`SetFont`](#wx.ListItem.SetFont "wx.ListItem.SetFont")
    Id: int  # `Id`[¶](#wx.ListItem.Id "Permalink to this definition")See [`GetId`](#wx.ListItem.GetId "wx.ListItem.GetId") and [`SetId`](#wx.ListItem.SetId "wx.ListItem.SetId")
    Image: int  # `Image`[¶](#wx.ListItem.Image "Permalink to this definition")See [`GetImage`](#wx.ListItem.GetImage "wx.ListItem.GetImage") and [`SetImage`](#wx.ListItem.SetImage "wx.ListItem.SetImage")
    Mask: int  # `Mask`[¶](#wx.ListItem.Mask "Permalink to this definition")See [`GetMask`](#wx.ListItem.GetMask "wx.ListItem.GetMask") and [`SetMask`](#wx.ListItem.SetMask "wx.ListItem.SetMask")
    State: int  # `State`[¶](#wx.ListItem.State "Permalink to this definition")See [`GetState`](#wx.ListItem.GetState "wx.ListItem.GetState") and [`SetState`](#wx.ListItem.SetState "wx.ListItem.SetState")
    Text: str  # `Text`[¶](#wx.ListItem.Text "Permalink to this definition")See [`GetText`](#wx.ListItem.GetText "wx.ListItem.GetText") and [`SetText`](#wx.ListItem.SetText "wx.ListItem.SetText")
    TextColour: 'Colour'  # `TextColour`[¶](#wx.ListItem.TextColour "Permalink to this definition")See [`GetTextColour`](#wx.ListItem.GetTextColour "wx.ListItem.GetTextColour") and [`SetTextColour`](#wx.ListItem.SetTextColour "wx.ListItem.SetTextColour")
    Width: int  # `Width`[¶](#wx.ListItem.Width "Permalink to this definition")See [`GetWidth`](#wx.ListItem.GetWidth "wx.ListItem.GetWidth") and [`SetWidth`](#wx.ListItem.SetWidth "wx.ListItem.SetWidth")



LIST_MASK_STATE: int

LIST_MASK_TEXT: int

LIST_MASK_IMAGE: int

LIST_MASK_DATA: int

LIST_MASK_WIDTH: int

LIST_MASK_FORMAT: int

class ListView(ListCtrl):
    """ **Possible constructors**:



```
ListView()

ListView(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize,
         style=LC_REPORT, validator=DefaultValidator, name=ListCtrlNameStr)

```


This class currently simply presents a simpler to use interface for
the ListCtrl it can be thought of as a façade for that complicated
class.


  


        Source: https://docs.wxpython.org/wx.ListView.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ListView.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, winid=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=LC\_REPORT, validator=DefaultValidator, name=ListCtrlNameStr)*


Constructor, creating and showing a listview control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **winid** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then the window is sized appropriately.
* **style** (*long*) – Window style. See  [wx.ListCtrl](wx.ListCtrl.html#wx-listctrl).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](wx.ListCtrl.html#wx.ListCtrl.Create "wx.ListCtrl.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.ListView.html
        """

    def ClearColumnImage(self, col: int) -> None:
        """ 

`ClearColumnImage`(*self*, *col*)[¶](#wx.ListView.ClearColumnImage "Permalink to this definition")
Resets the column image – after calling this function, no image will be shown.



Parameters
**col** (*int*) – the column to clear image for





See also


[`SetColumnImage`](#wx.ListView.SetColumnImage "wx.ListView.SetColumnImage")





            Source: https://docs.wxpython.org/wx.ListView.html
        """

    def Focus(self, index: int) -> None:
        """ 

`Focus`(*self*, *index*)[¶](#wx.ListView.Focus "Permalink to this definition")
Sets focus to the item with the given *index*.



Parameters
**index** (*long*) – 






            Source: https://docs.wxpython.org/wx.ListView.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ListView.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ListView.html
        """

    def GetFirstSelected(self) -> int:
        """ 

`GetFirstSelected`(*self*)[¶](#wx.ListView.GetFirstSelected "Permalink to this definition")
Returns the first selected item in a (presumably) multiple selection control.


Together with [`GetNextSelected`](#wx.ListView.GetNextSelected "wx.ListView.GetNextSelected") it can be used to iterate over all selected items in the control.



Return type
*long*



Returns
The first selected item, if any, -1 otherwise.






            Source: https://docs.wxpython.org/wx.ListView.html
        """

    def GetFocusedItem(self) -> int:
        """ 

`GetFocusedItem`(*self*)[¶](#wx.ListView.GetFocusedItem "Permalink to this definition")
Returns the currently focused item or -1 if none.



Return type
*long*





See also


[`IsSelected`](#wx.ListView.IsSelected "wx.ListView.IsSelected") , [`Focus`](#wx.ListView.Focus "wx.ListView.Focus")





            Source: https://docs.wxpython.org/wx.ListView.html
        """

    def GetNextSelected(self, item: int) -> int:
        """ 

`GetNextSelected`(*self*, *item*)[¶](#wx.ListView.GetNextSelected "Permalink to this definition")
Used together with [`GetFirstSelected`](#wx.ListView.GetFirstSelected "wx.ListView.GetFirstSelected") to iterate over all selected items in the control.



Parameters
**item** (*long*) – 



Return type
*long*



Returns
Returns the next selected item or -1 if there are no more of them.






            Source: https://docs.wxpython.org/wx.ListView.html
        """

    def IsSelected(self, index: int) -> bool:
        """ 

`IsSelected`(*self*, *index*)[¶](#wx.ListView.IsSelected "Permalink to this definition")
Returns `True` if the item with the given *index* is selected, `False` otherwise.



Parameters
**index** (*long*) – 



Return type
*bool*





See also


[`GetFirstSelected`](#wx.ListView.GetFirstSelected "wx.ListView.GetFirstSelected") , [`GetNextSelected`](#wx.ListView.GetNextSelected "wx.ListView.GetNextSelected")





            Source: https://docs.wxpython.org/wx.ListView.html
        """

    def Select(self, n, on=True) -> None:
        """ 

`Select`(*self*, *n*, *on=True*)[¶](#wx.ListView.Select "Permalink to this definition")
Selects or unselects the given item.


Notice that this method inherits the unusual behaviour of [`wx.ListCtrl.SetItemState`](wx.ListCtrl.html#wx.ListCtrl.SetItemState "wx.ListCtrl.SetItemState") which sends a wxEVT\_LIST\_ITEM\_SELECTED event when it is used to select an item, contrary to the usual rule that only the user actions result in selection.



Parameters
* **n** (*long*) – the item to select or unselect
* **on** (*bool*) – if `True` (default), selects the item, otherwise unselects it






            Source: https://docs.wxpython.org/wx.ListView.html
        """

    def SetColumnImage(self, col, image) -> None:
        """ 

`SetColumnImage`(*self*, *col*, *image*)[¶](#wx.ListView.SetColumnImage "Permalink to this definition")
Sets the column image for the specified column.


To use the column images, the control must have a valid image list with at least one image.



Parameters
* **col** (*int*) – the column to set image for
* **image** (*int*) – the index of the column image in the controls image list






            Source: https://docs.wxpython.org/wx.ListView.html
        """

    FirstSelected: int  # `FirstSelected`[¶](#wx.ListView.FirstSelected "Permalink to this definition")See [`GetFirstSelected`](#wx.ListView.GetFirstSelected "wx.ListView.GetFirstSelected")
    FocusedItem: int  # `FocusedItem`[¶](#wx.ListView.FocusedItem "Permalink to this definition")See [`GetFocusedItem`](#wx.ListView.GetFocusedItem "wx.ListView.GetFocusedItem")



class Locale:
    """ **Possible constructors**:



```
Locale()

Locale(language, flags=LOCALE_LOAD_DEFAULT)

Locale(name, shortName="", locale="",
       bLoadDefault=True)

```


Locale class encapsulates all language-dependent settings and is a
generalization of the C locale concept.


  


        Source: https://docs.wxpython.org/wx.Locale.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Locale.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


This is the default constructor and it does nothing to initialize the object: [`Init`](#wx.Locale.Init "wx.Locale.Init") must be used to do that.




---

  



**\_\_init\_\_** *(self, language, flags=LOCALE\_LOAD\_DEFAULT)*


See [`Init`](#wx.Locale.Init "wx.Locale.Init") for parameters description.



Parameters
* **language** (*int*) –
* **flags** (*int*) –






---

  



**\_\_init\_\_** *(self, name, shortName=””, locale=””, bLoadDefault=True)*


See [`Init`](#wx.Locale.Init "wx.Locale.Init") for parameters description.


The call of this function has several global side effects which you should understand: first of all, the application locale is changed - note that this will affect many of standard C library functions such as printf() or strftime(). Second, this  [wx.Locale](#wx-locale) object becomes the new current global locale for the application and so all subsequent calls to [`wx.GetTranslation`](wx.functions.html#wx.GetTranslation "wx.GetTranslation") will try to translate the messages using the message catalogs for this locale.



Parameters
* **name** (*string*) –
* **shortName** (*string*) –
* **locale** (*string*) –
* **bLoadDefault** (*bool*) –






---

  





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def AddCatalog(self, *args, **kw) -> bool:
        """ 

`AddCatalog`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Locale.AddCatalog "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddCatalog** *(self, domain)*


Calls *Translations.AddCatalog(const* String&).



Parameters
**domain** (*string*) – 



Return type
*bool*






---

  



**AddCatalog** *(self, domain, msgIdLanguage)*


Calls [`wx.Translations.AddCatalog`](wx.Translations.html#wx.Translations.AddCatalog "wx.Translations.AddCatalog") .



Parameters
* **domain** (*string*) –
* **msgIdLanguage** ([*Language*](wx.Language.enumeration.html "Language")) –



Return type
*bool*






---

  



**AddCatalog** *(self, domain, msgIdLanguage, msgIdCharset)*


Calls [`wx.Translations.AddCatalog`](wx.Translations.html#wx.Translations.AddCatalog "wx.Translations.AddCatalog") .



Parameters
* **domain** (*string*) –
* **msgIdLanguage** ([*Language*](wx.Language.enumeration.html "Language")) –
* **msgIdCharset** (*string*) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def AddCatalogLookupPathPrefix(prefix: str) -> None:
        """ 

*static* `AddCatalogLookupPathPrefix`(*prefix*)[¶](#wx.Locale.AddCatalogLookupPathPrefix "Permalink to this definition")
Calls [`wx.FileTranslationsLoader.AddCatalogLookupPathPrefix`](wx.FileTranslationsLoader.html#wx.FileTranslationsLoader.AddCatalogLookupPathPrefix "wx.FileTranslationsLoader.AddCatalogLookupPathPrefix") .



Parameters
**prefix** (*string*) – 






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def AddLanguage(info: 'LanguageInfo') -> None:
        """ 

*static* `AddLanguage`(*info*)[¶](#wx.Locale.AddLanguage "Permalink to this definition")
Adds custom, user-defined language to the database of known languages.


This database is used in conjunction with the first form of [`Init`](#wx.Locale.Init "wx.Locale.Init") .



Parameters
**info** ([*wx.LanguageInfo*](wx.LanguageInfo.html#wx.LanguageInfo "wx.LanguageInfo")) – 






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def FindLanguageInfo(locale: str) -> 'LanguageInfo':
        """ 

*static* `FindLanguageInfo`(*locale*)[¶](#wx.Locale.FindLanguageInfo "Permalink to this definition")
This function may be used to find the language description structure for the given locale, specified either as a two letter `ISO` language code (for example, “pt”), a language code followed by the country code (“pt\_BR”) or a full, human readable, language description (“Portuguese\_Brazil”).


Returns the information for the given language or `None` if this language is unknown. Note that even if the returned pointer is valid, the caller should *not* delete it.



Parameters
**locale** (*string*) – 



Return type
 [wx.LanguageInfo](wx.LanguageInfo.html#wx-languageinfo)





See also


[`GetLanguageInfo`](#wx.Locale.GetLanguageInfo "wx.Locale.GetLanguageInfo")





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def GetCanonicalName(self) -> str:
        """ 

`GetCanonicalName`(*self*)[¶](#wx.Locale.GetCanonicalName "Permalink to this definition")
Returns the canonical form of current locale name.


Canonical form is the one that is used on `UNIX` systems: it is a two- or five-letter string in xx or xx\_YY format, where xx is `ISO` 639 code of language and `YY` is `ISO` 3166 code of the country. Examples are “en”, “en\_GB”, “en\_US” or “fr\_FR”. This form is internally used when looking up message catalogs. Compare [`GetSysName`](#wx.Locale.GetSysName "wx.Locale.GetSysName") .



Return type
`string`






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def GetHeaderValue(self, header, domain="") -> str:
        """ 

`GetHeaderValue`(*self*, *header*, *domain=""*)[¶](#wx.Locale.GetHeaderValue "Permalink to this definition")
Calls [`wx.Translations.GetHeaderValue`](wx.Translations.html#wx.Translations.GetHeaderValue "wx.Translations.GetHeaderValue") .



Parameters
* **header** (*string*) –
* **domain** (*string*) –



Return type
`string`






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def GetInfo(index, cat=LOCALE_CAT_DEFAULT) -> str:
        """ 

*static* `GetInfo`(*index*, *cat=LOCALE\_CAT\_DEFAULT*)[¶](#wx.Locale.GetInfo "Permalink to this definition")
Get the values of the given locale-dependent datum.


This function returns the value of the locale-specific option specified by the given *index*.



Parameters
* **index** ([*LocaleInfo*](wx.LocaleInfo.enumeration.html "LocaleInfo")) – One of the elements of LocaleInfo enum.
* **cat** ([*LocaleCategory*](wx.LocaleCategory.enumeration.html "LocaleCategory")) – The category to use with the given index or `wx.LOCALE_CAT_DEFAULT` if the index can only apply to a single category.



Return type
`string`



Returns
The option value or empty string if the function failed.






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def GetLanguage(self) -> int:
        """ 

`GetLanguage`(*self*)[¶](#wx.Locale.GetLanguage "Permalink to this definition")
Returns the  [wx.Language](wx.Language.enumeration.html#wx-language) constant of current language.


Note that you can call this function only if you used the form of [`Init`](#wx.Locale.Init "wx.Locale.Init") that takes  [wx.Language](wx.Language.enumeration.html#wx-language) argument.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def GetLanguageCanonicalName(lang: int) -> str:
        """ 

*static* `GetLanguageCanonicalName`(*lang*)[¶](#wx.Locale.GetLanguageCanonicalName "Permalink to this definition")
Returns canonical name (see [`GetCanonicalName`](#wx.Locale.GetCanonicalName "wx.Locale.GetCanonicalName") ) of the given language or empty string if this language is unknown.


See [`GetLanguageInfo`](#wx.Locale.GetLanguageInfo "wx.Locale.GetLanguageInfo") for a remark about special meaning of `LANGUAGE_DEFAULT` .



Parameters
**lang** (*int*) – 



Return type
`string`





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def GetLanguageInfo(lang: int) -> 'LanguageInfo':
        """ 

*static* `GetLanguageInfo`(*lang*)[¶](#wx.Locale.GetLanguageInfo "Permalink to this definition")
Returns a pointer to  [wx.LanguageInfo](wx.LanguageInfo.html#wx-languageinfo) structure containing information about the given language or `None` if this language is unknown.


Note that even if the returned pointer is valid, the caller should *not* delete it.


See [`AddLanguage`](#wx.Locale.AddLanguage "wx.Locale.AddLanguage") for the  [wx.LanguageInfo](wx.LanguageInfo.html#wx-languageinfo) description. As with [`Init`](#wx.Locale.Init "wx.Locale.Init") , `LANGUAGE_DEFAULT` has the special meaning if passed as an argument to this function and in this case the result of [`GetSystemLanguage`](#wx.Locale.GetSystemLanguage "wx.Locale.GetSystemLanguage") is used.



Parameters
**lang** (*int*) – 



Return type
 [wx.LanguageInfo](wx.LanguageInfo.html#wx-languageinfo)






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def GetLanguageName(lang: int) -> str:
        """ 

*static* `GetLanguageName`(*lang*)[¶](#wx.Locale.GetLanguageName "Permalink to this definition")
Returns English name of the given language or empty string if this language is unknown.


See [`GetLanguageInfo`](#wx.Locale.GetLanguageInfo "wx.Locale.GetLanguageInfo") for a remark about special meaning of `LANGUAGE_DEFAULT` .



Parameters
**lang** (*int*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def GetLocale(self) -> str:
        """ 

`GetLocale`(*self*)[¶](#wx.Locale.GetLocale "Permalink to this definition")
Returns the locale name as passed to the constructor or [`Init`](#wx.Locale.Init "wx.Locale.Init") .


This is a full, human-readable name, e.g. “English” or “French”.



Return type
`string`






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.Locale.GetName "Permalink to this definition")
Returns the current short name for the locale (as given to the constructor or the [`Init`](#wx.Locale.Init "wx.Locale.Init") function).



Return type
`string`






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def GetOSInfo(index, cat=LOCALE_CAT_DEFAULT) -> str:
        """ 

*static* `GetOSInfo`(*index*, *cat=LOCALE\_CAT\_DEFAULT*)[¶](#wx.Locale.GetOSInfo "Permalink to this definition")
Get the values of a locale datum in the OS locale.


This function shouldn’t be used in the new code, use `UILocale.GetInfo` instead.


This function is similar to [`GetInfo`](#wx.Locale.GetInfo "wx.Locale.GetInfo") and, in fact, identical to it under non-MSW systems. Under MSW it differs from it when no locale had been explicitly set: [`GetInfo`](#wx.Locale.GetInfo "wx.Locale.GetInfo") returns the values corresponding to the “C” locale used by the standard library functions, while this method returns the values used by the OS which, in Windows case, correspond to the user settings in the control panel.



Parameters
* **index** ([*LocaleInfo*](wx.LocaleInfo.enumeration.html "LocaleInfo")) –
* **cat** ([*LocaleCategory*](wx.LocaleCategory.enumeration.html "LocaleCategory")) –



Return type
`string`





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def GetString(self, *args, **kw) -> str:
        """ 

`GetString`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Locale.GetString "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetString** *(self, origString, domain=””)*


Calls GetTranslation(const String&, String&).



Parameters
* **origString** (*string*) –
* **domain** (*string*) –



Return type
`string`






---

  



**GetString** *(self, origString, origString2, n, domain=””)*


Calls GetTranslation(const String&, String&, unsigned, String&).



Parameters
* **origString** (*string*) –
* **origString2** (*string*) –
* **n** –
* **domain** (*string*) –



Return type
`string`






---

  





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def GetSysName(self) -> str:
        """ 

`GetSysName`(*self*)[¶](#wx.Locale.GetSysName "Permalink to this definition")
Returns current platform-specific locale name as passed to setlocale().


Compare [`GetCanonicalName`](#wx.Locale.GetCanonicalName "wx.Locale.GetCanonicalName") .



Return type
`string`






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def GetSystemEncoding() -> int:
        """ 

*static* `GetSystemEncoding`()[¶](#wx.Locale.GetSystemEncoding "Permalink to this definition")
Tries to detect the user’s default font encoding.


Returns  [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding) value or `FONTENCODING_SYSTEM` if it couldn’t be determined.



Return type
 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding)






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def GetSystemEncodingName() -> str:
        """ 

*static* `GetSystemEncodingName`()[¶](#wx.Locale.GetSystemEncodingName "Permalink to this definition")
Tries to detect the name of the user’s default font encoding.


This string isn’t particularly useful for the application as its form is platform-dependent and so you should probably use [`GetSystemEncoding`](#wx.Locale.GetSystemEncoding "wx.Locale.GetSystemEncoding") instead.


Returns a user-readable string value or an empty string if it couldn’t be determined.



Return type
`string`






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def GetSystemLanguage() -> int:
        """ 

*static* `GetSystemLanguage`()[¶](#wx.Locale.GetSystemLanguage "Permalink to this definition")
Tries to detect the user’s default locale setting.


Returns the  [wx.Language](wx.Language.enumeration.html#wx-language) value or `LANGUAGE_UNKNOWN` if the locale is not recognized, as can notably happen when combining any language with a region where this language is not typically spoken.



Return type
*int*





Note


This function is somewhat misleading, as it uses the default system locale to determine its return value, and not just the system language. It is preserved for backwards compatibility, but to actually get the language, and not locale, used by the system by default, call `UILocale.GetSystemLanguage` instead.




See also


[`wx.Translations.GetBestTranslation`](wx.Translations.html#wx.Translations.GetBestTranslation "wx.Translations.GetBestTranslation") .





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def Init(self, *args, **kw) -> bool:
        """ 

`Init`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Locale.Init "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Init** *(self, language=LANGUAGE\_DEFAULT, flags=LOCALE\_LOAD\_DEFAULT)*


Initializes the  [wx.Locale](#wx-locale) instance.


The call of this function has several global side effects which you should understand: first of all, the application locale is changed - note that this will affect many of standard C library functions such as printf() or strftime(). Second, this  [wx.Locale](#wx-locale) object becomes the new current global locale for the application and so all subsequent calls to [`wx.GetTranslation`](wx.functions.html#wx.GetTranslation "wx.GetTranslation") will try to translate the messages using the message catalogs for this locale.



Parameters
* **language** (*int*) –  [wx.Language](wx.Language.enumeration.html#wx-language) identifier of the locale. It can be either some concrete language, e.g. `LANGUAGE_ESPERANTO` , or a special value `LANGUAGE_DEFAULT` which means that  [wx.Locale](#wx-locale) should use system’s default language (see [`GetSystemLanguage`](#wx.Locale.GetSystemLanguage "wx.Locale.GetSystemLanguage") ). Notice that the value `LANGUAGE_UNKNOWN` is not allowed here.
* **flags** (*int*) – Combination of the following:

	+ `wx.LOCALE_LOAD_DEFAULT`: Load the message catalog for the given locale containing the translations of standard wxWidgets messages automatically.
	+ `wx.LOCALE_DONT_LOAD_DEFAULT`: Negation of `wx.LOCALE_LOAD_DEFAULT`.



Return type
*bool*



Returns
`True` on success or `False` if the given locale couldn’t be set.






---

  



**Init** *(self, name, shortName=””, locale=””, bLoadDefault=True)*



Parameters
* **name** (*string*) – The name of the locale. Only used in diagnostic messages.
* **shortName** (*string*) – The standard 2 letter locale abbreviation; it is used as the directory prefix when looking for the message catalog files.
* **locale** (*string*) – The parameter for the call to setlocale(). Note that it is platform-specific.
* **bLoadDefault** (*bool*) – May be set to `False` to prevent loading of the message catalog for the given locale containing the translations of standard wxWidgets messages. This parameter would be rarely used in normal circumstances.



Return type
*bool*





Deprecated


This form is deprecated, use the other one unless you know what you are doing.





---

  





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    @staticmethod
    def IsAvailable(lang: int) -> bool:
        """ 

*static* `IsAvailable`(*lang*)[¶](#wx.Locale.IsAvailable "Permalink to this definition")
Check whether the operating system and/or C run time environment supports this locale.


For example in Windows, support for many locales is not installed by default. Returns `True` if the locale is supported.


The argument *lang* is the  [wx.Language](wx.Language.enumeration.html#wx-language) identifier. To obtain this for a given a two letter `ISO` language code, use [`FindLanguageInfo`](#wx.Locale.FindLanguageInfo "wx.Locale.FindLanguageInfo") to obtain its  [wx.LanguageInfo](wx.LanguageInfo.html#wx-languageinfo) structure. See [`AddLanguage`](#wx.Locale.AddLanguage "wx.Locale.AddLanguage") for the  [wx.LanguageInfo](wx.LanguageInfo.html#wx-languageinfo) description.



Parameters
**lang** (*int*) – 



Return type
*bool*





New in version 2.7.1..





            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def IsLoaded(self, domain: str) -> bool:
        """ 

`IsLoaded`(*self*, *domain*)[¶](#wx.Locale.IsLoaded "Permalink to this definition")
Calls [`wx.Translations.IsLoaded`](wx.Translations.html#wx.Translations.IsLoaded "wx.Translations.IsLoaded") .



Parameters
**domain** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Locale.IsOk "Permalink to this definition")
Returns `True` if the locale could be set successfully.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.Locale.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.Locale.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.Locale.html
        """

    CanonicalName: str  # `CanonicalName`[¶](#wx.Locale.CanonicalName "Permalink to this definition")See [`GetCanonicalName`](#wx.Locale.GetCanonicalName "wx.Locale.GetCanonicalName")
    Language: int  # `Language`[¶](#wx.Locale.Language "Permalink to this definition")See [`GetLanguage`](#wx.Locale.GetLanguage "wx.Locale.GetLanguage")
    Locale: str  # `Locale`[¶](#wx.Locale.Locale "Permalink to this definition")See [`GetLocale`](#wx.Locale.GetLocale "wx.Locale.GetLocale")
    Name: str  # `Name`[¶](#wx.Locale.Name "Permalink to this definition")See [`GetName`](#wx.Locale.GetName "wx.Locale.GetName")
    SysName: str  # `SysName`[¶](#wx.Locale.SysName "Permalink to this definition")See [`GetSysName`](#wx.Locale.GetSysName "wx.Locale.GetSysName")



LOCALE_CAT_DEFAULT: int

LOCALE_LOAD_DEFAULT: int

LOCALE_DONT_LOAD_DEFAULT: int

class Log:
    """ Log class defines the interface for the log targets used by
wxWidgets logging functions as explained in the Logging Overview.


  


        Source: https://docs.wxpython.org/wx.Log.html
    """
    @staticmethod
    def AddTraceMask(mask: str) -> None:
        """ 

*static* `AddTraceMask`(*mask*)[¶](#wx.Log.AddTraceMask "Permalink to this definition")
Add the *mask* to the list of allowed masks for *wx.LogTrace* .



Parameters
**mask** (*string*) – 





See also


[`RemoveTraceMask`](#wx.Log.RemoveTraceMask "wx.Log.RemoveTraceMask") , [`GetTraceMasks`](#wx.Log.GetTraceMasks "wx.Log.GetTraceMasks")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def ClearTraceMasks() -> None:
        """ 

*static* `ClearTraceMasks`()[¶](#wx.Log.ClearTraceMasks "Permalink to this definition")
Removes all trace masks previously set with [`AddTraceMask`](#wx.Log.AddTraceMask "wx.Log.AddTraceMask") .



See also


[`RemoveTraceMask`](#wx.Log.RemoveTraceMask "wx.Log.RemoveTraceMask")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def DisableTimestamp() -> None:
        """ 

*static* `DisableTimestamp`()[¶](#wx.Log.DisableTimestamp "Permalink to this definition")
Disables time stamping of the log messages.


Notice that the current time stamp is only used by the default log formatter and custom formatters may ignore calls to this function.



New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Log.html
        """

    def DoLogRecord(self, level, msg, info) -> None:
        """ 

`DoLogRecord`(*self*, *level*, *msg*, *info*)[¶](#wx.Log.DoLogRecord "Permalink to this definition")
Called to log a new record.


Any log message created by LogXXX() functions is passed to this method of the active log target. The default implementation prepends the timestamp and, for some log levels (e.g. error and warning), the corresponding prefix to *msg* and passes it to [`DoLogTextAtLevel`](#wx.Log.DoLogTextAtLevel "wx.Log.DoLogTextAtLevel") .


You may override this method to implement custom formatting of the log messages or to implement custom filtering of log messages (e.g. you could discard all log messages coming from the given source file).



Parameters
* **level** (*wx.LogLevel*) –
* **msg** (*string*) –
* **info** ([*wx.LogRecordInfo*](wx.LogRecordInfo.html#wx.LogRecordInfo "wx.LogRecordInfo")) –






            Source: https://docs.wxpython.org/wx.Log.html
        """

    def DoLogText(self, msg: str) -> None:
        """ 

`DoLogText`(*self*, *msg*)[¶](#wx.Log.DoLogText "Permalink to this definition")
Called to log the specified string.


A simple implementation might just send the string to `stdout` or `stderr` or save it in a file (of course, the already existing  [wx.LogStderr](wx.LogStderr.html#wx-logstderr) can be used for this).


The base class version of this function asserts so it must be overridden if you don’t override [`DoLogRecord`](#wx.Log.DoLogRecord "wx.Log.DoLogRecord") or [`DoLogTextAtLevel`](#wx.Log.DoLogTextAtLevel "wx.Log.DoLogTextAtLevel") .



Parameters
**msg** (*string*) – 






            Source: https://docs.wxpython.org/wx.Log.html
        """

    def DoLogTextAtLevel(self, level, msg) -> None:
        """ 

`DoLogTextAtLevel`(*self*, *level*, *msg*)[¶](#wx.Log.DoLogTextAtLevel "Permalink to this definition")
Called to log the specified string at given level.


The base class versions logs debug and trace messages on the system default debug output channel and passes all the other messages to [`DoLogText`](#wx.Log.DoLogText "wx.Log.DoLogText") .



Parameters
* **level** (*wx.LogLevel*) –
* **msg** (*string*) –






            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def DontCreateOnDemand() -> None:
        """ 

*static* `DontCreateOnDemand`()[¶](#wx.Log.DontCreateOnDemand "Permalink to this definition")
Instructs  [wx.Log](#wx-log) to not create new log targets on the fly if there is none currently (see [`GetActiveTarget`](#wx.Log.GetActiveTarget "wx.Log.GetActiveTarget") ).


(Almost) for internal use only: it is supposed to be called by the application shutdown code (where you don’t want the log target to be automatically created anymore).


Note that this function also calls [`ClearTraceMasks`](#wx.Log.ClearTraceMasks "wx.Log.ClearTraceMasks") .




            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def EnableLogging(enable: bool=True) -> bool:
        """ 

*static* `EnableLogging`(*enable=True*)[¶](#wx.Log.EnableLogging "Permalink to this definition")
Globally enable or disable logging.


Calling this function with `False` argument disables all log messages for the current thread.



Parameters
**enable** (*bool*) – 



Return type
*bool*



Returns
The old state, i.e. `True` if logging was previously enabled and `False` if it was disabled.





See also


 [wx.LogNull](wx.LogNull.html#wx-lognull), [`IsEnabled`](#wx.Log.IsEnabled "wx.Log.IsEnabled")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    def Flush(self) -> None:
        """ 

`Flush`(*self*)[¶](#wx.Log.Flush "Permalink to this definition")
Show all pending output and clear the buffer.


Some of  [wx.Log](#wx-log) implementations, most notably the standard  [wx.LogGui](wx.LogGui.html#wx-loggui) class, buffer the messages (for example, to avoid showing the user a zillion of modal message boxes one after another – which would be really annoying). This function shows them all and clears the buffer contents. If the buffer is already empty, nothing happens.


If you override this method in a derived class, call the base class version first, before doing anything else.




            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def FlushActive() -> None:
        """ 

*static* `FlushActive`()[¶](#wx.Log.FlushActive "Permalink to this definition")
Flushes the current log target if any, does nothing if there is none.


When this method is called from the main thread context, it also flushes any previously buffered messages logged by the other threads. When it is called from the other threads it simply calls [`Flush`](#wx.Log.Flush "wx.Log.Flush") on the currently active log target, so it mostly makes sense to do this if a thread has its own logger set with [`SetThreadActiveTarget`](#wx.Log.SetThreadActiveTarget "wx.Log.SetThreadActiveTarget") .




            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def GetActiveTarget() -> 'Log':
        """ 

*static* `GetActiveTarget`()[¶](#wx.Log.GetActiveTarget "Permalink to this definition")
Returns the pointer to the active log target (may be `None`).


Notice that if [`SetActiveTarget`](#wx.Log.SetActiveTarget "wx.Log.SetActiveTarget") hadn’t been previously explicitly called, this function will by default try to create a log target by calling [`wx.AppTraits.CreateLogTarget`](wx.AppTraits.html#wx.AppTraits.CreateLogTarget "wx.AppTraits.CreateLogTarget") which may be overridden in a user-defined traits class to change the default behaviour. You may also call [`DontCreateOnDemand`](#wx.Log.DontCreateOnDemand "wx.Log.DontCreateOnDemand") to disable this behaviour.


When this function is called from threads other than main one, auto-creation doesn’t happen. But if the thread has a thread-specific log target previously set by [`SetThreadActiveTarget`](#wx.Log.SetThreadActiveTarget "wx.Log.SetThreadActiveTarget") , it is returned instead of the global one. Otherwise, the global log target is returned.



Return type
 [wx.Log](#wx-log)






            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def GetLogLevel() -> 'LogLevel':
        """ 

*static* `GetLogLevel`()[¶](#wx.Log.GetLogLevel "Permalink to this definition")
Returns the current log level limit.


All messages at levels strictly greater than the value returned by this function are not logged at all.



Return type
*wx.LogLevel*





See also


[`SetLogLevel`](#wx.Log.SetLogLevel "wx.Log.SetLogLevel") , [`IsLevelEnabled`](#wx.Log.IsLevelEnabled "wx.Log.IsLevelEnabled")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def GetRepetitionCounting() -> bool:
        """ 

*static* `GetRepetitionCounting`()[¶](#wx.Log.GetRepetitionCounting "Permalink to this definition")
Returns whether the repetition counting mode is enabled.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def GetTimestamp() -> str:
        """ 

*static* `GetTimestamp`()[¶](#wx.Log.GetTimestamp "Permalink to this definition")
Returns the current timestamp format string.


Notice that the current time stamp is only used by the default log formatter and custom formatters may ignore this format.



Return type
`string`






            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def GetTraceMasks() -> list[str]:
        """ 

*static* `GetTraceMasks`()[¶](#wx.Log.GetTraceMasks "Permalink to this definition")
Returns the currently allowed list of string trace masks.



Return type
*list of strings*





See also


[`AddTraceMask`](#wx.Log.AddTraceMask "wx.Log.AddTraceMask") .





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def GetVerbose() -> bool:
        """ 

*static* `GetVerbose`()[¶](#wx.Log.GetVerbose "Permalink to this definition")
Returns whether the verbose mode is currently active.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def IsAllowedTraceMask(mask: str) -> bool:
        """ 

*static* `IsAllowedTraceMask`(*mask*)[¶](#wx.Log.IsAllowedTraceMask "Permalink to this definition")
Returns `True` if the *mask* is one of allowed masks for *wx.LogTrace* .


See also: [`AddTraceMask`](#wx.Log.AddTraceMask "wx.Log.AddTraceMask") , [`RemoveTraceMask`](#wx.Log.RemoveTraceMask "wx.Log.RemoveTraceMask")



Parameters
**mask** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def IsEnabled() -> bool:
        """ 

*static* `IsEnabled`()[¶](#wx.Log.IsEnabled "Permalink to this definition")
Returns `True` if logging is enabled at all now.



Return type
*bool*





See also


[`IsLevelEnabled`](#wx.Log.IsLevelEnabled "wx.Log.IsLevelEnabled") , [`EnableLogging`](#wx.Log.EnableLogging "wx.Log.EnableLogging")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def IsLevelEnabled(level, component) -> bool:
        """ 

*static* `IsLevelEnabled`(*level*, *component*)[¶](#wx.Log.IsLevelEnabled "Permalink to this definition")
Returns `True` if logging at this level is enabled for the current thread.


This function only returns `True` if logging is globally enabled and if *level* is less than or equal to the maximal log level enabled for the given *component*.



Parameters
* **level** (*wx.LogLevel*) –
* **component** (*string*) –



Return type
*bool*





New in version 2.9.1.




See also


[`IsEnabled`](#wx.Log.IsEnabled "wx.Log.IsEnabled") , [`SetLogLevel`](#wx.Log.SetLogLevel "wx.Log.SetLogLevel") , [`GetLogLevel`](#wx.Log.GetLogLevel "wx.Log.GetLogLevel") , [`SetComponentLevel`](#wx.Log.SetComponentLevel "wx.Log.SetComponentLevel")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    def LogRecord(self, level, msg, info) -> None:
        """ 

`LogRecord`(*self*, *level*, *msg*, *info*)[¶](#wx.Log.LogRecord "Permalink to this definition")
Log the given record.


This function should only be called from the DoLog() implementations in the derived classes if they need to call [`DoLogRecord`](#wx.Log.DoLogRecord "wx.Log.DoLogRecord") on another log object (they can, of course, just use [`wx.Log.DoLogRecord`](#wx.Log.DoLogRecord "wx.Log.DoLogRecord") call syntax to call it on the object itself). It should not be used for logging new messages which can be only sent to the currently active logger using OnLog() which also checks if the logging (for this level) is enabled while this method just directly calls DoLog().


Example of use of this class from  [wx.LogChain](wx.LogChain.html#wx-logchain):



```
def DoLogRecord(self, level, msg, info):

    # let the previous logger show it
    if self.logOld and IsPassingMessages():
        self.logOld.LogRecord(level, msg, info)

    # and also send it to the one
    if self.logNew and self.logNew != self:
        self.logNew.LogRecord(level, msg, info)

```



Parameters
* **level** (*wx.LogLevel*) –
* **msg** (*string*) –
* **info** ([*wx.LogRecordInfo*](wx.LogRecordInfo.html#wx.LogRecordInfo "wx.LogRecordInfo")) –





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def RemoveTraceMask(mask: str) -> None:
        """ 

*static* `RemoveTraceMask`(*mask*)[¶](#wx.Log.RemoveTraceMask "Permalink to this definition")
Remove the *mask* from the list of allowed masks for *wx.LogTrace* .



Parameters
**mask** (*string*) – 





See also


[`AddTraceMask`](#wx.Log.AddTraceMask "wx.Log.AddTraceMask")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def Resume() -> None:
        """ 

*static* `Resume`()[¶](#wx.Log.Resume "Permalink to this definition")
Resumes logging previously suspended by a call to [`Suspend`](#wx.Log.Suspend "wx.Log.Suspend") .


All messages logged in the meanwhile will be flushed soon.




            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def SetActiveTarget(logtarget: 'Log') -> 'Log':
        """ 

*static* `SetActiveTarget`(*logtarget*)[¶](#wx.Log.SetActiveTarget "Permalink to this definition")
Sets the specified log target as the active one.


Returns the pointer to the previous active log target (may be `None`). To suppress logging use a new instance of  [wx.LogNull](wx.LogNull.html#wx-lognull) not `None`. If the active log target is set to `None` a new default log target will be created when logging occurs.



Parameters
**logtarget** ([*wx.Log*](#wx.Log "wx.Log")) – 



Return type
 [wx.Log](#wx-log)





See also


[`SetThreadActiveTarget`](#wx.Log.SetThreadActiveTarget "wx.Log.SetThreadActiveTarget")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def SetComponentLevel(component, level) -> None:
        """ 

*static* `SetComponentLevel`(*component*, *level*)[¶](#wx.Log.SetComponentLevel "Permalink to this definition")
Sets the log level for the given component.


For example, to disable all but error messages from wxWidgets network classes you may use



```
wx.Log.SetComponentLevel("wx./net", wx.LOG_Error)

```


[`SetLogLevel`](#wx.Log.SetLogLevel "wx.Log.SetLogLevel") may be used to set the global log level.



Parameters
* **component** (*string*) – Non-empty component name, possibly using slashes ( `/` ) to separate it into several parts.
* **level** (*wx.LogLevel*) – Maximal level of log messages from this component which will be handled instead of being simply discarded.





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Log.html
        """

    def SetFormatter(self, formatter: 'LogFormatter') -> 'LogFormatter':
        """ 

`SetFormatter`(*self*, *formatter*)[¶](#wx.Log.SetFormatter "Permalink to this definition")
Sets the specified formatter as the active one.



Parameters
**formatter** ([*wx.LogFormatter*](wx.LogFormatter.html#wx.LogFormatter "wx.LogFormatter")) – The new formatter. If `None`, reset to the default formatter.



Return type
 [wx.LogFormatter](wx.LogFormatter.html#wx-logformatter)




 [wx.Log](#wx-log) object later.



New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def SetLogLevel(logLevel: 'LogLevel') -> None:
        """ 

*static* `SetLogLevel`(*logLevel*)[¶](#wx.Log.SetLogLevel "Permalink to this definition")
Specifies that log messages with level greater (numerically) than *logLevel* should be ignored and not sent to the active log target.



Parameters
**logLevel** (*wx.LogLevel*) – 





See also


[`SetComponentLevel`](#wx.Log.SetComponentLevel "wx.Log.SetComponentLevel")





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def SetRepetitionCounting(repetCounting: bool=True) -> None:
        """ 

*static* `SetRepetitionCounting`(*repetCounting=True*)[¶](#wx.Log.SetRepetitionCounting "Permalink to this definition")
Enables logging mode in which a log message is logged once, and in case exactly the same message successively repeats one or more times, only the number of repetitions is logged.



Parameters
**repetCounting** (*bool*) – 






            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def SetThreadActiveTarget(logger: 'Log') -> 'Log':
        """ 

*static* `SetThreadActiveTarget`(*logger*)[¶](#wx.Log.SetThreadActiveTarget "Permalink to this definition")
Sets a thread-specific log target.


The log target passed to this function will be used for all messages logged by the current thread using the usual  [wx.Log](#wx-log) functions. This shouldn’t be called from the main thread which never uses a thread- specific log target but can be used for the other threads to handle thread logging completely separately; instead of buffering thread log messages in the main thread logger.


Notice that unlike for [`SetActiveTarget`](#wx.Log.SetActiveTarget "wx.Log.SetActiveTarget") , wxWidgets does not destroy the thread-specific log targets when the thread terminates so doing this is your responsibility.


This method is only available if `USE_THREADS` is 1, i.e. wxWidgets was compiled with threads support.



Parameters
**logger** ([*wx.Log*](#wx.Log "wx.Log")) – The new thread-specific log target, possibly `None`.



Return type
 [wx.Log](#wx-log)



Returns
The previous thread-specific log target, initially `None`.





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def SetTimestamp(format: str) -> None:
        """ 

*static* `SetTimestamp`(*format*)[¶](#wx.Log.SetTimestamp "Permalink to this definition")
Sets the timestamp format prepended by the default log targets to all messages.


The string may contain any normal characters as well as % prefixed format specifiers, see *strftime()* manual for details. Passing an empty string to this function disables message time stamping.


Notice that the current time stamp is only used by the default log formatter and custom formatters may ignore this format. You can also define a custom  [wx.LogFormatter](wx.LogFormatter.html#wx-logformatter) to customize the time stamp handling beyond changing its format.



Parameters
**format** (*string*) – 






            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def SetVerbose(verbose: bool=True) -> None:
        """ 

*static* `SetVerbose`(*verbose=True*)[¶](#wx.Log.SetVerbose "Permalink to this definition")
Activates or deactivates verbose mode in which the verbose messages are logged as the normal ones instead of being silently dropped.


The verbose messages are the trace messages which are not disabled in the release mode and are generated by [`wx.LogVerbose`](wx.functions.html#wx.LogVerbose "wx.LogVerbose") .



Parameters
**verbose** (*bool*) – 





See also


[Logging Overview](log_classes_overview.html#logging-overview)





            Source: https://docs.wxpython.org/wx.Log.html
        """

    @staticmethod
    def Suspend() -> None:
        """ 

*static* `Suspend`()[¶](#wx.Log.Suspend "Permalink to this definition")
Suspends the logging until [`Resume`](#wx.Log.Resume "wx.Log.Resume") is called.


Note that the latter must be called the same number of times as the former to undo it, i.e. if you call [`Suspend`](#wx.Log.Suspend "wx.Log.Suspend") twice you must call [`Resume`](#wx.Log.Resume "wx.Log.Resume") twice as well.


Note that suspending the logging means that the log sink won’t be flushed periodically, it doesn’t have any effect if the current log target does the logging immediately without waiting for [`Flush`](#wx.Log.Flush "wx.Log.Flush") to be called (the standard GUI log target only shows the log dialog when it is flushed, so [`Suspend`](#wx.Log.Suspend "wx.Log.Suspend") works as expected with it).



See also


[`Resume`](#wx.Log.Resume "wx.Log.Resume") ,  [wx.LogNull](wx.LogNull.html#wx-lognull)





            Source: https://docs.wxpython.org/wx.Log.html
        """



LOG_Warning: int

LOG_COMPONENT: int

class LogBuffer(Log):
    """ **Possible constructors**:



```
LogBuffer()

```


LogBuffer is a very simple implementation of log sink which simply
collects all the logged messages in a string (except the debug
messages which are output in the usual way immediately as we’re
presumably not interested in collecting them for later).


  


        Source: https://docs.wxpython.org/wx.LogBuffer.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.LogBuffer.__init__ "Permalink to this definition")
The default constructor does nothing.




            Source: https://docs.wxpython.org/wx.LogBuffer.html
        """

    def Flush(self) -> None:
        """ 

`Flush`(*self*)[¶](#wx.LogBuffer.Flush "Permalink to this definition")
Shows all the messages collected so far to the user (using a message box in the GUI applications or by printing them out to the console in text mode) and clears the internal buffer.




            Source: https://docs.wxpython.org/wx.LogBuffer.html
        """

    def GetBuffer(self) -> str:
        """ 

`GetBuffer`(*self*)[¶](#wx.LogBuffer.GetBuffer "Permalink to this definition")
Returns the current buffer contains.


Messages from different log function calls are separated with the new lines in the buffer. The buffer can be cleared by [`Flush`](#wx.LogBuffer.Flush "wx.LogBuffer.Flush") which will also show the current contents to the user.



Return type
`string`






            Source: https://docs.wxpython.org/wx.LogBuffer.html
        """

    Buffer: str  # `Buffer`[¶](#wx.LogBuffer.Buffer "Permalink to this definition")See [`GetBuffer`](#wx.LogBuffer.GetBuffer "wx.LogBuffer.GetBuffer")



class LogChain(Log):
    """ **Possible constructors**:



```
LogChain(logger)

```


This simple class allows you to chain log sinks, that is to install a
new sink but keep passing log messages to the old one instead of
replacing it completely as *Log.SetActiveTarget* does.


  


        Source: https://docs.wxpython.org/wx.LogChain.html
    """
    def __init__(self, logger: 'Log') -> None:
        """ 

`__init__`(*self*, *logger*)[¶](#wx.LogChain.__init__ "Permalink to this definition")
Sets the specified `logger` (which may be `None`) as the default log target but the log messages are also passed to the previous log target if any.



Parameters
**logger** ([*wx.Log*](wx.Log.html#wx.Log "wx.Log")) – 






            Source: https://docs.wxpython.org/wx.LogChain.html
        """

    def DetachOldLog(self) -> None:
        """ 

`DetachOldLog`(*self*)[¶](#wx.LogChain.DetachOldLog "Permalink to this definition")
Detaches the old log target so it won’t be destroyed when the  [wx.LogChain](#wx-logchain) object is destroyed.




            Source: https://docs.wxpython.org/wx.LogChain.html
        """

    def GetOldLog(self) -> 'Log':
        """ 

`GetOldLog`(*self*)[¶](#wx.LogChain.GetOldLog "Permalink to this definition")
Returns the pointer to the previously active log target (which may be `None`).



Return type
 [wx.Log](wx.Log.html#wx-log)






            Source: https://docs.wxpython.org/wx.LogChain.html
        """

    def IsPassingMessages(self) -> bool:
        """ 

`IsPassingMessages`(*self*)[¶](#wx.LogChain.IsPassingMessages "Permalink to this definition")
Returns `True` if the messages are passed to the previously active log target (default) or `False` if [`PassMessages`](#wx.LogChain.PassMessages "wx.LogChain.PassMessages") had been called.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.LogChain.html
        """

    def PassMessages(self, passMessages: bool) -> None:
        """ 

`PassMessages`(*self*, *passMessages*)[¶](#wx.LogChain.PassMessages "Permalink to this definition")
By default, the log messages are passed to the previously active log target.


Calling this function with `False` parameter disables this behaviour (presumably temporarily, as you shouldn’t use  [wx.LogChain](#wx-logchain) at all otherwise) and it can be re-enabled by calling it again with *passMessages* set to `True`.



Parameters
**passMessages** (*bool*) – 






            Source: https://docs.wxpython.org/wx.LogChain.html
        """

    def SetLog(self, logger: 'Log') -> None:
        """ 

`SetLog`(*self*, *logger*)[¶](#wx.LogChain.SetLog "Permalink to this definition")
Sets another log target to use (may be `None`).


The log target specified in the  [wx.LogChain](#wx-logchain) constructor or in a previous call to this function is deleted. This doesn’t change the old log target value (the one the messages are forwarded to) which still remains the same as was active when  [wx.LogChain](#wx-logchain) object was created.



Parameters
**logger** ([*wx.Log*](wx.Log.html#wx.Log "wx.Log")) – 






            Source: https://docs.wxpython.org/wx.LogChain.html
        """

    OldLog: 'Log'  # `OldLog`[¶](#wx.LogChain.OldLog "Permalink to this definition")See [`GetOldLog`](#wx.LogChain.GetOldLog "wx.LogChain.GetOldLog")



class LogFormatter:
    """ **Possible constructors**:



```
LogFormatter()

```


LogFormatter class is used to format the log messages.


  


        Source: https://docs.wxpython.org/wx.LogFormatter.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.LogFormatter.__init__ "Permalink to this definition")
The default constructor does nothing.




            Source: https://docs.wxpython.org/wx.LogFormatter.html
        """

    def Format(self, level, msg, info) -> str:
        """ 

`Format`(*self*, *level*, *msg*, *info*)[¶](#wx.LogFormatter.Format "Permalink to this definition")
This function creates the full log message string.


Override it to customize the output string format.



Parameters
* **level** (*wx.LogLevel*) – The level of this log record, e.g. `wx.LOG_Error` .
* **msg** (*string*) – The log message itself.
* **info** ([*wx.LogRecordInfo*](wx.LogRecordInfo.html#wx.LogRecordInfo "wx.LogRecordInfo")) – All the other information (such as time, component, location…) associated with this log record.



Return type
`string`



Returns
The formatted message.





Note


Time stamping is disabled for Visual C++ users in debug builds by default because otherwise it would be impossible to directly go to the line from which the log message was generated by simply clicking in the debugger window on the corresponding error message. If you wish to enable it, override [`FormatTime`](#wx.LogFormatter.FormatTime "wx.LogFormatter.FormatTime") .





            Source: https://docs.wxpython.org/wx.LogFormatter.html
        """

    def FormatTime(self, time: int) -> str:
        """ 

`FormatTime`(*self*, *time*)[¶](#wx.LogFormatter.FormatTime "Permalink to this definition")
This function formats the time stamp part of the log message.


Override this function if you need to customize just the time stamp.



Parameters
**time** (*int*) – Time to format.



Return type
`string`



Returns
The formatted time string, may be empty.





Deprecated


This function only exists for compatibility, please override `FormatTimeMS` in the new code.





            Source: https://docs.wxpython.org/wx.LogFormatter.html
        """



class LogGui(Log):
    """ **Possible constructors**:



```
LogGui()

```


This is the default log target for the GUI wxWidgets applications.


  


        Source: https://docs.wxpython.org/wx.LogGui.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.LogGui.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.LogGui.html
        """

    def Flush(self) -> None:
        """ 

`Flush`(*self*)[¶](#wx.LogGui.Flush "Permalink to this definition")
Presents the accumulated log messages, if any, to the user.


This method is called during the idle time and should show any messages accumulated in `LogGui.m_aMessages` field to the user.




            Source: https://docs.wxpython.org/wx.LogGui.html
        """



class LogInterposer(LogChain):
    """ **Possible constructors**:



```
LogInterposer()

```


A special version of LogChain which uses itself as the new log
target.


  


        Source: https://docs.wxpython.org/wx.LogInterposer.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.LogInterposer.__init__ "Permalink to this definition")
The default constructor installs this object as the current active log target.




            Source: https://docs.wxpython.org/wx.LogInterposer.html
        """



class LogInterposerTemp(LogChain):
    """ **Possible constructors**:



```
LogInterposerTemp()

```


A special version of LogChain which uses itself as the new log
target.


  


        Source: https://docs.wxpython.org/wx.LogInterposerTemp.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.LogInterposerTemp.__init__ "Permalink to this definition")
The default constructor installs this object as the current active log target.




            Source: https://docs.wxpython.org/wx.LogInterposerTemp.html
        """



class LogNull:
    """ **Possible constructors**:



```
LogNull()

```


This class allows you to temporarily suspend logging.


  


        Source: https://docs.wxpython.org/wx.LogNull.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.LogNull.__init__ "Permalink to this definition")
Suspends logging.




            Source: https://docs.wxpython.org/wx.LogNull.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.LogNull.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.LogNull.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.LogNull.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.LogNull.html
        """



class LogRecordInfo:
    """ Information about a log record (unit of the log output).


  


        Source: https://docs.wxpython.org/wx.LogRecordInfo.html
    """
    filename: Any  # `filename`[¶](#wx.LogRecordInfo.filename "Permalink to this definition")A public C++ attribute of type `int`. The name of the file where this log message was generated.
    func: Any  # `func`[¶](#wx.LogRecordInfo.func "Permalink to this definition")A public C++ attribute of type `int`. The name of the function where the log record was generated.
    line: Any  # `line`[¶](#wx.LogRecordInfo.line "Permalink to this definition")A public C++ attribute of type `int`. The line number at which this log message was generated.
    timestamp: Any  # `timestamp`[¶](#wx.LogRecordInfo.timestamp "Permalink to this definition")A public C++ attribute of type `int`. Time when the log message was generated.
    timestampMS: Any  # `timestampMS`[¶](#wx.LogRecordInfo.timestampMS "Permalink to this definition")A public C++ attribute of type `LongLong_t`. Time in milliseconds since Epoch when the log message was generated.



class LogStderr(Log):
    """ **Possible constructors**:



```
LogStderr()

```


This class can be used to redirect the log messages to a C file stream
(not to be confused with C++ streams).


  


        Source: https://docs.wxpython.org/wx.LogStderr.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.LogStderr.__init__ "Permalink to this definition")
Constructs a log target which sends all the log messages to the given `FILE` .


If it is `None`, the messages are sent to `stderr` . The messages will be written in the encoding specified by the given *MBConv* .


The *conv* argument is only available in wxWidgets 3.1.1 and later.



Warning


If a log message contains any characters that cannot be converted to the character set given by *conv*, that message will be silently ignored, i.e. it will not be written at all.




Note


In practice, it is only advisable to specify `ConvUTF8` as the *conv*. If using *MBConvUTF16* , the file should be opened in `"wb"` mode.





            Source: https://docs.wxpython.org/wx.LogStderr.html
        """



class LogTextCtrl(Log):
    """ **Possible constructors**:



```
LogTextCtrl(pTextCtrl)

```


Using these target all the log messages can be redirected to a text
control.


  


        Source: https://docs.wxpython.org/wx.LogTextCtrl.html
    """
    def __init__(self, pTextCtrl: 'TextCtrl') -> None:
        """ 

`__init__`(*self*, *pTextCtrl*)[¶](#wx.LogTextCtrl.__init__ "Permalink to this definition")
Constructs a log target which sends all the log messages to the given text control.


The *textctrl* parameter cannot be `None`.



Parameters
**pTextCtrl** ([*wx.TextCtrl*](wx.TextCtrl.html#wx.TextCtrl "wx.TextCtrl")) – 






            Source: https://docs.wxpython.org/wx.LogTextCtrl.html
        """



_Frame: TypeAlias = Frame

class LogWindow(LogInterposer):
    """ **Possible constructors**:



```
LogWindow(pParent, szTitle, show=True, passToOld=True)

```


This class represents a background log window: to be precise, it
collects all log messages in the log frame which it manages but also
passes them on to the log target which was active at the moment of its
creation.


  


        Source: https://docs.wxpython.org/wx.LogWindow.html
    """
    def __init__(self, pParent, szTitle, show=True, passToOld=True) -> None:
        """ 

`__init__`(*self*, *pParent*, *szTitle*, *show=True*, *passToOld=True*)[¶](#wx.LogWindow.__init__ "Permalink to this definition")
Creates the log frame window and starts collecting the messages in it.



Parameters
* **pParent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window for the log frame, may be `None`
* **szTitle** (*string*) – The title for the log frame
* **show** (*bool*) – `True` to show the frame initially (default), otherwise [`Show`](#wx.LogWindow.Show "wx.LogWindow.Show") must be called later.
* **passToOld** (*bool*) – `True` to process the log messages normally in addition to logging them in the log frame (default), `False` to only log them in the log frame. Note that if no targets were set using [`wx.Log.SetActiveTarget`](wx.Log.html#wx.Log.SetActiveTarget "wx.Log.SetActiveTarget") then  [wx.LogWindow](#wx-logwindow) simply becomes the active one and messages won’t be passed to other targets.






            Source: https://docs.wxpython.org/wx.LogWindow.html
        """

    def GetFrame(self) -> 'Frame':
        """ 

`GetFrame`(*self*)[¶](#wx.LogWindow.GetFrame "Permalink to this definition")
Returns the associated log frame window.


This may be used to position or resize it but use [`Show`](#wx.LogWindow.Show "wx.LogWindow.Show") to show or hide it.



Return type
 [wx.Frame](wx.Frame.html#wx-frame)






            Source: https://docs.wxpython.org/wx.LogWindow.html
        """

    def OnFrameClose(self, frame: 'Frame') -> bool:
        """ 

`OnFrameClose`(*self*, *frame*)[¶](#wx.LogWindow.OnFrameClose "Permalink to this definition")
Called if the user closes the window interactively, will not be called if it is destroyed for another reason (such as when program exits).


Return `True` from here to allow the frame to close, `False` to prevent this from happening.



Parameters
**frame** ([*wx.Frame*](wx.Frame.html#wx.Frame "wx.Frame")) – 



Return type
*bool*





See also


[`OnFrameDelete`](#wx.LogWindow.OnFrameDelete "wx.LogWindow.OnFrameDelete")





            Source: https://docs.wxpython.org/wx.LogWindow.html
        """

    def OnFrameDelete(self, frame: 'Frame') -> None:
        """ 

`OnFrameDelete`(*self*, *frame*)[¶](#wx.LogWindow.OnFrameDelete "Permalink to this definition")
Called right before the log frame is going to be deleted: will always be called unlike [`OnFrameClose`](#wx.LogWindow.OnFrameClose "wx.LogWindow.OnFrameClose") .



Parameters
**frame** ([*wx.Frame*](wx.Frame.html#wx.Frame "wx.Frame")) – 






            Source: https://docs.wxpython.org/wx.LogWindow.html
        """

    def Show(self, show: bool=True) -> None:
        """ 

`Show`(*self*, *show=True*)[¶](#wx.LogWindow.Show "Permalink to this definition")
Shows or hides the frame.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.LogWindow.html
        """

    Frame: '_Frame'  # `Frame`[¶](#wx.LogWindow.Frame "Permalink to this definition")See [`GetFrame`](#wx.LogWindow.GetFrame "wx.LogWindow.GetFrame")



class LongPressEvent(GestureEvent):
    """ **Possible constructors**:



```
LongPressEvent(windid=0)

```


This event is generated when one finger touches the surface and
remains stationary.


  


        Source: https://docs.wxpython.org/wx.LongPressEvent.html
    """
    def __init__(self, windid: int=0) -> None:
        """ 

`__init__`(*self*, *windid=0*)[¶](#wx.LongPressEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**windid** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.LongPressEvent.html
        """



EVT_LONG_PRESS: int  # Process a  wxEVT_LONG_PRESS . ^^

class Mask(Object):
    """ **Possible constructors**:



```
Mask()

Mask(bitmap, index)

Mask(bitmap)

Mask(bitmap, colour)

```


This class encapsulates a monochrome mask bitmap, where the masked
area is black and the unmasked area is white.


  


        Source: https://docs.wxpython.org/wx.Mask.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Mask.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, bitmap, index)*


Constructs a mask from a bitmap and a palette index that indicates the background.


Not implemented for GTK.



Parameters
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – A valid bitmap.
* **index** (*int*) – Index into a palette, specifying the transparency colour.






---

  



**\_\_init\_\_** *(self, bitmap)*


Constructs a mask from a monochrome bitmap.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 






---

  



**\_\_init\_\_** *(self, bitmap, colour)*


Constructs a mask from a bitmap and a colour that indicates the background.



Parameters
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






---

  





            Source: https://docs.wxpython.org/wx.Mask.html
        """

    def GetBitmap(self) -> 'Bitmap':
        """ 

`GetBitmap`(*self*)[¶](#wx.Mask.GetBitmap "Permalink to this definition")
Returns the mask as a monochrome bitmap.


Currently this method is implemented in wxMSW, wxGTK and wxOSX.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Mask.html
        """

    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.Mask.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.Mask.GetBitmap "wx.Mask.GetBitmap")



class Matrix2D:
    """ **Possible constructors**:



```
Matrix2D(v11=1, v12=0, v21=0, v22=1)

```


A simple container for 2x2 matrix.


  


        Source: https://docs.wxpython.org/wx.Matrix2D.html
    """
    def __init__(self, v11=1, v12=0, v21=0, v22=1) -> None:
        """ 

`__init__`(*self*, *v11=1*, *v12=0*, *v21=0*, *v22=1*)[¶](#wx.Matrix2D.__init__ "Permalink to this definition")
Default constructor.


Initializes the matrix elements to the identity.



Parameters
* **v11** (*wx.Double*) –
* **v12** (*wx.Double*) –
* **v21** (*wx.Double*) –
* **v22** (*wx.Double*) –






            Source: https://docs.wxpython.org/wx.Matrix2D.html
        """

    m_11: Any  # `m_11`[¶](#wx.Matrix2D.m_11 "Permalink to this definition")A public C++ attribute of type *Double* . The matrix elements in the usual mathematical notation.
    m_12: Any  # `m_12`[¶](#wx.Matrix2D.m_12 "Permalink to this definition")A public C++ attribute of type *Double* .
    m_21: Any  # `m_21`[¶](#wx.Matrix2D.m_21 "Permalink to this definition")A public C++ attribute of type *Double* .
    m_22: Any  # `m_22`[¶](#wx.Matrix2D.m_22 "Permalink to this definition")A public C++ attribute of type *Double* .



class MaximizeEvent(Event):
    """ **Possible constructors**:



```
MaximizeEvent(id=0)

```


An event being sent when a top level window is maximized.


  


        Source: https://docs.wxpython.org/wx.MaximizeEvent.html
    """
    def __init__(self, id: int=0) -> None:
        """ 

`__init__`(*self*, *id=0*)[¶](#wx.MaximizeEvent.__init__ "Permalink to this definition")
Constructor.


Only used by wxWidgets internally.



Parameters
**id** (*int*) – 






            Source: https://docs.wxpython.org/wx.MaximizeEvent.html
        """



EVT_MAXIMIZE: int  # Process a  wxEVT_MAXIMIZE   event. ^^

class MDIChildFrame(Frame):
    """ **Possible constructors**:



```
MDIChildFrame()

MDIChildFrame(parent, id=ID_ANY, title="", pos=DefaultPosition,
              size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)

```


An MDI child frame is a frame that can only exist inside a
MDIClientWindow, which is itself a child of MDIParentFrame.


  


        Source: https://docs.wxpython.org/wx.MDIChildFrame.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.MDIChildFrame.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, title=””, pos=DefaultPosition, size=DefaultSize, style=DEFAULT\_FRAME\_STYLE, name=FrameNameStr)*


Constructor, creating the window.



Parameters
* **parent** ([*wx.MDIParentFrame*](wx.MDIParentFrame.html#wx.MDIParentFrame "wx.MDIParentFrame")) – The window parent. This should not be `None`.
* **id** (*wx.WindowID*) – The window identifier. It may take a value of -1 to indicate a default value.
* **title** (*string*) – The caption to be displayed on the frame’s title bar.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The window position. The value `wx.DefaultPosition` indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The window size. The value `wx.DefaultSize` indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
* **style** (*long*) – The window style. See  [wx.MDIChildFrame](#wx-mdichildframe).
* **name** (*string*) – The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.





See also


[`Create`](#wx.MDIChildFrame.Create "wx.MDIChildFrame.Create")





---

  





            Source: https://docs.wxpython.org/wx.MDIChildFrame.html
        """

    def Activate(self) -> None:
        """ 

`Activate`(*self*)[¶](#wx.MDIChildFrame.Activate "Permalink to this definition")
Activates this MDI child frame.



See also


[`Maximize`](#wx.MDIChildFrame.Maximize "wx.MDIChildFrame.Maximize") , [`Restore`](#wx.MDIChildFrame.Restore "wx.MDIChildFrame.Restore")





            Source: https://docs.wxpython.org/wx.MDIChildFrame.html
        """

    def Create(self, parent, id=ID_ANY, title="", pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *title=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DEFAULT\_FRAME\_STYLE*, *name=FrameNameStr*)[¶](#wx.MDIChildFrame.Create "Permalink to this definition")
Used in two-step frame construction.


See  [wx.MDIChildFrame](#wx-mdichildframe) for further details.



Parameters
* **parent** ([*wx.MDIParentFrame*](wx.MDIParentFrame.html#wx.MDIParentFrame "wx.MDIParentFrame")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MDIChildFrame.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.MDIChildFrame.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.MDIChildFrame.html
        """

    def GetMDIParent(self) -> 'MDIParentFrame':
        """ 

`GetMDIParent`(*self*)[¶](#wx.MDIChildFrame.GetMDIParent "Permalink to this definition")
Returns the MDI parent frame containing this child.


Notice that this may return a different object than `GetParent` as the child frames may be created as children of the client window internally.



Return type
 [wx.MDIParentFrame](wx.MDIParentFrame.html#wx-mdiparentframe)






            Source: https://docs.wxpython.org/wx.MDIChildFrame.html
        """

    def IsAlwaysMaximized(self) -> bool:
        """ 

`IsAlwaysMaximized`(*self*)[¶](#wx.MDIChildFrame.IsAlwaysMaximized "Permalink to this definition")
Returns `True` for MDI children in TDI implementations.


TDI-based implementations represent MDI children as pages in a  [wx.Notebook](wx.Notebook.html#wx-notebook) and so they are always maximized and can’t be restored or iconized.



Return type
*bool*





See also


[`wx.MDIParentFrame.IsTDI`](wx.MDIParentFrame.html#wx.MDIParentFrame.IsTDI "wx.MDIParentFrame.IsTDI") .





            Source: https://docs.wxpython.org/wx.MDIChildFrame.html
        """

    def Maximize(self, maximize: bool=True) -> None:
        """ 

`Maximize`(*self*, *maximize=True*)[¶](#wx.MDIChildFrame.Maximize "Permalink to this definition")
Maximizes this MDI child frame.


This function doesn’t do anything if [`IsAlwaysMaximized`](#wx.MDIChildFrame.IsAlwaysMaximized "wx.MDIChildFrame.IsAlwaysMaximized") returns `True`.



Parameters
**maximize** (*bool*) – 





See also


[`Activate`](#wx.MDIChildFrame.Activate "wx.MDIChildFrame.Activate") , [`Restore`](#wx.MDIChildFrame.Restore "wx.MDIChildFrame.Restore")





            Source: https://docs.wxpython.org/wx.MDIChildFrame.html
        """

    def Restore(self) -> None:
        """ 

`Restore`(*self*)[¶](#wx.MDIChildFrame.Restore "Permalink to this definition")
Restores this MDI child frame (unmaximizes).


This function doesn’t do anything if [`IsAlwaysMaximized`](#wx.MDIChildFrame.IsAlwaysMaximized "wx.MDIChildFrame.IsAlwaysMaximized") returns `True`.



See also


[`Activate`](#wx.MDIChildFrame.Activate "wx.MDIChildFrame.Activate") , [`Maximize`](#wx.MDIChildFrame.Maximize "wx.MDIChildFrame.Maximize")





            Source: https://docs.wxpython.org/wx.MDIChildFrame.html
        """

    MDIParent: 'MDIParentFrame'  # `MDIParent`[¶](#wx.MDIChildFrame.MDIParent "Permalink to this definition")See [`GetMDIParent`](#wx.MDIChildFrame.GetMDIParent "wx.MDIChildFrame.GetMDIParent")



class MDIClientWindow(Window):
    """ **Possible constructors**:



```
MDIClientWindow()

```


An MDI client window is a child of MDIParentFrame, and manages zero
or more MDIChildFrame objects.


  


        Source: https://docs.wxpython.org/wx.MDIClientWindow.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.MDIClientWindow.__init__ "Permalink to this definition")
Default constructor.


Objects of this class are only created by  [wx.MDIParentFrame](wx.MDIParentFrame.html#wx-mdiparentframe) which uses the default constructor and calls [`CreateClient`](#wx.MDIClientWindow.CreateClient "wx.MDIClientWindow.CreateClient") immediately afterwards.




            Source: https://docs.wxpython.org/wx.MDIClientWindow.html
        """

    def CreateClient(self, parent, style=0) -> bool:
        """ 

`CreateClient`(*self*, *parent*, *style=0*)[¶](#wx.MDIClientWindow.CreateClient "Permalink to this definition")
Called by  [wx.MDIParentFrame](wx.MDIParentFrame.html#wx-mdiparentframe) immediately after creating the client window.


This function may be overridden in the derived class but the base class version must usually be called first to really create the window.



Parameters
* **parent** ([*wx.MDIParentFrame*](wx.MDIParentFrame.html#wx.MDIParentFrame "wx.MDIParentFrame")) – The window parent.
* **style** (*long*) – The window style. Only `wx.HSCROLL` and `wx.VSCROLL` bits are meaningful here.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MDIClientWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.MDIClientWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.MDIClientWindow.html
        """



class MDIParentFrame(Frame):
    """ **Possible constructors**:



```
MDIParentFrame()

MDIParentFrame(parent, id=ID_ANY, title="",
               pos=DefaultPosition, size=DefaultSize,
               style=DEFAULT_FRAME_STYLE|VSCROLL|HSCROLL, name=FrameNameStr)

```


An MDI (Multiple Document Interface) parent frame is a window which
can contain MDI child frames in its client area which emulates the
full desktop.


  


        Source: https://docs.wxpython.org/wx.MDIParentFrame.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.MDIParentFrame.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Use [`Create`](#wx.MDIParentFrame.Create "wx.MDIParentFrame.Create") for the objects created using this constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, title=””, pos=DefaultPosition, size=DefaultSize, style=DEFAULT\_FRAME\_STYLE|VSCROLL|HSCROLL, name=FrameNameStr)*


Constructor, creating the window.


Notice that if you override virtual [`OnCreateClient`](#wx.MDIParentFrame.OnCreateClient "wx.MDIParentFrame.OnCreateClient") method you shouldn’t be using this constructor but the default constructor and [`Create`](#wx.MDIParentFrame.Create "wx.MDIParentFrame.Create") as otherwise your overridden method is never going to be called because of the usual C++ virtual call resolution rules.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window parent. Usually is `None`.
* **id** (*wx.WindowID*) – The window identifier. It may take a value of `ID_ANY` to indicate a default value.
* **title** (*string*) – The caption to be displayed on the frame’s title bar.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The window position. The value `wx.DefaultPosition` indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The window size. The value `wx.DefaultSize` indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
* **style** (*long*) – The window style. Default value includes `wx.HSCROLL` and `wx.VSCROLL` styles.
* **name** (*string*) – The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.




Under wxMSW, the client window will automatically have a sunken border style when the active child is not maximized, and no border style when a child is maximized.



See also


[`Create`](#wx.MDIParentFrame.Create "wx.MDIParentFrame.Create") , [`OnCreateClient`](#wx.MDIParentFrame.OnCreateClient "wx.MDIParentFrame.OnCreateClient")





---

  





            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def ActivateNext(self) -> None:
        """ 

`ActivateNext`(*self*)[¶](#wx.MDIParentFrame.ActivateNext "Permalink to this definition")
Activates the MDI child following the currently active one.


The MDI children are maintained in an ordered list and this function switches to the next element in this list, wrapping around the end of it if the currently active child is the last one.



See also


[`ActivatePrevious`](#wx.MDIParentFrame.ActivatePrevious "wx.MDIParentFrame.ActivatePrevious")





            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def ActivatePrevious(self) -> None:
        """ 

`ActivatePrevious`(*self*)[¶](#wx.MDIParentFrame.ActivatePrevious "Permalink to this definition")
Activates the MDI child preceding the currently active one.



See also


[`ActivateNext`](#wx.MDIParentFrame.ActivateNext "wx.MDIParentFrame.ActivateNext")





            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def ArrangeIcons(self) -> None:
        """ 

`ArrangeIcons`(*self*)[¶](#wx.MDIParentFrame.ArrangeIcons "Permalink to this definition")
Arranges any iconized (minimized) MDI child windows.


This method is only implemented in MSW MDI implementation and does nothing under the other platforms.



See also


[`Cascade`](#wx.MDIParentFrame.Cascade "wx.MDIParentFrame.Cascade") , [`Tile`](#wx.MDIParentFrame.Tile "wx.MDIParentFrame.Tile")





            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def Cascade(self) -> None:
        """ 

`Cascade`(*self*)[¶](#wx.MDIParentFrame.Cascade "Permalink to this definition")
Arranges the MDI child windows in a cascade.


This method is only implemented in MSW MDI implementation and does nothing under the other platforms.



See also


[`Tile`](#wx.MDIParentFrame.Tile "wx.MDIParentFrame.Tile") , [`ArrangeIcons`](#wx.MDIParentFrame.ArrangeIcons "wx.MDIParentFrame.ArrangeIcons")





            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def Create(self, parent, id=ID_ANY, title="", pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE|VSCROLL|HSCROLL, name=FrameNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *title=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DEFAULT\_FRAME\_STYLE|VSCROLL|HSCROLL*, *name=FrameNameStr*)[¶](#wx.MDIParentFrame.Create "Permalink to this definition")
Used in two-step frame construction.


See  [wx.MDIParentFrame](#wx-mdiparentframe) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def GetActiveChild(self) -> 'MDIChildFrame':
        """ 

`GetActiveChild`(*self*)[¶](#wx.MDIParentFrame.GetActiveChild "Permalink to this definition")
Returns a pointer to the active MDI child, if there is one.


If there are any children at all this function returns a not `None` pointer.



Return type
 [wx.MDIChildFrame](wx.MDIChildFrame.html#wx-mdichildframe)






            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.MDIParentFrame.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def GetClientWindow(self) -> 'MDIClientWindow':
        """ 

`GetClientWindow`(*self*)[¶](#wx.MDIParentFrame.GetClientWindow "Permalink to this definition")
Returns a pointer to the client window.



Return type
 [wx.MDIClientWindow](wx.MDIClientWindow.html#wx-mdiclientwindow)





See also


[`OnCreateClient`](#wx.MDIParentFrame.OnCreateClient "wx.MDIParentFrame.OnCreateClient")





            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def GetWindowMenu(self) -> 'Menu':
        """ 

`GetWindowMenu`(*self*)[¶](#wx.MDIParentFrame.GetWindowMenu "Permalink to this definition")
Returns the current MDI Window menu.


Unless `wx.FRAME_NO_WINDOW_MENU` style was used, a default menu listing all the currently active children and providing the usual operations (tile, cascade, …) on them is created automatically by the library and this function can be used to retrieve it. Notice that the default menu can be replaced by calling [`SetWindowMenu`](#wx.MDIParentFrame.SetWindowMenu "wx.MDIParentFrame.SetWindowMenu") .


This function is currently not available under macOS.



Return type
 [wx.Menu](wx.Menu.html#wx-menu)



Returns
The current Window menu or `None`.






            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    @staticmethod
    def IsTDI() -> bool:
        """ 

*static* `IsTDI`()[¶](#wx.MDIParentFrame.IsTDI "Permalink to this definition")
Returns whether the MDI implementation is tab-based.


Currently only the MSW port uses the real MDI. In Mac ports the usual SDI is used, as common under this platforms, and all the other ports use TDI implementation.


TDI-based MDI applications have different appearance and functionality (e.g. child frames can’t be minimized and only one of them is visible at any given time) so the application may need to adapt its interface somewhat depending on the return value of this function.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def OnCreateClient(self) -> 'MDIClientWindow':
        """ 

`OnCreateClient`(*self*)[¶](#wx.MDIParentFrame.OnCreateClient "Permalink to this definition")
Override this to return a different kind of client window.


If you override this function, you must create your parent frame in two stages, or your function will never be called, due to the way C++ treats virtual functions called from constructors. For example:



```
frame = MyParentFrame()
frame.Create(parent, myParentFrameId, "My Parent Frame")

```


You might wish to derive from  [wx.MDIClientWindow](wx.MDIClientWindow.html#wx-mdiclientwindow) in order to implement different erase behaviour, for example, such as painting a bitmap on the background.


Note that it is probably impossible to have a client window that scrolls as well as painting a bitmap or pattern, since in **OnScroll**, the scrollbar positions always return zero.



Return type
 [wx.MDIClientWindow](wx.MDIClientWindow.html#wx-mdiclientwindow)





See also


[`GetClientWindow`](#wx.MDIParentFrame.GetClientWindow "wx.MDIParentFrame.GetClientWindow") ,  [wx.MDIClientWindow](wx.MDIClientWindow.html#wx-mdiclientwindow)





            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def SetWindowMenu(self, menu: 'Menu') -> None:
        """ 

`SetWindowMenu`(*self*, *menu*)[¶](#wx.MDIParentFrame.SetWindowMenu "Permalink to this definition")
Replace the current MDI Window menu.


Ownership of the menu object passes to the frame when you call this function, i.e. the menu will be deleted by it when it’s no longer needed (usually when the frame itself is deleted or when [`SetWindowMenu`](#wx.MDIParentFrame.SetWindowMenu "wx.MDIParentFrame.SetWindowMenu") is called again).


To remove the window completely, you can use the `wx.FRAME_NO_WINDOW_MENU` window style but this function also allows doing it by passing `None` pointer as *menu*.


The menu may include the items with the following standard identifiers (but may use arbitrary text and help strings and bitmaps for them):


* `ID_MDI_WINDOW_CASCADE`
* `ID_MDI_WINDOW_TILE_HORZ`
* `ID_MDI_WINDOW_TILE_VERT`
* `ID_MDI_WINDOW_ARRANGE_ICONS`
* `ID_MDI_WINDOW_PREV`
* `ID_MDI_WINDOW_NEXT` All of which are handled by  [wx.MDIParentFrame](#wx-mdiparentframe) itself. If any other commands are used in the menu, the derived frame should handle them.


This function is currently not available under macOS.



Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – The menu to be used instead of the standard MDI Window menu or `None`.






            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    def Tile(self, orient: Orientation=HORIZONTAL) -> None:
        """ 

`Tile`(*self*, *orient=HORIZONTAL*)[¶](#wx.MDIParentFrame.Tile "Permalink to this definition")
Tiles the MDI child windows either horizontally or vertically depending on whether *orient* is `HORIZONTAL` or `VERTICAL` .


This method is only implemented in MSW MDI implementation and does nothing under the other platforms.



Parameters
**orient** ([*Orientation*](wx.Orientation.enumeration.html "Orientation")) – 






            Source: https://docs.wxpython.org/wx.MDIParentFrame.html
        """

    ActiveChild: 'MDIChildFrame'  # `ActiveChild`[¶](#wx.MDIParentFrame.ActiveChild "Permalink to this definition")See [`GetActiveChild`](#wx.MDIParentFrame.GetActiveChild "wx.MDIParentFrame.GetActiveChild")
    ClientWindow: 'MDIClientWindow'  # `ClientWindow`[¶](#wx.MDIParentFrame.ClientWindow "Permalink to this definition")See [`GetClientWindow`](#wx.MDIParentFrame.GetClientWindow "wx.MDIParentFrame.GetClientWindow")
    WindowMenu: 'Menu'  # `WindowMenu`[¶](#wx.MDIParentFrame.WindowMenu "Permalink to this definition")See [`GetWindowMenu`](#wx.MDIParentFrame.GetWindowMenu "wx.MDIParentFrame.GetWindowMenu") and [`SetWindowMenu`](#wx.MDIParentFrame.SetWindowMenu "wx.MDIParentFrame.SetWindowMenu")



FRAME_NO_WINDOW_MENU: int

class MemoryDC(DC):
    """ **Possible constructors**:



```
MemoryDC()

MemoryDC(dc)

MemoryDC(bitmap)

```


A memory device context provides a means to draw graphics onto a
bitmap.


  


        Source: https://docs.wxpython.org/wx.MemoryDC.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.MemoryDC.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Constructs a new memory device context.


Use the [`wx.DC.IsOk`](wx.DC.html#wx.DC.IsOk "wx.DC.IsOk") member to test whether the constructor was successful in creating a usable device context. Don’t forget to select a bitmap into the DC before drawing on it.




---

  



**\_\_init\_\_** *(self, dc)*


Constructs a new memory device context having the same characteristics as the given existing device context.


This constructor creates a memory device context *compatible* with *dc* in wxMSW, the argument is ignored in the other ports. If *dc* is `None`, a device context compatible with the screen is created, just as with the default constructor.



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 






---

  



**\_\_init\_\_** *(self, bitmap)*


Constructs a new memory device context and calls [`SelectObject`](#wx.MemoryDC.SelectObject "wx.MemoryDC.SelectObject") with the given bitmap.


Use the [`wx.DC.IsOk`](wx.DC.html#wx.DC.IsOk "wx.DC.IsOk") member to test whether the constructor was successful in creating a usable device context.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 






---

  





            Source: https://docs.wxpython.org/wx.MemoryDC.html
        """

    def GetSelectedBitmap(self) -> 'Bitmap':
        """ 

`GetSelectedBitmap`(*self*)[¶](#wx.MemoryDC.GetSelectedBitmap "Permalink to this definition")

Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.MemoryDC.html
        """

    def SelectObject(self, bitmap: 'Bitmap') -> None:
        """ 

`SelectObject`(*self*, *bitmap*)[¶](#wx.MemoryDC.SelectObject "Permalink to this definition")
Allow using this device context object to modify the given bitmap contents.


Note that if you need to only use the existing bitmap contents instead of modifying it, you should use [`SelectObjectAsSource`](#wx.MemoryDC.SelectObjectAsSource "wx.MemoryDC.SelectObjectAsSource") instead.


Before using the updated bitmap data, make sure to select it out of context first either by selecting `wx.NullBitmap` into the device context or destroying the device context entirely.


If the bitmap is already selected in this device context, nothing is done. If it is selected in another context, the function asserts and drawing on the bitmap won’t work correctly.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 






            Source: https://docs.wxpython.org/wx.MemoryDC.html
        """

    def SelectObjectAsSource(self, bitmap: 'Bitmap') -> None:
        """ 

`SelectObjectAsSource`(*self*, *bitmap*)[¶](#wx.MemoryDC.SelectObjectAsSource "Permalink to this definition")
Selects the given bitmap into the device context, to use as the memory bitmap.


Selecting the bitmap as source into a memory DC allows you to copy its contents to another device context using [`wx.DC.Blit`](wx.DC.html#wx.DC.Blit "wx.DC.Blit") . Note that using [`wx.DC.DrawBitmap`](wx.DC.html#wx.DC.DrawBitmap "wx.DC.DrawBitmap") or [`wx.DC.DrawIcon`](wx.DC.html#wx.DC.DrawIcon "wx.DC.DrawIcon") is a simpler way to do the same thing.


If the argument is `wx.NullBitmap` (or some other uninitialised  [wx.Bitmap](wx.Bitmap.html#wx-bitmap)) the current bitmap is selected out of the device context, allowing the current bitmap to be destroyed safely.



Parameters
**bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 





Note


Modifying a bitmap selected only as a source may not work correctly and can notably modify the other bitmaps sharing the same data due to the use of reference counting (see [Reference Counting](refcount_overview.html#reference-counting)).





            Source: https://docs.wxpython.org/wx.MemoryDC.html
        """

    SelectedBitmap: 'Bitmap'  # `SelectedBitmap`[¶](#wx.MemoryDC.SelectedBitmap "Permalink to this definition")See [`GetSelectedBitmap`](#wx.MemoryDC.GetSelectedBitmap "wx.MemoryDC.GetSelectedBitmap")



class MemoryFSHandler(FileSystemHandler):
    """ **Possible constructors**:



```
MemoryFSHandler()

```


This FileSystem handler can store arbitrary data in memory stream
and make them accessible via an URL.


  


        Source: https://docs.wxpython.org/wx.MemoryFSHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.MemoryFSHandler.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.MemoryFSHandler.html
        """

    @staticmethod
    def AddFile(*args, **kw) -> None:
        """ 

*static* `AddFile`(*\*args*, *\*\*kw*)[¶](#wx.MemoryFSHandler.AddFile "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddFile** *(filename, image, type)*


Adds a file to the list of the files stored in memory.


Stored data (bitmap, text or raw data) will be copied into private memory stream and available under name `"memory:"` + *filename*.


When using the overload taking *String* data, if the string contains only Latin-1 characters (which includes strings created using `String.From8BitData` ), its data is used as is. Otherwise, the `UTF-8` representation of the string is stored as the data associated with the given *filename*.



Parameters
* **filename** (*string*) –
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) –
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) –





Note


you must use a *type* value (aka image format) that wxWidgets can save (e.g. `JPG`, `PNG`, see  [wx.Image](wx.Image.html#wx-image) documentation)!




See also


[`AddFileWithMimeType`](#wx.MemoryFSHandler.AddFileWithMimeType "wx.MemoryFSHandler.AddFileWithMimeType")





---

  



**AddFile** *(filename, bitmap, type)*


Adds a file to the list of the files stored in memory.


Stored data (bitmap, text or raw data) will be copied into private memory stream and available under name `"memory:"` + *filename*.


When using the overload taking *String* data, if the string contains only Latin-1 characters (which includes strings created using `String.From8BitData` ), its data is used as is. Otherwise, the `UTF-8` representation of the string is stored as the data associated with the given *filename*.



Parameters
* **filename** (*string*) –
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **type** ([*BitmapType*](wx.BitmapType.enumeration.html "BitmapType")) –





Note


you must use a *type* value (aka image format) that wxWidgets can save (e.g. `JPG`, `PNG`, see  [wx.Image](wx.Image.html#wx-image) documentation)!




See also


[`AddFileWithMimeType`](#wx.MemoryFSHandler.AddFileWithMimeType "wx.MemoryFSHandler.AddFileWithMimeType")





---

  



**AddFile** *(filename, textdata)*


Add a file from text data, which will first be converted to utf-8 encoded bytes.




---

  



**AddFile** *(filename, binarydata)*


Add a file from raw data in a python buffer compatible object.




---

  





            Source: https://docs.wxpython.org/wx.MemoryFSHandler.html
        """

    @staticmethod
    def AddFileWithMimeType(*args, **kw) -> None:
        """ 

*static* `AddFileWithMimeType`(*\*args*, *\*\*kw*)[¶](#wx.MemoryFSHandler.AddFileWithMimeType "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddFileWithMimeType** *(filename, textdata, mimetype)*


Add a file from text data, which will first be converted to utf-8 encoded bytes.




---

  



**AddFileWithMimeType** *(filename, binarydata, mimetype)*


Add a file from raw data in a python buffer compatible object.




---

  





            Source: https://docs.wxpython.org/wx.MemoryFSHandler.html
        """

    @staticmethod
    def RemoveFile(filename: str) -> None:
        """ 

*static* `RemoveFile`(*filename*)[¶](#wx.MemoryFSHandler.RemoveFile "Permalink to this definition")
Removes a file from memory `FS` and frees the occupied memory.



Parameters
**filename** (*string*) – 






            Source: https://docs.wxpython.org/wx.MemoryFSHandler.html
        """



class Menu(EvtHandler):
    """ **Possible constructors**:



```
Menu()

Menu(style)

Menu(title, style=0)

```


A menu is a popup (or pull down) list of items, one of which may be
selected before the menu goes away (clicking elsewhere dismisses the
menu).


  


        Source: https://docs.wxpython.org/wx.Menu.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Menu.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Constructs a  [wx.Menu](#wx-menu) object.




---

  



**\_\_init\_\_** *(self, style)*


Constructs a  [wx.Menu](#wx-menu) object.



Parameters
**style** (*long*) – If set to `wx.MENU_TEAROFF`, the menu will be detachable (wxGTK and `QT` only).






---

  



**\_\_init\_\_** *(self, title, style=0)*


Constructs a  [wx.Menu](#wx-menu) object with a title.



Parameters
* **title** (*string*) – Title at the top of the menu (not always supported).
* **style** (*long*) – If set to `wx.MENU_TEAROFF`, the menu will be detachable (wxGTK and `QT` only).






---

  





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Append(self, *args, **kw) -> 'MenuItem':
        """ 

`Append`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Menu.Append "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Append** *(self, id, item=””, helpString=””, kind=ITEM\_NORMAL)*


Adds a menu item.



Parameters
* **id** (*int*) – The menu command identifier. See [Window IDs](window_ids_overview.html#window-ids) for more information about IDs (same considerations apply to both window and menu item IDs).
* **item** (*string*) – The string to appear on the menu item. See [`wx.MenuItem.SetItemLabel`](wx.MenuItem.html#wx.MenuItem.SetItemLabel "wx.MenuItem.SetItemLabel") for more details.
* **helpString** (*string*) – An optional help string associated with the item. By default, the handler for the `wxEVT_MENU_HIGHLIGHT` event displays this string in the status line.
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) – May be `ITEM_SEPARATOR` , `ITEM_NORMAL` , `ITEM_CHECK` or `ITEM_RADIO` .



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





```
self.fileMenu.Append(ID_NEW_FILE, "&New file\tCTRL+N", "Creates a XYZ document")

```


or even better for stock menu items (see `MenuItem.__init__` ):



```
self.fileMenu.Append(wx.ID_NEW, "", "Creates a XYZ document")

```



Note


This command can be used after the menu has been shown, as well as on initial creation of a menu or menubar.




See also


[`AppendSeparator`](#wx.Menu.AppendSeparator "wx.Menu.AppendSeparator") , [`AppendCheckItem`](#wx.Menu.AppendCheckItem "wx.Menu.AppendCheckItem") , [`AppendRadioItem`](#wx.Menu.AppendRadioItem "wx.Menu.AppendRadioItem") , [`AppendSubMenu`](#wx.Menu.AppendSubMenu "wx.Menu.AppendSubMenu") , [`Insert`](#wx.Menu.Insert "wx.Menu.Insert") , [`SetLabel`](#wx.Menu.SetLabel "wx.Menu.SetLabel") , [`GetHelpString`](#wx.Menu.GetHelpString "wx.Menu.GetHelpString") , [`SetHelpString`](#wx.Menu.SetHelpString "wx.Menu.SetHelpString") ,  [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





---

  



**Append** *(self, id, item, subMenu, helpString=””)*


Adds a submenu.



Parameters
* **id** (*int*) – The menu command identifier.
* **item** (*string*) – The string to appear on the menu item.
* **subMenu** ([*wx.Menu*](#wx.Menu "wx.Menu")) – Pull-right submenu.
* **helpString** (*string*) – An optional help string associated with the item. By default, the handler for the `wxEVT_MENU_HIGHLIGHT` event displays this string in the status line.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





Deprecated


This function is deprecated, use [`AppendSubMenu`](#wx.Menu.AppendSubMenu "wx.Menu.AppendSubMenu") instead.




See also


[`AppendSeparator`](#wx.Menu.AppendSeparator "wx.Menu.AppendSeparator") , [`AppendCheckItem`](#wx.Menu.AppendCheckItem "wx.Menu.AppendCheckItem") , [`AppendRadioItem`](#wx.Menu.AppendRadioItem "wx.Menu.AppendRadioItem") , [`AppendSubMenu`](#wx.Menu.AppendSubMenu "wx.Menu.AppendSubMenu") , [`Insert`](#wx.Menu.Insert "wx.Menu.Insert") , [`SetLabel`](#wx.Menu.SetLabel "wx.Menu.SetLabel") , [`GetHelpString`](#wx.Menu.GetHelpString "wx.Menu.GetHelpString") , [`SetHelpString`](#wx.Menu.SetHelpString "wx.Menu.SetHelpString") ,  [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





---

  



**Append** *(self, menuItem)*


Adds a menu item object.


This is the most generic variant of [`Append`](#wx.Menu.Append "wx.Menu.Append") method because it may be used for both items (including separators) and submenus and because you can also specify various extra properties of a menu item this way, such as bitmaps and fonts.



Parameters
**menuItem** ([*wx.MenuItem*](wx.MenuItem.html#wx.MenuItem "wx.MenuItem")) – A menuitem object. It will be owned by the  [wx.Menu](#wx-menu) object after this function is called, so do not delete it yourself.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





Note


See the remarks for the other [`Append`](#wx.Menu.Append "wx.Menu.Append") overloads.




See also


[`AppendSeparator`](#wx.Menu.AppendSeparator "wx.Menu.AppendSeparator") , [`AppendCheckItem`](#wx.Menu.AppendCheckItem "wx.Menu.AppendCheckItem") , [`AppendRadioItem`](#wx.Menu.AppendRadioItem "wx.Menu.AppendRadioItem") , [`AppendSubMenu`](#wx.Menu.AppendSubMenu "wx.Menu.AppendSubMenu") , [`Insert`](#wx.Menu.Insert "wx.Menu.Insert") , [`SetLabel`](#wx.Menu.SetLabel "wx.Menu.SetLabel") , [`GetHelpString`](#wx.Menu.GetHelpString "wx.Menu.GetHelpString") , [`SetHelpString`](#wx.Menu.SetHelpString "wx.Menu.SetHelpString") ,  [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





---

  





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def AppendCheckItem(self, id, item, help="") -> 'MenuItem':
        """ 

`AppendCheckItem`(*self*, *id*, *item*, *help=""*)[¶](#wx.Menu.AppendCheckItem "Permalink to this definition")
Adds a checkable item to the end of the menu.



Parameters
* **id** (*int*) –
* **item** (*string*) –
* **help** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Append`](#wx.Menu.Append "wx.Menu.Append") , [`InsertCheckItem`](#wx.Menu.InsertCheckItem "wx.Menu.InsertCheckItem")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def AppendRadioItem(self, id, item, help="") -> 'MenuItem':
        """ 

`AppendRadioItem`(*self*, *id*, *item*, *help=""*)[¶](#wx.Menu.AppendRadioItem "Permalink to this definition")
Adds a radio item to the end of the menu.


All consequent radio items form a group and when an item in the group is checked, all the others are automatically unchecked.



Parameters
* **id** (*int*) –
* **item** (*string*) –
* **help** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





Note


Radio items are not supported under Motif.




See also


[`Append`](#wx.Menu.Append "wx.Menu.Append") , [`InsertRadioItem`](#wx.Menu.InsertRadioItem "wx.Menu.InsertRadioItem")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def AppendSeparator(self) -> 'MenuItem':
        """ 

`AppendSeparator`(*self*)[¶](#wx.Menu.AppendSeparator "Permalink to this definition")
Adds a separator to the end of the menu.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Append`](#wx.Menu.Append "wx.Menu.Append") , [`InsertSeparator`](#wx.Menu.InsertSeparator "wx.Menu.InsertSeparator")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def AppendSubMenu(self, submenu, text, help="") -> 'MenuItem':
        """ 

`AppendSubMenu`(*self*, *submenu*, *text*, *help=""*)[¶](#wx.Menu.AppendSubMenu "Permalink to this definition")
Adds the given *submenu* to this menu.


*text* is the text shown in the menu for it and *help* is the help string shown in the status bar when the submenu item is selected.



Parameters
* **submenu** ([*wx.Menu*](#wx.Menu "wx.Menu")) –
* **text** (*string*) –
* **help** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Insert`](#wx.Menu.Insert "wx.Menu.Insert") , [`Prepend`](#wx.Menu.Prepend "wx.Menu.Prepend")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Attach(self, menubar: 'MenuBar') -> None:
        """ 

`Attach`(*self*, *menubar*)[¶](#wx.Menu.Attach "Permalink to this definition")

Parameters
**menubar** ([*wx.MenuBar*](wx.MenuBar.html#wx.MenuBar "wx.MenuBar")) – 






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Break(self) -> None:
        """ 

`Break`(*self*)[¶](#wx.Menu.Break "Permalink to this definition")
Inserts a break in a menu, causing the next appended item to appear in a new column.


This function only actually inserts a break in wxMSW and does nothing under the other platforms.




            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Check(self, id, check) -> None:
        """ 

`Check`(*self*, *id*, *check*)[¶](#wx.Menu.Check "Permalink to this definition")
Checks or unchecks the menu item.



Parameters
* **id** (*int*) – The menu item identifier.
* **check** (*bool*) – If `True`, the item will be checked, otherwise it will be unchecked.





See also


[`IsChecked`](#wx.Menu.IsChecked "wx.Menu.IsChecked")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Delete(self, *args, **kw) -> bool:
        """ 

`Delete`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Menu.Delete "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Delete** *(self, id)*


Deletes the menu item from the menu.


If the item is a submenu, it will **not** be deleted. Use `Destroy` if you want to delete a submenu.



Parameters
**id** (*int*) – Id of the menu item to be deleted.



Return type
*bool*





See also


[`FindItem`](#wx.Menu.FindItem "wx.Menu.FindItem") , `Destroy` , [`Remove`](#wx.Menu.Remove "wx.Menu.Remove")





---

  



**Delete** *(self, item)*


Deletes the menu item from the menu.


If the item is a submenu, it will **not** be deleted. Use `Destroy` if you want to delete a submenu.



Parameters
**item** ([*wx.MenuItem*](wx.MenuItem.html#wx.MenuItem "wx.MenuItem")) – Menu item to be deleted.



Return type
*bool*





See also


[`FindItem`](#wx.Menu.FindItem "wx.Menu.FindItem") , `Destroy` , [`Remove`](#wx.Menu.Remove "wx.Menu.Remove")





---

  





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def DestroyItem(self, *args, **kw) -> bool:
        """ 

`DestroyItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Menu.DestroyItem "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DestroyItem** *(self, id)*


Deletes the menu item from the menu.


If the item is a submenu, it will be deleted. Use [`Remove`](#wx.Menu.Remove "wx.Menu.Remove") if you want to keep the submenu (for example, to reuse it later).



Parameters
**id** (*int*) – Id of the menu item to be deleted.



Return type
*bool*





See also


[`FindItem`](#wx.Menu.FindItem "wx.Menu.FindItem") , [`Delete`](#wx.Menu.Delete "wx.Menu.Delete") , [`Remove`](#wx.Menu.Remove "wx.Menu.Remove")





---

  



**DestroyItem** *(self, item)*


Deletes the menu item from the menu.


If the item is a submenu, it will be deleted. Use [`Remove`](#wx.Menu.Remove "wx.Menu.Remove") if you want to keep the submenu (for example, to reuse it later).



Parameters
**item** ([*wx.MenuItem*](wx.MenuItem.html#wx.MenuItem "wx.MenuItem")) – Menu item to be deleted.



Return type
*bool*





See also


[`FindItem`](#wx.Menu.FindItem "wx.Menu.FindItem") , [`Delete`](#wx.Menu.Delete "wx.Menu.Delete") , [`Remove`](#wx.Menu.Remove "wx.Menu.Remove")





---

  





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Detach(self) -> None:
        """ 

`Detach`(*self*)[¶](#wx.Menu.Detach "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Enable(self, id, enable) -> None:
        """ 

`Enable`(*self*, *id*, *enable*)[¶](#wx.Menu.Enable "Permalink to this definition")
Enables or disables (greys out) a menu item.



Parameters
* **id** (*int*) – The menu item identifier.
* **enable** (*bool*) – `True` to enable the menu item, `False` to disable it.





See also


[`IsEnabled`](#wx.Menu.IsEnabled "wx.Menu.IsEnabled")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def FindChildItem(self, id: int) -> tuple:
        """ 

`FindChildItem`(*self*, *id*)[¶](#wx.Menu.FindChildItem "Permalink to this definition")
Finds the menu item object associated with the given menu item identifier and, optionally, the position of the item in the menu.


Unlike [`FindItem`](#wx.Menu.FindItem "wx.Menu.FindItem") , this function doesn’t recurse but only looks at the direct children of this menu.



Parameters
**id** (*int*) – The identifier of the menu item to find.



Return type
*tuple*



Returns
(  [wx.MenuItem](wx.MenuItem.html#wx-menuitem), *pos* )






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def FindItem(self, *args, **kw) -> int:
        """ 

`FindItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Menu.FindItem "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**FindItem** *(self, itemString)*


Finds the menu id for a menu item string.



Parameters
**itemString** (*string*) – Menu item string to find.



Return type
*int*



Returns
Menu item identifier, or `wx.NOT_FOUND` if none is found.





Note


Any special menu codes are stripped out of source and target strings before matching.





---

  



**FindItem** *(self, id)*


Finds the menu item object associated with the given menu item identifier and, optionally, the (sub)menu it belongs to.



Parameters
**id** (*int*) – Menu item identifier.



Return type
*tuple*



Returns
(  [wx.MenuItem](wx.MenuItem.html#wx-menuitem), *menu* )






---

  





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def FindItemById(self, id) -> 'MenuItem':
        """ 

`FindItemById`(*self*, *id*)[¶](#wx.Menu.FindItemById "Permalink to this definition")

> FindItemById(id) . MenuItem
> 
> 
> Finds the menu item object associated with the given menu item identifier.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def FindItemByPosition(self, position: int) -> 'MenuItem':
        """ 

`FindItemByPosition`(*self*, *position*)[¶](#wx.Menu.FindItemByPosition "Permalink to this definition")
Returns the  [wx.MenuItem](wx.MenuItem.html#wx-menuitem) given a position in the menu.



Parameters
**position** (*int*) – 



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetHelpString(self, id: int) -> str:
        """ 

`GetHelpString`(*self*, *id*)[¶](#wx.Menu.GetHelpString "Permalink to this definition")
Returns the help string associated with a menu item.



Parameters
**id** (*int*) – The menu item identifier.



Return type
`string`



Returns
The help string, or the empty string if there is no help string or the item was not found.





See also


[`SetHelpString`](#wx.Menu.SetHelpString "wx.Menu.SetHelpString") , [`Append`](#wx.Menu.Append "wx.Menu.Append")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetInvokingWindow(self) -> 'Window':
        """ 

`GetInvokingWindow`(*self*)[¶](#wx.Menu.GetInvokingWindow "Permalink to this definition")

Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetLabel(self, id: int) -> str:
        """ 

`GetLabel`(*self*, *id*)[¶](#wx.Menu.GetLabel "Permalink to this definition")
Returns a menu item label.



Parameters
**id** (*int*) – The menu item identifier.



Return type
`string`



Returns
The item label, or the empty string if the item was not found.





See also


[`GetLabelText`](#wx.Menu.GetLabelText "wx.Menu.GetLabelText") , [`SetLabel`](#wx.Menu.SetLabel "wx.Menu.SetLabel")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetLabelText(self, id: int) -> str:
        """ 

`GetLabelText`(*self*, *id*)[¶](#wx.Menu.GetLabelText "Permalink to this definition")
Returns a menu item label, without any of the original mnemonics and accelerators.



Parameters
**id** (*int*) – The menu item identifier.



Return type
`string`



Returns
The item label, or the empty string if the item was not found.





See also


[`GetLabel`](#wx.Menu.GetLabel "wx.Menu.GetLabel") , [`SetLabel`](#wx.Menu.SetLabel "wx.Menu.SetLabel")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetMenuItemCount(self) -> int:
        """ 

`GetMenuItemCount`(*self*)[¶](#wx.Menu.GetMenuItemCount "Permalink to this definition")
Returns the number of items in the menu.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetMenuItems(self) -> 'MenuItemList':
        """ 

`GetMenuItems`(*self*)[¶](#wx.Menu.GetMenuItems "Permalink to this definition")
Returns the list of items in the menu.


MenuItemList is a pseudo-template list class containing  [wx.MenuItem](wx.MenuItem.html#wx-menuitem) pointers, see List.



Return type
*MenuItemList*






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetParent(self) -> 'Menu':
        """ 

`GetParent`(*self*)[¶](#wx.Menu.GetParent "Permalink to this definition")

Return type
 [wx.Menu](#wx-menu)






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetStyle(self) -> int:
        """ 

`GetStyle`(*self*)[¶](#wx.Menu.GetStyle "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetTitle(self) -> str:
        """ 

`GetTitle`(*self*)[¶](#wx.Menu.GetTitle "Permalink to this definition")
Returns the title of the menu.



Return type
`string`





See also


[`SetTitle`](#wx.Menu.SetTitle "wx.Menu.SetTitle")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.Menu.GetWindow "Permalink to this definition")

Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Insert(self, *args, **kw) -> 'MenuItem':
        """ 

`Insert`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Menu.Insert "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Insert** *(self, pos, menuItem)*


Inserts the given *item* before the position *pos*.


Inserting the item at position [`GetMenuItemCount`](#wx.Menu.GetMenuItemCount "wx.Menu.GetMenuItemCount") is the same as appending it.



Parameters
* **pos** (*int*) –
* **menuItem** ([*wx.MenuItem*](wx.MenuItem.html#wx.MenuItem "wx.MenuItem")) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Append`](#wx.Menu.Append "wx.Menu.Append") , [`Prepend`](#wx.Menu.Prepend "wx.Menu.Prepend")





---

  



**Insert** *(self, pos, id, item=””, helpString=””, kind=ITEM\_NORMAL)*


Inserts the given *item* before the position *pos*.


Inserting the item at position [`GetMenuItemCount`](#wx.Menu.GetMenuItemCount "wx.Menu.GetMenuItemCount") is the same as appending it.



Parameters
* **pos** (*int*) –
* **id** (*int*) –
* **item** (*string*) –
* **helpString** (*string*) –
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Append`](#wx.Menu.Append "wx.Menu.Append") , [`Prepend`](#wx.Menu.Prepend "wx.Menu.Prepend")





---

  



**Insert** *(self, pos, id, text, submenu, help=””)*


Inserts the given *submenu* before the position *pos*.


*text* is the text shown in the menu for it and *help* is the help string shown in the status bar when the submenu item is selected.



Parameters
* **pos** (*int*) –
* **id** (*int*) –
* **text** (*string*) –
* **submenu** ([*wx.Menu*](#wx.Menu "wx.Menu")) –
* **help** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`AppendSubMenu`](#wx.Menu.AppendSubMenu "wx.Menu.AppendSubMenu") , [`Prepend`](#wx.Menu.Prepend "wx.Menu.Prepend")





---

  





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def InsertCheckItem(self, pos, id, item, helpString="") -> 'MenuItem':
        """ 

`InsertCheckItem`(*self*, *pos*, *id*, *item*, *helpString=""*)[¶](#wx.Menu.InsertCheckItem "Permalink to this definition")
Inserts a checkable item at the given position.



Parameters
* **pos** (*int*) –
* **id** (*int*) –
* **item** (*string*) –
* **helpString** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Insert`](#wx.Menu.Insert "wx.Menu.Insert") , [`AppendCheckItem`](#wx.Menu.AppendCheckItem "wx.Menu.AppendCheckItem")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def InsertRadioItem(self, pos, id, item, helpString="") -> 'MenuItem':
        """ 

`InsertRadioItem`(*self*, *pos*, *id*, *item*, *helpString=""*)[¶](#wx.Menu.InsertRadioItem "Permalink to this definition")
Inserts a radio item at the given position.



Parameters
* **pos** (*int*) –
* **id** (*int*) –
* **item** (*string*) –
* **helpString** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Insert`](#wx.Menu.Insert "wx.Menu.Insert") , [`AppendRadioItem`](#wx.Menu.AppendRadioItem "wx.Menu.AppendRadioItem")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def InsertSeparator(self, pos: int) -> 'MenuItem':
        """ 

`InsertSeparator`(*self*, *pos*)[¶](#wx.Menu.InsertSeparator "Permalink to this definition")
Inserts a separator at the given position.



Parameters
**pos** (*int*) – 



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Insert`](#wx.Menu.Insert "wx.Menu.Insert") , [`AppendSeparator`](#wx.Menu.AppendSeparator "wx.Menu.AppendSeparator")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def IsAttached(self) -> bool:
        """ 

`IsAttached`(*self*)[¶](#wx.Menu.IsAttached "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def IsChecked(self, id: int) -> bool:
        """ 

`IsChecked`(*self*, *id*)[¶](#wx.Menu.IsChecked "Permalink to this definition")
Determines whether a menu item is checked.



Parameters
**id** (*int*) – The menu item identifier.



Return type
*bool*



Returns
`True` if the menu item is checked, `False` otherwise.





See also


[`Check`](#wx.Menu.Check "wx.Menu.Check")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def IsEnabled(self, id: int) -> bool:
        """ 

`IsEnabled`(*self*, *id*)[¶](#wx.Menu.IsEnabled "Permalink to this definition")
Determines whether a menu item is enabled.



Parameters
**id** (*int*) – The menu item identifier.



Return type
*bool*



Returns
`True` if the menu item is enabled, `False` otherwise.





See also


[`Enable`](#wx.Menu.Enable "wx.Menu.Enable")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Prepend(self, *args, **kw) -> 'MenuItem':
        """ 

`Prepend`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Menu.Prepend "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Prepend** *(self, menuItem)*


Inserts the given *item* at position 0, i.e. before all the other existing items.



Parameters
**menuItem** ([*wx.MenuItem*](wx.MenuItem.html#wx.MenuItem "wx.MenuItem")) – 



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Append`](#wx.Menu.Append "wx.Menu.Append") , [`Insert`](#wx.Menu.Insert "wx.Menu.Insert")





---

  



**Prepend** *(self, id, item=””, helpString=””, kind=ITEM\_NORMAL)*


Inserts the given *item* at position 0, i.e. before all the other existing items.



Parameters
* **id** (*int*) –
* **item** (*string*) –
* **helpString** (*string*) –
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Append`](#wx.Menu.Append "wx.Menu.Append") , [`Insert`](#wx.Menu.Insert "wx.Menu.Insert")





---

  



**Prepend** *(self, id, text, subMenu, help=””)*


Inserts the given *submenu* at position 0.



Parameters
* **id** (*int*) –
* **text** (*string*) –
* **subMenu** ([*wx.Menu*](#wx.Menu "wx.Menu")) –
* **help** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`AppendSubMenu`](#wx.Menu.AppendSubMenu "wx.Menu.AppendSubMenu") , [`Insert`](#wx.Menu.Insert "wx.Menu.Insert")





---

  





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def PrependCheckItem(self, id, item, helpString="") -> 'MenuItem':
        """ 

`PrependCheckItem`(*self*, *id*, *item*, *helpString=""*)[¶](#wx.Menu.PrependCheckItem "Permalink to this definition")
Inserts a checkable item at position 0.



Parameters
* **id** (*int*) –
* **item** (*string*) –
* **helpString** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Prepend`](#wx.Menu.Prepend "wx.Menu.Prepend") , [`AppendCheckItem`](#wx.Menu.AppendCheckItem "wx.Menu.AppendCheckItem")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def PrependRadioItem(self, id, item, helpString="") -> 'MenuItem':
        """ 

`PrependRadioItem`(*self*, *id*, *item*, *helpString=""*)[¶](#wx.Menu.PrependRadioItem "Permalink to this definition")
Inserts a radio item at position 0.



Parameters
* **id** (*int*) –
* **item** (*string*) –
* **helpString** (*string*) –



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Prepend`](#wx.Menu.Prepend "wx.Menu.Prepend") , [`AppendRadioItem`](#wx.Menu.AppendRadioItem "wx.Menu.AppendRadioItem")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def PrependSeparator(self) -> 'MenuItem':
        """ 

`PrependSeparator`(*self*)[¶](#wx.Menu.PrependSeparator "Permalink to this definition")
Inserts a separator at position 0.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)





See also


[`Prepend`](#wx.Menu.Prepend "wx.Menu.Prepend") , [`AppendSeparator`](#wx.Menu.AppendSeparator "wx.Menu.AppendSeparator")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def Remove(self, *args, **kw) -> 'MenuItem':
        """ 

`Remove`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Menu.Remove "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Remove** *(self, id)*


Removes the menu item from the menu but doesn’t delete the associated C++ object.


This allows you to reuse the same item later by adding it back to the menu (especially useful with submenus).



Parameters
**id** (*int*) – The identifier of the menu item to remove.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)



Returns
A pointer to the item which was detached from the menu.






---

  



**Remove** *(self, item)*


Removes the menu item from the menu but doesn’t delete the associated C++ object.


This allows you to reuse the same item later by adding it back to the menu (especially useful with submenus).



Parameters
**item** ([*wx.MenuItem*](wx.MenuItem.html#wx.MenuItem "wx.MenuItem")) – The menu item to remove.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)



Returns
A pointer to the item which was detached from the menu.






---

  





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def SetHelpString(self, id, helpString) -> None:
        """ 

`SetHelpString`(*self*, *id*, *helpString*)[¶](#wx.Menu.SetHelpString "Permalink to this definition")
Sets an item’s help string.



Parameters
* **id** (*int*) – The menu item identifier.
* **helpString** (*string*) – The help string to set.





See also


[`GetHelpString`](#wx.Menu.GetHelpString "wx.Menu.GetHelpString")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def SetInvokingWindow(self, win: 'Window') -> None:
        """ 

`SetInvokingWindow`(*self*, *win*)[¶](#wx.Menu.SetInvokingWindow "Permalink to this definition")

Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def SetLabel(self, id, label) -> None:
        """ 

`SetLabel`(*self*, *id*, *label*)[¶](#wx.Menu.SetLabel "Permalink to this definition")
Sets the label of a menu item.



Parameters
* **id** (*int*) – The menu item identifier.
* **label** (*string*) – The menu item label to set.





See also


[`Append`](#wx.Menu.Append "wx.Menu.Append") , [`GetLabel`](#wx.Menu.GetLabel "wx.Menu.GetLabel")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def SetParent(self, parent: 'Menu') -> None:
        """ 

`SetParent`(*self*, *parent*)[¶](#wx.Menu.SetParent "Permalink to this definition")

Parameters
**parent** ([*wx.Menu*](#wx.Menu "wx.Menu")) – 






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def SetTitle(self, title: str) -> None:
        """ 

`SetTitle`(*self*, *title*)[¶](#wx.Menu.SetTitle "Permalink to this definition")
Sets the title of the menu.



Parameters
**title** (*string*) – The title to set.





Note


Notice that you can only call this method directly for the popup menus, to change the title of a menu that is part of a menu bar you need to use `wx.MenuBar.SetLabelTop` .




See also


[`GetTitle`](#wx.Menu.GetTitle "wx.Menu.GetTitle")





            Source: https://docs.wxpython.org/wx.Menu.html
        """

    def UpdateUI(self, source: Optional['EvtHandler']=None) -> None:
        """ 

`UpdateUI`(*self*, *source=None*)[¶](#wx.Menu.UpdateUI "Permalink to this definition")
Update the state of all menu items, recursively, by generating `wxEVT_UPDATE_UI` events for them.


This is an internal wxWidgets function and shouldn’t normally be called from outside of the library. If it is called, *source* argument should not be used, it is deprecated and exists only for backwards compatibility.



Parameters
**source** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – 






            Source: https://docs.wxpython.org/wx.Menu.html
        """

    InvokingWindow: 'Window'  # `InvokingWindow`[¶](#wx.Menu.InvokingWindow "Permalink to this definition")See [`GetInvokingWindow`](#wx.Menu.GetInvokingWindow "wx.Menu.GetInvokingWindow") and [`SetInvokingWindow`](#wx.Menu.SetInvokingWindow "wx.Menu.SetInvokingWindow")
    MenuItemCount: int  # `MenuItemCount`[¶](#wx.Menu.MenuItemCount "Permalink to this definition")See [`GetMenuItemCount`](#wx.Menu.GetMenuItemCount "wx.Menu.GetMenuItemCount")
    MenuItems: 'MenuItemList'  # `MenuItems`[¶](#wx.Menu.MenuItems "Permalink to this definition")See [`GetMenuItems`](#wx.Menu.GetMenuItems "wx.Menu.GetMenuItems")
    Parent: 'Menu'  # `Parent`[¶](#wx.Menu.Parent "Permalink to this definition")See [`GetParent`](#wx.Menu.GetParent "wx.Menu.GetParent") and [`SetParent`](#wx.Menu.SetParent "wx.Menu.SetParent")
    Style: int  # `Style`[¶](#wx.Menu.Style "Permalink to this definition")See [`GetStyle`](#wx.Menu.GetStyle "wx.Menu.GetStyle")
    Title: str  # `Title`[¶](#wx.Menu.Title "Permalink to this definition")See [`GetTitle`](#wx.Menu.GetTitle "wx.Menu.GetTitle") and [`SetTitle`](#wx.Menu.SetTitle "wx.Menu.SetTitle")
    Window: '_Window'  # `Window`[¶](#wx.Menu.Window "Permalink to this definition")See [`GetWindow`](#wx.Menu.GetWindow "wx.Menu.GetWindow")



MENU_TEAROFF: int

class MenuBar(Window):
    """ **Possible constructors**:



```
MenuBar(style=0)

```


A menu bar is a series of menus accessible from the top of a frame.


  


        Source: https://docs.wxpython.org/wx.MenuBar.html
    """
    def __init__(self, style: int=0) -> None:
        """ 

`__init__`(*self*, *style=0*)[¶](#wx.MenuBar.__init__ "Permalink to this definition")
Construct an empty menu bar.



Parameters
**style** (*long*) – If `wx.MB_DOCKABLE` the menu bar can be detached (wxGTK only).






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Append(self, menu, title) -> bool:
        """ 

`Append`(*self*, *menu*, *title*)[¶](#wx.MenuBar.Append "Permalink to this definition")
Adds the item to the end of the menu bar.



Parameters
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – The menu to add. Do not deallocate this menu after calling [`Append`](#wx.MenuBar.Append "wx.MenuBar.Append") .
* **title** (*string*) – The title of the menu, must be non-empty.



Return type
*bool*



Returns
`True` on success, `False` if an error occurred.





See also


[`Insert`](#wx.MenuBar.Insert "wx.MenuBar.Insert")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Attach(self, frame: 'Frame') -> None:
        """ 

`Attach`(*self*, *frame*)[¶](#wx.MenuBar.Attach "Permalink to this definition")

Parameters
**frame** ([*wx.Frame*](wx.Frame.html#wx.Frame "wx.Frame")) – 






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Check(self, id, check) -> None:
        """ 

`Check`(*self*, *id*, *check*)[¶](#wx.MenuBar.Check "Permalink to this definition")
Checks or unchecks a menu item.



Parameters
* **id** (*int*) – The menu item identifier.
* **check** (*bool*) – If `True`, checks the menu item, otherwise the item is unchecked.





Note


Only use this when the menu bar has been associated with a frame; otherwise, use the  [wx.Menu](wx.Menu.html#wx-menu) equivalent call.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Detach(self) -> None:
        """ 

`Detach`(*self*)[¶](#wx.MenuBar.Detach "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Enable(self, id, enable) -> None:
        """ 

`Enable`(*self*, *id*, *enable*)[¶](#wx.MenuBar.Enable "Permalink to this definition")
Enables or disables (greys out) a menu item.



Parameters
* **id** (*int*) – The menu item identifier.
* **enable** (*bool*) – `True` to enable the item, `False` to disable it.





Note


Only use this when the menu bar has been associated with a frame; otherwise, use the  [wx.Menu](wx.Menu.html#wx-menu) equivalent call.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def EnableTop(self, pos, enable) -> None:
        """ 

`EnableTop`(*self*, *pos*, *enable*)[¶](#wx.MenuBar.EnableTop "Permalink to this definition")
Enables or disables a whole menu.



Parameters
* **pos** (*int*) – The position of the menu, starting from zero.
* **enable** (*bool*) – `True` to enable the menu, `False` to disable it.





Note


Only use this when the menu bar has been associated with a frame.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def FindItem(self, id: int) -> tuple:
        """ 

`FindItem`(*self*, *id*)[¶](#wx.MenuBar.FindItem "Permalink to this definition")
Finds the menu item object associated with the given menu item identifier.



Parameters
**id** (*int*) – Menu item identifier.



Return type
*tuple*






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def FindItemById(self, id) -> 'MenuItem':
        """ 

`FindItemById`(*self*, *id*)[¶](#wx.MenuBar.FindItemById "Permalink to this definition")

> FindItemById(id) . MenuItem
> 
> 
> Finds the menu item object associated with the given menu item identifier.



Return type
 [wx.MenuItem](wx.MenuItem.html#wx-menuitem)






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def FindMenu(self, title: str) -> int:
        """ 

`FindMenu`(*self*, *title*)[¶](#wx.MenuBar.FindMenu "Permalink to this definition")
Returns the index of the menu with the given *title* or `NOT_FOUND` if no such menu exists in this menubar.


The *title* parameter may specify either the menu title (with accelerator characters, i.e. `"&File"` ) or just the menu label ( `"File"` ) indifferently.



Parameters
**title** (*string*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def FindMenuItem(self, menuString, itemString) -> int:
        """ 

`FindMenuItem`(*self*, *menuString*, *itemString*)[¶](#wx.MenuBar.FindMenuItem "Permalink to this definition")
Finds the menu item id for a menu name/menu item string pair.



Parameters
* **menuString** (*string*) – Menu title to find.
* **itemString** (*string*) – Item to find.



Return type
*int*



Returns
The menu item identifier, or `wx.NOT_FOUND` if none was found.





Note


Any special menu codes are stripped out of source and target strings before matching.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def GetFrame(self) -> 'Frame':
        """ 

`GetFrame`(*self*)[¶](#wx.MenuBar.GetFrame "Permalink to this definition")

Return type
 [wx.Frame](wx.Frame.html#wx-frame)






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def GetHelpString(self, id: int) -> str:
        """ 

`GetHelpString`(*self*, *id*)[¶](#wx.MenuBar.GetHelpString "Permalink to this definition")
Gets the help string associated with the menu item identifier.



Parameters
**id** (*int*) – The menu item identifier.



Return type
`string`



Returns
The help string, or the empty string if there was no help string or the menu item was not found.





See also


[`SetHelpString`](#wx.MenuBar.SetHelpString "wx.MenuBar.SetHelpString")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def GetLabel(self, id: int) -> str:
        """ 

`GetLabel`(*self*, *id*)[¶](#wx.MenuBar.GetLabel "Permalink to this definition")
Gets the label associated with a menu item.



Parameters
**id** (*int*) – The menu item identifier.



Return type
`string`



Returns
The menu item label, or the empty string if the item was not found.





Note


Use only after the menubar has been associated with a frame.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def GetMenu(self, menuIndex: int) -> 'Menu':
        """ 

`GetMenu`(*self*, *menuIndex*)[¶](#wx.MenuBar.GetMenu "Permalink to this definition")
Returns the menu at *menuIndex* (zero-based).



Parameters
**menuIndex** (*int*) – 



Return type
 [wx.Menu](wx.Menu.html#wx-menu)






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def GetMenuCount(self) -> int:
        """ 

`GetMenuCount`(*self*)[¶](#wx.MenuBar.GetMenuCount "Permalink to this definition")
Returns the number of menus in this menubar.



Return type
*int*






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def GetMenuLabel(self, pos: int) -> str:
        """ 

`GetMenuLabel`(*self*, *pos*)[¶](#wx.MenuBar.GetMenuLabel "Permalink to this definition")
Returns the label of a top-level menu.


Note that the returned string includes the accelerator characters that have been specified in the menu title string during its construction.



Parameters
**pos** (*int*) – Position of the menu on the menu bar, starting from zero.



Return type
`string`



Returns
The menu label, or the empty string if the menu was not found.





Note


Use only after the menubar has been associated with a frame.




See also


[`GetMenuLabelText`](#wx.MenuBar.GetMenuLabelText "wx.MenuBar.GetMenuLabelText") , [`SetMenuLabel`](#wx.MenuBar.SetMenuLabel "wx.MenuBar.SetMenuLabel")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def GetMenuLabelText(self, pos: int) -> str:
        """ 

`GetMenuLabelText`(*self*, *pos*)[¶](#wx.MenuBar.GetMenuLabelText "Permalink to this definition")
Returns the label of a top-level menu.


Note that the returned string does not include any accelerator characters that may have been specified in the menu title string during its construction.



Parameters
**pos** (*int*) – Position of the menu on the menu bar, starting from zero.



Return type
`string`



Returns
The menu label, or the empty string if the menu was not found.





Note


Use only after the menubar has been associated with a frame.




See also


[`GetMenuLabel`](#wx.MenuBar.GetMenuLabel "wx.MenuBar.GetMenuLabel") , [`SetMenuLabel`](#wx.MenuBar.SetMenuLabel "wx.MenuBar.SetMenuLabel")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def GetMenus(self) -> None:
        """ 

`GetMenus`(*self*)[¶](#wx.MenuBar.GetMenus "Permalink to this definition")
Return a list of (menu, label) items for the menus in the `MenuBar`.




            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Insert(self, pos, menu, title) -> bool:
        """ 

`Insert`(*self*, *pos*, *menu*, *title*)[¶](#wx.MenuBar.Insert "Permalink to this definition")
Inserts the menu at the given position into the menu bar.


Inserting menu at position 0 will insert it in the very beginning of it, inserting at position [`GetMenuCount`](#wx.MenuBar.GetMenuCount "wx.MenuBar.GetMenuCount") is the same as calling [`Append`](#wx.MenuBar.Append "wx.MenuBar.Append") .



Parameters
* **pos** (*int*) – The position of the new menu in the menu bar
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – The menu to add.  [wx.MenuBar](#wx-menubar) owns the menu and will free it.
* **title** (*string*) – The title of the menu.



Return type
*bool*



Returns
`True` on success, `False` if an error occurred.





See also


[`Append`](#wx.MenuBar.Append "wx.MenuBar.Append")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def IsAttached(self) -> bool:
        """ 

`IsAttached`(*self*)[¶](#wx.MenuBar.IsAttached "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def IsChecked(self, id: int) -> bool:
        """ 

`IsChecked`(*self*, *id*)[¶](#wx.MenuBar.IsChecked "Permalink to this definition")
Determines whether an item is checked.



Parameters
**id** (*int*) – The menu item identifier.



Return type
*bool*



Returns
`True` if the item was found and is checked, `False` otherwise.






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def IsEnabled(self, id: int) -> bool:
        """ 

`IsEnabled`(*self*, *id*)[¶](#wx.MenuBar.IsEnabled "Permalink to this definition")
Determines whether an item is enabled.



Parameters
**id** (*int*) – The menu item identifier.



Return type
*bool*



Returns
`True` if the item was found and is enabled, `False` otherwise.






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def IsEnabledTop(self, pos: int) -> bool:
        """ 

`IsEnabledTop`(*self*, *pos*)[¶](#wx.MenuBar.IsEnabledTop "Permalink to this definition")
Returns `True` if the menu with the given index is enabled.



Parameters
**pos** (*int*) – The menu position (0-based)



Return type
*bool*





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    @staticmethod
    def MacGetCommonMenuBar() -> 'MenuBar':
        """ 

*static* `MacGetCommonMenuBar`()[¶](#wx.MenuBar.MacGetCommonMenuBar "Permalink to this definition")
Enables you to get the global menubar on Mac, that is, the menubar displayed when the app is running without any frames open.



Return type
 [wx.MenuBar](#wx-menubar)



Returns
The global menubar.





Note


Only exists on Mac, other platforms do not have this method.




Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    @staticmethod
    def MacSetCommonMenuBar(menubar: 'MenuBar') -> None:
        """ 

*static* `MacSetCommonMenuBar`(*menubar*)[¶](#wx.MenuBar.MacSetCommonMenuBar "Permalink to this definition")
Enables you to set the global menubar on Mac, that is, the menubar displayed when the app is running without any frames open.



Parameters
**menubar** ([*wx.MenuBar*](#wx.MenuBar "wx.MenuBar")) – The menubar to set.





Note


Only exists on Mac, other platforms do not have this method.




Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def OSXGetAppleMenu(self) -> 'Menu':
        """ 

`OSXGetAppleMenu`(*self*)[¶](#wx.MenuBar.OSXGetAppleMenu "Permalink to this definition")
Returns the Apple menu.


This is the leftmost menu with application’s name as its title. You shouldn’t remove any items from it, but it is safe to insert extra menu items or submenus into it.



Return type
 [wx.Menu](wx.Menu.html#wx-menu)





New in version 4.0/wxWidgets-3.0.1.




Availability


Only available for OSX.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Refresh(self, eraseBackground=True, rect=None) -> None:
        """ 

`Refresh`(*self*, *eraseBackground=True*, *rect=None*)[¶](#wx.MenuBar.Refresh "Permalink to this definition")
Redraw the menu bar.



Parameters
* **eraseBackground** (*bool*) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –






            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Remove(self, pos: int) -> 'Menu':
        """ 

`Remove`(*self*, *pos*)[¶](#wx.MenuBar.Remove "Permalink to this definition")
Removes the menu from the menu bar and returns the menu object - the caller is responsible for deleting it.


This function may be used together with [`Insert`](#wx.MenuBar.Insert "wx.MenuBar.Insert") to change the menubar dynamically.



Parameters
**pos** (*int*) – 



Return type
 [wx.Menu](wx.Menu.html#wx-menu)





See also


[`Replace`](#wx.MenuBar.Replace "wx.MenuBar.Replace")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def Replace(self, pos, menu, title) -> 'Menu':
        """ 

`Replace`(*self*, *pos*, *menu*, *title*)[¶](#wx.MenuBar.Replace "Permalink to this definition")
Replaces the menu at the given position with another one.



Parameters
* **pos** (*int*) – The position of the new menu in the menu bar
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – The menu to add.
* **title** (*string*) – The title of the menu.



Return type
 [wx.Menu](wx.Menu.html#wx-menu)



Returns
The menu which was previously at position pos. The caller is responsible for deleting it.





See also


[`Insert`](#wx.MenuBar.Insert "wx.MenuBar.Insert") , [`Remove`](#wx.MenuBar.Remove "wx.MenuBar.Remove")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def SetHelpString(self, id, helpString) -> None:
        """ 

`SetHelpString`(*self*, *id*, *helpString*)[¶](#wx.MenuBar.SetHelpString "Permalink to this definition")
Sets the help string associated with a menu item.



Parameters
* **id** (*int*) – Menu item identifier.
* **helpString** (*string*) – Help string to associate with the menu item.





See also


[`GetHelpString`](#wx.MenuBar.GetHelpString "wx.MenuBar.GetHelpString")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def SetLabel(self, id, label) -> None:
        """ 

`SetLabel`(*self*, *id*, *label*)[¶](#wx.MenuBar.SetLabel "Permalink to this definition")
Sets the label of a menu item.



Parameters
* **id** (*int*) – Menu item identifier.
* **label** (*string*) – Menu item label.





Note


Use only after the menubar has been associated with a frame.




See also


[`GetLabel`](#wx.MenuBar.GetLabel "wx.MenuBar.GetLabel")





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def SetMenuLabel(self, pos, label) -> None:
        """ 

`SetMenuLabel`(*self*, *pos*, *label*)[¶](#wx.MenuBar.SetMenuLabel "Permalink to this definition")
Sets the label of a top-level menu.



Parameters
* **pos** (*int*) – The position of a menu on the menu bar, starting from zero.
* **label** (*string*) – The menu label.





Note


Use only after the menubar has been associated with a frame.





            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    def SetMenus(self, items) -> None:
        """ 

`SetMenus`(*self*, *items*)[¶](#wx.MenuBar.SetMenus "Permalink to this definition")
SetMenus()


Clear and add new menus to the `MenuBar` from a list of (menu, label) items.




            Source: https://docs.wxpython.org/wx.MenuBar.html
        """

    Menus: None  # `Menus`[¶](#wx.MenuBar.Menus "Permalink to this definition")See [`GetMenus`](#wx.MenuBar.GetMenus "wx.MenuBar.GetMenus") and [`SetMenus`](#wx.MenuBar.SetMenus "wx.MenuBar.SetMenus")



MB_DOCKABLE: int

_Menu: TypeAlias = Menu

class MenuEvent(Event):
    """ **Possible constructors**:



```
MenuEvent(type=wxEVT_NULL, id=0, menu=None)

```


This class is used for a variety of menu-related events.


  


        Source: https://docs.wxpython.org/wx.MenuEvent.html
    """
    def __init__(self, type=wxEVT_NULL, id=0, menu=None) -> None:
        """ 

`__init__`(*self*, *type=wxEVT\_NULL*, *id=0*, *menu=None*)[¶](#wx.MenuEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **type** (*wx.EventType*) –
* **id** (*int*) –
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) –






            Source: https://docs.wxpython.org/wx.MenuEvent.html
        """

    def GetMenu(self) -> 'Menu':
        """ 

`GetMenu`(*self*)[¶](#wx.MenuEvent.GetMenu "Permalink to this definition")
Returns the menu which is being opened or closed, or the menu containing the highlighted item.


Note that the returned value can be `None` if the menu being opened doesn’t have a corresponding  [wx.Menu](wx.Menu.html#wx-menu), e.g. this happens when opening the system menu in wxMSW port.



Return type
 [wx.Menu](wx.Menu.html#wx-menu)





Note


Since 3.1.3 this function can be used with `OPEN` , `CLOSE` and `HIGHLIGHT` events. Before 3.1.3, this method can only be used with the `OPEN` and `CLOSE` events.





            Source: https://docs.wxpython.org/wx.MenuEvent.html
        """

    def GetMenuId(self) -> int:
        """ 

`GetMenuId`(*self*)[¶](#wx.MenuEvent.GetMenuId "Permalink to this definition")
Returns the menu identifier associated with the event.


This method should be only used with the `HIGHLIGHT` events.



Return type
*int*






            Source: https://docs.wxpython.org/wx.MenuEvent.html
        """

    def IsPopup(self) -> bool:
        """ 

`IsPopup`(*self*)[¶](#wx.MenuEvent.IsPopup "Permalink to this definition")
Returns `True` if the menu which is being opened or closed is a popup menu, `False` if it is a normal one.


This method should only be used with the `OPEN` and `CLOSE` events.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MenuEvent.html
        """

    Menu: '_Menu'  # `Menu`[¶](#wx.MenuEvent.Menu "Permalink to this definition")See [`GetMenu`](#wx.MenuEvent.GetMenu "wx.MenuEvent.GetMenu")
    MenuId: int  # `MenuId`[¶](#wx.MenuEvent.MenuId "Permalink to this definition")See [`GetMenuId`](#wx.MenuEvent.GetMenuId "wx.MenuEvent.GetMenuId")



class MenuItem(Object):
    """ **Possible constructors**:



```
MenuItem(parentMenu=None, id=ID_SEPARATOR, text="",
         helpString="", kind=ITEM_NORMAL, subMenu=None)

```


A menu item represents an item in a menu.


  


        Source: https://docs.wxpython.org/wx.MenuItem.html
    """
    def __init__(self, parentMenu=None, id=ID_SEPARATOR, text="", helpString="", kind=ITEM_NORMAL, subMenu=None) -> None:
        """ 

`__init__`(*self*, *parentMenu=None*, *id=ID\_SEPARATOR*, *text=""*, *helpString=""*, *kind=ITEM\_NORMAL*, *subMenu=None*)[¶](#wx.MenuItem.__init__ "Permalink to this definition")
Constructs a  [wx.MenuItem](#wx-menuitem) object.


Menu items can be standard, or “stock menu items”, or custom. For the standard menu items (such as commands to open a file, exit the program and so on, see [Stock Items](stock_items.html#stock-items) for the full list) it is enough to specify just the stock `ID` and leave *text* and *helpString* empty. Some platforms (currently wxGTK only, and see the remark in [`SetBitmap`](#wx.MenuItem.SetBitmap "wx.MenuItem.SetBitmap") documentation) will also show standard bitmaps for stock menu items.


Leaving at least *text* empty for the stock menu items is actually strongly recommended as they will have appearance and keyboard interface (including standard accelerators) familiar to the user.


For the custom (non-stock) menu items, *text* must be specified and while *helpString* may be left empty, it’s recommended to pass the item description (which is automatically shown by the library in the status bar when the menu item is selected) in this parameter.


Finally note that you can e.g. use a stock menu label without using its stock help string:



```
# use all stock properties:
helpMenu.Append(wx.ID_ABOUT)

# use the stock label and the stock accelerator but not the stock help string:
helpMenu.Append(wx.ID_ABOUT, "", "My custom help string")

# use all stock properties except for the bitmap:
mymenu = wx.MenuItem(helpMenu, wx.ID_ABOUT)
mymenu.SetBitmap(wx.ArtProvider.GetBitmap(wx.ART_WARNING))
helpMenu.Append(mymenu)

```


that is, stock properties are set independently one from the other.



Parameters
* **parentMenu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – Menu that the menu item belongs to. Can be `None` if the item is going to be added to the menu later.
* **id** (*int*) – Identifier for this menu item. May be `ID_SEPARATOR` , in which case the given kind is ignored and taken to be `ITEM_SEPARATOR` instead.
* **text** (*string*) – Text for the menu item, as shown on the menu. See [`SetItemLabel`](#wx.MenuItem.SetItemLabel "wx.MenuItem.SetItemLabel") for more info.
* **helpString** (*string*) – Optional help string that will be shown on the status bar.
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) – May be `ITEM_SEPARATOR` , `ITEM_NORMAL` , `ITEM_CHECK` or `ITEM_RADIO` .
* **subMenu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – If not `None`, indicates that the menu item is a submenu.






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def AddExtraAccel(self, accel: AcceleratorEntry) -> None:
        """ 

`AddExtraAccel`(*self*, *accel*)[¶](#wx.MenuItem.AddExtraAccel "Permalink to this definition")
Add an extra accelerator for this menu item.


Additional accelerators are not shown in the item’s label, but still will trigger the menu command when pressed.


They can be useful to let multiple keys be used as accelerators for the same command, e.g. `WXK_ADD` and `WXK_NUMPAD_ADD` .



Parameters
**accel** (`AcceleratorEntry`) – 





New in version 4.1/wxWidgets-3.1.6.




Availability


Only available for MSW, GTK.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def Check(self, check: bool=True) -> None:
        """ 

`Check`(*self*, *check=True*)[¶](#wx.MenuItem.Check "Permalink to this definition")
Checks or unchecks the menu item.


Note that this only works when the item is already appended to a menu.



Parameters
**check** (*bool*) – 






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def ClearExtraAccels(self) -> None:
        """ 

`ClearExtraAccels`(*self*)[¶](#wx.MenuItem.ClearExtraAccels "Permalink to this definition")
Clear the extra accelerators list.


This doesn’t affect the main item accelerator (if any).



New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def Enable(self, enable: bool=True) -> None:
        """ 

`Enable`(*self*, *enable=True*)[¶](#wx.MenuItem.Enable "Permalink to this definition")
Enables or disables the menu item.



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetAccel(self) -> 'AcceleratorEntry':
        """ 

`GetAccel`(*self*)[¶](#wx.MenuItem.GetAccel "Permalink to this definition")
Get our accelerator or `None` (caller must delete the pointer)



Return type
 [wx.AcceleratorEntry](wx.AcceleratorEntry.html#wx-acceleratorentry)






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetBackgroundColour(self) -> 'Colour':
        """ 

`GetBackgroundColour`(*self*)[¶](#wx.MenuItem.GetBackgroundColour "Permalink to this definition")
Returns the background colour associated with the menu item.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetBitmap(self, *args, **kw) -> 'Bitmap':
        """ 

`GetBitmap`(*self*, *\*args*, *\*\*kw*)[¶](#wx.MenuItem.GetBitmap "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetBitmap** *(self)*


Returns the item bitmap.


This method exists only for compatibility, please use [`GetBitmapBundle`](#wx.MenuItem.GetBitmapBundle "wx.MenuItem.GetBitmapBundle") in the new code.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






---

  



**GetBitmap** *(self, checked)*


Returns the checked or unchecked bitmap.


This overload only exists in wxMSW, avoid using it in portable code.



Parameters
**checked** (*bool*) – 



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






---

  





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetBitmapBundle(self) -> 'BitmapBundle':
        """ 

`GetBitmapBundle`(*self*)[¶](#wx.MenuItem.GetBitmapBundle "Permalink to this definition")
Returns the bitmap bundle containing the bitmap used for this item.


The returned bundle is invalid, i.e. empty, if no bitmap is associated with the item.



Return type
 [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle)





New in version 4.2/wxWidgets-3.2.0.




See also


[`SetBitmap`](#wx.MenuItem.SetBitmap "wx.MenuItem.SetBitmap")





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetDisabledBitmap(self) -> 'Bitmap':
        """ 

`GetDisabledBitmap`(*self*)[¶](#wx.MenuItem.GetDisabledBitmap "Permalink to this definition")
Returns the bitmap used for disabled items.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetFont(self) -> 'Font':
        """ 

`GetFont`(*self*)[¶](#wx.MenuItem.GetFont "Permalink to this definition")
Returns the font associated with the menu item.



Return type
 [wx.Font](wx.Font.html#wx-font)





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetHelp(self) -> str:
        """ 

`GetHelp`(*self*)[¶](#wx.MenuItem.GetHelp "Permalink to this definition")
Returns the help string associated with the menu item.



Return type
`string`






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetId(self) -> int:
        """ 

`GetId`(*self*)[¶](#wx.MenuItem.GetId "Permalink to this definition")
Returns the menu item identifier.



Return type
*int*






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetItemLabel(self) -> str:
        """ 

`GetItemLabel`(*self*)[¶](#wx.MenuItem.GetItemLabel "Permalink to this definition")
Returns the text associated with the menu item including any accelerator characters that were passed to the constructor or [`SetItemLabel`](#wx.MenuItem.SetItemLabel "wx.MenuItem.SetItemLabel") .



Return type
`string`





See also


[`GetItemLabelText`](#wx.MenuItem.GetItemLabelText "wx.MenuItem.GetItemLabelText") , [`GetLabelText`](#wx.MenuItem.GetLabelText "wx.MenuItem.GetLabelText")





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetItemLabelText(self) -> str:
        """ 

`GetItemLabelText`(*self*)[¶](#wx.MenuItem.GetItemLabelText "Permalink to this definition")
Returns the text associated with the menu item, without any accelerator characters.



Return type
`string`





See also


[`GetItemLabel`](#wx.MenuItem.GetItemLabel "wx.MenuItem.GetItemLabel") , [`GetLabelText`](#wx.MenuItem.GetLabelText "wx.MenuItem.GetLabelText")





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetKind(self) -> 'ItemKind':
        """ 

`GetKind`(*self*)[¶](#wx.MenuItem.GetKind "Permalink to this definition")
Returns the item kind, one of `ITEM_SEPARATOR` , `ITEM_NORMAL` , `ITEM_CHECK` or `ITEM_RADIO` .



Return type
 [wx.ItemKind](wx.ItemKind.enumeration.html#wx-itemkind)






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    @staticmethod
    def GetLabelText(text: str) -> str:
        """ 

*static* `GetLabelText`(*text*)[¶](#wx.MenuItem.GetLabelText "Permalink to this definition")
Strips all accelerator characters and mnemonics from the given *text*.


For example:



```
wx.MenuItem.GetLabelfromText("&Hello\tCtrl-h")

```


will return just `"Hello"` .



Parameters
**text** (*string*) – 



Return type
`string`





See also


[`GetItemLabelText`](#wx.MenuItem.GetItemLabelText "wx.MenuItem.GetItemLabelText") , [`GetItemLabel`](#wx.MenuItem.GetItemLabel "wx.MenuItem.GetItemLabel")





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetMarginWidth(self) -> int:
        """ 

`GetMarginWidth`(*self*)[¶](#wx.MenuItem.GetMarginWidth "Permalink to this definition")
Gets the width of the menu item checkmark bitmap.



Return type
*int*





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetMenu(self) -> 'Menu':
        """ 

`GetMenu`(*self*)[¶](#wx.MenuItem.GetMenu "Permalink to this definition")
Returns the menu this menu item is in, or `None` if this menu item is not attached.



Return type
 [wx.Menu](wx.Menu.html#wx-menu)






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetSubMenu(self) -> 'Menu':
        """ 

`GetSubMenu`(*self*)[¶](#wx.MenuItem.GetSubMenu "Permalink to this definition")
Returns the submenu associated with the menu item, or `None` if there isn’t one.



Return type
 [wx.Menu](wx.Menu.html#wx-menu)






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def GetTextColour(self) -> 'Colour':
        """ 

`GetTextColour`(*self*)[¶](#wx.MenuItem.GetTextColour "Permalink to this definition")
Returns the text colour associated with the menu item.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def IsCheck(self) -> bool:
        """ 

`IsCheck`(*self*)[¶](#wx.MenuItem.IsCheck "Permalink to this definition")
Returns `True` if the item is a check item.


Unlike [`IsCheckable`](#wx.MenuItem.IsCheckable "wx.MenuItem.IsCheckable") this doesn’t return `True` for the radio buttons.



Return type
*bool*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def IsCheckable(self) -> bool:
        """ 

`IsCheckable`(*self*)[¶](#wx.MenuItem.IsCheckable "Permalink to this definition")
Returns `True` if the item is checkable.


Notice that the radio buttons are considered to be checkable as well, so this method returns `True` for them too. Use [`IsCheck`](#wx.MenuItem.IsCheck "wx.MenuItem.IsCheck") if you want to test for the check items only.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def IsChecked(self) -> bool:
        """ 

`IsChecked`(*self*)[¶](#wx.MenuItem.IsChecked "Permalink to this definition")
Returns `True` if the item is checked.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def IsEnabled(self) -> bool:
        """ 

`IsEnabled`(*self*)[¶](#wx.MenuItem.IsEnabled "Permalink to this definition")
Returns `True` if the item is enabled.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def IsRadio(self) -> bool:
        """ 

`IsRadio`(*self*)[¶](#wx.MenuItem.IsRadio "Permalink to this definition")
Returns `True` if the item is a radio button.



Return type
*bool*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def IsSeparator(self) -> bool:
        """ 

`IsSeparator`(*self*)[¶](#wx.MenuItem.IsSeparator "Permalink to this definition")
Returns `True` if the item is a separator.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def IsSubMenu(self) -> bool:
        """ 

`IsSubMenu`(*self*)[¶](#wx.MenuItem.IsSubMenu "Permalink to this definition")
Returns `True` if the item is a submenu.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetAccel(self, accel: 'AcceleratorEntry') -> None:
        """ 

`SetAccel`(*self*, *accel*)[¶](#wx.MenuItem.SetAccel "Permalink to this definition")
Set the accel for this item - this may also be done indirectly with `SetText`



Parameters
**accel** ([*wx.AcceleratorEntry*](wx.AcceleratorEntry.html#wx.AcceleratorEntry "wx.AcceleratorEntry")) – 






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetBackgroundColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetBackgroundColour`(*self*, *colour*)[¶](#wx.MenuItem.SetBackgroundColour "Permalink to this definition")
Sets the background colour associated with the menu item.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetBitmap(self, *args, **kw) -> None:
        """ 

`SetBitmap`(*self*, *\*args*, *\*\*kw*)[¶](#wx.MenuItem.SetBitmap "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetBitmap** *(self, bmp)*


Sets the bitmap for the menu item.


Notice that GTK+ uses a global setting called `gtk-menu-images` to determine if the images should be shown in the menus at all. If it is off (which is the case in e.g. Gnome 2.28 by default), no images will be shown, consistently with the native behaviour.



Parameters
**bmp** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 






---

  



**SetBitmap** *(self, bmp, checked)*


Sets the checked or unchecked bitmap for the menu item.


It is equivalent to *MenuItem.SetBitmaps(bmp,* NullBitmap) if *checked* is `True` or SetBitmaps(wxNullBitmap, bmp) otherwise.


Note that different bitmaps for checked and unchecked item states are not supported in most ports, while setting just a single bitmap using the overload above is supported in all of them.



Parameters
* **bmp** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **checked** (*bool*) –





Availability


Only available for MSW.





---

  





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetBitmaps(self, checked, unchecked=NullBitmap) -> None:
        """ 

`SetBitmaps`(*self*, *checked*, *unchecked=NullBitmap*)[¶](#wx.MenuItem.SetBitmaps "Permalink to this definition")
Sets the checked/unchecked bitmaps for the menu item.


The first bitmap is also used as the single bitmap for uncheckable menu items.



Parameters
* **checked** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **unchecked** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetDisabledBitmap(self, disabled: 'BitmapBundle') -> None:
        """ 

`SetDisabledBitmap`(*self*, *disabled*)[¶](#wx.MenuItem.SetDisabledBitmap "Permalink to this definition")
Sets the to be used for disabled menu items.



Parameters
**disabled** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetFont(self, font: 'Font') -> None:
        """ 

`SetFont`(*self*, *font*)[¶](#wx.MenuItem.SetFont "Permalink to this definition")
Sets the font associated with the menu item.



Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetHelp(self, helpString: str) -> None:
        """ 

`SetHelp`(*self*, *helpString*)[¶](#wx.MenuItem.SetHelp "Permalink to this definition")
Sets the help string.



Parameters
**helpString** (*string*) – 






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetItemLabel(self, label: str) -> None:
        """ 

`SetItemLabel`(*self*, *label*)[¶](#wx.MenuItem.SetItemLabel "Permalink to this definition")
Sets the label associated with the menu item.


Note that if the `ID` of this menu item corresponds to a stock `ID`, then it is not necessary to specify a label: wxWidgets will automatically use the stock item label associated with that `ID`. See the `constructor` for more info.


The label string for the normal menu items (not separators) may include the accelerator which can be used to activate the menu item from keyboard. An accelerator key can be specified using the ampersand `&` character. In order to embed an ampersand character in the menu item text, the ampersand must be doubled.


Optionally you can specify also an accelerator string appending a tab character `\t` followed by a valid key combination (e.g. `CTRL+V` ). Its general syntax is any combination of `"CTRL"` , `"RAWCTRL"` , `"ALT"` and `"SHIFT"` strings (case doesn’t matter) separated by either `'-'` or `'+'` characters and followed by the accelerator itself. Notice that `CTRL` corresponds to the “Ctrl” key on most platforms but not under macOS where it is mapped to “Cmd” key on Mac keyboard. Usually this is exactly what you want in portable code but if you really need to use the (rarely used for this purpose) “Ctrl” key even under Mac, you may use `RAWCTRL` to prevent this mapping. Under the other platforms `RAWCTRL` is the same as plain `CTRL` .


The accelerator may be any alphanumeric character, any function key (from `F1` to `F12` ), any numpad digit key using `KP_` prefix (i.e. from `KP_0` to `KP_9` ) or one of the special strings listed below (again, case doesn’t matter) corresponding to the specified key code:


* `Del` or `Delete:` `wx.WXK_DELETE`
* `Back:` `wx.WXK_BACK`
* `Ins` or `Insert:` `wx.WXK_INSERT`
* `Enter` or `Return:` `wx.WXK_RETURN`
* `PgUp` or `PageUp:` `wx.WXK_PAGEUP`
* `PgDn` or `PageDown:` `wx.WXK_PAGEDOWN`
* `Left:` `wx.WXK_LEFT`
* `Right:` `wx.WXK_RIGHT`
* `Up:` `wx.WXK_UP`
* `Down:` `wx.WXK_DOWN`
* `Home:` `wx.WXK_HOME`
* `End:` `wx.WXK_END`
* `Space:` `wx.WXK_SPACE`
* `Tab:` `wx.WXK_TAB`
* `Esc` or `Escape:` `wx.WXK_ESCAPE`
* `Cancel:` `wx.WXK_CANCEL`
* `Clear:` `wx.WXK_CLEAR`
* `Menu:` `wx.WXK_MENU`
* `Pause:` `wx.WXK_PAUSE`
* `Capital:` `wx.WXK_CAPITAL`
* `Select:` `wx.WXK_SELECT`
* `Print:` `wx.WXK_PRINT`
* `Execute:` `wx.WXK_EXECUTE`
* `Snapshot:` `wx.WXK_SNAPSHOT`
* `Help:` `wx.WXK_HELP`
* `Add:` `wx.WXK_ADD`
* `Separator:` `wx.WXK_SEPARATOR`
* `Subtract:` `wx.WXK_SUBTRACT`
* `Decimal:` `wx.WXK_DECIMAL`
* `Divide:` `wx.WXK_DIVIDE`
* `Num_lock:` `wx.WXK_NUMLOCK`
* `Scroll_lock:` `wx.WXK_SCROLL`
* `KP_Space:` `wx.WXK_NUMPAD_SPACE`
* `KP_Tab:` `wx.WXK_NUMPAD_TAB`
* `KP_Enter:` `wx.WXK_NUMPAD_ENTER`
* `KP_Home:` `wx.WXK_NUMPAD_HOME`
* `KP_Left:` `wx.WXK_NUMPAD_LEFT`
* `KP_Up:` `wx.WXK_NUMPAD_UP`
* `KP_Right:` `wx.WXK_NUMPAD_RIGHT`
* `KP_Down:` `wx.WXK_NUMPAD_DOWN`
* `KP_PageUp:` `wx.WXK_NUMPAD_PAGEUP`
* `KP_PageDown:` `wx.WXK_NUMPAD_PAGEDOWN`
* `KP_Prior:` `wx.WXK_NUMPAD_PAGEUP`
* `KP_Next:` `wx.WXK_NUMPAD_PAGEDOWN`
* `KP_End:` `wx.WXK_NUMPAD_END`
* `KP_Begin:` `wx.WXK_NUMPAD_BEGIN`
* `KP_Insert:` `wx.WXK_NUMPAD_INSERT`
* `KP_Delete:` `wx.WXK_NUMPAD_DELETE`
* `KP_Equal:` `wx.WXK_NUMPAD_EQUAL`
* `KP_Multiply:` `wx.WXK_NUMPAD_MULTIPLY`
* `KP_Add:` `wx.WXK_NUMPAD_ADD`
* `KP_Separator:` `wx.WXK_NUMPAD_SEPARATOR`
* `KP_Subtract:` `wx.WXK_NUMPAD_SUBTRACT`
* `KP_Decimal:` `wx.WXK_NUMPAD_DECIMAL`
* `KP_Divide:` `wx.WXK_NUMPAD_DIVIDE`
* `Windows_Left:` `wx.WXK_WINDOWS_LEFT`
* `Windows_Right:` `wx.WXK_WINDOWS_RIGHT`
* `Windows_Menu:` `wx.WXK_WINDOWS_MENU`
* `Command:` `wx.WXK_COMMAND`


Examples:



```
self.myMenuItem.SetItemLabel("My &item\tCTRL+I")
self.myMenuItem2.SetItemLabel("Clean and build\tF7")
self.myMenuItem3.SetItemLabel("Simple item")
self.myMenuItem4.SetItemLabel("Item with &accelerator")

```



Parameters
**label** (*string*) – 





Note


In wxGTK using `"SHIFT"` with non-alphabetic characters currently doesn’t work, even in combination with other modifiers, due to GTK+ limitation. E.g. `Shift+Ctrl+A` works but `Shift+Ctrl+1` or `Shift+/` do not, so avoid using accelerators of this form in portable code.




Note


In GTk, the left/right/up/down arrow keys do not work as accelerator keys for a menu item unless a modifier key is used. Additionally, the following keycodes are not supported as menu accelerator keys:


* WXK\_COMMAND/WXK\_CONTROL
* `wx.WXK_SHIFT`
* `wx.WXK_ALT`
* `wx.WXK_SCROLL`
* `wx.WXK_CAPITAL`
* `wx.WXK_NUMLOCK`
* `wx.WXK_NUMPAD_TAB`
* `wx.WXK_TAB`
* `wx.WXK_WINDOWS_LEFT`
* `wx.WXK_WINDOWS_RIGHT`
* `wx.WXK_ADD`
* `wx.WXK_SEPARATOR`
* `wx.WXK_SUBTRACT`
* `wx.WXK_DECIMAL`
* `wx.WXK_DIVIDE`
* `wx.WXK_SNAPSHOT`




See also


[`GetItemLabel`](#wx.MenuItem.GetItemLabel "wx.MenuItem.GetItemLabel") , [`GetItemLabelText`](#wx.MenuItem.GetItemLabelText "wx.MenuItem.GetItemLabelText")





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetMarginWidth(self, width: int) -> None:
        """ 

`SetMarginWidth`(*self*, *width*)[¶](#wx.MenuItem.SetMarginWidth "Permalink to this definition")
Sets the width of the menu item checkmark bitmap.



Parameters
**width** (*int*) – 





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetMenu(self, menu: 'Menu') -> None:
        """ 

`SetMenu`(*self*, *menu*)[¶](#wx.MenuItem.SetMenu "Permalink to this definition")
Sets the parent menu which will contain this menu item.



Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – 






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetSubMenu(self, menu: 'Menu') -> None:
        """ 

`SetSubMenu`(*self*, *menu*)[¶](#wx.MenuItem.SetSubMenu "Permalink to this definition")
Sets the submenu of this menu item.



Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – 






            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    def SetTextColour(self, colour: Union[int, str, 'Colour']) -> None:
        """ 

`SetTextColour`(*self*, *colour*)[¶](#wx.MenuItem.SetTextColour "Permalink to this definition")
Sets the text colour associated with the menu item.



Parameters
**colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 





Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.MenuItem.html
        """

    Accel: 'AcceleratorEntry'  # `Accel`[¶](#wx.MenuItem.Accel "Permalink to this definition")See [`GetAccel`](#wx.MenuItem.GetAccel "wx.MenuItem.GetAccel") and [`SetAccel`](#wx.MenuItem.SetAccel "wx.MenuItem.SetAccel")
    BackgroundColour: 'Colour'  # `BackgroundColour`[¶](#wx.MenuItem.BackgroundColour "Permalink to this definition")See [`GetBackgroundColour`](#wx.MenuItem.GetBackgroundColour "wx.MenuItem.GetBackgroundColour") and [`SetBackgroundColour`](#wx.MenuItem.SetBackgroundColour "wx.MenuItem.SetBackgroundColour")
    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.MenuItem.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.MenuItem.GetBitmap "wx.MenuItem.GetBitmap") and [`SetBitmap`](#wx.MenuItem.SetBitmap "wx.MenuItem.SetBitmap")
    BitmapBundle: '_BitmapBundle'  # `BitmapBundle`[¶](#wx.MenuItem.BitmapBundle "Permalink to this definition")See [`GetBitmapBundle`](#wx.MenuItem.GetBitmapBundle "wx.MenuItem.GetBitmapBundle")
    DisabledBitmap: 'Bitmap'  # `DisabledBitmap`[¶](#wx.MenuItem.DisabledBitmap "Permalink to this definition")See [`GetDisabledBitmap`](#wx.MenuItem.GetDisabledBitmap "wx.MenuItem.GetDisabledBitmap") and [`SetDisabledBitmap`](#wx.MenuItem.SetDisabledBitmap "wx.MenuItem.SetDisabledBitmap")
    Enabled: Any  # `Enabled`[¶](#wx.MenuItem.Enabled "Permalink to this definition")See [`IsEnabled`](#wx.MenuItem.IsEnabled "wx.MenuItem.IsEnabled") and [`Enable`](#wx.MenuItem.Enable "wx.MenuItem.Enable")
    Font: '_Font'  # `Font`[¶](#wx.MenuItem.Font "Permalink to this definition")See [`GetFont`](#wx.MenuItem.GetFont "wx.MenuItem.GetFont") and [`SetFont`](#wx.MenuItem.SetFont "wx.MenuItem.SetFont")
    Help: str  # `Help`[¶](#wx.MenuItem.Help "Permalink to this definition")See [`GetHelp`](#wx.MenuItem.GetHelp "wx.MenuItem.GetHelp") and [`SetHelp`](#wx.MenuItem.SetHelp "wx.MenuItem.SetHelp")
    Id: int  # `Id`[¶](#wx.MenuItem.Id "Permalink to this definition")See [`GetId`](#wx.MenuItem.GetId "wx.MenuItem.GetId")
    ItemLabel: str  # `ItemLabel`[¶](#wx.MenuItem.ItemLabel "Permalink to this definition")See [`GetItemLabel`](#wx.MenuItem.GetItemLabel "wx.MenuItem.GetItemLabel") and [`SetItemLabel`](#wx.MenuItem.SetItemLabel "wx.MenuItem.SetItemLabel")
    ItemLabelText: str  # `ItemLabelText`[¶](#wx.MenuItem.ItemLabelText "Permalink to this definition")See [`GetItemLabelText`](#wx.MenuItem.GetItemLabelText "wx.MenuItem.GetItemLabelText")
    Kind: 'ItemKind'  # `Kind`[¶](#wx.MenuItem.Kind "Permalink to this definition")See [`GetKind`](#wx.MenuItem.GetKind "wx.MenuItem.GetKind")
    MarginWidth: int  # `MarginWidth`[¶](#wx.MenuItem.MarginWidth "Permalink to this definition")See [`GetMarginWidth`](#wx.MenuItem.GetMarginWidth "wx.MenuItem.GetMarginWidth") and [`SetMarginWidth`](#wx.MenuItem.SetMarginWidth "wx.MenuItem.SetMarginWidth")
    Menu: '_Menu'  # `Menu`[¶](#wx.MenuItem.Menu "Permalink to this definition")See [`GetMenu`](#wx.MenuItem.GetMenu "wx.MenuItem.GetMenu") and [`SetMenu`](#wx.MenuItem.SetMenu "wx.MenuItem.SetMenu")
    SubMenu: 'Menu'  # `SubMenu`[¶](#wx.MenuItem.SubMenu "Permalink to this definition")See [`GetSubMenu`](#wx.MenuItem.GetSubMenu "wx.MenuItem.GetSubMenu") and [`SetSubMenu`](#wx.MenuItem.SetSubMenu "wx.MenuItem.SetSubMenu")
    TextColour: 'Colour'  # `TextColour`[¶](#wx.MenuItem.TextColour "Permalink to this definition")See [`GetTextColour`](#wx.MenuItem.GetTextColour "wx.MenuItem.GetTextColour") and [`SetTextColour`](#wx.MenuItem.SetTextColour "wx.MenuItem.SetTextColour")



WXK_DELETE: int

WXK_BACK: int

WXK_INSERT: int

WXK_RETURN: int

WXK_PAGEUP: int

WXK_PAGEDOWN: int

WXK_LEFT: int

WXK_RIGHT: int

WXK_UP: int

WXK_DOWN: int

WXK_HOME: int

WXK_END: int

WXK_SPACE: int

WXK_TAB: int

WXK_ESCAPE: int

WXK_CANCEL: int

WXK_CLEAR: int

WXK_MENU: int

WXK_PAUSE: int

WXK_CAPITAL: int

WXK_SELECT: int

WXK_PRINT: int

WXK_EXECUTE: int

WXK_SNAPSHOT: int

WXK_HELP: int

WXK_ADD: int

WXK_SEPARATOR: int

WXK_SUBTRACT: int

WXK_DECIMAL: int

WXK_DIVIDE: int

WXK_NUMLOCK: int

WXK_SCROLL: int

WXK_NUMPAD_SPACE: int

WXK_NUMPAD_TAB: int

WXK_NUMPAD_ENTER: int

WXK_NUMPAD_HOME: int

WXK_NUMPAD_LEFT: int

WXK_NUMPAD_UP: int

WXK_NUMPAD_RIGHT: int

WXK_NUMPAD_DOWN: int

WXK_NUMPAD_PAGEUP: int

WXK_NUMPAD_PAGEDOWN: int

WXK_NUMPAD_END: int

WXK_NUMPAD_BEGIN: int

WXK_NUMPAD_INSERT: int

WXK_NUMPAD_DELETE: int

WXK_NUMPAD_EQUAL: int

WXK_NUMPAD_MULTIPLY: int

WXK_NUMPAD_ADD: int

WXK_NUMPAD_SEPARATOR: int

WXK_NUMPAD_SUBTRACT: int

WXK_NUMPAD_DECIMAL: int

WXK_NUMPAD_DIVIDE: int

WXK_WINDOWS_LEFT: int

WXK_WINDOWS_RIGHT: int

WXK_WINDOWS_MENU: int

WXK_COMMAND: int

WXK_SHIFT: int

WXK_ALT: int

class MessageDialog(Dialog):
    """ **Possible constructors**:



```
MessageDialog(parent, message, caption=MessageBoxCaptionStr,
              style=OK|CENTRE, pos=DefaultPosition)

```


This class represents a dialog that shows a single or multi-line
message, with a choice of `wx.OK`, Yes, No and Cancel buttons.


  


        Source: https://docs.wxpython.org/wx.MessageDialog.html
    """
    def __init__(self, parent, message, caption=MessageBoxCaptionStr, style=OK|CENTRE, pos=DefaultPosition) -> None:
        """ 

`__init__`(*self*, *parent*, *message*, *caption=MessageBoxCaptionStr*, *style=OK|CENTRE*, *pos=DefaultPosition*)[¶](#wx.MessageDialog.__init__ "Permalink to this definition")
Constructor specifying the message box properties.


Use [`ShowModal`](#wx.MessageDialog.ShowModal "wx.MessageDialog.ShowModal") to show the dialog.


*style* may be a bit list of the identifiers described above.


Notice that not all styles are compatible: only one of `OK` and `YES_NO` may be specified (and one of them must be specified) and at most one default button style can be used and it is only valid if the corresponding button is shown in the message box.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show in the dialog.
* **caption** (*string*) – The dialog title.
* **style** (*long*) – Combination of style flags described above.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position (ignored under MSW).






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetCancelLabel(self) -> str:
        """ 

`GetCancelLabel`(*self*)[¶](#wx.MessageDialog.GetCancelLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetCaption(self) -> str:
        """ 

`GetCaption`(*self*)[¶](#wx.MessageDialog.GetCaption "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.MessageDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetEffectiveIcon(self) -> int:
        """ 

`GetEffectiveIcon`(*self*)[¶](#wx.MessageDialog.GetEffectiveIcon "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetExtendedMessage(self) -> str:
        """ 

`GetExtendedMessage`(*self*)[¶](#wx.MessageDialog.GetExtendedMessage "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetHelpLabel(self) -> str:
        """ 

`GetHelpLabel`(*self*)[¶](#wx.MessageDialog.GetHelpLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetMessage(self) -> str:
        """ 

`GetMessage`(*self*)[¶](#wx.MessageDialog.GetMessage "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetMessageDialogStyle(self) -> int:
        """ 

`GetMessageDialogStyle`(*self*)[¶](#wx.MessageDialog.GetMessageDialogStyle "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetNoLabel(self) -> str:
        """ 

`GetNoLabel`(*self*)[¶](#wx.MessageDialog.GetNoLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetOKLabel(self) -> str:
        """ 

`GetOKLabel`(*self*)[¶](#wx.MessageDialog.GetOKLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def GetYesLabel(self) -> str:
        """ 

`GetYesLabel`(*self*)[¶](#wx.MessageDialog.GetYesLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def HasCustomLabels(self) -> bool:
        """ 

`HasCustomLabels`(*self*)[¶](#wx.MessageDialog.HasCustomLabels "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def SetExtendedMessage(self, extendedMessage: str) -> None:
        """ 

`SetExtendedMessage`(*self*, *extendedMessage*)[¶](#wx.MessageDialog.SetExtendedMessage "Permalink to this definition")
Sets the extended message for the dialog: this message is usually an extension of the short message specified in the constructor or set with [`SetMessage`](#wx.MessageDialog.SetMessage "wx.MessageDialog.SetMessage") .


If it is set, the main message appears highlighted – if supported – and this message appears beneath it in normal font. On the platforms which don’t support extended messages, it is simply appended to the normal message with an empty line separating them.



Parameters
**extendedMessage** (*string*) – 





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def SetHelpLabel(self, help: MessageDialogButtonLabel) -> bool:
        """ 

`SetHelpLabel`(*self*, *help*)[¶](#wx.MessageDialog.SetHelpLabel "Permalink to this definition")
Sets the label for the Help button.


Please see the remarks in [`SetYesNoLabels`](#wx.MessageDialog.SetYesNoLabels "wx.MessageDialog.SetYesNoLabels") documentation.


Notice that changing the label of the help button resets its special status (if any, this depends on the platform) and it will be treated just like another button in this case.



Parameters
**help** (*MessageDialogButtonLabel*) – 



Return type
*bool*





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def SetMessage(self, message: str) -> None:
        """ 

`SetMessage`(*self*, *message*)[¶](#wx.MessageDialog.SetMessage "Permalink to this definition")
Sets the message shown by the dialog.



Parameters
**message** (*string*) – 





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def SetOKCancelLabels(self, ok, cancel) -> bool:
        """ 

`SetOKCancelLabels`(*self*, *ok*, *cancel*)[¶](#wx.MessageDialog.SetOKCancelLabels "Permalink to this definition")
Overrides the default labels of the `wx.OK` and Cancel buttons.


Please see the remarks in [`SetYesNoLabels`](#wx.MessageDialog.SetYesNoLabels "wx.MessageDialog.SetYesNoLabels") documentation.



Parameters
* **ok** (*MessageDialogButtonLabel*) –
* **cancel** (*MessageDialogButtonLabel*) –



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def SetOKLabel(self, ok: MessageDialogButtonLabel) -> bool:
        """ 

`SetOKLabel`(*self*, *ok*)[¶](#wx.MessageDialog.SetOKLabel "Permalink to this definition")
Overrides the default label of the `wx.OK` button.


Please see the remarks in [`SetYesNoLabels`](#wx.MessageDialog.SetYesNoLabels "wx.MessageDialog.SetYesNoLabels") documentation.



Parameters
**ok** (*MessageDialogButtonLabel*) – 



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def SetYesNoCancelLabels(self, yes, no, cancel) -> bool:
        """ 

`SetYesNoCancelLabels`(*self*, *yes*, *no*, *cancel*)[¶](#wx.MessageDialog.SetYesNoCancelLabels "Permalink to this definition")
Overrides the default labels of the Yes, No and Cancel buttons.


Please see the remarks in [`SetYesNoLabels`](#wx.MessageDialog.SetYesNoLabels "wx.MessageDialog.SetYesNoLabels") documentation.



Parameters
* **yes** (*MessageDialogButtonLabel*) –
* **no** (*MessageDialogButtonLabel*) –
* **cancel** (*MessageDialogButtonLabel*) –



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def SetYesNoLabels(self, yes, no) -> bool:
        """ 

`SetYesNoLabels`(*self*, *yes*, *no*)[¶](#wx.MessageDialog.SetYesNoLabels "Permalink to this definition")
Overrides the default labels of the Yes and No buttons.


The arguments of this function can be either strings or one of the standard identifiers, such as `ID_APPLY` or `ID_OPEN` . Notice that even if the label is specified as an identifier, the return value of the dialog [`ShowModal`](#wx.MessageDialog.ShowModal "wx.MessageDialog.ShowModal") method still remains one of `ID_OK` , `ID_CANCEL` , `ID_YES` or `ID_NO` values, i.e. this identifier changes only the label appearance but not the return code generated by the button. It is possible to mix stock identifiers and string labels in the same function call, for example:



```
dlg = wx.MessageDialog(parent, message, caption)
dlg.SetYesNoLabels(wx.ID_SAVE, "&Don't save")

```


Also notice that this function is not currently available on all platforms (although as of wxWidgets 2.9.0 it is implemented in all major ports), so it may return `False` to indicate that the labels couldn’t be changed. If it returns `True`, the labels were set successfully.


Typically, if the function was used successfully, the main dialog message may need to be changed, e.g.:



```
dlg = wx.MessageDialog(parent, message, caption)
if dlg.SetYesNoLabels("&Quit", "&Don't quit"):
    dlg.SetMessage("What do you want to do?")
else: # buttons have standard "Yes"/"No" values, so rephrase the question
    dlg.SetMessage("Do you really want to quit?")

```



Parameters
* **yes** (*MessageDialogButtonLabel*) –
* **no** (*MessageDialogButtonLabel*) –



Return type
*bool*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.MessageDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning one of `wx.ID_OK`, `wx.ID_CANCEL`, `wx.ID_YES`, `wx.ID_NO` or `wx.ID_HELP`.


Notice that this method returns the identifier of the button which was clicked unlike [`wx.MessageBox`](wx.functions.html#wx.MessageBox "wx.MessageBox") function.



Return type
*int*






            Source: https://docs.wxpython.org/wx.MessageDialog.html
        """

    CancelLabel: str  # `CancelLabel`[¶](#wx.MessageDialog.CancelLabel "Permalink to this definition")See [`GetCancelLabel`](#wx.MessageDialog.GetCancelLabel "wx.MessageDialog.GetCancelLabel")
    Caption: str  # `Caption`[¶](#wx.MessageDialog.Caption "Permalink to this definition")See [`GetCaption`](#wx.MessageDialog.GetCaption "wx.MessageDialog.GetCaption")
    EffectiveIcon: int  # `EffectiveIcon`[¶](#wx.MessageDialog.EffectiveIcon "Permalink to this definition")See [`GetEffectiveIcon`](#wx.MessageDialog.GetEffectiveIcon "wx.MessageDialog.GetEffectiveIcon")
    ExtendedMessage: str  # `ExtendedMessage`[¶](#wx.MessageDialog.ExtendedMessage "Permalink to this definition")See [`GetExtendedMessage`](#wx.MessageDialog.GetExtendedMessage "wx.MessageDialog.GetExtendedMessage") and [`SetExtendedMessage`](#wx.MessageDialog.SetExtendedMessage "wx.MessageDialog.SetExtendedMessage")
    HelpLabel: str  # `HelpLabel`[¶](#wx.MessageDialog.HelpLabel "Permalink to this definition")See [`GetHelpLabel`](#wx.MessageDialog.GetHelpLabel "wx.MessageDialog.GetHelpLabel") and [`SetHelpLabel`](#wx.MessageDialog.SetHelpLabel "wx.MessageDialog.SetHelpLabel")
    Message: str  # `Message`[¶](#wx.MessageDialog.Message "Permalink to this definition")See [`GetMessage`](#wx.MessageDialog.GetMessage "wx.MessageDialog.GetMessage") and [`SetMessage`](#wx.MessageDialog.SetMessage "wx.MessageDialog.SetMessage")
    MessageDialogStyle: int  # `MessageDialogStyle`[¶](#wx.MessageDialog.MessageDialogStyle "Permalink to this definition")See [`GetMessageDialogStyle`](#wx.MessageDialog.GetMessageDialogStyle "wx.MessageDialog.GetMessageDialogStyle")
    NoLabel: str  # `NoLabel`[¶](#wx.MessageDialog.NoLabel "Permalink to this definition")See [`GetNoLabel`](#wx.MessageDialog.GetNoLabel "wx.MessageDialog.GetNoLabel")
    OKLabel: str  # `OKLabel`[¶](#wx.MessageDialog.OKLabel "Permalink to this definition")See [`GetOKLabel`](#wx.MessageDialog.GetOKLabel "wx.MessageDialog.GetOKLabel") and [`SetOKLabel`](#wx.MessageDialog.SetOKLabel "wx.MessageDialog.SetOKLabel")
    YesLabel: str  # `YesLabel`[¶](#wx.MessageDialog.YesLabel "Permalink to this definition")See [`GetYesLabel`](#wx.MessageDialog.GetYesLabel "wx.MessageDialog.GetYesLabel")



class Metafile(Object):
    """ **Possible constructors**:



```
Metafile(filename="")

```


A Metafile represents the MS Windows metafile object, so metafile
operations have no effect in X.


  


        Source: https://docs.wxpython.org/wx.Metafile.html
    """
    def __init__(self, filename: str="") -> None:
        """ 

`__init__`(*self*, *filename=""*)[¶](#wx.Metafile.__init__ "Permalink to this definition")
Constructor.


If a filename is given, the Windows disk metafile is read in. Check whether this was performed successfully by using the [`IsOk`](#wx.Metafile.IsOk "wx.Metafile.IsOk") member.



Parameters
**filename** (*string*) – 






            Source: https://docs.wxpython.org/wx.Metafile.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Metafile.IsOk "Permalink to this definition")
Returns `True` if the metafile is valid.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Metafile.html
        """

    def Play(self, dc: 'DC') -> bool:
        """ 

`Play`(*self*, *dc*)[¶](#wx.Metafile.Play "Permalink to this definition")
Plays the metafile into the given device context, returning `True` if successful.



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Metafile.html
        """

    def SetClipboard(self, width=0, height=0) -> bool:
        """ 

`SetClipboard`(*self*, *width=0*, *height=0*)[¶](#wx.Metafile.SetClipboard "Permalink to this definition")
Passes the metafile data to the clipboard.


The metafile can no longer be used for anything, but the  [wx.Metafile](#wx-metafile) object must still be destroyed by the application.


Below is an example of metafile, metafile device context and clipboard use from the `hello.cpp` example. Note the way the metafile dimensions are passed to the clipboard, making use of the device context’s ability to keep track of the maximum extent of drawing commands.



```
dc = wx.MetafileDC()
if dc.IsOk():
    self.Draw(dc)
    mf = dc.Close()
    if mf:
        mf.SetClipboard(dc.MaxX() + 10, dc.MaxY() + 10)

```



Parameters
* **width** (*int*) –
* **height** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Metafile.html
        """



class MimeTypesManager:
    """ **Possible constructors**:



```
MimeTypesManager()

```


This class allows the application to retrieve information about all
known MIME types from a system-specific location and the filename
extensions to the MIME types and vice versa.


  


        Source: https://docs.wxpython.org/wx.MimeTypesManager.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.MimeTypesManager.__init__ "Permalink to this definition")
Constructor puts the object in the “working” state.




            Source: https://docs.wxpython.org/wx.MimeTypesManager.html
        """

    def AddFallbacks(self, fallbacks: 'FileTypeInfo') -> None:
        """ 

`AddFallbacks`(*self*, *fallbacks*)[¶](#wx.MimeTypesManager.AddFallbacks "Permalink to this definition")
This function may be used to provide hard-wired fallbacks for the MIME types and extensions that might not be present in the system MIME database.


Please see the typetest sample for an example of using it.



Parameters
**fallbacks** ([*wx.FileTypeInfo*](wx.FileTypeInfo.html#wx.FileTypeInfo "wx.FileTypeInfo")) – 






            Source: https://docs.wxpython.org/wx.MimeTypesManager.html
        """

    def Associate(self, ftInfo: 'FileTypeInfo') -> 'FileType':
        """ 

`Associate`(*self*, *ftInfo*)[¶](#wx.MimeTypesManager.Associate "Permalink to this definition")
Create a new association using the fields of  [wx.FileTypeInfo](wx.FileTypeInfo.html#wx-filetypeinfo) (at least the MIME type and the extension should be set).



Parameters
**ftInfo** ([*wx.FileTypeInfo*](wx.FileTypeInfo.html#wx.FileTypeInfo "wx.FileTypeInfo")) – 



Return type
 [wx.FileType](wx.FileType.html#wx-filetype)






            Source: https://docs.wxpython.org/wx.MimeTypesManager.html
        """

    def EnumAllFileTypes(self) -> list[str]:
        """ 

`EnumAllFileTypes`(*self*)[¶](#wx.MimeTypesManager.EnumAllFileTypes "Permalink to this definition")
Returns a list of all known file types.



Return type
*list of strings*






            Source: https://docs.wxpython.org/wx.MimeTypesManager.html
        """

    def GetFileTypeFromExtension(self, extension: str) -> 'FileType':
        """ 

`GetFileTypeFromExtension`(*self*, *extension*)[¶](#wx.MimeTypesManager.GetFileTypeFromExtension "Permalink to this definition")
Gather information about the files with given extension and return the corresponding  [wx.FileType](wx.FileType.html#wx-filetype) object or `None` if the extension is unknown.


The *extension* parameter may have, or not, the leading dot, if it has it, it is stripped automatically. It must not however be empty.



Parameters
**extension** (*string*) – 



Return type
 [wx.FileType](wx.FileType.html#wx-filetype)






            Source: https://docs.wxpython.org/wx.MimeTypesManager.html
        """

    def GetFileTypeFromMimeType(self, mimeType: str) -> 'FileType':
        """ 

`GetFileTypeFromMimeType`(*self*, *mimeType*)[¶](#wx.MimeTypesManager.GetFileTypeFromMimeType "Permalink to this definition")
Gather information about the files with given MIME type and return the corresponding  [wx.FileType](wx.FileType.html#wx-filetype) object or `None` if the MIME type is unknown.



Parameters
**mimeType** (*string*) – 



Return type
 [wx.FileType](wx.FileType.html#wx-filetype)






            Source: https://docs.wxpython.org/wx.MimeTypesManager.html
        """

    @staticmethod
    def IsOfType(mimeType, wildcard) -> bool:
        """ 

*static* `IsOfType`(*mimeType*, *wildcard*)[¶](#wx.MimeTypesManager.IsOfType "Permalink to this definition")
This function returns `True` if either the given *mimeType* is exactly the same as *wildcard* or if it has the same category and the subtype of *wildcard* is ‘’.


Note that the ‘x’ wildcard is not allowed in *mimeType* itself.


The comparison done by this function is case insensitive so it is not necessary to convert the strings to the same case before calling it.



Parameters
* **mimeType** (*string*) –
* **wildcard** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MimeTypesManager.html
        """

    def Unassociate(self, ft: 'FileType') -> bool:
        """ 

`Unassociate`(*self*, *ft*)[¶](#wx.MimeTypesManager.Unassociate "Permalink to this definition")
Undo [`Associate`](#wx.MimeTypesManager.Associate "wx.MimeTypesManager.Associate") .



Parameters
**ft** ([*wx.FileType*](wx.FileType.html#wx.FileType "wx.FileType")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MimeTypesManager.html
        """



class MiniFrame(Frame):
    """ **Possible constructors**:



```
MiniFrame()

MiniFrame(parent, id=ID_ANY, title="", pos=DefaultPosition,
          size=DefaultSize, style=CAPTION|RESIZE_BORDER, name=FrameNameStr)

```


A miniframe is a frame with a small title bar.


  


        Source: https://docs.wxpython.org/wx.MiniFrame.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.MiniFrame.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, title=””, pos=DefaultPosition, size=DefaultSize, style=CAPTION|RESIZE\_BORDER, name=FrameNameStr)*


Constructor, creating the window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window parent. This may be `None`. If it is not `None`, the frame will always be displayed on top of the parent window on Windows.
* **id** (*wx.WindowID*) – The window identifier. It may take a value of -1 to indicate a default value.
* **title** (*string*) – The caption to be displayed on the frame’s title bar.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The window position. The value DefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The window size. The value DefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
* **style** (*long*) – The window style. See  [wx.MiniFrame](#wx-miniframe).
* **name** (*string*) – The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.





Note


The frame behaves like a normal frame on non-Windows platforms.




See also


[`Create`](#wx.MiniFrame.Create "wx.MiniFrame.Create")





---

  





            Source: https://docs.wxpython.org/wx.MiniFrame.html
        """

    def Create(self, parent, id=ID_ANY, title="", pos=DefaultPosition, size=DefaultSize, style=CAPTION|RESIZE_BORDER, name=FrameNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *title=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=CAPTION|RESIZE\_BORDER*, *name=FrameNameStr*)[¶](#wx.MiniFrame.Create "Permalink to this definition")
Used in two-step frame construction.


See  [wx.MiniFrame](#wx-miniframe) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MiniFrame.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.MiniFrame.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.MiniFrame.html
        """



class MirrorDC(DC):
    """ **Possible constructors**:



```
MirrorDC(dc, mirror)

```


MirrorDC is a simple wrapper class which is always associated with a
real DC object and either forwards all of its operations to it
without changes (no mirroring takes place) or exchanges x and y
coordinates which makes it possible to reuse the same code to draw a
figure and its mirror i.e.


  


        Source: https://docs.wxpython.org/wx.MirrorDC.html
    """
    def __init__(self, dc, mirror) -> None:
        """ 

`__init__`(*self*, *dc*, *mirror*)[¶](#wx.MirrorDC.__init__ "Permalink to this definition")
Creates a (maybe) mirrored DC associated with the real *dc*.


Everything drawn on  [wx.MirrorDC](#wx-mirrordc) will appear (and maybe mirrored) on *dc*.


*mirror* specifies if we do mirror (if it is `True`) or not (if it is `False`).



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **mirror** (*bool*) –






            Source: https://docs.wxpython.org/wx.MirrorDC.html
        """



class ModalDialogHook:
    """ **Possible constructors**:



```
ModalDialogHook()

```


Allows intercepting all modal dialog calls.


  


        Source: https://docs.wxpython.org/wx.ModalDialogHook.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ModalDialogHook.__init__ "Permalink to this definition")
Default and trivial constructor.


The constructor doesn’t do anything, call [`Register`](#wx.ModalDialogHook.Register "wx.ModalDialogHook.Register") to make this hook active.




            Source: https://docs.wxpython.org/wx.ModalDialogHook.html
        """

    def Enter(self, dialog: 'Dialog') -> int:
        """ 

`Enter`(*self*, *dialog*)[¶](#wx.ModalDialogHook.Enter "Permalink to this definition")
Called by wxWidgets before showing any modal dialogs.


Override this to be notified whenever a modal dialog is about to be shown.


If the return value of this method is `ID_NONE`, the dialog is shown as usual and [`wx.Exit`](wx.functions.html#wx.Exit "wx.Exit") will be called when it is dismissed. If the return value is anything else, the dialog is not shown at all and its [`wx.Dialog.ShowModal`](wx.Dialog.html#wx.Dialog.ShowModal "wx.Dialog.ShowModal") simply returns with the given result. In this case, [`wx.Exit`](wx.functions.html#wx.Exit "wx.Exit") won’t be called either.



Parameters
**dialog** ([*wx.Dialog*](wx.Dialog.html#wx.Dialog "wx.Dialog")) – The dialog about to be shown, never `None`.



Return type
*int*



Returns
`wx.ID_NONE` to continue with showing the dialog or anything else to skip showing the dialog and just return this value from its ShowModal().






            Source: https://docs.wxpython.org/wx.ModalDialogHook.html
        """

    def Exit(self, dialog: 'Dialog') -> None:
        """ 

`Exit`(*self*, *dialog*)[¶](#wx.ModalDialogHook.Exit "Permalink to this definition")
Called by wxWidgets after dismissing the modal dialog.


Notice that it won’t be called if [`Enter`](#wx.ModalDialogHook.Enter "wx.ModalDialogHook.Enter") hadn’t been called because another modal hook, registered after this one, intercepted the dialog or if our [`Enter`](#wx.ModalDialogHook.Enter "wx.ModalDialogHook.Enter") was called but returned a value different from `ID_NONE`.



Parameters
**dialog** ([*wx.Dialog*](wx.Dialog.html#wx.Dialog "wx.Dialog")) – The dialog that was shown and dismissed, never `None`.






            Source: https://docs.wxpython.org/wx.ModalDialogHook.html
        """

    def Register(self) -> None:
        """ 

`Register`(*self*)[¶](#wx.ModalDialogHook.Register "Permalink to this definition")
Register this hook as being active.


After registering the hook, its [`Enter`](#wx.ModalDialogHook.Enter "wx.ModalDialogHook.Enter") and [`wx.Exit`](wx.functions.html#wx.Exit "wx.Exit") methods will be called whenever a modal dialog is shown.


Notice that the order of registration matters: the last hook registered is called first, and if its [`Enter`](#wx.ModalDialogHook.Enter "wx.ModalDialogHook.Enter") returns a value different from `ID_NONE`, the subsequent hooks are skipped.


It is an error to register the same hook twice.




            Source: https://docs.wxpython.org/wx.ModalDialogHook.html
        """

    def Unregister(self) -> None:
        """ 

`Unregister`(*self*)[¶](#wx.ModalDialogHook.Unregister "Permalink to this definition")
Unregister this hook.


Notice that is done automatically from the destructor, so usually calling this method explicitly is unnecessary.


The hook must be currently registered.




            Source: https://docs.wxpython.org/wx.ModalDialogHook.html
        """



class MouseCaptureChangedEvent(Event):
    """ **Possible constructors**:



```
MouseCaptureChangedEvent(windowId=0, gainedCapture=None)

```


A mouse capture changed event is sent to a window that loses its mouse
capture.


  


        Source: https://docs.wxpython.org/wx.MouseCaptureChangedEvent.html
    """
    def __init__(self, windowId=0, gainedCapture=None) -> None:
        """ 

`__init__`(*self*, *windowId=0*, *gainedCapture=None*)[¶](#wx.MouseCaptureChangedEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **windowId** (*wx.WindowID*) –
* **gainedCapture** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –






            Source: https://docs.wxpython.org/wx.MouseCaptureChangedEvent.html
        """

    def GetCapturedWindow(self) -> 'Window':
        """ 

`GetCapturedWindow`(*self*)[¶](#wx.MouseCaptureChangedEvent.GetCapturedWindow "Permalink to this definition")
Returns the window that gained the capture, or `None` if it was a non-wxWidgets window.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.MouseCaptureChangedEvent.html
        """

    CapturedWindow: 'Window'  # `CapturedWindow`[¶](#wx.MouseCaptureChangedEvent.CapturedWindow "Permalink to this definition")See [`GetCapturedWindow`](#wx.MouseCaptureChangedEvent.GetCapturedWindow "wx.MouseCaptureChangedEvent.GetCapturedWindow")



class MouseCaptureLostEvent(Event):
    """ **Possible constructors**:



```
MouseCaptureLostEvent(windowId=0)

```


A mouse capture lost event is sent to a window that had obtained mouse
capture, which was subsequently lost due to an “external” event (for
example, when a dialog box is shown or if another application captures
the mouse).


  


        Source: https://docs.wxpython.org/wx.MouseCaptureLostEvent.html
    """
    def __init__(self, windowId: int=0) -> None:
        """ 

`__init__`(*self*, *windowId=0*)[¶](#wx.MouseCaptureLostEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**windowId** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.MouseCaptureLostEvent.html
        """



class MouseEvent(Event,MouseState):
    """ **Possible constructors**:



```
MouseEvent(mouseEventType=wxEVT_NULL)

```


This event class contains information about the events generated by
the mouse: they include mouse buttons press and release events and
mouse move events.


  


        Source: https://docs.wxpython.org/wx.MouseEvent.html
    """
    def __init__(self, mouseEventType: int=wxEVT_NULL) -> None:
        """ 

`__init__`(*self*, *mouseEventType=wxEVT\_NULL*)[¶](#wx.MouseEvent.__init__ "Permalink to this definition")
Constructor.


Valid event types are:


* `wxEVT_ENTER_WINDOW`
* `wxEVT_LEAVE_WINDOW`
* `wxEVT_LEFT_DOWN`
* `wxEVT_LEFT_UP`
* `wxEVT_LEFT_DCLICK`
* `wxEVT_MIDDLE_DOWN`
* `wxEVT_MIDDLE_UP`
* `wxEVT_MIDDLE_DCLICK`
* `wxEVT_RIGHT_DOWN`
* `wxEVT_RIGHT_UP`
* `wxEVT_RIGHT_DCLICK`
* `wxEVT_AUX1_DOWN`
* `wxEVT_AUX1_UP`
* `wxEVT_AUX1_DCLICK`
* `wxEVT_AUX2_DOWN`
* `wxEVT_AUX2_UP`
* `wxEVT_AUX2_DCLICK`
* `wxEVT_MOTION`
* `wxEVT_MOUSEWHEEL`
* `wxEVT_MAGNIFY`



Parameters
**mouseEventType** (*wx.EventType*) – 






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Aux1DClick(self) -> bool:
        """ 

`Aux1DClick`(*self*)[¶](#wx.MouseEvent.Aux1DClick "Permalink to this definition")
Returns `True` if the event was a first extra button double click.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Aux1Down(self) -> bool:
        """ 

`Aux1Down`(*self*)[¶](#wx.MouseEvent.Aux1Down "Permalink to this definition")
Returns `True` if the first extra button mouse button changed to down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Aux1Up(self) -> bool:
        """ 

`Aux1Up`(*self*)[¶](#wx.MouseEvent.Aux1Up "Permalink to this definition")
Returns `True` if the first extra button mouse button changed to up.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Aux2DClick(self) -> bool:
        """ 

`Aux2DClick`(*self*)[¶](#wx.MouseEvent.Aux2DClick "Permalink to this definition")
Returns `True` if the event was a second extra button double click.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Aux2Down(self) -> bool:
        """ 

`Aux2Down`(*self*)[¶](#wx.MouseEvent.Aux2Down "Permalink to this definition")
Returns `True` if the second extra button mouse button changed to down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Aux2Up(self) -> bool:
        """ 

`Aux2Up`(*self*)[¶](#wx.MouseEvent.Aux2Up "Permalink to this definition")
Returns `True` if the second extra button mouse button changed to up.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Button(self, but: MouseButton) -> bool:
        """ 

`Button`(*self*, *but*)[¶](#wx.MouseEvent.Button "Permalink to this definition")
Returns `True` if the event was generated by the specified button.



Parameters
**but** ([*MouseButton*](wx.MouseButton.enumeration.html "MouseButton")) – 



Return type
*bool*





See also


*MouseState.ButtoinIsDown()*





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def ButtonDClick(self, but: MouseButton=MOUSE_BTN_ANY) -> bool:
        """ 

`ButtonDClick`(*self*, *but=MOUSE\_BTN\_ANY*)[¶](#wx.MouseEvent.ButtonDClick "Permalink to this definition")
If the argument is omitted, this returns `True` if the event was a mouse double click event.


Otherwise the argument specifies which double click event was generated (see  [wx.Button](wx.Button.html#wx-button) for the possible values).



Parameters
**but** ([*MouseButton*](wx.MouseButton.enumeration.html "MouseButton")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def ButtonDown(self, but: MouseButton=MOUSE_BTN_ANY) -> bool:
        """ 

`ButtonDown`(*self*, *but=MOUSE\_BTN\_ANY*)[¶](#wx.MouseEvent.ButtonDown "Permalink to this definition")
If the argument is omitted, this returns `True` if the event was a mouse button down event.


Otherwise the argument specifies which button-down event was generated (see  [wx.Button](wx.Button.html#wx-button) for the possible values).



Parameters
**but** ([*MouseButton*](wx.MouseButton.enumeration.html "MouseButton")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def ButtonUp(self, but: MouseButton=MOUSE_BTN_ANY) -> bool:
        """ 

`ButtonUp`(*self*, *but=MOUSE\_BTN\_ANY*)[¶](#wx.MouseEvent.ButtonUp "Permalink to this definition")
If the argument is omitted, this returns `True` if the event was a mouse button up event.


Otherwise the argument specifies which button-up event was generated (see  [wx.Button](wx.Button.html#wx-button) for the possible values).



Parameters
**but** ([*MouseButton*](wx.MouseButton.enumeration.html "MouseButton")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Dragging(self) -> bool:
        """ 

`Dragging`(*self*)[¶](#wx.MouseEvent.Dragging "Permalink to this definition")
Returns `True` if this was a dragging event (motion while a button is depressed).



Return type
*bool*





See also


[`Moving`](#wx.MouseEvent.Moving "wx.MouseEvent.Moving")





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Entering(self) -> bool:
        """ 

`Entering`(*self*)[¶](#wx.MouseEvent.Entering "Permalink to this definition")
Returns `True` if the mouse was entering the window.



Return type
*bool*





See also


[`Leaving`](#wx.MouseEvent.Leaving "wx.MouseEvent.Leaving")





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetButton(self) -> int:
        """ 

`GetButton`(*self*)[¶](#wx.MouseEvent.GetButton "Permalink to this definition")
Returns the mouse button which generated this event or `MOUSE_BTN_NONE` if no button is involved (for mouse move, enter or leave event, for example).


Otherwise `MOUSE_BTN_LEFT` is returned for the left button down, up and double click events, `MOUSE_BTN_MIDDLE` and `MOUSE_BTN_RIGHT` for the same events for the middle and the right buttons respectively.



Return type
*int*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetClickCount(self) -> int:
        """ 

`GetClickCount`(*self*)[¶](#wx.MouseEvent.GetClickCount "Permalink to this definition")
Returns the number of mouse clicks for this event: 1 for a simple click, 2 for a double-click, 3 for a triple-click and so on.


Currently this function is implemented only in Mac and returns -1 for the other platforms (you can still distinguish simple clicks from double-clicks as they generate different kinds of events however).



Return type
*int*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetColumnsPerAction(self) -> int:
        """ 

`GetColumnsPerAction`(*self*)[¶](#wx.MouseEvent.GetColumnsPerAction "Permalink to this definition")
Returns the configured number of columns (or whatever) to be scrolled per wheel action.


Default value under most platforms is three.



Return type
*int*





New in version 2.9.5.




See also


[`GetLinesPerAction`](#wx.MouseEvent.GetLinesPerAction "wx.MouseEvent.GetLinesPerAction")





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetLinesPerAction(self) -> int:
        """ 

`GetLinesPerAction`(*self*)[¶](#wx.MouseEvent.GetLinesPerAction "Permalink to this definition")
Returns the configured number of lines (or whatever) to be scrolled per wheel action.


Default value under most platforms is three.



Return type
*int*





See also


[`GetColumnsPerAction`](#wx.MouseEvent.GetColumnsPerAction "wx.MouseEvent.GetColumnsPerAction")





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetLogicalPosition(self, dc: 'DC') -> 'Point':
        """ 

`GetLogicalPosition`(*self*, *dc*)[¶](#wx.MouseEvent.GetLogicalPosition "Permalink to this definition")
Returns the logical mouse position in pixels (i.e. translated according to the translation set for the DC, which usually indicates that the window has been scrolled).



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetMagnification(self) -> float:
        """ 

`GetMagnification`(*self*)[¶](#wx.MouseEvent.GetMagnification "Permalink to this definition")
For magnify (pinch to zoom) events: returns the change in magnification.


A value of 0 means no change, a positive value means we should enlarge (or zoom in), a negative value means we should shrink (or zoom out).


This method is only valid to call for `wxEVT_MAGNIFY` events which are currently only generated under macOS.



Return type
*float*





New in version 4.1/wxWidgets-3.1.0.




See also


[`Magnify`](#wx.MouseEvent.Magnify "wx.MouseEvent.Magnify")





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetWheelAxis(self) -> 'MouseWheelAxis':
        """ 

`GetWheelAxis`(*self*)[¶](#wx.MouseEvent.GetWheelAxis "Permalink to this definition")
Gets the axis the wheel operation concerns.


Usually the mouse wheel is used to scroll vertically so `MOUSE_WHEEL_VERTICAL` is returned but some mice (and most trackpads) also allow to use the wheel to scroll horizontally in which case `MOUSE_WHEEL_HORIZONTAL` is returned.


Notice that before wxWidgets 2.9.4 this method returned `int` .



Return type
 [wx.MouseWheelAxis](wx.MouseWheelAxis.enumeration.html#wx-mousewheelaxis)






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetWheelDelta(self) -> int:
        """ 

`GetWheelDelta`(*self*)[¶](#wx.MouseEvent.GetWheelDelta "Permalink to this definition")
Get wheel delta, normally 120.


This is the threshold for action to be taken, and one such action (for example, scrolling one increment) should occur for each delta.



Return type
*int*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def GetWheelRotation(self) -> int:
        """ 

`GetWheelRotation`(*self*)[¶](#wx.MouseEvent.GetWheelRotation "Permalink to this definition")
Get wheel rotation, positive or negative indicates direction of rotation.


Current devices all send an event when rotation is at least +/-WheelDelta, but finer resolution devices can be created in the future.


Because of this you shouldn’t assume that one event is equal to 1 line, but you should be able to either do partial line scrolling or wait until several events accumulate before scrolling.



Return type
*int*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def IsButton(self) -> bool:
        """ 

`IsButton`(*self*)[¶](#wx.MouseEvent.IsButton "Permalink to this definition")
Returns `True` if the event was a mouse button event (not necessarily a button down event - that may be tested using [`ButtonDown`](#wx.MouseEvent.ButtonDown "wx.MouseEvent.ButtonDown") ).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def IsPageScroll(self) -> bool:
        """ 

`IsPageScroll`(*self*)[¶](#wx.MouseEvent.IsPageScroll "Permalink to this definition")
Returns `True` if the system has been setup to do page scrolling with the mouse wheel instead of line scrolling.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def IsWheelInverted(self) -> bool:
        """ 

`IsWheelInverted`(*self*)[¶](#wx.MouseEvent.IsWheelInverted "Permalink to this definition")
On Mac, has the user selected “Natural” scrolling in their System Preferences? Currently `False` on all other OS’s.


“Natural” scrolling means that content scrolling happens in the opposite direction, and if you are indeed scrolling content then you don’t need to use this function because macOS has already inverted the scroll direction. But there can be special situations where you want the mouse wheel action to work always in the same direction and in that case you will need this function.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Leaving(self) -> bool:
        """ 

`Leaving`(*self*)[¶](#wx.MouseEvent.Leaving "Permalink to this definition")
Returns `True` if the mouse was leaving the window.



Return type
*bool*





See also


[`Entering`](#wx.MouseEvent.Entering "wx.MouseEvent.Entering") .





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def LeftDClick(self) -> bool:
        """ 

`LeftDClick`(*self*)[¶](#wx.MouseEvent.LeftDClick "Permalink to this definition")
Returns `True` if the event was a left double click.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def LeftDown(self) -> bool:
        """ 

`LeftDown`(*self*)[¶](#wx.MouseEvent.LeftDown "Permalink to this definition")
Returns `True` if the left mouse button changed to down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def LeftUp(self) -> bool:
        """ 

`LeftUp`(*self*)[¶](#wx.MouseEvent.LeftUp "Permalink to this definition")
Returns `True` if the left mouse button changed to up.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Magnify(self) -> bool:
        """ 

`Magnify`(*self*)[¶](#wx.MouseEvent.Magnify "Permalink to this definition")
Returns `True` if the event is a magnify (i.e. pinch to zoom) event.


Such events are currently generated only under macOS.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.0.




See also


[`GetMagnification`](#wx.MouseEvent.GetMagnification "wx.MouseEvent.GetMagnification")





            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def MetaDown(self) -> bool:
        """ 

`MetaDown`(*self*)[¶](#wx.MouseEvent.MetaDown "Permalink to this definition")
Returns `True` if the Meta key was down at the time of the event.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def MiddleDClick(self) -> bool:
        """ 

`MiddleDClick`(*self*)[¶](#wx.MouseEvent.MiddleDClick "Permalink to this definition")
Returns `True` if the event was a middle double click.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def MiddleDown(self) -> bool:
        """ 

`MiddleDown`(*self*)[¶](#wx.MouseEvent.MiddleDown "Permalink to this definition")
Returns `True` if the middle mouse button changed to down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def MiddleUp(self) -> bool:
        """ 

`MiddleUp`(*self*)[¶](#wx.MouseEvent.MiddleUp "Permalink to this definition")
Returns `True` if the middle mouse button changed to up.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def Moving(self) -> bool:
        """ 

`Moving`(*self*)[¶](#wx.MouseEvent.Moving "Permalink to this definition")
Returns `True` if this was a motion event and no mouse buttons were pressed.


If any mouse button is held pressed, then this method returns `False` and [`Dragging`](#wx.MouseEvent.Dragging "wx.MouseEvent.Dragging") returns `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def RightDClick(self) -> bool:
        """ 

`RightDClick`(*self*)[¶](#wx.MouseEvent.RightDClick "Permalink to this definition")
Returns `True` if the event was a right double click.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def RightDown(self) -> bool:
        """ 

`RightDown`(*self*)[¶](#wx.MouseEvent.RightDown "Permalink to this definition")
Returns `True` if the right mouse button changed to down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def RightUp(self) -> bool:
        """ 

`RightUp`(*self*)[¶](#wx.MouseEvent.RightUp "Permalink to this definition")
Returns `True` if the right mouse button changed to up.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def SetColumnsPerAction(self, columnsPerAction) -> None:
        """ 

`SetColumnsPerAction`(*self*, *columnsPerAction*)[¶](#wx.MouseEvent.SetColumnsPerAction "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def SetLinesPerAction(self, linesPerAction) -> None:
        """ 

`SetLinesPerAction`(*self*, *linesPerAction*)[¶](#wx.MouseEvent.SetLinesPerAction "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def SetWheelAxis(self, wheelAxis) -> None:
        """ 

`SetWheelAxis`(*self*, *wheelAxis*)[¶](#wx.MouseEvent.SetWheelAxis "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def SetWheelDelta(self, wheelDelta) -> None:
        """ 

`SetWheelDelta`(*self*, *wheelDelta*)[¶](#wx.MouseEvent.SetWheelDelta "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    def SetWheelRotation(self, wheelRotation) -> None:
        """ 

`SetWheelRotation`(*self*, *wheelRotation*)[¶](#wx.MouseEvent.SetWheelRotation "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.MouseEvent.html
        """

    ColumnsPerAction: int  # `ColumnsPerAction`[¶](#wx.MouseEvent.ColumnsPerAction "Permalink to this definition")See [`GetColumnsPerAction`](#wx.MouseEvent.GetColumnsPerAction "wx.MouseEvent.GetColumnsPerAction") and [`SetColumnsPerAction`](#wx.MouseEvent.SetColumnsPerAction "wx.MouseEvent.SetColumnsPerAction")
    LinesPerAction: int  # `LinesPerAction`[¶](#wx.MouseEvent.LinesPerAction "Permalink to this definition")See [`GetLinesPerAction`](#wx.MouseEvent.GetLinesPerAction "wx.MouseEvent.GetLinesPerAction") and [`SetLinesPerAction`](#wx.MouseEvent.SetLinesPerAction "wx.MouseEvent.SetLinesPerAction")
    WheelAxis: 'MouseWheelAxis'  # `WheelAxis`[¶](#wx.MouseEvent.WheelAxis "Permalink to this definition")See [`GetWheelAxis`](#wx.MouseEvent.GetWheelAxis "wx.MouseEvent.GetWheelAxis") and [`SetWheelAxis`](#wx.MouseEvent.SetWheelAxis "wx.MouseEvent.SetWheelAxis")
    WheelDelta: int  # `WheelDelta`[¶](#wx.MouseEvent.WheelDelta "Permalink to this definition")See [`GetWheelDelta`](#wx.MouseEvent.GetWheelDelta "wx.MouseEvent.GetWheelDelta") and [`SetWheelDelta`](#wx.MouseEvent.SetWheelDelta "wx.MouseEvent.SetWheelDelta")
    WheelRotation: int  # `WheelRotation`[¶](#wx.MouseEvent.WheelRotation "Permalink to this definition")See [`GetWheelRotation`](#wx.MouseEvent.GetWheelRotation "wx.MouseEvent.GetWheelRotation") and [`SetWheelRotation`](#wx.MouseEvent.SetWheelRotation "wx.MouseEvent.SetWheelRotation")



EVT_LEFT_DOWN: int  # Process a  wxEVT_LEFT_DOWN   event. The handler of this event should normally call event.Skip() to allow the default processing to take place as otherwise the window under mouse wouldn’t get the focus.

EVT_LEFT_UP: int  # Process a  wxEVT_LEFT_UP   event.

EVT_LEFT_DCLICK: int  # Process a  wxEVT_LEFT_DCLICK   event.

EVT_MIDDLE_DOWN: int  # Process a  wxEVT_MIDDLE_DOWN   event.

EVT_MIDDLE_UP: int  # Process a  wxEVT_MIDDLE_UP   event.

EVT_MIDDLE_DCLICK: int  # Process a  wxEVT_MIDDLE_DCLICK   event.

EVT_RIGHT_DOWN: int  # Process a  wxEVT_RIGHT_DOWN   event.

EVT_RIGHT_UP: int  # Process a  wxEVT_RIGHT_UP   event.

EVT_RIGHT_DCLICK: int  # Process a  wxEVT_RIGHT_DCLICK   event.

EVT_MOUSE_AUX1_DOWN: int  # Process a  wxEVT_AUX1_DOWN   event.

EVT_MOUSE_AUX1_UP: int  # Process a  wxEVT_AUX1_UP   event.

EVT_MOUSE_AUX1_DCLICK: int  # Process a  wxEVT_AUX1_DCLICK   event.

EVT_MOUSE_AUX2_DOWN: int  # Process a  wxEVT_AUX2_DOWN   event.

EVT_MOUSE_AUX2_UP: int  # Process a  wxEVT_AUX2_UP   event.

EVT_MOUSE_AUX2_DCLICK: int  # Process a  wxEVT_AUX2_DCLICK   event.

EVT_MOTION: int  # Process a  wxEVT_MOTION   event.

EVT_ENTER_WINDOW: int  # Process a  wxEVT_ENTER_WINDOW   event.

EVT_LEAVE_WINDOW: int  # Process a  wxEVT_LEAVE_WINDOW   event.

EVT_MOUSEWHEEL: int  # Process a  wxEVT_MOUSEWHEEL   event.

EVT_MOUSE_EVENTS: int  # Process all mouse events.

EVT_MAGNIFY: int  # Process a  wxEVT_MAGNIFY   event (new since wxWidgets 3.1.0). ^^

class MouseEventsManager(EvtHandler):
    """ **Possible constructors**:



```
MouseEventsManager()

MouseEventsManager(win)

```


Helper for handling mouse input events in windows containing multiple
items.


  


        Source: https://docs.wxpython.org/wx.MouseEventsManager.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.MouseEventsManager.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


You must call [`Create`](#wx.MouseEventsManager.Create "wx.MouseEventsManager.Create") to finish initializing the mouse events manager. If possible, avoid the use of this constructor in favour of the other one which fully initializes the mouse events manager immediately.




---

  



**\_\_init\_\_** *(self, win)*


Constructor creates the manager for the window.


A mouse event manager is always associated with a window and must be destroyed by the window when it is destroyed (it doesn’t need to be allocated on the heap however).



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






---

  





            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def Create(self, win: 'Window') -> bool:
        """ 

`Create`(*self*, *win*)[¶](#wx.MouseEventsManager.Create "Permalink to this definition")
Finishes initialization of the object created using default constructor.


Currently always returns `True`.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def MouseClickBegin(self, item: int) -> None:
        """ 

`MouseClickBegin`(*self*, *item*)[¶](#wx.MouseEventsManager.MouseClickBegin "Permalink to this definition")
May be overridden to update the state of an item when it is pressed.


This method is called when the item is becomes pressed and can be used to change its appearance when this happens. It is mostly useful for button-like items and doesn’t need to be overridden if the items shouldn’t change their appearance when pressed.



Parameters
**item** (*int*) – The item being pressed.






            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def MouseClickCancelled(self, item: int) -> None:
        """ 

`MouseClickCancelled`(*self*, *item*)[¶](#wx.MouseEventsManager.MouseClickCancelled "Permalink to this definition")
Must be overridden to reset the item appearance changed by [`MouseClickBegin`](#wx.MouseEventsManager.MouseClickBegin "wx.MouseEventsManager.MouseClickBegin") .


This method is called if the mouse capture was lost while the item was pressed and must be overridden to restore the default item appearance if it was changed in [`MouseClickBegin`](#wx.MouseEventsManager.MouseClickBegin "wx.MouseEventsManager.MouseClickBegin") .



Parameters
**item** (*int*) – 





See also


[`MouseDragCancelled`](#wx.MouseEventsManager.MouseDragCancelled "wx.MouseEventsManager.MouseDragCancelled") ,  [wx.MouseCaptureLostEvent](wx.MouseCaptureLostEvent.html#wx-mousecapturelostevent)





            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def MouseClicked(self, item: int) -> bool:
        """ 

`MouseClicked`(*self*, *item*)[¶](#wx.MouseEventsManager.MouseClicked "Permalink to this definition")
Must be overridden to react to mouse clicks.


This method is called when the user clicked (i.e. pressed and released mouse over the *same* item) and should normally generate a notification about this click and return `True` if it was handled or `False` otherwise, determining whether the original mouse event is skipped or not.



Parameters
**item** (*int*) – The item which was clicked.



Return type
*bool*



Returns
`True` if the mouse event was processed and `False` otherwise.






            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def MouseDragBegin(self, item, pos) -> bool:
        """ 

`MouseDragBegin`(*self*, *item*, *pos*)[¶](#wx.MouseEventsManager.MouseDragBegin "Permalink to this definition")
Must be overridden to allow or deny dragging of the item.


This method is called when the user attempts to start dragging the given item.



Parameters
* **item** (*int*) – The item which is going to be dragged.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The position from where it is being dragged.



Return type
*bool*



Returns
`True` to allow the item to be dragged (in which case [`MouseDragging`](#wx.MouseEventsManager.MouseDragging "wx.MouseEventsManager.MouseDragging") and [`MouseDragEnd`](#wx.MouseEventsManager.MouseDragEnd "wx.MouseEventsManager.MouseDragEnd") will be called later, unless [`MouseDragCancelled`](#wx.MouseEventsManager.MouseDragCancelled "wx.MouseEventsManager.MouseDragCancelled") is called instead) or `False` to forbid it.






            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def MouseDragCancelled(self, item: int) -> None:
        """ 

`MouseDragCancelled`(*self*, *item*)[¶](#wx.MouseEventsManager.MouseDragCancelled "Permalink to this definition")
Must be overridden to handle cancellation of mouse dragging.


This method is called when mouse capture is lost while dragging the item and normally should remove the visual feedback drawn by [`MouseDragging`](#wx.MouseEventsManager.MouseDragging "wx.MouseEventsManager.MouseDragging") as well as reset any internal variables set in [`MouseDragBegin`](#wx.MouseEventsManager.MouseDragBegin "wx.MouseEventsManager.MouseDragBegin") .



Parameters
**item** (*int*) – 





See also


 [wx.MouseCaptureLostEvent](wx.MouseCaptureLostEvent.html#wx-mousecapturelostevent)





            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def MouseDragEnd(self, item, pos) -> None:
        """ 

`MouseDragEnd`(*self*, *item*, *pos*)[¶](#wx.MouseEventsManager.MouseDragEnd "Permalink to this definition")
Must be overridden to handle item drop.


This method is called when the mouse is released after dragging the item. Normally the item should be positioned at the new location.



Parameters
* **item** (*int*) – The item which was dragged and now dropped.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The position at which the item was dropped.





See also


[`MouseDragBegin`](#wx.MouseEventsManager.MouseDragBegin "wx.MouseEventsManager.MouseDragBegin") , [`MouseDragging`](#wx.MouseEventsManager.MouseDragging "wx.MouseEventsManager.MouseDragging")





            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def MouseDragging(self, item, pos) -> None:
        """ 

`MouseDragging`(*self*, *item*, *pos*)[¶](#wx.MouseEventsManager.MouseDragging "Permalink to this definition")
Must be overridden to provide feed back while an item is being dragged.


This method is called while the item is being dragged and should normally update the feedback shown on screen (usually this is done using  [wx.Overlay](wx.Overlay.html#wx-overlay)).


Notice that this method will never be called for the items for which [`MouseDragBegin`](#wx.MouseEventsManager.MouseDragBegin "wx.MouseEventsManager.MouseDragBegin") returns `False`. Consequently, if [`MouseDragBegin`](#wx.MouseEventsManager.MouseDragBegin "wx.MouseEventsManager.MouseDragBegin") always returns `False` you can do nothing in this method.



Parameters
* **item** (*int*) – The item being dragged.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The current position of the item.





See also


[`MouseDragEnd`](#wx.MouseEventsManager.MouseDragEnd "wx.MouseEventsManager.MouseDragEnd")





            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """

    def MouseHitTest(self, pos: Union[tuple[int, int], 'Point']) -> int:
        """ 

`MouseHitTest`(*self*, *pos*)[¶](#wx.MouseEventsManager.MouseHitTest "Permalink to this definition")
Must be overridden to return the item at the given position.



Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The position to test, in physical coordinates.



Return type
*int*



Returns
The index of the item at the given position or `wx.NOT_FOUND` if there is no item there.






            Source: https://docs.wxpython.org/wx.MouseEventsManager.html
        """



class MouseState(KeyboardState):
    """ **Possible constructors**:



```
MouseState()

```


Represents the mouse state.


  


        Source: https://docs.wxpython.org/wx.MouseState.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.MouseState.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def Aux1IsDown(self) -> bool:
        """ 

`Aux1IsDown`(*self*)[¶](#wx.MouseState.Aux1IsDown "Permalink to this definition")
Returns `True` if the first extra button mouse button is currently down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def Aux2IsDown(self) -> bool:
        """ 

`Aux2IsDown`(*self*)[¶](#wx.MouseState.Aux2IsDown "Permalink to this definition")
Returns `True` if the second extra button mouse button is currently down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.MouseState.GetPosition "Permalink to this definition")
Returns the physical mouse position.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def GetX(self) -> 'Coord':
        """ 

`GetX`(*self*)[¶](#wx.MouseState.GetX "Permalink to this definition")
Returns X coordinate of the physical mouse event position.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def GetY(self) -> 'Coord':
        """ 

`GetY`(*self*)[¶](#wx.MouseState.GetY "Permalink to this definition")
Returns Y coordinate of the physical mouse event position.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def LeftIsDown(self) -> bool:
        """ 

`LeftIsDown`(*self*)[¶](#wx.MouseState.LeftIsDown "Permalink to this definition")
Returns `True` if the left mouse button is currently down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def MiddleIsDown(self) -> bool:
        """ 

`MiddleIsDown`(*self*)[¶](#wx.MouseState.MiddleIsDown "Permalink to this definition")
Returns `True` if the middle mouse button is currently down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def RightIsDown(self) -> bool:
        """ 

`RightIsDown`(*self*)[¶](#wx.MouseState.RightIsDown "Permalink to this definition")
Returns `True` if the right mouse button is currently down.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetAux1Down(self, down: bool) -> None:
        """ 

`SetAux1Down`(*self*, *down*)[¶](#wx.MouseState.SetAux1Down "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetAux2Down(self, down: bool) -> None:
        """ 

`SetAux2Down`(*self*, *down*)[¶](#wx.MouseState.SetAux2Down "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetLeftDown(self, down: bool) -> None:
        """ 

`SetLeftDown`(*self*, *down*)[¶](#wx.MouseState.SetLeftDown "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetMiddleDown(self, down: bool) -> None:
        """ 

`SetMiddleDown`(*self*, *down*)[¶](#wx.MouseState.SetMiddleDown "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetPosition(self, pos: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetPosition`(*self*, *pos*)[¶](#wx.MouseState.SetPosition "Permalink to this definition")

Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetRightDown(self, down: bool) -> None:
        """ 

`SetRightDown`(*self*, *down*)[¶](#wx.MouseState.SetRightDown "Permalink to this definition")

Parameters
**down** (*bool*) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetState(self, state: 'MouseState') -> None:
        """ 

`SetState`(*self*, *state*)[¶](#wx.MouseState.SetState "Permalink to this definition")

Parameters
**state** ([*wx.MouseState*](#wx.MouseState "wx.MouseState")) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetX(self, x: int) -> None:
        """ 

`SetX`(*self*, *x*)[¶](#wx.MouseState.SetX "Permalink to this definition")

Parameters
**x** (*int*) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    def SetY(self, y: int) -> None:
        """ 

`SetY`(*self*, *y*)[¶](#wx.MouseState.SetY "Permalink to this definition")

Parameters
**y** (*int*) – 






            Source: https://docs.wxpython.org/wx.MouseState.html
        """

    Position: 'Point'  # `Position`[¶](#wx.MouseState.Position "Permalink to this definition")See [`GetPosition`](#wx.MouseState.GetPosition "wx.MouseState.GetPosition") and [`SetPosition`](#wx.MouseState.SetPosition "wx.MouseState.SetPosition")
    X: 'Coord'  # `X`[¶](#wx.MouseState.X "Permalink to this definition")See [`GetX`](#wx.MouseState.GetX "wx.MouseState.GetX") and [`SetX`](#wx.MouseState.SetX "wx.MouseState.SetX")
    Y: 'Coord'  # `Y`[¶](#wx.MouseState.Y "Permalink to this definition")See [`GetY`](#wx.MouseState.GetY "wx.MouseState.GetY") and [`SetY`](#wx.MouseState.SetY "wx.MouseState.SetY")
    aux1IsDown: Any  # `aux1IsDown`[¶](#wx.MouseState.aux1IsDown "Permalink to this definition")See [`Aux1IsDown`](#wx.MouseState.Aux1IsDown "wx.MouseState.Aux1IsDown") and [`SetAux1Down`](#wx.MouseState.SetAux1Down "wx.MouseState.SetAux1Down")
    aux2IsDown: Any  # `aux2IsDown`[¶](#wx.MouseState.aux2IsDown "Permalink to this definition")See [`Aux2IsDown`](#wx.MouseState.Aux2IsDown "wx.MouseState.Aux2IsDown") and [`SetAux2Down`](#wx.MouseState.SetAux2Down "wx.MouseState.SetAux2Down")
    leftIsDown: Any  # `leftIsDown`[¶](#wx.MouseState.leftIsDown "Permalink to this definition")See [`LeftIsDown`](#wx.MouseState.LeftIsDown "wx.MouseState.LeftIsDown") and [`SetLeftDown`](#wx.MouseState.SetLeftDown "wx.MouseState.SetLeftDown")
    middleIsDown: Any  # `middleIsDown`[¶](#wx.MouseState.middleIsDown "Permalink to this definition")See [`MiddleIsDown`](#wx.MouseState.MiddleIsDown "wx.MouseState.MiddleIsDown") and [`SetMiddleDown`](#wx.MouseState.SetMiddleDown "wx.MouseState.SetMiddleDown")
    rightIsDown: Any  # `rightIsDown`[¶](#wx.MouseState.rightIsDown "Permalink to this definition")See [`RightIsDown`](#wx.MouseState.RightIsDown "wx.MouseState.RightIsDown") and [`SetRightDown`](#wx.MouseState.SetRightDown "wx.MouseState.SetRightDown")
    x: Any  # `x`[¶](#wx.MouseState.x "Permalink to this definition")See [`GetX`](#wx.MouseState.GetX "wx.MouseState.GetX") and [`SetX`](#wx.MouseState.SetX "wx.MouseState.SetX")
    y: Any  # `y`[¶](#wx.MouseState.y "Permalink to this definition")See [`GetY`](#wx.MouseState.GetY "wx.MouseState.GetY") and [`SetY`](#wx.MouseState.SetY "wx.MouseState.SetY")



class MoveEvent(Event):
    """ **Possible constructors**:



```
MoveEvent(pt, id=0)

```


A move event holds information about window position change.


  


        Source: https://docs.wxpython.org/wx.MoveEvent.html
    """
    def __init__(self, pt, id=0) -> None:
        """ 

`__init__`(*self*, *pt*, *id=0*)[¶](#wx.MoveEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.MoveEvent.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.MoveEvent.GetPosition "Permalink to this definition")
Returns the position of the window generating the move change event.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.MoveEvent.html
        """

    def GetRect(self) -> 'Rect':
        """ 

`GetRect`(*self*)[¶](#wx.MoveEvent.GetRect "Permalink to this definition")

Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.MoveEvent.html
        """

    def SetPosition(self, pos: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetPosition`(*self*, *pos*)[¶](#wx.MoveEvent.SetPosition "Permalink to this definition")

Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.MoveEvent.html
        """

    def SetRect(self, rect: 'Rect') -> None:
        """ 

`SetRect`(*self*, *rect*)[¶](#wx.MoveEvent.SetRect "Permalink to this definition")

Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






            Source: https://docs.wxpython.org/wx.MoveEvent.html
        """

    Position: 'Point'  # `Position`[¶](#wx.MoveEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.MoveEvent.GetPosition "wx.MoveEvent.GetPosition") and [`SetPosition`](#wx.MoveEvent.SetPosition "wx.MoveEvent.SetPosition")
    Rect: '_Rect'  # `Rect`[¶](#wx.MoveEvent.Rect "Permalink to this definition")See [`GetRect`](#wx.MoveEvent.GetRect "wx.MoveEvent.GetRect") and [`SetRect`](#wx.MoveEvent.SetRect "wx.MoveEvent.SetRect")



EVT_MOVE: int  # Process a  wxEVT_MOVE   event, which is generated when a window is moved.

EVT_MOVE_START: int  # Process a  wxEVT_MOVE_START   event, which is generated when the user starts to move or size a window. wxMSW only.

EVT_MOVING: int  # Process a  wxEVT_MOVING   event, which is generated while the user is moving the window. wxMSW only.

EVT_MOVE_END: int  # Process a  wxEVT_MOVE_END   event, which is generated when the user stops moving or sizing a window. wxMSW only. ^^

class MultiChoiceDialog(Dialog):
    """ **Possible constructors**:



```
MultiChoiceDialog(parent, message, caption, n, choices,
                  style=CHOICEDLG_STYLE, pos=DefaultPosition)

MultiChoiceDialog(parent, message, caption, choices,
                  style=CHOICEDLG_STYLE, pos=DefaultPosition)

```


This class represents a dialog that shows a list of strings, and
allows the user to select one or more.


  


        Source: https://docs.wxpython.org/wx.MultiChoiceDialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.MultiChoiceDialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, parent, message, caption, n, choices, style=CHOICEDLG\_STYLE, pos=DefaultPosition)*


Constructor taking an array of *String* choices.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show on the dialog.
* **caption** (*string*) – The dialog caption.
* **n** (*int*) – The number of choices.
* **choices** (*string*) – An array of strings, or a string list, containing the choices.
* **style** (*long*) – A dialog style (bitlist) containing flags chosen from standard dialog styles and the ones listed in the class documentation. The default value is equivalent to `wx.DEFAULT_DIALOG_STYLE` | `wx.RESIZE_BORDER` | `wx.OK` | `wx.CANCEL` | `wx.CENTRE`.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position.






---

  



**\_\_init\_\_** *(self, parent, message, caption, choices, style=CHOICEDLG\_STYLE, pos=DefaultPosition)*


Constructor taking an array of *String* choices.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show on the dialog.
* **caption** (*string*) – The dialog caption.
* **choices** (*list of strings*) – An array of strings, or a string list, containing the choices.
* **style** (*long*) – A dialog style (bitlist) containing flags chosen from standard dialog styles and the ones listed in the class documentation. The default value is equivalent to `wx.DEFAULT_DIALOG_STYLE` | `wx.RESIZE_BORDER` | `wx.OK` | `wx.CANCEL` | `wx.CENTRE`.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position.






---

  





            Source: https://docs.wxpython.org/wx.MultiChoiceDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.MultiChoiceDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.MultiChoiceDialog.html
        """

    def GetSelections(self) -> list[int]:
        """ 

`GetSelections`(*self*)[¶](#wx.MultiChoiceDialog.GetSelections "Permalink to this definition")
Returns array with indexes of selected items.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.MultiChoiceDialog.html
        """

    def SetSelections(self, selections: list[int]) -> None:
        """ 

`SetSelections`(*self*, *selections*)[¶](#wx.MultiChoiceDialog.SetSelections "Permalink to this definition")
Sets selected items from the array of selected items’ indexes.



Parameters
**selections** (*list of integers*) – 






            Source: https://docs.wxpython.org/wx.MultiChoiceDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.MultiChoiceDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning either `wx.ID_OK` or `wx.ID_CANCEL`.



Return type
*int*






            Source: https://docs.wxpython.org/wx.MultiChoiceDialog.html
        """

    Selections: int  # `Selections`[¶](#wx.MultiChoiceDialog.Selections "Permalink to this definition")See [`GetSelections`](#wx.MultiChoiceDialog.GetSelections "wx.MultiChoiceDialog.GetSelections") and [`SetSelections`](#wx.MultiChoiceDialog.SetSelections "wx.MultiChoiceDialog.SetSelections")



class NativeFontInfo:
    """ **Possible constructors**:



```
NativeFontInfo()

NativeFontInfo(info)

```


NativeFontInfo is platform-specific font representation: this class
should be considered as an opaque font description only used by the
native functions, the user code can only get the objects of this type
from somewhere and pass it somewhere else (possibly save them
somewhere using ToString() and restore them using FromString())


  


        Source: https://docs.wxpython.org/wx.NativeFontInfo.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.NativeFontInfo.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, info)*



Parameters
**info** ([*wx.NativeFontInfo*](#wx.NativeFontInfo "wx.NativeFontInfo")) – 






---

  





            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def FromString(self, s: str) -> bool:
        """ 

`FromString`(*self*, *s*)[¶](#wx.NativeFontInfo.FromString "Permalink to this definition")

Parameters
**s** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def FromUserString(self, s: str) -> bool:
        """ 

`FromUserString`(*self*, *s*)[¶](#wx.NativeFontInfo.FromUserString "Permalink to this definition")

Parameters
**s** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetEncoding(self) -> int:
        """ 

`GetEncoding`(*self*)[¶](#wx.NativeFontInfo.GetEncoding "Permalink to this definition")

Return type
 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding)






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetFaceName(self) -> str:
        """ 

`GetFaceName`(*self*)[¶](#wx.NativeFontInfo.GetFaceName "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetFamily(self) -> int:
        """ 

`GetFamily`(*self*)[¶](#wx.NativeFontInfo.GetFamily "Permalink to this definition")

Return type
 [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily)






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetFractionalPointSize(self) -> float:
        """ 

`GetFractionalPointSize`(*self*)[¶](#wx.NativeFontInfo.GetFractionalPointSize "Permalink to this definition")

Return type
*float*






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetNumericWeight(self) -> int:
        """ 

`GetNumericWeight`(*self*)[¶](#wx.NativeFontInfo.GetNumericWeight "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetPointSize(self) -> int:
        """ 

`GetPointSize`(*self*)[¶](#wx.NativeFontInfo.GetPointSize "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetStyle(self) -> int:
        """ 

`GetStyle`(*self*)[¶](#wx.NativeFontInfo.GetStyle "Permalink to this definition")

Return type
 [wx.FontStyle](wx.FontStyle.enumeration.html#wx-fontstyle)






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetUnderlined(self) -> bool:
        """ 

`GetUnderlined`(*self*)[¶](#wx.NativeFontInfo.GetUnderlined "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def GetWeight(self) -> int:
        """ 

`GetWeight`(*self*)[¶](#wx.NativeFontInfo.GetWeight "Permalink to this definition")

Return type
 [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight)






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def Init(self) -> None:
        """ 

`Init`(*self*)[¶](#wx.NativeFontInfo.Init "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def InitFromFont(self, font: 'Font') -> None:
        """ 

`InitFromFont`(*self*, *font*)[¶](#wx.NativeFontInfo.InitFromFont "Permalink to this definition")

Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetEncoding(self, encoding: int) -> None:
        """ 

`SetEncoding`(*self*, *encoding*)[¶](#wx.NativeFontInfo.SetEncoding "Permalink to this definition")

Parameters
**encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetFaceName(self, *args, **kw) -> bool:
        """ 

`SetFaceName`(*self*, *\*args*, *\*\*kw*)[¶](#wx.NativeFontInfo.SetFaceName "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetFaceName** *(self, facename)*



Parameters
**facename** (*string*) – 



Return type
*bool*






---

  



**SetFaceName** *(self, facenames)*



Parameters
**facenames** (*list of strings*) – 






---

  





            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetFamily(self, family: int) -> None:
        """ 

`SetFamily`(*self*, *family*)[¶](#wx.NativeFontInfo.SetFamily "Permalink to this definition")

Parameters
**family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetFractionalPointSize(self, pointsize: float) -> None:
        """ 

`SetFractionalPointSize`(*self*, *pointsize*)[¶](#wx.NativeFontInfo.SetFractionalPointSize "Permalink to this definition")

Parameters
**pointsize** (*float*) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetNumericWeight(self, weight: int) -> None:
        """ 

`SetNumericWeight`(*self*, *weight*)[¶](#wx.NativeFontInfo.SetNumericWeight "Permalink to this definition")

Parameters
**weight** (*int*) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetPointSize(self, pointsize: int) -> None:
        """ 

`SetPointSize`(*self*, *pointsize*)[¶](#wx.NativeFontInfo.SetPointSize "Permalink to this definition")

Parameters
**pointsize** (*int*) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetStyle(self, style: int) -> None:
        """ 

`SetStyle`(*self*, *style*)[¶](#wx.NativeFontInfo.SetStyle "Permalink to this definition")

Parameters
**style** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetUnderlined(self, underlined: bool) -> None:
        """ 

`SetUnderlined`(*self*, *underlined*)[¶](#wx.NativeFontInfo.SetUnderlined "Permalink to this definition")

Parameters
**underlined** (*bool*) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def SetWeight(self, weight: int) -> None:
        """ 

`SetWeight`(*self*, *weight*)[¶](#wx.NativeFontInfo.SetWeight "Permalink to this definition")

Parameters
**weight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) – 






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def ToString(self) -> str:
        """ 

`ToString`(*self*)[¶](#wx.NativeFontInfo.ToString "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def ToUserString(self) -> str:
        """ 

`ToUserString`(*self*)[¶](#wx.NativeFontInfo.ToUserString "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    def __str__(self) -> str:
        """ 

`__str__`(*self*)[¶](#wx.NativeFontInfo.__str__ "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.NativeFontInfo.html
        """

    Encoding: int  # `Encoding`[¶](#wx.NativeFontInfo.Encoding "Permalink to this definition")See [`GetEncoding`](#wx.NativeFontInfo.GetEncoding "wx.NativeFontInfo.GetEncoding") and [`SetEncoding`](#wx.NativeFontInfo.SetEncoding "wx.NativeFontInfo.SetEncoding")
    FaceName: str  # `FaceName`[¶](#wx.NativeFontInfo.FaceName "Permalink to this definition")See [`GetFaceName`](#wx.NativeFontInfo.GetFaceName "wx.NativeFontInfo.GetFaceName") and [`SetFaceName`](#wx.NativeFontInfo.SetFaceName "wx.NativeFontInfo.SetFaceName")
    Family: int  # `Family`[¶](#wx.NativeFontInfo.Family "Permalink to this definition")See [`GetFamily`](#wx.NativeFontInfo.GetFamily "wx.NativeFontInfo.GetFamily") and [`SetFamily`](#wx.NativeFontInfo.SetFamily "wx.NativeFontInfo.SetFamily")
    FractionalPointSize: float  # `FractionalPointSize`[¶](#wx.NativeFontInfo.FractionalPointSize "Permalink to this definition")See [`GetFractionalPointSize`](#wx.NativeFontInfo.GetFractionalPointSize "wx.NativeFontInfo.GetFractionalPointSize") and [`SetFractionalPointSize`](#wx.NativeFontInfo.SetFractionalPointSize "wx.NativeFontInfo.SetFractionalPointSize")
    NumericWeight: int  # `NumericWeight`[¶](#wx.NativeFontInfo.NumericWeight "Permalink to this definition")See [`GetNumericWeight`](#wx.NativeFontInfo.GetNumericWeight "wx.NativeFontInfo.GetNumericWeight") and [`SetNumericWeight`](#wx.NativeFontInfo.SetNumericWeight "wx.NativeFontInfo.SetNumericWeight")
    PointSize: int  # `PointSize`[¶](#wx.NativeFontInfo.PointSize "Permalink to this definition")See [`GetPointSize`](#wx.NativeFontInfo.GetPointSize "wx.NativeFontInfo.GetPointSize") and [`SetPointSize`](#wx.NativeFontInfo.SetPointSize "wx.NativeFontInfo.SetPointSize")
    Style: int  # `Style`[¶](#wx.NativeFontInfo.Style "Permalink to this definition")See [`GetStyle`](#wx.NativeFontInfo.GetStyle "wx.NativeFontInfo.GetStyle") and [`SetStyle`](#wx.NativeFontInfo.SetStyle "wx.NativeFontInfo.SetStyle")
    Underlined: bool  # `Underlined`[¶](#wx.NativeFontInfo.Underlined "Permalink to this definition")See [`GetUnderlined`](#wx.NativeFontInfo.GetUnderlined "wx.NativeFontInfo.GetUnderlined") and [`SetUnderlined`](#wx.NativeFontInfo.SetUnderlined "wx.NativeFontInfo.SetUnderlined")
    Weight: int  # `Weight`[¶](#wx.NativeFontInfo.Weight "Permalink to this definition")See [`GetWeight`](#wx.NativeFontInfo.GetWeight "wx.NativeFontInfo.GetWeight") and [`SetWeight`](#wx.NativeFontInfo.SetWeight "wx.NativeFontInfo.SetWeight")



class NativePixelData:
    """ **Possible constructors**:



```
NativePixelData(bmp)

NativePixelData(bmp, rect)

NativePixelData(bmp, pt, sz)

```


A class providing direct access to a [`wx.Bitmap`](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")’s
internal data without alpha channel (`RGB`).


  


        Source: https://docs.wxpython.org/wx.NativePixelData.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.NativePixelData.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, bmp)*



Parameters
**bmp** (`Bitmap`) – 






---

  



**\_\_init\_\_** *(self, bmp, rect)*



Parameters
* **bmp** (`Bitmap`) –
* **rect** (`Rect`) –






---

  



**\_\_init\_\_** *(self, bmp, pt, sz)*



Parameters
* **bmp** (`Bitmap`) –
* **pt** (`Point`) –
* **sz** (`Size`) –






---

  





            Source: https://docs.wxpython.org/wx.NativePixelData.html
        """

    def GetPixels(self) -> 'NativePixelData_Accessor':
        """ 

`GetPixels`(*self*)[¶](#wx.NativePixelData.GetPixels "Permalink to this definition")

Return type
 [wx.NativePixelData\_Accessor](wx.NativePixelData_Accessor.html#wx-nativepixeldata-accessor)






            Source: https://docs.wxpython.org/wx.NativePixelData.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.NativePixelData.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.NativePixelData.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.NativePixelData.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.NativePixelData.html
        """

    Pixels: 'NativePixelData_Accessor'  # `Pixels`[¶](#wx.NativePixelData.Pixels "Permalink to this definition")See [`GetPixels`](#wx.NativePixelData.GetPixels "wx.NativePixelData.GetPixels")



class NativePixelData_Accessor:
    """ **Possible constructors**:



```
NativePixelData_Accessor(data)

NativePixelData_Accessor(bmp, data)

NativePixelData_Accessor()

```


  


        Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.NativePixelData_Accessor.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, data)*



Parameters
**data** (`NativePixelData`) – 






---

  



**\_\_init\_\_** *(self, bmp, data)*



Parameters
* **bmp** (`Bitmap`) –
* **data** (`NativePixelData`) –






---

  



**\_\_init\_\_** *(self)*




---

  





            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def Get(self) -> Any:
        """ 

`Get`(*self*)[¶](#wx.NativePixelData_Accessor.Get "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.NativePixelData_Accessor.IsOk "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def MoveTo(self, data, x, y) -> None:
        """ 

`MoveTo`(*self*, *data*, *x*, *y*)[¶](#wx.NativePixelData_Accessor.MoveTo "Permalink to this definition")

Parameters
* **data** (`NativePixelData`) –
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def Offset(self, data, x, y) -> None:
        """ 

`Offset`(*self*, *data*, *x*, *y*)[¶](#wx.NativePixelData_Accessor.Offset "Permalink to this definition")

Parameters
* **data** (`NativePixelData`) –
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def OffsetX(self, data, x) -> None:
        """ 

`OffsetX`(*self*, *data*, *x*)[¶](#wx.NativePixelData_Accessor.OffsetX "Permalink to this definition")

Parameters
* **data** (`NativePixelData`) –
* **x** (*int*) –






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def OffsetY(self, data, y) -> None:
        """ 

`OffsetY`(*self*, *data*, *y*)[¶](#wx.NativePixelData_Accessor.OffsetY "Permalink to this definition")

Parameters
* **data** (`NativePixelData`) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def Reset(self, data: NativePixelData) -> None:
        """ 

`Reset`(*self*, *data*)[¶](#wx.NativePixelData_Accessor.Reset "Permalink to this definition")

Parameters
**data** (`NativePixelData`) – 






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def Set(self, red, green, blue) -> None:
        """ 

`Set`(*self*, *red*, *green*, *blue*)[¶](#wx.NativePixelData_Accessor.Set "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.NativePixelData_Accessor.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.NativePixelData_Accessor.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """

    def nextPixel(self) -> None:
        """ 

`nextPixel`(*self*)[¶](#wx.NativePixelData_Accessor.nextPixel "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.NativePixelData_Accessor.html
        """



class NavigationKeyEvent(Event):
    """ **Possible constructors**:



```
NavigationKeyEvent()

NavigationKeyEvent(event)

```


This event class contains information about navigation events,
generated by navigation keys such as tab and page down.


  


        Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.NavigationKeyEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, event)*



Parameters
**event** ([*wx.NavigationKeyEvent*](#wx.NavigationKeyEvent "wx.NavigationKeyEvent")) – 






---

  





            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def GetCurrentFocus(self) -> 'Window':
        """ 

`GetCurrentFocus`(*self*)[¶](#wx.NavigationKeyEvent.GetCurrentFocus "Permalink to this definition")
Returns the child that has the focus, or `None`.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def GetDirection(self) -> bool:
        """ 

`GetDirection`(*self*)[¶](#wx.NavigationKeyEvent.GetDirection "Permalink to this definition")
Returns `True` if the navigation was in the forward direction.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def IsFromTab(self) -> bool:
        """ 

`IsFromTab`(*self*)[¶](#wx.NavigationKeyEvent.IsFromTab "Permalink to this definition")
Returns `True` if the navigation event was from a tab key.


This is required for proper navigation over radio buttons.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def IsWindowChange(self) -> bool:
        """ 

`IsWindowChange`(*self*)[¶](#wx.NavigationKeyEvent.IsWindowChange "Permalink to this definition")
Returns `True` if the navigation event represents a window change (for example, from Ctrl-Page Down in a notebook).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def SetCurrentFocus(self, currentFocus: 'Window') -> None:
        """ 

`SetCurrentFocus`(*self*, *currentFocus*)[¶](#wx.NavigationKeyEvent.SetCurrentFocus "Permalink to this definition")
Sets the current focus window member.



Parameters
**currentFocus** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def SetDirection(self, direction: bool) -> None:
        """ 

`SetDirection`(*self*, *direction*)[¶](#wx.NavigationKeyEvent.SetDirection "Permalink to this definition")
Sets the direction to forward if *direction* is `True`, or backward if `False`.



Parameters
**direction** (*bool*) – 






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def SetFlags(self, flags: int) -> None:
        """ 

`SetFlags`(*self*, *flags*)[¶](#wx.NavigationKeyEvent.SetFlags "Permalink to this definition")
Sets the flags for this event.


The *flags* can be a combination of the `NavigationKeyEvent.__init__` values.



Parameters
**flags** (*long*) – 






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def SetFromTab(self, fromTab: bool) -> None:
        """ 

`SetFromTab`(*self*, *fromTab*)[¶](#wx.NavigationKeyEvent.SetFromTab "Permalink to this definition")
Marks the navigation event as from a tab key.



Parameters
**fromTab** (*bool*) – 






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    def SetWindowChange(self, windowChange: bool) -> None:
        """ 

`SetWindowChange`(*self*, *windowChange*)[¶](#wx.NavigationKeyEvent.SetWindowChange "Permalink to this definition")
Marks the event as a window change event.



Parameters
**windowChange** (*bool*) – 






            Source: https://docs.wxpython.org/wx.NavigationKeyEvent.html
        """

    CurrentFocus: 'Window'  # `CurrentFocus`[¶](#wx.NavigationKeyEvent.CurrentFocus "Permalink to this definition")See [`GetCurrentFocus`](#wx.NavigationKeyEvent.GetCurrentFocus "wx.NavigationKeyEvent.GetCurrentFocus") and [`SetCurrentFocus`](#wx.NavigationKeyEvent.SetCurrentFocus "wx.NavigationKeyEvent.SetCurrentFocus")
    Direction: bool  # `Direction`[¶](#wx.NavigationKeyEvent.Direction "Permalink to this definition")See [`GetDirection`](#wx.NavigationKeyEvent.GetDirection "wx.NavigationKeyEvent.GetDirection") and [`SetDirection`](#wx.NavigationKeyEvent.SetDirection "wx.NavigationKeyEvent.SetDirection")



class NonOwnedWindow(Window):
    """ Common base class for all non-child windows.


  


        Source: https://docs.wxpython.org/wx.NonOwnedWindow.html
    """
    def SetShape(self, *args, **kw) -> bool:
        """ 

`SetShape`(*self*, *\*args*, *\*\*kw*)[¶](#wx.NonOwnedWindow.SetShape "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetShape** *(self, region)*


If the platform supports it, sets the shape of the window to that depicted by *region*.


The system will not display or respond to any mouse event for the pixels that lie outside of the region. To reset the window to the normal rectangular shape simply call [`SetShape`](#wx.NonOwnedWindow.SetShape "wx.NonOwnedWindow.SetShape") again with an empty  [wx.Region](wx.Region.html#wx-region). Returns `True` if the operation is successful.


This method is available in this class only since wxWidgets 2.9.3, previous versions only provided it in  [wx.TopLevelWindow](wx.TopLevelWindow.html#wx-toplevelwindow).


Note that windows with non default shape have a fixed size and can’t be resized using [`SetSize`](wx.Window.html#wx.Window.SetSize "wx.Window.SetSize") .



Parameters
**region** ([*wx.Region*](wx.Region.html#wx.Region "wx.Region")) – 



Return type
*bool*






---

  



**SetShape** *(self, path)*


Set the window shape to the given path.


Set the window shape to the interior of the given path and also draw the window border along the specified path.


For example, to make a clock-like circular window you could use



```
size = self.GetSize()

path = wx.GraphicsRenderer.GetDefaultRenderer().CreatePath()
path.AddCircle(size.x/2, size.y/2, 30)

self.SetShape(path)

```


Note that windows with non default shape have a fixed size and can’t be resized using [`SetSize`](wx.Window.html#wx.Window.SetSize "wx.Window.SetSize") .


As the overload above, this method is not guaranteed to work on all platforms but currently does work in wxMSW, OSX/Cocoa and wxGTK (with the appropriate but almost always present X11 extensions) ports.



Parameters
**path** ([*wx.GraphicsPath*](wx.GraphicsPath.html#wx.GraphicsPath "wx.GraphicsPath")) – 



Return type
*bool*





New in version 2.9.3.





---

  





            Source: https://docs.wxpython.org/wx.NonOwnedWindow.html
        """



class NotifyEvent(CommandEvent):
    """ **Possible constructors**:



```
NotifyEvent(eventType=wxEVT_NULL, id=0)

```


This class is not used by the event handlers by itself, but is a base
class for other event classes (such as BookCtrlEvent).


  


        Source: https://docs.wxpython.org/wx.NotifyEvent.html
    """
    def __init__(self, eventType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *eventType=wxEVT\_NULL*, *id=0*)[¶](#wx.NotifyEvent.__init__ "Permalink to this definition")
Constructor (used internally by wxWidgets only).



Parameters
* **eventType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.NotifyEvent.html
        """

    def Allow(self) -> None:
        """ 

`Allow`(*self*)[¶](#wx.NotifyEvent.Allow "Permalink to this definition")
This is the opposite of [`Veto`](#wx.NotifyEvent.Veto "wx.NotifyEvent.Veto") : it explicitly allows the event to be processed.


For most events it is not necessary to call this method as the events are allowed anyhow but some are forbidden by default (this will be mentioned in the corresponding event description).




            Source: https://docs.wxpython.org/wx.NotifyEvent.html
        """

    def IsAllowed(self) -> bool:
        """ 

`IsAllowed`(*self*)[¶](#wx.NotifyEvent.IsAllowed "Permalink to this definition")
Returns `True` if the change is allowed ( [`Veto`](#wx.NotifyEvent.Veto "wx.NotifyEvent.Veto") hasn’t been called) or `False` otherwise (if it was).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.NotifyEvent.html
        """

    def Veto(self) -> None:
        """ 

`Veto`(*self*)[¶](#wx.NotifyEvent.Veto "Permalink to this definition")
Prevents the change announced by this event from happening.


It is in general a good idea to notify the user about the reasons for vetoing the change because otherwise the applications behaviour (which just refuses to do what the user wants) might be quite surprising.




            Source: https://docs.wxpython.org/wx.NotifyEvent.html
        """



class NumberEntryDialog(Dialog):
    """ **Possible constructors**:



```
NumberEntryDialog()

NumberEntryDialog(parent, message, prompt, caption, value, min, max,
                  pos=DefaultPosition)

```


This class represents a dialog that requests a numeric input from the
user.


  


        Source: https://docs.wxpython.org/wx.NumberEntryDialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.NumberEntryDialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Call [`Create`](#wx.NumberEntryDialog.Create "wx.NumberEntryDialog.Create") to really create the dialog later.




---

  



**\_\_init\_\_** *(self, parent, message, prompt, caption, value, min, max, pos=DefaultPosition)*


Constructor.


Use [`ShowModal`](wx.Dialog.html#wx.Dialog.ShowModal "wx.Dialog.ShowModal") to show the dialog.


See [`Create`](#wx.NumberEntryDialog.Create "wx.NumberEntryDialog.Create") method for parameter description.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **message** (*string*) –
* **prompt** (*string*) –
* **caption** (*string*) –
* **value** (*long*) –
* **min** (*long*) –
* **max** (*long*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






---

  





            Source: https://docs.wxpython.org/wx.NumberEntryDialog.html
        """

    def Create(self, parent, message, prompt, caption, value, min, max, pos=DefaultPosition) -> bool:
        """ 

`Create`(*self*, *parent*, *message*, *prompt*, *caption*, *value*, *min*, *max*, *pos=DefaultPosition*)[¶](#wx.NumberEntryDialog.Create "Permalink to this definition")

Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show on the dialog.
* **prompt** (*string*) – The prompt of the dialog.
* **caption** (*string*) – The caption of the dialog.
* **value** (*long*) – The default value.
* **min** (*long*) – The minimal value.
* **max** (*long*) – The maximal value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.NumberEntryDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.NumberEntryDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.NumberEntryDialog.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.NumberEntryDialog.GetValue "Permalink to this definition")
Returns the value that the user has entered if the user has pressed `wx.OK`, or the original value if the user has pressed Cancel.



Return type
*long*






            Source: https://docs.wxpython.org/wx.NumberEntryDialog.html
        """

    Value: int  # `Value`[¶](#wx.NumberEntryDialog.Value "Permalink to this definition")See [`GetValue`](#wx.NumberEntryDialog.GetValue "wx.NumberEntryDialog.GetValue")



_ClassInfo: TypeAlias = ClassInfo

class Object:
    """ **Possible constructors**:



```
Object()

Object(other)

```


This is the root class of many of the wxWidgets classes.


  


        Source: https://docs.wxpython.org/wx.Object.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Object.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor; initializes to `None` the internal reference data.




---

  



**\_\_init\_\_** *(self, other)*


Copy constructor.


Sets the internal `Object.m_refData` pointer to point to the same instance of the ObjectRefData-derived class pointed by `other` and increments the refcount of `Object.m_refData`.



Parameters
**other** ([*wx.Object*](#wx.Object "wx.Object")) – 






---

  





            Source: https://docs.wxpython.org/wx.Object.html
        """

    def Destroy(self) -> bool:
        """ 

`Destroy`(*self*)[¶](#wx.Object.Destroy "Permalink to this definition")
Deletes the C++ object this Python object is a proxy for.




            Source: https://docs.wxpython.org/wx.Object.html
        """

    def GetClassInfo(self) -> 'ClassInfo':
        """ 

`GetClassInfo`(*self*)[¶](#wx.Object.GetClassInfo "Permalink to this definition")
This virtual function is redefined for every class that requires run-time type information, when using the `DECLARE_CLASS` macro (or similar).



Return type
 [wx.ClassInfo](wx.ClassInfo.html#wx-classinfo)






            Source: https://docs.wxpython.org/wx.Object.html
        """

    def GetClassName(self) -> 'Char':
        """ 

`GetClassName`(*self*)[¶](#wx.Object.GetClassName "Permalink to this definition")
Returns the class name of the C++ class using `RTTI`.



Return type
*wx.Char*






            Source: https://docs.wxpython.org/wx.Object.html
        """

    def GetRefData(self) -> 'ObjectRefData':
        """ 

`GetRefData`(*self*)[¶](#wx.Object.GetRefData "Permalink to this definition")
Returns the `Object.m_refData` pointer, i.e. the data referenced by this object.



Return type
*wx.ObjectRefData*





See also


[`Ref`](#wx.Object.Ref "wx.Object.Ref") , [`UnRef`](#wx.Object.UnRef "wx.Object.UnRef") , `Object.m_refData`, [`SetRefData`](#wx.Object.SetRefData "wx.Object.SetRefData") , *wx.ObjectRefData*





            Source: https://docs.wxpython.org/wx.Object.html
        """

    def IsSameAs(self, obj: 'Object') -> bool:
        """ 

`IsSameAs`(*self*, *obj*)[¶](#wx.Object.IsSameAs "Permalink to this definition")
Returns `True` if this object has the same data pointer as *obj*.


Notice that `True` is returned if the data pointers are `None` in both objects.


This function only does a *shallow* comparison, i.e. it doesn’t compare the objects pointed to by the data pointers of these objects.



Parameters
**obj** ([*wx.Object*](#wx.Object "wx.Object")) – 



Return type
*bool*





See also


[Reference Counting](refcount_overview.html#reference-counting)





            Source: https://docs.wxpython.org/wx.Object.html
        """

    def Ref(self, clone: 'Object') -> None:
        """ 

`Ref`(*self*, *clone*)[¶](#wx.Object.Ref "Permalink to this definition")
Makes this object refer to the data in *clone*.



Parameters
**clone** ([*wx.Object*](#wx.Object "wx.Object")) – The object to ‘clone’.





Note


First this function calls [`UnRef`](#wx.Object.UnRef "wx.Object.UnRef") on itself to decrement (and perhaps free) the data it is currently referring to. It then sets its own `Object.m_refData` to point to that of *clone*, and increments the reference count inside the data.




See also


[`UnRef`](#wx.Object.UnRef "wx.Object.UnRef") , [`SetRefData`](#wx.Object.SetRefData "wx.Object.SetRefData") , [`GetRefData`](#wx.Object.GetRefData "wx.Object.GetRefData") , *wx.ObjectRefData*





            Source: https://docs.wxpython.org/wx.Object.html
        """

    def SetRefData(self, data: 'ObjectRefData') -> None:
        """ 

`SetRefData`(*self*, *data*)[¶](#wx.Object.SetRefData "Permalink to this definition")
Sets the `Object.m_refData` pointer.



Parameters
**data** (*wx.ObjectRefData*) – 





See also


[`Ref`](#wx.Object.Ref "wx.Object.Ref") , [`UnRef`](#wx.Object.UnRef "wx.Object.UnRef") , [`GetRefData`](#wx.Object.GetRefData "wx.Object.GetRefData") , *wx.ObjectRefData*





            Source: https://docs.wxpython.org/wx.Object.html
        """

    def UnRef(self) -> None:
        """ 

`UnRef`(*self*)[¶](#wx.Object.UnRef "Permalink to this definition")
Decrements the reference count in the associated data, and if it is zero, deletes the data.


The `Object.m_refData` member is set to `None`.



See also


[`Ref`](#wx.Object.Ref "wx.Object.Ref") , [`SetRefData`](#wx.Object.SetRefData "wx.Object.SetRefData") , [`GetRefData`](#wx.Object.GetRefData "wx.Object.GetRefData") , *wx.ObjectRefData*





            Source: https://docs.wxpython.org/wx.Object.html
        """

    def UnShare(self) -> None:
        """ 

`UnShare`(*self*)[¶](#wx.Object.UnShare "Permalink to this definition")
This is the same of `AllocExclusive` but this method is public.




            Source: https://docs.wxpython.org/wx.Object.html
        """

    ClassInfo: '_ClassInfo'  # `ClassInfo`[¶](#wx.Object.ClassInfo "Permalink to this definition")See [`GetClassInfo`](#wx.Object.GetClassInfo "wx.Object.GetClassInfo")
    ClassName: 'Char'  # `ClassName`[¶](#wx.Object.ClassName "Permalink to this definition")See [`GetClassName`](#wx.Object.GetClassName "wx.Object.GetClassName")
    RefData: 'ObjectRefData'  # `RefData`[¶](#wx.Object.RefData "Permalink to this definition")See [`GetRefData`](#wx.Object.GetRefData "wx.Object.GetRefData") and [`SetRefData`](#wx.Object.SetRefData "wx.Object.SetRefData")



class OutputStream(StreamBase):
    """ **Possible constructors**:



```
OutputStream()

```


OutputStream is an abstract base class which may not be used
directly.


  


        Source: https://docs.wxpython.org/wx.OutputStream.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.OutputStream.__init__ "Permalink to this definition")
Creates a dummy  [wx.OutputStream](#wx-outputstream) object.




            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def Close(self) -> bool:
        """ 

`Close`(*self*)[¶](#wx.OutputStream.Close "Permalink to this definition")
Closes the stream, returning `False` if an error occurs.


The stream is closed implicitly in the destructor if [`Close`](#wx.OutputStream.Close "wx.OutputStream.Close") is not called explicitly.


If this stream wraps another stream or some other resource such as a file, then the underlying resource is closed too if it is owned by this stream, or left open otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def LastWrite(self) -> int:
        """ 

`LastWrite`(*self*)[¶](#wx.OutputStream.LastWrite "Permalink to this definition")
Returns the number of bytes written during the last [`Write`](#wx.OutputStream.Write "wx.OutputStream.Write") .


It may return 0 even if there is no error on the stream if it is only temporarily impossible to write to it.



Return type
*int*






            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def PutC(self, c: int) -> None:
        """ 

`PutC`(*self*, *c*)[¶](#wx.OutputStream.PutC "Permalink to this definition")
Puts the specified character in the output queue and increments the stream position.



Parameters
**c** (*int*) – 






            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def SeekO(self, pos, mode=FromStart) -> 'FileOffset':
        """ 

`SeekO`(*self*, *pos*, *mode=FromStart*)[¶](#wx.OutputStream.SeekO "Permalink to this definition")
Changes the stream current position.



Parameters
* **pos** (*wx.FileOffset*) – Offset to seek to.
* **mode** ([*SeekMode*](wx.SeekMode.enumeration.html "SeekMode")) – One of FromStart, FromEnd, FromCurrent.



Return type
*wx.FileOffset*



Returns
The new stream position or `InvalidOffset` on error.






            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def TellO(self) -> 'FileOffset':
        """ 

`TellO`(*self*)[¶](#wx.OutputStream.TellO "Permalink to this definition")
Returns the current stream position.



Return type
*wx.FileOffset*






            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def Write(self, *args, **kw) -> 'OutputStream':
        """ 

`Write`(*self*, *\*args*, *\*\*kw*)[¶](#wx.OutputStream.Write "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Write** *(self, buffer, size)*


Writes up to the specified amount of bytes using the data of buffer.


Note that not all data can always be written so you must check the number of bytes really written to the stream using [`LastWrite`](#wx.OutputStream.LastWrite "wx.OutputStream.LastWrite") when this function returns.


In some cases (for example a write end of a pipe which is currently full) it is even possible that there is no errors and zero bytes have been written. This function returns a reference on the current object, so the user can test any states of the stream right away.



Parameters
* **buffer** –
* **size** (*int*) –



Return type
 [wx.OutputStream](#wx-outputstream)






---

  



**Write** *(self, stream\_in)*


Reads data from the specified input stream and stores them in the current stream.


The data is read until an error is raised by one of the two streams.



Parameters
**stream\_in** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
 [wx.OutputStream](#wx-outputstream)






---

  





            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def WriteAll(self, buffer, size) -> bool:
        """ 

`WriteAll`(*self*, *buffer*, *size*)[¶](#wx.OutputStream.WriteAll "Permalink to this definition")
Writes exactly the specified number of bytes from the buffer.


Returns `True` if exactly *size* bytes were written. Otherwise, returns `False` and [`LastWrite`](#wx.OutputStream.LastWrite "wx.OutputStream.LastWrite") should be used to retrieve the exact amount of the data written if necessary.


This method uses repeated calls to [`Write`](#wx.OutputStream.Write "wx.OutputStream.Write") (which may return writing only part of the data) if necessary.



Parameters
* **buffer** –
* **size** (*int*) –



Return type
*bool*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def close(self) -> None:
        """ 

`close`(*self*)[¶](#wx.OutputStream.close "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def eof(self) -> bool:
        """ 

`eof`(*self*)[¶](#wx.OutputStream.eof "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def flush(self) -> None:
        """ 

`flush`(*self*)[¶](#wx.OutputStream.flush "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def seek(self, offset, whence=0) -> None:
        """ 

`seek`(*self*, *offset*, *whence=0*)[¶](#wx.OutputStream.seek "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def tell(self) -> 'FileOffset':
        """ 

`tell`(*self*)[¶](#wx.OutputStream.tell "Permalink to this definition")

Return type
*wx.FileOffset*






            Source: https://docs.wxpython.org/wx.OutputStream.html
        """

    def write(self, data) -> Any:
        """ 

`write`(*self*, *data*)[¶](#wx.OutputStream.write "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.OutputStream.html
        """



class Overlay:
    """ **Possible constructors**:



```
Overlay()

```


Creates an overlay over an existing window, allowing for manipulations
like rubberbanding, etc.


  


        Source: https://docs.wxpython.org/wx.Overlay.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.Overlay.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Overlay.html
        """

    def Reset(self) -> None:
        """ 

`Reset`(*self*)[¶](#wx.Overlay.Reset "Permalink to this definition")
Clears the overlay without restoring the former state.


To be done, for example, when the window content has been changed and repainted.




            Source: https://docs.wxpython.org/wx.Overlay.html
        """



class PageSetupDialog(Object):
    """ **Possible constructors**:



```
PageSetupDialog(parent, data=None)

```


This class represents the page setup common dialog.


  


        Source: https://docs.wxpython.org/wx.PageSetupDialog.html
    """
    def __init__(self, parent, data=None) -> None:
        """ 

`__init__`(*self*, *parent*, *data=None*)[¶](#wx.PageSetupDialog.__init__ "Permalink to this definition")
Constructor.


Pass a parent window, and optionally a pointer to a block of page setup data, which will be copied to the print dialog’s internal data.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.PageSetupDialogData*](wx.PageSetupDialogData.html#wx.PageSetupDialogData "wx.PageSetupDialogData")) –






            Source: https://docs.wxpython.org/wx.PageSetupDialog.html
        """

    def GetPageSetupData(self) -> 'PageSetupDialogData':
        """ 

`GetPageSetupData`(*self*)[¶](#wx.PageSetupDialog.GetPageSetupData "Permalink to this definition")
Returns the  [wx.PageSetupDialogData](wx.PageSetupDialogData.html#wx-pagesetupdialogdata) object associated with the dialog.



Return type
 [wx.PageSetupDialogData](wx.PageSetupDialogData.html#wx-pagesetupdialogdata)






            Source: https://docs.wxpython.org/wx.PageSetupDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.PageSetupDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning `ID_OK` if the user pressed `wx.OK`, and `ID_CANCEL` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PageSetupDialog.html
        """

    PageSetupData: 'PageSetupDialogData'  # `PageSetupData`[¶](#wx.PageSetupDialog.PageSetupData "Permalink to this definition")See [`GetPageSetupData`](#wx.PageSetupDialog.GetPageSetupData "wx.PageSetupDialog.GetPageSetupData")



_PrintData: TypeAlias = PrintData

class PageSetupDialogData(Object):
    """ **Possible constructors**:



```
PageSetupDialogData()

PageSetupDialogData(data)

PageSetupDialogData(printData)

```


This class holds a variety of information related to
PageSetupDialog.


  


        Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PageSetupDialogData.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, data)*


Copy constructor.



Parameters
**data** ([*wx.PageSetupDialogData*](#wx.PageSetupDialogData "wx.PageSetupDialogData")) – 






---

  



**\_\_init\_\_** *(self, printData)*


Construct an object from a print data object.



Parameters
**printData** ([*wx.PrintData*](wx.PrintData.html#wx.PrintData "wx.PrintData")) – 






---

  





            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def EnableHelp(self, flag: bool) -> None:
        """ 

`EnableHelp`(*self*, *flag*)[¶](#wx.PageSetupDialogData.EnableHelp "Permalink to this definition")
Enables or disables the “Help” button (Windows only).



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def EnableMargins(self, flag: bool) -> None:
        """ 

`EnableMargins`(*self*, *flag*)[¶](#wx.PageSetupDialogData.EnableMargins "Permalink to this definition")
Enables or disables the margin controls (Windows only).



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def EnableOrientation(self, flag: bool) -> None:
        """ 

`EnableOrientation`(*self*, *flag*)[¶](#wx.PageSetupDialogData.EnableOrientation "Permalink to this definition")
Enables or disables the orientation control (Windows only).



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def EnablePaper(self, flag: bool) -> None:
        """ 

`EnablePaper`(*self*, *flag*)[¶](#wx.PageSetupDialogData.EnablePaper "Permalink to this definition")
Enables or disables the paper size control (Windows only).



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def EnablePrinter(self, flag: bool) -> None:
        """ 

`EnablePrinter`(*self*, *flag*)[¶](#wx.PageSetupDialogData.EnablePrinter "Permalink to this definition")
Enables or disables the “Printer” button, which invokes a printer setup dialog.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetDefaultInfo(self) -> bool:
        """ 

`GetDefaultInfo`(*self*)[¶](#wx.PageSetupDialogData.GetDefaultInfo "Permalink to this definition")
Returns `True` if the dialog will simply return default printer information (such as orientation) instead of showing a dialog (Windows only).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetDefaultMinMargins(self) -> bool:
        """ 

`GetDefaultMinMargins`(*self*)[¶](#wx.PageSetupDialogData.GetDefaultMinMargins "Permalink to this definition")
Returns `True` if the page setup dialog will take its minimum margin values from the currently selected printer properties (Windows only).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetEnableHelp(self) -> bool:
        """ 

`GetEnableHelp`(*self*)[¶](#wx.PageSetupDialogData.GetEnableHelp "Permalink to this definition")
Returns `True` if the printer setup button is enabled.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetEnableMargins(self) -> bool:
        """ 

`GetEnableMargins`(*self*)[¶](#wx.PageSetupDialogData.GetEnableMargins "Permalink to this definition")
Returns `True` if the margin controls are enabled (Windows only).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetEnableOrientation(self) -> bool:
        """ 

`GetEnableOrientation`(*self*)[¶](#wx.PageSetupDialogData.GetEnableOrientation "Permalink to this definition")
Returns `True` if the orientation control is enabled (Windows only).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetEnablePaper(self) -> bool:
        """ 

`GetEnablePaper`(*self*)[¶](#wx.PageSetupDialogData.GetEnablePaper "Permalink to this definition")
Returns `True` if the paper size control is enabled (Windows only).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetEnablePrinter(self) -> bool:
        """ 

`GetEnablePrinter`(*self*)[¶](#wx.PageSetupDialogData.GetEnablePrinter "Permalink to this definition")
Returns `True` if the printer setup button is enabled.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetMarginBottomRight(self) -> 'Point':
        """ 

`GetMarginBottomRight`(*self*)[¶](#wx.PageSetupDialogData.GetMarginBottomRight "Permalink to this definition")
Returns the right (x) and bottom (y) margins in millimetres.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetMarginTopLeft(self) -> 'Point':
        """ 

`GetMarginTopLeft`(*self*)[¶](#wx.PageSetupDialogData.GetMarginTopLeft "Permalink to this definition")
Returns the left (x) and top (y) margins in millimetres.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetMinMarginBottomRight(self) -> 'Point':
        """ 

`GetMinMarginBottomRight`(*self*)[¶](#wx.PageSetupDialogData.GetMinMarginBottomRight "Permalink to this definition")
Returns the right (x) and bottom (y) minimum margins the user can enter (Windows only).


Units are in millimetres.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetMinMarginTopLeft(self) -> 'Point':
        """ 

`GetMinMarginTopLeft`(*self*)[¶](#wx.PageSetupDialogData.GetMinMarginTopLeft "Permalink to this definition")
Returns the left (x) and top (y) minimum margins the user can enter (Windows only).


Units are in millimetres.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetPaperId(self) -> 'PaperSize':
        """ 

`GetPaperId`(*self*)[¶](#wx.PageSetupDialogData.GetPaperId "Permalink to this definition")
Returns the paper id (stored in the internal  [wx.PrintData](wx.PrintData.html#wx-printdata) object).



Return type
 [wx.PaperSize](wx.PaperSize.enumeration.html#wx-papersize)





See also


[`wx.PrintData.SetPaperId`](wx.PrintData.html#wx.PrintData.SetPaperId "wx.PrintData.SetPaperId")





            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetPaperSize(self) -> 'Size':
        """ 

`GetPaperSize`(*self*)[¶](#wx.PageSetupDialogData.GetPaperSize "Permalink to this definition")
Returns the paper size in millimetres.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def GetPrintData(self) -> 'PrintData':
        """ 

`GetPrintData`(*self*)[¶](#wx.PageSetupDialogData.GetPrintData "Permalink to this definition")
Returns a reference to the print data associated with this object.



Return type
 [wx.PrintData](wx.PrintData.html#wx-printdata)






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.PageSetupDialogData.IsOk "Permalink to this definition")
Returns `True` if the print data associated with the dialog data is valid.


This can return `False` on Windows if the current printer is not set, for example. On all other platforms, it returns `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetDefaultInfo(self, flag: bool) -> None:
        """ 

`SetDefaultInfo`(*self*, *flag*)[¶](#wx.PageSetupDialogData.SetDefaultInfo "Permalink to this definition")
Pass `True` if the dialog will simply return default printer information (such as orientation) instead of showing a dialog (Windows only).



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetDefaultMinMargins(self, flag: bool) -> None:
        """ 

`SetDefaultMinMargins`(*self*, *flag*)[¶](#wx.PageSetupDialogData.SetDefaultMinMargins "Permalink to this definition")
Pass `True` if the page setup dialog will take its minimum margin values from the currently selected printer properties (Windows only).


Units are in millimetres.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetMarginBottomRight(self, pt: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetMarginBottomRight`(*self*, *pt*)[¶](#wx.PageSetupDialogData.SetMarginBottomRight "Permalink to this definition")
Sets the right (x) and bottom (y) margins in millimetres.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetMarginTopLeft(self, pt: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetMarginTopLeft`(*self*, *pt*)[¶](#wx.PageSetupDialogData.SetMarginTopLeft "Permalink to this definition")
Sets the left (x) and top (y) margins in millimetres.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetMinMarginBottomRight(self, pt: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetMinMarginBottomRight`(*self*, *pt*)[¶](#wx.PageSetupDialogData.SetMinMarginBottomRight "Permalink to this definition")
Sets the right (x) and bottom (y) minimum margins the user can enter (Windows only).


Units are in millimetres.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetMinMarginTopLeft(self, pt: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetMinMarginTopLeft`(*self*, *pt*)[¶](#wx.PageSetupDialogData.SetMinMarginTopLeft "Permalink to this definition")
Sets the left (x) and top (y) minimum margins the user can enter (Windows only).


Units are in millimetres.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetPaperId(self, id: PaperSize) -> None:
        """ 

`SetPaperId`(*self*, *id*)[¶](#wx.PageSetupDialogData.SetPaperId "Permalink to this definition")
Sets the paper size id.


Calling this function overrides the explicit paper dimensions passed in [`SetPaperSize`](#wx.PageSetupDialogData.SetPaperSize "wx.PageSetupDialogData.SetPaperSize") .



Parameters
**id** ([*PaperSize*](wx.PaperSize.enumeration.html "PaperSize")) – 





See also


[`wx.PrintData.SetPaperId`](wx.PrintData.html#wx.PrintData.SetPaperId "wx.PrintData.SetPaperId")





            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetPaperSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetPaperSize`(*self*, *size*)[¶](#wx.PageSetupDialogData.SetPaperSize "Permalink to this definition")
Sets the paper size in millimetres.


If a corresponding paper id is found, it will be set in the internal  [wx.PrintData](wx.PrintData.html#wx-printdata) object, otherwise the paper size overrides the paper id.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def SetPrintData(self, printData: 'PrintData') -> None:
        """ 

`SetPrintData`(*self*, *printData*)[¶](#wx.PageSetupDialogData.SetPrintData "Permalink to this definition")
Sets the print data associated with this object.



Parameters
**printData** ([*wx.PrintData*](wx.PrintData.html#wx.PrintData "wx.PrintData")) – 






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.PageSetupDialogData.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.PageSetupDialogData.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PageSetupDialogData.html
        """

    MarginBottomRight: 'Point'  # `MarginBottomRight`[¶](#wx.PageSetupDialogData.MarginBottomRight "Permalink to this definition")See [`GetMarginBottomRight`](#wx.PageSetupDialogData.GetMarginBottomRight "wx.PageSetupDialogData.GetMarginBottomRight") and [`SetMarginBottomRight`](#wx.PageSetupDialogData.SetMarginBottomRight "wx.PageSetupDialogData.SetMarginBottomRight")
    MarginTopLeft: 'Point'  # `MarginTopLeft`[¶](#wx.PageSetupDialogData.MarginTopLeft "Permalink to this definition")See [`GetMarginTopLeft`](#wx.PageSetupDialogData.GetMarginTopLeft "wx.PageSetupDialogData.GetMarginTopLeft") and [`SetMarginTopLeft`](#wx.PageSetupDialogData.SetMarginTopLeft "wx.PageSetupDialogData.SetMarginTopLeft")
    MinMarginBottomRight: 'Point'  # `MinMarginBottomRight`[¶](#wx.PageSetupDialogData.MinMarginBottomRight "Permalink to this definition")See [`GetMinMarginBottomRight`](#wx.PageSetupDialogData.GetMinMarginBottomRight "wx.PageSetupDialogData.GetMinMarginBottomRight") and [`SetMinMarginBottomRight`](#wx.PageSetupDialogData.SetMinMarginBottomRight "wx.PageSetupDialogData.SetMinMarginBottomRight")
    MinMarginTopLeft: 'Point'  # `MinMarginTopLeft`[¶](#wx.PageSetupDialogData.MinMarginTopLeft "Permalink to this definition")See [`GetMinMarginTopLeft`](#wx.PageSetupDialogData.GetMinMarginTopLeft "wx.PageSetupDialogData.GetMinMarginTopLeft") and [`SetMinMarginTopLeft`](#wx.PageSetupDialogData.SetMinMarginTopLeft "wx.PageSetupDialogData.SetMinMarginTopLeft")
    PaperId: 'PaperSize'  # `PaperId`[¶](#wx.PageSetupDialogData.PaperId "Permalink to this definition")See [`GetPaperId`](#wx.PageSetupDialogData.GetPaperId "wx.PageSetupDialogData.GetPaperId") and [`SetPaperId`](#wx.PageSetupDialogData.SetPaperId "wx.PageSetupDialogData.SetPaperId")
    PaperSize: 'Size'  # `PaperSize`[¶](#wx.PageSetupDialogData.PaperSize "Permalink to this definition")See [`GetPaperSize`](#wx.PageSetupDialogData.GetPaperSize "wx.PageSetupDialogData.GetPaperSize") and [`SetPaperSize`](#wx.PageSetupDialogData.SetPaperSize "wx.PageSetupDialogData.SetPaperSize")
    PrintData: '_PrintData'  # `PrintData`[¶](#wx.PageSetupDialogData.PrintData "Permalink to this definition")See [`GetPrintData`](#wx.PageSetupDialogData.GetPrintData "wx.PageSetupDialogData.GetPrintData") and [`SetPrintData`](#wx.PageSetupDialogData.SetPrintData "wx.PageSetupDialogData.SetPrintData")



class PaintEvent(Event):
    """ **Possible constructors**:



```
PaintEvent(window)

```


A paint event is sent when a window’s contents needs to be repainted.


  


        Source: https://docs.wxpython.org/wx.PaintEvent.html
    """
    def __init__(self, window: 'Window') -> None:
        """ 

`__init__`(*self*, *window*)[¶](#wx.PaintEvent.__init__ "Permalink to this definition")
Constructor for exclusive use of wxWidgets itself.


Note that the objects of this class can *not* be created from application code, they’re only created by the library itself. If you need a window to be repainted, use [`wx.Window.Refresh`](wx.Window.html#wx.Window.Refresh "wx.Window.Refresh") instead of trying to manually create an event of this class.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.PaintEvent.html
        """



class Palette(GDIObject):
    """ **Possible constructors**:



```
Palette()

Palette(palette)

Palette(red, green, blue)

```


A palette is a table that maps pixel values to `RGB` colours.


  


        Source: https://docs.wxpython.org/wx.Palette.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Palette.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, palette)*


Copy constructor, uses [Reference Counting](refcount_overview.html#reference-counting).



Parameters
**palette** ([*wx.Palette*](#wx.Palette "wx.Palette")) – A reference to the palette to copy.






---

  



**\_\_init\_\_** *(self, red, green, blue)*


Creates a palette from a set of sequences of integers,
one for each red, green and blue color components.



Parameters
* **red** – A sequence of integer values in the range 0..255 inclusive.
* **green** – A sequence of integer values in the range 0..255 inclusive.
* **blue** – A sequence of integer values in the range 0..255 inclusive.





Note


All sequences must be the same length.





---

  





            Source: https://docs.wxpython.org/wx.Palette.html
        """

    def Create(self, red, green, blue) -> None:
        """ 

`Create`(*self*, *red*, *green*, *blue*)[¶](#wx.Palette.Create "Permalink to this definition")
Creates a palette from 3 sequences of integers, one for each red, blue or green component.



Parameters
* **red** – A sequence of integer values in the range 0..255 inclusive.
* **green** – A sequence of integer values in the range 0..255 inclusive.
* **blue** – A sequence of integer values in the range 0..255 inclusive.





Note


All sequences must be the same length.




Return type
*bool*






            Source: https://docs.wxpython.org/wx.Palette.html
        """

    def GetColoursCount(self) -> int:
        """ 

`GetColoursCount`(*self*)[¶](#wx.Palette.GetColoursCount "Permalink to this definition")
Returns number of entries in palette.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Palette.html
        """

    def GetPixel(self, red, green, blue) -> int:
        """ 

`GetPixel`(*self*, *red*, *green*, *blue*)[¶](#wx.Palette.GetPixel "Permalink to this definition")
Returns a pixel value (index into the palette) for the given `RGB` values.



Parameters
* **red** (*int*) – Red value.
* **green** (*int*) – Green value.
* **blue** (*int*) – Blue value.



Return type
*int*



Returns
The nearest palette index or `NOT_FOUND` for unexpected errors.





See also


[`GetRGB`](#wx.Palette.GetRGB "wx.Palette.GetRGB")





            Source: https://docs.wxpython.org/wx.Palette.html
        """

    def GetRGB(self, pixel) -> tuple:
        """ 

`GetRGB`(*self*, *pixel*)[¶](#wx.Palette.GetRGB "Permalink to this definition")
Returns `RGB` values for a given palette index.



Return type
*tuple*



Returns
( *red*, *green*, *blue* )






            Source: https://docs.wxpython.org/wx.Palette.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.Palette.IsOk "Permalink to this definition")
Returns `True` if palette data is present.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Palette.html
        """

    ColoursCount: int  # `ColoursCount`[¶](#wx.Palette.ColoursCount "Permalink to this definition")See [`GetColoursCount`](#wx.Palette.GetColoursCount "wx.Palette.GetColoursCount")
    RGB: tuple  # `RGB`[¶](#wx.Palette.RGB "Permalink to this definition")See [`GetRGB`](#wx.Palette.GetRGB "wx.Palette.GetRGB")



class PaletteChangedEvent(Event):
    """ **Possible constructors**:



```
PaletteChangedEvent(winid=0)

```


  


        Source: https://docs.wxpython.org/wx.PaletteChangedEvent.html
    """
    def __init__(self, winid: int=0) -> None:
        """ 

`__init__`(*self*, *winid=0*)[¶](#wx.PaletteChangedEvent.__init__ "Permalink to this definition")

Parameters
**winid** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.PaletteChangedEvent.html
        """

    def GetChangedWindow(self) -> 'Window':
        """ 

`GetChangedWindow`(*self*)[¶](#wx.PaletteChangedEvent.GetChangedWindow "Permalink to this definition")

Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.PaletteChangedEvent.html
        """

    def SetChangedWindow(self, win: 'Window') -> None:
        """ 

`SetChangedWindow`(*self*, *win*)[¶](#wx.PaletteChangedEvent.SetChangedWindow "Permalink to this definition")

Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.PaletteChangedEvent.html
        """

    ChangedWindow: 'Window'  # `ChangedWindow`[¶](#wx.PaletteChangedEvent.ChangedWindow "Permalink to this definition")See [`GetChangedWindow`](#wx.PaletteChangedEvent.GetChangedWindow "wx.PaletteChangedEvent.GetChangedWindow") and [`SetChangedWindow`](#wx.PaletteChangedEvent.SetChangedWindow "wx.PaletteChangedEvent.SetChangedWindow")



class Panel(Window):
    """ **Possible constructors**:



```
Panel()

Panel(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
      style=TAB_TRAVERSAL, name=PanelNameStr)

```


A panel is a window on which controls are placed.


  


        Source: https://docs.wxpython.org/wx.Panel.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Panel.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=TAB\_TRAVERSAL, name=PanelNameStr)*


Constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window.
* **id** (*wx.WindowID*) – An identifier for the panel. `ID_ANY` is taken to mean a default.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The panel position. The value `wx.DefaultPosition` indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The panel size. The value `wx.DefaultSize` indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
* **style** (*long*) – The window style. See  [wx.Panel](#wx-panel).
* **name** (*string*) – Window name.





See also


[`Create`](#wx.Panel.Create "wx.Panel.Create")





---

  





            Source: https://docs.wxpython.org/wx.Panel.html
        """

    def AcceptsFocus(self) -> bool:
        """ 

`AcceptsFocus`(*self*)[¶](#wx.Panel.AcceptsFocus "Permalink to this definition")
This method is overridden from [`wx.Window.AcceptsFocus`](wx.Window.html#wx.Window.AcceptsFocus "wx.Window.AcceptsFocus") and returns `True` only if there is no child window in the panel which can accept the focus.


This is reevaluated each time a child window is added or removed from the panel.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Panel.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TAB_TRAVERSAL, name=PanelNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=TAB\_TRAVERSAL*, *name=PanelNameStr*)[¶](#wx.Panel.Create "Permalink to this definition")
Used for two-step panel construction.


See  [wx.Panel](#wx-panel) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Panel.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Panel.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Panel.html
        """

    def InitDialog(self) -> None:
        """ 

`InitDialog`(*self*)[¶](#wx.Panel.InitDialog "Permalink to this definition")
Sends a  [wx.InitDialogEvent](wx.InitDialogEvent.html#wx-initdialogevent), which in turn transfers data to the dialog via validators.



See also


 [wx.InitDialogEvent](wx.InitDialogEvent.html#wx-initdialogevent)





            Source: https://docs.wxpython.org/wx.Panel.html
        """

    def Layout(self) -> bool:
        """ 

`Layout`(*self*)[¶](#wx.Panel.Layout "Permalink to this definition")
See [`wx.Window.SetAutoLayout`](wx.Window.html#wx.Window.SetAutoLayout "wx.Window.SetAutoLayout") : when auto layout is on, this function gets called automatically when the window is resized.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Panel.html
        """

    def SetFocus(self) -> None:
        """ 

`SetFocus`(*self*)[¶](#wx.Panel.SetFocus "Permalink to this definition")
Overrides [`wx.Window.SetFocus`](wx.Window.html#wx.Window.SetFocus "wx.Window.SetFocus") .


This method uses the (undocumented) mix-in class ControlContainer which manages the focus and `TAB` logic for controls which usually have child controls.


In practice, if you call this method and the control has at least one child window, the focus will be given to the child window.



See also


 [wx.FocusEvent](wx.FocusEvent.html#wx-focusevent), [`wx.Window.SetFocus`](wx.Window.html#wx.Window.SetFocus "wx.Window.SetFocus")





            Source: https://docs.wxpython.org/wx.Panel.html
        """

    def SetFocusIgnoringChildren(self) -> None:
        """ 

`SetFocusIgnoringChildren`(*self*)[¶](#wx.Panel.SetFocusIgnoringChildren "Permalink to this definition")
In contrast to [`SetFocus`](#wx.Panel.SetFocus "wx.Panel.SetFocus") (see above) this will set the focus to the panel even if there are child windows in the panel.


This is only rarely needed.




            Source: https://docs.wxpython.org/wx.Panel.html
        """

    def DrawSavedLines(self, dc: 'DC') -> None:
        """ 
        """



class PanGestureEvent(GestureEvent):
    """ **Possible constructors**:



```
PanGestureEvent(winid=0)

```


This event is generated when the user moves a finger on the surface.


  


        Source: https://docs.wxpython.org/wx.PanGestureEvent.html
    """
    def __init__(self, winid: int=0) -> None:
        """ 

`__init__`(*self*, *winid=0*)[¶](#wx.PanGestureEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**winid** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.PanGestureEvent.html
        """

    def GetDelta(self) -> 'Point':
        """ 

`GetDelta`(*self*)[¶](#wx.PanGestureEvent.GetDelta "Permalink to this definition")
Returns the distance covered since the previous panning event.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.PanGestureEvent.html
        """

    def SetDelta(self, delta: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetDelta`(*self*, *delta*)[¶](#wx.PanGestureEvent.SetDelta "Permalink to this definition")
Sets the distance covered since the previous panning event.



Parameters
**delta** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.PanGestureEvent.html
        """

    Delta: 'Point'  # `Delta`[¶](#wx.PanGestureEvent.Delta "Permalink to this definition")See [`GetDelta`](#wx.PanGestureEvent.GetDelta "wx.PanGestureEvent.GetDelta") and [`SetDelta`](#wx.PanGestureEvent.SetDelta "wx.PanGestureEvent.SetDelta")



EVT_GESTURE_PAN: int  # Process a  wxEVT_GESTURE_PAN . ^^

class PasswordEntryDialog(TextEntryDialog):
    """ **Possible constructors**:



```
PasswordEntryDialog(parent, message,
                    caption=GetPasswordFromUserPromptStr, defaultValue="",
                    style=TextEntryDialogStyle, pos=DefaultPosition)

```


This class represents a dialog that requests a one-line password
string from the user.


  


        Source: https://docs.wxpython.org/wx.PasswordEntryDialog.html
    """
    def __init__(self, parent, message, caption=GetPasswordFromUserPromptStr, defaultValue="", style=TextEntryDialogStyle, pos=DefaultPosition) -> None:
        """ 

`__init__`(*self*, *parent*, *message*, *caption=GetPasswordFromUserPromptStr*, *defaultValue=""*, *style=TextEntryDialogStyle*, *pos=DefaultPosition*)[¶](#wx.PasswordEntryDialog.__init__ "Permalink to this definition")
Constructor.


Use [`wx.TextEntryDialog.ShowModal`](wx.TextEntryDialog.html#wx.TextEntryDialog.ShowModal "wx.TextEntryDialog.ShowModal") to show the dialog.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show on the dialog.
* **caption** (*string*) – The caption of the dialog.
* **defaultValue** (*string*) – The default value, which may be the empty string.
* **style** (*long*) – A dialog style, specifying the buttons (wx``wx.OK``, `wx.CANCEL`) and an optional `wx.CENTRE` style. You do not need to specify the `wx.TE_PASSWORD` style, it is always applied.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position.






            Source: https://docs.wxpython.org/wx.PasswordEntryDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.PasswordEntryDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.PasswordEntryDialog.html
        """



class PCXHandler(ImageHandler):
    """ **Possible constructors**:



```
PCXHandler()

```


This is the image handler for the `PCX` format.


  


        Source: https://docs.wxpython.org/wx.PCXHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.PCXHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.PCXHandler](#wx-pcxhandler).




            Source: https://docs.wxpython.org/wx.PCXHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.PCXHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PCXHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.PCXHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.PCXHandler.SaveFile "wx.PCXHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.PCXHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.PCXHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.PCXHandler.LoadFile "wx.PCXHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.PCXHandler.html
        """



class PenInfo:
    """ **Possible constructors**:



```
PenInfo(colour=Colour(), width=1, style=PENSTYLE_SOLID)

```


This class is a helper used for Pen creation using named parameter
idiom: it allows specifying various Pen attributes using the chained
calls to its clearly named methods instead of passing them in the
fixed order to Pen constructors.


  


        Source: https://docs.wxpython.org/wx.PenInfo.html
    """
    def __init__(*args, **kwargs) -> None:
        """ 

`__init__`(*self*, *colour=Colour()*, *width=1*, *style=PENSTYLE\_SOLID*)[¶](#wx.PenInfo.__init__ "Permalink to this definition")

Parameters
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **width** (*int*) –
* **style** ([*PenStyle*](wx.PenStyle.enumeration.html "PenStyle")) –






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def Cap(self, cap: PenCap) -> 'PenInfo':
        """ 

`Cap`(*self*, *cap*)[¶](#wx.PenInfo.Cap "Permalink to this definition")

Parameters
**cap** ([*PenCap*](wx.PenCap.enumeration.html "PenCap")) – 



Return type
 [wx.PenInfo](#wx-peninfo)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def Colour(self, col: Union[int, str, 'Colour']) -> 'PenInfo':
        """ 

`Colour`(*self*, *col*)[¶](#wx.PenInfo.Colour "Permalink to this definition")

Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
 [wx.PenInfo](#wx-peninfo)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def GetCap(self) -> 'PenCap':
        """ 

`GetCap`(*self*)[¶](#wx.PenInfo.GetCap "Permalink to this definition")

Return type
 [wx.PenCap](wx.PenCap.enumeration.html#wx-pencap)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def GetColour(self) -> 'Colour':
        """ 

`GetColour`(*self*)[¶](#wx.PenInfo.GetColour "Permalink to this definition")

Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def GetJoin(self) -> 'PenJoin':
        """ 

`GetJoin`(*self*)[¶](#wx.PenInfo.GetJoin "Permalink to this definition")

Return type
 [wx.PenJoin](wx.PenJoin.enumeration.html#wx-penjoin)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def GetQuality(self) -> 'PenQuality':
        """ 

`GetQuality`(*self*)[¶](#wx.PenInfo.GetQuality "Permalink to this definition")

Return type
 [wx.PenQuality](wx.PenQuality.enumeration.html#wx-penquality)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def GetStipple(self) -> 'Bitmap':
        """ 

`GetStipple`(*self*)[¶](#wx.PenInfo.GetStipple "Permalink to this definition")

Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def GetStyle(self) -> 'PenStyle':
        """ 

`GetStyle`(*self*)[¶](#wx.PenInfo.GetStyle "Permalink to this definition")

Return type
 [wx.PenStyle](wx.PenStyle.enumeration.html#wx-penstyle)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.PenInfo.GetWidth "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def HighQuality(self) -> 'PenInfo':
        """ 

`HighQuality`(*self*)[¶](#wx.PenInfo.HighQuality "Permalink to this definition")
Set high pen quality.


This is the same as calling [`Quality`](#wx.PenInfo.Quality "wx.PenInfo.Quality") with `PEN_QUALITY_HIGH`.



Return type
 [wx.PenInfo](#wx-peninfo)





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def IsTransparent(self) -> bool:
        """ 

`IsTransparent`(*self*)[¶](#wx.PenInfo.IsTransparent "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def Join(self, join: PenJoin) -> 'PenInfo':
        """ 

`Join`(*self*, *join*)[¶](#wx.PenInfo.Join "Permalink to this definition")

Parameters
**join** ([*PenJoin*](wx.PenJoin.enumeration.html "PenJoin")) – 



Return type
 [wx.PenInfo](#wx-peninfo)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def LowQuality(self) -> 'PenInfo':
        """ 

`LowQuality`(*self*)[¶](#wx.PenInfo.LowQuality "Permalink to this definition")
Set low pen quality.


This is the same as calling [`Quality`](#wx.PenInfo.Quality "wx.PenInfo.Quality") with `PEN_QUALITY_LOW`.



Return type
 [wx.PenInfo](#wx-peninfo)





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def Quality(self, quality: PenQuality) -> 'PenInfo':
        """ 

`Quality`(*self*, *quality*)[¶](#wx.PenInfo.Quality "Permalink to this definition")
Set the pen quality.


Using [`LowQuality`](#wx.PenInfo.LowQuality "wx.PenInfo.LowQuality") or [`HighQuality`](#wx.PenInfo.HighQuality "wx.PenInfo.HighQuality") is usually more convenient.



Parameters
**quality** ([*PenQuality*](wx.PenQuality.enumeration.html "PenQuality")) – 



Return type
 [wx.PenInfo](#wx-peninfo)





New in version 4.1/wxWidgets-3.1.5.




See also


[`wx.Pen.SetQuality`](wx.Pen.html#wx.Pen.SetQuality "wx.Pen.SetQuality")





            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def Stipple(self, stipple: 'Bitmap') -> 'PenInfo':
        """ 

`Stipple`(*self*, *stipple*)[¶](#wx.PenInfo.Stipple "Permalink to this definition")

Parameters
**stipple** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 



Return type
 [wx.PenInfo](#wx-peninfo)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def Style(self, style: PenStyle) -> 'PenInfo':
        """ 

`Style`(*self*, *style*)[¶](#wx.PenInfo.Style "Permalink to this definition")

Parameters
**style** ([*PenStyle*](wx.PenStyle.enumeration.html "PenStyle")) – 



Return type
 [wx.PenInfo](#wx-peninfo)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """

    def Width(self, width: int) -> 'PenInfo':
        """ 

`Width`(*self*, *width*)[¶](#wx.PenInfo.Width "Permalink to this definition")

Parameters
**width** (*int*) – 



Return type
 [wx.PenInfo](#wx-peninfo)






            Source: https://docs.wxpython.org/wx.PenInfo.html
        """



class PenList:
    """ **Possible constructors**:



```
PenList()

```


There is only one instance of this class: ThePenList.


  


        Source: https://docs.wxpython.org/wx.PenList.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.PenList.__init__ "Permalink to this definition")
Constructor.


The application should not construct its own pen list: use the object pointer *wx.ThePenList* .




            Source: https://docs.wxpython.org/wx.PenList.html
        """

    def FindOrCreatePen(self, colour, width=1, style=PENSTYLE_SOLID) -> 'Pen':
        """ 

`FindOrCreatePen`(*self*, *colour*, *width=1*, *style=PENSTYLE\_SOLID*)[¶](#wx.PenList.FindOrCreatePen "Permalink to this definition")
Finds a pen with the specified attributes and returns it, else creates a new pen, adds it to the pen list, and returns it.



Parameters
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – Colour object.
* **width** (*int*) – Width of pen.
* **style** ([*PenStyle*](wx.PenStyle.enumeration.html "PenStyle")) – Pen style. See  [wx.PenStyle](wx.PenStyle.enumeration.html#wx-penstyle) for a list of styles.



Return type
 [wx.Pen](wx.Pen.html#wx-pen)






            Source: https://docs.wxpython.org/wx.PenList.html
        """



class PickerBase(Control):
    """ **Possible constructors**:



```
PickerBase()

```


Base abstract class for all pickers which support an auxiliary text
control.


  


        Source: https://docs.wxpython.org/wx.PickerBase.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.PickerBase.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def CreateBase(self, parent, id=ID_ANY, text="", pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ButtonNameStr) -> bool:
        """ 

`CreateBase`(*self*, *parent*, *id=ID\_ANY*, *text=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=ButtonNameStr*)[¶](#wx.PickerBase.CreateBase "Permalink to this definition")

Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **text** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def GetInternalMargin(self) -> int:
        """ 

`GetInternalMargin`(*self*)[¶](#wx.PickerBase.GetInternalMargin "Permalink to this definition")
Returns the margin (in pixel) between the picker and the text control.


This function can be used only when [`HasTextCtrl`](#wx.PickerBase.HasTextCtrl "wx.PickerBase.HasTextCtrl") returns `True`.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def GetPickerCtrl(self) -> 'Control':
        """ 

`GetPickerCtrl`(*self*)[¶](#wx.PickerBase.GetPickerCtrl "Permalink to this definition")
Returns the native implementation of the real picker control.



Return type
 [wx.Control](wx.Control.html#wx-control)





Note


The returned control in the generic implementation of  [wx.FilePickerCtrl](wx.FilePickerCtrl.html#wx-filepickerctrl),  [wx.DirPickerCtrl](wx.DirPickerCtrl.html#wx-dirpickerctrl),  [wx.FontPickerCtrl](wx.FontPickerCtrl.html#wx-fontpickerctrl) and  [wx.ColourPickerCtrl](wx.ColourPickerCtrl.html#wx-colourpickerctrl) is a specialized  [wx.Button](wx.Button.html#wx-button) class so that you can change its label doing, e.g.:



```
if wx.Platform == '__WXMSW__':
    # wxMSW is one of the platforms where the generic implementation
    # of wx.FilePickerCtrl is used...

    pButt = myFilePickerCtrl.GetPickerCtrl()

    if pButt is not None:
        pButt.SetLabel('Custom browse string')

```





            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def GetPickerCtrlProportion(self) -> int:
        """ 

`GetPickerCtrlProportion`(*self*)[¶](#wx.PickerBase.GetPickerCtrlProportion "Permalink to this definition")
Returns the proportion value of the picker.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def GetPickerStyle(self, style: int) -> int:
        """ 

`GetPickerStyle`(*self*, *style*)[¶](#wx.PickerBase.GetPickerStyle "Permalink to this definition")

Parameters
**style** (*long*) – 



Return type
*long*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def GetTextCtrl(self) -> 'TextCtrl':
        """ 

`GetTextCtrl`(*self*)[¶](#wx.PickerBase.GetTextCtrl "Permalink to this definition")
Returns a pointer to the text control handled by this window or `None` if the `PB_USE_TEXTCTRL` style was not specified when this control was created.



Return type
 [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl)





Note


The contents of the text control could be an invalid representation of the entity which can be chosen through the picker (e.g. when the user enters an invalid colour syntax because of a typo). Thus you should never parse the content of the textctrl to get the user’s input; rather use the derived-class getter (e.g. [`wx.ColourPickerCtrl.GetColour`](wx.ColourPickerCtrl.html#wx.ColourPickerCtrl.GetColour "wx.ColourPickerCtrl.GetColour") , [`wx.FilePickerCtrl.GetPath`](wx.FilePickerCtrl.html#wx.FilePickerCtrl.GetPath "wx.FilePickerCtrl.GetPath") , etc).





            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def GetTextCtrlProportion(self) -> int:
        """ 

`GetTextCtrlProportion`(*self*)[¶](#wx.PickerBase.GetTextCtrlProportion "Permalink to this definition")
Returns the proportion value of the text control.


This function can be used only when [`HasTextCtrl`](#wx.PickerBase.HasTextCtrl "wx.PickerBase.HasTextCtrl") returns `True`.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def GetTextCtrlStyle(self, style: int) -> int:
        """ 

`GetTextCtrlStyle`(*self*, *style*)[¶](#wx.PickerBase.GetTextCtrlStyle "Permalink to this definition")

Parameters
**style** (*long*) – 



Return type
*long*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def HasTextCtrl(self) -> bool:
        """ 

`HasTextCtrl`(*self*)[¶](#wx.PickerBase.HasTextCtrl "Permalink to this definition")
Returns `True` if this window has a valid text control (i.e. if the `PB_USE_TEXTCTRL` style was given when creating this control).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def IsPickerCtrlGrowable(self) -> bool:
        """ 

`IsPickerCtrlGrowable`(*self*)[¶](#wx.PickerBase.IsPickerCtrlGrowable "Permalink to this definition")
Returns `True` if the picker control is growable.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def IsTextCtrlGrowable(self) -> bool:
        """ 

`IsTextCtrlGrowable`(*self*)[¶](#wx.PickerBase.IsTextCtrlGrowable "Permalink to this definition")
Returns `True` if the text control is growable.


This function can be used only when [`HasTextCtrl`](#wx.PickerBase.HasTextCtrl "wx.PickerBase.HasTextCtrl") returns `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def PostCreation(self) -> None:
        """ 

`PostCreation`(*self*)[¶](#wx.PickerBase.PostCreation "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def SetInternalMargin(self, margin: int) -> None:
        """ 

`SetInternalMargin`(*self*, *margin*)[¶](#wx.PickerBase.SetInternalMargin "Permalink to this definition")
Sets the margin (in pixel) between the picker and the text control.


This function can be used only when [`HasTextCtrl`](#wx.PickerBase.HasTextCtrl "wx.PickerBase.HasTextCtrl") returns `True`.



Parameters
**margin** (*int*) – 






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def SetPickerCtrl(self, picker: 'Control') -> None:
        """ 

`SetPickerCtrl`(*self*, *picker*)[¶](#wx.PickerBase.SetPickerCtrl "Permalink to this definition")

Parameters
**picker** ([*wx.Control*](wx.Control.html#wx.Control "wx.Control")) – 






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def SetPickerCtrlGrowable(self, grow: bool=True) -> None:
        """ 

`SetPickerCtrlGrowable`(*self*, *grow=True*)[¶](#wx.PickerBase.SetPickerCtrlGrowable "Permalink to this definition")
Sets the picker control as growable when `grow` is `True`.



Parameters
**grow** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def SetPickerCtrlProportion(self, prop: int) -> None:
        """ 

`SetPickerCtrlProportion`(*self*, *prop*)[¶](#wx.PickerBase.SetPickerCtrlProportion "Permalink to this definition")
Sets the proportion value of the picker.


Look at the detailed description of  [wx.PickerBase](#wx-pickerbase) for more info.



Parameters
**prop** (*int*) – 






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def SetTextCtrl(self, text: 'TextCtrl') -> None:
        """ 

`SetTextCtrl`(*self*, *text*)[¶](#wx.PickerBase.SetTextCtrl "Permalink to this definition")

Parameters
**text** ([*wx.TextCtrl*](wx.TextCtrl.html#wx.TextCtrl "wx.TextCtrl")) – 






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def SetTextCtrlGrowable(self, grow: bool=True) -> None:
        """ 

`SetTextCtrlGrowable`(*self*, *grow=True*)[¶](#wx.PickerBase.SetTextCtrlGrowable "Permalink to this definition")
Sets the text control as growable when `grow` is `True`.


This function can be used only when [`HasTextCtrl`](#wx.PickerBase.HasTextCtrl "wx.PickerBase.HasTextCtrl") returns `True`.



Parameters
**grow** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def SetTextCtrlProportion(self, prop: int) -> None:
        """ 

`SetTextCtrlProportion`(*self*, *prop*)[¶](#wx.PickerBase.SetTextCtrlProportion "Permalink to this definition")
Sets the proportion value of the text control.


Look at the detailed description of  [wx.PickerBase](#wx-pickerbase) for more info.


This function can be used only when [`HasTextCtrl`](#wx.PickerBase.HasTextCtrl "wx.PickerBase.HasTextCtrl") returns `True`.



Parameters
**prop** (*int*) – 






            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def UpdatePickerFromTextCtrl(self) -> None:
        """ 

`UpdatePickerFromTextCtrl`(*self*)[¶](#wx.PickerBase.UpdatePickerFromTextCtrl "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    def UpdateTextCtrlFromPicker(self) -> None:
        """ 

`UpdateTextCtrlFromPicker`(*self*)[¶](#wx.PickerBase.UpdateTextCtrlFromPicker "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PickerBase.html
        """

    InternalMargin: int  # `InternalMargin`[¶](#wx.PickerBase.InternalMargin "Permalink to this definition")See [`GetInternalMargin`](#wx.PickerBase.GetInternalMargin "wx.PickerBase.GetInternalMargin") and [`SetInternalMargin`](#wx.PickerBase.SetInternalMargin "wx.PickerBase.SetInternalMargin")
    PickerCtrl: 'Control'  # `PickerCtrl`[¶](#wx.PickerBase.PickerCtrl "Permalink to this definition")See [`GetPickerCtrl`](#wx.PickerBase.GetPickerCtrl "wx.PickerBase.GetPickerCtrl") and [`SetPickerCtrl`](#wx.PickerBase.SetPickerCtrl "wx.PickerBase.SetPickerCtrl")
    PickerCtrlProportion: int  # `PickerCtrlProportion`[¶](#wx.PickerBase.PickerCtrlProportion "Permalink to this definition")See [`GetPickerCtrlProportion`](#wx.PickerBase.GetPickerCtrlProportion "wx.PickerBase.GetPickerCtrlProportion") and [`SetPickerCtrlProportion`](#wx.PickerBase.SetPickerCtrlProportion "wx.PickerBase.SetPickerCtrlProportion")
    TextCtrl: '_TextCtrl'  # `TextCtrl`[¶](#wx.PickerBase.TextCtrl "Permalink to this definition")See [`GetTextCtrl`](#wx.PickerBase.GetTextCtrl "wx.PickerBase.GetTextCtrl") and [`SetTextCtrl`](#wx.PickerBase.SetTextCtrl "wx.PickerBase.SetTextCtrl")
    TextCtrlProportion: int  # `TextCtrlProportion`[¶](#wx.PickerBase.TextCtrlProportion "Permalink to this definition")See [`GetTextCtrlProportion`](#wx.PickerBase.GetTextCtrlProportion "wx.PickerBase.GetTextCtrlProportion") and [`SetTextCtrlProportion`](#wx.PickerBase.SetTextCtrlProportion "wx.PickerBase.SetTextCtrlProportion")



PB_USE_TEXTCTRL: int  # Creates a text control to the left of the picker which is completely managed by this   wx.PickerBase  class. ^^

class PixelDataBase:
    """ **Possible constructors**:



```
PixelDataBase()

```


  


        Source: https://docs.wxpython.org/wx.PixelDataBase.html
    """
    def GetHeight(self) -> int:
        """ 

`GetHeight`(*self*)[¶](#wx.PixelDataBase.GetHeight "Permalink to this definition")
Return the height of the area this pixel data represents.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PixelDataBase.html
        """

    def GetOrigin(self) -> 'Point':
        """ 

`GetOrigin`(*self*)[¶](#wx.PixelDataBase.GetOrigin "Permalink to this definition")
Return the origin of the area this pixel data represents.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.PixelDataBase.html
        """

    def GetRowStride(self) -> int:
        """ 

`GetRowStride`(*self*)[¶](#wx.PixelDataBase.GetRowStride "Permalink to this definition")
Returns the distance between the start of one row to the start of the next row.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PixelDataBase.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.PixelDataBase.GetSize "Permalink to this definition")
Return the size of the area this pixel data represents.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.PixelDataBase.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.PixelDataBase.GetWidth "Permalink to this definition")
Return the width of the area this pixel data represents.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PixelDataBase.html
        """

    def __iter__(self) -> None:
        """ 

`__iter__`(*self*)[¶](#wx.PixelDataBase.__iter__ "Permalink to this definition")
Create and return an iterator/generator object for traversing
this pixel data object.




            Source: https://docs.wxpython.org/wx.PixelDataBase.html
        """

    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.PixelDataBase.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PixelDataBase.html
        """

    Height: int  # `Height`[¶](#wx.PixelDataBase.Height "Permalink to this definition")See [`GetHeight`](#wx.PixelDataBase.GetHeight "wx.PixelDataBase.GetHeight")
    Origin: 'Point'  # `Origin`[¶](#wx.PixelDataBase.Origin "Permalink to this definition")See [`GetOrigin`](#wx.PixelDataBase.GetOrigin "wx.PixelDataBase.GetOrigin")
    RowStride: int  # `RowStride`[¶](#wx.PixelDataBase.RowStride "Permalink to this definition")See [`GetRowStride`](#wx.PixelDataBase.GetRowStride "wx.PixelDataBase.GetRowStride")
    Size: '_Size'  # `Size`[¶](#wx.PixelDataBase.Size "Permalink to this definition")See [`GetSize`](#wx.PixelDataBase.GetSize "wx.PixelDataBase.GetSize")
    Width: int  # `Width`[¶](#wx.PixelDataBase.Width "Permalink to this definition")See [`GetWidth`](#wx.PixelDataBase.GetWidth "wx.PixelDataBase.GetWidth")



class PlatformId:
    """ Defines a very broad platform categorization.




        Source: https://docs.wxpython.org/wx.PlatformId.html
    """


_Architecture: TypeAlias = Architecture

_Bitness: TypeAlias = Bitness

_Endianness: TypeAlias = Endianness

_LinuxDistributionInfo: TypeAlias = LinuxDistributionInfo

_OperatingSystemId: TypeAlias = OperatingSystemId

_PortId: TypeAlias = PortId

class PlatformInformation:
    """ PlatformInfo()
PlatformInfo(pid, tkMajor=-1, tkMinor=-1, id=OS\_UNKNOWN, osMajor=-1, osMinor=-1, bitness=BITNESS\_INVALID, endian=ENDIAN\_INVALID)


This class holds information about the operating system, the toolkit
and the basic architecture bitness of the machine where the
application is currently running.


  


        Source: https://docs.wxpython.org/wx.PlatformInformation.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PlatformInformation.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Initializes the instance with the values corresponding to the currently running platform.


This is a fast operation because it only requires to copy the values internally cached for the currently running platform.



See also


[`Get`](#wx.PlatformInformation.Get "wx.PlatformInformation.Get")





---

  



**\_\_init\_\_** *(self, pid, tkMajor=-1, tkMinor=-1, id=OS\_UNKNOWN, osMajor=-1, osMinor=-1, bitness=BITNESS\_INVALID, endian=ENDIAN\_INVALID)*


Initializes the object using given values.



Parameters
* **pid** ([*PortId*](wx.PortId.enumeration.html "PortId")) –
* **tkMajor** (*int*) –
* **tkMinor** (*int*) –
* **id** ([*OperatingSystemId*](wx.OperatingSystemId.enumeration.html "OperatingSystemId")) –
* **osMajor** (*int*) –
* **osMinor** (*int*) –
* **bitness** ([*Bitness*](wx.Bitness.enumeration.html "Bitness")) –
* **endian** ([*Endianness*](wx.Endianness.enumeration.html "Endianness")) –






---

  





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def CheckOSVersion(self, major, minor, micro=0) -> bool:
        """ 

`CheckOSVersion`(*self*, *major*, *minor*, *micro=0*)[¶](#wx.PlatformInformation.CheckOSVersion "Permalink to this definition")
Returns `True` if the OS version is at least `major.minor.micro` .



Parameters
* **major** (*int*) –
* **minor** (*int*) –
* **micro** (*int*) –



Return type
*bool*





See also


[`GetOSMajorVersion`](#wx.PlatformInformation.GetOSMajorVersion "wx.PlatformInformation.GetOSMajorVersion") , [`GetOSMinorVersion`](#wx.PlatformInformation.GetOSMinorVersion "wx.PlatformInformation.GetOSMinorVersion") , [`GetOSMicroVersion`](#wx.PlatformInformation.GetOSMicroVersion "wx.PlatformInformation.GetOSMicroVersion") , [`CheckToolkitVersion`](#wx.PlatformInformation.CheckToolkitVersion "wx.PlatformInformation.CheckToolkitVersion")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def CheckToolkitVersion(self, major, minor, micro=0) -> bool:
        """ 

`CheckToolkitVersion`(*self*, *major*, *minor*, *micro=0*)[¶](#wx.PlatformInformation.CheckToolkitVersion "Permalink to this definition")
Returns `True` if the toolkit version is at least `major.minor.micro` .



Parameters
* **major** (*int*) –
* **minor** (*int*) –
* **micro** (*int*) –



Return type
*bool*





See also


[`GetToolkitMajorVersion`](#wx.PlatformInformation.GetToolkitMajorVersion "wx.PlatformInformation.GetToolkitMajorVersion") , [`GetToolkitMinorVersion`](#wx.PlatformInformation.GetToolkitMinorVersion "wx.PlatformInformation.GetToolkitMinorVersion") , [`GetToolkitMicroVersion`](#wx.PlatformInformation.GetToolkitMicroVersion "wx.PlatformInformation.GetToolkitMicroVersion") , [`CheckOSVersion`](#wx.PlatformInformation.CheckOSVersion "wx.PlatformInformation.CheckOSVersion")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    @staticmethod
    def Get() -> 'PlatformInfo':
        """ 

*static* `Get`()[¶](#wx.PlatformInformation.Get "Permalink to this definition")
Returns the global *PlatformInfo* object, initialized with the values for the currently running platform.



Return type
*PlatformInfo*






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    @staticmethod
    def GetArch(arch: str) -> 'Architecture':
        """ 

*static* `GetArch`(*arch*)[¶](#wx.PlatformInformation.GetArch "Permalink to this definition")

Parameters
**arch** (*string*) – 



Return type
 [wx.Architecture](wx.Architecture.enumeration.html#wx-architecture)





Deprecated


Use [`GetBitness`](#wx.PlatformInformation.GetBitness "wx.PlatformInformation.GetBitness") instead.





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetArchName(self) -> str:
        """ 

`GetArchName`(*self*)[¶](#wx.PlatformInformation.GetArchName "Permalink to this definition")

Return type
`string`





Deprecated


Use [`GetBitnessName`](#wx.PlatformInformation.GetBitnessName "wx.PlatformInformation.GetBitnessName") instead.





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetArchitecture(self) -> 'Architecture':
        """ 

`GetArchitecture`(*self*)[¶](#wx.PlatformInformation.GetArchitecture "Permalink to this definition")

Return type
 [wx.Architecture](wx.Architecture.enumeration.html#wx-architecture)





Deprecated


Use [`GetBitness`](#wx.PlatformInformation.GetBitness "wx.PlatformInformation.GetBitness") instead.





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetBitness(self) -> 'Bitness':
        """ 

`GetBitness`(*self*)[¶](#wx.PlatformInformation.GetBitness "Permalink to this definition")
Returns the architecture bitness `ID` of this *PlatformInfo* instance.



Return type
 [wx.Bitness](wx.Bitness.enumeration.html#wx-bitness)





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    @staticmethod
    def GetBitnessName(*args, **kw) -> str:
        """ 

*static* `GetBitnessName`(*\*args*, *\*\*kw*)[¶](#wx.PlatformInformation.GetBitnessName "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetBitnessName** *(bitness)*


Returns the name for the given Bitness enumeration value.



Parameters
**bitness** ([*Bitness*](wx.Bitness.enumeration.html "Bitness")) – 



Return type
`string`





New in version 4.1/wxWidgets-3.1.5.





---

  



**GetBitnessName** *(self)*


Returns the name for the architecture bitness of this *PlatformInfo* instance.



Return type
`string`





New in version 4.1/wxWidgets-3.1.5.





---

  





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetCpuArchitectureName(self) -> str:
        """ 

`GetCpuArchitectureName`(*self*)[¶](#wx.PlatformInformation.GetCpuArchitectureName "Permalink to this definition")
Returns the `CPU` architecture name, if available.



Return type
`string`





New in version 4.1/wxWidgets-3.1.5.




See also


[`wx.GetCpuArchitectureName`](wx.functions.html#wx.GetCpuArchitectureName "wx.GetCpuArchitectureName") , [`wx.GetNativeCpuArchitectureName`](wx.functions.html#wx.GetNativeCpuArchitectureName "wx.GetNativeCpuArchitectureName")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetDesktopEnvironment(self) -> str:
        """ 

`GetDesktopEnvironment`(*self*)[¶](#wx.PlatformInformation.GetDesktopEnvironment "Permalink to this definition")
Returns the desktop environment associated with this *PlatformInfo* instance.


See [`wx.AppTraits.GetDesktopEnvironment`](wx.AppTraits.html#wx.AppTraits.GetDesktopEnvironment "wx.AppTraits.GetDesktopEnvironment") for more info.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetEndianness(self) -> 'Endianness':
        """ 

`GetEndianness`(*self*)[¶](#wx.PlatformInformation.GetEndianness "Permalink to this definition")
Returns the endianness `ID` of this *PlatformInfo* instance.



Return type
 [wx.Endianness](wx.Endianness.enumeration.html#wx-endianness)






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetEndiannessName(self) -> str:
        """ 

`GetEndiannessName`(*self*)[¶](#wx.PlatformInformation.GetEndiannessName "Permalink to this definition")
Returns the name for the endianness of this *PlatformInfo* instance.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetLinuxDistributionInfo(self) -> 'LinuxDistributionInfo':
        """ 

`GetLinuxDistributionInfo`(*self*)[¶](#wx.PlatformInformation.GetLinuxDistributionInfo "Permalink to this definition")
Returns the Linux distribution info associated with this *PlatformInfo* instance.


See *wx.GetLinuxDistributionInfo* for more info.



Return type
 [wx.LinuxDistributionInfo](wx.LinuxDistributionInfo.html#wx-linuxdistributioninfo)






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetNativeCpuArchitectureName(self) -> str:
        """ 

`GetNativeCpuArchitectureName`(*self*)[¶](#wx.PlatformInformation.GetNativeCpuArchitectureName "Permalink to this definition")
Returns the native `CPU` architecture name, if available.



Return type
`string`





New in version 4.1/wxWidgets-3.1.6.




See also


[`wx.GetNativeCpuArchitectureName`](wx.functions.html#wx.GetNativeCpuArchitectureName "wx.GetNativeCpuArchitectureName") , [`wx.GetCpuArchitectureName`](wx.functions.html#wx.GetCpuArchitectureName "wx.GetCpuArchitectureName")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetOSMajorVersion(self) -> int:
        """ 

`GetOSMajorVersion`(*self*)[¶](#wx.PlatformInformation.GetOSMajorVersion "Permalink to this definition")
Returns the run-time major version of the OS associated with this *PlatformInfo* instance.



Return type
*int*





See also


[`wx.GetOsVersion`](wx.functions.html#wx.GetOsVersion "wx.GetOsVersion") , [`CheckOSVersion`](#wx.PlatformInformation.CheckOSVersion "wx.PlatformInformation.CheckOSVersion")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetOSMicroVersion(self) -> int:
        """ 

`GetOSMicroVersion`(*self*)[¶](#wx.PlatformInformation.GetOSMicroVersion "Permalink to this definition")
Returns the run-time micro version of the OS associated with this *PlatformInfo* instance.



Return type
*int*





New in version 4.1/wxWidgets-3.1.1.




See also


[`wx.GetOsVersion`](wx.functions.html#wx.GetOsVersion "wx.GetOsVersion") , [`CheckOSVersion`](#wx.PlatformInformation.CheckOSVersion "wx.PlatformInformation.CheckOSVersion")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetOSMinorVersion(self) -> int:
        """ 

`GetOSMinorVersion`(*self*)[¶](#wx.PlatformInformation.GetOSMinorVersion "Permalink to this definition")
Returns the run-time minor version of the OS associated with this *PlatformInfo* instance.



Return type
*int*





See also


[`wx.GetOsVersion`](wx.functions.html#wx.GetOsVersion "wx.GetOsVersion") , [`CheckOSVersion`](#wx.PlatformInformation.CheckOSVersion "wx.PlatformInformation.CheckOSVersion")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetOperatingSystemDescription(self) -> str:
        """ 

`GetOperatingSystemDescription`(*self*)[¶](#wx.PlatformInformation.GetOperatingSystemDescription "Permalink to this definition")
Returns the description of the operating system of this *PlatformInfo* instance.


See [`wx.GetOsDescription`](wx.functions.html#wx.GetOsDescription "wx.GetOsDescription") for more info.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    @staticmethod
    def GetOperatingSystemDirectory() -> str:
        """ 

*static* `GetOperatingSystemDirectory`()[¶](#wx.PlatformInformation.GetOperatingSystemDirectory "Permalink to this definition")
Returns the operating system directory.


See `GetOSDirectory` for more info.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetOperatingSystemFamilyName(self) -> str:
        """ 

`GetOperatingSystemFamilyName`(*self*)[¶](#wx.PlatformInformation.GetOperatingSystemFamilyName "Permalink to this definition")
Returns the operating system family name of the OS associated with this *PlatformInfo* instance.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetOperatingSystemId(self) -> 'OperatingSystemId':
        """ 

`GetOperatingSystemId`(*self*)[¶](#wx.PlatformInformation.GetOperatingSystemId "Permalink to this definition")
Returns the operating system `ID` of this *PlatformInfo* instance.


See [`wx.GetOsVersion`](wx.functions.html#wx.GetOsVersion "wx.GetOsVersion") for more info.



Return type
 [wx.OperatingSystemId](wx.OperatingSystemId.enumeration.html#wx-operatingsystemid)






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetOperatingSystemIdName(self) -> str:
        """ 

`GetOperatingSystemIdName`(*self*)[¶](#wx.PlatformInformation.GetOperatingSystemIdName "Permalink to this definition")
Returns the operating system name of the OS associated with this *PlatformInfo* instance.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetPortId(self) -> 'PortId':
        """ 

`GetPortId`(*self*)[¶](#wx.PlatformInformation.GetPortId "Permalink to this definition")
Returns the wxWidgets port `ID` associated with this *PlatformInfo* instance.



Return type
 [wx.PortId](wx.PortId.enumeration.html#wx-portid)






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetPortIdName(self) -> str:
        """ 

`GetPortIdName`(*self*)[¶](#wx.PlatformInformation.GetPortIdName "Permalink to this definition")
Returns the name of the wxWidgets port `ID` associated with this *PlatformInfo* instance.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetPortIdShortName(self) -> str:
        """ 

`GetPortIdShortName`(*self*)[¶](#wx.PlatformInformation.GetPortIdShortName "Permalink to this definition")
Returns the short name of the wxWidgets port `ID` associated with this *PlatformInfo* instance.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetToolkitMajorVersion(self) -> int:
        """ 

`GetToolkitMajorVersion`(*self*)[¶](#wx.PlatformInformation.GetToolkitMajorVersion "Permalink to this definition")
Returns the run-time major version of the toolkit associated with this *PlatformInfo* instance.


Note that if [`GetPortId`](#wx.PlatformInformation.GetPortId "wx.PlatformInformation.GetPortId") returns `PORT_BASE` , then this value is zero (unless externally modified with [`SetToolkitVersion`](#wx.PlatformInformation.SetToolkitVersion "wx.PlatformInformation.SetToolkitVersion") ); that is, no native toolkit is in use. See [`wx.AppTraits.GetToolkitVersion`](wx.AppTraits.html#wx.AppTraits.GetToolkitVersion "wx.AppTraits.GetToolkitVersion") for more info.



Return type
*int*





See also


[`CheckToolkitVersion`](#wx.PlatformInformation.CheckToolkitVersion "wx.PlatformInformation.CheckToolkitVersion")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetToolkitMicroVersion(self) -> int:
        """ 

`GetToolkitMicroVersion`(*self*)[¶](#wx.PlatformInformation.GetToolkitMicroVersion "Permalink to this definition")
Returns the run-time micro version of the toolkit associated with this *PlatformInfo* instance.


Note that if [`GetPortId`](#wx.PlatformInformation.GetPortId "wx.PlatformInformation.GetPortId") returns `PORT_BASE` , then this value is zero (unless externally modified with [`SetToolkitVersion`](#wx.PlatformInformation.SetToolkitVersion "wx.PlatformInformation.SetToolkitVersion") ); that is, no native toolkit is in use. See [`wx.AppTraits.GetToolkitVersion`](wx.AppTraits.html#wx.AppTraits.GetToolkitVersion "wx.AppTraits.GetToolkitVersion") for more info.



Return type
*int*





New in version 4.1/wxWidgets-3.1.1.




See also


[`CheckToolkitVersion`](#wx.PlatformInformation.CheckToolkitVersion "wx.PlatformInformation.CheckToolkitVersion")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def GetToolkitMinorVersion(self) -> int:
        """ 

`GetToolkitMinorVersion`(*self*)[¶](#wx.PlatformInformation.GetToolkitMinorVersion "Permalink to this definition")
Returns the run-time minor version of the toolkit associated with this *PlatformInfo* instance.


Note that if [`GetPortId`](#wx.PlatformInformation.GetPortId "wx.PlatformInformation.GetPortId") returns `PORT_BASE` , then this value is zero (unless externally modified with [`SetToolkitVersion`](#wx.PlatformInformation.SetToolkitVersion "wx.PlatformInformation.SetToolkitVersion") ); that is, no native toolkit is in use. See [`wx.AppTraits.GetToolkitVersion`](wx.AppTraits.html#wx.AppTraits.GetToolkitVersion "wx.AppTraits.GetToolkitVersion") for more info.



Return type
*int*





See also


[`CheckToolkitVersion`](#wx.PlatformInformation.CheckToolkitVersion "wx.PlatformInformation.CheckToolkitVersion")





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.PlatformInformation.IsOk "Permalink to this definition")
Returns `True` if this instance is fully initialized with valid values.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def IsUsingUniversalWidgets(self) -> bool:
        """ 

`IsUsingUniversalWidgets`(*self*)[¶](#wx.PlatformInformation.IsUsingUniversalWidgets "Permalink to this definition")
Returns `True` if this *PlatformInfo* describes wxUniversal build.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetArchitecture(self, n: Architecture) -> None:
        """ 

`SetArchitecture`(*self*, *n*)[¶](#wx.PlatformInformation.SetArchitecture "Permalink to this definition")

Parameters
**n** ([*Architecture*](wx.Architecture.enumeration.html "Architecture")) – 





Deprecated


Use [`SetBitness`](#wx.PlatformInformation.SetBitness "wx.PlatformInformation.SetBitness") instead.





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetBitness(self, n: Bitness) -> None:
        """ 

`SetBitness`(*self*, *n*)[¶](#wx.PlatformInformation.SetBitness "Permalink to this definition")
Sets the architecture bitness enum value associated with this *PlatformInfo* instance.



Parameters
**n** ([*Bitness*](wx.Bitness.enumeration.html "Bitness")) – 





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetDesktopEnvironment(self, de: str) -> None:
        """ 

`SetDesktopEnvironment`(*self*, *de*)[¶](#wx.PlatformInformation.SetDesktopEnvironment "Permalink to this definition")
Sets the desktop environment associated with this *PlatformInfo* instance.



Parameters
**de** (*string*) – 






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetEndianness(self, n: Endianness) -> None:
        """ 

`SetEndianness`(*self*, *n*)[¶](#wx.PlatformInformation.SetEndianness "Permalink to this definition")
Sets the endianness enum value associated with this *PlatformInfo* instance.



Parameters
**n** ([*Endianness*](wx.Endianness.enumeration.html "Endianness")) – 






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetLinuxDistributionInfo(self, di: 'LinuxDistributionInfo') -> None:
        """ 

`SetLinuxDistributionInfo`(*self*, *di*)[¶](#wx.PlatformInformation.SetLinuxDistributionInfo "Permalink to this definition")
Sets the linux distribution info associated with this *PlatformInfo* instance.



Parameters
**di** ([*wx.LinuxDistributionInfo*](wx.LinuxDistributionInfo.html#wx.LinuxDistributionInfo "wx.LinuxDistributionInfo")) – 






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetOSVersion(self, major, minor, micro=0) -> None:
        """ 

`SetOSVersion`(*self*, *major*, *minor*, *micro=0*)[¶](#wx.PlatformInformation.SetOSVersion "Permalink to this definition")
Sets the version of the operating system associated with this *PlatformInfo* instance.



Parameters
* **major** (*int*) –
* **minor** (*int*) –
* **micro** (*int*) –






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetOperatingSystemDescription(self, desc: str) -> None:
        """ 

`SetOperatingSystemDescription`(*self*, *desc*)[¶](#wx.PlatformInformation.SetOperatingSystemDescription "Permalink to this definition")
Sets the operating system description associated with this *PlatformInfo* instance.



Parameters
**desc** (*string*) – 






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetOperatingSystemId(self, n: OperatingSystemId) -> None:
        """ 

`SetOperatingSystemId`(*self*, *n*)[¶](#wx.PlatformInformation.SetOperatingSystemId "Permalink to this definition")
Sets the operating system associated with this *PlatformInfo* instance.



Parameters
**n** ([*OperatingSystemId*](wx.OperatingSystemId.enumeration.html "OperatingSystemId")) – 






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetPortId(self, n: PortId) -> None:
        """ 

`SetPortId`(*self*, *n*)[¶](#wx.PlatformInformation.SetPortId "Permalink to this definition")
Sets the wxWidgets port `ID` associated with this *PlatformInfo* instance.



Parameters
**n** ([*PortId*](wx.PortId.enumeration.html "PortId")) – 






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def SetToolkitVersion(self, major, minor, micro=0) -> None:
        """ 

`SetToolkitVersion`(*self*, *major*, *minor*, *micro=0*)[¶](#wx.PlatformInformation.SetToolkitVersion "Permalink to this definition")
Sets the version of the toolkit associated with this *PlatformInfo* instance.



Parameters
* **major** (*int*) –
* **minor** (*int*) –
* **micro** (*int*) –






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.PlatformInformation.__ne__ "Permalink to this definition")
Inequality operator.


Tests all class’ internal variables.



Parameters
**t** (*PlatformInfo*) – 






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.PlatformInformation.__eq__ "Permalink to this definition")
Equality operator.


Tests all class’ internal variables.



Parameters
**t** (*PlatformInfo*) – 






            Source: https://docs.wxpython.org/wx.PlatformInformation.html
        """

    ArchName: str  # `ArchName`[¶](#wx.PlatformInformation.ArchName "Permalink to this definition")See [`GetArchName`](#wx.PlatformInformation.GetArchName "wx.PlatformInformation.GetArchName")
    Architecture: '_Architecture'  # `Architecture`[¶](#wx.PlatformInformation.Architecture "Permalink to this definition")See [`GetArchitecture`](#wx.PlatformInformation.GetArchitecture "wx.PlatformInformation.GetArchitecture") and [`SetArchitecture`](#wx.PlatformInformation.SetArchitecture "wx.PlatformInformation.SetArchitecture")
    Bitness: '_Bitness'  # `Bitness`[¶](#wx.PlatformInformation.Bitness "Permalink to this definition")See [`GetBitness`](#wx.PlatformInformation.GetBitness "wx.PlatformInformation.GetBitness") and [`SetBitness`](#wx.PlatformInformation.SetBitness "wx.PlatformInformation.SetBitness")
    BitnessName: str  # `BitnessName`[¶](#wx.PlatformInformation.BitnessName "Permalink to this definition")See [`GetBitnessName`](#wx.PlatformInformation.GetBitnessName "wx.PlatformInformation.GetBitnessName")
    CpuArchitectureName: str  # `CpuArchitectureName`[¶](#wx.PlatformInformation.CpuArchitectureName "Permalink to this definition")See [`GetCpuArchitectureName`](#wx.PlatformInformation.GetCpuArchitectureName "wx.PlatformInformation.GetCpuArchitectureName")
    DesktopEnvironment: str  # `DesktopEnvironment`[¶](#wx.PlatformInformation.DesktopEnvironment "Permalink to this definition")See [`GetDesktopEnvironment`](#wx.PlatformInformation.GetDesktopEnvironment "wx.PlatformInformation.GetDesktopEnvironment") and [`SetDesktopEnvironment`](#wx.PlatformInformation.SetDesktopEnvironment "wx.PlatformInformation.SetDesktopEnvironment")
    Endianness: '_Endianness'  # `Endianness`[¶](#wx.PlatformInformation.Endianness "Permalink to this definition")See [`GetEndianness`](#wx.PlatformInformation.GetEndianness "wx.PlatformInformation.GetEndianness") and [`SetEndianness`](#wx.PlatformInformation.SetEndianness "wx.PlatformInformation.SetEndianness")
    EndiannessName: str  # `EndiannessName`[¶](#wx.PlatformInformation.EndiannessName "Permalink to this definition")See [`GetEndiannessName`](#wx.PlatformInformation.GetEndiannessName "wx.PlatformInformation.GetEndiannessName")
    LinuxDistributionInfo: '_LinuxDistributionInfo'  # `LinuxDistributionInfo`[¶](#wx.PlatformInformation.LinuxDistributionInfo "Permalink to this definition")See [`GetLinuxDistributionInfo`](#wx.PlatformInformation.GetLinuxDistributionInfo "wx.PlatformInformation.GetLinuxDistributionInfo") and [`SetLinuxDistributionInfo`](#wx.PlatformInformation.SetLinuxDistributionInfo "wx.PlatformInformation.SetLinuxDistributionInfo")
    NativeCpuArchitectureName: str  # `NativeCpuArchitectureName`[¶](#wx.PlatformInformation.NativeCpuArchitectureName "Permalink to this definition")See [`GetNativeCpuArchitectureName`](#wx.PlatformInformation.GetNativeCpuArchitectureName "wx.PlatformInformation.GetNativeCpuArchitectureName")
    OSMajorVersion: int  # `OSMajorVersion`[¶](#wx.PlatformInformation.OSMajorVersion "Permalink to this definition")See [`GetOSMajorVersion`](#wx.PlatformInformation.GetOSMajorVersion "wx.PlatformInformation.GetOSMajorVersion")
    OSMicroVersion: int  # `OSMicroVersion`[¶](#wx.PlatformInformation.OSMicroVersion "Permalink to this definition")See [`GetOSMicroVersion`](#wx.PlatformInformation.GetOSMicroVersion "wx.PlatformInformation.GetOSMicroVersion")
    OSMinorVersion: int  # `OSMinorVersion`[¶](#wx.PlatformInformation.OSMinorVersion "Permalink to this definition")See [`GetOSMinorVersion`](#wx.PlatformInformation.GetOSMinorVersion "wx.PlatformInformation.GetOSMinorVersion")
    OperatingSystemDescription: str  # `OperatingSystemDescription`[¶](#wx.PlatformInformation.OperatingSystemDescription "Permalink to this definition")See [`GetOperatingSystemDescription`](#wx.PlatformInformation.GetOperatingSystemDescription "wx.PlatformInformation.GetOperatingSystemDescription") and [`SetOperatingSystemDescription`](#wx.PlatformInformation.SetOperatingSystemDescription "wx.PlatformInformation.SetOperatingSystemDescription")
    OperatingSystemFamilyName: str  # `OperatingSystemFamilyName`[¶](#wx.PlatformInformation.OperatingSystemFamilyName "Permalink to this definition")See [`GetOperatingSystemFamilyName`](#wx.PlatformInformation.GetOperatingSystemFamilyName "wx.PlatformInformation.GetOperatingSystemFamilyName")
    OperatingSystemId: '_OperatingSystemId'  # `OperatingSystemId`[¶](#wx.PlatformInformation.OperatingSystemId "Permalink to this definition")See [`GetOperatingSystemId`](#wx.PlatformInformation.GetOperatingSystemId "wx.PlatformInformation.GetOperatingSystemId") and [`SetOperatingSystemId`](#wx.PlatformInformation.SetOperatingSystemId "wx.PlatformInformation.SetOperatingSystemId")
    OperatingSystemIdName: str  # `OperatingSystemIdName`[¶](#wx.PlatformInformation.OperatingSystemIdName "Permalink to this definition")See [`GetOperatingSystemIdName`](#wx.PlatformInformation.GetOperatingSystemIdName "wx.PlatformInformation.GetOperatingSystemIdName")
    PortId: '_PortId'  # `PortId`[¶](#wx.PlatformInformation.PortId "Permalink to this definition")See [`GetPortId`](#wx.PlatformInformation.GetPortId "wx.PlatformInformation.GetPortId") and [`SetPortId`](#wx.PlatformInformation.SetPortId "wx.PlatformInformation.SetPortId")
    PortIdName: str  # `PortIdName`[¶](#wx.PlatformInformation.PortIdName "Permalink to this definition")See [`GetPortIdName`](#wx.PlatformInformation.GetPortIdName "wx.PlatformInformation.GetPortIdName")
    PortIdShortName: str  # `PortIdShortName`[¶](#wx.PlatformInformation.PortIdShortName "Permalink to this definition")See [`GetPortIdShortName`](#wx.PlatformInformation.GetPortIdShortName "wx.PlatformInformation.GetPortIdShortName")
    ToolkitMajorVersion: int  # `ToolkitMajorVersion`[¶](#wx.PlatformInformation.ToolkitMajorVersion "Permalink to this definition")See [`GetToolkitMajorVersion`](#wx.PlatformInformation.GetToolkitMajorVersion "wx.PlatformInformation.GetToolkitMajorVersion")
    ToolkitMicroVersion: int  # `ToolkitMicroVersion`[¶](#wx.PlatformInformation.ToolkitMicroVersion "Permalink to this definition")See [`GetToolkitMicroVersion`](#wx.PlatformInformation.GetToolkitMicroVersion "wx.PlatformInformation.GetToolkitMicroVersion")
    ToolkitMinorVersion: int  # `ToolkitMinorVersion`[¶](#wx.PlatformInformation.ToolkitMinorVersion "Permalink to this definition")See [`GetToolkitMinorVersion`](#wx.PlatformInformation.GetToolkitMinorVersion "wx.PlatformInformation.GetToolkitMinorVersion")



class PNGHandler(ImageHandler):
    """ **Possible constructors**:



```
PNGHandler()

```


This is the image handler for the `PNG` format.


  


        Source: https://docs.wxpython.org/wx.PNGHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.PNGHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.PNGHandler](#wx-pnghandler).




            Source: https://docs.wxpython.org/wx.PNGHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.PNGHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PNGHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.PNGHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.PNGHandler.SaveFile "wx.PNGHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.PNGHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.PNGHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.PNGHandler.LoadFile "wx.PNGHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.PNGHandler.html
        """



class PNMHandler(ImageHandler):
    """ **Possible constructors**:



```
PNMHandler()

```


This is the image handler for the `PNM` format.


  


        Source: https://docs.wxpython.org/wx.PNMHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.PNMHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.PNMHandler](#wx-pnmhandler).




            Source: https://docs.wxpython.org/wx.PNMHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.PNMHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PNMHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.PNMHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.PNMHandler.SaveFile "wx.PNMHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.PNMHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.PNMHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.PNMHandler.LoadFile "wx.PNMHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.PNMHandler.html
        """



class Point:
    """ **Possible constructors**:



```
Point()

Point(x, y)

Point(pt)

```


A Point is a useful data structure for graphics operations.


  


        Source: https://docs.wxpython.org/wx.Point.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Point.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Constructs a point.


Initializes the internal x and y coordinates to zero.




---

  



**\_\_init\_\_** *(self, x, y)*


Initializes the point object with the given *x* and *y* coordinates.



Parameters
* **x** (*int*) –
* **y** (*int*) –






---

  



**\_\_init\_\_** *(self, pt)*


Converts the given  [wx.RealPoint](wx.RealPoint.html#wx-realpoint) (with floating point coordinates) to a  [wx.Point](#wx-point) instance.


Notice that this truncates the floating point values of *pt* components, if you want to round them instead you need to do it manually, e.g.



```
rp = wx.RealPoint(10.3, 20.8)
p = wx.Point(int(round(rp.x)), int(round(rp.y)))

```



Parameters
**pt** ([*wx.RealPoint*](wx.RealPoint.html#wx.RealPoint "wx.RealPoint")) – 






---

  





            Source: https://docs.wxpython.org/wx.Point.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.Point.Get "Permalink to this definition")
Return the x and y properties as a tuple.



Return type
*tuple*



Returns
( *x*, *y* )






            Source: https://docs.wxpython.org/wx.Point.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.Point.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.Point` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.Point`
with a simple statement like this: `obj = wx.Point(imObj)`.




            Source: https://docs.wxpython.org/wx.Point.html
        """

    def IsFullySpecified(self) -> bool:
        """ 

`IsFullySpecified`(*self*)[¶](#wx.Point.IsFullySpecified "Permalink to this definition")
Returns `True` if neither of the point components is equal to DefaultCoord.


This method is typically used before calling [`SetDefaults`](#wx.Point.SetDefaults "wx.Point.SetDefaults") .



Return type
*bool*





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.Point.html
        """

    def SetDefaults(self, pt: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetDefaults`(*self*, *pt*)[¶](#wx.Point.SetDefaults "Permalink to this definition")
Combine this object with another one replacing the uninitialized values.


It is typically used like this:



```
if not pos.IsFullySpecified():

    pos.SetDefaults(GetDefaultPosition())

```



Parameters
**pt** ([*wx.Point*](#wx.Point "wx.Point")) – 





New in version 2.9.2.




See also


[`IsFullySpecified`](#wx.Point.IsFullySpecified "wx.Point.IsFullySpecified")





            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*, *other*)[¶](#wx.Point.__eq__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.Point.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.Point.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*, *other*)[¶](#wx.Point.__ne__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.Point.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.Point.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.Point.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.Point.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __iadd__(self, *args, **kw) -> None:
        """ 

`__iadd__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Point.__iadd__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_iadd\_\_** *(self)*



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**\_\_iadd\_\_** *(self)*



Parameters
**pt** ([*wx.Point*](#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.Point.html
        """

    def __isub__(self, *args, **kw) -> None:
        """ 

`__isub__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Point.__isub__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_isub\_\_** *(self)*



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**\_\_isub\_\_** *(self)*



Parameters
**pt** ([*wx.Point*](#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.Point.html
        """

    IM: None  # `IM`[¶](#wx.Point.IM "Permalink to this definition")See [`GetIM`](#wx.Point.GetIM "wx.Point.GetIM")
    x: Any  # `x`[¶](#wx.Point.x "Permalink to this definition")A public C++ attribute of type `int`. x member.
    y: Any  # `y`[¶](#wx.Point.y "Permalink to this definition")A public C++ attribute of type `int`. y member.



class Point2D:
    """ **Possible constructors**:



```
Point2DDouble()

Point2DDouble(x, y)

Point2DDouble(pt)

Point2DDouble(pt)

```


  


        Source: https://docs.wxpython.org/wx.Point2D.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Point2D.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, x, y)*



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –






---

  



**\_\_init\_\_** *(self, pt)*



Parameters
**pt** (*Point2DDouble*) – 






---

  



**\_\_init\_\_** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def Get(self) -> Any:
        """ 

`Get`(*self*)[¶](#wx.Point2D.Get "Permalink to this definition")

> Get() . (x,y)
> 
> 
> Return the x and y properties as a tuple.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetCrossProduct(self, vec: Point2DDouble) -> 'Double':
        """ 

`GetCrossProduct`(*self*, *vec*)[¶](#wx.Point2D.GetCrossProduct "Permalink to this definition")

Parameters
**vec** (*Point2DDouble*) – 



Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetDistance(self, pt: Point2DDouble) -> 'Double':
        """ 

`GetDistance`(*self*, *pt*)[¶](#wx.Point2D.GetDistance "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 



Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetDistanceSquare(self, pt: Point2DDouble) -> 'Double':
        """ 

`GetDistanceSquare`(*self*, *pt*)[¶](#wx.Point2D.GetDistanceSquare "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 



Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetDotProduct(self, vec: Point2DDouble) -> 'Double':
        """ 

`GetDotProduct`(*self*, *vec*)[¶](#wx.Point2D.GetDotProduct "Permalink to this definition")

Parameters
**vec** (*Point2DDouble*) – 



Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetFloor(self) -> tuple:
        """ 

`GetFloor`(*self*)[¶](#wx.Point2D.GetFloor "Permalink to this definition")

Return type
*tuple*



Returns
( *x*, *y* )






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.Point2D.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.Point2D` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.Point2D`
with a simple statement like this: `obj = wx.Point2D(imObj)`.




            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetRounded(self) -> tuple:
        """ 

`GetRounded`(*self*)[¶](#wx.Point2D.GetRounded "Permalink to this definition")

Return type
*tuple*



Returns
( *x*, *y* )






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetVectorAngle(self) -> 'Double':
        """ 

`GetVectorAngle`(*self*)[¶](#wx.Point2D.GetVectorAngle "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def GetVectorLength(self) -> 'Double':
        """ 

`GetVectorLength`(*self*)[¶](#wx.Point2D.GetVectorLength "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def Normalize(self) -> None:
        """ 

`Normalize`(*self*)[¶](#wx.Point2D.Normalize "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def SetVectorAngle(self, degrees: 'Double') -> None:
        """ 

`SetVectorAngle`(*self*, *degrees*)[¶](#wx.Point2D.SetVectorAngle "Permalink to this definition")

Parameters
**degrees** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def SetVectorLength(self, length: 'Double') -> None:
        """ 

`SetVectorLength`(*self*, *length*)[¶](#wx.Point2D.SetVectorLength "Permalink to this definition")

Parameters
**length** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __bool__(self) -> None:
        """ 

`__bool__`(*self*)[¶](#wx.Point2D.__bool__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.Point2D.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.Point2D.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.Point2D.__nonzero__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.Point2D.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.Point2D.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.Point2D.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.Point2D.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.Point2D.__ne__ "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __imul__(self) -> None:
        """ 

`__imul__`(*self*)[¶](#wx.Point2D.__imul__ "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __iadd__(self) -> None:
        """ 

`__iadd__`(*self*)[¶](#wx.Point2D.__iadd__ "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __sub__(self) -> None:
        """ 

`__sub__`(*self*)[¶](#wx.Point2D.__sub__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __isub__(self) -> None:
        """ 

`__isub__`(*self*)[¶](#wx.Point2D.__isub__ "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __idiv__(self) -> None:
        """ 

`__idiv__`(*self*)[¶](#wx.Point2D.__idiv__ "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.Point2D.__eq__ "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Point2D.html
        """

    IM: None  # `IM`[¶](#wx.Point2D.IM "Permalink to this definition")See [`GetIM`](#wx.Point2D.GetIM "wx.Point2D.GetIM")
    VectorAngle: 'Double'  # `VectorAngle`[¶](#wx.Point2D.VectorAngle "Permalink to this definition")See [`GetVectorAngle`](#wx.Point2D.GetVectorAngle "wx.Point2D.GetVectorAngle") and [`SetVectorAngle`](#wx.Point2D.SetVectorAngle "wx.Point2D.SetVectorAngle")
    VectorLength: 'Double'  # `VectorLength`[¶](#wx.Point2D.VectorLength "Permalink to this definition")See [`GetVectorLength`](#wx.Point2D.GetVectorLength "wx.Point2D.GetVectorLength") and [`SetVectorLength`](#wx.Point2D.SetVectorLength "wx.Point2D.SetVectorLength")
    m_x: Any  # `m_x`[¶](#wx.Point2D.m_x "Permalink to this definition")A public C++ attribute of type *Double* .
    m_y: Any  # `m_y`[¶](#wx.Point2D.m_y "Permalink to this definition")A public C++ attribute of type *Double* .



class PopupTransientWindow(PopupWindow):
    """ **Possible constructors**:



```
PopupTransientWindow()

PopupTransientWindow(parent, flags=BORDER_NONE)

```


A PopupWindow which disappears automatically when the user clicks
mouse outside it or if it loses focus in any other way.


  


        Source: https://docs.wxpython.org/wx.PopupTransientWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PopupTransientWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, flags=BORDER\_NONE)*


Constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **flags** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.PopupTransientWindow.html
        """

    def Dismiss(self) -> None:
        """ 

`Dismiss`(*self*)[¶](#wx.PopupTransientWindow.Dismiss "Permalink to this definition")
Hide the window.




            Source: https://docs.wxpython.org/wx.PopupTransientWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.PopupTransientWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.PopupTransientWindow.html
        """

    def OnDismiss(self) -> None:
        """ 

`OnDismiss`(*self*)[¶](#wx.PopupTransientWindow.OnDismiss "Permalink to this definition")
This is called when the popup is disappeared because of anything else but direct call to [`Dismiss`](#wx.PopupTransientWindow.Dismiss "wx.PopupTransientWindow.Dismiss") .




            Source: https://docs.wxpython.org/wx.PopupTransientWindow.html
        """

    def Popup(self, focus: Optional['Window']=None) -> None:
        """ 

`Popup`(*self*, *focus=None*)[¶](#wx.PopupTransientWindow.Popup "Permalink to this definition")
Popup the window (this will show it too).


If *focus* is not `None`, it will be kept focused while this window is shown if supported by the current platform, otherwise the popup itself will receive focus. In any case, the popup will disappear automatically if it loses focus because of a user action.



Parameters
**focus** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 





See also


[`Dismiss`](#wx.PopupTransientWindow.Dismiss "wx.PopupTransientWindow.Dismiss")





            Source: https://docs.wxpython.org/wx.PopupTransientWindow.html
        """

    def ProcessLeftDown(self, event: 'MouseEvent') -> bool:
        """ 

`ProcessLeftDown`(*self*, *event*)[¶](#wx.PopupTransientWindow.ProcessLeftDown "Permalink to this definition")
Called when a mouse is pressed while the popup is shown.


Return `True` from here to prevent its normal processing by the popup (which consists in dismissing it if the mouse is clicked outside it).



Parameters
**event** ([*wx.MouseEvent*](wx.MouseEvent.html#wx.MouseEvent "wx.MouseEvent")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PopupTransientWindow.html
        """



class PopupWindow(NonOwnedWindow):
    """ **Possible constructors**:



```
PopupWindow()

PopupWindow(parent, flags=BORDER_NONE)

```


A special kind of top level window used for popup menus, combobox
popups and such.


  


        Source: https://docs.wxpython.org/wx.PopupWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PopupWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, flags=BORDER\_NONE)*


Constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **flags** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.PopupWindow.html
        """

    def Create(self, parent, flags=BORDER_NONE) -> bool:
        """ 

`Create`(*self*, *parent*, *flags=BORDER\_NONE*)[¶](#wx.PopupWindow.Create "Permalink to this definition")
Create method for two-step creation.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **flags** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PopupWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.PopupWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.PopupWindow.html
        """

    def Position(self, ptOrigin, sizePopup) -> None:
        """ 

`Position`(*self*, *ptOrigin*, *sizePopup*)[¶](#wx.PopupWindow.Position "Permalink to this definition")
Move the popup window to the right position, i.e. such that it is entirely visible.


The popup is positioned at ptOrigin + size if it opens below and to the right (default), at ptOrigin - sizePopup if it opens above and to the left etc.



Parameters
* **ptOrigin** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Must be given in screen coordinates!
* **sizePopup** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The size of the popup window






            Source: https://docs.wxpython.org/wx.PopupWindow.html
        """



PU_CONTAINS_CONTROLS: int  # By default in wxMSW, a popup window will not take focus from its parent window. However many standard controls, including common ones such as   wx.TextCtrl, need focus to function correctly and will not work when placed on a default popup. This flag can be used to make the popup take focus and let all controls work but at the price of not allowing the parent window to keep focus while the popup is shown, which can also be sometimes desirable. This style is currently only implemented in MSW and simply does nothing under the other platforms (it’s new since wxWidgets 3.1.3). ^^

class Position:
    """ **Possible constructors**:



```
Position()

Position(row, col)

```


This class represents the position of an item in any kind of grid of
rows and columns such as GridBagSizer, or HVScrolledWindow.


  


        Source: https://docs.wxpython.org/wx.Position.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Position.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Construct a new  [wx.Position](#wx-position), setting the row and column to the default value of (0, 0).




---

  



**\_\_init\_\_** *(self, row, col)*


Construct a new  [wx.Position](#wx-position), setting the row and column to the value of (*row*, *col*).



Parameters
* **row** (*int*) –
* **col** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Position.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.Position.Get "Permalink to this definition")
Return the row and col properties as a tuple.



Return type
*tuple*



Returns
( *row*, *col* )






            Source: https://docs.wxpython.org/wx.Position.html
        """

    def GetCol(self) -> int:
        """ 

`GetCol`(*self*)[¶](#wx.Position.GetCol "Permalink to this definition")
A synonym for [`GetColumn`](#wx.Position.GetColumn "wx.Position.GetColumn") .



Return type
*int*






            Source: https://docs.wxpython.org/wx.Position.html
        """

    def GetColumn(self) -> int:
        """ 

`GetColumn`(*self*)[¶](#wx.Position.GetColumn "Permalink to this definition")
Get the current row value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Position.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.Position.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.Position` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.Position`
with a simple statement like this: `obj = wx.Position(imObj)`.




            Source: https://docs.wxpython.org/wx.Position.html
        """

    def GetRow(self) -> int:
        """ 

`GetRow`(*self*)[¶](#wx.Position.GetRow "Permalink to this definition")
Get the current row value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Position.html
        """

    def SetCol(self, column: int) -> None:
        """ 

`SetCol`(*self*, *column*)[¶](#wx.Position.SetCol "Permalink to this definition")
A synonym for [`SetColumn`](#wx.Position.SetColumn "wx.Position.SetColumn") .



Parameters
**column** (*int*) – 






            Source: https://docs.wxpython.org/wx.Position.html
        """

    def SetColumn(self, column: int) -> None:
        """ 

`SetColumn`(*self*, *column*)[¶](#wx.Position.SetColumn "Permalink to this definition")
Set a new column value.



Parameters
**column** (*int*) – 






            Source: https://docs.wxpython.org/wx.Position.html
        """

    def SetRow(self, row: int) -> None:
        """ 

`SetRow`(*self*, *row*)[¶](#wx.Position.SetRow "Permalink to this definition")
Set a new row value.



Parameters
**row** (*int*) – 






            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __bool__(self) -> None:
        """ 

`__bool__`(*self*)[¶](#wx.Position.__bool__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.Position.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.Position.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.Position.__nonzero__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.Position.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.Position.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.Position.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.Position.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.Position.__ne__ "Permalink to this definition")

Parameters
**pos** ([*wx.Position*](#wx.Position "wx.Position")) – 






            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __add__(self, *args, **kw) -> None:
        """ 

`__add__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Position.__add__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_add\_\_** *(self)*



Parameters
**pos** ([*wx.Position*](#wx.Position "wx.Position")) – 






---

  



**\_\_add\_\_** *(self)*



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  





            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __iadd__(self, *args, **kw) -> None:
        """ 

`__iadd__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Position.__iadd__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_iadd\_\_** *(self)*



Parameters
**pos** ([*wx.Position*](#wx.Position "wx.Position")) – 






---

  



**\_\_iadd\_\_** *(self)*



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  





            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __sub__(self, *args, **kw) -> None:
        """ 

`__sub__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Position.__sub__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_sub\_\_** *(self)*



Parameters
**pos** ([*wx.Position*](#wx.Position "wx.Position")) – 






---

  



**\_\_sub\_\_** *(self)*



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  





            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __isub__(self, *args, **kw) -> None:
        """ 

`__isub__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Position.__isub__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_isub\_\_** *(self)*



Parameters
**pos** ([*wx.Position*](#wx.Position "wx.Position")) – 






---

  



**\_\_isub\_\_** *(self)*



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  





            Source: https://docs.wxpython.org/wx.Position.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.Position.__eq__ "Permalink to this definition")

Parameters
**pos** ([*wx.Position*](#wx.Position "wx.Position")) – 






            Source: https://docs.wxpython.org/wx.Position.html
        """

    Col: int  # `Col`[¶](#wx.Position.Col "Permalink to this definition")See [`GetCol`](#wx.Position.GetCol "wx.Position.GetCol") and [`SetCol`](#wx.Position.SetCol "wx.Position.SetCol")
    Column: int  # `Column`[¶](#wx.Position.Column "Permalink to this definition")See [`GetColumn`](#wx.Position.GetColumn "wx.Position.GetColumn") and [`SetColumn`](#wx.Position.SetColumn "wx.Position.SetColumn")
    IM: None  # `IM`[¶](#wx.Position.IM "Permalink to this definition")See [`GetIM`](#wx.Position.GetIM "wx.Position.GetIM")
    Row: int  # `Row`[¶](#wx.Position.Row "Permalink to this definition")See [`GetRow`](#wx.Position.GetRow "wx.Position.GetRow") and [`SetRow`](#wx.Position.SetRow "wx.Position.SetRow")



class PowerEvent(Event):
    """ **Possible constructors**:



```
PowerEvent()

PowerEvent(evtType)

```


The power events are generated when the system power state changes,
e.g.


  


        Source: https://docs.wxpython.org/wx.PowerEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PowerEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, evtType)*



Parameters
**evtType** (*wx.EventType*) – 






---

  





            Source: https://docs.wxpython.org/wx.PowerEvent.html
        """

    def IsVetoed(self) -> bool:
        """ 

`IsVetoed`(*self*)[¶](#wx.PowerEvent.IsVetoed "Permalink to this definition")
Returns whether Veto has been called.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PowerEvent.html
        """

    def Veto(self) -> None:
        """ 

`Veto`(*self*)[¶](#wx.PowerEvent.Veto "Permalink to this definition")
Call this to prevent suspend from taking place in `wxEVT_POWER_SUSPENDING` handler (it is ignored for all the others).




            Source: https://docs.wxpython.org/wx.PowerEvent.html
        """



EVT_POWER_SUSPENDING: int

EVT_POWER_SUSPENDED: int  # System is about to suspend: normally the application should quickly (i.e. without user intervention) close all the open files and network connections here, possibly remembering them to reopen them later when the system is resumed.

EVT_POWER_SUSPEND_CANCEL: int  # System suspension was cancelled because some application vetoed it.

EVT_POWER_RESUME: int  # System resumed from suspend: normally the application should restore the state in which it had been before the suspension. ^^

class PowerResource:
    """ Helper functions for acquiring and releasing the given power resource.


  


        Source: https://docs.wxpython.org/wx.PowerResource.html
    """
    @staticmethod
    def Acquire(kind, reason="") -> bool:
        """ 

*static* `Acquire`(*kind*, *reason=""*)[¶](#wx.PowerResource.Acquire "Permalink to this definition")
Acquire a power resource for the application.


If successful, the system will not automatically power of the screen or suspend until [`Release`](#wx.PowerResource.Release "wx.PowerResource.Release") is called.


Every call to Acquire **must** be matched by a corresponding call to [`Release`](#wx.PowerResource.Release "wx.PowerResource.Release") or the system will not suspend until the application ends, use  [wx.PowerResourceBlocker](wx.PowerResourceBlocker.html#wx-powerresourceblocker) to ensure that this happens.



Parameters
* **kind** ([*PowerResourceKind*](wx.PowerResourceKind.enumeration.html "PowerResourceKind")) – Power resource required, either `POWER_RESOURCE_SCREEN` or `POWER_RESOURCE_SYSTEM`.
* **reason** (*string*) – Optional reason may be specified which might be used on some platforms to inform the user what is preventing power saving. It should usually describe the operation requiring the resource and specifying it is strongly recommended.



Return type
*bool*



Returns
Returns `True` if the acquisition was successful.





See also


[`Release`](#wx.PowerResource.Release "wx.PowerResource.Release")





            Source: https://docs.wxpython.org/wx.PowerResource.html
        """

    @staticmethod
    def Release(kind: PowerResourceKind) -> None:
        """ 

*static* `Release`(*kind*)[¶](#wx.PowerResource.Release "Permalink to this definition")
Release a previously acquired power resource.


Release **must** be called for every [`Acquire`](#wx.PowerResource.Acquire "wx.PowerResource.Acquire") call made to restore normal power saving behaviour



Parameters
**kind** ([*PowerResourceKind*](wx.PowerResourceKind.enumeration.html "PowerResourceKind")) – Power resource to be released.





See also


[`Acquire`](#wx.PowerResource.Acquire "wx.PowerResource.Acquire")





            Source: https://docs.wxpython.org/wx.PowerResource.html
        """



class PowerResourceBlocker:
    """ **Possible constructors**:



```
PowerResourceBlocker(kind, reason="")

```


Helper `RAII` class ensuring that power resources are released.


  


        Source: https://docs.wxpython.org/wx.PowerResourceBlocker.html
    """
    def __init__(self, kind, reason="") -> None:
        """ 

`__init__`(*self*, *kind*, *reason=""*)[¶](#wx.PowerResourceBlocker.__init__ "Permalink to this definition")
Acquires the power resource.


Uses the same parameters as [`wx.PowerResource.Acquire`](wx.PowerResource.html#wx.PowerResource.Acquire "wx.PowerResource.Acquire") .



Parameters
* **kind** ([*PowerResourceKind*](wx.PowerResourceKind.enumeration.html "PowerResourceKind")) –
* **reason** (*string*) –






            Source: https://docs.wxpython.org/wx.PowerResourceBlocker.html
        """

    def IsInEffect(self) -> bool:
        """ 

`IsInEffect`(*self*)[¶](#wx.PowerResourceBlocker.IsInEffect "Permalink to this definition")
Returns whether the power resource could be acquired.


This can be used to inform the user that the application will not prevent automatic suspending.



Return type
*bool*





See also


[`wx.PowerResource.Acquire`](wx.PowerResource.html#wx.PowerResource.Acquire "wx.PowerResource.Acquire")





            Source: https://docs.wxpython.org/wx.PowerResourceBlocker.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.PowerResourceBlocker.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PowerResourceBlocker.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.PowerResourceBlocker.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PowerResourceBlocker.html
        """



class PreferencesEditor:
    """ **Possible constructors**:



```
PreferencesEditor(title="")

```


Manage preferences dialog.


  


        Source: https://docs.wxpython.org/wx.PreferencesEditor.html
    """
    def __init__(self, title: str="") -> None:
        """ 

`__init__`(*self*, *title=""*)[¶](#wx.PreferencesEditor.__init__ "Permalink to this definition")
Constructor.


Creates an empty editor, use [`AddPage`](#wx.PreferencesEditor.AddPage "wx.PreferencesEditor.AddPage") to add controls to it.



Parameters
**title** (*string*) – The title overriding the default title of the top level window used by the editor. It is recommended to not specify this parameter to use the native convention for the preferences dialogs instead.






            Source: https://docs.wxpython.org/wx.PreferencesEditor.html
        """

    def AddPage(self, page: 'PreferencesPage') -> None:
        """ 

`AddPage`(*self*, *page*)[¶](#wx.PreferencesEditor.AddPage "Permalink to this definition")
Add a new page to the editor.


The editor takes ownership of the page and will delete it from its destructor (but not sooner).



Parameters
**page** ([*wx.PreferencesPage*](wx.PreferencesPage.html#wx.PreferencesPage "wx.PreferencesPage")) – 





See also


 [wx.PreferencesPage](wx.PreferencesPage.html#wx-preferencespage),  [wx.StockPreferencesPage](wx.StockPreferencesPage.html#wx-stockpreferencespage)





            Source: https://docs.wxpython.org/wx.PreferencesEditor.html
        """

    def Dismiss(self) -> None:
        """ 

`Dismiss`(*self*)[¶](#wx.PreferencesEditor.Dismiss "Permalink to this definition")
Hide the currently shown dialog, if any.


This is typically called to dismiss the dialog if the object whose preferences it is editing was closed.




            Source: https://docs.wxpython.org/wx.PreferencesEditor.html
        """

    @staticmethod
    def ShouldApplyChangesImmediately() -> bool:
        """ 

*static* `ShouldApplyChangesImmediately`()[¶](#wx.PreferencesEditor.ShouldApplyChangesImmediately "Permalink to this definition")
Returns whether changes to values in preferences pages should be applied immediately or only when the user clicks the `wx.OK` button.


Currently, changes are applied immediately on macOS and GTK+.


The preprocessor macro `HAS_PREF_EDITOR_APPLY_IMMEDIATELY` is defined in this case as well.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PreferencesEditor.html
        """

    def Show(self, parent: 'Window') -> None:
        """ 

`Show`(*self*, *parent*)[¶](#wx.PreferencesEditor.Show "Permalink to this definition")
Show the preferences dialog or bring it to the top if it’s already shown.


Notice that this method may or may not block depending on the platform, i.e. depending on whether the dialog is modal or not.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window that invokes the preferences. Call [`Dismiss`](#wx.PreferencesEditor.Dismiss "wx.PreferencesEditor.Dismiss") before it’s destroyed.






            Source: https://docs.wxpython.org/wx.PreferencesEditor.html
        """

    @staticmethod
    def ShownModally() -> bool:
        """ 

*static* `ShownModally`()[¶](#wx.PreferencesEditor.ShownModally "Permalink to this definition")
Returns whether the preferences dialog is shown modally.


If this method returns `False`, as it currently does in wxGTK and wxOSX, [`Show`](#wx.PreferencesEditor.Show "wx.PreferencesEditor.Show") simply makes the dialog visible and returns immediately. If it returns `True`, as it does in wxMSW and under the other platforms, then the dialog is shown modally, i.e. [`Show`](#wx.PreferencesEditor.Show "wx.PreferencesEditor.Show") blocks until the user dismisses it.


Notice that it isn’t necessary to test the return value of this method to use this class normally, its interface is designed to work in both cases. However it can sometimes be necessary to call it if the program needs to handle modal dialogs specially, e.g. perhaps to block some periodic background update operation while a modal dialog is shown.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PreferencesEditor.html
        """



class PreferencesPage:
    """ **Possible constructors**:



```
PreferencesPage()

```


One page of preferences dialog.


  


        Source: https://docs.wxpython.org/wx.PreferencesPage.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.PreferencesPage.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.PreferencesPage.html
        """

    def CreateWindow(self, parent: 'Window') -> 'Window':
        """ 

`CreateWindow`(*self*, *parent*)[¶](#wx.PreferencesPage.CreateWindow "Permalink to this definition")
Create a window for this page.


The window will be placed into the preferences dialog in platform-specific manner. Depending on the platform, this method may be called before showing the preferences window, when switching to its tab or even more than once. Don’t make assumptions about the number of times or the specific time when it is called.


The caller takes ownership of the window.


 [wx.Panel](wx.Panel.html#wx-panel) is usually used, but doesn’t have to be.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window to use.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.PreferencesPage.html
        """

    def GetIcon(self) -> 'BitmapBundle':
        """ 

`GetIcon`(*self*)[¶](#wx.PreferencesPage.GetIcon "Permalink to this definition")
Return the icon to be used for the page on some platforms.


Currently only used on macOS.



Return type
 [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle)





New in version 4.1/wxWidgets-3.1.6.




Note


This method is not pure virtual, but must be implemented on the platforms that require it (macOS). The preprocessor symbol `HAS_PREF_EDITOR_ICONS` is defined if this method must be implemented.





            Source: https://docs.wxpython.org/wx.PreferencesPage.html
        """

    def GetLargeIcon(self) -> 'Bitmap':
        """ 

`GetLargeIcon`(*self*)[¶](#wx.PreferencesPage.GetLargeIcon "Permalink to this definition")

Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





Deprecated


This function is deprecated, override [`GetIcon`](#wx.PreferencesPage.GetIcon "wx.PreferencesPage.GetIcon") instead.





            Source: https://docs.wxpython.org/wx.PreferencesPage.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.PreferencesPage.GetName "Permalink to this definition")
Return name of the page.


The name is used for notebook tab’s label, icon label etc., depending on the platform.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PreferencesPage.html
        """

    Icon: 'BitmapBundle'  # `Icon`[¶](#wx.PreferencesPage.Icon "Permalink to this definition")See [`GetIcon`](#wx.PreferencesPage.GetIcon "wx.PreferencesPage.GetIcon")
    LargeIcon: 'Bitmap'  # `LargeIcon`[¶](#wx.PreferencesPage.LargeIcon "Permalink to this definition")See [`GetLargeIcon`](#wx.PreferencesPage.GetLargeIcon "wx.PreferencesPage.GetLargeIcon")
    Name: str  # `Name`[¶](#wx.PreferencesPage.Name "Permalink to this definition")See [`GetName`](#wx.PreferencesPage.GetName "wx.PreferencesPage.GetName")



class PressAndTapEvent(GestureEvent):
    """ **Possible constructors**:



```
PressAndTapEvent(windid=0)

```


This event is generated when the user press the surface with one
finger and taps with another.


  


        Source: https://docs.wxpython.org/wx.PressAndTapEvent.html
    """
    def __init__(self, windid: int=0) -> None:
        """ 

`__init__`(*self*, *windid=0*)[¶](#wx.PressAndTapEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**windid** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.PressAndTapEvent.html
        """



EVT_PRESS_AND_TAP: int  # Process a  wxEVT_PRESS_AND_TAP . ^^

class PreviewCanvas(Scrolled):
    """ **Possible constructors**:



```
PreviewCanvas(preview, parent, pos=DefaultPosition, size=DefaultSize,
              style=0, name="canvas")

```


A preview canvas is the default canvas used by the print preview
system to display the preview.


  


        Source: https://docs.wxpython.org/wx.PreviewCanvas.html
    """
    def __init__(self, preview, parent, pos=DefaultPosition, size=DefaultSize, style=0, name="canvas") -> None:
        """ 

`__init__`(*self*, *preview*, *parent*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name="canvas"*)[¶](#wx.PreviewCanvas.__init__ "Permalink to this definition")
Constructor.



Parameters
* **preview** ([*wx.PrintPreview*](wx.PrintPreview.html#wx.PrintPreview "wx.PrintPreview")) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






            Source: https://docs.wxpython.org/wx.PreviewCanvas.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.PreviewCanvas.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.PreviewCanvas.html
        """

    def OnPaint(self, event: 'PaintEvent') -> None:
        """ 

`OnPaint`(*self*, *event*)[¶](#wx.PreviewCanvas.OnPaint "Permalink to this definition")
Calls [`wx.PrintPreview.PaintPage`](wx.PrintPreview.html#wx.PrintPreview.PaintPage "wx.PrintPreview.PaintPage") to refresh the canvas.



Parameters
**event** ([*wx.PaintEvent*](wx.PaintEvent.html#wx.PaintEvent "wx.PaintEvent")) – 






            Source: https://docs.wxpython.org/wx.PreviewCanvas.html
        """



_PrintPreview: TypeAlias = PrintPreview

class PreviewControlBar(Panel):
    """ **Possible constructors**:



```
PreviewControlBar(preview, buttons, parent, pos=DefaultPosition,
                  size=DefaultSize, style=0, name="panel")

```


This is the default implementation of the preview control bar, a panel
with buttons and a zoom control.


  


        Source: https://docs.wxpython.org/wx.PreviewControlBar.html
    """
    def __init__(self, preview, buttons, parent, pos=DefaultPosition, size=DefaultSize, style=0, name="panel") -> None:
        """ 

`__init__`(*self*, *preview*, *buttons*, *parent*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name="panel"*)[¶](#wx.PreviewControlBar.__init__ "Permalink to this definition")
Constructor.


The *buttons* parameter may be a combination of the following, using the bitwise ‘or’ operator:


* `wx.PREVIEW_PRINT`: Create a print button.
* `wx.PREVIEW_NEXT`: Create a next page button.
* `wx.PREVIEW_PREVIOUS`: Create a previous page button.
* `wx.PREVIEW_ZOOM`: Create a zoom control.
* `wx.PREVIEW_DEFAULT`: Equivalent to a combination of `PREVIEW_PREVIOUS` , `PREVIEW_NEXT` and `PREVIEW_ZOOM` . ^^



Parameters
* **preview** ([*wx.PrintPreview*](wx.PrintPreview.html#wx.PrintPreview "wx.PrintPreview")) –
* **buttons** (*long*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






            Source: https://docs.wxpython.org/wx.PreviewControlBar.html
        """

    def CreateButtons(self) -> None:
        """ 

`CreateButtons`(*self*)[¶](#wx.PreviewControlBar.CreateButtons "Permalink to this definition")
Creates buttons, according to value of the button style flags.



Todo


which flags??





            Source: https://docs.wxpython.org/wx.PreviewControlBar.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.PreviewControlBar.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.PreviewControlBar.html
        """

    def GetPrintPreview(self) -> 'PrintPreview':
        """ 

`GetPrintPreview`(*self*)[¶](#wx.PreviewControlBar.GetPrintPreview "Permalink to this definition")
Gets the print preview object associated with the control bar.



Return type
 [wx.PrintPreview](wx.PrintPreview.html#wx-printpreview)






            Source: https://docs.wxpython.org/wx.PreviewControlBar.html
        """

    def GetZoomControl(self) -> int:
        """ 

`GetZoomControl`(*self*)[¶](#wx.PreviewControlBar.GetZoomControl "Permalink to this definition")
Gets the current zoom setting in percent.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PreviewControlBar.html
        """

    def SetZoomControl(self, percent: int) -> None:
        """ 

`SetZoomControl`(*self*, *percent*)[¶](#wx.PreviewControlBar.SetZoomControl "Permalink to this definition")
Sets the zoom control.



Parameters
**percent** (*int*) – 






            Source: https://docs.wxpython.org/wx.PreviewControlBar.html
        """

    PrintPreview: '_PrintPreview'  # `PrintPreview`[¶](#wx.PreviewControlBar.PrintPreview "Permalink to this definition")See [`GetPrintPreview`](#wx.PreviewControlBar.GetPrintPreview "wx.PreviewControlBar.GetPrintPreview")
    ZoomControl: int  # `ZoomControl`[¶](#wx.PreviewControlBar.ZoomControl "Permalink to this definition")See [`GetZoomControl`](#wx.PreviewControlBar.GetZoomControl "wx.PreviewControlBar.GetZoomControl") and [`SetZoomControl`](#wx.PreviewControlBar.SetZoomControl "wx.PreviewControlBar.SetZoomControl")



PREVIEW_PRINT: int

PREVIEW_NEXT: int

PREVIEW_PREVIOUS: int

PREVIEW_ZOOM: int

PREVIEW_DEFAULT: int

class PreviewFrame(Frame):
    """ **Possible constructors**:



```
PreviewFrame(preview, parent, title="PrintPreview", pos=DefaultPosition,
             size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)

```


This class provides the default method of managing the print preview
interface.


  


        Source: https://docs.wxpython.org/wx.PreviewFrame.html
    """
    def __init__(self, preview, parent, title="PrintPreview", pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr) -> None:
        """ 

`__init__`(*self*, *preview*, *parent*, *title="PrintPreview"*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DEFAULT\_FRAME\_STYLE*, *name=FrameNameStr*)[¶](#wx.PreviewFrame.__init__ "Permalink to this definition")
Constructor.


Pass a print preview object plus other normal frame arguments. The print preview object will be destroyed by the frame when it closes.


Note that *size* typically should *not* be specified explicitly to let the frame use its default size, adapted to its contents.



Parameters
* **preview** ([*wx.PrintPreview*](wx.PrintPreview.html#wx.PrintPreview "wx.PrintPreview")) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **title** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






            Source: https://docs.wxpython.org/wx.PreviewFrame.html
        """

    def CreateCanvas(self) -> None:
        """ 

`CreateCanvas`(*self*)[¶](#wx.PreviewFrame.CreateCanvas "Permalink to this definition")
Creates a  [wx.PreviewCanvas](wx.PreviewCanvas.html#wx-previewcanvas).


Override this function to allow a user-defined preview canvas object to be created.




            Source: https://docs.wxpython.org/wx.PreviewFrame.html
        """

    def CreateControlBar(self) -> None:
        """ 

`CreateControlBar`(*self*)[¶](#wx.PreviewFrame.CreateControlBar "Permalink to this definition")
Creates a  [wx.PreviewControlBar](wx.PreviewControlBar.html#wx-previewcontrolbar).


Override this function to allow a user-defined preview control bar object to be created.




            Source: https://docs.wxpython.org/wx.PreviewFrame.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.PreviewFrame.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.PreviewFrame.html
        """

    def Initialize(self) -> None:
        """ 

`Initialize`(*self*)[¶](#wx.PreviewFrame.Initialize "Permalink to this definition")
Initializes the frame elements and prepares for showing it.


Calling this method is equivalent to calling [`InitializeWithModality`](#wx.PreviewFrame.InitializeWithModality "wx.PreviewFrame.InitializeWithModality") with PreviewFrame\_AppModal argument, please see its documentation for more details.


Please notice that this function is virtual mostly for backwards compatibility only, there is no real need to override it as it’s never called by wxWidgets itself.




            Source: https://docs.wxpython.org/wx.PreviewFrame.html
        """

    def InitializeWithModality(self, kind: PreviewFrameModalityKind) -> None:
        """ 

`InitializeWithModality`(*self*, *kind*)[¶](#wx.PreviewFrame.InitializeWithModality "Permalink to this definition")
Initializes the frame elements and prepares for showing it with the given modality kind.


This method creates the frame elements by calling [`CreateCanvas`](#wx.PreviewFrame.CreateCanvas "wx.PreviewFrame.CreateCanvas") and [`CreateControlBar`](#wx.PreviewFrame.CreateControlBar "wx.PreviewFrame.CreateControlBar") methods (which may be overridden to customize them) and prepares to show the frame according to the value of *kind* parameter:


* If it is PreviewFrame\_AppModal, all the other application windows will be disabled when this frame is shown. This is the same behaviour as that of simple *wx.Initialize* .
* If it is PreviewFrame\_WindowModal, only the parent window of the preview frame will be disabled when it is shown.
* And if it is PreviewFrame\_NonModal, no windows at all will be disabled while the preview is shown.


Notice that this function (or *wx.Initialize* ) must be called by the application prior to showing the frame but you still must call `Show(true)` to actually show it afterwards.



Parameters
**kind** ([*PreviewFrameModalityKind*](wx.PreviewFrameModalityKind.enumeration.html "PreviewFrameModalityKind")) – The modality kind of preview frame.





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.PreviewFrame.html
        """

    def OnCloseWindow(self, event: 'CloseEvent') -> None:
        """ 

`OnCloseWindow`(*self*, *event*)[¶](#wx.PreviewFrame.OnCloseWindow "Permalink to this definition")
Enables any disabled frames in the application, and deletes the print preview object, implicitly deleting any printout objects associated with the print preview object.



Parameters
**event** ([*wx.CloseEvent*](wx.CloseEvent.html#wx.CloseEvent "wx.CloseEvent")) – 






            Source: https://docs.wxpython.org/wx.PreviewFrame.html
        """



class PrintAbortDialog(Dialog):
    """ **Possible constructors**:



```
PrintAbortDialog(parent, documentTitle, pos=DefaultPosition,
                 size=DefaultSize, style=DEFAULT_DIALOG_STYLE, name="dialog")

```


The dialog created by default by the print framework that enables
aborting the printing process.


  


        Source: https://docs.wxpython.org/wx.PrintAbortDialog.html
    """
    def __init__(self, parent, documentTitle, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_DIALOG_STYLE, name="dialog") -> None:
        """ 

`__init__`(*self*, *parent*, *documentTitle*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DEFAULT\_DIALOG\_STYLE*, *name="dialog"*)[¶](#wx.PrintAbortDialog.__init__ "Permalink to this definition")

Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **documentTitle** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






            Source: https://docs.wxpython.org/wx.PrintAbortDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.PrintAbortDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.PrintAbortDialog.html
        """

    def SetProgress(self, currentPage, totalPages, currentCopy, totalCopies) -> None:
        """ 

`SetProgress`(*self*, *currentPage*, *totalPages*, *currentCopy*, *totalCopies*)[¶](#wx.PrintAbortDialog.SetProgress "Permalink to this definition")

Parameters
* **currentPage** (*int*) –
* **totalPages** (*int*) –
* **currentCopy** (*int*) –
* **totalCopies** (*int*) –






            Source: https://docs.wxpython.org/wx.PrintAbortDialog.html
        """



_PrintMode: TypeAlias = PrintMode

class PrintData(Object):
    """ **Possible constructors**:



```
PrintData()

PrintData(data)

```


This class holds a variety of information related to printers and
printer device contexts.


  


        Source: https://docs.wxpython.org/wx.PrintData.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PrintData.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, data)*


Copy constructor.



Parameters
**data** ([*wx.PrintData*](#wx.PrintData "wx.PrintData")) – 






---

  





            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetBin(self) -> 'PrintBin':
        """ 

`GetBin`(*self*)[¶](#wx.PrintData.GetBin "Permalink to this definition")
Returns the current bin (papersource).


By default, the system is left to select the bin ( `PRINTBIN_DEFAULT` is returned).


See [`SetBin`](#wx.PrintData.SetBin "wx.PrintData.SetBin") for the full list of bin values.



Return type
 [wx.PrintBin](wx.PrintBin.enumeration.html#wx-printbin)






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetCollate(self) -> bool:
        """ 

`GetCollate`(*self*)[¶](#wx.PrintData.GetCollate "Permalink to this definition")
Returns `True` if collation is on.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetColour(self) -> bool:
        """ 

`GetColour`(*self*)[¶](#wx.PrintData.GetColour "Permalink to this definition")
Returns `True` if colour printing is on.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetDuplex(self) -> 'DuplexMode':
        """ 

`GetDuplex`(*self*)[¶](#wx.PrintData.GetDuplex "Permalink to this definition")
Returns the duplex mode.


One of `wx.DUPLEX_SIMPLEX`, `wx.DUPLEX_HORIZONTAL`, `wx.DUPLEX_VERTICAL`.



Return type
 [wx.DuplexMode](wx.DuplexMode.enumeration.html#wx-duplexmode)






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetFilename(self) -> str:
        """ 

`GetFilename`(*self*)[¶](#wx.PrintData.GetFilename "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetNoCopies(self) -> int:
        """ 

`GetNoCopies`(*self*)[¶](#wx.PrintData.GetNoCopies "Permalink to this definition")
Returns the number of copies requested by the user.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetOrientation(self) -> 'PrintOrientation':
        """ 

`GetOrientation`(*self*)[¶](#wx.PrintData.GetOrientation "Permalink to this definition")
Gets the orientation.


This can be `wx.LANDSCAPE` or `wx.PORTRAIT`.



Return type
 [wx.PrintOrientation](wx.PrintOrientation.enumeration.html#wx-printorientation)






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetPaperId(self) -> 'PaperSize':
        """ 

`GetPaperId`(*self*)[¶](#wx.PrintData.GetPaperId "Permalink to this definition")
Returns the paper size id.



Return type
 [wx.PaperSize](wx.PaperSize.enumeration.html#wx-papersize)





See also


[`SetPaperId`](#wx.PrintData.SetPaperId "wx.PrintData.SetPaperId")





            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetPaperSize(self) -> 'Size':
        """ 

`GetPaperSize`(*self*)[¶](#wx.PrintData.GetPaperSize "Permalink to this definition")

Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetPrintMode(self) -> 'PrintMode':
        """ 

`GetPrintMode`(*self*)[¶](#wx.PrintData.GetPrintMode "Permalink to this definition")

Return type
 [wx.PrintMode](wx.PrintMode.enumeration.html#wx-printmode)






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetPrinterName(self) -> str:
        """ 

`GetPrinterName`(*self*)[¶](#wx.PrintData.GetPrinterName "Permalink to this definition")
Returns the printer name.


If the printer name is the empty string, it indicates that the default printer should be used.



Return type
`string`






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetPrivData(self) -> Any:
        """ 

`GetPrivData`(*self*)[¶](#wx.PrintData.GetPrivData "Permalink to this definition")

Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def GetQuality(self) -> 'PrintQuality':
        """ 

`GetQuality`(*self*)[¶](#wx.PrintData.GetQuality "Permalink to this definition")
Returns the current print quality.


This can be a positive integer, denoting the number of dots per inch, or one of the following identifiers:


* `wx.PRINT_QUALITY_HIGH`
* `wx.PRINT_QUALITY_MEDIUM`
* `wx.PRINT_QUALITY_LOW`
* `wx.PRINT_QUALITY_DRAFT`


On input you should pass one of these identifiers, but on return you may get back a positive integer indicating the current resolution setting.



Return type
*wx.PrintQuality*






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.PrintData.IsOk "Permalink to this definition")
Returns `True` if the print data is valid for using in print dialogs.


This can return `False` on Windows if the current printer is not set, for example. On all other platforms, it returns `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetBin(self, flag: PrintBin) -> None:
        """ 

`SetBin`(*self*, *flag*)[¶](#wx.PrintData.SetBin "Permalink to this definition")
Sets the current bin.



Parameters
**flag** ([*PrintBin*](wx.PrintBin.enumeration.html "PrintBin")) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetCollate(self, flag: bool) -> None:
        """ 

`SetCollate`(*self*, *flag*)[¶](#wx.PrintData.SetCollate "Permalink to this definition")
Sets collation to on or off.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetColour(self, flag: bool) -> None:
        """ 

`SetColour`(*self*, *flag*)[¶](#wx.PrintData.SetColour "Permalink to this definition")
Sets colour printing on or off.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetDuplex(self, mode: DuplexMode) -> None:
        """ 

`SetDuplex`(*self*, *mode*)[¶](#wx.PrintData.SetDuplex "Permalink to this definition")
Returns the duplex mode.


One of `wx.DUPLEX_SIMPLEX`, `wx.DUPLEX_HORIZONTAL`, `wx.DUPLEX_VERTICAL`.



Parameters
**mode** ([*DuplexMode*](wx.DuplexMode.enumeration.html "DuplexMode")) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetFilename(self, filename: str) -> None:
        """ 

`SetFilename`(*self*, *filename*)[¶](#wx.PrintData.SetFilename "Permalink to this definition")

Parameters
**filename** (*string*) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetNoCopies(self, n: int) -> None:
        """ 

`SetNoCopies`(*self*, *n*)[¶](#wx.PrintData.SetNoCopies "Permalink to this definition")
Sets the default number of copies to be printed out.



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetOrientation(self, orientation: PrintOrientation) -> None:
        """ 

`SetOrientation`(*self*, *orientation*)[¶](#wx.PrintData.SetOrientation "Permalink to this definition")
Sets the orientation.


This can be `wx.LANDSCAPE` or `wx.PORTRAIT`.



Parameters
**orientation** ([*PrintOrientation*](wx.PrintOrientation.enumeration.html "PrintOrientation")) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetPaperId(self, paperId: PaperSize) -> None:
        """ 

`SetPaperId`(*self*, *paperId*)[¶](#wx.PrintData.SetPaperId "Permalink to this definition")
Sets the paper id.


This indicates the type of paper to be used. For a mapping between paper id, paper size and string name, see PrintPaperDatabase in `"paper.h"` (not yet documented).



Parameters
**paperId** ([*PaperSize*](wx.PaperSize.enumeration.html "PaperSize")) – 





See also


[`SetPaperSize`](#wx.PrintData.SetPaperSize "wx.PrintData.SetPaperSize")





            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetPaperSize(self, *args, **kw) -> None:
        """ 

`SetPaperSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PrintData.SetPaperSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetPaperSize** *(self, size)*


Sets custom paper size.


This method can be used to set up custom paper size. When using a standard size, prefer to use [`SetPaperId`](#wx.PrintData.SetPaperId "wx.PrintData.SetPaperId") instead.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**SetPaperSize** *(self, sz)*




---

  





            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetPrintMode(self, printMode: PrintMode) -> None:
        """ 

`SetPrintMode`(*self*, *printMode*)[¶](#wx.PrintData.SetPrintMode "Permalink to this definition")

Parameters
**printMode** ([*PrintMode*](wx.PrintMode.enumeration.html "PrintMode")) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetPrinterName(self, printerName: str) -> None:
        """ 

`SetPrinterName`(*self*, *printerName*)[¶](#wx.PrintData.SetPrinterName "Permalink to this definition")
Sets the printer name.


This can be the empty string to indicate that the default printer should be used.



Parameters
**printerName** (*string*) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetPrivData(self, data) -> None:
        """ 

`SetPrivData`(*self*, *data*)[¶](#wx.PrintData.SetPrivData "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def SetQuality(self, quality: 'PrintQuality') -> None:
        """ 

`SetQuality`(*self*, *quality*)[¶](#wx.PrintData.SetQuality "Permalink to this definition")
Sets the desired print quality.


This can be a positive integer, denoting the number of dots per inch, or one of the following identifiers:


* `wx.PRINT_QUALITY_HIGH`
* `wx.PRINT_QUALITY_MEDIUM`
* `wx.PRINT_QUALITY_LOW`
* `wx.PRINT_QUALITY_DRAFT`


On input you should pass one of these identifiers, but on return you may get back a positive integer indicating the current resolution setting.



Parameters
**quality** (*wx.PrintQuality*) – 






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.PrintData.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.PrintData.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintData.html
        """

    Bin: 'PrintBin'  # `Bin`[¶](#wx.PrintData.Bin "Permalink to this definition")See [`GetBin`](#wx.PrintData.GetBin "wx.PrintData.GetBin") and [`SetBin`](#wx.PrintData.SetBin "wx.PrintData.SetBin")
    Collate: bool  # `Collate`[¶](#wx.PrintData.Collate "Permalink to this definition")See [`GetCollate`](#wx.PrintData.GetCollate "wx.PrintData.GetCollate") and [`SetCollate`](#wx.PrintData.SetCollate "wx.PrintData.SetCollate")
    Colour: bool  # `Colour`[¶](#wx.PrintData.Colour "Permalink to this definition")See [`GetColour`](#wx.PrintData.GetColour "wx.PrintData.GetColour") and [`SetColour`](#wx.PrintData.SetColour "wx.PrintData.SetColour")
    Duplex: 'DuplexMode'  # `Duplex`[¶](#wx.PrintData.Duplex "Permalink to this definition")See [`GetDuplex`](#wx.PrintData.GetDuplex "wx.PrintData.GetDuplex") and [`SetDuplex`](#wx.PrintData.SetDuplex "wx.PrintData.SetDuplex")
    Filename: str  # `Filename`[¶](#wx.PrintData.Filename "Permalink to this definition")See [`GetFilename`](#wx.PrintData.GetFilename "wx.PrintData.GetFilename") and [`SetFilename`](#wx.PrintData.SetFilename "wx.PrintData.SetFilename")
    NoCopies: int  # `NoCopies`[¶](#wx.PrintData.NoCopies "Permalink to this definition")See [`GetNoCopies`](#wx.PrintData.GetNoCopies "wx.PrintData.GetNoCopies") and [`SetNoCopies`](#wx.PrintData.SetNoCopies "wx.PrintData.SetNoCopies")
    Orientation: 'PrintOrientation'  # `Orientation`[¶](#wx.PrintData.Orientation "Permalink to this definition")See [`GetOrientation`](#wx.PrintData.GetOrientation "wx.PrintData.GetOrientation") and [`SetOrientation`](#wx.PrintData.SetOrientation "wx.PrintData.SetOrientation")
    PaperId: 'PaperSize'  # `PaperId`[¶](#wx.PrintData.PaperId "Permalink to this definition")See [`GetPaperId`](#wx.PrintData.GetPaperId "wx.PrintData.GetPaperId") and [`SetPaperId`](#wx.PrintData.SetPaperId "wx.PrintData.SetPaperId")
    PaperSize: 'Size'  # `PaperSize`[¶](#wx.PrintData.PaperSize "Permalink to this definition")See [`GetPaperSize`](#wx.PrintData.GetPaperSize "wx.PrintData.GetPaperSize") and [`SetPaperSize`](#wx.PrintData.SetPaperSize "wx.PrintData.SetPaperSize")
    PrintMode: '_PrintMode'  # `PrintMode`[¶](#wx.PrintData.PrintMode "Permalink to this definition")See [`GetPrintMode`](#wx.PrintData.GetPrintMode "wx.PrintData.GetPrintMode") and [`SetPrintMode`](#wx.PrintData.SetPrintMode "wx.PrintData.SetPrintMode")
    PrinterName: str  # `PrinterName`[¶](#wx.PrintData.PrinterName "Permalink to this definition")See [`GetPrinterName`](#wx.PrintData.GetPrinterName "wx.PrintData.GetPrinterName") and [`SetPrinterName`](#wx.PrintData.SetPrinterName "wx.PrintData.SetPrinterName")
    PrivData: Any  # `PrivData`[¶](#wx.PrintData.PrivData "Permalink to this definition")See [`GetPrivData`](#wx.PrintData.GetPrivData "wx.PrintData.GetPrivData") and [`SetPrivData`](#wx.PrintData.SetPrivData "wx.PrintData.SetPrivData")
    Quality: 'PrintQuality'  # `Quality`[¶](#wx.PrintData.Quality "Permalink to this definition")See [`GetQuality`](#wx.PrintData.GetQuality "wx.PrintData.GetQuality") and [`SetQuality`](#wx.PrintData.SetQuality "wx.PrintData.SetQuality")



DUPLEX_SIMPLEX: int

DUPLEX_HORIZONTAL: int

DUPLEX_VERTICAL: int

LANDSCAPE: int

PORTRAIT: int

PRINT_QUALITY_HIGH: int

PRINT_QUALITY_MEDIUM: int

PRINT_QUALITY_LOW: int

PRINT_QUALITY_DRAFT: int

_PrintDialogData: TypeAlias = PrintDialogData

class PrintDialog(Object):
    """ **Possible constructors**:



```
PrintDialog(parent, data=None)

PrintDialog(parent, data)

```


This class represents the print and print setup common dialogs.


  


        Source: https://docs.wxpython.org/wx.PrintDialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PrintDialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, parent, data=None)*


Constructor.


Pass a parent window, and optionally a pointer to a block of print data, which will be copied to the print dialog’s print data.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.PrintDialogData*](wx.PrintDialogData.html#wx.PrintDialogData "wx.PrintDialogData")) –





See also


 [wx.PrintDialogData](wx.PrintDialogData.html#wx-printdialogdata)





---

  



**\_\_init\_\_** *(self, parent, data)*



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **data** ([*wx.PrintData*](wx.PrintData.html#wx.PrintData "wx.PrintData")) –






---

  





            Source: https://docs.wxpython.org/wx.PrintDialog.html
        """

    def GetPrintDC(self) -> 'DC':
        """ 

`GetPrintDC`(*self*)[¶](#wx.PrintDialog.GetPrintDC "Permalink to this definition")
Returns the device context created by the print dialog, if any.


When this function has been called, the ownership of the device context is transferred to the application, so it must then be deleted explicitly.



Return type
 [wx.DC](wx.DC.html#wx-dc)






            Source: https://docs.wxpython.org/wx.PrintDialog.html
        """

    def GetPrintData(self) -> 'PrintData':
        """ 

`GetPrintData`(*self*)[¶](#wx.PrintDialog.GetPrintData "Permalink to this definition")
Returns the [print data](printing_framework_overview.html#print-data) associated with the print dialog.



Return type
 [wx.PrintData](wx.PrintData.html#wx-printdata)






            Source: https://docs.wxpython.org/wx.PrintDialog.html
        """

    def GetPrintDialogData(self) -> 'PrintDialogData':
        """ 

`GetPrintDialogData`(*self*)[¶](#wx.PrintDialog.GetPrintDialogData "Permalink to this definition")
Returns the [print dialog data](printing_framework_overview.html#print-dialog-data) associated with the print dialog.



Return type
 [wx.PrintDialogData](wx.PrintDialogData.html#wx-printdialogdata)






            Source: https://docs.wxpython.org/wx.PrintDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.PrintDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning `ID_OK` if the user pressed `wx.OK`, and `ID_CANCEL` otherwise.


After this function is called, a device context may be retrievable using [`GetPrintDC`](#wx.PrintDialog.GetPrintDC "wx.PrintDialog.GetPrintDC") .



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintDialog.html
        """

    PrintDC: 'DC'  # `PrintDC`[¶](#wx.PrintDialog.PrintDC "Permalink to this definition")See [`GetPrintDC`](#wx.PrintDialog.GetPrintDC "wx.PrintDialog.GetPrintDC")
    PrintData: '_PrintData'  # `PrintData`[¶](#wx.PrintDialog.PrintData "Permalink to this definition")See [`GetPrintData`](#wx.PrintDialog.GetPrintData "wx.PrintDialog.GetPrintData")
    PrintDialogData: '_PrintDialogData'  # `PrintDialogData`[¶](#wx.PrintDialog.PrintDialogData "Permalink to this definition")See [`GetPrintDialogData`](#wx.PrintDialog.GetPrintDialogData "wx.PrintDialog.GetPrintDialogData")



class PrintDialogData(Object):
    """ **Possible constructors**:



```
PrintDialogData()

PrintDialogData(dialogData)

PrintDialogData(printData)

```


This class holds information related to the visual characteristics of
PrintDialog.


  


        Source: https://docs.wxpython.org/wx.PrintDialogData.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PrintDialogData.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, dialogData)*


Copy constructor.



Parameters
**dialogData** ([*wx.PrintDialogData*](#wx.PrintDialogData "wx.PrintDialogData")) – 






---

  



**\_\_init\_\_** *(self, printData)*


Construct an object from a print dialog data object.



Parameters
**printData** ([*wx.PrintData*](wx.PrintData.html#wx.PrintData "wx.PrintData")) – 






---

  





            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def EnableHelp(self, flag: bool) -> None:
        """ 

`EnableHelp`(*self*, *flag*)[¶](#wx.PrintDialogData.EnableHelp "Permalink to this definition")
Enables or disables the “Help” button.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def EnablePageNumbers(self, flag: bool) -> None:
        """ 

`EnablePageNumbers`(*self*, *flag*)[¶](#wx.PrintDialogData.EnablePageNumbers "Permalink to this definition")
Enables or disables the “Page numbers” controls.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def EnablePrintToFile(self, flag: bool) -> None:
        """ 

`EnablePrintToFile`(*self*, *flag*)[¶](#wx.PrintDialogData.EnablePrintToFile "Permalink to this definition")
Enables or disables the “Print to file” checkbox.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def EnableSelection(self, flag: bool) -> None:
        """ 

`EnableSelection`(*self*, *flag*)[¶](#wx.PrintDialogData.EnableSelection "Permalink to this definition")
Enables or disables the “Selection” radio button.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetAllPages(self) -> bool:
        """ 

`GetAllPages`(*self*)[¶](#wx.PrintDialogData.GetAllPages "Permalink to this definition")
Returns `True` if the user requested that all pages be printed.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetCollate(self) -> bool:
        """ 

`GetCollate`(*self*)[¶](#wx.PrintDialogData.GetCollate "Permalink to this definition")
Returns `True` if the user requested that the document(s) be collated.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetFromPage(self) -> int:
        """ 

`GetFromPage`(*self*)[¶](#wx.PrintDialogData.GetFromPage "Permalink to this definition")
Returns the *from* page number, as entered by the user.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetMaxPage(self) -> int:
        """ 

`GetMaxPage`(*self*)[¶](#wx.PrintDialogData.GetMaxPage "Permalink to this definition")
Returns the *maximum* page number.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetMinPage(self) -> int:
        """ 

`GetMinPage`(*self*)[¶](#wx.PrintDialogData.GetMinPage "Permalink to this definition")
Returns the *minimum* page number.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetNoCopies(self) -> int:
        """ 

`GetNoCopies`(*self*)[¶](#wx.PrintDialogData.GetNoCopies "Permalink to this definition")
Returns the number of copies requested by the user.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetPrintData(self) -> 'PrintData':
        """ 

`GetPrintData`(*self*)[¶](#wx.PrintDialogData.GetPrintData "Permalink to this definition")
Returns a reference to the internal  [wx.PrintData](wx.PrintData.html#wx-printdata) object.



Return type
 [wx.PrintData](wx.PrintData.html#wx-printdata)






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetPrintToFile(self) -> bool:
        """ 

`GetPrintToFile`(*self*)[¶](#wx.PrintDialogData.GetPrintToFile "Permalink to this definition")
Returns `True` if the user has selected printing to a file.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetSelection(self) -> bool:
        """ 

`GetSelection`(*self*)[¶](#wx.PrintDialogData.GetSelection "Permalink to this definition")
Returns `True` if the user requested that the selection be printed (where “selection” is a concept specific to the application).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def GetToPage(self) -> int:
        """ 

`GetToPage`(*self*)[¶](#wx.PrintDialogData.GetToPage "Permalink to this definition")
Returns the *“print to”* page number, as entered by the user.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.PrintDialogData.IsOk "Permalink to this definition")
Returns `True` if the print data is valid for using in print dialogs.


This can return `False` on Windows if the current printer is not set, for example. On all other platforms, it returns `True`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetCollate(self, flag: bool) -> None:
        """ 

`SetCollate`(*self*, *flag*)[¶](#wx.PrintDialogData.SetCollate "Permalink to this definition")
Sets the “Collate” checkbox to `True` or `False`.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetFromPage(self, page: int) -> None:
        """ 

`SetFromPage`(*self*, *page*)[¶](#wx.PrintDialogData.SetFromPage "Permalink to this definition")
Sets the *from* page number.



Parameters
**page** (*int*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetMaxPage(self, page: int) -> None:
        """ 

`SetMaxPage`(*self*, *page*)[¶](#wx.PrintDialogData.SetMaxPage "Permalink to this definition")
Sets the *maximum* page number.



Parameters
**page** (*int*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetMinPage(self, page: int) -> None:
        """ 

`SetMinPage`(*self*, *page*)[¶](#wx.PrintDialogData.SetMinPage "Permalink to this definition")
Sets the *minimum* page number.



Parameters
**page** (*int*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetNoCopies(self, n: int) -> None:
        """ 

`SetNoCopies`(*self*, *n*)[¶](#wx.PrintDialogData.SetNoCopies "Permalink to this definition")
Sets the default number of copies the user has requested to be printed out.



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetPrintData(self, printData: 'PrintData') -> None:
        """ 

`SetPrintData`(*self*, *printData*)[¶](#wx.PrintDialogData.SetPrintData "Permalink to this definition")
Sets the internal  [wx.PrintData](wx.PrintData.html#wx-printdata).



Parameters
**printData** ([*wx.PrintData*](wx.PrintData.html#wx.PrintData "wx.PrintData")) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetPrintToFile(self, flag: bool) -> None:
        """ 

`SetPrintToFile`(*self*, *flag*)[¶](#wx.PrintDialogData.SetPrintToFile "Permalink to this definition")
Sets the “Print to file” checkbox to `True` or `False`.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetSelection(self, flag: bool) -> None:
        """ 

`SetSelection`(*self*, *flag*)[¶](#wx.PrintDialogData.SetSelection "Permalink to this definition")
Selects the “Selection” radio button.


The effect of printing the selection depends on how the application implements this command, if at all.



Parameters
**flag** (*bool*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def SetToPage(self, page: int) -> None:
        """ 

`SetToPage`(*self*, *page*)[¶](#wx.PrintDialogData.SetToPage "Permalink to this definition")
Sets the *“print to”* page number.



Parameters
**page** (*int*) – 






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.PrintDialogData.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.PrintDialogData.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintDialogData.html
        """

    AllPages: bool  # `AllPages`[¶](#wx.PrintDialogData.AllPages "Permalink to this definition")See [`GetAllPages`](#wx.PrintDialogData.GetAllPages "wx.PrintDialogData.GetAllPages")
    Collate: bool  # `Collate`[¶](#wx.PrintDialogData.Collate "Permalink to this definition")See [`GetCollate`](#wx.PrintDialogData.GetCollate "wx.PrintDialogData.GetCollate") and [`SetCollate`](#wx.PrintDialogData.SetCollate "wx.PrintDialogData.SetCollate")
    FromPage: int  # `FromPage`[¶](#wx.PrintDialogData.FromPage "Permalink to this definition")See [`GetFromPage`](#wx.PrintDialogData.GetFromPage "wx.PrintDialogData.GetFromPage") and [`SetFromPage`](#wx.PrintDialogData.SetFromPage "wx.PrintDialogData.SetFromPage")
    MaxPage: int  # `MaxPage`[¶](#wx.PrintDialogData.MaxPage "Permalink to this definition")See [`GetMaxPage`](#wx.PrintDialogData.GetMaxPage "wx.PrintDialogData.GetMaxPage") and [`SetMaxPage`](#wx.PrintDialogData.SetMaxPage "wx.PrintDialogData.SetMaxPage")
    MinPage: int  # `MinPage`[¶](#wx.PrintDialogData.MinPage "Permalink to this definition")See [`GetMinPage`](#wx.PrintDialogData.GetMinPage "wx.PrintDialogData.GetMinPage") and [`SetMinPage`](#wx.PrintDialogData.SetMinPage "wx.PrintDialogData.SetMinPage")
    NoCopies: int  # `NoCopies`[¶](#wx.PrintDialogData.NoCopies "Permalink to this definition")See [`GetNoCopies`](#wx.PrintDialogData.GetNoCopies "wx.PrintDialogData.GetNoCopies") and [`SetNoCopies`](#wx.PrintDialogData.SetNoCopies "wx.PrintDialogData.SetNoCopies")
    PrintData: '_PrintData'  # `PrintData`[¶](#wx.PrintDialogData.PrintData "Permalink to this definition")See [`GetPrintData`](#wx.PrintDialogData.GetPrintData "wx.PrintDialogData.GetPrintData") and [`SetPrintData`](#wx.PrintDialogData.SetPrintData "wx.PrintDialogData.SetPrintData")
    PrintToFile: bool  # `PrintToFile`[¶](#wx.PrintDialogData.PrintToFile "Permalink to this definition")See [`GetPrintToFile`](#wx.PrintDialogData.GetPrintToFile "wx.PrintDialogData.GetPrintToFile") and [`SetPrintToFile`](#wx.PrintDialogData.SetPrintToFile "wx.PrintDialogData.SetPrintToFile")
    Selection: bool  # `Selection`[¶](#wx.PrintDialogData.Selection "Permalink to this definition")See [`GetSelection`](#wx.PrintDialogData.GetSelection "wx.PrintDialogData.GetSelection") and [`SetSelection`](#wx.PrintDialogData.SetSelection "wx.PrintDialogData.SetSelection")
    ToPage: int  # `ToPage`[¶](#wx.PrintDialogData.ToPage "Permalink to this definition")See [`GetToPage`](#wx.PrintDialogData.GetToPage "wx.PrintDialogData.GetToPage") and [`SetToPage`](#wx.PrintDialogData.SetToPage "wx.PrintDialogData.SetToPage")



class Printer(Object):
    """ **Possible constructors**:



```
Printer(data=None)

```


This class represents the Windows or PostScript printer, and is the
vehicle through which printing may be launched by an application.


  


        Source: https://docs.wxpython.org/wx.Printer.html
    """
    def __init__(self, data: Optional['PrintDialogData']=None) -> None:
        """ 

`__init__`(*self*, *data=None*)[¶](#wx.Printer.__init__ "Permalink to this definition")
Constructor.


Pass an optional pointer to a block of print dialog data, which will be copied to the printer object’s local data.



Parameters
**data** ([*wx.PrintDialogData*](wx.PrintDialogData.html#wx.PrintDialogData "wx.PrintDialogData")) – 





See also


 [wx.PrintDialogData](wx.PrintDialogData.html#wx-printdialogdata),  [wx.PrintData](wx.PrintData.html#wx-printdata)





            Source: https://docs.wxpython.org/wx.Printer.html
        """

    def CreateAbortWindow(self, parent, printout) -> 'PrintAbortDialog':
        """ 

`CreateAbortWindow`(*self*, *parent*, *printout*)[¶](#wx.Printer.CreateAbortWindow "Permalink to this definition")
Creates the default printing abort window, with a cancel button.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **printout** ([*wx.Printout*](wx.Printout.html#wx.Printout "wx.Printout")) –



Return type
 [wx.PrintAbortDialog](wx.PrintAbortDialog.html#wx-printabortdialog)






            Source: https://docs.wxpython.org/wx.Printer.html
        """

    def GetAbort(self) -> bool:
        """ 

`GetAbort`(*self*)[¶](#wx.Printer.GetAbort "Permalink to this definition")
Returns `True` if the user has aborted the print job.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Printer.html
        """

    @staticmethod
    def GetLastError() -> 'PrinterError':
        """ 

*static* `GetLastError`()[¶](#wx.Printer.GetLastError "Permalink to this definition")
Return last error.


Valid after calling [`Print`](#wx.Printer.Print "wx.Printer.Print") ,  [wx.PrintDialog](wx.PrintDialog.html#wx-printdialog) or [`wx.PrintPreview.Print`](wx.PrintPreview.html#wx.PrintPreview.Print "wx.PrintPreview.Print") .


These functions set last error to `PRINTER_NO_ERROR` if no error happened.


Returned value is one of the following:







| `wx.PRINTER_NO_ERROR` | No error happened. |
| --- | --- |
| `wx.PRINTER_CANCELLED` | The user cancelled printing. |
| `wx.PRINTER_ERROR` | There was an error during printing. |



  



Return type
 [wx.PrinterError](wx.PrinterError.enumeration.html#wx-printererror)






            Source: https://docs.wxpython.org/wx.Printer.html
        """

    def GetPrintDialogData(self) -> 'PrintDialogData':
        """ 

`GetPrintDialogData`(*self*)[¶](#wx.Printer.GetPrintDialogData "Permalink to this definition")
Returns the [print data](printing_framework_overview.html#print-data) associated with the printer object.



Return type
 [wx.PrintDialogData](wx.PrintDialogData.html#wx-printdialogdata)






            Source: https://docs.wxpython.org/wx.Printer.html
        """

    def Print(self, parent, printout, prompt=True) -> bool:
        """ 

`Print`(*self*, *parent*, *printout*, *prompt=True*)[¶](#wx.Printer.Print "Permalink to this definition")
Starts the printing process.


Provide a parent window, a user-defined  [wx.Printout](wx.Printout.html#wx-printout) object which controls the printing of a document, and whether the print dialog should be invoked first.


[`Print`](#wx.Printer.Print "wx.Printer.Print") could return `False` if there was a problem initializing the printer device context (current printer not set, for example) or the user cancelled printing. Call [`GetLastError`](#wx.Printer.GetLastError "wx.Printer.GetLastError") to get detailed information about the kind of the error.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **printout** ([*wx.Printout*](wx.Printout.html#wx.Printout "wx.Printout")) –
* **prompt** (*bool*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Printer.html
        """

    def PrintDialog(self, parent: 'Window') -> 'DC':
        """ 

`PrintDialog`(*self*, *parent*)[¶](#wx.Printer.PrintDialog "Permalink to this definition")
Invokes the print dialog.


If successful (the user did not press Cancel and no error occurred), a suitable device context will be returned; otherwise `None` is returned; call [`GetLastError`](#wx.Printer.GetLastError "wx.Printer.GetLastError") to get detailed information about the kind of the error.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.DC](wx.DC.html#wx-dc)





Note


The application must delete this device context to avoid a memory leak.





            Source: https://docs.wxpython.org/wx.Printer.html
        """

    def ReportError(self, parent, printout, message) -> None:
        """ 

`ReportError`(*self*, *parent*, *printout*, *message*)[¶](#wx.Printer.ReportError "Permalink to this definition")
Default error-reporting function.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **printout** ([*wx.Printout*](wx.Printout.html#wx.Printout "wx.Printout")) –
* **message** (*string*) –






            Source: https://docs.wxpython.org/wx.Printer.html
        """

    def Setup(self, parent: 'Window') -> bool:
        """ 

`Setup`(*self*, *parent*)[¶](#wx.Printer.Setup "Permalink to this definition")
Invokes the print setup dialog.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*





Deprecated


The setup dialog is obsolete, though retained for backward compatibility.





            Source: https://docs.wxpython.org/wx.Printer.html
        """

    Abort: bool  # `Abort`[¶](#wx.Printer.Abort "Permalink to this definition")See [`GetAbort`](#wx.Printer.GetAbort "wx.Printer.GetAbort")
    PrintDialogData: '_PrintDialogData'  # `PrintDialogData`[¶](#wx.Printer.PrintDialogData "Permalink to this definition")See [`GetPrintDialogData`](#wx.Printer.GetPrintDialogData "wx.Printer.GetPrintDialogData")



PRINTER_NO_ERROR: int

PRINTER_CANCELLED: int

PRINTER_ERROR: int

class PrinterDC(DC):
    """ **Possible constructors**:



```
PrinterDC(printData)

```


A printer device context is specific to MSW and Mac, and allows access
to any printer with a Windows or Macintosh driver.


  


        Source: https://docs.wxpython.org/wx.PrinterDC.html
    """
    def __init__(self, printData: 'PrintData') -> None:
        """ 

`__init__`(*self*, *printData*)[¶](#wx.PrinterDC.__init__ "Permalink to this definition")
Constructor.


Pass a  [wx.PrintData](wx.PrintData.html#wx-printdata) object with information necessary for setting up a suitable printer device context. This is the recommended way to construct a  [wx.PrinterDC](#wx-printerdc). Make sure you specify a reference to a  [wx.PrintData](wx.PrintData.html#wx-printdata) object, not a pointer - you may not even get a warning if you pass a pointer instead.



Parameters
**printData** ([*wx.PrintData*](wx.PrintData.html#wx.PrintData "wx.PrintData")) – 






            Source: https://docs.wxpython.org/wx.PrinterDC.html
        """

    def GetPaperRect(self) -> 'Rect':
        """ 

`GetPaperRect`(*self*)[¶](#wx.PrinterDC.GetPaperRect "Permalink to this definition")
Return the rectangle in device coordinates that corresponds to the full paper area, including the nonprinting regions of the paper.


The point (0,0) in device coordinates is the top left corner of the page rectangle, which is the printable area on MSW and Mac. The coordinates of the top left corner of the paper rectangle will therefore have small negative values, while the bottom right coordinates will be somewhat larger than the values returned by [`wx.DC.GetSize`](wx.DC.html#wx.DC.GetSize "wx.DC.GetSize") .



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.PrinterDC.html
        """

    PaperRect: 'Rect'  # `PaperRect`[¶](#wx.PrinterDC.PaperRect "Permalink to this definition")See [`GetPaperRect`](#wx.PrinterDC.GetPaperRect "wx.PrinterDC.GetPaperRect")



class Printout(Object):
    """ **Possible constructors**:



```
Printout(title="Printout")

```


This class encapsulates the functionality of printing out an
application document.


  


        Source: https://docs.wxpython.org/wx.Printout.html
    """
    def __init__(self, title: str="Printout") -> None:
        """ 

`__init__`(*self*, *title="Printout"*)[¶](#wx.Printout.__init__ "Permalink to this definition")
Constructor.


Pass an optional title argument - the current filename would be a good idea. This will appear in the printing list (at least in MSW)



Parameters
**title** (*string*) – 






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def FitThisSizeToPage(self, imageSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`FitThisSizeToPage`(*self*, *imageSize*)[¶](#wx.Printout.FitThisSizeToPage "Permalink to this definition")
Set the user scale and device origin of the  [wx.DC](wx.DC.html#wx-dc) associated with this  [wx.Printout](#wx-printout) so that the given image size fits entirely within the page rectangle and the origin is at the top left corner of the page rectangle.


On MSW and Mac, the page rectangle is the printable area of the page. On other platforms and PostScript printing, the page rectangle is the entire paper.


Use this if you want your printed image as large as possible, but with the caveat that on some platforms, portions of the image might be cut off at the edges.



Parameters
**imageSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def FitThisSizeToPageMargins(self, imageSize, pageSetupData) -> None:
        """ 

`FitThisSizeToPageMargins`(*self*, *imageSize*, *pageSetupData*)[¶](#wx.Printout.FitThisSizeToPageMargins "Permalink to this definition")
Set the user scale and device origin of the  [wx.DC](wx.DC.html#wx-dc) associated with this  [wx.Printout](#wx-printout) so that the given image size fits entirely within the page margins set in the given  [wx.PageSetupDialogData](wx.PageSetupDialogData.html#wx-pagesetupdialogdata) object.


This function provides the greatest consistency across all platforms because it does not depend on having access to the printable area of the paper.



Parameters
* **imageSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **pageSetupData** ([*wx.PageSetupDialogData*](wx.PageSetupDialogData.html#wx.PageSetupDialogData "wx.PageSetupDialogData")) –





Note


On Mac, the native  [wx.PageSetupDialog](wx.PageSetupDialog.html#wx-pagesetupdialog) does not let you set the page margins; you’ll have to provide your own mechanism, or you can use the Mac-only class MacPageMarginsDialog.





            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def FitThisSizeToPaper(self, imageSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`FitThisSizeToPaper`(*self*, *imageSize*)[¶](#wx.Printout.FitThisSizeToPaper "Permalink to this definition")
Set the user scale and device origin of the  [wx.DC](wx.DC.html#wx-dc) associated with this  [wx.Printout](#wx-printout) so that the given image size fits entirely within the paper and the origin is at the top left corner of the paper.


Use this if you’re managing your own page margins.



Parameters
**imageSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





Note


With most printers, the region around the edges of the paper are not printable so that the edges of the image could be cut off.





            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetDC(self) -> 'DC':
        """ 

`GetDC`(*self*)[¶](#wx.Printout.GetDC "Permalink to this definition")
Returns the device context associated with the printout (given to the printout at start of printing or previewing).


The application can use [`GetDC`](#wx.Printout.GetDC "wx.Printout.GetDC") to obtain a device context to draw on.


This will be a  [wx.PrinterDC](wx.PrinterDC.html#wx-printerdc) if printing under Windows or Mac, a  [wx.PostScriptDC](wx.PostScriptDC.html#wx-postscriptdc) if printing on other platforms, and a  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc) if previewing.



Return type
 [wx.DC](wx.DC.html#wx-dc)






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetLogicalPageMarginsRect(self, pageSetupData: 'PageSetupDialogData') -> 'Rect':
        """ 

`GetLogicalPageMarginsRect`(*self*, *pageSetupData*)[¶](#wx.Printout.GetLogicalPageMarginsRect "Permalink to this definition")
Return the rectangle corresponding to the page margins specified by the given  [wx.PageSetupDialogData](wx.PageSetupDialogData.html#wx-pagesetupdialogdata) object in the associated  [wx.DC](wx.DC.html#wx-dc)’s logical coordinates for the current user scale and device origin.


The page margins are specified with respect to the edges of the paper on all platforms.



Parameters
**pageSetupData** ([*wx.PageSetupDialogData*](wx.PageSetupDialogData.html#wx.PageSetupDialogData "wx.PageSetupDialogData")) – 



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetLogicalPageRect(self) -> 'Rect':
        """ 

`GetLogicalPageRect`(*self*)[¶](#wx.Printout.GetLogicalPageRect "Permalink to this definition")
Return the rectangle corresponding to the page in the associated  [wx.DC](wx.DC.html#wx-dc) ‘s logical coordinates for the current user scale and device origin.


On MSW and Mac, this will be the printable area of the paper. On other platforms and PostScript printing, this will be the full paper rectangle.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetLogicalPaperRect(self) -> 'Rect':
        """ 

`GetLogicalPaperRect`(*self*)[¶](#wx.Printout.GetLogicalPaperRect "Permalink to this definition")
Return the rectangle corresponding to the paper in the associated  [wx.DC](wx.DC.html#wx-dc) ‘s logical coordinates for the current user scale and device origin.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetPPIPrinter(self) -> None:
        """ 

`GetPPIPrinter`(*self*)[¶](#wx.Printout.GetPPIPrinter "Permalink to this definition")
Returns the number of pixels per logical inch of the printer device context.


Dividing the printer `PPI` by the screen `PPI` can give a suitable scaling factor for drawing text onto the printer.


Remember to multiply this by a scaling factor to take the preview DC size into account. Or you can just use the FitThisSizeToXXX() and MapScreenSizeToXXX routines below, which do most of the scaling calculations for you.




            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetPPIScreen(self) -> None:
        """ 

`GetPPIScreen`(*self*)[¶](#wx.Printout.GetPPIScreen "Permalink to this definition")
Returns the number of pixels per logical inch of the screen device context.


Dividing the printer `PPI` by the screen `PPI` can give a suitable scaling factor for drawing text onto the printer.


If you are doing your own scaling, remember to multiply this by a scaling factor to take the preview DC size into account.




            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetPageInfo(self) -> tuple:
        """ 

`GetPageInfo`(*self*)[¶](#wx.Printout.GetPageInfo "Permalink to this definition")
Called by the framework to obtain information from the application about minimum and maximum page values that the user can select, and the required page range to be printed.


By default this returns (1, 32000) for the page minimum and maximum values, and (1, 1) for the required page range.


*minPage* must be greater than zero and *maxPage* must be greater than *minPage*.



Return type
*tuple*



Returns
( *minPage*, *maxPage*, *pageFrom*, *pageTo* )






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetPageSizeMM(self) -> None:
        """ 

`GetPageSizeMM`(*self*)[¶](#wx.Printout.GetPageSizeMM "Permalink to this definition")
Returns the size of the printer page in millimetres.




            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetPageSizePixels(self) -> tuple:
        """ 

`GetPageSizePixels`(*self*)[¶](#wx.Printout.GetPageSizePixels "Permalink to this definition")
Returns the size of the printer page in pixels, called the page rectangle.


The page rectangle has a top left corner at (0,0) and a bottom right corner at (w,h). These values may not be the same as the values returned from [`wx.DC.GetSize`](wx.DC.html#wx.DC.GetSize "wx.DC.GetSize") ; if the printout is being used for previewing, a memory device context is used, which uses a bitmap size reflecting the current preview zoom. The application must take this discrepancy into account if previewing is to be supported.



Return type
*tuple*



Returns
( *w*, *h* )






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetPaperRectPixels(self) -> 'Rect':
        """ 

`GetPaperRectPixels`(*self*)[¶](#wx.Printout.GetPaperRectPixels "Permalink to this definition")
Returns the rectangle that corresponds to the entire paper in pixels, called the paper rectangle.


This distinction between paper rectangle and page rectangle reflects the fact that most printers cannot print all the way to the edge of the paper. The page rectangle is a rectangle whose top left corner is at (0,0) and whose width and height are given by *DC.GetPageSizePixels().*


On MSW and Mac, the page rectangle gives the printable area of the paper, while the paper rectangle represents the entire paper, including non-printable borders. Thus, the rectangle returned by *DC.GetPaperRectPixels()* will have a top left corner whose coordinates are small negative numbers and the bottom right corner will have values somewhat larger than the width and height given by *DC.GetPageSizePixels().*


On other platforms and for PostScript printing, the paper is treated as if its entire area were printable, so this function will return the same rectangle as the page rectangle.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetPreview(self) -> 'PrintPreview':
        """ 

`GetPreview`(*self*)[¶](#wx.Printout.GetPreview "Permalink to this definition")
Returns the associated preview object if any.


If this printout object is used for previewing, returns the associated  [wx.PrintPreview](wx.PrintPreview.html#wx-printpreview). Otherwise returns `None`.


The returned pointer is not owned by the printout and must not be deleted.



Return type
 [wx.PrintPreview](wx.PrintPreview.html#wx-printpreview)





New in version 2.9.1..




See also


[`IsPreview`](#wx.Printout.IsPreview "wx.Printout.IsPreview")





            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def GetTitle(self) -> str:
        """ 

`GetTitle`(*self*)[¶](#wx.Printout.GetTitle "Permalink to this definition")
Returns the title of the printout.



Return type
`string`





Todo


the python note here was wrong





            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def HasPage(self, pageNum: int) -> bool:
        """ 

`HasPage`(*self*, *pageNum*)[¶](#wx.Printout.HasPage "Permalink to this definition")
Should be overridden to return `True` if the document has this page, or `False` if not.


Returning `False` signifies the end of the document. By default, HasPage behaves as if the document has only one page.



Parameters
**pageNum** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def IsPreview(self) -> bool:
        """ 

`IsPreview`(*self*)[¶](#wx.Printout.IsPreview "Permalink to this definition")
Returns `True` if the printout is currently being used for previewing.



Return type
*bool*





See also


[`GetPreview`](#wx.Printout.GetPreview "wx.Printout.GetPreview")





            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def MapScreenSizeToDevice(self) -> None:
        """ 

`MapScreenSizeToDevice`(*self*)[¶](#wx.Printout.MapScreenSizeToDevice "Permalink to this definition")
Set the user scale and device origin of the  [wx.DC](wx.DC.html#wx-dc) associated with this  [wx.Printout](#wx-printout) so that one screen pixel maps to one device pixel on the DC.


That is, the user scale is set to (1,1) and the device origin is set to (0,0).


Use this if you want to do your own scaling prior to calling  [wx.DC](wx.DC.html#wx-dc) drawing calls, for example, if your underlying model is floating-point and you want to achieve maximum drawing precision on high-resolution printers.


You can use the GetLogicalXXXRect() routines below to obtain the paper rectangle, page rectangle, or page margins rectangle to perform your own scaling.



Note


While the underlying drawing model of macOS is floating-point, Widgets’s drawing model scales from integer coordinates.





            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def MapScreenSizeToPage(self) -> None:
        """ 

`MapScreenSizeToPage`(*self*)[¶](#wx.Printout.MapScreenSizeToPage "Permalink to this definition")
This sets the user scale of the  [wx.DC](wx.DC.html#wx-dc) associated with this  [wx.Printout](#wx-printout) to the same scale as [`MapScreenSizeToPaper`](#wx.Printout.MapScreenSizeToPaper "wx.Printout.MapScreenSizeToPaper") but sets the logical origin to the top left corner of the page rectangle.




            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def MapScreenSizeToPageMargins(self, pageSetupData: 'PageSetupDialogData') -> None:
        """ 

`MapScreenSizeToPageMargins`(*self*, *pageSetupData*)[¶](#wx.Printout.MapScreenSizeToPageMargins "Permalink to this definition")
This sets the user scale of the  [wx.DC](wx.DC.html#wx-dc) associated with this  [wx.Printout](#wx-printout) to the same scale as [`MapScreenSizeToPageMargins`](#wx.Printout.MapScreenSizeToPageMargins "wx.Printout.MapScreenSizeToPageMargins") but sets the logical origin to the top left corner of the page margins specified by the given  [wx.PageSetupDialogData](wx.PageSetupDialogData.html#wx-pagesetupdialogdata) object.



Parameters
**pageSetupData** ([*wx.PageSetupDialogData*](wx.PageSetupDialogData.html#wx.PageSetupDialogData "wx.PageSetupDialogData")) – 






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def MapScreenSizeToPaper(self) -> None:
        """ 

`MapScreenSizeToPaper`(*self*)[¶](#wx.Printout.MapScreenSizeToPaper "Permalink to this definition")
Set the user scale and device origin of the  [wx.DC](wx.DC.html#wx-dc) associated with this  [wx.Printout](#wx-printout) so that the printed page matches the screen size as closely as possible and the logical origin is in the top left corner of the paper rectangle.


That is, a 100-pixel object on screen should appear at the same size on the printed page. (It will, of course, be larger or smaller in the preview image, depending on the zoom factor.)


Use this if you want `WYSIWYG` behaviour, e.g., in a text editor.




            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def OffsetLogicalOrigin(self, xoff, yoff) -> None:
        """ 

`OffsetLogicalOrigin`(*self*, *xoff*, *yoff*)[¶](#wx.Printout.OffsetLogicalOrigin "Permalink to this definition")
Shift the device origin by an amount specified in logical coordinates.



Parameters
* **xoff** (*int*) –
* **yoff** (*int*) –






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def OnBeginDocument(self, startPage, endPage) -> bool:
        """ 

`OnBeginDocument`(*self*, *startPage*, *endPage*)[¶](#wx.Printout.OnBeginDocument "Permalink to this definition")
Called by the framework at the start of document printing.


Return `False` from this function cancels the print job.


[`OnBeginDocument`](#wx.Printout.OnBeginDocument "wx.Printout.OnBeginDocument") is called once for every copy printed.



Parameters
* **startPage** (*int*) –
* **endPage** (*int*) –



Return type
*bool*





Note


The base [`OnBeginDocument`](#wx.Printout.OnBeginDocument "wx.Printout.OnBeginDocument") must be called (and the return value checked) from within the overridden function, since it calls [`wx.DC.StartDoc`](wx.DC.html#wx.DC.StartDoc "wx.DC.StartDoc") .





            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def OnBeginPrinting(self) -> None:
        """ 

`OnBeginPrinting`(*self*)[¶](#wx.Printout.OnBeginPrinting "Permalink to this definition")
Called by the framework at the start of printing.


[`OnBeginPrinting`](#wx.Printout.OnBeginPrinting "wx.Printout.OnBeginPrinting") is called once for every print job (regardless of how many copies are being printed).




            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def OnEndDocument(self) -> None:
        """ 

`OnEndDocument`(*self*)[¶](#wx.Printout.OnEndDocument "Permalink to this definition")
Called by the framework at the end of document printing.


[`OnEndDocument`](#wx.Printout.OnEndDocument "wx.Printout.OnEndDocument") is called once for every copy printed.



Note


The base [`OnEndDocument`](#wx.Printout.OnEndDocument "wx.Printout.OnEndDocument") must be called from within the overridden function, since it calls [`wx.DC.EndDoc`](wx.DC.html#wx.DC.EndDoc "wx.DC.EndDoc") .





            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def OnEndPrinting(self) -> None:
        """ 

`OnEndPrinting`(*self*)[¶](#wx.Printout.OnEndPrinting "Permalink to this definition")
Called by the framework at the end of printing.


OnEndPrinting is called once for every print job (regardless of how many copies are being printed).




            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def OnPreparePrinting(self) -> None:
        """ 

`OnPreparePrinting`(*self*)[¶](#wx.Printout.OnPreparePrinting "Permalink to this definition")
Called once by the framework before any other demands are made of the  [wx.Printout](#wx-printout) object.


This gives the object an opportunity to calculate the number of pages in the document, for example.




            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def OnPrintPage(self, pageNum: int) -> bool:
        """ 

`OnPrintPage`(*self*, *pageNum*)[¶](#wx.Printout.OnPrintPage "Permalink to this definition")
Called by the framework when a page should be printed.


Returning `False` cancels the print job.



Parameters
**pageNum** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    def SetLogicalOrigin(self, x, y) -> None:
        """ 

`SetLogicalOrigin`(*self*, *x*, *y*)[¶](#wx.Printout.SetLogicalOrigin "Permalink to this definition")
Set the device origin of the associated  [wx.DC](wx.DC.html#wx-dc) so that the current logical point becomes the new logical origin.



Parameters
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.Printout.html
        """

    DC: '_DC'  # `DC`[¶](#wx.Printout.DC "Permalink to this definition")See [`GetDC`](#wx.Printout.GetDC "wx.Printout.GetDC")
    LogicalPageRect: 'Rect'  # `LogicalPageRect`[¶](#wx.Printout.LogicalPageRect "Permalink to this definition")See [`GetLogicalPageRect`](#wx.Printout.GetLogicalPageRect "wx.Printout.GetLogicalPageRect")
    LogicalPaperRect: 'Rect'  # `LogicalPaperRect`[¶](#wx.Printout.LogicalPaperRect "Permalink to this definition")See [`GetLogicalPaperRect`](#wx.Printout.GetLogicalPaperRect "wx.Printout.GetLogicalPaperRect")
    PaperRectPixels: 'Rect'  # `PaperRectPixels`[¶](#wx.Printout.PaperRectPixels "Permalink to this definition")See [`GetPaperRectPixels`](#wx.Printout.GetPaperRectPixels "wx.Printout.GetPaperRectPixels")
    Preview: 'PrintPreview'  # `Preview`[¶](#wx.Printout.Preview "Permalink to this definition")See [`GetPreview`](#wx.Printout.GetPreview "wx.Printout.GetPreview")
    Title: str  # `Title`[¶](#wx.Printout.Title "Permalink to this definition")See [`GetTitle`](#wx.Printout.GetTitle "wx.Printout.GetTitle")



_Printout: TypeAlias = Printout

class PrintPreview(Object):
    """ **Possible constructors**:



```
PrintPreview(printout, printoutForPrinting=None, data=None)

PrintPreview(printout, printoutForPrinting, data)

```


Objects of this class manage the print preview process.


  


        Source: https://docs.wxpython.org/wx.PrintPreview.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PrintPreview.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, printout, printoutForPrinting=None, data=None)*


Constructor.


Pass a printout object, an optional printout object to be used for actual printing, and the address of an optional block of printer data, which will be copied to the print preview object’s print data.


If *printoutForPrinting* is not `None`, a **“Print…”** button will be placed on the preview frame so that the user can print directly from the preview interface.


Use [`IsOk`](#wx.PrintPreview.IsOk "wx.PrintPreview.IsOk") to check whether the  [wx.PrintPreview](#wx-printpreview) object was created correctly.



Parameters
* **printout** ([*wx.Printout*](wx.Printout.html#wx.Printout "wx.Printout")) –
* **printoutForPrinting** ([*wx.Printout*](wx.Printout.html#wx.Printout "wx.Printout")) –
* **data** ([*wx.PrintDialogData*](wx.PrintDialogData.html#wx.PrintDialogData "wx.PrintDialogData")) –





Note


Do not explicitly delete the printout objects once this constructor has been called, since they will be deleted in the  [wx.PrintPreview](#wx-printpreview) destructor. The same does not apply to the *data* argument.





---

  



**\_\_init\_\_** *(self, printout, printoutForPrinting, data)*



Parameters
* **printout** ([*wx.Printout*](wx.Printout.html#wx.Printout "wx.Printout")) –
* **printoutForPrinting** ([*wx.Printout*](wx.Printout.html#wx.Printout "wx.Printout")) –
* **data** ([*wx.PrintData*](wx.PrintData.html#wx.PrintData "wx.PrintData")) –






---

  





            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def GetCanvas(self) -> 'PreviewCanvas':
        """ 

`GetCanvas`(*self*)[¶](#wx.PrintPreview.GetCanvas "Permalink to this definition")
Gets the preview window used for displaying the print preview image.



Return type
 [wx.PreviewCanvas](wx.PreviewCanvas.html#wx-previewcanvas)






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def GetCurrentPage(self) -> int:
        """ 

`GetCurrentPage`(*self*)[¶](#wx.PrintPreview.GetCurrentPage "Permalink to this definition")
Gets the page currently being previewed.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def GetFrame(self) -> 'Frame':
        """ 

`GetFrame`(*self*)[¶](#wx.PrintPreview.GetFrame "Permalink to this definition")
Gets the frame used for displaying the print preview canvas and control bar.



Return type
 [wx.Frame](wx.Frame.html#wx-frame)






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def GetMaxPage(self) -> int:
        """ 

`GetMaxPage`(*self*)[¶](#wx.PrintPreview.GetMaxPage "Permalink to this definition")
Returns the maximum page number.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def GetMinPage(self) -> int:
        """ 

`GetMinPage`(*self*)[¶](#wx.PrintPreview.GetMinPage "Permalink to this definition")
Returns the minimum page number.



Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def GetPrintout(self) -> 'Printout':
        """ 

`GetPrintout`(*self*)[¶](#wx.PrintPreview.GetPrintout "Permalink to this definition")
Gets the preview printout object associated with the  [wx.PrintPreview](#wx-printpreview) object.



Return type
 [wx.Printout](wx.Printout.html#wx-printout)






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def GetPrintoutForPrinting(self) -> 'Printout':
        """ 

`GetPrintoutForPrinting`(*self*)[¶](#wx.PrintPreview.GetPrintoutForPrinting "Permalink to this definition")
Gets the printout object to be used for printing from within the preview interface, or `None` if none exists.



Return type
 [wx.Printout](wx.Printout.html#wx-printout)






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.PrintPreview.IsOk "Permalink to this definition")
Returns `True` if the  [wx.PrintPreview](#wx-printpreview) is valid, `False` otherwise.


It could return `False` if there was a problem initializing the printer device context (current printer not set, for example).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def PaintPage(self, canvas, dc) -> bool:
        """ 

`PaintPage`(*self*, *canvas*, *dc*)[¶](#wx.PrintPreview.PaintPage "Permalink to this definition")
This refreshes the preview window with the preview image.


It must be called from the preview window’s OnPaint member.


The implementation simply blits the preview bitmap onto the canvas, creating a new preview bitmap if none exists.



Parameters
* **canvas** ([*wx.PreviewCanvas*](wx.PreviewCanvas.html#wx.PreviewCanvas "wx.PreviewCanvas")) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def Print(self, prompt: bool) -> bool:
        """ 

`Print`(*self*, *prompt*)[¶](#wx.PrintPreview.Print "Permalink to this definition")
Invokes the print process using the second  [wx.Printout](wx.Printout.html#wx-printout) object supplied in the  [wx.PrintPreview](#wx-printpreview) constructor.


Will normally be called by the **Print**… panel item on the preview frame’s control bar.


Returns `False` in case of error – call [`wx.Printer.GetLastError`](wx.Printer.html#wx.Printer.GetLastError "wx.Printer.GetLastError") to get detailed information about the kind of the error.



Parameters
**prompt** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def RenderPage(self, pageNum: int) -> bool:
        """ 

`RenderPage`(*self*, *pageNum*)[¶](#wx.PrintPreview.RenderPage "Permalink to this definition")
Renders a page into a  [wx.MemoryDC](wx.MemoryDC.html#wx-memorydc).


Used internally by  [wx.PrintPreview](#wx-printpreview).



Parameters
**pageNum** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def SetCanvas(self, window: 'PreviewCanvas') -> None:
        """ 

`SetCanvas`(*self*, *window*)[¶](#wx.PrintPreview.SetCanvas "Permalink to this definition")
Sets the window to be used for displaying the print preview image.



Parameters
**window** ([*wx.PreviewCanvas*](wx.PreviewCanvas.html#wx.PreviewCanvas "wx.PreviewCanvas")) – 






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def SetCurrentPage(self, pageNum: int) -> bool:
        """ 

`SetCurrentPage`(*self*, *pageNum*)[¶](#wx.PrintPreview.SetCurrentPage "Permalink to this definition")
Sets the current page to be previewed.



Parameters
**pageNum** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def SetFrame(self, frame: 'Frame') -> None:
        """ 

`SetFrame`(*self*, *frame*)[¶](#wx.PrintPreview.SetFrame "Permalink to this definition")
Sets the frame to be used for displaying the print preview canvas and control bar.



Parameters
**frame** ([*wx.Frame*](wx.Frame.html#wx.Frame "wx.Frame")) – 






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def SetPrintout(self, printout: 'Printout') -> None:
        """ 

`SetPrintout`(*self*, *printout*)[¶](#wx.PrintPreview.SetPrintout "Permalink to this definition")
Associates a printout object with the  [wx.PrintPreview](#wx-printpreview) object.



Parameters
**printout** ([*wx.Printout*](wx.Printout.html#wx.Printout "wx.Printout")) – 






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def SetZoom(self, percent: int) -> None:
        """ 

`SetZoom`(*self*, *percent*)[¶](#wx.PrintPreview.SetZoom "Permalink to this definition")
Sets the percentage preview zoom, and refreshes the preview canvas accordingly.



Parameters
**percent** (*int*) – 






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.PrintPreview.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.PrintPreview.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.PrintPreview.html
        """

    Canvas: 'PreviewCanvas'  # `Canvas`[¶](#wx.PrintPreview.Canvas "Permalink to this definition")See [`GetCanvas`](#wx.PrintPreview.GetCanvas "wx.PrintPreview.GetCanvas") and [`SetCanvas`](#wx.PrintPreview.SetCanvas "wx.PrintPreview.SetCanvas")
    CurrentPage: int  # `CurrentPage`[¶](#wx.PrintPreview.CurrentPage "Permalink to this definition")See [`GetCurrentPage`](#wx.PrintPreview.GetCurrentPage "wx.PrintPreview.GetCurrentPage") and [`SetCurrentPage`](#wx.PrintPreview.SetCurrentPage "wx.PrintPreview.SetCurrentPage")
    Frame: '_Frame'  # `Frame`[¶](#wx.PrintPreview.Frame "Permalink to this definition")See [`GetFrame`](#wx.PrintPreview.GetFrame "wx.PrintPreview.GetFrame") and [`SetFrame`](#wx.PrintPreview.SetFrame "wx.PrintPreview.SetFrame")
    MaxPage: int  # `MaxPage`[¶](#wx.PrintPreview.MaxPage "Permalink to this definition")See [`GetMaxPage`](#wx.PrintPreview.GetMaxPage "wx.PrintPreview.GetMaxPage")
    MinPage: int  # `MinPage`[¶](#wx.PrintPreview.MinPage "Permalink to this definition")See [`GetMinPage`](#wx.PrintPreview.GetMinPage "wx.PrintPreview.GetMinPage")
    Printout: '_Printout'  # `Printout`[¶](#wx.PrintPreview.Printout "Permalink to this definition")See [`GetPrintout`](#wx.PrintPreview.GetPrintout "wx.PrintPreview.GetPrintout") and [`SetPrintout`](#wx.PrintPreview.SetPrintout "wx.PrintPreview.SetPrintout")
    PrintoutForPrinting: 'Printout'  # `PrintoutForPrinting`[¶](#wx.PrintPreview.PrintoutForPrinting "Permalink to this definition")See [`GetPrintoutForPrinting`](#wx.PrintPreview.GetPrintoutForPrinting "wx.PrintPreview.GetPrintoutForPrinting")



_InputStream: TypeAlias = InputStream

_OutputStream: TypeAlias = OutputStream

class Process(EvtHandler):
    """ **Possible constructors**:



```
Process(parent=None, id=-1)

Process(flags)

```


The objects of this class are used in conjunction with the Execute()
function.


  


        Source: https://docs.wxpython.org/wx.Process.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Process.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, parent=None, id=-1)*


Constructs a process object.


*id* is only used in the case you want to use wxWidgets events. It identifies this object, or another window that will receive the event.


If the *parent* parameter is different from `None`, it will receive a `wxEVT_END_PROCESS` notification event (you should insert `EVT_END_PROCESS` macro in the event table of the parent to handle it) with the given *id*.



Parameters
* **parent** ([*wx.EvtHandler*](wx.EvtHandler.html#wx.EvtHandler "wx.EvtHandler")) – The event handler parent.
* **id** (*int*) – id of an event.






---

  



**\_\_init\_\_** *(self, flags)*


Creates an object without any associated parent (and hence no id either) but allows specifying the *flags* which can have the value of `PROCESS_DEFAULT` or `PROCESS_REDIRECT` .


Specifying the former value has no particular effect while using the latter one is equivalent to calling [`Redirect`](#wx.Process.Redirect "wx.Process.Redirect") .



Parameters
**flags** (*int*) – 






---

  





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def Activate(self) -> bool:
        """ 

`Activate`(*self*)[¶](#wx.Process.Activate "Permalink to this definition")
Activates a GUI process by bringing up its main window to the front.


This is a convenient method which tries to bring this process to the users attention.


Currently this is implemented in wxMSW only and simply returns `False` under the other platforms. Notice that this function can also return `False` under MSW if, for example, the process doesn’t have any windows.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def CloseOutput(self) -> None:
        """ 

`CloseOutput`(*self*)[¶](#wx.Process.CloseOutput "Permalink to this definition")
Closes the output stream (the one connected to the stdin of the child process).


This function can be used to indicate to the child process that there is no more data to be read - usually, a filter program will only terminate when the input stream is closed.


Notice that [`GetOutputStream`](#wx.Process.GetOutputStream "wx.Process.GetOutputStream") will return `None` after the output stream is closed.




            Source: https://docs.wxpython.org/wx.Process.html
        """

    def Detach(self) -> None:
        """ 

`Detach`(*self*)[¶](#wx.Process.Detach "Permalink to this definition")
Detaches this event handler from the parent specified in the constructor (see [`wx.EvtHandler.Unlink`](wx.EvtHandler.html#wx.EvtHandler.Unlink "wx.EvtHandler.Unlink") for a similar but not identical function).


Normally, a  [wx.Process](#wx-process) object is deleted by its parent when it receives the notification about the process termination.


However, it might happen that the parent object is destroyed before the external process is terminated (e.g. a window from which this external process was launched is closed by the user) and in this case it **should** not delete the  [wx.Process](#wx-process) object, but **should** call [`Detach`](#wx.Process.Detach "wx.Process.Detach") instead.


After the  [wx.Process](#wx-process) object is detached from its parent, no notification events will be sent to the parent and the object will delete itself upon reception of the process termination notification.




            Source: https://docs.wxpython.org/wx.Process.html
        """

    @staticmethod
    def Exists(pid: int) -> bool:
        """ 

*static* `Exists`(*pid*)[¶](#wx.Process.Exists "Permalink to this definition")
Returns `True` if the given process exists in the system.



Parameters
**pid** (*int*) – 



Return type
*bool*





See also


[`wx.Kill`](wx.functions.html#wx.Kill "wx.Kill") , Exec sample





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def GetErrorStream(self) -> 'InputStream':
        """ 

`GetErrorStream`(*self*)[¶](#wx.Process.GetErrorStream "Permalink to this definition")
Returns an input stream which corresponds to the standard error output (stderr) of the child process.



Return type
 [wx.InputStream](wx.InputStream.html#wx-inputstream)






            Source: https://docs.wxpython.org/wx.Process.html
        """

    def GetInputStream(self) -> 'InputStream':
        """ 

`GetInputStream`(*self*)[¶](#wx.Process.GetInputStream "Permalink to this definition")
It returns an input stream corresponding to the standard output stream of the subprocess.


If it is `None`, you have not turned on the redirection.



Return type
 [wx.InputStream](wx.InputStream.html#wx-inputstream)





See also


[`Redirect`](#wx.Process.Redirect "wx.Process.Redirect") .





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def GetOutputStream(self) -> 'OutputStream':
        """ 

`GetOutputStream`(*self*)[¶](#wx.Process.GetOutputStream "Permalink to this definition")
It returns an output stream corresponding to the input stream of the subprocess.


If it is `None`, you have not turned on the redirection or already called [`CloseOutput`](#wx.Process.CloseOutput "wx.Process.CloseOutput") .



Return type
 [wx.OutputStream](wx.OutputStream.html#wx-outputstream)





See also


[`Redirect`](#wx.Process.Redirect "wx.Process.Redirect") .





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def GetPid(self) -> int:
        """ 

`GetPid`(*self*)[¶](#wx.Process.GetPid "Permalink to this definition")
Returns the process `ID` of the process launched by [`Open`](#wx.Process.Open "wx.Process.Open") or set by [`wx.Execute`](wx.functions.html#wx.Execute "wx.Execute") (if you passed this  [wx.Process](#wx-process) as argument).



Return type
*long*






            Source: https://docs.wxpython.org/wx.Process.html
        """

    def IsErrorAvailable(self) -> bool:
        """ 

`IsErrorAvailable`(*self*)[¶](#wx.Process.IsErrorAvailable "Permalink to this definition")
Returns `True` if there is data to be read on the child process standard error stream.



Return type
*bool*





See also


[`IsInputAvailable`](#wx.Process.IsInputAvailable "wx.Process.IsInputAvailable")





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def IsInputAvailable(self) -> bool:
        """ 

`IsInputAvailable`(*self*)[¶](#wx.Process.IsInputAvailable "Permalink to this definition")
Returns `True` if there is data to be read on the child process standard output stream.


This allows writing simple (and extremely inefficient) polling-based code waiting for a better mechanism in future wxWidgets versions. See the exec sample for an example of using this function.



Return type
*bool*





See also


[`IsInputOpened`](#wx.Process.IsInputOpened "wx.Process.IsInputOpened")





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def IsInputOpened(self) -> bool:
        """ 

`IsInputOpened`(*self*)[¶](#wx.Process.IsInputOpened "Permalink to this definition")
Returns `True` if the child process standard output stream is opened.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Process.html
        """

    @staticmethod
    def Kill(pid, sig=SIGTERM, flags=KILL_NOCHILDREN) -> 'KillError':
        """ 

*static* `Kill`(*pid*, *sig=SIGTERM*, *flags=KILL\_NOCHILDREN*)[¶](#wx.Process.Kill "Permalink to this definition")
Send the specified signal to the given process.


Possible signal values can be one of the  [wx.Signal](wx.Signal.enumeration.html#wx-signal) enumeration values.



> `SIGNONE` , `SIGKILL` and `SIGTERM` have the same meaning under both Unix and Windows but all the other signals are equivalent to `SIGTERM` under Windows.


The *flags* parameter can be `KILL_NOCHILDREN` (the default), or `KILL_CHILDREN` , in which case the child processes of this process will be killed too. Note that under Unix, for `KILL_CHILDREN` to work you should have created the process passing `EXEC_MAKE_GROUP_LEADER` .


Returns the element of  [wx.KillError](wx.KillError.enumeration.html#wx-killerror) enum.



Parameters
* **pid** (*int*) –
* **sig** ([*Signal*](wx.Signal.enumeration.html "Signal")) –
* **flags** (*int*) –



Return type
 [wx.KillError](wx.KillError.enumeration.html#wx-killerror)





See also


[`Exists`](#wx.Process.Exists "wx.Process.Exists") , [`wx.Kill`](wx.functions.html#wx.Kill "wx.Kill") , Exec sample





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def OnTerminate(self, pid, status) -> None:
        """ 

`OnTerminate`(*self*, *pid*, *status*)[¶](#wx.Process.OnTerminate "Permalink to this definition")
It is called when the process with the pid *pid* finishes.


It raises a wxWidgets event when it isn’t overridden.


Note that this function won’t be called if you [`wx.Kill`](wx.functions.html#wx.Kill "wx.Kill") the process.



Parameters
* **pid** (*int*) – The pid of the process which has just terminated.
* **status** (*int*) – The exit code of the process.






            Source: https://docs.wxpython.org/wx.Process.html
        """

    @staticmethod
    def Open(cmd, flags=EXEC_ASYNC) -> 'Process':
        """ 

*static* `Open`(*cmd*, *flags=EXEC\_ASYNC*)[¶](#wx.Process.Open "Permalink to this definition")
This static method replaces the standard `popen()` function: it launches the process specified by the `cmd` parameter and returns the  [wx.Process](#wx-process) object which can be used to retrieve the streams connected to the standard input, output and error output of the child process.


If the process couldn’t be launched, `None` is returned.



Parameters
* **cmd** (*string*) – The command to execute, including optional arguments.
* **flags** (*int*) – The flags to pass to [`wx.Execute`](wx.functions.html#wx.Execute "wx.Execute") . Note: `EXEC_SYNC` should not be used.



Return type
 [wx.Process](#wx-process)



Returns
A pointer to new  [wx.Process](#wx-process) object or `None` on error.





Note


In any case the returned pointer should **not** be deleted, rather the process object will be destroyed automatically when the child process terminates. This does mean that the child process should be told to quit before the main program exits to avoid memory leaks.




See also


[`wx.Execute`](wx.functions.html#wx.Execute "wx.Execute")





            Source: https://docs.wxpython.org/wx.Process.html
        """

    def Redirect(self) -> None:
        """ 

`Redirect`(*self*)[¶](#wx.Process.Redirect "Permalink to this definition")
Turns on redirection.


[`wx.Execute`](wx.functions.html#wx.Execute "wx.Execute") will try to open a couple of pipes to catch the subprocess stdio. The caught input stream is returned by [`GetOutputStream`](#wx.Process.GetOutputStream "wx.Process.GetOutputStream") as a non-seekable stream. The caught output stream is returned by [`GetInputStream`](#wx.Process.GetInputStream "wx.Process.GetInputStream") as a non-seekable stream.




            Source: https://docs.wxpython.org/wx.Process.html
        """

    def SetPriority(self, priority: Any) -> None:
        """ 

`SetPriority`(*self*, *priority*)[¶](#wx.Process.SetPriority "Permalink to this definition")
Sets the priority of the process, between 0 (lowest) and 100 (highest).


It can only be set before the process is created.


The following symbolic constants can be used in addition to raw values in 0..100 range:


* `PRIORITY_MIN`: 0
* `PRIORITY_DEFAULT`: 50
* `PRIORITY_MAX`: 100



Parameters
**priority** – 





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Process.html
        """

    ErrorStream: 'InputStream'  # `ErrorStream`[¶](#wx.Process.ErrorStream "Permalink to this definition")See [`GetErrorStream`](#wx.Process.GetErrorStream "wx.Process.GetErrorStream")
    InputStream: '_InputStream'  # `InputStream`[¶](#wx.Process.InputStream "Permalink to this definition")See [`GetInputStream`](#wx.Process.GetInputStream "wx.Process.GetInputStream")
    OutputStream: '_OutputStream'  # `OutputStream`[¶](#wx.Process.OutputStream "Permalink to this definition")See [`GetOutputStream`](#wx.Process.GetOutputStream "wx.Process.GetOutputStream")
    Pid: int  # `Pid`[¶](#wx.Process.Pid "Permalink to this definition")See [`GetPid`](#wx.Process.GetPid "wx.Process.GetPid")



EVT_END_PROCESS: int  # Process a  wxEVT_END_PROCESS   event, sent by  wx.Process.OnTerminate   upon the external process termination. ^^

class ProcessEvent(Event):
    """ **Possible constructors**:



```
ProcessEvent(id=0, pid=0, exitcode=0)

```


A process event is sent to the EvtHandler specified to Process
when a process is terminated.


  


        Source: https://docs.wxpython.org/wx.ProcessEvent.html
    """
    def __init__(self, id=0, pid=0, exitcode=0) -> None:
        """ 

`__init__`(*self*, *id=0*, *pid=0*, *exitcode=0*)[¶](#wx.ProcessEvent.__init__ "Permalink to this definition")
Constructor.


Takes a ProcessObject or window id, a process id and an exit status.



Parameters
* **id** (*int*) –
* **pid** (*int*) –
* **exitcode** (*int*) –






            Source: https://docs.wxpython.org/wx.ProcessEvent.html
        """

    def GetExitCode(self) -> int:
        """ 

`GetExitCode`(*self*)[¶](#wx.ProcessEvent.GetExitCode "Permalink to this definition")
Returns the exist status.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ProcessEvent.html
        """

    def GetPid(self) -> int:
        """ 

`GetPid`(*self*)[¶](#wx.ProcessEvent.GetPid "Permalink to this definition")
Returns the process id.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ProcessEvent.html
        """

    ExitCode: int  # `ExitCode`[¶](#wx.ProcessEvent.ExitCode "Permalink to this definition")See [`GetExitCode`](#wx.ProcessEvent.GetExitCode "wx.ProcessEvent.GetExitCode")
    Pid: int  # `Pid`[¶](#wx.ProcessEvent.Pid "Permalink to this definition")See [`GetPid`](#wx.ProcessEvent.GetPid "wx.ProcessEvent.GetPid")



class ProgressDialog(GenericProgressDialog):
    """ **Possible constructors**:



```
ProgressDialog(title, message, maximum=100, parent=None,
               style=PD_APP_MODAL|PD_AUTO_HIDE)

```


If supported by the platform this class will provide the platform’s
native progress dialog, else it will simply be the
GenericProgressDialog.


  


        Source: https://docs.wxpython.org/wx.ProgressDialog.html
    """
    def __init__(self, title, message, maximum=100, parent=None, style=PD_APP_MODAL|PD_AUTO_HIDE) -> None:
        """ 

`__init__`(*self*, *title*, *message*, *maximum=100*, *parent=None*, *style=PD\_APP\_MODAL|PD\_AUTO\_HIDE*)[¶](#wx.ProgressDialog.__init__ "Permalink to this definition")

Parameters
* **title** (*string*) –
* **message** (*string*) –
* **maximum** (*int*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **style** (*int*) –






            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ProgressDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def GetMessage(self) -> str:
        """ 

`GetMessage`(*self*)[¶](#wx.ProgressDialog.GetMessage "Permalink to this definition")
Returns the last message passed to the [`Update`](#wx.ProgressDialog.Update "wx.ProgressDialog.Update") function; if you always passed “” to [`Update`](#wx.ProgressDialog.Update "wx.ProgressDialog.Update") then the message set through the constructor is returned.



Return type
`string`





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def GetRange(self) -> int:
        """ 

`GetRange`(*self*)[¶](#wx.ProgressDialog.GetRange "Permalink to this definition")
Returns the maximum value of the progress meter, as passed to the constructor or `NOT_FOUND` if the dialog has no progress bar.



Return type
*int*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.ProgressDialog.GetValue "Permalink to this definition")
Returns the last value passed to the [`Update`](#wx.ProgressDialog.Update "wx.ProgressDialog.Update") function or `NOT_FOUND` if the dialog has no progress bar.



Return type
*int*





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def Pulse(self, newmsg: str="") -> tuple:
        """ 

`Pulse`(*self*, *newmsg=""*)[¶](#wx.ProgressDialog.Pulse "Permalink to this definition")
Like [`Update`](#wx.ProgressDialog.Update "wx.ProgressDialog.Update") but makes the gauge control run in indeterminate mode.


In indeterminate mode the remaining and the estimated time labels (if present) are set to “Unknown” or to *newmsg* (if it’s non-empty). Each call to this function moves the progress bar a bit to indicate that some progress was done.



Parameters
**newmsg** (*string*) – 



Return type
*tuple*



Returns
( *bool*, *skip* )





See also


[`wx.Gauge.Pulse`](wx.Gauge.html#wx.Gauge.Pulse "wx.Gauge.Pulse") , [`Update`](#wx.ProgressDialog.Update "wx.ProgressDialog.Update")





            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def Resume(self) -> None:
        """ 

`Resume`(*self*)[¶](#wx.ProgressDialog.Resume "Permalink to this definition")
Can be used to continue with the dialog, after the user had clicked the “Abort” button.




            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def SetRange(self, maximum: int) -> None:
        """ 

`SetRange`(*self*, *maximum*)[¶](#wx.ProgressDialog.SetRange "Permalink to this definition")
Changes the maximum value of the progress meter given in the constructor.


This function can only be called (with a positive value) if the value passed in the constructor was positive.



Parameters
**maximum** (*int*) – 





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def Update(self, value, newmsg="") -> tuple:
        """ 

`Update`(*self*, *value*, *newmsg=""*)[¶](#wx.ProgressDialog.Update "Permalink to this definition")
Updates the dialog, setting the progress bar to the new value and updating the message if new one is specified.


Returns `True` unless the “Cancel” button has been pressed.


If `False` is returned, the application can either immediately destroy the dialog or ask the user for the confirmation and if the abort is not confirmed the dialog may be resumed with [`Resume`](#wx.ProgressDialog.Resume "wx.ProgressDialog.Resume") function.


If *value* is the maximum value for the dialog, the behaviour of the function depends on whether `PD_AUTO_HIDE` was used when the dialog was created. If it was, the dialog is hidden and the function returns immediately. If it was not, the dialog becomes a modal dialog and waits for the user to dismiss it, meaning that this function does not return until this happens.


Notice that if *newmsg* is longer than the currently shown message, the dialog will be automatically made wider to account for it. However if the new message is shorter than the previous one, the dialog doesn’t shrink back to avoid constant resizes if the message is changed often. To do this and fit the dialog to its current contents you may call `Fit` explicitly. However the native MSW implementation of this class does make the dialog shorter if the new text has fewer lines of text than the old one, so it is recommended to keep the number of lines of text constant in order to avoid jarring dialog size changes. You may also want to make the initial message, specified when creating the dialog, wide enough to avoid having to resize the dialog later, e.g. by appending a long string of unbreakable spaces ( *String* (L’\u00a0’, 100)) to it.



Parameters
* **value** (*int*) – The new value of the progress meter. It should be less than or equal to the maximum value given to the constructor.
* **newmsg** (*string*) – The new messages for the progress dialog text, if it is empty (which is the default) the message is not changed.



Return type
*tuple*



Returns
( *bool*, *skip* )






            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def WasCancelled(self) -> bool:
        """ 

`WasCancelled`(*self*)[¶](#wx.ProgressDialog.WasCancelled "Permalink to this definition")
Returns `True` if the “Cancel” button was pressed.


Normally a Cancel button press is indicated by [`Update`](#wx.ProgressDialog.Update "wx.ProgressDialog.Update") returning `False` but sometimes it may be more convenient to check if the dialog was cancelled from elsewhere in the code and this function allows doing it.


It always returns `False` if the Cancel button is not shown at all.



Return type
*bool*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    def WasSkipped(self) -> bool:
        """ 

`WasSkipped`(*self*)[¶](#wx.ProgressDialog.WasSkipped "Permalink to this definition")
Returns `True` if the “Skip” button was pressed.


This is similar to [`WasCancelled`](#wx.ProgressDialog.WasCancelled "wx.ProgressDialog.WasCancelled") but returns `True` if the “Skip” button was pressed, not the “Cancel” one.



Return type
*bool*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.ProgressDialog.html
        """

    Message: str  # `Message`[¶](#wx.ProgressDialog.Message "Permalink to this definition")See [`GetMessage`](#wx.ProgressDialog.GetMessage "wx.ProgressDialog.GetMessage")
    Range: int  # `Range`[¶](#wx.ProgressDialog.Range "Permalink to this definition")See [`GetRange`](#wx.ProgressDialog.GetRange "wx.ProgressDialog.GetRange") and [`SetRange`](#wx.ProgressDialog.SetRange "wx.ProgressDialog.SetRange")
    Value: int  # `Value`[¶](#wx.ProgressDialog.Value "Permalink to this definition")See [`GetValue`](#wx.ProgressDialog.GetValue "wx.ProgressDialog.GetValue")



class PropagateOnce:
    """ **Possible constructors**:



```
PropagateOnce(event)

```


Helper class to temporarily lower propagation level.


  


        Source: https://docs.wxpython.org/wx.PropagateOnce.html
    """
    def __init__(self, event: 'Event') -> None:
        """ 

`__init__`(*self*, *event*)[¶](#wx.PropagateOnce.__init__ "Permalink to this definition")

Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 






            Source: https://docs.wxpython.org/wx.PropagateOnce.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.PropagateOnce.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PropagateOnce.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.PropagateOnce.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PropagateOnce.html
        """



class PropagationDisabler:
    """ **Possible constructors**:



```
PropagationDisabler(event)

```


Helper class to temporarily change an event to not propagate.


  


        Source: https://docs.wxpython.org/wx.PropagationDisabler.html
    """
    def __init__(self, event: 'Event') -> None:
        """ 

`__init__`(*self*, *event*)[¶](#wx.PropagationDisabler.__init__ "Permalink to this definition")

Parameters
**event** ([*wx.Event*](wx.Event.html#wx.Event "wx.Event")) – 






            Source: https://docs.wxpython.org/wx.PropagationDisabler.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.PropagationDisabler.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PropagationDisabler.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.PropagationDisabler.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PropagationDisabler.html
        """



EVT_DIALUP_CONNECTED: int  # A connection with the network was established. See DialUpEvent     .

EVT_DIALUP_DISCONNECTED: int  # The connection with the network was lost. See DialUpEvent     .

class PyCommandEvent:
    """ **Possible constructors**:



```
PyCommandEvent(eventType=wxEVT_NULL, id=0)

```


`PyCommandEvent` can be used as a base class for implementing
custom event types in Python. You should derive from this class
instead of `CommandEvent` because this class is Python-aware
and is able to transport its Python bits safely through the
wxWidgets event system and have them still be there when the
event handler is invoked. Note that since `PyCommandEvent` is
taking care of preserving the extra attributes that have been set
then you do not need to override the Clone method in your
derived classes.



See also


`PyEvent`



  


        Source: https://docs.wxpython.org/wx.PyCommandEvent.html
    """
    def __init__(self, eventType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *eventType=wxEVT\_NULL*, *id=0*)[¶](#wx.PyCommandEvent.__init__ "Permalink to this definition")

Parameters
* **eventType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.PyCommandEvent.html
        """

    def Clone(self) -> None:
        """ 

`Clone`(*self*)[¶](#wx.PyCommandEvent.Clone "Permalink to this definition")
Make a new instance of the event that is a copy of self.


Through the magic of Python this implementation should work for
this and all derived classes.




            Source: https://docs.wxpython.org/wx.PyCommandEvent.html
        """

    def __delattr__(self, name: Any) -> None:
        """ 

`__delattr__`(*self*, *name*)[¶](#wx.PyCommandEvent.__delattr__ "Permalink to this definition")

Parameters
**name** (*PyObject*) – 






            Source: https://docs.wxpython.org/wx.PyCommandEvent.html
        """

    def __getattr__(self, name: Any) -> Any:
        """ 

`__getattr__`(*self*, *name*)[¶](#wx.PyCommandEvent.__getattr__ "Permalink to this definition")

Parameters
**name** (*PyObject*) – 



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.PyCommandEvent.html
        """

    def __setattr__(self, name, value) -> None:
        """ 

`__setattr__`(*self*, *name*, *value*)[¶](#wx.PyCommandEvent.__setattr__ "Permalink to this definition")

Parameters
* **name** (*PyObject*) –
* **value** (*PyObject*) –






            Source: https://docs.wxpython.org/wx.PyCommandEvent.html
        """

    def _getAttrDict(self) -> Any:
        """ 

`_getAttrDict`(*self*)[¶](#wx.PyCommandEvent._getAttrDict "Permalink to this definition")
Gives access to the internal object that is tracking the event’s python attributes.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.PyCommandEvent.html
        """



class PyEvent:
    """ **Possible constructors**:



```
PyEvent(id=0, eventType=wxEVT_NULL)

```


`PyEvent` can be used as a base class for implementing custom
event types in Python. You should derive from this class instead
of `Event` because this class is Python-aware and is able to
transport its Python bits safely through the wxWidgets event
system and have them still be there when the event handler is
invoked. Note that since `PyEvent` is taking care of preserving
the extra attributes that have been set then you do not need to
override the Clone method in your derived classes.



See also


`PyCommandEvent`



  


        Source: https://docs.wxpython.org/wx.PyEvent.html
    """
    def __init__(self, id=0, eventType=wxEVT_NULL) -> None:
        """ 

`__init__`(*self*, *id=0*, *eventType=wxEVT\_NULL*)[¶](#wx.PyEvent.__init__ "Permalink to this definition")

Parameters
* **id** (*int*) –
* **eventType** (*wx.EventType*) –






            Source: https://docs.wxpython.org/wx.PyEvent.html
        """

    def Clone(self) -> None:
        """ 

`Clone`(*self*)[¶](#wx.PyEvent.Clone "Permalink to this definition")
Make a new instance of the event that is a copy of self.


Through the magic of Python this implementation should work for
this and all derived classes.




            Source: https://docs.wxpython.org/wx.PyEvent.html
        """

    def __delattr__(self, name: Any) -> None:
        """ 

`__delattr__`(*self*, *name*)[¶](#wx.PyEvent.__delattr__ "Permalink to this definition")

Parameters
**name** (*PyObject*) – 






            Source: https://docs.wxpython.org/wx.PyEvent.html
        """

    def __getattr__(self, name: Any) -> Any:
        """ 

`__getattr__`(*self*, *name*)[¶](#wx.PyEvent.__getattr__ "Permalink to this definition")

Parameters
**name** (*PyObject*) – 



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.PyEvent.html
        """

    def __setattr__(self, name, value) -> None:
        """ 

`__setattr__`(*self*, *name*, *value*)[¶](#wx.PyEvent.__setattr__ "Permalink to this definition")

Parameters
* **name** (*PyObject*) –
* **value** (*PyObject*) –






            Source: https://docs.wxpython.org/wx.PyEvent.html
        """

    def _getAttrDict(self) -> Any:
        """ 

`_getAttrDict`(*self*)[¶](#wx.PyEvent._getAttrDict "Permalink to this definition")
Gives access to the internal object that is tracking the event’s python attributes.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.PyEvent.html
        """



class PyEventBinder:
    """ Instances of this class are used to bind specific events to event handlers.


  


        Source: https://docs.wxpython.org/wx.PyEventBinder.html
    """
    def __init__(self, evtType, expectedIDs=0) -> None:
        """ 

`__init__`(*self*, *evtType*, *expectedIDs=0*)[¶](#wx.PyEventBinder.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PyEventBinder.html
        """

    def Bind(self, target, id1, id2, function) -> None:
        """ 

`Bind`(*self*, *target*, *id1*, *id2*, *function*)[¶](#wx.PyEventBinder.Bind "Permalink to this definition")
Bind this set of event types to target using its Connect() method.




            Source: https://docs.wxpython.org/wx.PyEventBinder.html
        """

    def Unbind(self, target, id1, id2, handler=None) -> None:
        """ 

`Unbind`(*self*, *target*, *id1*, *id2*, *handler=None*)[¶](#wx.PyEventBinder.Unbind "Permalink to this definition")
Remove an event binding.




            Source: https://docs.wxpython.org/wx.PyEventBinder.html
        """

    def __call__(self, *args) -> None:
        """ 

`__call__`(*self*, *\*args*)[¶](#wx.PyEventBinder.__call__ "Permalink to this definition")
For backwards compatibility with the old `EVT_*` functions.
Should be called with either (window, func), (window, ID,
func) or (window, ID1, ID2, func) parameters depending on the
type of the event.




            Source: https://docs.wxpython.org/wx.PyEventBinder.html
        """

    def _getEvtType(self) -> None:
        """ 

`_getEvtType`(*self*)[¶](#wx.PyEventBinder._getEvtType "Permalink to this definition")
Make it easy to get to the default wxEventType typeID for this
event binder.




            Source: https://docs.wxpython.org/wx.PyEventBinder.html
        """

    typeId: Any  # `typeId`[¶](#wx.PyEventBinder.typeId "Permalink to this definition")See [`_getEvtType`](#wx.PyEventBinder._getEvtType "wx.PyEventBinder._getEvtType")



class PyOnDemandOutputWindow:
    """ A class that can be used for redirecting Python’s stdout and
stderr streams. It will do nothing until something is wrriten to
the stream at which point it will create a Frame with a text area
and write the text there.


  


        Source: https://docs.wxpython.org/wx.PyOnDemandOutputWindow.html
    """
    def __init__(self, title="wxPython: stdout/stderr") -> None:
        """ 

`__init__`(*self*, *title="wxPython: stdout/stderr"*)[¶](#wx.PyOnDemandOutputWindow.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PyOnDemandOutputWindow.html
        """

    def CreateOutputWindow(self, txt) -> None:
        """ 

`CreateOutputWindow`(*self*, *txt*)[¶](#wx.PyOnDemandOutputWindow.CreateOutputWindow "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PyOnDemandOutputWindow.html
        """

    def OnCloseWindow(self, event) -> None:
        """ 

`OnCloseWindow`(*self*, *event*)[¶](#wx.PyOnDemandOutputWindow.OnCloseWindow "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PyOnDemandOutputWindow.html
        """

    def SetParent(self, parent) -> None:
        """ 

`SetParent`(*self*, *parent*)[¶](#wx.PyOnDemandOutputWindow.SetParent "Permalink to this definition")
Set the window to be used as the popup Frame’s parent.




            Source: https://docs.wxpython.org/wx.PyOnDemandOutputWindow.html
        """

    def close(self) -> None:
        """ 

`close`(*self*)[¶](#wx.PyOnDemandOutputWindow.close "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PyOnDemandOutputWindow.html
        """

    def flush(self) -> None:
        """ 

`flush`(*self*)[¶](#wx.PyOnDemandOutputWindow.flush "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PyOnDemandOutputWindow.html
        """

    def write(self, text) -> None:
        """ 

`write`(*self*, *text*)[¶](#wx.PyOnDemandOutputWindow.write "Permalink to this definition")
Create the output window if needed and write the string to it.
If not called in the context of the gui thread then CallAfter is
used to do the work there.




            Source: https://docs.wxpython.org/wx.PyOnDemandOutputWindow.html
        """



class PySimpleApp(App):
    """ This class is deprecated. Please use `App` instead.


  


        Source: https://docs.wxpython.org/wx.PySimpleApp.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.PySimpleApp.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.PySimpleApp.html
        """



class QueryNewPaletteEvent(Event):
    """ **Possible constructors**:



```
QueryNewPaletteEvent(winid=0)

```


  


        Source: https://docs.wxpython.org/wx.QueryNewPaletteEvent.html
    """
    def __init__(self, winid: int=0) -> None:
        """ 

`__init__`(*self*, *winid=0*)[¶](#wx.QueryNewPaletteEvent.__init__ "Permalink to this definition")

Parameters
**winid** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.QueryNewPaletteEvent.html
        """

    def GetPaletteRealized(self) -> bool:
        """ 

`GetPaletteRealized`(*self*)[¶](#wx.QueryNewPaletteEvent.GetPaletteRealized "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.QueryNewPaletteEvent.html
        """

    def SetPaletteRealized(self, realized: bool) -> None:
        """ 

`SetPaletteRealized`(*self*, *realized*)[¶](#wx.QueryNewPaletteEvent.SetPaletteRealized "Permalink to this definition")

Parameters
**realized** (*bool*) – 






            Source: https://docs.wxpython.org/wx.QueryNewPaletteEvent.html
        """

    PaletteRealized: bool  # `PaletteRealized`[¶](#wx.QueryNewPaletteEvent.PaletteRealized "Permalink to this definition")See [`GetPaletteRealized`](#wx.QueryNewPaletteEvent.GetPaletteRealized "wx.QueryNewPaletteEvent.GetPaletteRealized") and [`SetPaletteRealized`](#wx.QueryNewPaletteEvent.SetPaletteRealized "wx.QueryNewPaletteEvent.SetPaletteRealized")



class RadioBox(Control,ItemContainerImmutable):
    """ **Possible constructors**:



```
RadioBox()

RadioBox(parent, id=ID_ANY, label="", pos=DefaultPosition,
         size=DefaultSize, choices=[], majorDimension=0, style=RA_SPECIFY_COLS,
         validator=DefaultValidator, name=RadioBoxNameStr)

```


A radio box item is used to select one of number of mutually exclusive
choices.


  


        Source: https://docs.wxpython.org/wx.RadioBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RadioBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.



See also


[`Create`](#wx.RadioBox.Create "wx.RadioBox.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, choices=[], majorDimension=0, style=RA\_SPECIFY\_COLS, validator=DefaultValidator, name=RadioBoxNameStr)*


Constructor, creating and showing a radiobox.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `ID_ANY` indicates a default value.
* **label** (*string*) – Label for the static box surrounding the radio buttons.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then a default size is chosen.
* **choices** (*list of strings*) – An array of choices with which to initialize the radiobox.
* **majorDimension** (*int*) – Specifies the maximum number of rows (if style contains `RA_SPECIFY_ROWS` ) or columns (if style contains `RA_SPECIFY_COLS` ) for a two-dimensional radiobox. The default value of 0 means to use the number of items, i.e. number of elements in *choices*.
* **style** (*long*) – Window style. See  [wx.RadioBox](#wx-radiobox).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.






---

  





            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, choices=[], majorDimension=0, style=RA_SPECIFY_COLS, validator=DefaultValidator, name=RadioBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *choices=[]*, *majorDimension=0*, *style=RA\_SPECIFY\_COLS*, *validator=DefaultValidator*, *name=RadioBoxNameStr*)[¶](#wx.RadioBox.Create "Permalink to this definition")
Creates the radiobox for two-step construction.


See  [wx.RadioBox](#wx-radiobox) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **choices** (*list of strings*) –
* **majorDimension** (*int*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def EnableItem(self, n, enable=True) -> bool:
        """ 

`EnableItem`(*self*, *n*, *enable=True*)[¶](#wx.RadioBox.EnableItem "Permalink to this definition")
Enables or disables an individual button in the radiobox.



Parameters
* **n** (*int*) – The zero-based button to enable or disable.
* **enable** (*bool*) – `True` to enable, `False` to disable.



Return type
*bool*





See also


[`wx.Window.Enable`](wx.Window.html#wx.Window.Enable "wx.Window.Enable")





            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def FindString(self, string, bCase=False) -> int:
        """ 

`FindString`(*self*, *string*, *bCase=False*)[¶](#wx.RadioBox.FindString "Permalink to this definition")
Finds a button matching the given string, returning the position if found, or `NOT_FOUND` if not found.



Parameters
* **string** (*string*) – The string to find.
* **bCase** (*bool*) – Should the search be case-sensitive?



Return type
*int*






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.RadioBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetColumnCount(self) -> int:
        """ 

`GetColumnCount`(*self*)[¶](#wx.RadioBox.GetColumnCount "Permalink to this definition")
Returns the number of columns in the radiobox.



Return type
*int*






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetCount(self) -> int:
        """ 

`GetCount`(*self*)[¶](#wx.RadioBox.GetCount "Permalink to this definition")
Returns the number of items in the control.



Return type
*int*





See also


[`IsEmpty`](wx.ItemContainerImmutable.html#wx.ItemContainerImmutable.IsEmpty "wx.ItemContainerImmutable.IsEmpty")





            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetItemFromPoint(self, pt: Union[tuple[int, int], 'Point']) -> int:
        """ 

`GetItemFromPoint`(*self*, *pt*)[¶](#wx.RadioBox.GetItemFromPoint "Permalink to this definition")
Returns a radio box item under the point, a zero-based item index, or `NOT_FOUND` if no item is under the point.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Point in client coordinates.



Return type
*int*






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetItemHelpText(self, item: int) -> str:
        """ 

`GetItemHelpText`(*self*, *item*)[¶](#wx.RadioBox.GetItemHelpText "Permalink to this definition")
Returns the helptext associated with the specified *item* if any or `""` .



Parameters
**item** (*int*) – The zero-based item index.



Return type
`string`





See also


[`SetItemHelpText`](#wx.RadioBox.SetItemHelpText "wx.RadioBox.SetItemHelpText")





            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetItemLabel(self, n) -> None:
        """ 

`GetItemLabel`(*self*, *n*)[¶](#wx.RadioBox.GetItemLabel "Permalink to this definition")
Return the text of the n’th item in the radio box.




            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetItemToolTip(self, item: int) -> 'ToolTip':
        """ 

`GetItemToolTip`(*self*, *item*)[¶](#wx.RadioBox.GetItemToolTip "Permalink to this definition")
Returns the tooltip associated with the specified *item* if any or `None`.



Parameters
**item** (*int*) – 



Return type
 [wx.ToolTip](wx.ToolTip.html#wx-tooltip)





See also


[`SetItemToolTip`](#wx.RadioBox.SetItemToolTip "wx.RadioBox.SetItemToolTip") , [`wx.Window.GetToolTip`](wx.Window.html#wx.Window.GetToolTip "wx.Window.GetToolTip")





            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetRowCount(self) -> int:
        """ 

`GetRowCount`(*self*)[¶](#wx.RadioBox.GetRowCount "Permalink to this definition")
Returns the number of rows in the radiobox.



Return type
*int*






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.RadioBox.GetSelection "Permalink to this definition")
Returns the index of the selected item.


As radio boxes always have a selected item, the return value is never `NOT_FOUND` for this class.



Return type
*int*






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def GetString(self, n: int) -> str:
        """ 

`GetString`(*self*, *n*)[¶](#wx.RadioBox.GetString "Permalink to this definition")
Returns the label of the item with the given index.


The index must be valid, i.e. less than the value returned by [`GetCount`](#wx.RadioBox.GetCount "wx.RadioBox.GetCount") , otherwise an assert is triggered. Notably, this function can’t be called if the control is empty.



Parameters
**n** (*int*) – The zero-based index.



Return type
`string`



Returns
The label of the item.






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def IsItemEnabled(self, n: int) -> bool:
        """ 

`IsItemEnabled`(*self*, *n*)[¶](#wx.RadioBox.IsItemEnabled "Permalink to this definition")
Returns `True` if the item is enabled or `False` if it was disabled using `Enable` .


This function is currently only implemented in wxMSW, wxGTK, `QT` and wxUniversal and always returns `True` in the other ports.



Parameters
**n** (*int*) – The zero-based button position.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def IsItemShown(self, n: int) -> bool:
        """ 

`IsItemShown`(*self*, *n*)[¶](#wx.RadioBox.IsItemShown "Permalink to this definition")
Returns `True` if the item is currently shown or `False` if it was hidden using `Show` .


Note that this function returns `True` for an item which hadn’t been hidden even if the entire radiobox is not currently shown.


This function is currently only implemented in wxMSW, wxGTK, `QT` and wxUniversal and always returns `True` in the other ports.



Parameters
**n** (*int*) – The zero-based button position.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def SetItemHelpText(self, item, helptext) -> None:
        """ 

`SetItemHelpText`(*self*, *item*, *helptext*)[¶](#wx.RadioBox.SetItemHelpText "Permalink to this definition")
Sets the helptext for an item.


Empty string erases any existing helptext.



Parameters
* **item** (*int*) – The zero-based item index.
* **helptext** (*string*) – The help text to set for the item.





See also


[`GetItemHelpText`](#wx.RadioBox.GetItemHelpText "wx.RadioBox.GetItemHelpText")





            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def SetItemLabel(self, n, text) -> None:
        """ 

`SetItemLabel`(*self*, *n*, *text*)[¶](#wx.RadioBox.SetItemLabel "Permalink to this definition")
SetItemLabel(self, n, text)


Set the text of the n’th item in the radio box.




            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def SetItemToolTip(self, item, text) -> None:
        """ 

`SetItemToolTip`(*self*, *item*, *text*)[¶](#wx.RadioBox.SetItemToolTip "Permalink to this definition")
Sets the tooltip text for the specified item in the radio group.


This function is currently only implemented in wxMSW and wxGTK2 and does nothing in the other ports.



Parameters
* **item** (*int*) – Index of the item the tooltip will be shown for.
* **text** (*string*) – Tooltip text for the item, the tooltip is removed if empty.





See also


[`GetItemToolTip`](#wx.RadioBox.GetItemToolTip "wx.RadioBox.GetItemToolTip") , [`wx.Window.SetToolTip`](wx.Window.html#wx.Window.SetToolTip "wx.Window.SetToolTip")





            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def SetSelection(self, n: int) -> None:
        """ 

`SetSelection`(*self*, *n*)[¶](#wx.RadioBox.SetSelection "Permalink to this definition")
Sets the selection to the given item.


Notice that a radio box always has selection, so *n* must be valid here and passing `NOT_FOUND` is not allowed.



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def SetString(self, n, string) -> None:
        """ 

`SetString`(*self*, *n*, *string*)[¶](#wx.RadioBox.SetString "Permalink to this definition")
Sets the label for the given item.



Parameters
* **n** (*int*) – The zero-based item index.
* **string** (*string*) – The label to set.






            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    def ShowItem(self, item, show=True) -> bool:
        """ 

`ShowItem`(*self*, *item*, *show=True*)[¶](#wx.RadioBox.ShowItem "Permalink to this definition")
Shows or hides individual buttons.



Parameters
* **item** (*int*) – The zero-based position of the button to show or hide.
* **show** (*bool*) – `True` to show, `False` to hide.



Return type
*bool*



Returns
`True` if the item has been shown or hidden or `False` if nothing was done because it already was in the requested state.





See also


[`wx.Window.Show`](wx.Window.html#wx.Window.Show "wx.Window.Show")





            Source: https://docs.wxpython.org/wx.RadioBox.html
        """

    ColumnCount: int  # `ColumnCount`[¶](#wx.RadioBox.ColumnCount "Permalink to this definition")See [`GetColumnCount`](#wx.RadioBox.GetColumnCount "wx.RadioBox.GetColumnCount")
    Count: int  # `Count`[¶](#wx.RadioBox.Count "Permalink to this definition")See [`GetCount`](#wx.RadioBox.GetCount "wx.RadioBox.GetCount")
    RowCount: int  # `RowCount`[¶](#wx.RadioBox.RowCount "Permalink to this definition")See [`GetRowCount`](#wx.RadioBox.GetRowCount "wx.RadioBox.GetRowCount")
    Selection: int  # `Selection`[¶](#wx.RadioBox.Selection "Permalink to this definition")See [`GetSelection`](#wx.RadioBox.GetSelection "wx.RadioBox.GetSelection") and [`SetSelection`](#wx.RadioBox.SetSelection "wx.RadioBox.SetSelection")



RA_SPECIFY_ROWS: int  # The major dimension parameter refers to the maximum number of rows.

RA_SPECIFY_COLS: int  # The major dimension parameter refers to the maximum number of columns. ^^

class RadioButton(Control):
    """ **Possible constructors**:



```
RadioButton()

RadioButton(parent, id=ID_ANY, label="", pos=DefaultPosition,
            size=DefaultSize, style=0, validator=DefaultValidator,
            name=RadioButtonNameStr)

```


A radio button item is a button which usually denotes one of several
mutually exclusive options.


  


        Source: https://docs.wxpython.org/wx.RadioButton.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RadioButton.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.



See also


[`Create`](#wx.RadioButton.Create "wx.RadioButton.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=RadioButtonNameStr)*


Constructor, creating and showing a radio button.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `ID_ANY` indicates a default value.
* **label** (*string*) – Label for the radio button.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then a default size is chosen.
* **style** (*long*) – Window style. See  [wx.RadioButton](#wx-radiobutton).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.RadioButton.Create "wx.RadioButton.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=RadioButtonNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=RadioButtonNameStr*)[¶](#wx.RadioButton.Create "Permalink to this definition")
Creates the choice for two-step construction.


See  [wx.RadioButton](#wx-radiobutton) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.RadioButton.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    def GetFirstInGroup(self) -> 'RadioButton':
        """ 

`GetFirstInGroup`(*self*)[¶](#wx.RadioButton.GetFirstInGroup "Permalink to this definition")
Returns the first button of the radio button group this button belongs to.


For a radio button with `RB_SINGLE` style, this function returns this button itself, as it is the only member of its group. Otherwise, the function returns the closest previous radio button with `RB_GROUP` style (which could still be this button itself) or the first radio button in the same window.


The returned value is never `None`.



Return type
 [wx.RadioButton](#wx-radiobutton)





New in version 4.1/wxWidgets-3.1.5.




See also


[`GetPreviousInGroup`](#wx.RadioButton.GetPreviousInGroup "wx.RadioButton.GetPreviousInGroup") , [`GetNextInGroup`](#wx.RadioButton.GetNextInGroup "wx.RadioButton.GetNextInGroup") , [`GetLastInGroup`](#wx.RadioButton.GetLastInGroup "wx.RadioButton.GetLastInGroup")





            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    def GetLastInGroup(self) -> 'RadioButton':
        """ 

`GetLastInGroup`(*self*)[¶](#wx.RadioButton.GetLastInGroup "Permalink to this definition")
Returns the last button of the radio button group this button belongs to.


Similarly to [`GetFirstInGroup`](#wx.RadioButton.GetFirstInGroup "wx.RadioButton.GetFirstInGroup") , this function returns this button itself if it has `RB_SINGLE` style. Otherwise, the function returns the last button before the next button with `RB_GROUP` style or the last radio button in the same window.


The returned value is never `None`.



Return type
 [wx.RadioButton](#wx-radiobutton)





New in version 4.1/wxWidgets-3.1.5.




See also


[`GetPreviousInGroup`](#wx.RadioButton.GetPreviousInGroup "wx.RadioButton.GetPreviousInGroup") , [`GetNextInGroup`](#wx.RadioButton.GetNextInGroup "wx.RadioButton.GetNextInGroup")





            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    def GetNextInGroup(self) -> 'RadioButton':
        """ 

`GetNextInGroup`(*self*)[¶](#wx.RadioButton.GetNextInGroup "Permalink to this definition")
Returns the next radio button in the same group.


The return value is `None` if there is no successor or if this button has `RB_SINGLE` style.



Return type
 [wx.RadioButton](#wx-radiobutton)





New in version 4.1/wxWidgets-3.1.5.




See also


[`GetFirstInGroup`](#wx.RadioButton.GetFirstInGroup "wx.RadioButton.GetFirstInGroup") , [`GetPreviousInGroup`](#wx.RadioButton.GetPreviousInGroup "wx.RadioButton.GetPreviousInGroup") , [`GetLastInGroup`](#wx.RadioButton.GetLastInGroup "wx.RadioButton.GetLastInGroup")





            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    def GetPreviousInGroup(self) -> 'RadioButton':
        """ 

`GetPreviousInGroup`(*self*)[¶](#wx.RadioButton.GetPreviousInGroup "Permalink to this definition")
Returns the previous radio button in the same group.


The return value is `None` if there is no predecessor or if this button has `RB_SINGLE` style.



Return type
 [wx.RadioButton](#wx-radiobutton)





New in version 4.1/wxWidgets-3.1.5.




See also


[`GetFirstInGroup`](#wx.RadioButton.GetFirstInGroup "wx.RadioButton.GetFirstInGroup") , [`GetNextInGroup`](#wx.RadioButton.GetNextInGroup "wx.RadioButton.GetNextInGroup") , [`GetLastInGroup`](#wx.RadioButton.GetLastInGroup "wx.RadioButton.GetLastInGroup")





            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    def GetValue(self) -> bool:
        """ 

`GetValue`(*self*)[¶](#wx.RadioButton.GetValue "Permalink to this definition")
Returns `True` if the radio button is checked, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    def SetValue(self, value: bool) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.RadioButton.SetValue "Permalink to this definition")
Sets the radio button to checked or unchecked status.


This does not cause a `wxEVT_RADIOBUTTON` event to get emitted.


If the radio button belongs to a radio group exactly one button in the group may be checked and so this method can be only called with *value* set to `True`. To uncheck a radio button in a group you must check another button in the same group.



Parameters
**value** (*bool*) – `True` to check, `False` to uncheck.





Note


Under MSW, the focused radio button is always selected, i.e. its value is `True`. And, conversely, calling `SetValue(true)` will also set focus to the radio button if the focus had previously been on another radio button in the same group –





            Source: https://docs.wxpython.org/wx.RadioButton.html
        """

    FirstInGroup: 'RadioButton'  # `FirstInGroup`[¶](#wx.RadioButton.FirstInGroup "Permalink to this definition")See [`GetFirstInGroup`](#wx.RadioButton.GetFirstInGroup "wx.RadioButton.GetFirstInGroup")
    LastInGroup: 'RadioButton'  # `LastInGroup`[¶](#wx.RadioButton.LastInGroup "Permalink to this definition")See [`GetLastInGroup`](#wx.RadioButton.GetLastInGroup "wx.RadioButton.GetLastInGroup")
    NextInGroup: 'RadioButton'  # `NextInGroup`[¶](#wx.RadioButton.NextInGroup "Permalink to this definition")See [`GetNextInGroup`](#wx.RadioButton.GetNextInGroup "wx.RadioButton.GetNextInGroup")
    PreviousInGroup: 'RadioButton'  # `PreviousInGroup`[¶](#wx.RadioButton.PreviousInGroup "Permalink to this definition")See [`GetPreviousInGroup`](#wx.RadioButton.GetPreviousInGroup "wx.RadioButton.GetPreviousInGroup")
    Value: bool  # `Value`[¶](#wx.RadioButton.Value "Permalink to this definition")See [`GetValue`](#wx.RadioButton.GetValue "wx.RadioButton.GetValue") and [`SetValue`](#wx.RadioButton.SetValue "wx.RadioButton.SetValue")



RB_GROUP: int  # Marks the beginning of a new group of radio buttons.

RB_SINGLE: int  # Creates a radio button which is not part of any radio button group. When this style is used, no other radio buttons will be turned off automatically when this button is turned on and such behaviour will need to be implemented manually, in the event handler for this button. ^^

class RealPoint:
    """ **Possible constructors**:



```
RealPoint()

RealPoint(x, y)

RealPoint(pt)

```


A RealPoint is a useful data structure for graphics operations.


  


        Source: https://docs.wxpython.org/wx.RealPoint.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RealPoint.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Initializes to zero the x and y members.




---

  



**\_\_init\_\_** *(self, x, y)*


Initializes the point with the given coordinates.



Parameters
* **x** (*float*) –
* **y** (*float*) –






---

  



**\_\_init\_\_** *(self, pt)*


Converts the given  [wx.Point](wx.Point.html#wx-point) (with integer coordinates) to a  [wx.RealPoint](#wx-realpoint).



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.RealPoint.Get "Permalink to this definition")
Return the point’s properties as a tuple.



Return type
*tuple*



Returns
( *x*, *y* )






            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.RealPoint.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.RealPoint` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.RealPoint`
with a simple statement like this: `obj = wx.RealPoint(imObj)`.




            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __bool__(self) -> None:
        """ 

`__bool__`(*self*)[¶](#wx.RealPoint.__bool__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*, *other*)[¶](#wx.RealPoint.__eq__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.RealPoint.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.RealPoint.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __mul__(self, d) -> 'RealPoint':
        """ 

`__mul__`(*self*, *d*)[¶](#wx.RealPoint.__mul__ "Permalink to this definition")

Return type
 [wx.RealPoint](#wx-realpoint)






            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*, *other*)[¶](#wx.RealPoint.__ne__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.RealPoint.__nonzero__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.RealPoint.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.RealPoint.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.RealPoint.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.RealPoint.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __iadd__(self, *args, **kw) -> None:
        """ 

`__iadd__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RealPoint.__iadd__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_iadd\_\_** *(self)*



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**\_\_iadd\_\_** *(self)*



Parameters
**pt** ([*wx.RealPoint*](#wx.RealPoint "wx.RealPoint")) – 






---

  





            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    def __isub__(self, *args, **kw) -> None:
        """ 

`__isub__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RealPoint.__isub__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_isub\_\_** *(self)*



Parameters
**sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**\_\_isub\_\_** *(self)*



Parameters
**pt** ([*wx.RealPoint*](#wx.RealPoint "wx.RealPoint")) – 






---

  





            Source: https://docs.wxpython.org/wx.RealPoint.html
        """

    IM: None  # `IM`[¶](#wx.RealPoint.IM "Permalink to this definition")See [`GetIM`](#wx.RealPoint.GetIM "wx.RealPoint.GetIM")
    x: Any  # `x`[¶](#wx.RealPoint.x "Permalink to this definition")A public C++ attribute of type `float`. X coordinate of this point.
    y: Any  # `y`[¶](#wx.RealPoint.y "Permalink to this definition")A public C++ attribute of type `float`. Y coordinate of this point.



class RearrangeCtrl(Panel):
    """ **Possible constructors**:



```
RearrangeCtrl()

RearrangeCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
              order=[], items=[], style=0, validator=DefaultValidator,
              name=RearrangeListNameStr)

```


A composite control containing a RearrangeList and the buttons
allowing to move the items in it.


  


        Source: https://docs.wxpython.org/wx.RearrangeCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RearrangeCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


[`Create`](#wx.RearrangeCtrl.Create "wx.RearrangeCtrl.Create") must be called later to effectively create the control.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, order=[], items=[], style=0, validator=DefaultValidator, name=RearrangeListNameStr)*


Constructor really creating the control.


Please see [`Create`](#wx.RearrangeCtrl.Create "wx.RearrangeCtrl.Create") for the parameters description.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **order** (*list of integers*) –
* **items** (*list of strings*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.RearrangeCtrl.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, order=[], items=[], style=0, validator=DefaultValidator, name=RearrangeListNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *order=[]*, *items=[]*, *style=0*, *validator=DefaultValidator*, *name=RearrangeListNameStr*)[¶](#wx.RearrangeCtrl.Create "Permalink to this definition")
Effectively creates the window for an object created using the default constructor.


The parameters of this method are the same as for [`wx.RearrangeList.Create`](wx.RearrangeList.html#wx.RearrangeList.Create "wx.RearrangeList.Create") .



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **order** (*list of integers*) –
* **items** (*list of strings*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RearrangeCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.RearrangeCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.RearrangeCtrl.html
        """

    def GetList(self) -> 'RearrangeList':
        """ 

`GetList`(*self*)[¶](#wx.RearrangeCtrl.GetList "Permalink to this definition")
Return the listbox which is the main part of this control.



Return type
 [wx.RearrangeList](wx.RearrangeList.html#wx-rearrangelist)






            Source: https://docs.wxpython.org/wx.RearrangeCtrl.html
        """

    List: 'RearrangeList'  # `List`[¶](#wx.RearrangeCtrl.List "Permalink to this definition")See [`GetList`](#wx.RearrangeCtrl.GetList "wx.RearrangeCtrl.GetList")



class RearrangeList(CheckListBox):
    """ **Possible constructors**:



```
RearrangeList()

RearrangeList(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
              order=[], items=[], style=0, validator=DefaultValidator,
              name=RearrangeListNameStr)

```


A listbox-like control allowing the user to rearrange the items and to
enable or disable them.


  


        Source: https://docs.wxpython.org/wx.RearrangeList.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RearrangeList.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


[`Create`](#wx.RearrangeList.Create "wx.RearrangeList.Create") must be called later to effectively create the control.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, order=[], items=[], style=0, validator=DefaultValidator, name=RearrangeListNameStr)*


Constructor really creating the control.


Please see [`Create`](#wx.RearrangeList.Create "wx.RearrangeList.Create") for the parameters description.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **order** (*list of integers*) –
* **items** (*list of strings*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.RearrangeList.html
        """

    def CanMoveCurrentDown(self) -> bool:
        """ 

`CanMoveCurrentDown`(*self*)[¶](#wx.RearrangeList.CanMoveCurrentDown "Permalink to this definition")
Return `True` if the currently selected item can be moved down.



Return type
*bool*





See also


[`CanMoveCurrentUp`](#wx.RearrangeList.CanMoveCurrentUp "wx.RearrangeList.CanMoveCurrentUp")





            Source: https://docs.wxpython.org/wx.RearrangeList.html
        """

    def CanMoveCurrentUp(self) -> bool:
        """ 

`CanMoveCurrentUp`(*self*)[¶](#wx.RearrangeList.CanMoveCurrentUp "Permalink to this definition")
Return `True` if the currently selected item can be moved up.


This function is useful for `EVT_UPDATE_UI` handler for the standard “Up” button often used together with this control and  [wx.RearrangeCtrl](wx.RearrangeCtrl.html#wx-rearrangectrl) uses it in this way.



Return type
*bool*



Returns
`True` if the currently selected item can be moved up in the listbox, `False` if there is no selection or the current item is the first one.





See also


[`CanMoveCurrentDown`](#wx.RearrangeList.CanMoveCurrentDown "wx.RearrangeList.CanMoveCurrentDown")





            Source: https://docs.wxpython.org/wx.RearrangeList.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, order=[], items=[], style=0, validator=DefaultValidator, name=RearrangeListNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *order=[]*, *items=[]*, *style=0*, *validator=DefaultValidator*, *name=RearrangeListNameStr*)[¶](#wx.RearrangeList.Create "Permalink to this definition")
Effectively creates the window for an object created using the default constructor.


This function is very similar to [`wx.CheckListBox.Create`](wx.CheckListBox.html#wx.CheckListBox.Create "wx.CheckListBox.Create") except that it has an additional parameter specifying the initial order of the items. Please see the class documentation for the explanation of the conventions used by the *order* argument.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window, must be not `None`.
* **id** (*wx.WindowID*) – The window identifier.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The initial window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The initial window size.
* **order** (*list of integers*) – Array specifying the initial order of the items in *items* array.
* **items** (*list of strings*) – The items to display in the list.
* **style** (*long*) – The control style, there are no special styles for this class but the base class styles can be used here.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Optional window validator.
* **name** (*string*) – Optional window name.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RearrangeList.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.RearrangeList.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.RearrangeList.html
        """

    def GetCurrentOrder(self) -> int:
        """ 

`GetCurrentOrder`(*self*)[¶](#wx.RearrangeList.GetCurrentOrder "Permalink to this definition")
Return the current order of the items.


The order may be different from the one passed to the constructor if [`MoveCurrentUp`](#wx.RearrangeList.MoveCurrentUp "wx.RearrangeList.MoveCurrentUp") or [`MoveCurrentDown`](#wx.RearrangeList.MoveCurrentDown "wx.RearrangeList.MoveCurrentDown") were called.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.RearrangeList.html
        """

    def MoveCurrentDown(self) -> bool:
        """ 

`MoveCurrentDown`(*self*)[¶](#wx.RearrangeList.MoveCurrentDown "Permalink to this definition")
Move the currently selected item one position below.



Return type
*bool*





See also


[`MoveCurrentUp`](#wx.RearrangeList.MoveCurrentUp "wx.RearrangeList.MoveCurrentUp")





            Source: https://docs.wxpython.org/wx.RearrangeList.html
        """

    def MoveCurrentUp(self) -> bool:
        """ 

`MoveCurrentUp`(*self*)[¶](#wx.RearrangeList.MoveCurrentUp "Permalink to this definition")
Move the currently selected item one position above.


This method is useful to implement the standard “Up” button behaviour and  [wx.RearrangeCtrl](wx.RearrangeCtrl.html#wx-rearrangectrl) uses it for this.



Return type
*bool*



Returns
`True` if the item was moved or `False` if this couldn’t be done.





See also


[`MoveCurrentDown`](#wx.RearrangeList.MoveCurrentDown "wx.RearrangeList.MoveCurrentDown")





            Source: https://docs.wxpython.org/wx.RearrangeList.html
        """

    CurrentOrder: int  # `CurrentOrder`[¶](#wx.RearrangeList.CurrentOrder "Permalink to this definition")See [`GetCurrentOrder`](#wx.RearrangeList.GetCurrentOrder "wx.RearrangeList.GetCurrentOrder")



class RearrangeDialog(Dialog):
    """ **Possible constructors**:



```
RearrangeDialog()

RearrangeDialog(parent, message, title="", order=[], items=[],
                pos=DefaultPosition, name=RearrangeDialogNameStr)

```


A dialog allowing the user to rearrange the specified items.


  


        Source: https://docs.wxpython.org/wx.RearrangeDialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RearrangeDialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


[`Create`](#wx.RearrangeDialog.Create "wx.RearrangeDialog.Create") must be called later to effectively create the control.




---

  



**\_\_init\_\_** *(self, parent, message, title=””, order=[], items=[], pos=DefaultPosition, name=RearrangeDialogNameStr)*


Constructor creating the dialog.


Please see [`Create`](#wx.RearrangeDialog.Create "wx.RearrangeDialog.Create") for the parameters description.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **message** (*string*) –
* **title** (*string*) –
* **order** (*list of integers*) –
* **items** (*list of strings*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.RearrangeDialog.html
        """

    def AddExtraControls(self, win: 'Window') -> None:
        """ 

`AddExtraControls`(*self*, *win*)[¶](#wx.RearrangeDialog.AddExtraControls "Permalink to this definition")
Customize the dialog by adding extra controls to it.


This function adds the given *win* to the dialog, putting it just below the part occupied by  [wx.RearrangeCtrl](wx.RearrangeCtrl.html#wx-rearrangectrl). It must be called after creating the dialog and you will typically need to process the events generated by the extra controls for them to do something useful.


For example:



```
class MyRearrangeDialog(wx.RearrangeDialog):

    def __init__(self, parent):

        wx.RearrangeDialog.__init__(self, parent)

        panel = wx.Panel(self)
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(wx.StaticText(panel, wx.ID_ANY,
                                "Column width in pixels:"))
        sizer.Add(wx.TextCtrl(panel, wx.ID_ANY, ""))
        panel.SetSizer(sizer)
        self.AddExtraControls(panel)


        # ... code to update the text control with the currently selected
        # item width and to react to its changes omitted ...

```


See also the complete example of a custom rearrange dialog in the dialogs sample.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window containing the extra controls. It must have this dialog as its parent.






            Source: https://docs.wxpython.org/wx.RearrangeDialog.html
        """

    def Create(self, parent, message, title="", order=[], items=[], pos=DefaultPosition, name=RearrangeDialogNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *message*, *title=""*, *order=[]*, *items=[]*, *pos=DefaultPosition*, *name=RearrangeDialogNameStr*)[¶](#wx.RearrangeDialog.Create "Permalink to this definition")
Effectively creates the dialog for an object created using the default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The dialog parent, possibly `None`.
* **message** (*string*) – The message shown inside the dialog itself, above the items list.
* **title** (*string*) – The title of the dialog.
* **order** (*list of integers*) – The initial order of the items in the convention used by  [wx.RearrangeList](wx.RearrangeList.html#wx-rearrangelist).
* **items** (*list of strings*) – The items to show in the dialog.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Optional dialog position.
* **name** (*string*) – Optional dialog name.



Return type
*bool*



Returns
`True` if the dialog was successfully created or `False` if creation failed.






            Source: https://docs.wxpython.org/wx.RearrangeDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.RearrangeDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.RearrangeDialog.html
        """

    def GetList(self) -> 'RearrangeList':
        """ 

`GetList`(*self*)[¶](#wx.RearrangeDialog.GetList "Permalink to this definition")
Return the list control used by the dialog.



Return type
 [wx.RearrangeList](wx.RearrangeList.html#wx-rearrangelist)





See also


[`wx.RearrangeCtrl.GetList`](wx.RearrangeCtrl.html#wx.RearrangeCtrl.GetList "wx.RearrangeCtrl.GetList")





            Source: https://docs.wxpython.org/wx.RearrangeDialog.html
        """

    def GetOrder(self) -> int:
        """ 

`GetOrder`(*self*)[¶](#wx.RearrangeDialog.GetOrder "Permalink to this definition")
Return the array describing the order of items after it was modified by the user.


Please notice that the array will contain negative items if any items were unchecked. See  [wx.RearrangeList](wx.RearrangeList.html#wx-rearrangelist) for more information about the convention used for this array.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.RearrangeDialog.html
        """

    List: 'RearrangeList'  # `List`[¶](#wx.RearrangeDialog.List "Permalink to this definition")See [`GetList`](#wx.RearrangeDialog.GetList "wx.RearrangeDialog.GetList")
    Order: int  # `Order`[¶](#wx.RearrangeDialog.Order "Permalink to this definition")See [`GetOrder`](#wx.RearrangeDialog.GetOrder "wx.RearrangeDialog.GetOrder")



class Rect:
    """ **Possible constructors**:



```
Rect()

Rect(x, y, width, height)

Rect(pos, size)

Rect(size)

Rect(topLeft, bottomRight)

```


Represents a rectangle with integer coordinates.


  


        Source: https://docs.wxpython.org/wx.Rect.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Initializes to zero the internal *x*, *y*, *width* and *height* members.




---

  



**\_\_init\_\_** *(self, x, y, width, height)*


Creates a  [wx.Rect](#wx-rect) object from *x*, *y*, *width* and *height* values.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –






---

  



**\_\_init\_\_** *(self, pos, size)*


Creates a  [wx.Rect](#wx-rect) object from position *pos* and *size* values.



Parameters
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






---

  



**\_\_init\_\_** *(self, size)*


Creates a  [wx.Rect](#wx-rect) object from *size* values at the origin.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**\_\_init\_\_** *(self, topLeft, bottomRight)*


Creates a  [wx.Rect](#wx-rect) object from top-left and bottom-right points.


The width of the rectangle will be `bottomRight.x-topLeft.x+1` and the height will be `bottomRight.y-topLeft.y+1` .



Parameters
* **topLeft** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **bottomRight** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






---

  





            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def CenterIn(self, r, dir=BOTH) -> 'Rect':
        """ 

`CenterIn`(*self*, *r*, *dir=BOTH*)[¶](#wx.Rect.CenterIn "Permalink to this definition")
Returns the rectangle having the same size as this one but centered relatively to the given rectangle *r*.


By default, rectangle is centred in both directions but if *dir* includes only `VERTICAL` or only `HORIZONTAL` , then it is only centered in this direction while the other component of its position remains unchanged.



Parameters
* **r** ([*wx.Rect*](#wx.Rect "wx.Rect")) –
* **dir** (*int*) –



Return type
 [wx.Rect](#wx-rect)






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def CentreIn(self, r, dir=BOTH) -> 'Rect':
        """ 

`CentreIn`(*self*, *r*, *dir=BOTH*)[¶](#wx.Rect.CentreIn "Permalink to this definition")
Returns the rectangle having the same size as this one but centered relatively to the given rectangle *r*.


By default, rectangle is centred in both directions but if *dir* includes only `VERTICAL` or only `HORIZONTAL` , then it is only centered in this direction while the other component of its position remains unchanged.



Parameters
* **r** ([*wx.Rect*](#wx.Rect "wx.Rect")) –
* **dir** (*int*) –



Return type
 [wx.Rect](#wx-rect)






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def Contains(self, *args, **kw) -> bool:
        """ 

`Contains`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect.Contains "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Contains** *(self, x, y)*


Returns `True` if the given point is inside the rectangle (or on its boundary) and `False` otherwise.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*bool*






---

  



**Contains** *(self, pt)*


Returns `True` if the given point is inside the rectangle (or on its boundary) and `False` otherwise.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
*bool*






---

  



**Contains** *(self, rect)*


Returns `True` if the given rectangle is completely inside this rectangle (or touches its boundary) and `False` otherwise.



Parameters
**rect** ([*wx.Rect*](#wx.Rect "wx.Rect")) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def Deflate(self, *args, **kw) -> 'Rect':
        """ 

`Deflate`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect.Deflate "Permalink to this definition")
Decrease the rectangle size.


This method is the opposite from [`Inflate`](#wx.Rect.Inflate "wx.Rect.Inflate") : Deflate(a, b) is equivalent to Inflate(-a, -b). Please refer to [`Inflate`](#wx.Rect.Inflate "wx.Rect.Inflate") for full description.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Deflate** *(self, dx, dy)*



Parameters
* **dx** (*int*) –
* **dy** (*int*) –



Return type
 [wx.Rect](#wx-rect)






---

  



**Deflate** *(self, diff)*



Parameters
**diff** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Rect](#wx-rect)






---

  



**Deflate** *(self, diff)*



Parameters
**diff** (*int*) – 



Return type
 [wx.Rect](#wx-rect)






---

  





            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.Rect.Get "Permalink to this definition")
Return the rectangle’s properties as a tuple.



Return type
*tuple*



Returns
( *x*, *y*, *width*, *height* )






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetBottom(self) -> int:
        """ 

`GetBottom`(*self*)[¶](#wx.Rect.GetBottom "Permalink to this definition")
Gets the bottom point of the rectangle.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetBottomLeft(self) -> 'Point':
        """ 

`GetBottomLeft`(*self*)[¶](#wx.Rect.GetBottomLeft "Permalink to this definition")
Gets the position of the bottom left corner.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetBottomRight(self) -> 'Point':
        """ 

`GetBottomRight`(*self*)[¶](#wx.Rect.GetBottomRight "Permalink to this definition")
Gets the position of the bottom right corner.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetHeight(self) -> int:
        """ 

`GetHeight`(*self*)[¶](#wx.Rect.GetHeight "Permalink to this definition")
Gets the height member.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.Rect.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.Rect` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.Rect`
with a simple statement like this: `obj = wx.Rect(imObj)`.




            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetLeft(self) -> int:
        """ 

`GetLeft`(*self*)[¶](#wx.Rect.GetLeft "Permalink to this definition")
Gets the left point of the rectangle (the same as [`GetX`](#wx.Rect.GetX "wx.Rect.GetX") ).



Return type
*int*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.Rect.GetPosition "Permalink to this definition")
Gets the position.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetRight(self) -> int:
        """ 

`GetRight`(*self*)[¶](#wx.Rect.GetRight "Permalink to this definition")
Gets the right point of the rectangle.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.Rect.GetSize "Permalink to this definition")
Gets the size.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`SetSize`](#wx.Rect.SetSize "wx.Rect.SetSize")





            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetTop(self) -> int:
        """ 

`GetTop`(*self*)[¶](#wx.Rect.GetTop "Permalink to this definition")
Gets the top point of the rectangle (the same as [`GetY`](#wx.Rect.GetY "wx.Rect.GetY") ).



Return type
*int*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetTopLeft(self) -> 'Point':
        """ 

`GetTopLeft`(*self*)[¶](#wx.Rect.GetTopLeft "Permalink to this definition")
Gets the position of the top left corner of the rectangle, same as [`GetPosition`](#wx.Rect.GetPosition "wx.Rect.GetPosition") .



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetTopRight(self) -> 'Point':
        """ 

`GetTopRight`(*self*)[¶](#wx.Rect.GetTopRight "Permalink to this definition")
Gets the position of the top right corner.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.Rect.GetWidth "Permalink to this definition")
Gets the width member.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetX(self) -> int:
        """ 

`GetX`(*self*)[¶](#wx.Rect.GetX "Permalink to this definition")
Gets the x member.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def GetY(self) -> int:
        """ 

`GetY`(*self*)[¶](#wx.Rect.GetY "Permalink to this definition")
Gets the y member.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def Inflate(self, *args, **kw) -> 'Rect':
        """ 

`Inflate`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect.Inflate "Permalink to this definition")
Increases the size of the rectangle.


The left border is moved farther left and the right border is moved farther right by *dx*. The upper border is moved farther up and the bottom border is moved farther down by *dy*. (Note that the width and height of the rectangle thus change by 2dx and 2dy, respectively.) If one or both of *dx* and *dy* are negative, the opposite happens: the rectangle size decreases in the respective direction.


Inflating and deflating behaves “naturally”. Defined more precisely, that means:


* “Real” inflates (that is, *dx* and/or *dy* = 0) are not constrained. Thus inflating a rectangle can cause its upper left corner to move into the negative numbers. (2.5.4 and older forced the top left coordinate to not fall below (0, 0), which implied a forced move of the rectangle.)
* Deflates are clamped to not reduce the width or height of the rectangle below zero. In such cases, the top-left corner is nonetheless handled properly. For example, a rectangle at (10, 10) with size (20, 40) that is inflated by (-15, -15) will become located at (20, 25) at size (0, 10). Finally, observe that the width and height are treated independently. In the above example, the width is reduced by 20, whereas the height is reduced by the full 30 (rather than also stopping at 20, when the width reached zero).



See also


[`Deflate`](#wx.Rect.Deflate "wx.Rect.Deflate")



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Inflate** *(self, dx, dy)*



Parameters
* **dx** (*int*) –
* **dy** (*int*) –



Return type
 [wx.Rect](#wx-rect)






---

  



**Inflate** *(self, diff)*



Parameters
**diff** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Rect](#wx-rect)






---

  



**Inflate** *(self, diff)*



Parameters
**diff** (*int*) – 



Return type
 [wx.Rect](#wx-rect)






---

  





            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def Intersect(self, rect: 'Rect') -> 'Rect':
        """ 

`Intersect`(*self*, *rect*)[¶](#wx.Rect.Intersect "Permalink to this definition")
Modifies this rectangle to contain the overlapping portion of this rectangle and the one passed in as parameter.



Parameters
**rect** ([*wx.Rect*](#wx.Rect "wx.Rect")) – 



Return type
 [wx.Rect](#wx-rect)



Returns
This rectangle, modified.






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def Intersects(self, rect: 'Rect') -> bool:
        """ 

`Intersects`(*self*, *rect*)[¶](#wx.Rect.Intersects "Permalink to this definition")
Returns `True` if this rectangle has a non-empty intersection with the rectangle *rect* and `False` otherwise.



Parameters
**rect** ([*wx.Rect*](#wx.Rect "wx.Rect")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.Rect.IsEmpty "Permalink to this definition")
Returns `True` if this rectangle has a width or height less than or equal to 0 and `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def Offset(self, *args, **kw) -> None:
        """ 

`Offset`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect.Offset "Permalink to this definition")
Moves the rectangle by the specified offset.


If *dx* is positive, the rectangle is moved to the right, if *dy* is positive, it is moved to the bottom, otherwise it is moved to the left or top respectively.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Offset** *(self, dx, dy)*



Parameters
* **dx** (*int*) –
* **dy** (*int*) –






---

  



**Offset** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetBottom(self, bottom: int) -> None:
        """ 

`SetBottom`(*self*, *bottom*)[¶](#wx.Rect.SetBottom "Permalink to this definition")
Set the bottom edge of the rectangle.


Notice that this doesn’t affect [`GetTop`](#wx.Rect.GetTop "wx.Rect.GetTop") return value but changes the rectangle height to set its bottom side to the given position.



Parameters
**bottom** (*int*) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetBottomLeft(self, p: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetBottomLeft`(*self*, *p*)[¶](#wx.Rect.SetBottomLeft "Permalink to this definition")
Set the bottom-left point of the rectangle.



Parameters
**p** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetBottomRight(self, p: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetBottomRight`(*self*, *p*)[¶](#wx.Rect.SetBottomRight "Permalink to this definition")
Set the bottom-right point of the rectangle.



Parameters
**p** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetHeight(self, height: int) -> None:
        """ 

`SetHeight`(*self*, *height*)[¶](#wx.Rect.SetHeight "Permalink to this definition")
Sets the height.



Parameters
**height** (*int*) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetLeft(self, left: int) -> None:
        """ 

`SetLeft`(*self*, *left*)[¶](#wx.Rect.SetLeft "Permalink to this definition")
Set the left side of the rectangle.


Notice that because the rectangle stores its left side and width, calling [`SetLeft`](#wx.Rect.SetLeft "wx.Rect.SetLeft") changes the right side position too – but does preserve the width.



Parameters
**left** (*int*) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetPosition(self, pos: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetPosition`(*self*, *pos*)[¶](#wx.Rect.SetPosition "Permalink to this definition")
Sets the position.



Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetRight(self, right: int) -> None:
        """ 

`SetRight`(*self*, *right*)[¶](#wx.Rect.SetRight "Permalink to this definition")
Set the right side of the rectangle.


Notice that this doesn’t affect [`GetLeft`](#wx.Rect.GetLeft "wx.Rect.GetLeft") return value but changes the rectangle width to set its right side to the given position.



Parameters
**right** (*int*) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetSize(self, s: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetSize`(*self*, *s*)[¶](#wx.Rect.SetSize "Permalink to this definition")
Sets the size.



Parameters
**s** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





See also


[`GetSize`](#wx.Rect.GetSize "wx.Rect.GetSize")





            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetTop(self, top: int) -> None:
        """ 

`SetTop`(*self*, *top*)[¶](#wx.Rect.SetTop "Permalink to this definition")
Set the top edge of the rectangle.


Notice that because the rectangle stores its top side and height, calling [`SetTop`](#wx.Rect.SetTop "wx.Rect.SetTop") changes the bottom side position too – but does preserve the height.



Parameters
**top** (*int*) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetTopLeft(self, p: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetTopLeft`(*self*, *p*)[¶](#wx.Rect.SetTopLeft "Permalink to this definition")
Set the top-left point of the rectangle.



Parameters
**p** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetTopRight(self, p: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SetTopRight`(*self*, *p*)[¶](#wx.Rect.SetTopRight "Permalink to this definition")
Set the top-right point of the rectangle.



Parameters
**p** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.Rect.SetWidth "Permalink to this definition")
Sets the width.



Parameters
**width** (*int*) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetX(self, x: int) -> None:
        """ 

`SetX`(*self*, *x*)[¶](#wx.Rect.SetX "Permalink to this definition")
Sets the x position.



Parameters
**x** (*int*) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def SetY(self, y: int) -> None:
        """ 

`SetY`(*self*, *y*)[¶](#wx.Rect.SetY "Permalink to this definition")
Sets the y position.



Parameters
**y** (*int*) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def Union(self, rect: 'Rect') -> 'Rect':
        """ 

`Union`(*self*, *rect*)[¶](#wx.Rect.Union "Permalink to this definition")
Modifies the rectangle to contain the bounding box of this rectangle and the one passed in as parameter.



Parameters
**rect** ([*wx.Rect*](#wx.Rect "wx.Rect")) – 



Return type
 [wx.Rect](#wx-rect)






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __bool__(self) -> None:
        """ 

`__bool__`(*self*)[¶](#wx.Rect.__bool__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*, *other*)[¶](#wx.Rect.__eq__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.Rect.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.Rect.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*, *other*)[¶](#wx.Rect.__ne__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.Rect.__nonzero__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.Rect.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.Rect.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.Rect.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.Rect.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __imul__(self) -> None:
        """ 

`__imul__`(*self*)[¶](#wx.Rect.__imul__ "Permalink to this definition")
Returns the intersection of two rectangles (which may be empty).



Parameters
**r** ([*wx.Rect*](#wx.Rect "wx.Rect")) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    def __iadd__(self) -> None:
        """ 

`__iadd__`(*self*)[¶](#wx.Rect.__iadd__ "Permalink to this definition")
Like [`Union`](#wx.Rect.Union "wx.Rect.Union") , but doesn’t treat empty rectangles specially.



Parameters
**r** ([*wx.Rect*](#wx.Rect "wx.Rect")) – 






            Source: https://docs.wxpython.org/wx.Rect.html
        """

    Bottom: int  # `Bottom`[¶](#wx.Rect.Bottom "Permalink to this definition")See [`GetBottom`](#wx.Rect.GetBottom "wx.Rect.GetBottom") and [`SetBottom`](#wx.Rect.SetBottom "wx.Rect.SetBottom")
    BottomLeft: 'Point'  # `BottomLeft`[¶](#wx.Rect.BottomLeft "Permalink to this definition")See [`GetBottomLeft`](#wx.Rect.GetBottomLeft "wx.Rect.GetBottomLeft") and [`SetBottomLeft`](#wx.Rect.SetBottomLeft "wx.Rect.SetBottomLeft")
    BottomRight: 'Point'  # `BottomRight`[¶](#wx.Rect.BottomRight "Permalink to this definition")See [`GetBottomRight`](#wx.Rect.GetBottomRight "wx.Rect.GetBottomRight") and [`SetBottomRight`](#wx.Rect.SetBottomRight "wx.Rect.SetBottomRight")
    Height: int  # `Height`[¶](#wx.Rect.Height "Permalink to this definition")See [`GetHeight`](#wx.Rect.GetHeight "wx.Rect.GetHeight") and [`SetHeight`](#wx.Rect.SetHeight "wx.Rect.SetHeight")
    Left: int  # `Left`[¶](#wx.Rect.Left "Permalink to this definition")See [`GetLeft`](#wx.Rect.GetLeft "wx.Rect.GetLeft") and [`SetLeft`](#wx.Rect.SetLeft "wx.Rect.SetLeft")
    Position: 'Point'  # `Position`[¶](#wx.Rect.Position "Permalink to this definition")See [`GetPosition`](#wx.Rect.GetPosition "wx.Rect.GetPosition") and [`SetPosition`](#wx.Rect.SetPosition "wx.Rect.SetPosition")
    Right: int  # `Right`[¶](#wx.Rect.Right "Permalink to this definition")See [`GetRight`](#wx.Rect.GetRight "wx.Rect.GetRight") and [`SetRight`](#wx.Rect.SetRight "wx.Rect.SetRight")
    Size: '_Size'  # `Size`[¶](#wx.Rect.Size "Permalink to this definition")See [`GetSize`](#wx.Rect.GetSize "wx.Rect.GetSize") and [`SetSize`](#wx.Rect.SetSize "wx.Rect.SetSize")
    Top: int  # `Top`[¶](#wx.Rect.Top "Permalink to this definition")See [`GetTop`](#wx.Rect.GetTop "wx.Rect.GetTop") and [`SetTop`](#wx.Rect.SetTop "wx.Rect.SetTop")
    TopLeft: 'Point'  # `TopLeft`[¶](#wx.Rect.TopLeft "Permalink to this definition")See [`GetTopLeft`](#wx.Rect.GetTopLeft "wx.Rect.GetTopLeft") and [`SetTopLeft`](#wx.Rect.SetTopLeft "wx.Rect.SetTopLeft")
    TopRight: 'Point'  # `TopRight`[¶](#wx.Rect.TopRight "Permalink to this definition")See [`GetTopRight`](#wx.Rect.GetTopRight "wx.Rect.GetTopRight") and [`SetTopRight`](#wx.Rect.SetTopRight "wx.Rect.SetTopRight")
    Width: int  # `Width`[¶](#wx.Rect.Width "Permalink to this definition")See [`GetWidth`](#wx.Rect.GetWidth "wx.Rect.GetWidth") and [`SetWidth`](#wx.Rect.SetWidth "wx.Rect.SetWidth")
    X: int  # `X`[¶](#wx.Rect.X "Permalink to this definition")See [`GetX`](#wx.Rect.GetX "wx.Rect.GetX") and [`SetX`](#wx.Rect.SetX "wx.Rect.SetX")
    Y: int  # `Y`[¶](#wx.Rect.Y "Permalink to this definition")See [`GetY`](#wx.Rect.GetY "wx.Rect.GetY") and [`SetY`](#wx.Rect.SetY "wx.Rect.SetY")
    bottom: Any  # `bottom`[¶](#wx.Rect.bottom "Permalink to this definition")See [`GetBottom`](#wx.Rect.GetBottom "wx.Rect.GetBottom") and [`SetBottom`](#wx.Rect.SetBottom "wx.Rect.SetBottom")
    bottomLeft: Any  # `bottomLeft`[¶](#wx.Rect.bottomLeft "Permalink to this definition")See [`GetBottomLeft`](#wx.Rect.GetBottomLeft "wx.Rect.GetBottomLeft") and [`SetBottomLeft`](#wx.Rect.SetBottomLeft "wx.Rect.SetBottomLeft")
    bottomRight: Any  # `bottomRight`[¶](#wx.Rect.bottomRight "Permalink to this definition")See [`GetBottomRight`](#wx.Rect.GetBottomRight "wx.Rect.GetBottomRight") and [`SetBottomRight`](#wx.Rect.SetBottomRight "wx.Rect.SetBottomRight")
    height: Any  # `height`[¶](#wx.Rect.height "Permalink to this definition")A public C++ attribute of type `int`. Height member.
    left: Any  # `left`[¶](#wx.Rect.left "Permalink to this definition")See [`GetLeft`](#wx.Rect.GetLeft "wx.Rect.GetLeft") and [`SetLeft`](#wx.Rect.SetLeft "wx.Rect.SetLeft")
    right: Any  # `right`[¶](#wx.Rect.right "Permalink to this definition")See [`GetRight`](#wx.Rect.GetRight "wx.Rect.GetRight") and [`SetRight`](#wx.Rect.SetRight "wx.Rect.SetRight")
    top: Any  # `top`[¶](#wx.Rect.top "Permalink to this definition")See [`GetTop`](#wx.Rect.GetTop "wx.Rect.GetTop") and [`SetTop`](#wx.Rect.SetTop "wx.Rect.SetTop")
    topLeft: Any  # `topLeft`[¶](#wx.Rect.topLeft "Permalink to this definition")See [`GetTopLeft`](#wx.Rect.GetTopLeft "wx.Rect.GetTopLeft") and [`SetTopLeft`](#wx.Rect.SetTopLeft "wx.Rect.SetTopLeft")
    topRight: Any  # `topRight`[¶](#wx.Rect.topRight "Permalink to this definition")See [`GetTopRight`](#wx.Rect.GetTopRight "wx.Rect.GetTopRight") and [`SetTopRight`](#wx.Rect.SetTopRight "wx.Rect.SetTopRight")
    width: Any  # `width`[¶](#wx.Rect.width "Permalink to this definition")A public C++ attribute of type `int`. Width member.
    x: Any  # `x`[¶](#wx.Rect.x "Permalink to this definition")A public C++ attribute of type `int`. x coordinate of the top-left corner of the rectangle.
    y: Any  # `y`[¶](#wx.Rect.y "Permalink to this definition")A public C++ attribute of type `int`. y coordinate of the top-left corner of the rectangle.



class Rect2D:
    """ **Possible constructors**:



```
Rect2DDouble()

Rect2DDouble(x, y, w, h)

```


  


        Source: https://docs.wxpython.org/wx.Rect2D.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect2D.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, x, y, w, h)*



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –
* **w** (*wx.Double*) –
* **h** (*wx.Double*) –






---

  





            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def ConstrainTo(self, rect: Rect2DDouble) -> None:
        """ 

`ConstrainTo`(*self*, *rect*)[¶](#wx.Rect2D.ConstrainTo "Permalink to this definition")

Parameters
**rect** (*Rect2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Contains(self, *args, **kw) -> bool:
        """ 

`Contains`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect2D.Contains "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Contains** *(self, pt)*



Parameters
**pt** (*Point2DDouble*) – 



Return type
*bool*






---

  



**Contains** *(self, rect)*



Parameters
**rect** (*Rect2DDouble*) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def CreateIntersection(self, otherRect: Rect2DDouble) -> 'Rect2DDouble':
        """ 

`CreateIntersection`(*self*, *otherRect*)[¶](#wx.Rect2D.CreateIntersection "Permalink to this definition")

Parameters
**otherRect** (*Rect2DDouble*) – 



Return type
*Rect2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def CreateUnion(self, otherRect: Rect2DDouble) -> 'Rect2DDouble':
        """ 

`CreateUnion`(*self*, *otherRect*)[¶](#wx.Rect2D.CreateUnion "Permalink to this definition")

Parameters
**otherRect** (*Rect2DDouble*) – 



Return type
*Rect2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Get(self) -> Any:
        """ 

`Get`(*self*)[¶](#wx.Rect2D.Get "Permalink to this definition")

> Get() . (x, y, width, height)
> 
> 
> Return the rectangle’s properties as a tuple.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetBottom(self) -> 'Double':
        """ 

`GetBottom`(*self*)[¶](#wx.Rect2D.GetBottom "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetCentre(self) -> 'Point2DDouble':
        """ 

`GetCentre`(*self*)[¶](#wx.Rect2D.GetCentre "Permalink to this definition")

Return type
*Point2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.Rect2D.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.Rect2D` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.Rect2D`
with a simple statement like this: `obj = wx.Rect2D(imObj)`.




            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetLeft(self) -> 'Double':
        """ 

`GetLeft`(*self*)[¶](#wx.Rect2D.GetLeft "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetLeftBottom(self) -> 'Point2DDouble':
        """ 

`GetLeftBottom`(*self*)[¶](#wx.Rect2D.GetLeftBottom "Permalink to this definition")

Return type
*Point2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetLeftTop(self) -> 'Point2DDouble':
        """ 

`GetLeftTop`(*self*)[¶](#wx.Rect2D.GetLeftTop "Permalink to this definition")

Return type
*Point2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetOutCode(self, pt: Point2DDouble) -> 'OutCode':
        """ 

`GetOutCode`(*self*, *pt*)[¶](#wx.Rect2D.GetOutCode "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 



Return type
 [wx.OutCode](wx.OutCode.enumeration.html#wx-outcode)






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetOutcode(self, pt: Point2DDouble) -> 'OutCode':
        """ 

`GetOutcode`(*self*, *pt*)[¶](#wx.Rect2D.GetOutcode "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 



Return type
 [wx.OutCode](wx.OutCode.enumeration.html#wx-outcode)






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetPosition(self) -> 'Point2DDouble':
        """ 

`GetPosition`(*self*)[¶](#wx.Rect2D.GetPosition "Permalink to this definition")

Return type
*Point2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetRight(self) -> 'Double':
        """ 

`GetRight`(*self*)[¶](#wx.Rect2D.GetRight "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetRightBottom(self) -> 'Point2DDouble':
        """ 

`GetRightBottom`(*self*)[¶](#wx.Rect2D.GetRightBottom "Permalink to this definition")

Return type
*Point2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetRightTop(self) -> 'Point2DDouble':
        """ 

`GetRightTop`(*self*)[¶](#wx.Rect2D.GetRightTop "Permalink to this definition")

Return type
*Point2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.Rect2D.GetSize "Permalink to this definition")

Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def GetTop(self) -> 'Double':
        """ 

`GetTop`(*self*)[¶](#wx.Rect2D.GetTop "Permalink to this definition")

Return type
*wx.Double*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def HaveEqualSize(self, rect: Rect2DDouble) -> bool:
        """ 

`HaveEqualSize`(*self*, *rect*)[¶](#wx.Rect2D.HaveEqualSize "Permalink to this definition")

Parameters
**rect** (*Rect2DDouble*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Inset(self, *args, **kw) -> None:
        """ 

`Inset`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect2D.Inset "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Inset** *(self, x, y)*



Parameters
* **x** (*wx.Double*) –
* **y** (*wx.Double*) –






---

  



**Inset** *(self, left, top, right, bottom)*



Parameters
* **left** (*wx.Double*) –
* **top** (*wx.Double*) –
* **right** (*wx.Double*) –
* **bottom** (*wx.Double*) –






---

  





            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Interpolate(self, widthfactor, heightfactor) -> 'Point2DDouble':
        """ 

`Interpolate`(*self*, *widthfactor*, *heightfactor*)[¶](#wx.Rect2D.Interpolate "Permalink to this definition")

Parameters
* **widthfactor** (*wx.int*) –
* **heightfactor** (*wx.int*) –



Return type
*Point2DDouble*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Intersect(self, *args, **kw) -> None:
        """ 

`Intersect`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect2D.Intersect "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Intersect** *(self, otherRect)*



Parameters
**otherRect** (*Rect2DDouble*) – 






---

  



**Intersect** *(src1, src2, dest)*



Parameters
* **src1** (*Rect2DDouble*) –
* **src2** (*Rect2DDouble*) –
* **dest** (*Rect2DDouble*) –






---

  





            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Intersects(self, rect: Rect2DDouble) -> bool:
        """ 

`Intersects`(*self*, *rect*)[¶](#wx.Rect2D.Intersects "Permalink to this definition")

Parameters
**rect** (*Rect2DDouble*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.Rect2D.IsEmpty "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveBottomTo(self, n: 'Double') -> None:
        """ 

`MoveBottomTo`(*self*, *n*)[¶](#wx.Rect2D.MoveBottomTo "Permalink to this definition")

Parameters
**n** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveCentreTo(self, pt: Point2DDouble) -> None:
        """ 

`MoveCentreTo`(*self*, *pt*)[¶](#wx.Rect2D.MoveCentreTo "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveLeftBottomTo(self, pt: Point2DDouble) -> None:
        """ 

`MoveLeftBottomTo`(*self*, *pt*)[¶](#wx.Rect2D.MoveLeftBottomTo "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveLeftTo(self, n: 'Double') -> None:
        """ 

`MoveLeftTo`(*self*, *n*)[¶](#wx.Rect2D.MoveLeftTo "Permalink to this definition")

Parameters
**n** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveLeftTopTo(self, pt: Point2DDouble) -> None:
        """ 

`MoveLeftTopTo`(*self*, *pt*)[¶](#wx.Rect2D.MoveLeftTopTo "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveRightBottomTo(self, pt: Point2DDouble) -> None:
        """ 

`MoveRightBottomTo`(*self*, *pt*)[¶](#wx.Rect2D.MoveRightBottomTo "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveRightTo(self, n: 'Double') -> None:
        """ 

`MoveRightTo`(*self*, *n*)[¶](#wx.Rect2D.MoveRightTo "Permalink to this definition")

Parameters
**n** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveRightTopTo(self, pt: Point2DDouble) -> None:
        """ 

`MoveRightTopTo`(*self*, *pt*)[¶](#wx.Rect2D.MoveRightTopTo "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def MoveTopTo(self, n: 'Double') -> None:
        """ 

`MoveTopTo`(*self*, *n*)[¶](#wx.Rect2D.MoveTopTo "Permalink to this definition")

Parameters
**n** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Offset(self, pt: Point2DDouble) -> None:
        """ 

`Offset`(*self*, *pt*)[¶](#wx.Rect2D.Offset "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Scale(self: 'Double', *args, **kw) -> None:
        """ 

`Scale`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect2D.Scale "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Scale** *(self, f)*



Parameters
**f** (*wx.Double*) – 






---

  



**Scale** *(self, num, denum)*



Parameters
* **num** (*wx.int*) –
* **denum** (*wx.int*) –






---

  





            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetBottom(self, n: 'Double') -> None:
        """ 

`SetBottom`(*self*, *n*)[¶](#wx.Rect2D.SetBottom "Permalink to this definition")

Parameters
**n** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetCentre(self, pt: Point2DDouble) -> None:
        """ 

`SetCentre`(*self*, *pt*)[¶](#wx.Rect2D.SetCentre "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetLeft(self, n: 'Double') -> None:
        """ 

`SetLeft`(*self*, *n*)[¶](#wx.Rect2D.SetLeft "Permalink to this definition")

Parameters
**n** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetLeftBottom(self, pt: Point2DDouble) -> None:
        """ 

`SetLeftBottom`(*self*, *pt*)[¶](#wx.Rect2D.SetLeftBottom "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetLeftTop(self, pt: Point2DDouble) -> None:
        """ 

`SetLeftTop`(*self*, *pt*)[¶](#wx.Rect2D.SetLeftTop "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetRight(self, n: 'Double') -> None:
        """ 

`SetRight`(*self*, *n*)[¶](#wx.Rect2D.SetRight "Permalink to this definition")

Parameters
**n** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetRightBottom(self, pt: Point2DDouble) -> None:
        """ 

`SetRightBottom`(*self*, *pt*)[¶](#wx.Rect2D.SetRightBottom "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetRightTop(self, pt: Point2DDouble) -> None:
        """ 

`SetRightTop`(*self*, *pt*)[¶](#wx.Rect2D.SetRightTop "Permalink to this definition")

Parameters
**pt** (*Point2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def SetTop(self, n: 'Double') -> None:
        """ 

`SetTop`(*self*, *n*)[¶](#wx.Rect2D.SetTop "Permalink to this definition")

Parameters
**n** (*wx.Double*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def Union(self, *args, **kw) -> None:
        """ 

`Union`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Rect2D.Union "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Union** *(self, otherRect)*



Parameters
**otherRect** (*Rect2DDouble*) – 






---

  



**Union** *(self, pt)*



Parameters
**pt** (*Point2DDouble*) – 






---

  



**Union** *(src1, src2, dest)*



Parameters
* **src1** (*Rect2DDouble*) –
* **src2** (*Rect2DDouble*) –
* **dest** (*Rect2DDouble*) –






---

  





            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __bool__(self) -> None:
        """ 

`__bool__`(*self*)[¶](#wx.Rect2D.__bool__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.Rect2D.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.Rect2D.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.Rect2D.__nonzero__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.Rect2D.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.Rect2D.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.Rect2D.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.Rect2D.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.Rect2D.__ne__ "Permalink to this definition")

Parameters
**rect** (*Rect2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.Rect2D.__eq__ "Permalink to this definition")

Parameters
**rect** (*Rect2DDouble*) – 






            Source: https://docs.wxpython.org/wx.Rect2D.html
        """

    Bottom: 'Double'  # `Bottom`[¶](#wx.Rect2D.Bottom "Permalink to this definition")See [`GetBottom`](#wx.Rect2D.GetBottom "wx.Rect2D.GetBottom") and [`SetBottom`](#wx.Rect2D.SetBottom "wx.Rect2D.SetBottom")
    Centre: 'Point2DDouble'  # `Centre`[¶](#wx.Rect2D.Centre "Permalink to this definition")See [`GetCentre`](#wx.Rect2D.GetCentre "wx.Rect2D.GetCentre") and [`SetCentre`](#wx.Rect2D.SetCentre "wx.Rect2D.SetCentre")
    IM: None  # `IM`[¶](#wx.Rect2D.IM "Permalink to this definition")See [`GetIM`](#wx.Rect2D.GetIM "wx.Rect2D.GetIM")
    Left: 'Double'  # `Left`[¶](#wx.Rect2D.Left "Permalink to this definition")See [`GetLeft`](#wx.Rect2D.GetLeft "wx.Rect2D.GetLeft") and [`SetLeft`](#wx.Rect2D.SetLeft "wx.Rect2D.SetLeft")
    LeftBottom: 'Point2DDouble'  # `LeftBottom`[¶](#wx.Rect2D.LeftBottom "Permalink to this definition")See [`GetLeftBottom`](#wx.Rect2D.GetLeftBottom "wx.Rect2D.GetLeftBottom") and [`SetLeftBottom`](#wx.Rect2D.SetLeftBottom "wx.Rect2D.SetLeftBottom")
    LeftTop: 'Point2DDouble'  # `LeftTop`[¶](#wx.Rect2D.LeftTop "Permalink to this definition")See [`GetLeftTop`](#wx.Rect2D.GetLeftTop "wx.Rect2D.GetLeftTop") and [`SetLeftTop`](#wx.Rect2D.SetLeftTop "wx.Rect2D.SetLeftTop")
    Position: 'Point2DDouble'  # `Position`[¶](#wx.Rect2D.Position "Permalink to this definition")See [`GetPosition`](#wx.Rect2D.GetPosition "wx.Rect2D.GetPosition")
    Right: 'Double'  # `Right`[¶](#wx.Rect2D.Right "Permalink to this definition")See [`GetRight`](#wx.Rect2D.GetRight "wx.Rect2D.GetRight") and [`SetRight`](#wx.Rect2D.SetRight "wx.Rect2D.SetRight")
    RightBottom: 'Point2DDouble'  # `RightBottom`[¶](#wx.Rect2D.RightBottom "Permalink to this definition")See [`GetRightBottom`](#wx.Rect2D.GetRightBottom "wx.Rect2D.GetRightBottom") and [`SetRightBottom`](#wx.Rect2D.SetRightBottom "wx.Rect2D.SetRightBottom")
    RightTop: 'Point2DDouble'  # `RightTop`[¶](#wx.Rect2D.RightTop "Permalink to this definition")See [`GetRightTop`](#wx.Rect2D.GetRightTop "wx.Rect2D.GetRightTop") and [`SetRightTop`](#wx.Rect2D.SetRightTop "wx.Rect2D.SetRightTop")
    Size: '_Size'  # `Size`[¶](#wx.Rect2D.Size "Permalink to this definition")See [`GetSize`](#wx.Rect2D.GetSize "wx.Rect2D.GetSize")
    Top: 'Double'  # `Top`[¶](#wx.Rect2D.Top "Permalink to this definition")See [`GetTop`](#wx.Rect2D.GetTop "wx.Rect2D.GetTop") and [`SetTop`](#wx.Rect2D.SetTop "wx.Rect2D.SetTop")
    m_height: Any  # `m_height`[¶](#wx.Rect2D.m_height "Permalink to this definition")A public C++ attribute of type *Double* .
    m_width: Any  # `m_width`[¶](#wx.Rect2D.m_width "Permalink to this definition")A public C++ attribute of type *Double* .
    m_x: Any  # `m_x`[¶](#wx.Rect2D.m_x "Permalink to this definition")A public C++ attribute of type *Double* .
    m_y: Any  # `m_y`[¶](#wx.Rect2D.m_y "Permalink to this definition")A public C++ attribute of type *Double* .



class RefCounter:
    """ **Possible constructors**:



```
RefCounter()

```


This class is used to manage reference-counting providing a simple
interface and a counter.


  


        Source: https://docs.wxpython.org/wx.RefCounter.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.RefCounter.__init__ "Permalink to this definition")
Default constructor.


Initialises the internal reference count to 1.




            Source: https://docs.wxpython.org/wx.RefCounter.html
        """

    def DecRef(self) -> None:
        """ 

`DecRef`(*self*)[¶](#wx.RefCounter.DecRef "Permalink to this definition")
Decrements the reference count associated with this shared data and, if it reaches zero, destroys this instance of  [wx.RefCounter](#wx-refcounter) releasing its memory.


Please note that after calling this function, the caller should absolutely avoid to use the pointer to this instance since it may not be valid anymore.




            Source: https://docs.wxpython.org/wx.RefCounter.html
        """

    def GetRefCount(self) -> int:
        """ 

`GetRefCount`(*self*)[¶](#wx.RefCounter.GetRefCount "Permalink to this definition")
Returns the reference count associated with this shared data.


When this goes to zero during a [`DecRef`](#wx.RefCounter.DecRef "wx.RefCounter.DecRef") call, the object will auto-free itself.



Return type
*int*






            Source: https://docs.wxpython.org/wx.RefCounter.html
        """

    def IncRef(self) -> None:
        """ 

`IncRef`(*self*)[¶](#wx.RefCounter.IncRef "Permalink to this definition")
Increments the reference count associated with this shared data.




            Source: https://docs.wxpython.org/wx.RefCounter.html
        """

    RefCount: int  # `RefCount`[¶](#wx.RefCounter.RefCount "Permalink to this definition")See [`GetRefCount`](#wx.RefCounter.GetRefCount "wx.RefCounter.GetRefCount")



class Region(GDIObject):
    """ **Possible constructors**:



```
Region()

Region(x, y, width, height)

Region(topLeft, bottomRight)

Region(rect)

Region(region)

Region(bmp)

Region(bmp, transColour, tolerance=0)

Region(points, fillStyle=ODDEVEN_RULE)

```


A Region represents a simple or complex region on a device context
or window.


  


        Source: https://docs.wxpython.org/wx.Region.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Region.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


This constructor creates an invalid, or null, object, i.e. calling IsOk() on it returns `False` and [`IsEmpty`](#wx.Region.IsEmpty "wx.Region.IsEmpty") returns `True`.




---

  



**\_\_init\_\_** *(self, x, y, width, height)*


Constructs a rectangular region with the given position and size.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –






---

  



**\_\_init\_\_** *(self, topLeft, bottomRight)*


Constructs a rectangular region from the top left point and the bottom right point.



Parameters
* **topLeft** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **bottomRight** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






---

  



**\_\_init\_\_** *(self, rect)*


Constructs a rectangular region a  [wx.Rect](wx.Rect.html#wx-rect) object.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






---

  



**\_\_init\_\_** *(self, region)*


Copy constructor, uses [Reference Counting](refcount_overview.html#reference-counting).



Parameters
**region** ([*wx.Region*](#wx.Region "wx.Region")) – 






---

  



**\_\_init\_\_** *(self, bmp)*


Constructs a region using a bitmap.


See [`Union`](#wx.Region.Union "wx.Region.Union") for more details.



Parameters
**bmp** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 






---

  



**\_\_init\_\_** *(self, bmp, transColour, tolerance=0)*


Constructs a region using the non-transparent pixels of a bitmap.


See [`Union`](#wx.Region.Union "wx.Region.Union") for more details.



Parameters
* **bmp** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **transColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **tolerance** (*int*) –






---

  



**\_\_init\_\_** *(self, points, fillStyle=ODDEVEN\_RULE)*



> Constructs a region corresponding to the polygon made from the points
> in the provided sequence.




---

  





            Source: https://docs.wxpython.org/wx.Region.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.Region.Clear "Permalink to this definition")
Clears the current region.


The object becomes invalid, or null, after being cleared.




            Source: https://docs.wxpython.org/wx.Region.html
        """

    def Contains(self, *args, **kw) -> 'RegionContain':
        """ 

`Contains`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Region.Contains "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Contains** *(self, x, y)*


Returns a value indicating whether the given point is contained within the region.


This method always returns `OutRegion` for an invalid region but may, nevertheless, be safely called in this case.



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
 [wx.RegionContain](wx.RegionContain.enumeration.html#wx-regioncontain)



Returns
The return value is one of `OutRegion` and `InRegion` .






---

  



**Contains** *(self, pt)*


Returns a value indicating whether the given point is contained within the region.


This method always returns `OutRegion` for an invalid region but may, nevertheless, be safely called in this case.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.RegionContain](wx.RegionContain.enumeration.html#wx-regioncontain)



Returns
The return value is one of `OutRegion` and `InRegion` .






---

  



**Contains** *(self, x, y, width, height)*


Returns a value indicating whether the given rectangle is contained within the region.


This method always returns `OutRegion` for an invalid region but may, nevertheless, be safely called in this case.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –



Return type
 [wx.RegionContain](wx.RegionContain.enumeration.html#wx-regioncontain)



Returns
One of `wx.OutRegion` , `wx.PartRegion` or `wx.InRegion` .





Note


On Windows, only `wx.OutRegion` and `wx.InRegion` are returned; a value `wx.InRegion` then indicates that all or some part of the region is contained in this region.





---

  



**Contains** *(self, rect)*


Returns a value indicating whether the given rectangle is contained within the region.


This method always returns `OutRegion` for an invalid region but may, nevertheless, be safely called in this case.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
 [wx.RegionContain](wx.RegionContain.enumeration.html#wx-regioncontain)



Returns
One of `wx.OutRegion` , `wx.PartRegion` or `wx.InRegion` .





Note


On Windows, only `wx.OutRegion` and `wx.InRegion` are returned; a value `wx.InRegion` then indicates that all or some part of the region is contained in this region.





---

  





            Source: https://docs.wxpython.org/wx.Region.html
        """

    def ConvertToBitmap(self) -> 'Bitmap':
        """ 

`ConvertToBitmap`(*self*)[¶](#wx.Region.ConvertToBitmap "Permalink to this definition")
Convert the region to a black and white bitmap with the white pixels being inside the region.


This method can’t be used for invalid region.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.Region.html
        """

    def GetBox(self) -> 'Rect':
        """ 

`GetBox`(*self*)[¶](#wx.Region.GetBox "Permalink to this definition")
Returns the outer bounds of the region.


This method returns 0-sized bounding box for invalid regions.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Region.html
        """

    def Intersect(self, *args, **kw) -> bool:
        """ 

`Intersect`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Region.Intersect "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Intersect** *(self, x, y, width, height)*


Finds the intersection of this region and another, rectangular region, specified using position and size.


This method always fails, i.e. returns `False`, if this region is invalid but may nevertheless be safely used even in this case.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


Creates the intersection of the two regions, that is, the parts which are in both regions. The result is stored in this region.





---

  



**Intersect** *(self, rect)*


Finds the intersection of this region and another, rectangular region.


This method always fails, i.e. returns `False`, if this region is invalid but may nevertheless be safely used even in this case.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


Creates the intersection of the two regions, that is, the parts which are in both regions. The result is stored in this region.





---

  



**Intersect** *(self, region)*


Finds the intersection of this region and another region.


This method always fails, i.e. returns `False`, if this region is invalid but may nevertheless be safely used even in this case.



Parameters
**region** ([*wx.Region*](#wx.Region "wx.Region")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


Creates the intersection of the two regions, that is, the parts which are in both regions. The result is stored in this region.





---

  





            Source: https://docs.wxpython.org/wx.Region.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.Region.IsEmpty "Permalink to this definition")
Returns `True` if the region is empty, `False` otherwise.


Always returns `True` if the region is invalid.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Region.html
        """

    def IsEqual(self, region: 'Region') -> bool:
        """ 

`IsEqual`(*self*, *region*)[¶](#wx.Region.IsEqual "Permalink to this definition")
Returns `True` if the region is equal to, i.e. covers the same area as, another one.


If both this region and *region* are both invalid, they are considered to be equal.



Parameters
**region** ([*wx.Region*](#wx.Region "wx.Region")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Region.html
        """

    def Offset(self, *args, **kw) -> None:
        """ 

`Offset`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Region.Offset "Permalink to this definition")
Moves the region by the specified offsets in horizontal and vertical directions.


This method can’t be called if the region is invalid as it doesn’t make sense to offset it then. Attempts to do it will result in assert failure.



Returns
`True` if successful, `False` otherwise (the region is unchanged then).




[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Offset** *(self, x, y)*



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*bool*






---

  



**Offset** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.Region.html
        """

    def Subtract(self, *args, **kw) -> bool:
        """ 

`Subtract`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Region.Subtract "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Subtract** *(self, rect)*


Subtracts a rectangular region from this region.


This method always fails, i.e. returns `False`, if this region is invalid but may nevertheless be safely used even in this case.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation combines the parts of ‘this’ region that are not part of the second region. The result is stored in this region.





---

  



**Subtract** *(self, region)*


Subtracts a region from this region.


This method always fails, i.e. returns `False`, if this region is invalid but may nevertheless be safely used even in this case.



Parameters
**region** ([*wx.Region*](#wx.Region "wx.Region")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation combines the parts of ‘this’ region that are not part of the second region. The result is stored in this region.





---

  





            Source: https://docs.wxpython.org/wx.Region.html
        """

    def Union(self, *args, **kw) -> bool:
        """ 

`Union`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Region.Union "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Union** *(self, x, y, width, height)*


Finds the union of this region and another, rectangular region, specified using position and size.


This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given rectangle.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation creates a region that combines all of this region and the second region. The result is stored in this region.





---

  



**Union** *(self, rect)*


Finds the union of this region and another, rectangular region.


This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given rectangle.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation creates a region that combines all of this region and the second region. The result is stored in this region.





---

  



**Union** *(self, region)*


Finds the union of this region and another region.


This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given *region*.



Parameters
**region** ([*wx.Region*](#wx.Region "wx.Region")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation creates a region that combines all of this region and the second region. The result is stored in this region.





---

  



**Union** *(self, bmp)*


Finds the union of this region and the non-transparent pixels of a bitmap.


The bitmap’s mask is used to determine transparency. If the bitmap doesn’t have a mask, the bitmap’s full dimensions are used.



Parameters
**bmp** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation creates a region that combines all of this region and the second region. The result is stored in this region.





---

  



**Union** *(self, bmp, transColour, tolerance=0)*


Finds the union of this region and the non-transparent pixels of a bitmap.


Colour to be treated as transparent is specified in the *transColour* argument, along with an optional colour tolerance value.



Parameters
* **bmp** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) –
* **transColour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **tolerance** (*int*) –



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation creates a region that combines all of this region and the second region. The result is stored in this region.





---

  





            Source: https://docs.wxpython.org/wx.Region.html
        """

    def Xor(self, *args, **kw) -> bool:
        """ 

`Xor`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Region.Xor "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Xor** *(self, x, y, width, height)*


Finds the Xor of this region and another, rectangular region, specified using position and size.


This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given rectangle.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **width** (*int*) –
* **height** (*int*) –



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation creates a region that combines all of this region and the second region, except for any overlapping areas. The result is stored in this region.





---

  



**Xor** *(self, rect)*


Finds the Xor of this region and another, rectangular region.


This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given rectangle.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation creates a region that combines all of this region and the second region, except for any overlapping areas. The result is stored in this region.





---

  



**Xor** *(self, region)*


Finds the Xor of this region and another region.


This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given *region*.



Parameters
**region** ([*wx.Region*](#wx.Region "wx.Region")) – 



Return type
*bool*



Returns
`True` if successful, `False` otherwise.





Note


This operation creates a region that combines all of this region and the second region, except for any overlapping areas. The result is stored in this region.





---

  





            Source: https://docs.wxpython.org/wx.Region.html
        """

    def __iter__(self) -> None:
        """ 

`__iter__`(*self*)[¶](#wx.Region.__iter__ "Permalink to this definition")
Returns a rectangle iterator conforming to the Python iterator
protocol.




            Source: https://docs.wxpython.org/wx.Region.html
        """

    Box: 'Rect'  # `Box`[¶](#wx.Region.Box "Permalink to this definition")See [`GetBox`](#wx.Region.GetBox "wx.Region.GetBox")



class RegionIterator(Object):
    """ **Possible constructors**:



```
RegionIterator()

RegionIterator(region)

```


This class is used to iterate through the rectangles in a region,
typically when examining the damaged regions of a window within an
OnPaint call.


  


        Source: https://docs.wxpython.org/wx.RegionIterator.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RegionIterator.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, region)*


Creates an iterator object given a region.



Parameters
**region** ([*wx.Region*](wx.Region.html#wx.Region "wx.Region")) – 






---

  





            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def GetH(self) -> 'Coord':
        """ 

`GetH`(*self*)[¶](#wx.RegionIterator.GetH "Permalink to this definition")
An alias for [`GetHeight`](#wx.RegionIterator.GetHeight "wx.RegionIterator.GetHeight") .



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def GetHeight(self) -> 'Coord':
        """ 

`GetHeight`(*self*)[¶](#wx.RegionIterator.GetHeight "Permalink to this definition")
Returns the height value for the current region.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def GetRect(self) -> 'Rect':
        """ 

`GetRect`(*self*)[¶](#wx.RegionIterator.GetRect "Permalink to this definition")
Returns the current rectangle.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def GetW(self) -> 'Coord':
        """ 

`GetW`(*self*)[¶](#wx.RegionIterator.GetW "Permalink to this definition")
An alias for [`GetWidth`](#wx.RegionIterator.GetWidth "wx.RegionIterator.GetWidth") .



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def GetWidth(self) -> 'Coord':
        """ 

`GetWidth`(*self*)[¶](#wx.RegionIterator.GetWidth "Permalink to this definition")
Returns the width value for the current region.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def GetX(self) -> 'Coord':
        """ 

`GetX`(*self*)[¶](#wx.RegionIterator.GetX "Permalink to this definition")
Returns the x value for the current region.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def GetY(self) -> 'Coord':
        """ 

`GetY`(*self*)[¶](#wx.RegionIterator.GetY "Permalink to this definition")
Returns the y value for the current region.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def HaveRects(self) -> bool:
        """ 

`HaveRects`(*self*)[¶](#wx.RegionIterator.HaveRects "Permalink to this definition")
Returns `True` if there are still some rectangles; otherwise returns `False`.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def Next(self) -> None:
        """ 

`Next`(*self*)[¶](#wx.RegionIterator.Next "Permalink to this definition")
Move the iterator to the next rectangle in the region.




            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def Reset(self, *args, **kw) -> None:
        """ 

`Reset`(*self*, *\*args*, *\*\*kw*)[¶](#wx.RegionIterator.Reset "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Reset** *(self)*


Resets the iterator to the beginning of the rectangles.




---

  



**Reset** *(self, region)*


Resets the iterator to the given region.



Parameters
**region** ([*wx.Region*](wx.Region.html#wx.Region "wx.Region")) – 






---

  





            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.RegionIterator.__bool__ "Permalink to this definition")
Returns `True` while there are still rectangles available in the iteration.



Return type
*int*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.RegionIterator.__nonzero__ "Permalink to this definition")
Returns `True` while there are still rectangles available in the iteration.



Return type
*int*






            Source: https://docs.wxpython.org/wx.RegionIterator.html
        """

    H: 'Coord'  # `H`[¶](#wx.RegionIterator.H "Permalink to this definition")See [`GetH`](#wx.RegionIterator.GetH "wx.RegionIterator.GetH")
    Height: 'Coord'  # `Height`[¶](#wx.RegionIterator.Height "Permalink to this definition")See [`GetHeight`](#wx.RegionIterator.GetHeight "wx.RegionIterator.GetHeight")
    Rect: '_Rect'  # `Rect`[¶](#wx.RegionIterator.Rect "Permalink to this definition")See [`GetRect`](#wx.RegionIterator.GetRect "wx.RegionIterator.GetRect")
    W: 'Coord'  # `W`[¶](#wx.RegionIterator.W "Permalink to this definition")See [`GetW`](#wx.RegionIterator.GetW "wx.RegionIterator.GetW")
    Width: 'Coord'  # `Width`[¶](#wx.RegionIterator.Width "Permalink to this definition")See [`GetWidth`](#wx.RegionIterator.GetWidth "wx.RegionIterator.GetWidth")
    X: 'Coord'  # `X`[¶](#wx.RegionIterator.X "Permalink to this definition")See [`GetX`](#wx.RegionIterator.GetX "wx.RegionIterator.GetX")
    Y: 'Coord'  # `Y`[¶](#wx.RegionIterator.Y "Permalink to this definition")See [`GetY`](#wx.RegionIterator.GetY "wx.RegionIterator.GetY")



class RendererVersion:
    """ **Possible constructors**:



```
RendererVersion(version_, age_)

```


This simple struct represents the RendererNative interface version
and is only used as the return value of
*RendererNative.GetVersion().*


  


        Source: https://docs.wxpython.org/wx.RendererVersion.html
    """
    def __init__(self, version_, age_) -> None:
        """ 

`__init__`(*self*, *version\_*, *age\_*)[¶](#wx.RendererVersion.__init__ "Permalink to this definition")

Parameters
* **version\_** (*int*) –
* **age\_** (*int*) –






            Source: https://docs.wxpython.org/wx.RendererVersion.html
        """

    @staticmethod
    def IsCompatible(ver: 'RendererVersion') -> bool:
        """ 

*static* `IsCompatible`(*ver*)[¶](#wx.RendererVersion.IsCompatible "Permalink to this definition")
Checks if the main program is compatible with the renderer having the version *ver*, returns `True` if it is and `False` otherwise.


This method is used by [`wx.RendererNative.Load`](wx.RendererNative.html#wx.RendererNative.Load "wx.RendererNative.Load") to determine whether a renderer can be used.



Parameters
**ver** ([*wx.RendererVersion*](#wx.RendererVersion "wx.RendererVersion")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.RendererVersion.html
        """

    age: Any  # `age`[¶](#wx.RendererVersion.age "Permalink to this definition")A public C++ attribute of type `int`. The age component.
    version: Any  # `version`[¶](#wx.RendererVersion.version "Permalink to this definition")A public C++ attribute of type `int`. The version component.



class RichMessageDialog:
    """ **Possible constructors**:



```
RichMessageDialog(parent, message, caption=MessageBoxCaptionStr,
                  style=OK|CENTRE)

```


Extension of MessageDialog with additional functionality.


  


        Source: https://docs.wxpython.org/wx.RichMessageDialog.html
    """
    def __init__(self, parent, message, caption=MessageBoxCaptionStr, style=OK|CENTRE) -> None:
        """ 

`__init__`(*self*, *parent*, *message*, *caption=MessageBoxCaptionStr*, *style=OK|CENTRE*)[¶](#wx.RichMessageDialog.__init__ "Permalink to this definition")
Constructor specifying the rich message dialog properties.


Works just like the constructor for  [wx.MessageDialog](wx.MessageDialog.html#wx-messagedialog).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **message** (*string*) –
* **caption** (*string*) –
* **style** (*long*) –






            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def GetCheckBoxText(self) -> str:
        """ 

`GetCheckBoxText`(*self*)[¶](#wx.RichMessageDialog.GetCheckBoxText "Permalink to this definition")
Retrieves the label for the checkbox.



Return type
`string`



Returns
The label for the checkbox, will be the empty string if no checkbox is used.






            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.RichMessageDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def GetDetailedText(self) -> str:
        """ 

`GetDetailedText`(*self*)[¶](#wx.RichMessageDialog.GetDetailedText "Permalink to this definition")
Retrieves the detailed text.



Return type
`string`



Returns
The detailed text or empty if detailed text is not used.






            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def GetFooterIcon(self) -> int:
        """ 

`GetFooterIcon`(*self*)[¶](#wx.RichMessageDialog.GetFooterIcon "Permalink to this definition")
Retrieves the footer icon.



Return type
*int*



Returns
The footer icon or 0 if footer icon is not used.





New in version 4.1/wxWidgets-3.1.1.




See also


[`SetFooterIcon`](#wx.RichMessageDialog.SetFooterIcon "wx.RichMessageDialog.SetFooterIcon")





            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def GetFooterText(self) -> str:
        """ 

`GetFooterText`(*self*)[¶](#wx.RichMessageDialog.GetFooterText "Permalink to this definition")
Retrieves the footer text.



Return type
`string`



Returns
The footer text or empty if footer text is not used.





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def IsCheckBoxChecked(self) -> bool:
        """ 

`IsCheckBoxChecked`(*self*)[¶](#wx.RichMessageDialog.IsCheckBoxChecked "Permalink to this definition")
Retrieves the state of the checkbox.


If this method is called before showing the dialog, the initial value of the checkbox, as set by [`ShowCheckBox`](#wx.RichMessageDialog.ShowCheckBox "wx.RichMessageDialog.ShowCheckBox") is used. If it is called after calling [`wx.Dialog.ShowModal`](wx.Dialog.html#wx.Dialog.ShowModal "wx.Dialog.ShowModal") , the value set by the user is returned.



Return type
*bool*



Returns
`True` if the checkbox is checked or `False` if not.






            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def SetFooterIcon(self, icon: int) -> None:
        """ 

`SetFooterIcon`(*self*, *icon*)[¶](#wx.RichMessageDialog.SetFooterIcon "Permalink to this definition")
Specify the footer icon set together with the footer text.


Valid values are `ICON_INFORMATION` , `ICON_WARNING` , `ICON_AUTH_NEEDED` and `ICON_ERROR` (notice that `ICON_QUESTION` is not allowed here).



Parameters
**icon** (*int*) – 





New in version 4.1/wxWidgets-3.1.1.




See also


[`GetFooterIcon`](#wx.RichMessageDialog.GetFooterIcon "wx.RichMessageDialog.GetFooterIcon") , [`SetFooterText`](#wx.RichMessageDialog.SetFooterText "wx.RichMessageDialog.SetFooterText")





            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def SetFooterText(self, footerText: str) -> None:
        """ 

`SetFooterText`(*self*, *footerText*)[¶](#wx.RichMessageDialog.SetFooterText "Permalink to this definition")
Shows or hides a footer text that is used at the bottom of the dialog together with an optional icon.



Parameters
**footerText** (*string*) – The footer text if empty no footer text will be used.





New in version 4.1/wxWidgets-3.1.1.




See also


[`SetFooterIcon`](#wx.RichMessageDialog.SetFooterIcon "wx.RichMessageDialog.SetFooterIcon") , [`GetFooterText`](#wx.RichMessageDialog.GetFooterText "wx.RichMessageDialog.GetFooterText")





            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def ShowCheckBox(self, checkBoxText, checked=False) -> None:
        """ 

`ShowCheckBox`(*self*, *checkBoxText*, *checked=False*)[¶](#wx.RichMessageDialog.ShowCheckBox "Permalink to this definition")
Shows a checkbox with a given label or hides it.



Parameters
* **checkBoxText** (*string*) – If the parameter is non-empty a checkbox will be shown with that label, otherwise it will be hidden.
* **checked** (*bool*) – The initial state of the checkbox.






            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def ShowDetailedText(self, detailedText: str) -> None:
        """ 

`ShowDetailedText`(*self*, *detailedText*)[¶](#wx.RichMessageDialog.ShowDetailedText "Permalink to this definition")
Shows or hides a detailed text and an expander that is used to show or hide the detailed text.



Parameters
**detailedText** (*string*) – The detailed text that can be expanded when the dialog is shown, if empty no detailed text will be used.






            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.RichMessageDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning one of `wx.ID_OK`, `wx.ID_CANCEL`, `wx.ID_YES`, `wx.ID_NO`.


[`IsCheckBoxChecked`](#wx.RichMessageDialog.IsCheckBoxChecked "wx.RichMessageDialog.IsCheckBoxChecked") can be called afterwards to retrieve the value of the check box if one was used.



Return type
*int*






            Source: https://docs.wxpython.org/wx.RichMessageDialog.html
        """

    CheckBoxText: str  # `CheckBoxText`[¶](#wx.RichMessageDialog.CheckBoxText "Permalink to this definition")See [`GetCheckBoxText`](#wx.RichMessageDialog.GetCheckBoxText "wx.RichMessageDialog.GetCheckBoxText")
    DetailedText: str  # `DetailedText`[¶](#wx.RichMessageDialog.DetailedText "Permalink to this definition")See [`GetDetailedText`](#wx.RichMessageDialog.GetDetailedText "wx.RichMessageDialog.GetDetailedText")
    FooterIcon: int  # `FooterIcon`[¶](#wx.RichMessageDialog.FooterIcon "Permalink to this definition")See [`GetFooterIcon`](#wx.RichMessageDialog.GetFooterIcon "wx.RichMessageDialog.GetFooterIcon") and [`SetFooterIcon`](#wx.RichMessageDialog.SetFooterIcon "wx.RichMessageDialog.SetFooterIcon")
    FooterText: str  # `FooterText`[¶](#wx.RichMessageDialog.FooterText "Permalink to this definition")See [`GetFooterText`](#wx.RichMessageDialog.GetFooterText "wx.RichMessageDialog.GetFooterText") and [`SetFooterText`](#wx.RichMessageDialog.SetFooterText "wx.RichMessageDialog.SetFooterText")



class RotateGestureEvent(GestureEvent):
    """ **Possible constructors**:



```
RotateGestureEvent(windid=0)

```


This event is generated when two fingers move in opposite directions
on the surface.


  


        Source: https://docs.wxpython.org/wx.RotateGestureEvent.html
    """
    def __init__(self, windid: int=0) -> None:
        """ 

`__init__`(*self*, *windid=0*)[¶](#wx.RotateGestureEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**windid** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.RotateGestureEvent.html
        """

    def GetRotationAngle(self) -> float:
        """ 

`GetRotationAngle`(*self*)[¶](#wx.RotateGestureEvent.GetRotationAngle "Permalink to this definition")
Returns the total angle of rotation in radians in clockwise direction since the gesture was first started i.e.


when [`IsGestureStart`](wx.GestureEvent.html#wx.GestureEvent.IsGestureStart "wx.GestureEvent.IsGestureStart") returned `True`. This value is always greater than or equal to zero.



Return type
*float*






            Source: https://docs.wxpython.org/wx.RotateGestureEvent.html
        """

    def SetRotationAngle(self, rotationAngle: float) -> None:
        """ 

`SetRotationAngle`(*self*, *rotationAngle*)[¶](#wx.RotateGestureEvent.SetRotationAngle "Permalink to this definition")
Sets the total angle of rotation in radians in clockwise direction since the gesture was first started i.e.


when [`IsGestureStart`](wx.GestureEvent.html#wx.GestureEvent.IsGestureStart "wx.GestureEvent.IsGestureStart") returned `True`. This value is always greater than or equal to zero.



Parameters
**rotationAngle** (*float*) – 






            Source: https://docs.wxpython.org/wx.RotateGestureEvent.html
        """

    RotationAngle: float  # `RotationAngle`[¶](#wx.RotateGestureEvent.RotationAngle "Permalink to this definition")See [`GetRotationAngle`](#wx.RotateGestureEvent.GetRotationAngle "wx.RotateGestureEvent.GetRotationAngle") and [`SetRotationAngle`](#wx.RotateGestureEvent.SetRotationAngle "wx.RotateGestureEvent.SetRotationAngle")



EVT_GESTURE_ROTATE: int  # Process a  wxEVT_GESTURE_ROTATE . ^^

class ScreenDC(DC):
    """ **Possible constructors**:



```
ScreenDC()

```


A ScreenDC can be used to paint on the screen.


  


        Source: https://docs.wxpython.org/wx.ScreenDC.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.ScreenDC.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.ScreenDC.html
        """

    @staticmethod
    def EndDrawingOnTop() -> bool:
        """ 

*static* `EndDrawingOnTop`()[¶](#wx.ScreenDC.EndDrawingOnTop "Permalink to this definition")
Use this in conjunction with [`StartDrawingOnTop`](#wx.ScreenDC.StartDrawingOnTop "wx.ScreenDC.StartDrawingOnTop") .


This function destroys the temporary window created to implement on-top drawing (X only).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ScreenDC.html
        """

    @staticmethod
    def StartDrawingOnTop(*args, **kw) -> bool:
        """ 

*static* `StartDrawingOnTop`(*\*args*, *\*\*kw*)[¶](#wx.ScreenDC.StartDrawingOnTop "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**StartDrawingOnTop** *(window)*


Use this in conjunction with [`EndDrawingOnTop`](#wx.ScreenDC.EndDrawingOnTop "wx.ScreenDC.EndDrawingOnTop") to ensure that drawing to the screen occurs on top of existing windows.


Without this, some window systems (such as X) only allow drawing to take place underneath other windows.


This version of [`StartDrawingOnTop`](#wx.ScreenDC.StartDrawingOnTop "wx.ScreenDC.StartDrawingOnTop") is used to specify that the area that will be drawn on coincides with the given window. It is recommended that an area of the screen is specified with [`StartDrawingOnTop`](#wx.ScreenDC.StartDrawingOnTop "wx.ScreenDC.StartDrawingOnTop") because with large regions, flickering effects are noticeable when destroying the temporary transparent window used to implement this feature.


You might use this function when implementing a drag feature, for example as in the  [wx.SplitterWindow](wx.SplitterWindow.html#wx-splitterwindow) implementation.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*





Note


This function is probably obsolete since the X implementations allow drawing directly on the screen now. However, the fact that this function allows the screen to be refreshed afterwards, may be useful to some applications.





---

  



**StartDrawingOnTop** *(rect=None)*


Use this in conjunction with [`EndDrawingOnTop`](#wx.ScreenDC.EndDrawingOnTop "wx.ScreenDC.EndDrawingOnTop") to ensure that drawing to the screen occurs on top of existing windows.


Without this, some window systems (such as X) only allow drawing to take place underneath other windows.


This version of [`StartDrawingOnTop`](#wx.ScreenDC.StartDrawingOnTop "wx.ScreenDC.StartDrawingOnTop") is used to specify an area of the screen which is to be drawn on. If `None` is passed, the whole screen is available. It is recommended that an area of the screen is specified with this function rather than with [`StartDrawingOnTop`](#wx.ScreenDC.StartDrawingOnTop "wx.ScreenDC.StartDrawingOnTop") , because with large regions, flickering effects are noticeable when destroying the temporary transparent window used to implement this feature.


You might use this function when implementing a drag feature, for example as in the  [wx.SplitterWindow](wx.SplitterWindow.html#wx-splitterwindow) implementation.



Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 



Return type
*bool*





Note


This function is probably obsolete since the X implementations allow drawing directly on the screen now. However, the fact that this function allows the screen to be refreshed afterwards, may be useful to some applications.





---

  





            Source: https://docs.wxpython.org/wx.ScreenDC.html
        """



class ScrollBar(Control):
    """ **Possible constructors**:



```
ScrollBar()

ScrollBar(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
          style=SB_HORIZONTAL, validator=DefaultValidator, name=ScrollBarNameStr)

```


A ScrollBar is a control that represents a horizontal or vertical
scrollbar.


  


        Source: https://docs.wxpython.org/wx.ScrollBar.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ScrollBar.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=SB\_HORIZONTAL, validator=DefaultValidator, name=ScrollBarNameStr)*


Constructor, creating and showing a scrollbar.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must be not `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then a default size is chosen.
* **style** (*long*) – Window style. See  [wx.ScrollBar](#wx-scrollbar).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.ScrollBar.Create "wx.ScrollBar.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=SB_HORIZONTAL, validator=DefaultValidator, name=ScrollBarNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=SB\_HORIZONTAL*, *validator=DefaultValidator*, *name=ScrollBarNameStr*)[¶](#wx.ScrollBar.Create "Permalink to this definition")
Scrollbar creation function called by the scrollbar constructor.


See  [wx.ScrollBar](#wx-scrollbar) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ScrollBar.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    def GetPageSize(self) -> int:
        """ 

`GetPageSize`(*self*)[¶](#wx.ScrollBar.GetPageSize "Permalink to this definition")
Returns the page size of the scrollbar.


This is the number of scroll units that will be scrolled when the user pages up or down. Often it is the same as the thumb size.



Return type
*int*





See also


[`SetScrollbar`](#wx.ScrollBar.SetScrollbar "wx.ScrollBar.SetScrollbar")





            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    def GetRange(self) -> int:
        """ 

`GetRange`(*self*)[¶](#wx.ScrollBar.GetRange "Permalink to this definition")
Returns the length of the scrollbar.



Return type
*int*





See also


[`SetScrollbar`](#wx.ScrollBar.SetScrollbar "wx.ScrollBar.SetScrollbar")





            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    def GetThumbPosition(self) -> int:
        """ 

`GetThumbPosition`(*self*)[¶](#wx.ScrollBar.GetThumbPosition "Permalink to this definition")
Returns the current position of the scrollbar thumb.



Return type
*int*





See also


[`SetThumbPosition`](#wx.ScrollBar.SetThumbPosition "wx.ScrollBar.SetThumbPosition")





            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    def GetThumbSize(self) -> int:
        """ 

`GetThumbSize`(*self*)[¶](#wx.ScrollBar.GetThumbSize "Permalink to this definition")
Returns the thumb or ‘view’ size.



Return type
*int*





See also


[`SetScrollbar`](#wx.ScrollBar.SetScrollbar "wx.ScrollBar.SetScrollbar")





            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    def IsVertical(self) -> bool:
        """ 

`IsVertical`(*self*)[¶](#wx.ScrollBar.IsVertical "Permalink to this definition")
Returns `True` for scrollbars that have the vertical style set.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    def SetScrollbar(self, position, thumbSize, range, pageSize, refresh=True) -> None:
        """ 

`SetScrollbar`(*self*, *position*, *thumbSize*, *range*, *pageSize*, *refresh=True*)[¶](#wx.ScrollBar.SetScrollbar "Permalink to this definition")
Sets the scrollbar properties.



Parameters
* **position** (*int*) – The position of the scrollbar in scroll units.
* **thumbSize** (*int*) – The size of the thumb, or visible portion of the scrollbar, in scroll units.
* **range** (*int*) – The maximum position of the scrollbar.
* **pageSize** (*int*) – The size of the page size in scroll units. This is the number of units the scrollbar will scroll when it is paged up or down. Often it is the same as the thumb size.
* **refresh** (*bool*) – `True` to redraw the scrollbar, `False` otherwise.





Note


Let’s say you wish to display 50 lines of text, using the same font. The window is sized so that you can only see 16 lines at a time. You would use:



```
scrollbar.SetScrollbar(0, 16, 50, 15)

```


The page size is 1 less than the thumb size so that the last line of the previous page will be visible on the next page, to help orient the user. Note that with the window at this size, the thumb position can never go above 50 minus 16, or 34. You can determine how many lines are currently visible by dividing the current view size by the character height in pixels. When defining your own scrollbar behaviour, you will always need to recalculate the scrollbar settings when the window size changes. You could therefore put your scrollbar calculations and [`SetScrollbar`](#wx.ScrollBar.SetScrollbar "wx.ScrollBar.SetScrollbar") call into a function named AdjustScrollbars, which can be called initially and also from a  [wx.SizeEvent](wx.SizeEvent.html#wx-sizeevent) event handler function.





            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    def SetThumbPosition(self, viewStart: int) -> None:
        """ 

`SetThumbPosition`(*self*, *viewStart*)[¶](#wx.ScrollBar.SetThumbPosition "Permalink to this definition")
Sets the position of the scrollbar.



Parameters
**viewStart** (*int*) – The position of the scrollbar thumb.





See also


[`GetThumbPosition`](#wx.ScrollBar.GetThumbPosition "wx.ScrollBar.GetThumbPosition")





            Source: https://docs.wxpython.org/wx.ScrollBar.html
        """

    PageSize: int  # `PageSize`[¶](#wx.ScrollBar.PageSize "Permalink to this definition")See [`GetPageSize`](#wx.ScrollBar.GetPageSize "wx.ScrollBar.GetPageSize")
    Range: int  # `Range`[¶](#wx.ScrollBar.Range "Permalink to this definition")See [`GetRange`](#wx.ScrollBar.GetRange "wx.ScrollBar.GetRange")
    ThumbPosition: int  # `ThumbPosition`[¶](#wx.ScrollBar.ThumbPosition "Permalink to this definition")See [`GetThumbPosition`](#wx.ScrollBar.GetThumbPosition "wx.ScrollBar.GetThumbPosition") and [`SetThumbPosition`](#wx.ScrollBar.SetThumbPosition "wx.ScrollBar.SetThumbPosition")
    ThumbSize: int  # `ThumbSize`[¶](#wx.ScrollBar.ThumbSize "Permalink to this definition")See [`GetThumbSize`](#wx.ScrollBar.GetThumbSize "wx.ScrollBar.GetThumbSize")



SB_HORIZONTAL: int  # Specifies a horizontal scrollbar.

SB_VERTICAL: int  # Specifies a vertical scrollbar. ^^

EVT_SCROLL: int  # Process all scroll events.

EVT_SCROLL_TOP: int  # Process  wxEVT_SCROLL_TOP   scroll to top or leftmost (minimum) position events.

EVT_SCROLL_BOTTOM: int  # Process  wxEVT_SCROLL_BOTTOM   scroll to bottom or rightmost (maximum) position events.

EVT_SCROLL_LINEUP: int  # Process  wxEVT_SCROLL_LINEUP   line up or left events.

EVT_SCROLL_LINEDOWN: int  # Process  wxEVT_SCROLL_LINEDOWN   line down or right events.

EVT_SCROLL_PAGEUP: int  # Process  wxEVT_SCROLL_PAGEUP   page up or left events.

EVT_SCROLL_PAGEDOWN: int  # Process  wxEVT_SCROLL_PAGEDOWN   page down or right events.

EVT_SCROLL_THUMBTRACK: int  # Process  wxEVT_SCROLL_THUMBTRACK   thumbtrack events (frequent events sent as the user drags the thumbtrack).

EVT_SCROLL_THUMBRELEASE: int  # Process  wxEVT_SCROLL_THUMBRELEASE   thumb release events.

EVT_SCROLL_CHANGED: int  # Process  wxEVT_SCROLL_CHANGED   end of scrolling events (MSW only).

EVT_COMMAND_SCROLL: int  # Process all scroll events.

EVT_COMMAND_SCROLL_TOP: int  # Process  wxEVT_SCROLL_TOP   scroll to top or leftmost (minimum) position events.

EVT_COMMAND_SCROLL_BOTTOM: int  # Process  wxEVT_SCROLL_BOTTOM   scroll to bottom or rightmost (maximum) position events.

EVT_COMMAND_SCROLL_LINEUP: int  # Process  wxEVT_SCROLL_LINEUP   line up or left events.

EVT_COMMAND_SCROLL_LINEDOWN: int  # Process  wxEVT_SCROLL_LINEDOWN   line down or right events.

EVT_COMMAND_SCROLL_PAGEUP: int  # Process  wxEVT_SCROLL_PAGEUP   page up or left events.

EVT_COMMAND_SCROLL_PAGEDOWN: int  # Process  wxEVT_SCROLL_PAGEDOWN   page down or right events.

EVT_COMMAND_SCROLL_THUMBTRACK: int  # Process  wxEVT_SCROLL_THUMBTRACK   thumbtrack events (frequent events sent as the user drags the thumbtrack).

EVT_COMMAND_SCROLL_THUMBRELEASE: int  # Process  wxEVT_SCROLL_THUMBRELEASE   thumb release events.

EVT_COMMAND_SCROLL_CHANGED: int  # Process  wxEVT_SCROLL_CHANGED   end of scrolling events (MSW only). ^^

class Scrolled(Window):
    """ **Possible constructors**:



```
Scrolled()

Scrolled(parent, id=-1, pos=DefaultPosition, size=DefaultSize,
         style=HSCROLL|VSCROLL, name="scrolledWindow")

```


The Scrolled class manages scrolling for its client area,
transforming the coordinates according to the scrollbar positions, and
setting the scroll positions, thumb sizes and ranges according to the
area in view.


  


        Source: https://docs.wxpython.org/wx.Scrolled.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Scrolled.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=HSCROLL|VSCROLL, name=”scrolledWindow”)*


Constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **id** (*wx.WindowID*) – Window identifier. The value `ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If a position of `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If a size of `wx.DefaultSize` is specified then the window is sized appropriately.
* **style** (*long*) – Window style. See  [wx.Scrolled](#wx-scrolled).
* **name** (*string*) – Window name.





Note


The window is initially created without visible scrollbars. Call [`SetScrollbars`](#wx.Scrolled.SetScrollbars "wx.Scrolled.SetScrollbars") to specify how big the virtual window size should be.





---

  





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def AdjustScrollbars(self) -> None:
        """ 

`AdjustScrollbars`(*self*)[¶](#wx.Scrolled.AdjustScrollbars "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def CalcScrolledPosition(self, *args, **kw) -> 'Point':
        """ 

`CalcScrolledPosition`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Scrolled.CalcScrolledPosition "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CalcScrolledPosition** *(self, x, y)*


Translates the logical coordinates to the device ones.


For example, if a window is scrolled 10 pixels to the bottom, the device coordinates of the origin are (0, 0) (as always), but the logical coordinates are (0, 10) and so the call to CalcScrolledPosition(0, 10, xx, yy) will return 0 in yy.




---

  



**CalcScrolledPosition** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def CalcUnscrolledPosition(self, *args, **kw) -> 'Point':
        """ 

`CalcUnscrolledPosition`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Scrolled.CalcUnscrolledPosition "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CalcUnscrolledPosition** *(self, x, y)*


Translates the device coordinates to the logical ones.


For example, if a window is scrolled 10 pixels to the bottom, the device coordinates of the origin are (0, 0) (as always), but the logical coordinates are (0, 10) and so the call to CalcUnscrolledPosition(0, 0, xx, yy) will return 10 in yy.




---

  



**CalcUnscrolledPosition** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Point](wx.Point.html#wx-point)






---

  





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def Create(self, parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=HSCROLL|VSCROLL, name="scrolledWindow") -> bool:
        """ 

`Create`(*self*, *parent*, *id=-1*, *pos=DefaultPosition*, *size=DefaultSize*, *style=HSCROLL|VSCROLL*, *name="scrolledWindow"*)[¶](#wx.Scrolled.Create "Permalink to this definition")
Creates the window for two-step construction.


Derived classes should call or replace this function. If it is not replaced, bear in mind that it calls *T.Create()* through the global function `CreateScrolled` so if *T.Create()* has a different signature than [`wx.Scrolled.Create`](#wx.Scrolled.Create "wx.Scrolled.Create") you should implement overloaded `CreateScrolled` which would call *T.Create()* in the correct manner.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*





See also


`Scrolled.__init__` and `CreateScrolled` for details.





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def DisableKeyboardScrolling(self) -> None:
        """ 

`DisableKeyboardScrolling`(*self*)[¶](#wx.Scrolled.DisableKeyboardScrolling "Permalink to this definition")
Disable use of keyboard keys for scrolling.


By default cursor movement keys (including Home, End, Page Up and Down) are used to scroll the window appropriately. If the derived class uses these keys for something else, e.g. changing the currently selected item, this function can be used to disable this behaviour as it’s not only not necessary then but can actually be actively harmful if another object forwards a keyboard event corresponding to one of the above keys to us using ProcessWindowEvent() because the event will always be processed which can be undesirable.



New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def DoPrepareDC(self, dc: 'DC') -> None:
        """ 

`DoPrepareDC`(*self*, *dc*)[¶](#wx.Scrolled.DoPrepareDC "Permalink to this definition")
Call this function to prepare the device context for drawing a scrolled image.


It sets the device origin according to the current scroll position. [`DoPrepareDC`](#wx.Scrolled.DoPrepareDC "wx.Scrolled.DoPrepareDC") is called automatically within the default `wxEVT_PAINT` event handler, so your [`OnDraw`](#wx.Scrolled.OnDraw "wx.Scrolled.OnDraw") override will be passed an already ‘pre-scrolled’ device context. However, if you wish to draw from outside of [`OnDraw`](#wx.Scrolled.OnDraw "wx.Scrolled.OnDraw") (e.g. from your own `wxEVT_PAINT` handler), you must call this function yourself.


For example:



```
def OnEvent(self, event):

    dc = wx.ClientDC(self)
    self.DoPrepareDC(dc)

    dc.SetPen(wx.BLACK_PEN)

    x, y = event.GetPosition()

    if (xpos > -1 and ypos > -1 and event.Dragging()):
        dc.DrawLine(xpos, ypos, x, y)

    xpos = x
    ypos = y

```


Notice that the function sets the origin by moving it relatively to the current origin position, so you shouldn’t change the origin before calling [`DoPrepareDC`](#wx.Scrolled.DoPrepareDC "wx.Scrolled.DoPrepareDC") or, if you do, reset it to (0, 0) later. If you call [`DoPrepareDC`](#wx.Scrolled.DoPrepareDC "wx.Scrolled.DoPrepareDC") immediately after device context creation, as in the example above, this problem doesn’t arise, of course, so it is customary to do it like this.



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def EnableScrolling(self, xScrolling, yScrolling) -> None:
        """ 

`EnableScrolling`(*self*, *xScrolling*, *yScrolling*)[¶](#wx.Scrolled.EnableScrolling "Permalink to this definition")
Enable or disable use of [`wx.Window.ScrollWindow`](wx.Window.html#wx.Window.ScrollWindow "wx.Window.ScrollWindow") for scrolling.


By default, when a scrolled window is logically scrolled, [`wx.Window.ScrollWindow`](wx.Window.html#wx.Window.ScrollWindow "wx.Window.ScrollWindow") is called on the underlying window which scrolls the window contents and only invalidates the part of the window newly brought into view. If `False` is passed as an argument, then this “physical scrolling” is disabled and the window is entirely invalidated whenever it is scrolled by calling [`wx.Window.Refresh`](wx.Window.html#wx.Window.Refresh "wx.Window.Refresh") .


It should be rarely necessary to disable physical scrolling, so this method shouldn’t be called in normal circumstances.



Parameters
* **xScrolling** (*bool*) – If `True`, enables physical scrolling in the x direction.
* **yScrolling** (*bool*) – If `True`, enables physical scrolling in the y direction.






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Scrolled.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetScaleX(self) -> float:
        """ 

`GetScaleX`(*self*)[¶](#wx.Scrolled.GetScaleX "Permalink to this definition")

Return type
*float*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetScaleY(self) -> float:
        """ 

`GetScaleY`(*self*)[¶](#wx.Scrolled.GetScaleY "Permalink to this definition")

Return type
*float*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetScrollLines(self, orient: int) -> int:
        """ 

`GetScrollLines`(*self*, *orient*)[¶](#wx.Scrolled.GetScrollLines "Permalink to this definition")

Parameters
**orient** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetScrollPageSize(self, orient: int) -> int:
        """ 

`GetScrollPageSize`(*self*, *orient*)[¶](#wx.Scrolled.GetScrollPageSize "Permalink to this definition")

Parameters
**orient** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetScrollPixelsPerUnit(self) -> tuple:
        """ 

`GetScrollPixelsPerUnit`(*self*)[¶](#wx.Scrolled.GetScrollPixelsPerUnit "Permalink to this definition")
Get the number of pixels per scroll unit (line), in each direction, as set by [`SetScrollbars`](#wx.Scrolled.SetScrollbars "wx.Scrolled.SetScrollbars") .


A value of zero indicates no scrolling in that direction.



Return type
*tuple*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetSizeAvailableForScrollTarget(self, size: Union[tuple[int, int], 'Size']) -> 'Size':
        """ 

`GetSizeAvailableForScrollTarget`(*self*, *size*)[¶](#wx.Scrolled.GetSizeAvailableForScrollTarget "Permalink to this definition")
Function which must be overridden to implement the size available for the scroll target for the given size of the main window.


This method must be overridden if [`SetTargetWindow`](#wx.Scrolled.SetTargetWindow "wx.Scrolled.SetTargetWindow") is used (it is never called otherwise). The implementation should decrease the *size* to account for the size of the non-scrollable parts of the main window and return only the size available for the scrollable window itself. E.g. in the example given in [`SetTargetWindow`](#wx.Scrolled.SetTargetWindow "wx.Scrolled.SetTargetWindow") documentation the function would subtract the height of the header window from the vertical component of *size*.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetTargetRect(self) -> 'Rect':
        """ 

`GetTargetRect`(*self*)[¶](#wx.Scrolled.GetTargetRect "Permalink to this definition")

Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetTargetWindow(self) -> 'Window':
        """ 

`GetTargetWindow`(*self*)[¶](#wx.Scrolled.GetTargetWindow "Permalink to this definition")

Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def GetViewStart(self) -> tuple:
        """ 

`GetViewStart`(*self*)[¶](#wx.Scrolled.GetViewStart "Permalink to this definition")
Get the position at which the visible portion of the window starts.



Return type
*tuple*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def IsAutoScrolling(self) -> bool:
        """ 

`IsAutoScrolling`(*self*)[¶](#wx.Scrolled.IsAutoScrolling "Permalink to this definition")
Are we generating the autoscroll events?



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def IsRetained(self) -> bool:
        """ 

`IsRetained`(*self*)[¶](#wx.Scrolled.IsRetained "Permalink to this definition")
Motif only: `True` if the window has a backing bitmap.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def OnDraw(self, dc: 'DC') -> None:
        """ 

`OnDraw`(*self*, *dc*)[¶](#wx.Scrolled.OnDraw "Permalink to this definition")
Called by the default paint event handler to allow the application to define painting behaviour without having to worry about calling [`DoPrepareDC`](#wx.Scrolled.DoPrepareDC "wx.Scrolled.DoPrepareDC") .


Instead of overriding this function you may also just process the paint event in the derived class as usual, but then you will have to call [`DoPrepareDC`](#wx.Scrolled.DoPrepareDC "wx.Scrolled.DoPrepareDC") yourself.



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def PrepareDC(self, dc: 'DC') -> None:
        """ 

`PrepareDC`(*self*, *dc*)[¶](#wx.Scrolled.PrepareDC "Permalink to this definition")
This function is for backwards compatibility only and simply calls [`DoPrepareDC`](#wx.Scrolled.DoPrepareDC "wx.Scrolled.DoPrepareDC") now.


Notice that it is not called by the default paint event handle ( [`DoPrepareDC`](#wx.Scrolled.DoPrepareDC "wx.Scrolled.DoPrepareDC") is), so overriding this method in your derived class is useless.



Parameters
**dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – 






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def Scroll(self, *args, **kw) -> None:
        """ 

`Scroll`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Scrolled.Scroll "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Scroll** *(self, x, y)*


Scrolls a window so the view start is at the given point.



Parameters
* **x** (*int*) – The x position to scroll to, in scroll units.
* **y** (*int*) – The y position to scroll to, in scroll units.





Note


The positions are in scroll units, not pixels, so to convert to pixels you will have to multiply by the number of pixels per scroll increment. If either parameter is `wx.DefaultCoord` (-1), that position will be ignored (no change in that direction).




See also


[`SetScrollbars`](#wx.Scrolled.SetScrollbars "wx.Scrolled.SetScrollbars") , [`GetScrollPixelsPerUnit`](#wx.Scrolled.GetScrollPixelsPerUnit "wx.Scrolled.GetScrollPixelsPerUnit")





---

  



**Scroll** *(self, pt)*


This is an overload of [`Scroll`](#wx.Scrolled.Scroll "wx.Scrolled.Scroll") ; see that function for more info.



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def SendAutoScrollEvents(self, event: 'ScrollWinEvent') -> bool:
        """ 

`SendAutoScrollEvents`(*self*, *event*)[¶](#wx.Scrolled.SendAutoScrollEvents "Permalink to this definition")
This method can be overridden in a derived class to forbid sending the auto scroll events - note that unlike [`StopAutoScrolling`](#wx.Scrolled.StopAutoScrolling "wx.Scrolled.StopAutoScrolling") it doesn’t stop the timer, so it will be called repeatedly and will typically return different values depending on the current mouse position.


The base class version just returns `True`.



Parameters
**event** ([*wx.ScrollWinEvent*](wx.ScrollWinEvent.html#wx.ScrollWinEvent "wx.ScrollWinEvent")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def SetScale(self, xs, ys) -> None:
        """ 

`SetScale`(*self*, *xs*, *ys*)[¶](#wx.Scrolled.SetScale "Permalink to this definition")

Parameters
* **xs** (*float*) –
* **ys** (*float*) –






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def SetScrollPageSize(self, orient, pageSize) -> None:
        """ 

`SetScrollPageSize`(*self*, *orient*, *pageSize*)[¶](#wx.Scrolled.SetScrollPageSize "Permalink to this definition")

Parameters
* **orient** (*int*) –
* **pageSize** (*int*) –






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def SetScrollRate(self, xstep, ystep) -> None:
        """ 

`SetScrollRate`(*self*, *xstep*, *ystep*)[¶](#wx.Scrolled.SetScrollRate "Permalink to this definition")
Set the horizontal and vertical scrolling increment only.


See the pixelsPerUnit parameter in [`SetScrollbars`](#wx.Scrolled.SetScrollbars "wx.Scrolled.SetScrollbars") .



Parameters
* **xstep** (*int*) –
* **ystep** (*int*) –






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def SetScrollbars(self, pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos=0, yPos=0, noRefresh=False) -> None:
        """ 

`SetScrollbars`(*self*, *pixelsPerUnitX*, *pixelsPerUnitY*, *noUnitsX*, *noUnitsY*, *xPos=0*, *yPos=0*, *noRefresh=False*)[¶](#wx.Scrolled.SetScrollbars "Permalink to this definition")
Sets up vertical and/or horizontal scrollbars.


The first pair of parameters give the number of pixels per ‘scroll step’, i.e. amount moved when the up or down scroll arrows are pressed. The second pair gives the length of scrollbar in scroll steps, which sets the size of the virtual window.


*xPos* and *yPos* optionally specify a position to scroll to immediately.


For example, the following gives a window horizontal and vertical scrollbars with 20 pixels per scroll step, and a size of 50 steps (1000 pixels) in each direction:



```
window.SetScrollbars(20, 20, 50, 50)

```


 [wx.Scrolled](#wx-scrolled) manages the page size itself, using the current client window size as the page size.


Note that for more sophisticated scrolling applications, for example where scroll steps may be variable according to the position in the document, it will be necessary to derive a new class from  [wx.Window](wx.Window.html#wx-window), overriding OnSize() and adjusting the scrollbars appropriately.



Parameters
* **pixelsPerUnitX** (*int*) – Pixels per scroll unit in the horizontal direction.
* **pixelsPerUnitY** (*int*) – Pixels per scroll unit in the vertical direction.
* **noUnitsX** (*int*) – Number of units in the horizontal direction.
* **noUnitsY** (*int*) – Number of units in the vertical direction.
* **xPos** (*int*) – Position to initialize the scrollbars in the horizontal direction, in scroll units.
* **yPos** (*int*) – Position to initialize the scrollbars in the vertical direction, in scroll units.
* **noRefresh** (*bool*) – Will not refresh window if `True`.





See also


[`wx.Window.SetVirtualSize`](wx.Window.html#wx.Window.SetVirtualSize "wx.Window.SetVirtualSize")





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def SetTargetRect(self, rect: 'Rect') -> None:
        """ 

`SetTargetRect`(*self*, *rect*)[¶](#wx.Scrolled.SetTargetRect "Permalink to this definition")

Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def SetTargetWindow(self, window: 'Window') -> None:
        """ 

`SetTargetWindow`(*self*, *window*)[¶](#wx.Scrolled.SetTargetWindow "Permalink to this definition")
Call this function to tell  [wx.Scrolled](#wx-scrolled) to perform the actual scrolling on a different window (and not on itself).


This method is useful when only a part of the window should be scrolled. A typical example is a control consisting of a fixed header and the scrollable contents window: the scrollbars are attached to the main window itself, hence it, and not the contents window must be derived from  [wx.Scrolled](#wx-scrolled), but only the contents window scrolls when the scrollbars are used. To implement such setup, you need to call this method with the contents window as argument.


Notice that if this method is used, [`GetSizeAvailableForScrollTarget`](#wx.Scrolled.GetSizeAvailableForScrollTarget "wx.Scrolled.GetSizeAvailableForScrollTarget") method must be overridden.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def ShouldScrollToChildOnFocus(self, child: 'Window') -> bool:
        """ 

`ShouldScrollToChildOnFocus`(*self*, *child*)[¶](#wx.Scrolled.ShouldScrollToChildOnFocus "Permalink to this definition")
This method can be overridden in a derived class to prevent scrolling the child window into view automatically when it gets focus.


The default behaviour is to scroll this window to show its currently focused child automatically, to ensure that the user can interact with it. This is usually helpful, but can be undesirable for some windows, in which case this method can be overridden to return `False` for them to prevent any scrolling from taking place when such windows get focus.



Parameters
**child** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def ShowScrollbars(self, horz, vert) -> None:
        """ 

`ShowScrollbars`(*self*, *horz*, *vert*)[¶](#wx.Scrolled.ShowScrollbars "Permalink to this definition")
Set the scrollbar visibility.


By default the scrollbar in the corresponding direction is only shown if it is needed, i.e. if the virtual size of the scrolled window in this direction is greater than the current physical window size. Using this function the scrollbar visibility can be changed to be:


* `wx.SHOW_SB_ALWAYS`: To always show the scrollbar, even if it is not needed currently (wx``wx.ALWAYS\_SHOW\_SB`` style can be used during the window creation to achieve the same effect but it applies in both directions).
* `wx.SHOW_SB_NEVER`: To never show the scrollbar at all. In this case the program should presumably provide some other way for the user to scroll the window.
* `wx.SHOW_SB_DEFAULT`: To restore the default behaviour described above.


Note that the window must be created before calling this method.



Parameters
* **horz** ([*ScrollbarVisibility*](wx.ScrollbarVisibility.enumeration.html "ScrollbarVisibility")) – The desired visibility for the horizontal scrollbar.
* **vert** ([*ScrollbarVisibility*](wx.ScrollbarVisibility.enumeration.html "ScrollbarVisibility")) – The desired visibility for the vertical scrollbar.





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    def StopAutoScrolling(self) -> None:
        """ 

`StopAutoScrolling`(*self*)[¶](#wx.Scrolled.StopAutoScrolling "Permalink to this definition")
Stop generating the scroll events when mouse is held outside the window.




            Source: https://docs.wxpython.org/wx.Scrolled.html
        """

    ScaleX: float  # `ScaleX`[¶](#wx.Scrolled.ScaleX "Permalink to this definition")See [`GetScaleX`](#wx.Scrolled.GetScaleX "wx.Scrolled.GetScaleX")
    ScaleY: float  # `ScaleY`[¶](#wx.Scrolled.ScaleY "Permalink to this definition")See [`GetScaleY`](#wx.Scrolled.GetScaleY "wx.Scrolled.GetScaleY")
    TargetRect: 'Rect'  # `TargetRect`[¶](#wx.Scrolled.TargetRect "Permalink to this definition")See [`GetTargetRect`](#wx.Scrolled.GetTargetRect "wx.Scrolled.GetTargetRect") and [`SetTargetRect`](#wx.Scrolled.SetTargetRect "wx.Scrolled.SetTargetRect")
    TargetWindow: 'Window'  # `TargetWindow`[¶](#wx.Scrolled.TargetWindow "Permalink to this definition")See [`GetTargetWindow`](#wx.Scrolled.GetTargetWindow "wx.Scrolled.GetTargetWindow") and [`SetTargetWindow`](#wx.Scrolled.SetTargetWindow "wx.Scrolled.SetTargetWindow")



RETAINED: int  # Uses a backing pixmap to speed refreshes. Motif only. ^^

EVT_SCROLLWIN: int  # Process all scroll events.

EVT_SCROLLWIN_TOP: int  # Process  wxEVT_SCROLLWIN_TOP   scroll-to-top events.

EVT_SCROLLWIN_BOTTOM: int  # Process  wxEVT_SCROLLWIN_BOTTOM   scroll-to-bottom events.

EVT_SCROLLWIN_LINEUP: int  # Process  wxEVT_SCROLLWIN_LINEUP   line up events.

EVT_SCROLLWIN_LINEDOWN: int  # Process  wxEVT_SCROLLWIN_LINEDOWN   line down events.

EVT_SCROLLWIN_PAGEUP: int  # Process  wxEVT_SCROLLWIN_PAGEUP   page up events.

EVT_SCROLLWIN_PAGEDOWN: int  # Process  wxEVT_SCROLLWIN_PAGEDOWN   page down events.

EVT_SCROLLWIN_THUMBTRACK: int  # Process  wxEVT_SCROLLWIN_THUMBTRACK   thumbtrack events (frequent events sent as the user drags the thumbtrack).

EVT_SCROLLWIN_THUMBRELEASE: int  # Process  wxEVT_SCROLLWIN_THUMBRELEASE   thumb release events. ^^

SHOW_SB_ALWAYS: int

SHOW_SB_NEVER: int

SHOW_SB_DEFAULT: int

class ScrolledCanvas(Window,Scrolled):
    """ The *ScrolledCanvas* class is a combination of the *Window* and
*Scrolled* classes, and manages scrolling for its client area,
transforming the coordinates according to the scrollbar positions,
and setting the scroll positions, thumb sizes and ranges according to
the area in view.




        Source: https://docs.wxpython.org/wx.ScrolledCanvas.html
    """


class ScrolledWindow(Scrolled):
    """ **Possible constructors**:



```
ScrolledWindow()

ScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
               style=ScrolledWindowStyle, name=PanelNameStr)

```


Scrolled window derived from Panel.


  


        Source: https://docs.wxpython.org/wx.ScrolledWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ScrolledWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=ScrolledWindowStyle, name=PanelNameStr)*



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** (`Point`) –
* **size** (`Size`) –
* **style** (*long*) –
* **name** (`String`) –






---

  





            Source: https://docs.wxpython.org/wx.ScrolledWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ScrolledWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ScrolledWindow.html
        """

    def SetFocusIgnoringChildren(self) -> None:
        """ 

`SetFocusIgnoringChildren`(*self*)[¶](#wx.ScrolledWindow.SetFocusIgnoringChildren "Permalink to this definition")
In contrast to SetFocus() this will set the focus to the panel even if
there are child windows in the panel. This is only rarely needed.




            Source: https://docs.wxpython.org/wx.ScrolledWindow.html
        """



class ScrollEvent(CommandEvent):
    """ **Possible constructors**:



```
ScrollEvent(commandType=wxEVT_NULL, id=0, pos=0, orientation=0)

```


A scroll event holds information about events sent from stand-alone
scrollbars (see ScrollBar) and sliders (see Slider).


  


        Source: https://docs.wxpython.org/wx.ScrollEvent.html
    """
    def __init__(self, commandType=wxEVT_NULL, id=0, pos=0, orientation=0) -> None:
        """ 

`__init__`(*self*, *commandType=wxEVT\_NULL*, *id=0*, *pos=0*, *orientation=0*)[¶](#wx.ScrollEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **commandType** (*wx.EventType*) –
* **id** (*int*) –
* **pos** (*int*) –
* **orientation** (*int*) –






            Source: https://docs.wxpython.org/wx.ScrollEvent.html
        """

    def GetOrientation(self) -> int:
        """ 

`GetOrientation`(*self*)[¶](#wx.ScrollEvent.GetOrientation "Permalink to this definition")
Returns `wx.HORIZONTAL` or `wx.VERTICAL`, depending on the orientation of the scrollbar.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ScrollEvent.html
        """

    def GetPosition(self) -> int:
        """ 

`GetPosition`(*self*)[¶](#wx.ScrollEvent.GetPosition "Permalink to this definition")
Returns the position of the scrollbar.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ScrollEvent.html
        """

    def SetOrientation(self, orient: int) -> None:
        """ 

`SetOrientation`(*self*, *orient*)[¶](#wx.ScrollEvent.SetOrientation "Permalink to this definition")

Parameters
**orient** (*int*) – 






            Source: https://docs.wxpython.org/wx.ScrollEvent.html
        """

    def SetPosition(self, pos: int) -> None:
        """ 

`SetPosition`(*self*, *pos*)[¶](#wx.ScrollEvent.SetPosition "Permalink to this definition")

Parameters
**pos** (*int*) – 






            Source: https://docs.wxpython.org/wx.ScrollEvent.html
        """

    Orientation: int  # `Orientation`[¶](#wx.ScrollEvent.Orientation "Permalink to this definition")See [`GetOrientation`](#wx.ScrollEvent.GetOrientation "wx.ScrollEvent.GetOrientation") and [`SetOrientation`](#wx.ScrollEvent.SetOrientation "wx.ScrollEvent.SetOrientation")
    Position: int  # `Position`[¶](#wx.ScrollEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.ScrollEvent.GetPosition "wx.ScrollEvent.GetPosition") and [`SetPosition`](#wx.ScrollEvent.SetPosition "wx.ScrollEvent.SetPosition")



class Slider(Control):
    """ **Possible constructors**:



```
Slider()

Slider(parent, id=ID_ANY, value=0, minValue=0, maxValue=100,
       pos=DefaultPosition, size=DefaultSize, style=SL_HORIZONTAL,
       validator=DefaultValidator, name=SliderNameStr)

```


A slider is a control with a handle which can be pulled back and forth
to change the value.


  


        Source: https://docs.wxpython.org/wx.Slider.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Slider.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, value=0, minValue=0, maxValue=100, pos=DefaultPosition, size=DefaultSize, style=SL\_HORIZONTAL, validator=DefaultValidator, name=SliderNameStr)*


Constructor, creating and showing a slider.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **value** (*int*) – Initial position for the slider.
* **minValue** (*int*) – Minimum slider position.
* **maxValue** (*int*) – Maximum slider position.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then a default size is chosen, which is typically appropriate in the transverse slider direction, but is just fixed 100 (DPI-independent) pixels in the primary direction (i.e. vertical for `SL_VERTICAL` sliders or horizontal for `SL_HORIZONTAL` ones), so it may be preferable to specify it explicitly. Conversely, when using non-default size, it’s usually best to use `-1` for the transverse size component, meaning that the default should be used, as the appropriate value depends on the platform and theme.
* **style** (*long*) – Window style. See  [wx.Slider](#wx-slider).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.Slider.Create "wx.Slider.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def ClearSel(self) -> None:
        """ 

`ClearSel`(*self*)[¶](#wx.Slider.ClearSel "Permalink to this definition")
Clears the selection, for a slider with the `wx.SL_SELRANGE` style.



Availability


Only available for MSW.





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def ClearTicks(self) -> None:
        """ 

`ClearTicks`(*self*)[¶](#wx.Slider.ClearTicks "Permalink to this definition")
Clears the ticks.



Availability


Only available for MSW, GTK.





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def Create(self, parent, id=ID_ANY, value=0, minValue=0, maxValue=100, point=DefaultPosition, size=DefaultSize, style=SL_HORIZONTAL, validator=DefaultValidator, name=SliderNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *value=0*, *minValue=0*, *maxValue=100*, *point=DefaultPosition*, *size=DefaultSize*, *style=SL\_HORIZONTAL*, *validator=DefaultValidator*, *name=SliderNameStr*)[¶](#wx.Slider.Create "Permalink to this definition")
Used for two-step slider construction.


See  [wx.Slider](#wx-slider) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **value** (*int*) –
* **minValue** (*int*) –
* **maxValue** (*int*) –
* **point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Slider.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Slider.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetLineSize(self) -> int:
        """ 

`GetLineSize`(*self*)[¶](#wx.Slider.GetLineSize "Permalink to this definition")
Returns the line size.



Return type
*int*





See also


[`SetLineSize`](#wx.Slider.SetLineSize "wx.Slider.SetLineSize")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetMax(self) -> int:
        """ 

`GetMax`(*self*)[¶](#wx.Slider.GetMax "Permalink to this definition")
Gets the maximum slider value.



Return type
*int*





See also


[`GetMin`](#wx.Slider.GetMin "wx.Slider.GetMin") , [`SetRange`](#wx.Slider.SetRange "wx.Slider.SetRange")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetMin(self) -> int:
        """ 

`GetMin`(*self*)[¶](#wx.Slider.GetMin "Permalink to this definition")
Gets the minimum slider value.



Return type
*int*





See also


[`GetMin`](#wx.Slider.GetMin "wx.Slider.GetMin") , [`SetRange`](#wx.Slider.SetRange "wx.Slider.SetRange")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetPageSize(self) -> int:
        """ 

`GetPageSize`(*self*)[¶](#wx.Slider.GetPageSize "Permalink to this definition")
Returns the page size.



Return type
*int*





See also


[`SetPageSize`](#wx.Slider.SetPageSize "wx.Slider.SetPageSize")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetRange(self) -> None:
        """ 

`GetRange`(*self*)[¶](#wx.Slider.GetRange "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetSelEnd(self) -> int:
        """ 

`GetSelEnd`(*self*)[¶](#wx.Slider.GetSelEnd "Permalink to this definition")
Returns the selection end point.



Return type
*int*





Availability


Only available for MSW.




See also


[`GetSelStart`](#wx.Slider.GetSelStart "wx.Slider.GetSelStart") , [`SetSelection`](#wx.Slider.SetSelection "wx.Slider.SetSelection")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetSelStart(self) -> int:
        """ 

`GetSelStart`(*self*)[¶](#wx.Slider.GetSelStart "Permalink to this definition")
Returns the selection start point.



Return type
*int*





Availability


Only available for MSW.




See also


[`GetSelEnd`](#wx.Slider.GetSelEnd "wx.Slider.GetSelEnd") , [`SetSelection`](#wx.Slider.SetSelection "wx.Slider.SetSelection")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetThumbLength(self) -> int:
        """ 

`GetThumbLength`(*self*)[¶](#wx.Slider.GetThumbLength "Permalink to this definition")
Returns the thumb length.



Return type
*int*





Availability


Only available for MSW.




See also


[`SetThumbLength`](#wx.Slider.SetThumbLength "wx.Slider.SetThumbLength")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetTickFreq(self) -> int:
        """ 

`GetTickFreq`(*self*)[¶](#wx.Slider.GetTickFreq "Permalink to this definition")
Returns the tick frequency.



Return type
*int*





Availability


Only available for MSW, GTK.




See also


[`SetTickFreq`](#wx.Slider.SetTickFreq "wx.Slider.SetTickFreq")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.Slider.GetValue "Permalink to this definition")
Gets the current slider value.



Return type
*int*





See also


[`GetMin`](#wx.Slider.GetMin "wx.Slider.GetMin") , [`GetMax`](#wx.Slider.GetMax "wx.Slider.GetMax") , [`SetValue`](#wx.Slider.SetValue "wx.Slider.SetValue")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetLineSize(self, lineSize: int) -> None:
        """ 

`SetLineSize`(*self*, *lineSize*)[¶](#wx.Slider.SetLineSize "Permalink to this definition")
Sets the line size for the slider.



Parameters
**lineSize** (*int*) – The number of steps the slider moves when the user moves it up or down a line.





See also


[`GetLineSize`](#wx.Slider.GetLineSize "wx.Slider.GetLineSize")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetMax(self, maxValue: int) -> None:
        """ 

`SetMax`(*self*, *maxValue*)[¶](#wx.Slider.SetMax "Permalink to this definition")
Sets the maximum slider value.



Parameters
**maxValue** (*int*) – The new top end of the slider range.





See also


[`GetMax`](#wx.Slider.GetMax "wx.Slider.GetMax") , [`SetRange`](#wx.Slider.SetRange "wx.Slider.SetRange")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetMin(self, minValue: int) -> None:
        """ 

`SetMin`(*self*, *minValue*)[¶](#wx.Slider.SetMin "Permalink to this definition")
Sets the minimum slider value.



Parameters
**minValue** (*int*) – The new bottom end of the slider range.





See also


[`GetMin`](#wx.Slider.GetMin "wx.Slider.GetMin") , [`SetRange`](#wx.Slider.SetRange "wx.Slider.SetRange")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetPageSize(self, pageSize: int) -> None:
        """ 

`SetPageSize`(*self*, *pageSize*)[¶](#wx.Slider.SetPageSize "Permalink to this definition")
Sets the page size for the slider.



Parameters
**pageSize** (*int*) – The number of steps the slider moves when the user pages up or down.





See also


[`GetPageSize`](#wx.Slider.GetPageSize "wx.Slider.GetPageSize")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetRange(self, minValue, maxValue) -> None:
        """ 

`SetRange`(*self*, *minValue*, *maxValue*)[¶](#wx.Slider.SetRange "Permalink to this definition")
Sets the minimum and maximum slider values.



Parameters
* **minValue** (*int*) –
* **maxValue** (*int*) –





See also


[`GetMin`](#wx.Slider.GetMin "wx.Slider.GetMin") , [`GetMax`](#wx.Slider.GetMax "wx.Slider.GetMax")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetSelection(self, startPos, endPos) -> None:
        """ 

`SetSelection`(*self*, *startPos*, *endPos*)[¶](#wx.Slider.SetSelection "Permalink to this definition")
Sets the selection.



Parameters
* **startPos** (*int*) – The selection start position.
* **endPos** (*int*) – The selection end position.




MSW port.



Availability


Only available for MSW.




See also


[`GetSelStart`](#wx.Slider.GetSelStart "wx.Slider.GetSelStart") , [`GetSelEnd`](#wx.Slider.GetSelEnd "wx.Slider.GetSelEnd")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetThumbLength(self, len: int) -> None:
        """ 

`SetThumbLength`(*self*, *len*)[¶](#wx.Slider.SetThumbLength "Permalink to this definition")
Sets the slider thumb length.



Parameters
**len** (*int*) – The thumb length.




MSW port.



Availability


Only available for MSW.




See also


[`GetThumbLength`](#wx.Slider.GetThumbLength "wx.Slider.GetThumbLength")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetTick(self, tickPos: int) -> None:
        """ 

`SetTick`(*self*, *tickPos*)[¶](#wx.Slider.SetTick "Permalink to this definition")
Sets a tick position.



Parameters
**tickPos** (*int*) – The tick position.




MSW, GTK ports.



Availability


Only available for MSW, GTK.




See also


[`SetTickFreq`](#wx.Slider.SetTickFreq "wx.Slider.SetTickFreq")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetTickFreq(self, freq: int) -> None:
        """ 

`SetTickFreq`(*self*, *freq*)[¶](#wx.Slider.SetTickFreq "Permalink to this definition")
Sets the tick mark frequency and position.



Parameters
**freq** (*int*) – Frequency. For example, if the frequency is set to two, a tick mark is displayed for every other increment in the slider’s range.




MSW, GTK ports.



Availability


Only available for MSW, GTK.




See also


[`GetTickFreq`](#wx.Slider.GetTickFreq "wx.Slider.GetTickFreq")





            Source: https://docs.wxpython.org/wx.Slider.html
        """

    def SetValue(self, value: int) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.Slider.SetValue "Permalink to this definition")
Sets the slider position.



Parameters
**value** (*int*) – The slider position.






            Source: https://docs.wxpython.org/wx.Slider.html
        """

    LineSize: int  # `LineSize`[¶](#wx.Slider.LineSize "Permalink to this definition")See [`GetLineSize`](#wx.Slider.GetLineSize "wx.Slider.GetLineSize") and [`SetLineSize`](#wx.Slider.SetLineSize "wx.Slider.SetLineSize")
    Max: int  # `Max`[¶](#wx.Slider.Max "Permalink to this definition")See [`GetMax`](#wx.Slider.GetMax "wx.Slider.GetMax") and [`SetMax`](#wx.Slider.SetMax "wx.Slider.SetMax")
    Min: int  # `Min`[¶](#wx.Slider.Min "Permalink to this definition")See [`GetMin`](#wx.Slider.GetMin "wx.Slider.GetMin") and [`SetMin`](#wx.Slider.SetMin "wx.Slider.SetMin")
    PageSize: int  # `PageSize`[¶](#wx.Slider.PageSize "Permalink to this definition")See [`GetPageSize`](#wx.Slider.GetPageSize "wx.Slider.GetPageSize") and [`SetPageSize`](#wx.Slider.SetPageSize "wx.Slider.SetPageSize")
    Range: None  # `Range`[¶](#wx.Slider.Range "Permalink to this definition")See [`GetRange`](#wx.Slider.GetRange "wx.Slider.GetRange")
    SelEnd: int  # `SelEnd`[¶](#wx.Slider.SelEnd "Permalink to this definition")See [`GetSelEnd`](#wx.Slider.GetSelEnd "wx.Slider.GetSelEnd")
    SelStart: int  # `SelStart`[¶](#wx.Slider.SelStart "Permalink to this definition")See [`GetSelStart`](#wx.Slider.GetSelStart "wx.Slider.GetSelStart")
    ThumbLength: int  # `ThumbLength`[¶](#wx.Slider.ThumbLength "Permalink to this definition")See [`GetThumbLength`](#wx.Slider.GetThumbLength "wx.Slider.GetThumbLength") and [`SetThumbLength`](#wx.Slider.SetThumbLength "wx.Slider.SetThumbLength")
    TickFreq: int  # `TickFreq`[¶](#wx.Slider.TickFreq "Permalink to this definition")See [`GetTickFreq`](#wx.Slider.GetTickFreq "wx.Slider.GetTickFreq") and [`SetTickFreq`](#wx.Slider.SetTickFreq "wx.Slider.SetTickFreq")
    Value: int  # `Value`[¶](#wx.Slider.Value "Permalink to this definition")See [`GetValue`](#wx.Slider.GetValue "wx.Slider.GetValue") and [`SetValue`](#wx.Slider.SetValue "wx.Slider.SetValue")



SL_HORIZONTAL: int  # Displays the slider horizontally (this is the default).

SL_VERTICAL: int  # Displays the slider vertically.

SL_AUTOTICKS: int  # Displays tick marks (Windows, GTK+ 2.16 and later).

SL_MIN_MAX_LABELS: int  # Displays minimum, maximum labels (new since wxWidgets 2.9.1).

SL_VALUE_LABEL: int  # Displays value label (new since wxWidgets 2.9.1).

SL_LABELS: int  # Displays minimum, maximum and value labels (same as wx.SL_VALUE_LABEL and wx.SL_MIN_MAX_LABELS together).

SL_LEFT: int  # Displays ticks on the left and forces the slider to be vertical (Windows and GTK+ 3 only).

SL_RIGHT: int  # Displays ticks on the right and forces the slider to be vertical.

SL_TOP: int  # Displays ticks on the top (Windows and GTK+ 3 only).

SL_BOTTOM: int  # Displays ticks on the bottom (this is the default).

SL_BOTH: int  # Displays ticks on both sides of the slider. Windows only.

SL_SELRANGE: int  # Displays a highlighted selection range. Windows only.

SL_INVERSE: int  # Inverses the minimum and maximum endpoints on the slider. Not compatible with wx.SL_SELRANGE. ^^

class ScrollWinEvent(Event):
    """ **Possible constructors**:



```
ScrollWinEvent(commandType=wxEVT_NULL, pos=0, orientation=0)

```


A scroll event holds information about events sent from scrolling
windows.


  


        Source: https://docs.wxpython.org/wx.ScrollWinEvent.html
    """
    def __init__(self, commandType=wxEVT_NULL, pos=0, orientation=0) -> None:
        """ 

`__init__`(*self*, *commandType=wxEVT\_NULL*, *pos=0*, *orientation=0*)[¶](#wx.ScrollWinEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **commandType** (*wx.EventType*) –
* **pos** (*int*) –
* **orientation** (*int*) –






            Source: https://docs.wxpython.org/wx.ScrollWinEvent.html
        """

    def GetOrientation(self) -> int:
        """ 

`GetOrientation`(*self*)[¶](#wx.ScrollWinEvent.GetOrientation "Permalink to this definition")
Returns `wx.HORIZONTAL` or `wx.VERTICAL`, depending on the orientation of the scrollbar.



Return type
*int*





Todo


`wx.HORIZONTAL` and `wx.VERTICAL` should go in their own enum





            Source: https://docs.wxpython.org/wx.ScrollWinEvent.html
        """

    def GetPosition(self) -> int:
        """ 

`GetPosition`(*self*)[¶](#wx.ScrollWinEvent.GetPosition "Permalink to this definition")
Returns the position of the scrollbar for the thumb track and release events.


Note that this field can’t be used for the other events, you need to query the window itself for the current position in that case.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ScrollWinEvent.html
        """

    def SetOrientation(self, orient: int) -> None:
        """ 

`SetOrientation`(*self*, *orient*)[¶](#wx.ScrollWinEvent.SetOrientation "Permalink to this definition")

Parameters
**orient** (*int*) – 






            Source: https://docs.wxpython.org/wx.ScrollWinEvent.html
        """

    def SetPosition(self, pos: int) -> None:
        """ 

`SetPosition`(*self*, *pos*)[¶](#wx.ScrollWinEvent.SetPosition "Permalink to this definition")

Parameters
**pos** (*int*) – 






            Source: https://docs.wxpython.org/wx.ScrollWinEvent.html
        """

    Orientation: int  # `Orientation`[¶](#wx.ScrollWinEvent.Orientation "Permalink to this definition")See [`GetOrientation`](#wx.ScrollWinEvent.GetOrientation "wx.ScrollWinEvent.GetOrientation") and [`SetOrientation`](#wx.ScrollWinEvent.SetOrientation "wx.ScrollWinEvent.SetOrientation")
    Position: int  # `Position`[¶](#wx.ScrollWinEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.ScrollWinEvent.GetPosition "wx.ScrollWinEvent.GetPosition") and [`SetPosition`](#wx.ScrollWinEvent.SetPosition "wx.ScrollWinEvent.SetPosition")



class SearchCtrl(Control,TextEntry):
    """ **Possible constructors**:



```
SearchCtrl()

SearchCtrl(parent, id=ID_ANY, value="", pos=DefaultPosition,
           size=DefaultSize, style=0, validator=DefaultValidator,
           name=SearchCtrlNameStr)

```


A search control is a composite control with a search button, a text
control, and a cancel button.


  


        Source: https://docs.wxpython.org/wx.SearchCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SearchCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, value=””, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=SearchCtrlNameStr)*


Constructor, creating and showing a text control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Should not be `None`.
* **id** (*wx.WindowID*) – Control identifier. A value of -1 denotes a default value.
* **value** (*string*) – Default text value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Text control position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Text control size.
* **style** (*long*) – Window style. See  [wx.SearchCtrl](#wx-searchctrl).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`wx.TextCtrl.Create`](wx.TextCtrl.html#wx.TextCtrl.Create "wx.TextCtrl.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def AppendText(self, text: str) -> None:
        """ 

`AppendText`(*self*, *text*)[¶](#wx.SearchCtrl.AppendText "Permalink to this definition")
Appends the text to the end of the text control.



Parameters
**text** (*string*) – Text to write to the text control.





Note


After the text is appended, the insertion point will be at the end of the text control. If this behaviour is not desired, the programmer should use [`GetInsertionPoint`](#wx.SearchCtrl.GetInsertionPoint "wx.SearchCtrl.GetInsertionPoint") and [`SetInsertionPoint`](#wx.SearchCtrl.SetInsertionPoint "wx.SearchCtrl.SetInsertionPoint") .




See also


[`WriteText`](#wx.SearchCtrl.WriteText "wx.SearchCtrl.WriteText")





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def AutoComplete(self, *args, **kw) -> bool:
        """ 

`AutoComplete`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SearchCtrl.AutoComplete "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AutoComplete** *(self, choices)*


Call this function to enable auto-completion of the text typed in a single-line text control using the given *choices*.



Parameters
**choices** (*list of strings*) – 



Return type
*bool*



Returns
`True` if the auto-completion was enabled or `False` if the operation failed, typically because auto-completion is not supported by the current platform.





New in version 2.9.0.




See also


[`AutoCompleteFileNames`](#wx.SearchCtrl.AutoCompleteFileNames "wx.SearchCtrl.AutoCompleteFileNames")





---

  



**AutoComplete** *(self, completer)*


Enable auto-completion using the provided completer object.


This method should be used instead of [`AutoComplete`](#wx.SearchCtrl.AutoComplete "wx.SearchCtrl.AutoComplete") overload taking the array of possible completions if the total number of strings is too big as it allows returning the completions dynamically, depending on the text already entered by user and so is more efficient.


The specified *completer* object will be used to retrieve the list of possible completions for the already entered text and will be deleted by  [wx.TextEntry](wx.TextEntry.html#wx-textentry) itself when it’s not needed any longer.


Notice that you need to include */textcompleter.h* in order to define your class inheriting from  [wx.TextCompleter](wx.TextCompleter.html#wx-textcompleter).



Parameters
**completer** ([*wx.TextCompleter*](wx.TextCompleter.html#wx.TextCompleter "wx.TextCompleter")) – The object to be used for generating completions if not `None`. If it is `None`, auto-completion is disabled. The  [wx.TextEntry](wx.TextEntry.html#wx-textentry) object takes ownership of this pointer and will delete it in any case (i.e. even if this method returns `False`).



Return type
*bool*



Returns
`True` if the auto-completion was enabled or `False` if the operation failed, typically because auto-completion is not supported by the current platform.





New in version 2.9.2.




See also


 [wx.TextCompleter](wx.TextCompleter.html#wx-textcompleter)





---

  





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def AutoCompleteDirectories(self) -> bool:
        """ 

`AutoCompleteDirectories`(*self*)[¶](#wx.SearchCtrl.AutoCompleteDirectories "Permalink to this definition")
Call this function to enable auto-completion of the text using the file system directories.


Unlike [`AutoCompleteFileNames`](#wx.SearchCtrl.AutoCompleteFileNames "wx.SearchCtrl.AutoCompleteFileNames") which completes both file names and directories, this function only completes the directory names.


Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms.



Return type
*bool*



Returns
`True` if the auto-completion was enabled or `False` if the operation failed, typically because auto-completion is not supported by the current platform.





New in version 2.9.3.




See also


[`AutoComplete`](#wx.SearchCtrl.AutoComplete "wx.SearchCtrl.AutoComplete")





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def AutoCompleteFileNames(self) -> bool:
        """ 

`AutoCompleteFileNames`(*self*)[¶](#wx.SearchCtrl.AutoCompleteFileNames "Permalink to this definition")
Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.


Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms.



Return type
*bool*



Returns
`True` if the auto-completion was enabled or `False` if the operation failed, typically because auto-completion is not supported by the current platform.





New in version 2.9.0.




See also


[`AutoComplete`](#wx.SearchCtrl.AutoComplete "wx.SearchCtrl.AutoComplete")





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def CanCopy(self) -> bool:
        """ 

`CanCopy`(*self*)[¶](#wx.SearchCtrl.CanCopy "Permalink to this definition")
Returns `True` if the selection can be copied to the clipboard.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def CanCut(self) -> bool:
        """ 

`CanCut`(*self*)[¶](#wx.SearchCtrl.CanCut "Permalink to this definition")
Returns `True` if the selection can be cut to the clipboard.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def CanPaste(self) -> bool:
        """ 

`CanPaste`(*self*)[¶](#wx.SearchCtrl.CanPaste "Permalink to this definition")
Returns `True` if the contents of the clipboard can be pasted into the text control.


On some platforms (Motif, GTK) this is an approximation and returns `True` if the control is editable, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def CanRedo(self) -> bool:
        """ 

`CanRedo`(*self*)[¶](#wx.SearchCtrl.CanRedo "Permalink to this definition")
Returns `True` if there is a redo facility available and the last operation can be redone.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def CanUndo(self) -> bool:
        """ 

`CanUndo`(*self*)[¶](#wx.SearchCtrl.CanUndo "Permalink to this definition")
Returns `True` if there is an undo facility available and the last operation can be undone.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def ChangeValue(self, value: str) -> None:
        """ 

`ChangeValue`(*self*, *value*)[¶](#wx.SearchCtrl.ChangeValue "Permalink to this definition")
Sets the new text control value.


It also marks the control as not-modified which means that IsModified() would return `False` immediately after the call to [`ChangeValue`](#wx.SearchCtrl.ChangeValue "wx.SearchCtrl.ChangeValue") .


The insertion point is set to the start of the control (i.e. position 0) by this function.


This functions does not generate the `wxEVT_TEXT` event but otherwise is identical to [`SetValue`](#wx.SearchCtrl.SetValue "wx.SearchCtrl.SetValue") .


See [User Generated Events vs Programmatically Generated Events](events_overview.html#user-generated-events-vs-programmatically-generated-events) for more information.



Parameters
**value** (*string*) – The new value to set. It may contain newline characters if the text control is multi-line.





New in version 2.7.1.





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.SearchCtrl.Clear "Permalink to this definition")
Clears the text in the control.


Note that this function will generate a `wxEVT_TEXT` event, i.e. its effect is identical to calling `SetValue` (“”).




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Copy(self) -> None:
        """ 

`Copy`(*self*)[¶](#wx.SearchCtrl.Copy "Permalink to this definition")
Copies the selected text to the clipboard.




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Create(self, parent, id=ID_ANY, value="", pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=SearchCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *value=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *validator=DefaultValidator*, *name=SearchCtrlNameStr*)[¶](#wx.SearchCtrl.Create "Permalink to this definition")

Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **value** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Cut(self) -> None:
        """ 

`Cut`(*self*)[¶](#wx.SearchCtrl.Cut "Permalink to this definition")
Copies the selected text to the clipboard and removes it from the control.




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def ForceUpper(self) -> None:
        """ 

`ForceUpper`(*self*)[¶](#wx.SearchCtrl.ForceUpper "Permalink to this definition")
Convert all text entered into the control to upper case.


Call this method to ensure that all text entered into the control is converted on the fly to upper case. If the control is not empty, its existing contents is also converted to upper case.



New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.SearchCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetDescriptiveText(self) -> str:
        """ 

`GetDescriptiveText`(*self*)[¶](#wx.SearchCtrl.GetDescriptiveText "Permalink to this definition")
Return the text displayed when there is not yet any user input.



Return type
`string`






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetHint(self) -> str:
        """ 

`GetHint`(*self*)[¶](#wx.SearchCtrl.GetHint "Permalink to this definition")
Returns the current hint string.


See [`SetHint`](#wx.SearchCtrl.SetHint "wx.SearchCtrl.SetHint") for more information about hints.



Return type
`string`





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetInsertionPoint(self) -> int:
        """ 

`GetInsertionPoint`(*self*)[¶](#wx.SearchCtrl.GetInsertionPoint "Permalink to this definition")
Returns the insertion point, or cursor, position.


This is defined as the zero based index of the character position to the right of the insertion point. For example, if the insertion point is at the end of the single-line text control, it is equal to [`GetLastPosition`](#wx.SearchCtrl.GetLastPosition "wx.SearchCtrl.GetLastPosition") .


Notice that insertion position is, in general, different from the index of the character the cursor position at in the string returned by [`GetValue`](#wx.SearchCtrl.GetValue "wx.SearchCtrl.GetValue") . While this is always the case for the single line controls, multi-line controls can use two characters `"\\r\\n"` as line separator (this is notably the case under MSW) meaning that indices in the control and its string value are offset by 1 for every line.


Hence to correctly get the character at the current cursor position, taking into account that there can be none if the cursor is at the end of the string, you could do the following:



```
def GetCurrentChar(textCtrl):

    pos = textCtrl.GetInsertionPoint()

    if pos == textCtrl.GetLastPosition():
        return ''

    return textCtrl.GetValue()[pos]

```



Return type
*long*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetLastPosition(self) -> 'TextPos':
        """ 

`GetLastPosition`(*self*)[¶](#wx.SearchCtrl.GetLastPosition "Permalink to this definition")
Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.



Return type
*wx.TextPos*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetMargins(self) -> 'Point':
        """ 

`GetMargins`(*self*)[¶](#wx.SearchCtrl.GetMargins "Permalink to this definition")
Returns the margins used by the control.


The `x` field of the returned point is the horizontal margin and the `y` field is the vertical one.



Return type
 [wx.Point](wx.Point.html#wx-point)





New in version 2.9.1.




Note


If given margin cannot be accurately determined, its value will be set to -1. On some platforms you cannot obtain valid margin values until you have called [`SetMargins`](#wx.SearchCtrl.SetMargins "wx.SearchCtrl.SetMargins") .




See also


[`SetMargins`](#wx.SearchCtrl.SetMargins "wx.SearchCtrl.SetMargins")





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetMenu(self) -> 'Menu':
        """ 

`GetMenu`(*self*)[¶](#wx.SearchCtrl.GetMenu "Permalink to this definition")
Returns a pointer to the search control’s menu object or `None` if there is no menu attached.



Return type
 [wx.Menu](wx.Menu.html#wx-menu)






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetRange(self, from_, to_) -> str:
        """ 

`GetRange`(*self*, *from\_*, *to\_*)[¶](#wx.SearchCtrl.GetRange "Permalink to this definition")
Returns the string containing the text starting in the positions *from* and up to *to* in the control.


The positions must have been returned by another  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) method. Please note that the positions in a multiline  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) do **not** correspond to the indices in the string returned by [`GetValue`](#wx.SearchCtrl.GetValue "wx.SearchCtrl.GetValue") because of the different new line representations ( `CR` or `CR` `LF`) and so this method should be used to obtain the correct results instead of extracting parts of the entire value. It may also be more efficient, especially if the control contains a lot of data.



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –



Return type
`string`






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetSelection(self) -> tuple:
        """ 

`GetSelection`(*self*)[¶](#wx.SearchCtrl.GetSelection "Permalink to this definition")
Gets the current selection span.


If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) methods but don’t necessarily represent the correct indices into the string returned by [`GetValue`](#wx.SearchCtrl.GetValue "wx.SearchCtrl.GetValue") for multiline controls under Windows (at least,) you should use [`GetStringSelection`](#wx.SearchCtrl.GetStringSelection "wx.SearchCtrl.GetStringSelection") to get the selected text.



Return type
*tuple*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetStringSelection(self) -> str:
        """ 

`GetStringSelection`(*self*)[¶](#wx.SearchCtrl.GetStringSelection "Permalink to this definition")
Gets the text currently selected in the control.


If there is no selection, the returned string is empty.



Return type
`string`






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def GetValue(self) -> str:
        """ 

`GetValue`(*self*)[¶](#wx.SearchCtrl.GetValue "Permalink to this definition")
Gets the contents of the control.


Notice that for a multiline text control, the lines will be separated by (Unix-style) `\n` characters, even under Windows where they are separated by a `\r\n` sequence in the native control.



Return type
`string`






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def IsCancelButtonVisible(self) -> bool:
        """ 

`IsCancelButtonVisible`(*self*)[¶](#wx.SearchCtrl.IsCancelButtonVisible "Permalink to this definition")
Returns the cancel button’s visibility state.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def IsEditable(self) -> bool:
        """ 

`IsEditable`(*self*)[¶](#wx.SearchCtrl.IsEditable "Permalink to this definition")
Returns `True` if the controls contents may be edited by user (note that it always can be changed by the program).


In other words, this functions returns `True` if the control hasn’t been put in read-only mode by a previous call to [`SetEditable`](#wx.SearchCtrl.SetEditable "wx.SearchCtrl.SetEditable") .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.SearchCtrl.IsEmpty "Permalink to this definition")
Returns `True` if the control is currently empty.


This is the same as [`GetValue`](#wx.SearchCtrl.GetValue "wx.SearchCtrl.GetValue") .empty() but can be much more efficient for the multiline controls containing big amounts of text.



Return type
*bool*





New in version 2.7.1.





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def IsSearchButtonVisible(self) -> bool:
        """ 

`IsSearchButtonVisible`(*self*)[¶](#wx.SearchCtrl.IsSearchButtonVisible "Permalink to this definition")
Returns the search button visibility value.


If there is a menu attached, the search button will be visible regardless of the search button visibility value.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Paste(self) -> None:
        """ 

`Paste`(*self*)[¶](#wx.SearchCtrl.Paste "Permalink to this definition")
Pastes text from the clipboard to the text item.




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Redo(self) -> None:
        """ 

`Redo`(*self*)[¶](#wx.SearchCtrl.Redo "Permalink to this definition")
If there is a redo facility and the last operation can be redone, redoes the last operation.


Does nothing if there is no redo facility.




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Remove(self, from_, to_) -> None:
        """ 

`Remove`(*self*, *from\_*, *to\_*)[¶](#wx.SearchCtrl.Remove "Permalink to this definition")
Removes the text starting at the first given position up to (but not including) the character at the last position.


This function puts the current insertion point position at *to* as a side effect.



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –




The first position.


The last position.




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Replace(self, from_, to_, value) -> None:
        """ 

`Replace`(*self*, *from\_*, *to\_*, *value*)[¶](#wx.SearchCtrl.Replace "Permalink to this definition")
Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.


This function puts the current insertion point position at *to* as a side effect.



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –
* **value** (*string*) – The value to replace the existing text with.




The first position.


The last position.




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SelectAll(self) -> None:
        """ 

`SelectAll`(*self*)[¶](#wx.SearchCtrl.SelectAll "Permalink to this definition")
Selects all text in the control.



See also


[`SetSelection`](#wx.SearchCtrl.SetSelection "wx.SearchCtrl.SetSelection")





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SelectNone(self) -> None:
        """ 

`SelectNone`(*self*)[¶](#wx.SearchCtrl.SelectNone "Permalink to this definition")
Deselects selected text in the control.



New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetCancelBitmap(self, bmp) -> None:
        """ 

`SetCancelBitmap`(*self*, *bmp*)[¶](#wx.SearchCtrl.SetCancelBitmap "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetDescriptiveText(self, text: str) -> None:
        """ 

`SetDescriptiveText`(*self*, *text*)[¶](#wx.SearchCtrl.SetDescriptiveText "Permalink to this definition")
Set the text to be displayed in the search control when the user has not yet typed anything in it.



Parameters
**text** (*string*) – 






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetEditable(self, editable: bool) -> None:
        """ 

`SetEditable`(*self*, *editable*)[¶](#wx.SearchCtrl.SetEditable "Permalink to this definition")
Makes the text item editable or read-only, overriding the `wx.TE_READONLY` flag.



Parameters
**editable** (*bool*) – If `True`, the control is editable. If `False`, the control is read-only.





See also


[`IsEditable`](#wx.SearchCtrl.IsEditable "wx.SearchCtrl.IsEditable")





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetHint(self, hint: str) -> bool:
        """ 

`SetHint`(*self*, *hint*)[¶](#wx.SearchCtrl.SetHint "Permalink to this definition")
Sets a hint shown in an empty unfocused text control.


The hints are usually used to indicate to the user what is supposed to be entered into the given entry field, e.g. a common use of them is to show an explanation of what can be entered in a  [wx.SearchCtrl](#wx-searchctrl).


The hint is shown (usually greyed out) for an empty control until it gets focus and is shown again if the control loses it and remains empty. It won’t be shown once the control has a non-empty value, although it will be shown again if the control contents is cleared. Because of this, it generally only makes sense to use hints with the controls which are initially empty.


Notice that hints are known as *cue banners* under MSW or *placeholder strings* under macOS.


For the platforms without native hints support, the implementation has several known limitations. Notably, the hint display will not be properly updated if you change  [wx.TextEntry](wx.TextEntry.html#wx-textentry) contents programmatically when the hint is displayed using methods other than [`SetValue`](#wx.SearchCtrl.SetValue "wx.SearchCtrl.SetValue") or [`ChangeValue`](#wx.SearchCtrl.ChangeValue "wx.SearchCtrl.ChangeValue") or others which use them internally (e.g. [`Clear`](#wx.SearchCtrl.Clear "wx.SearchCtrl.Clear") ). In other words, currently you should avoid calling methods such as [`WriteText`](#wx.SearchCtrl.WriteText "wx.SearchCtrl.WriteText") or [`Replace`](#wx.SearchCtrl.Replace "wx.SearchCtrl.Replace") when using hints and the text control is empty. If you bind to the control’s focus and wxEVT\_TEXT events, you must call [`wx.Event.Skip`](wx.Event.html#wx.Event.Skip "wx.Event.Skip") on them so that the generic implementation works correctly.


Another limitation is that hints are ignored for the controls with `TE_PASSWORD` style.



Parameters
**hint** (*string*) – 



Return type
*bool*





New in version 2.9.0.




Note


Currently implemented natively on Windows (Vista and later only), macOS and GTK+ (3.2 and later).




Note


Hints can be used for single line text controls under all platforms, but only MSW and GTK+ 2 support them for multi-line text controls, they are ignored for them under the other platforms.





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetInsertionPoint(self, pos: int) -> None:
        """ 

`SetInsertionPoint`(*self*, *pos*)[¶](#wx.SearchCtrl.SetInsertionPoint "Permalink to this definition")
Sets the insertion point at the given position.



Parameters
**pos** (*long*) – Position to set, in the range from 0 to [`GetLastPosition`](#wx.SearchCtrl.GetLastPosition "wx.SearchCtrl.GetLastPosition") inclusive.






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetInsertionPointEnd(self) -> None:
        """ 

`SetInsertionPointEnd`(*self*)[¶](#wx.SearchCtrl.SetInsertionPointEnd "Permalink to this definition")
Sets the insertion point at the end of the text control.


This is equivalent to calling [`wx.TextCtrl.SetInsertionPoint`](wx.TextEntry.html#wx.TextEntry.SetInsertionPoint "wx.TextEntry.SetInsertionPoint") with [`wx.TextCtrl.GetLastPosition`](wx.TextEntry.html#wx.TextEntry.GetLastPosition "wx.TextEntry.GetLastPosition") argument.




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetMargins(self, *args, **kw) -> None:
        """ 

`SetMargins`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SearchCtrl.SetMargins "Permalink to this definition")
Attempts to set the control margins.


When margins are given as  [wx.Point](wx.Point.html#wx-point), x indicates the left and y the top margin. Use -1 to indicate that an existing value should be used.



Returns
`True` if setting of all requested margins was successful.





New in version 2.9.1.



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetMargins** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
*bool*






---

  



**SetMargins** *(self, left, top=-1)*



Parameters
* **left** (*int*) –
* **top** (*int*) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetMaxLength(self, len: int) -> None:
        """ 

`SetMaxLength`(*self*, *len*)[¶](#wx.SearchCtrl.SetMaxLength "Permalink to this definition")
This function sets the maximum number of characters the user can enter into the control.


In other words, it allows limiting the text value length to *len* not counting the terminating `NUL` character.


If *len* is 0, the previously set max length limit, if any, is discarded and the user may enter as much text as the underlying native text control widget supports (typically at least 32Kb). If the user tries to enter more characters into the text control when it already is filled up to the maximal length, a `wxEVT_TEXT_MAXLEN` event is sent to notify the program about it (giving it the possibility to show an explanatory message, for example) and the extra input is discarded.


Note that in wxGTK this function may only be used with single line text controls.



Parameters
**len** (*long*) – 






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetMenu(self, menu: 'Menu') -> None:
        """ 

`SetMenu`(*self*, *menu*)[¶](#wx.SearchCtrl.SetMenu "Permalink to this definition")
Sets the search control’s menu object.


If there is already a menu associated with the search control it is deleted.



Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – Menu to attach to the search control.






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetSearchBitmap(self, bmp) -> None:
        """ 

`SetSearchBitmap`(*self*, *bmp*)[¶](#wx.SearchCtrl.SetSearchBitmap "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetSearchMenuBitmap(self, bmp) -> None:
        """ 

`SetSearchMenuBitmap`(*self*, *bmp*)[¶](#wx.SearchCtrl.SetSearchMenuBitmap "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetSelection(self, from_, to_) -> None:
        """ 

`SetSelection`(*self*, *from\_*, *to\_*)[¶](#wx.SearchCtrl.SetSelection "Permalink to this definition")
Selects the text starting at the first position up to (but not including) the character at the last position.


If both parameters are equal to -1 all text in the control is selected.


Notice that the insertion point will be moved to *from* by this function.



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –




The first position.


The last position.



See also


[`SelectAll`](#wx.SearchCtrl.SelectAll "wx.SearchCtrl.SelectAll")





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def SetValue(self, value: str) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.SearchCtrl.SetValue "Permalink to this definition")
Sets the new text control value.


It also marks the control as not-modified which means that IsModified() would return `False` immediately after the call to [`SetValue`](#wx.SearchCtrl.SetValue "wx.SearchCtrl.SetValue") .


The insertion point is set to the start of the control (i.e. position 0) by this function unless the control value doesn’t change at all, in which case the insertion point is left at its original position.


Note that, unlike most other functions changing the controls values, this function generates a `wxEVT_TEXT` event. To avoid this you can use [`ChangeValue`](#wx.SearchCtrl.ChangeValue "wx.SearchCtrl.ChangeValue") instead.



Parameters
**value** (*string*) – The new value to set. It may contain newline characters if the text control is multi-line.






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def ShowCancelButton(self, show: bool) -> None:
        """ 

`ShowCancelButton`(*self*, *show*)[¶](#wx.SearchCtrl.ShowCancelButton "Permalink to this definition")
Shows or hides the cancel button.


Note that this function does nothing in the native GTK version of the control: “Cancel” button is always shown automatically if the control is not empty and hidden if it is empty.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def ShowSearchButton(self, show: bool) -> None:
        """ 

`ShowSearchButton`(*self*, *show*)[¶](#wx.SearchCtrl.ShowSearchButton "Permalink to this definition")
Sets the search button visibility value on the search control.


If there is a menu attached, the search button will be visible regardless of the search button visibility value.


Note that this function does nothing in the native GTK version of the control: “Search” button is always shown there.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def Undo(self) -> None:
        """ 

`Undo`(*self*)[¶](#wx.SearchCtrl.Undo "Permalink to this definition")
If there is an undo facility and the last operation can be undone, undoes the last operation.


Does nothing if there is no undo facility.




            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    def WriteText(self, text: str) -> None:
        """ 

`WriteText`(*self*, *text*)[¶](#wx.SearchCtrl.WriteText "Permalink to this definition")
Writes the text into the text control at the current insertion position.



Parameters
**text** (*string*) – Text to write to the text control.





Note


Newlines in the text string are the only control characters allowed, and they will cause appropriate line breaks. See operator<<() and [`AppendText`](#wx.SearchCtrl.AppendText "wx.SearchCtrl.AppendText") for more convenient ways of writing to the window. After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended. To append text after the user may have interacted with the control, call [`wx.TextCtrl.SetInsertionPointEnd`](wx.TextEntry.html#wx.TextEntry.SetInsertionPointEnd "wx.TextEntry.SetInsertionPointEnd") before writing.





            Source: https://docs.wxpython.org/wx.SearchCtrl.html
        """

    CancelButtonVisible: Any  # `CancelButtonVisible`[¶](#wx.SearchCtrl.CancelButtonVisible "Permalink to this definition")See [`IsCancelButtonVisible`](#wx.SearchCtrl.IsCancelButtonVisible "wx.SearchCtrl.IsCancelButtonVisible") and [`ShowCancelButton`](#wx.SearchCtrl.ShowCancelButton "wx.SearchCtrl.ShowCancelButton")
    DescriptiveText: str  # `DescriptiveText`[¶](#wx.SearchCtrl.DescriptiveText "Permalink to this definition")See [`GetDescriptiveText`](#wx.SearchCtrl.GetDescriptiveText "wx.SearchCtrl.GetDescriptiveText") and [`SetDescriptiveText`](#wx.SearchCtrl.SetDescriptiveText "wx.SearchCtrl.SetDescriptiveText")
    Hint: str  # `Hint`[¶](#wx.SearchCtrl.Hint "Permalink to this definition")See [`GetHint`](#wx.SearchCtrl.GetHint "wx.SearchCtrl.GetHint") and [`SetHint`](#wx.SearchCtrl.SetHint "wx.SearchCtrl.SetHint")
    InsertionPoint: int  # `InsertionPoint`[¶](#wx.SearchCtrl.InsertionPoint "Permalink to this definition")See [`GetInsertionPoint`](#wx.SearchCtrl.GetInsertionPoint "wx.SearchCtrl.GetInsertionPoint") and [`SetInsertionPoint`](#wx.SearchCtrl.SetInsertionPoint "wx.SearchCtrl.SetInsertionPoint")
    LastPosition: 'TextPos'  # `LastPosition`[¶](#wx.SearchCtrl.LastPosition "Permalink to this definition")See [`GetLastPosition`](#wx.SearchCtrl.GetLastPosition "wx.SearchCtrl.GetLastPosition")
    Margins: 'Point'  # `Margins`[¶](#wx.SearchCtrl.Margins "Permalink to this definition")See [`GetMargins`](#wx.SearchCtrl.GetMargins "wx.SearchCtrl.GetMargins") and [`SetMargins`](#wx.SearchCtrl.SetMargins "wx.SearchCtrl.SetMargins")
    Menu: '_Menu'  # `Menu`[¶](#wx.SearchCtrl.Menu "Permalink to this definition")See [`GetMenu`](#wx.SearchCtrl.GetMenu "wx.SearchCtrl.GetMenu") and [`SetMenu`](#wx.SearchCtrl.SetMenu "wx.SearchCtrl.SetMenu")
    SearchButtonVisible: Any  # `SearchButtonVisible`[¶](#wx.SearchCtrl.SearchButtonVisible "Permalink to this definition")See [`IsSearchButtonVisible`](#wx.SearchCtrl.IsSearchButtonVisible "wx.SearchCtrl.IsSearchButtonVisible") and [`ShowSearchButton`](#wx.SearchCtrl.ShowSearchButton "wx.SearchCtrl.ShowSearchButton")
    StringSelection: str  # `StringSelection`[¶](#wx.SearchCtrl.StringSelection "Permalink to this definition")See [`GetStringSelection`](#wx.SearchCtrl.GetStringSelection "wx.SearchCtrl.GetStringSelection")
    Value: str  # `Value`[¶](#wx.SearchCtrl.Value "Permalink to this definition")See [`GetValue`](#wx.SearchCtrl.GetValue "wx.SearchCtrl.GetValue") and [`SetValue`](#wx.SearchCtrl.SetValue "wx.SearchCtrl.SetValue")



EVT_SEARCH: int  # Respond to a  wxEVT_SEARCH   event, generated when the search button is clicked. Note that this does not initiate a search on its own, you need to perform the appropriate action in your event handler. You may use:

EVT_SEARCH_CANCEL: int  # Respond to a  wxEVT_SEARCH_CANCEL   event, generated when the cancel button is clicked. ^^

class SetCursorEvent(Event):
    """ **Possible constructors**:



```
SetCursorEvent(x=0, y=0)

```


A SetCursorEvent is generated from Window when the mouse cursor is
about to be set as a result of mouse motion.


  


        Source: https://docs.wxpython.org/wx.SetCursorEvent.html
    """
    def __init__(self, x=0, y=0) -> None:
        """ 

`__init__`(*self*, *x=0*, *y=0*)[¶](#wx.SetCursorEvent.__init__ "Permalink to this definition")
Constructor, used by the library itself internally to initialize the event object.



Parameters
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.SetCursorEvent.html
        """

    def GetCursor(self) -> 'Cursor':
        """ 

`GetCursor`(*self*)[¶](#wx.SetCursorEvent.GetCursor "Permalink to this definition")
Returns a reference to the cursor specified by this event.



Return type
 [wx.Cursor](wx.Cursor.html#wx-cursor)






            Source: https://docs.wxpython.org/wx.SetCursorEvent.html
        """

    def GetX(self) -> 'Coord':
        """ 

`GetX`(*self*)[¶](#wx.SetCursorEvent.GetX "Permalink to this definition")
Returns the X coordinate of the mouse in client coordinates.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.SetCursorEvent.html
        """

    def GetY(self) -> 'Coord':
        """ 

`GetY`(*self*)[¶](#wx.SetCursorEvent.GetY "Permalink to this definition")
Returns the Y coordinate of the mouse in client coordinates.



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.SetCursorEvent.html
        """

    def HasCursor(self) -> bool:
        """ 

`HasCursor`(*self*)[¶](#wx.SetCursorEvent.HasCursor "Permalink to this definition")
Returns `True` if the cursor specified by this event is a valid cursor.



Return type
*bool*





Note


You cannot specify NullCursor with this event, as it is not considered a valid cursor.





            Source: https://docs.wxpython.org/wx.SetCursorEvent.html
        """

    def SetCursor(self, cursor: 'Cursor') -> None:
        """ 

`SetCursor`(*self*, *cursor*)[¶](#wx.SetCursorEvent.SetCursor "Permalink to this definition")
Sets the cursor associated with this event.



Parameters
**cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – 






            Source: https://docs.wxpython.org/wx.SetCursorEvent.html
        """

    Cursor: '_Cursor'  # `Cursor`[¶](#wx.SetCursorEvent.Cursor "Permalink to this definition")See [`GetCursor`](#wx.SetCursorEvent.GetCursor "wx.SetCursorEvent.GetCursor") and [`SetCursor`](#wx.SetCursorEvent.SetCursor "wx.SetCursorEvent.SetCursor")
    X: 'Coord'  # `X`[¶](#wx.SetCursorEvent.X "Permalink to this definition")See [`GetX`](#wx.SetCursorEvent.GetX "wx.SetCursorEvent.GetX")
    Y: 'Coord'  # `Y`[¶](#wx.SetCursorEvent.Y "Permalink to this definition")See [`GetY`](#wx.SetCursorEvent.GetY "wx.SetCursorEvent.GetY")



class SettableHeaderColumn(HeaderColumn):
    """ Adds methods to set the column attributes to HeaderColumn.


  


        Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
    """
    def ChangeFlag(self, flag, set) -> None:
        """ 

`ChangeFlag`(*self*, *flag*, *set*)[¶](#wx.SettableHeaderColumn.ChangeFlag "Permalink to this definition")
Set or clear the given flag.



Parameters
* **flag** (*int*) – The flag to set or clear.
* **set** (*bool*) – If `True`, set the flag, i.e. equivalent to calling [`SetFlag`](#wx.SettableHeaderColumn.SetFlag "wx.SettableHeaderColumn.SetFlag") , otherwise clear it, as [`ClearFlag`](#wx.SettableHeaderColumn.ClearFlag "wx.SettableHeaderColumn.ClearFlag") .





See also


[`SetFlags`](#wx.SettableHeaderColumn.SetFlags "wx.SettableHeaderColumn.SetFlags")





            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def ClearFlag(self, flag: int) -> None:
        """ 

`ClearFlag`(*self*, *flag*)[¶](#wx.SettableHeaderColumn.ClearFlag "Permalink to this definition")
Clear the specified flag for the column.



Parameters
**flag** (*int*) – 





See also


[`SetFlags`](#wx.SettableHeaderColumn.SetFlags "wx.SettableHeaderColumn.SetFlags")





            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetAlignment(self, align: int) -> None:
        """ 

`SetAlignment`(*self*, *align*)[¶](#wx.SettableHeaderColumn.SetAlignment "Permalink to this definition")
Set the alignment of the column header.



Parameters
**align** ([*Alignment*](wx.Alignment.enumeration.html "Alignment")) – The text alignment in horizontal direction only or `wx.ALIGN_NOT` to use the default alignment, The possible values here are `wx.ALIGN_CENTRE`, `wx.ALIGN_LEFT` or `wx.ALIGN_RIGHT` with `wx.ALIGN_CENTRE_HORIZONTAL` being also supported as synonym for `wx.ALIGN_CENTRE` for consistency (but notice that [`GetAlignment`](wx.HeaderColumn.html#wx.HeaderColumn.GetAlignment "wx.HeaderColumn.GetAlignment") never returns it).






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetBitmap(self, bitmap: 'BitmapBundle') -> None:
        """ 

`SetBitmap`(*self*, *bitmap*)[¶](#wx.SettableHeaderColumn.SetBitmap "Permalink to this definition")
Set the bitmap to be displayed in the column header.


Notice that the bitmaps displayed in different columns of the same control must all be of the same size.



Parameters
**bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetFlag(self, flag: int) -> None:
        """ 

`SetFlag`(*self*, *flag*)[¶](#wx.SettableHeaderColumn.SetFlag "Permalink to this definition")
Set the specified flag for the column.



Parameters
**flag** (*int*) – 





See also


[`SetFlags`](#wx.SettableHeaderColumn.SetFlags "wx.SettableHeaderColumn.SetFlags")





            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetFlags(self, flags: int) -> None:
        """ 

`SetFlags`(*self*, *flags*)[¶](#wx.SettableHeaderColumn.SetFlags "Permalink to this definition")
Set the column flags.


This method allows setting all flags at once, see also generic [`ChangeFlag`](#wx.SettableHeaderColumn.ChangeFlag "wx.SettableHeaderColumn.ChangeFlag") , [`SetFlag`](#wx.SettableHeaderColumn.SetFlag "wx.SettableHeaderColumn.SetFlag") , [`ClearFlag`](#wx.SettableHeaderColumn.ClearFlag "wx.SettableHeaderColumn.ClearFlag") and [`ToggleFlag`](#wx.SettableHeaderColumn.ToggleFlag "wx.SettableHeaderColumn.ToggleFlag") methods below as well as specific [`SetResizeable`](#wx.SettableHeaderColumn.SetResizeable "wx.SettableHeaderColumn.SetResizeable") , [`SetSortable`](#wx.SettableHeaderColumn.SetSortable "wx.SettableHeaderColumn.SetSortable") , [`SetReorderable`](#wx.SettableHeaderColumn.SetReorderable "wx.SettableHeaderColumn.SetReorderable") and [`SetHidden`](#wx.SettableHeaderColumn.SetHidden "wx.SettableHeaderColumn.SetHidden") ones.



Parameters
**flags** (*int*) – Combination of `wx.COL_RESIZABLE`, `wx.COL_SORTABLE`, `wx.COL_REORDERABLE` and `wx.COL_HIDDEN` bit flags.






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetHidden(self, hidden: bool) -> None:
        """ 

`SetHidden`(*self*, *hidden*)[¶](#wx.SettableHeaderColumn.SetHidden "Permalink to this definition")
Hide or show the column.


By default all columns are shown but some of them can be completely hidden from view by calling this function.


Equivalent to ChangeFlag(wxCOL\_HIDDEN, hidden).



Parameters
**hidden** (*bool*) – 






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetMinWidth(self, minWidth: int) -> None:
        """ 

`SetMinWidth`(*self*, *minWidth*)[¶](#wx.SettableHeaderColumn.SetMinWidth "Permalink to this definition")
Set the minimal column width.


This method can be used with resizable columns (i.e. those for which `wx.COL_RESIZABLE` flag is set in [`GetFlags`](wx.HeaderColumn.html#wx.HeaderColumn.GetFlags "wx.HeaderColumn.GetFlags") or, alternatively, [`IsResizeable`](wx.HeaderColumn.html#wx.HeaderColumn.IsResizeable "wx.HeaderColumn.IsResizeable") returns `True`) to prevent the user from making them narrower than the given width.



Parameters
**minWidth** (*int*) – The minimal column width in pixels, may be 0 to remove any previously set restrictions.






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetReorderable(self, reorderable: bool) -> None:
        """ 

`SetReorderable`(*self*, *reorderable*)[¶](#wx.SettableHeaderColumn.SetReorderable "Permalink to this definition")
Allow changing the column order by dragging it.


Equivalent to ChangeFlag(wxCOL\_REORDERABLE, reorderable).



Parameters
**reorderable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetResizeable(self, resizable: bool) -> None:
        """ 

`SetResizeable`(*self*, *resizable*)[¶](#wx.SettableHeaderColumn.SetResizeable "Permalink to this definition")
Call this to enable or disable interactive resizing of the column by the user.


By default, the columns are resizable.


Equivalent to ChangeFlag(wxCOL\_RESIZABLE, resizable).



Parameters
**resizable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetSortOrder(self, ascending: bool) -> None:
        """ 

`SetSortOrder`(*self*, *ascending*)[¶](#wx.SettableHeaderColumn.SetSortOrder "Permalink to this definition")
Sets this column as the sort key for the associated control.


This function indicates that this column is currently used for sorting the control and also sets the sorting direction. Notice that actual sorting is only done in the control associated with the header, this function doesn’t do any sorting on its own.


Don’t confuse this function with [`SetSortable`](#wx.SettableHeaderColumn.SetSortable "wx.SettableHeaderColumn.SetSortable") which should be used to indicate that the column *may* be used for sorting while this one is used to indicate that it currently *is* used for sorting. Of course, [`SetSortOrder`](#wx.SettableHeaderColumn.SetSortOrder "wx.SettableHeaderColumn.SetSortOrder") can be only called for sortable columns.



Parameters
**ascending** (*bool*) – If `True`, sort in ascending order, otherwise in descending order.






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetSortable(self, sortable: bool) -> None:
        """ 

`SetSortable`(*self*, *sortable*)[¶](#wx.SettableHeaderColumn.SetSortable "Permalink to this definition")
Allow clicking the column to sort the control contents by the field in this column.


By default, the columns are not sortable so you need to explicitly call this function to allow sorting by the field corresponding to this column.


Equivalent to ChangeFlag(wxCOL\_SORTABLE, sortable).



Parameters
**sortable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetTitle(self, title: str) -> None:
        """ 

`SetTitle`(*self*, *title*)[¶](#wx.SettableHeaderColumn.SetTitle "Permalink to this definition")
Set the text to display in the column header.



Parameters
**title** (*string*) – 






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.SettableHeaderColumn.SetWidth "Permalink to this definition")
Set the column width.



Parameters
**width** (*int*) – The column width in pixels or the special `wx.COL_WIDTH_DEFAULT` (meaning to use default width) or `wx.COL_WIDTH_AUTOSIZE` (size to fit the content) value.






            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def ToggleFlag(self, flag: int) -> None:
        """ 

`ToggleFlag`(*self*, *flag*)[¶](#wx.SettableHeaderColumn.ToggleFlag "Permalink to this definition")
Toggle the specified flag for the column.


If the flag is currently set, equivalent to [`ClearFlag`](#wx.SettableHeaderColumn.ClearFlag "wx.SettableHeaderColumn.ClearFlag") , otherwise – to [`SetFlag`](#wx.SettableHeaderColumn.SetFlag "wx.SettableHeaderColumn.SetFlag") .



Parameters
**flag** (*int*) – 





See also


[`SetFlags`](#wx.SettableHeaderColumn.SetFlags "wx.SettableHeaderColumn.SetFlags")





            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def ToggleSortOrder(self) -> None:
        """ 

`ToggleSortOrder`(*self*)[¶](#wx.SettableHeaderColumn.ToggleSortOrder "Permalink to this definition")
Inverses the sort order.


This function is typically called when the user clicks on a column used for sorting to change sort order from ascending to descending or vice versa.



See also


[`SetSortOrder`](#wx.SettableHeaderColumn.SetSortOrder "wx.SettableHeaderColumn.SetSortOrder") , [`IsSortOrderAscending`](wx.HeaderColumn.html#wx.HeaderColumn.IsSortOrderAscending "wx.HeaderColumn.IsSortOrderAscending")





            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    def UnsetAsSortKey(self) -> None:
        """ 

`UnsetAsSortKey`(*self*)[¶](#wx.SettableHeaderColumn.UnsetAsSortKey "Permalink to this definition")
Don’t use this column for sorting.


This is the reverse of [`SetSortOrder`](#wx.SettableHeaderColumn.SetSortOrder "wx.SettableHeaderColumn.SetSortOrder") and is called to indicate that this column is not used for sorting any longer.




            Source: https://docs.wxpython.org/wx.SettableHeaderColumn.html
        """

    Alignment: Any  # `Alignment`[¶](#wx.SettableHeaderColumn.Alignment "Permalink to this definition")See `GetAlignment` and [`SetAlignment`](#wx.SettableHeaderColumn.SetAlignment "wx.SettableHeaderColumn.SetAlignment")
    Bitmap: Any  # `Bitmap`[¶](#wx.SettableHeaderColumn.Bitmap "Permalink to this definition")See `GetBitmap` and [`SetBitmap`](#wx.SettableHeaderColumn.SetBitmap "wx.SettableHeaderColumn.SetBitmap")
    Flags: Any  # `Flags`[¶](#wx.SettableHeaderColumn.Flags "Permalink to this definition")See `GetFlags` and [`SetFlags`](#wx.SettableHeaderColumn.SetFlags "wx.SettableHeaderColumn.SetFlags")
    Hidden: Any  # `Hidden`[¶](#wx.SettableHeaderColumn.Hidden "Permalink to this definition")See `IsHidden` and [`SetHidden`](#wx.SettableHeaderColumn.SetHidden "wx.SettableHeaderColumn.SetHidden")
    MinWidth: Any  # `MinWidth`[¶](#wx.SettableHeaderColumn.MinWidth "Permalink to this definition")See `GetMinWidth` and [`SetMinWidth`](#wx.SettableHeaderColumn.SetMinWidth "wx.SettableHeaderColumn.SetMinWidth")
    Reorderable: Any  # `Reorderable`[¶](#wx.SettableHeaderColumn.Reorderable "Permalink to this definition")See `IsReorderable` and [`SetReorderable`](#wx.SettableHeaderColumn.SetReorderable "wx.SettableHeaderColumn.SetReorderable")
    Resizeable: Any  # `Resizeable`[¶](#wx.SettableHeaderColumn.Resizeable "Permalink to this definition")See `IsResizeable` and [`SetResizeable`](#wx.SettableHeaderColumn.SetResizeable "wx.SettableHeaderColumn.SetResizeable")
    Sortable: Any  # `Sortable`[¶](#wx.SettableHeaderColumn.Sortable "Permalink to this definition")See `IsSortable` and [`SetSortable`](#wx.SettableHeaderColumn.SetSortable "wx.SettableHeaderColumn.SetSortable")
    Title: Any  # `Title`[¶](#wx.SettableHeaderColumn.Title "Permalink to this definition")See `GetTitle` and [`SetTitle`](#wx.SettableHeaderColumn.SetTitle "wx.SettableHeaderColumn.SetTitle")
    Width: Any  # `Width`[¶](#wx.SettableHeaderColumn.Width "Permalink to this definition")See `GetWidth` and [`SetWidth`](#wx.SettableHeaderColumn.SetWidth "wx.SettableHeaderColumn.SetWidth")



ALIGN_NOT: int

COL_RESIZABLE: int

class SharedClientDataContainer:
    """ This class is a replacement for ClientDataContainer, and unlike
ClientDataContainer the SharedClientDataContainer client data is
copiable, so it can be copied when objects containing it are cloned.


  


        Source: https://docs.wxpython.org/wx.SharedClientDataContainer.html
    """
    def GetClientData(self) -> None:
        """ 

`GetClientData`(*self*)[¶](#wx.SharedClientDataContainer.GetClientData "Permalink to this definition")
Get the untyped client data.




            Source: https://docs.wxpython.org/wx.SharedClientDataContainer.html
        """

    def GetClientObject(self) -> 'ClientData':
        """ 

`GetClientObject`(*self*)[¶](#wx.SharedClientDataContainer.GetClientObject "Permalink to this definition")
Get a pointer to the client data object.



Return type
[`ClientData`](#wx.SharedClientDataContainer.ClientData "wx.SharedClientDataContainer.ClientData")






            Source: https://docs.wxpython.org/wx.SharedClientDataContainer.html
        """

    def SetClientData(self, data: Any) -> None:
        """ 

`SetClientData`(*self*, *data*)[¶](#wx.SharedClientDataContainer.SetClientData "Permalink to this definition")
Set the untyped client data.



Parameters
**data** – 






            Source: https://docs.wxpython.org/wx.SharedClientDataContainer.html
        """

    def SetClientObject(self, data: ClientData) -> None:
        """ 

`SetClientObject`(*self*, *data*)[¶](#wx.SharedClientDataContainer.SetClientObject "Permalink to this definition")
Set the client data object.


Any previous object will be deleted.



Parameters
**data** (*ClientData*) – 






            Source: https://docs.wxpython.org/wx.SharedClientDataContainer.html
        """

    ClientData: None  # `ClientData`[¶](#wx.SharedClientDataContainer.ClientData "Permalink to this definition")See [`GetClientData`](#wx.SharedClientDataContainer.GetClientData "wx.SharedClientDataContainer.GetClientData") and [`SetClientData`](#wx.SharedClientDataContainer.SetClientData "wx.SharedClientDataContainer.SetClientData")
    ClientObject: 'ClientData'  # `ClientObject`[¶](#wx.SharedClientDataContainer.ClientObject "Permalink to this definition")See [`GetClientObject`](#wx.SharedClientDataContainer.GetClientObject "wx.SharedClientDataContainer.GetClientObject") and [`SetClientObject`](#wx.SharedClientDataContainer.SetClientObject "wx.SharedClientDataContainer.SetClientObject")



class ShowEvent(Event):
    """ **Possible constructors**:



```
ShowEvent(winid=0, show=False)

```


An event being sent when the window is shown or hidden.


  


        Source: https://docs.wxpython.org/wx.ShowEvent.html
    """
    def __init__(self, winid=0, show=False) -> None:
        """ 

`__init__`(*self*, *winid=0*, *show=False*)[¶](#wx.ShowEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **winid** (*int*) –
* **show** (*bool*) –






            Source: https://docs.wxpython.org/wx.ShowEvent.html
        """

    def IsShown(self) -> bool:
        """ 

`IsShown`(*self*)[¶](#wx.ShowEvent.IsShown "Permalink to this definition")
Return `True` if the window has been shown, `False` if it has been hidden.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ShowEvent.html
        """

    def SetShow(self, show: bool) -> None:
        """ 

`SetShow`(*self*, *show*)[¶](#wx.ShowEvent.SetShow "Permalink to this definition")
Set whether the windows was shown or hidden.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.ShowEvent.html
        """

    Show: Any  # `Show`[¶](#wx.ShowEvent.Show "Permalink to this definition")See [`IsShown`](#wx.ShowEvent.IsShown "wx.ShowEvent.IsShown") and [`SetShow`](#wx.ShowEvent.SetShow "wx.ShowEvent.SetShow")



EVT_SHOW: int  # Process a  wxEVT_SHOW   event. ^^

class Simplebook(BookCtrlBase):
    """ **Possible constructors**:



```
Simplebook()

Simplebook(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
           style=0, name="")

```


Simplebook is a control showing exactly one of its several pages.


  


        Source: https://docs.wxpython.org/wx.Simplebook.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Simplebook.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Use [`Create`](#wx.Simplebook.Create "wx.Simplebook.Create") later to really create the control.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=””)*


Constructs a simple book control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.Simplebook.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name="") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=""*)[¶](#wx.Simplebook.Create "Permalink to this definition")
Really create the window of an object created using default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*





New in version 4.0/wxWidgets-3.0.2.





            Source: https://docs.wxpython.org/wx.Simplebook.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Simplebook.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Simplebook.html
        """

    def SetEffect(self, effect: ShowEffect) -> None:
        """ 

`SetEffect`(*self*, *effect*)[¶](#wx.Simplebook.SetEffect "Permalink to this definition")
Set the same effect to use for both showing and hiding the pages.


This is the same as `SetEffects(effect, effect)` .



Parameters
**effect** ([*ShowEffect*](wx.ShowEffect.enumeration.html "ShowEffect")) – 





See also


[`SetEffectTimeout`](#wx.Simplebook.SetEffectTimeout "wx.Simplebook.SetEffectTimeout")





            Source: https://docs.wxpython.org/wx.Simplebook.html
        """

    def SetEffectTimeout(self, timeout: Any) -> None:
        """ 

`SetEffectTimeout`(*self*, *timeout*)[¶](#wx.Simplebook.SetEffectTimeout "Permalink to this definition")
Set the same effect timeout to use for both showing and hiding the pages.


This is the same as `SetEffectsTimeouts(timeout, timeout)` .



Parameters
**timeout** – 





See also


[`SetEffect`](#wx.Simplebook.SetEffect "wx.Simplebook.SetEffect")





            Source: https://docs.wxpython.org/wx.Simplebook.html
        """

    def SetEffects(self, showEffect, hideEffect) -> None:
        """ 

`SetEffects`(*self*, *showEffect*, *hideEffect*)[¶](#wx.Simplebook.SetEffects "Permalink to this definition")
Set the effects to use for showing and hiding the pages.


This method allows specifying the effects passed to [`wx.Window.ShowWithEffect`](wx.Window.html#wx.Window.ShowWithEffect "wx.Window.ShowWithEffect") and [`wx.Window.HideWithEffect`](wx.Window.html#wx.Window.HideWithEffect "wx.Window.HideWithEffect") respectively when the pages need to be shown or hidden.


By default, no effects are used, but as the pages are only changed by the program and not the user himself, it may be useful to use some visual effects to make the changes more noticeable.



Parameters
* **showEffect** ([*ShowEffect*](wx.ShowEffect.enumeration.html "ShowEffect")) – The effect to use for showing the newly selected page.
* **hideEffect** ([*ShowEffect*](wx.ShowEffect.enumeration.html "ShowEffect")) – The effect to use for hiding the previously selected page.





See also


[`SetEffectsTimeouts`](#wx.Simplebook.SetEffectsTimeouts "wx.Simplebook.SetEffectsTimeouts")





            Source: https://docs.wxpython.org/wx.Simplebook.html
        """

    def SetEffectsTimeouts(self, showTimeout, hideTimeout) -> None:
        """ 

`SetEffectsTimeouts`(*self*, *showTimeout*, *hideTimeout*)[¶](#wx.Simplebook.SetEffectsTimeouts "Permalink to this definition")
Set the effect timeout to use for showing and hiding the pages.


This method allows configuring the timeout arguments passed to [`wx.Window.ShowWithEffect`](wx.Window.html#wx.Window.ShowWithEffect "wx.Window.ShowWithEffect") and [`wx.Window.HideWithEffect`](wx.Window.html#wx.Window.HideWithEffect "wx.Window.HideWithEffect") if a non-default effect is used.


If this method is not called, default, system-dependent timeout is used.



Parameters
* **showTimeout** – Timeout of the show effect, in milliseconds.
* **hideTimeout** – Timeout of the hide effect, in milliseconds.





See also


[`SetEffects`](#wx.Simplebook.SetEffects "wx.Simplebook.SetEffects")





            Source: https://docs.wxpython.org/wx.Simplebook.html
        """

    def ShowNewPage(self, page: 'Window') -> bool:
        """ 

`ShowNewPage`(*self*, *page*)[¶](#wx.Simplebook.ShowNewPage "Permalink to this definition")
Add a new page and show it immediately.


This is simply a thin wrapper around the base class [`wx.BookCtrlBase.AddPage`](wx.BookCtrlBase.html#wx.BookCtrlBase.AddPage "wx.BookCtrlBase.AddPage") method using empty label (which is unused by this class anyhow) and selecting the new page immediately.



Parameters
**page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Simplebook.html
        """



class SimpleHelpProvider(HelpProvider):
    """ SimpleHelpProvider is an implementation of HelpProvider which
supports only plain text help strings, and shows the string associated
with the control (if any) in a tooltip.




        Source: https://docs.wxpython.org/wx.SimpleHelpProvider.html
    """


class SingleChoiceDialog(Dialog):
    """ PySingleChoiceDialog(parent, message, caption, choices, style=CHOICEDLG\_STYLE, pos=DefaultPosition)


This class represents a dialog that shows a list of strings, and
allows the user to select one.


  


        Source: https://docs.wxpython.org/wx.SingleChoiceDialog.html
    """
    def __init__(self, parent, message, caption, choices, style=CHOICEDLG_STYLE, pos=DefaultPosition) -> None:
        """ 

`__init__`(*self*, *parent*, *message*, *caption*, *choices*, *style=CHOICEDLG\_STYLE*, *pos=DefaultPosition*)[¶](#wx.SingleChoiceDialog.__init__ "Permalink to this definition")
Constructor, taking an array of *String* choices and optional client data.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show on the dialog.
* **caption** (*string*) – The dialog caption.
* **choices** (*list of strings*) – An array of strings, or a string list, containing the choices.
* **style** (*long*) – A dialog style (bitlist) containing flags chosen from standard dialog styles and the ones listed in the class documentation. The default value is equivalent to `wx.DEFAULT_DIALOG_STYLE` | `wx.RESIZE_BORDER` | `wx.OK` | `wx.CANCEL` | `wx.CENTRE`.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position.






            Source: https://docs.wxpython.org/wx.SingleChoiceDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.SingleChoiceDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.SingleChoiceDialog.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.SingleChoiceDialog.GetSelection "Permalink to this definition")
Returns the index of selected item.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SingleChoiceDialog.html
        """

    def GetStringSelection(self) -> str:
        """ 

`GetStringSelection`(*self*)[¶](#wx.SingleChoiceDialog.GetStringSelection "Permalink to this definition")
Returns the selected string.



Return type
`string`






            Source: https://docs.wxpython.org/wx.SingleChoiceDialog.html
        """

    def SetSelection(self, selection: int) -> None:
        """ 

`SetSelection`(*self*, *selection*)[¶](#wx.SingleChoiceDialog.SetSelection "Permalink to this definition")
Sets the index of the initially selected item.



Parameters
**selection** (*int*) – 






            Source: https://docs.wxpython.org/wx.SingleChoiceDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.SingleChoiceDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning either `wx.ID_OK` or `wx.ID_CANCEL`.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SingleChoiceDialog.html
        """

    Selection: int  # `Selection`[¶](#wx.SingleChoiceDialog.Selection "Permalink to this definition")See [`GetSelection`](#wx.SingleChoiceDialog.GetSelection "wx.SingleChoiceDialog.GetSelection") and [`SetSelection`](#wx.SingleChoiceDialog.SetSelection "wx.SingleChoiceDialog.SetSelection")
    StringSelection: str  # `StringSelection`[¶](#wx.SingleChoiceDialog.StringSelection "Permalink to this definition")See [`GetStringSelection`](#wx.SingleChoiceDialog.GetStringSelection "wx.SingleChoiceDialog.GetStringSelection")



class SingleInstanceChecker:
    """ **Possible constructors**:



```
SingleInstanceChecker()

SingleInstanceChecker(name, path="")

```


SingleInstanceChecker class allows checking that only a single
instance of a program is running.


  


        Source: https://docs.wxpython.org/wx.SingleInstanceChecker.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SingleInstanceChecker.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


You may call [`Create`](#wx.SingleInstanceChecker.Create "wx.SingleInstanceChecker.Create") after using it or directly call [`IsAnotherRunning`](#wx.SingleInstanceChecker.IsAnotherRunning "wx.SingleInstanceChecker.IsAnotherRunning") in which case [`CreateDefault`](#wx.SingleInstanceChecker.CreateDefault "wx.SingleInstanceChecker.CreateDefault") will be implicitly used.




---

  



**\_\_init\_\_** *(self, name, path=””)*


Constructor calling [`Create`](#wx.SingleInstanceChecker.Create "wx.SingleInstanceChecker.Create") .


This constructor does exactly the same thing as [`Create`](#wx.SingleInstanceChecker.Create "wx.SingleInstanceChecker.Create") but doesn’t allow to check for errors.



Parameters
* **name** (*string*) –
* **path** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.SingleInstanceChecker.html
        """

    def Create(self, name, path="") -> bool:
        """ 

`Create`(*self*, *name*, *path=""*)[¶](#wx.SingleInstanceChecker.Create "Permalink to this definition")
Initialize the object if it had been created using the default constructor.


Note that you can’t call [`Create`](#wx.SingleInstanceChecker.Create "wx.SingleInstanceChecker.Create") more than once, so calling it if the non default constructor had been used is an error.



Parameters
* **name** (*string*) – Must be given and be as unique as possible. It is used as the mutex name under Win32 and the lock file name under Unix. `wx.App.GetAppName` and [`wx.GetUserId`](wx.functions.html#wx.GetUserId "wx.GetUserId") are commonly used to construct this parameter.
* **path** (*string*) – The path is optional and is ignored under Win32 and used as the directory to create the lock file in under Unix (default is [`wx.GetHomeDir`](wx.functions.html#wx.GetHomeDir "wx.GetHomeDir") ).



Return type
*bool*



Returns
Returns `False` if initialization failed, it doesn’t mean that another instance is running – [`IsAnotherRunning`](#wx.SingleInstanceChecker.IsAnotherRunning "wx.SingleInstanceChecker.IsAnotherRunning") to check for it.





Note


One of possible reasons while [`Create`](#wx.SingleInstanceChecker.Create "wx.SingleInstanceChecker.Create") may fail on Unix is that the lock file used for checking already exists but was not created by the user. Therefore applications shouldn’t treat failure of this function as fatal condition, because doing so would open them to the possibility of a Denial of Service attack. Instead, they should alert the user about the problem and offer to continue execution without checking if another instance is running.





            Source: https://docs.wxpython.org/wx.SingleInstanceChecker.html
        """

    def CreateDefault(self) -> bool:
        """ 

`CreateDefault`(*self*)[¶](#wx.SingleInstanceChecker.CreateDefault "Permalink to this definition")
Calls [`Create`](#wx.SingleInstanceChecker.Create "wx.SingleInstanceChecker.Create") with default name.


This method simply calls [`Create`](#wx.SingleInstanceChecker.Create "wx.SingleInstanceChecker.Create") with a string composed of `wx.App.GetAppName` and [`wx.GetUserId`](wx.functions.html#wx.GetUserId "wx.GetUserId") .


Because this method uses `wx.App.GetAppName` , it may only be called after the global application was constructed.



Return type
*bool*





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.SingleInstanceChecker.html
        """

    def IsAnotherRunning(self) -> bool:
        """ 

`IsAnotherRunning`(*self*)[¶](#wx.SingleInstanceChecker.IsAnotherRunning "Permalink to this definition")
Returns `True` if another copy of this program is already running and `False` otherwise.


Notice that if the object was created using the default constructor [`Create`](#wx.SingleInstanceChecker.Create "wx.SingleInstanceChecker.Create") hadn’t been called before this method, it will call [`CreateDefault`](#wx.SingleInstanceChecker.CreateDefault "wx.SingleInstanceChecker.CreateDefault") automatically.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SingleInstanceChecker.html
        """



class Size:
    """ **Possible constructors**:



```
Size()

Size(width, height)

```


A Size is a useful data structure for graphics operations.


  


        Source: https://docs.wxpython.org/wx.Size.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Size.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Initializes this size object with zero width and height.




---

  



**\_\_init\_\_** *(self, width, height)*


Initializes this size object with the given [`width`](#wx.Size.width "wx.Size.width") and [`height`](#wx.Size.height "wx.Size.height").



Parameters
* **width** (*int*) –
* **height** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.Size.html
        """

    def DecBy(self, *args, **kw) -> None:
        """ 

`DecBy`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Size.DecBy "Permalink to this definition")
Decreases the size in both x and y directions.



See also


[`IncBy`](#wx.Size.IncBy "wx.Size.IncBy")



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**DecBy** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  



**DecBy** *(self, size)*



Parameters
**size** ([*wx.Size*](#wx.Size "wx.Size")) – 






---

  



**DecBy** *(self, dx, dy)*



Parameters
* **dx** (*int*) –
* **dy** (*int*) –






---

  



**DecBy** *(self, d)*



Parameters
**d** (*int*) – 






---

  





            Source: https://docs.wxpython.org/wx.Size.html
        """

    def DecTo(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`DecTo`(*self*, *size*)[¶](#wx.Size.DecTo "Permalink to this definition")
Decrements this object so that both of its dimensions are not greater than the corresponding dimensions of the *size*.



Parameters
**size** ([*wx.Size*](#wx.Size "wx.Size")) – 





See also


[`IncTo`](#wx.Size.IncTo "wx.Size.IncTo")





            Source: https://docs.wxpython.org/wx.Size.html
        """

    def DecToIfSpecified(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`DecToIfSpecified`(*self*, *size*)[¶](#wx.Size.DecToIfSpecified "Permalink to this definition")
Decrements this object to be not bigger than the given size ignoring non-specified components.


This is similar to [`DecTo`](#wx.Size.DecTo "wx.Size.DecTo") but doesn’t do anything for x or y component if the same component of *size* is not specified, i.e. set to `wx.DefaultCoord` .



Parameters
**size** ([*wx.Size*](#wx.Size "wx.Size")) – 





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.Size.html
        """

    def Get(self) -> tuple:
        """ 

`Get`(*self*)[¶](#wx.Size.Get "Permalink to this definition")
Return the width and height properties as a tuple.



Return type
*tuple*



Returns
( [`width`](#wx.Size.width "wx.Size.width"), [`height`](#wx.Size.height "wx.Size.height") )






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def GetHeight(self) -> int:
        """ 

`GetHeight`(*self*)[¶](#wx.Size.GetHeight "Permalink to this definition")
Gets the height member.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def GetIM(self) -> None:
        """ 

`GetIM`(*self*)[¶](#wx.Size.GetIM "Permalink to this definition")
Returns an immutable representation of the `wx.Size` object, based on `namedtuple`.


This new object is hashable and can be used as a dictionary key,
be added to sets, etc. It can be converted back into a real `wx.Size`
with a simple statement like this: `obj = wx.Size(imObj)`.




            Source: https://docs.wxpython.org/wx.Size.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.Size.GetWidth "Permalink to this definition")
Gets the width member.



Return type
*int*






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def IncBy(self, *args, **kw) -> None:
        """ 

`IncBy`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Size.IncBy "Permalink to this definition")
Increases the size in both x and y directions.



See also


[`DecBy`](#wx.Size.DecBy "wx.Size.DecBy")



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**IncBy** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  



**IncBy** *(self, size)*



Parameters
**size** ([*wx.Size*](#wx.Size "wx.Size")) – 






---

  



**IncBy** *(self, dx, dy)*



Parameters
* **dx** (*int*) –
* **dy** (*int*) –






---

  



**IncBy** *(self, d)*



Parameters
**d** (*int*) – 






---

  





            Source: https://docs.wxpython.org/wx.Size.html
        """

    def IncTo(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`IncTo`(*self*, *size*)[¶](#wx.Size.IncTo "Permalink to this definition")
Increments this object so that both of its dimensions are not less than the corresponding dimensions of the *size*.



Parameters
**size** ([*wx.Size*](#wx.Size "wx.Size")) – 





See also


[`DecTo`](#wx.Size.DecTo "wx.Size.DecTo")





            Source: https://docs.wxpython.org/wx.Size.html
        """

    def IsFullySpecified(self) -> bool:
        """ 

`IsFullySpecified`(*self*)[¶](#wx.Size.IsFullySpecified "Permalink to this definition")
Returns `True` if neither of the size object components is equal to -1, which is used as default for the size values in wxWidgets (hence the predefined `wx.DefaultSize` has both of its components equal to -1).


This method is typically used before calling [`SetDefaults`](#wx.Size.SetDefaults "wx.Size.SetDefaults") .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def Scale(self, xscale, yscale) -> 'Size':
        """ 

`Scale`(*self*, *xscale*, *yscale*)[¶](#wx.Size.Scale "Permalink to this definition")
Scales the dimensions of this object by the given factors.


If you want to scale both dimensions by the same factor you can also use `operator*=` .



Parameters
* **xscale** (*float*) –
* **yscale** (*float*) –



Return type
 [wx.Size](#wx-size)



Returns
A reference to this object (so that you can concatenate other operations in the same line).






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def Set(self, width, height) -> None:
        """ 

`Set`(*self*, *width*, *height*)[¶](#wx.Size.Set "Permalink to this definition")
Sets the width and height members.



Parameters
* **width** (*int*) –
* **height** (*int*) –






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def SetDefaults(self, sizeDefault: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetDefaults`(*self*, *sizeDefault*)[¶](#wx.Size.SetDefaults "Permalink to this definition")
Combine this size object with another one replacing the default (i.e. equal to -1) components of this object with those of the other.


It is typically used like this:



```
if not size.IsFullySpecified():

    size.SetDefaults(GetDefaultSize())

```



Parameters
**sizeDefault** ([*wx.Size*](#wx.Size "wx.Size")) – 





See also


[`IsFullySpecified`](#wx.Size.IsFullySpecified "wx.Size.IsFullySpecified")





            Source: https://docs.wxpython.org/wx.Size.html
        """

    def SetHeight(self, height: int) -> None:
        """ 

`SetHeight`(*self*, *height*)[¶](#wx.Size.SetHeight "Permalink to this definition")
Sets the height.



Parameters
**height** (*int*) – 






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def SetWidth(self, width: int) -> None:
        """ 

`SetWidth`(*self*, *width*)[¶](#wx.Size.SetWidth "Permalink to this definition")
Sets the width.



Parameters
**width** (*int*) – 






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __bool__(self) -> None:
        """ 

`__bool__`(*self*)[¶](#wx.Size.__bool__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*, *other*)[¶](#wx.Size.__eq__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __getitem__(self, idx) -> None:
        """ 

`__getitem__`(*self*, *idx*)[¶](#wx.Size.__getitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __len__(self) -> None:
        """ 

`__len__`(*self*)[¶](#wx.Size.__len__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*, *other*)[¶](#wx.Size.__ne__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __nonzero__(self) -> None:
        """ 

`__nonzero__`(*self*)[¶](#wx.Size.__nonzero__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __reduce__(self) -> None:
        """ 

`__reduce__`(*self*)[¶](#wx.Size.__reduce__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.Size.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __setitem__(self, idx, val) -> None:
        """ 

`__setitem__`(*self*, *idx*, *val*)[¶](#wx.Size.__setitem__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __str__(self) -> None:
        """ 

`__str__`(*self*)[¶](#wx.Size.__str__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __imul__(self) -> None:
        """ 

`__imul__`(*self*)[¶](#wx.Size.__imul__ "Permalink to this definition")

Parameters
**factor** (*int*) – 






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __iadd__(self) -> None:
        """ 

`__iadd__`(*self*)[¶](#wx.Size.__iadd__ "Permalink to this definition")

Parameters
**sz** ([*wx.Size*](#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __isub__(self) -> None:
        """ 

`__isub__`(*self*)[¶](#wx.Size.__isub__ "Permalink to this definition")

Parameters
**sz** ([*wx.Size*](#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.Size.html
        """

    def __idiv__(self) -> None:
        """ 

`__idiv__`(*self*)[¶](#wx.Size.__idiv__ "Permalink to this definition")

Parameters
**factor** (*int*) – 






            Source: https://docs.wxpython.org/wx.Size.html
        """

    Height: int  # `Height`[¶](#wx.Size.Height "Permalink to this definition")See [`GetHeight`](#wx.Size.GetHeight "wx.Size.GetHeight") and [`SetHeight`](#wx.Size.SetHeight "wx.Size.SetHeight")
    Width: int  # `Width`[¶](#wx.Size.Width "Permalink to this definition")See [`GetWidth`](#wx.Size.GetWidth "wx.Size.GetWidth") and [`SetWidth`](#wx.Size.SetWidth "wx.Size.SetWidth")
    height: Any  # `height`[¶](#wx.Size.height "Permalink to this definition")See [`GetHeight`](#wx.Size.GetHeight "wx.Size.GetHeight") and [`SetHeight`](#wx.Size.SetHeight "wx.Size.SetHeight")
    width: Any  # `width`[¶](#wx.Size.width "Permalink to this definition")See [`GetWidth`](#wx.Size.GetWidth "wx.Size.GetWidth") and [`SetWidth`](#wx.Size.SetWidth "wx.Size.SetWidth")
    x: Any  # `x`[¶](#wx.Size.x "Permalink to this definition")See [`GetWidth`](#wx.Size.GetWidth "wx.Size.GetWidth") and [`SetWidth`](#wx.Size.SetWidth "wx.Size.SetWidth")
    y: Any  # `y`[¶](#wx.Size.y "Permalink to this definition")See [`GetHeight`](#wx.Size.GetHeight "wx.Size.GetHeight") and [`SetHeight`](#wx.Size.SetHeight "wx.Size.SetHeight")



class SizeEvent(Event):
    """ **Possible constructors**:



```
SizeEvent(sz, id=0)

```


A size event holds information about size change events of Window.


  


        Source: https://docs.wxpython.org/wx.SizeEvent.html
    """
    def __init__(self, sz, id=0) -> None:
        """ 

`__init__`(*self*, *sz*, *id=0*)[¶](#wx.SizeEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **sz** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.SizeEvent.html
        """

    def GetRect(self) -> 'Rect':
        """ 

`GetRect`(*self*)[¶](#wx.SizeEvent.GetRect "Permalink to this definition")

Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.SizeEvent.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.SizeEvent.GetSize "Permalink to this definition")
Returns the entire size of the window generating the size change event.


This is the new total size of the window, i.e. the same size as would be returned by [`wx.Window.GetSize`](wx.Window.html#wx.Window.GetSize "wx.Window.GetSize") if it were called now. Use [`wx.Window.GetClientSize`](wx.Window.html#wx.Window.GetClientSize "wx.Window.GetClientSize") if you catch this event in a top level window such as  [wx.Frame](wx.Frame.html#wx-frame) to find the size available for the window contents.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.SizeEvent.html
        """

    def SetRect(self, rect: 'Rect') -> None:
        """ 

`SetRect`(*self*, *rect*)[¶](#wx.SizeEvent.SetRect "Permalink to this definition")

Parameters
**rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – 






            Source: https://docs.wxpython.org/wx.SizeEvent.html
        """

    def SetSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetSize`(*self*, *size*)[¶](#wx.SizeEvent.SetSize "Permalink to this definition")

Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.SizeEvent.html
        """

    Rect: '_Rect'  # `Rect`[¶](#wx.SizeEvent.Rect "Permalink to this definition")See [`GetRect`](#wx.SizeEvent.GetRect "wx.SizeEvent.GetRect") and [`SetRect`](#wx.SizeEvent.SetRect "wx.SizeEvent.SetRect")
    Size: '_Size'  # `Size`[¶](#wx.SizeEvent.Size "Permalink to this definition")See [`GetSize`](#wx.SizeEvent.GetSize "wx.SizeEvent.GetSize") and [`SetSize`](#wx.SizeEvent.SetSize "wx.SizeEvent.SetSize")



class SizerFlags:
    """ **Possible constructors**:



```
SizerFlags(proportion=0)

```


Container for sizer items flags providing readable names for them.


  


        Source: https://docs.wxpython.org/wx.SizerFlags.html
    """
    def __init__(self, proportion: int=0) -> None:
        """ 

`__init__`(*self*, *proportion=0*)[¶](#wx.SizerFlags.__init__ "Permalink to this definition")
Creates the  [wx.Sizer](wx.Sizer.html#wx-sizer) with the proportion specified by *proportion*.



Parameters
**proportion** (*int*) – 






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Align(self, alignment: int) -> 'SizerFlags':
        """ 

`Align`(*self*, *alignment*)[¶](#wx.SizerFlags.Align "Permalink to this definition")
Sets the alignment of this  [wx.SizerFlags](#wx-sizerflags) to *align*.


This method replaces the previously set alignment with the specified one.



Parameters
**alignment** (*int*) – Combination of `ALIGN_XXX` bit masks.



Return type
 [wx.SizerFlags](#wx-sizerflags)





See also


`wx.Top` , `wx.Left` , `wx.Right` , `wx.Bottom` , `wx.Centre`





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Border(self, *args, **kw) -> 'SizerFlags':
        """ 

`Border`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SizerFlags.Border "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Border** *(self, direction, borderinpixels)*


Sets the  [wx.SizerFlags](#wx-sizerflags) to have a border of a number of pixels specified by *borderinpixels* with the directions specified by *direction*.


Prefer to use the overload below or [`DoubleBorder`](#wx.SizerFlags.DoubleBorder "wx.SizerFlags.DoubleBorder") or [`TripleBorder`](#wx.SizerFlags.TripleBorder "wx.SizerFlags.TripleBorder") versions instead of hard-coding the border value in pixels to avoid too small borders on devices with high `DPI` displays.



Parameters
* **direction** (*int*) –
* **borderinpixels** (*int*) –



Return type
 [wx.SizerFlags](#wx-sizerflags)






---

  



**Border** *(self, direction=ALL)*


Sets the  [wx.SizerFlags](#wx-sizerflags) to have a border with size as returned by [`GetDefaultBorder`](#wx.SizerFlags.GetDefaultBorder "wx.SizerFlags.GetDefaultBorder") .



Parameters
**direction** (*int*) – Direction(s) to apply the border in.



Return type
 [wx.SizerFlags](#wx-sizerflags)






---

  





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Bottom(self) -> 'SizerFlags':
        """ 

`Bottom`(*self*)[¶](#wx.SizerFlags.Bottom "Permalink to this definition")
Aligns the object to the bottom, similar for `Align(wxALIGN_BOTTOM)` .


Unlike [`Align`](#wx.SizerFlags.Align "wx.SizerFlags.Align") , this method doesn’t change the horizontal alignment of the item.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Center(self) -> 'SizerFlags':
        """ 

`Center`(*self*)[¶](#wx.SizerFlags.Center "Permalink to this definition")
Sets the object of the  [wx.SizerFlags](#wx-sizerflags) to center itself in the area it is given.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def CenterHorizontal(self) -> 'SizerFlags':
        """ 

`CenterHorizontal`(*self*)[¶](#wx.SizerFlags.CenterHorizontal "Permalink to this definition")
Same as [`CentreHorizontal`](#wx.SizerFlags.CentreHorizontal "wx.SizerFlags.CentreHorizontal") .



Return type
 [wx.SizerFlags](#wx-sizerflags)





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def CenterVertical(self) -> 'SizerFlags':
        """ 

`CenterVertical`(*self*)[¶](#wx.SizerFlags.CenterVertical "Permalink to this definition")
Same as [`CentreVertical`](#wx.SizerFlags.CentreVertical "wx.SizerFlags.CentreVertical") .



Return type
 [wx.SizerFlags](#wx-sizerflags)





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Centre(self) -> 'SizerFlags':
        """ 

`Centre`(*self*)[¶](#wx.SizerFlags.Centre "Permalink to this definition")
`wx.Center` for people with the other dialect of English.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def CentreHorizontal(self) -> 'SizerFlags':
        """ 

`CentreHorizontal`(*self*)[¶](#wx.SizerFlags.CentreHorizontal "Permalink to this definition")
Center an item only in horizontal direction.


This is mostly useful for `2D` sizers as for the `1D` ones it is shorter to just use `wx.Centre` as the alignment is only used in one direction with them anyhow. For `2D` sizers, centering an item in one direction is quite different from centering it in both directions however.


Note that, unlike [`Align`](#wx.SizerFlags.Align "wx.SizerFlags.Align") , this method doesn’t change the vertical alignment.



Return type
 [wx.SizerFlags](#wx-sizerflags)





New in version 4.1/wxWidgets-3.1.0.




See also


[`CentreVertical`](#wx.SizerFlags.CentreVertical "wx.SizerFlags.CentreVertical")





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def CentreVertical(self) -> 'SizerFlags':
        """ 

`CentreVertical`(*self*)[¶](#wx.SizerFlags.CentreVertical "Permalink to this definition")
Center an item only in vertical direction.


The remarks in [`CentreHorizontal`](#wx.SizerFlags.CentreHorizontal "wx.SizerFlags.CentreHorizontal") documentation also apply to this function.


Note that, unlike [`Align`](#wx.SizerFlags.Align "wx.SizerFlags.Align") , this method doesn’t change the horizontal alignment.



Return type
 [wx.SizerFlags](#wx-sizerflags)





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    @staticmethod
    def DisableConsistencyChecks() -> None:
        """ 

*static* `DisableConsistencyChecks`()[¶](#wx.SizerFlags.DisableConsistencyChecks "Permalink to this definition")
Globally disable checks for sizer flag consistency in debug builds.


By default, sizer classes such as  [wx.BoxSizer](wx.BoxSizer.html#wx-boxsizer) and  [wx.FlexGridSizer](wx.FlexGridSizer.html#wx-flexgridsizer) assert when passed invalid flags, even though doing this usually doesn’t result in any catastrophic consequences and the invalid flags are simply ignored later. Due to this, and the fact that these checks were only added in wxWidgets 3.1, existing code may run into multiple asserts warning about incorrect sizer flags use. Using this function provides a temporary solution for avoiding such asserts when upgrading to wxWidgets 3.1 from a previous version and will prevent such checks from being done.


Please do note that correcting the code by removing the invalid flags remains a much better solution as these asserts may be very helpful to understand why some code using sizer flags doesn’t work as expected, so using this function, especially permanently, rather than a temporary workaround, is *not* recommended.


Notice that the same effect as calling this function can be achieved by setting the environment variable `WXSUPPRESS_SIZER_FLAGS_CHECK` to any value.



New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def DoubleBorder(self, direction: int=ALL) -> 'SizerFlags':
        """ 

`DoubleBorder`(*self*, *direction=ALL*)[¶](#wx.SizerFlags.DoubleBorder "Permalink to this definition")
Sets the border in the given *direction* having twice the default border size.



Parameters
**direction** (*int*) – 



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def DoubleHorzBorder(self) -> 'SizerFlags':
        """ 

`DoubleHorzBorder`(*self*)[¶](#wx.SizerFlags.DoubleHorzBorder "Permalink to this definition")
Sets the border in left and right directions having twice the default border size.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Expand(self) -> 'SizerFlags':
        """ 

`Expand`(*self*)[¶](#wx.SizerFlags.Expand "Permalink to this definition")
Sets the object of the  [wx.SizerFlags](#wx-sizerflags) to expand to fill as much area as it can.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def FixedMinSize(self) -> 'SizerFlags':
        """ 

`FixedMinSize`(*self*)[¶](#wx.SizerFlags.FixedMinSize "Permalink to this definition")
Set the `FIXED_MINSIZE` flag which indicates that the initial size of the window should be also set as its minimal size.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    @staticmethod
    def GetDefaultBorder() -> int:
        """ 

*static* `GetDefaultBorder`()[¶](#wx.SizerFlags.GetDefaultBorder "Permalink to this definition")
Returns the border used by default in  [wx.Border](wx.Border.enumeration.html#wx-border) method.


This value is scaled appropriately for the current `DPI` on the systems where physical pixel values are used for the control positions and sizes, i.e. not with wxGTK or wxOSX.



Return type
*int*





See also


[`GetDefaultBorderFractional`](#wx.SizerFlags.GetDefaultBorderFractional "wx.SizerFlags.GetDefaultBorderFractional")





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    @staticmethod
    def GetDefaultBorderFractional() -> float:
        """ 

*static* `GetDefaultBorderFractional`()[¶](#wx.SizerFlags.GetDefaultBorderFractional "Permalink to this definition")
Returns the border used by default, with fractional precision.


For example when the border is scaled to a non-integer `DPI`.



Return type
*float*





New in version 4.1/wxWidgets-3.1.4.




See also


[`GetDefaultBorder`](#wx.SizerFlags.GetDefaultBorder "wx.SizerFlags.GetDefaultBorder")





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Left(self) -> 'SizerFlags':
        """ 

`Left`(*self*)[¶](#wx.SizerFlags.Left "Permalink to this definition")
Aligns the object to the left, similar for `Align(wxALIGN_LEFT)` .


Unlike [`Align`](#wx.SizerFlags.Align "wx.SizerFlags.Align") , this method doesn’t change the vertical alignment of the item.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Proportion(self, proportion: int) -> 'SizerFlags':
        """ 

`Proportion`(*self*, *proportion*)[¶](#wx.SizerFlags.Proportion "Permalink to this definition")
Sets the proportion of this  [wx.SizerFlags](#wx-sizerflags) to *proportion*.



Parameters
**proportion** (*int*) – 



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def ReserveSpaceEvenIfHidden(self) -> 'SizerFlags':
        """ 

`ReserveSpaceEvenIfHidden`(*self*)[¶](#wx.SizerFlags.ReserveSpaceEvenIfHidden "Permalink to this definition")
Set the `RESERVE_SPACE_EVEN_IF_HIDDEN` flag.


Normally Sizers don’t allocate space for hidden windows or other items. This flag overrides this behaviour so that sufficient space is allocated for the window even if it isn’t visible. This makes it possible to dynamically show and hide controls without resizing parent dialog, for example.



Return type
 [wx.SizerFlags](#wx-sizerflags)





New in version 2.8.8.





            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Right(self) -> 'SizerFlags':
        """ 

`Right`(*self*)[¶](#wx.SizerFlags.Right "Permalink to this definition")
Aligns the object to the right, similar for `Align(wxALIGN_RIGHT)` .


Unlike [`Align`](#wx.SizerFlags.Align "wx.SizerFlags.Align") , this method doesn’t change the vertical alignment of the item.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Shaped(self) -> 'SizerFlags':
        """ 

`Shaped`(*self*)[¶](#wx.SizerFlags.Shaped "Permalink to this definition")
Set the `_SHAPED` flag which indicates that the elements should always keep the fixed width to height ratio equal to its original value.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def Top(self) -> 'SizerFlags':
        """ 

`Top`(*self*)[¶](#wx.SizerFlags.Top "Permalink to this definition")
Aligns the object to the top, similar for `Align(wxALIGN_TOP)` .


Unlike [`Align`](#wx.SizerFlags.Align "wx.SizerFlags.Align") , this method doesn’t change the horizontal alignment of the item.



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """

    def TripleBorder(self, direction: int=ALL) -> 'SizerFlags':
        """ 

`TripleBorder`(*self*, *direction=ALL*)[¶](#wx.SizerFlags.TripleBorder "Permalink to this definition")
Sets the border in the given *direction* having thrice the default border size.



Parameters
**direction** (*int*) – 



Return type
 [wx.SizerFlags](#wx-sizerflags)






            Source: https://docs.wxpython.org/wx.SizerFlags.html
        """



class SizerItem(Object):
    """ **Possible constructors**:



```
SizerItem(window, flags)

SizerItem(window, proportion=0, flag=0, border=0, userData=None)

SizerItem(sizer, flags)

SizerItem(sizer, proportion=0, flag=0, border=0, userData=None)

SizerItem(width, height, proportion=0, flag=0, border=0, userData=None)

```


The SizerItem class is used to track the position, size and other
attributes of each item managed by a Sizer.


  


        Source: https://docs.wxpython.org/wx.SizerItem.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SizerItem.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, window, flags)*


Construct a sizer item for tracking a window.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) –






---

  



**\_\_init\_\_** *(self, window, proportion=0, flag=0, border=0, userData=None)*


Construct a sizer item for tracking a window.



Parameters
* **window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –






---

  



**\_\_init\_\_** *(self, sizer, flags)*


Construct a sizer item for tracking a subsizer.



Parameters
* **sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) –
* **flags** ([*wx.SizerFlags*](wx.SizerFlags.html#wx.SizerFlags "wx.SizerFlags")) –






---

  



**\_\_init\_\_** *(self, sizer, proportion=0, flag=0, border=0, userData=None)*


Construct a sizer item for tracking a subsizer.



Parameters
* **sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –






---

  



**\_\_init\_\_** *(self, width, height, proportion=0, flag=0, border=0, userData=None)*


Construct a sizer item for tracking a spacer.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **proportion** (*int*) –
* **flag** (*int*) –
* **border** (*int*) –
* **userData** (*PyUserData*) –






---

  





            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def AssignSizer(self, sizer: 'Sizer') -> None:
        """ 

`AssignSizer`(*self*, *sizer*)[¶](#wx.SizerItem.AssignSizer "Permalink to this definition")
Set the sizer tracked by this item.


Old sizer, if any, is deleted.



Parameters
**sizer** ([*wx.Sizer*](wx.Sizer.html#wx.Sizer "wx.Sizer")) – 






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def AssignSpacer(self, *args, **kw) -> None:
        """ 

`AssignSpacer`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SizerItem.AssignSpacer "Permalink to this definition")
Set the size of the spacer tracked by this item.


Old spacer, if any, is deleted.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AssignSpacer** *(self, size)*



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**AssignSpacer** *(self, w, h)*



Parameters
* **w** (*int*) –
* **h** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def AssignWindow(self, window: 'Window') -> None:
        """ 

`AssignWindow`(*self*, *window*)[¶](#wx.SizerItem.AssignWindow "Permalink to this definition")
Set the window to be tracked by this item.


If the sizer item previously contained a window, it is dissociated from the sizer containing this sizer item (if any), but this object doesn’t have the pointer to the containing sizer and so it’s the caller’s responsibility to call [`wx.Window.SetContainingSizer`](wx.Window.html#wx.Window.SetContainingSizer "wx.Window.SetContainingSizer") on *window*. Failure to do this can result in memory corruption when the window is destroyed later, so it is crucial to not forget to do it.


Also note that the previously contained window is *not* deleted, so it’s also the callers responsibility to do it, if necessary.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 





Note


This is a low-level method which is dangerous if used incorrectly, avoid using it if possible, i.e. if higher level methods such as [`wx.Sizer.Replace`](wx.Sizer.html#wx.Sizer.Replace "wx.Sizer.Replace") can be used instead.





            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.SizerItem.CalcMin "Permalink to this definition")
Calculates the minimum desired size for the item, including any space needed by borders.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def DeleteWindows(self) -> None:
        """ 

`DeleteWindows`(*self*)[¶](#wx.SizerItem.DeleteWindows "Permalink to this definition")
Destroy the window or the windows in a subsizer, depending on the type of item.




            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def DetachSizer(self) -> None:
        """ 

`DetachSizer`(*self*)[¶](#wx.SizerItem.DetachSizer "Permalink to this definition")
Enable deleting the SizerItem without destroying the contained sizer.




            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetBorder(self) -> int:
        """ 

`GetBorder`(*self*)[¶](#wx.SizerItem.GetBorder "Permalink to this definition")
Return the border attribute.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetFlag(self) -> int:
        """ 

`GetFlag`(*self*)[¶](#wx.SizerItem.GetFlag "Permalink to this definition")
Return the flags attribute.


See [Sizer flags list](wx.Sizer.html#wx-sizer) for details.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetId(self) -> int:
        """ 

`GetId`(*self*)[¶](#wx.SizerItem.GetId "Permalink to this definition")
Return the numeric id of  [wx.SizerItem](#wx-sizeritem), or `ID_NONE` if the id has not been set.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetMinSize(self) -> 'Size':
        """ 

`GetMinSize`(*self*)[¶](#wx.SizerItem.GetMinSize "Permalink to this definition")
Get the minimum size needed for the item.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetPosition(self) -> 'Point':
        """ 

`GetPosition`(*self*)[¶](#wx.SizerItem.GetPosition "Permalink to this definition")
What is the current position of the item, as set in the last Layout.



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetProportion(self) -> int:
        """ 

`GetProportion`(*self*)[¶](#wx.SizerItem.GetProportion "Permalink to this definition")
Get the proportion item attribute.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetRatio(self) -> float:
        """ 

`GetRatio`(*self*)[¶](#wx.SizerItem.GetRatio "Permalink to this definition")
Get the ratio item attribute.



Return type
*float*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetRect(self) -> 'Rect':
        """ 

`GetRect`(*self*)[¶](#wx.SizerItem.GetRect "Permalink to this definition")
Get the rectangle of the item on the parent window, excluding borders.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetSize(self) -> 'Size':
        """ 

`GetSize`(*self*)[¶](#wx.SizerItem.GetSize "Permalink to this definition")
Get the current size of the item, as set in the last Layout.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetSizer(self) -> 'Sizer':
        """ 

`GetSizer`(*self*)[¶](#wx.SizerItem.GetSizer "Permalink to this definition")
If this item is tracking a sizer, return it.


`None` otherwise.



Return type
 [wx.Sizer](wx.Sizer.html#wx-sizer)






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetSpacer(self) -> 'Size':
        """ 

`GetSpacer`(*self*)[¶](#wx.SizerItem.GetSpacer "Permalink to this definition")
If this item is tracking a spacer, return its size.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetUserData(self) -> 'PyUserData':
        """ 

`GetUserData`(*self*)[¶](#wx.SizerItem.GetUserData "Permalink to this definition")
Get the userData item attribute.



Return type
*PyUserData*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.SizerItem.GetWindow "Permalink to this definition")
If this item is tracking a window then return it.


`None` otherwise.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def IsShown(self) -> bool:
        """ 

`IsShown`(*self*)[¶](#wx.SizerItem.IsShown "Permalink to this definition")
Returns `True` if this item is a window or a spacer and it is shown or if this item is a sizer and not all of its elements are hidden.


In other words, for sizer items, all of the child elements must be hidden for the sizer itself to be considered hidden.


As an exception, if the `RESERVE_SPACE_EVEN_IF_HIDDEN` flag was used for this sizer item, then [`IsShown`](#wx.SizerItem.IsShown "wx.SizerItem.IsShown") always returns `True` for it (see [`wx.SizerFlags.ReserveSpaceEvenIfHidden`](wx.SizerFlags.html#wx.SizerFlags.ReserveSpaceEvenIfHidden "wx.SizerFlags.ReserveSpaceEvenIfHidden") ).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def IsSizer(self) -> bool:
        """ 

`IsSizer`(*self*)[¶](#wx.SizerItem.IsSizer "Permalink to this definition")
Is this item a sizer?



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def IsSpacer(self) -> bool:
        """ 

`IsSpacer`(*self*)[¶](#wx.SizerItem.IsSpacer "Permalink to this definition")
Is this item a spacer?



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def IsWindow(self) -> bool:
        """ 

`IsWindow`(*self*)[¶](#wx.SizerItem.IsWindow "Permalink to this definition")
Is this item a window?



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetBorder(self, border: int) -> None:
        """ 

`SetBorder`(*self*, *border*)[¶](#wx.SizerItem.SetBorder "Permalink to this definition")
Set the border item attribute.



Parameters
**border** (*int*) – 






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetDimension(self, pos, size) -> None:
        """ 

`SetDimension`(*self*, *pos*, *size*)[¶](#wx.SizerItem.SetDimension "Permalink to this definition")
Set the position and size of the space allocated to the sizer, and adjust the position and size of the item to be within that space taking alignment and borders into account.



Parameters
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetFlag(self, flag: int) -> None:
        """ 

`SetFlag`(*self*, *flag*)[¶](#wx.SizerItem.SetFlag "Permalink to this definition")
Set the flag item attribute.



Parameters
**flag** (*int*) – 






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetId(self, id: int) -> None:
        """ 

`SetId`(*self*, *id*)[¶](#wx.SizerItem.SetId "Permalink to this definition")
Sets the numeric id of the  [wx.SizerItem](#wx-sizeritem) to *id*.



Parameters
**id** (*int*) – 






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetInitSize(self, x, y) -> None:
        """ 

`SetInitSize`(*self*, *x*, *y*)[¶](#wx.SizerItem.SetInitSize "Permalink to this definition")
Sets the minimum size to be allocated for this item.


This is identical to [`SetMinSize`](#wx.SizerItem.SetMinSize "wx.SizerItem.SetMinSize") , prefer to use the other function, as its name is more clear.



Parameters
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetMinSize(self, *args, **kw) -> None:
        """ 

`SetMinSize`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SizerItem.SetMinSize "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetMinSize** *(self, size)*


Sets the minimum size to be allocated for this item.


If this item is a window, the *size* is also passed to [`wx.Window.SetMinSize`](wx.Window.html#wx.Window.SetMinSize "wx.Window.SetMinSize") .



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**SetMinSize** *(self, x, y)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
* **x** (*int*) –
* **y** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetProportion(self, proportion: int) -> None:
        """ 

`SetProportion`(*self*, *proportion*)[¶](#wx.SizerItem.SetProportion "Permalink to this definition")
Set the proportion item attribute.



Parameters
**proportion** (*int*) – 






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetRatio(self, *args, **kw) -> None:
        """ 

`SetRatio`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SizerItem.SetRatio "Permalink to this definition")
Set the ratio item attribute.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetRatio** *(self, width, height)*



Parameters
* **width** (*int*) –
* **height** (*int*) –






---

  



**SetRatio** *(self, size)*



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






---

  



**SetRatio** *(self, ratio)*



Parameters
**ratio** (*float*) – 






---

  





            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def SetUserData(self, userData: PyUserData) -> None:
        """ 

`SetUserData`(*self*, *userData*)[¶](#wx.SizerItem.SetUserData "Permalink to this definition")

Parameters
**userData** (*PyUserData*) – 






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    def Show(self, show: bool) -> None:
        """ 

`Show`(*self*, *show*)[¶](#wx.SizerItem.Show "Permalink to this definition")
Set the show item attribute, which sizers use to determine if the item is to be made part of the layout or not.


If the item is tracking a window then it is shown or hidden as needed.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.SizerItem.html
        """

    Border: int  # `Border`[¶](#wx.SizerItem.Border "Permalink to this definition")See [`GetBorder`](#wx.SizerItem.GetBorder "wx.SizerItem.GetBorder") and [`SetBorder`](#wx.SizerItem.SetBorder "wx.SizerItem.SetBorder")
    Flag: int  # `Flag`[¶](#wx.SizerItem.Flag "Permalink to this definition")See [`GetFlag`](#wx.SizerItem.GetFlag "wx.SizerItem.GetFlag") and [`SetFlag`](#wx.SizerItem.SetFlag "wx.SizerItem.SetFlag")
    Id: int  # `Id`[¶](#wx.SizerItem.Id "Permalink to this definition")See [`GetId`](#wx.SizerItem.GetId "wx.SizerItem.GetId") and [`SetId`](#wx.SizerItem.SetId "wx.SizerItem.SetId")
    MinSize: 'Size'  # `MinSize`[¶](#wx.SizerItem.MinSize "Permalink to this definition")See [`GetMinSize`](#wx.SizerItem.GetMinSize "wx.SizerItem.GetMinSize") and [`SetMinSize`](#wx.SizerItem.SetMinSize "wx.SizerItem.SetMinSize")
    Position: 'Point'  # `Position`[¶](#wx.SizerItem.Position "Permalink to this definition")See [`GetPosition`](#wx.SizerItem.GetPosition "wx.SizerItem.GetPosition")
    Proportion: int  # `Proportion`[¶](#wx.SizerItem.Proportion "Permalink to this definition")See [`GetProportion`](#wx.SizerItem.GetProportion "wx.SizerItem.GetProportion") and [`SetProportion`](#wx.SizerItem.SetProportion "wx.SizerItem.SetProportion")
    Ratio: float  # `Ratio`[¶](#wx.SizerItem.Ratio "Permalink to this definition")See [`GetRatio`](#wx.SizerItem.GetRatio "wx.SizerItem.GetRatio") and [`SetRatio`](#wx.SizerItem.SetRatio "wx.SizerItem.SetRatio")
    Rect: '_Rect'  # `Rect`[¶](#wx.SizerItem.Rect "Permalink to this definition")See [`GetRect`](#wx.SizerItem.GetRect "wx.SizerItem.GetRect")
    Size: '_Size'  # `Size`[¶](#wx.SizerItem.Size "Permalink to this definition")See [`GetSize`](#wx.SizerItem.GetSize "wx.SizerItem.GetSize")
    Sizer: '_Sizer'  # `Sizer`[¶](#wx.SizerItem.Sizer "Permalink to this definition")See [`GetSizer`](#wx.SizerItem.GetSizer "wx.SizerItem.GetSizer")
    Spacer: 'Size'  # `Spacer`[¶](#wx.SizerItem.Spacer "Permalink to this definition")See [`GetSpacer`](#wx.SizerItem.GetSpacer "wx.SizerItem.GetSpacer")
    UserData: 'PyUserData'  # `UserData`[¶](#wx.SizerItem.UserData "Permalink to this definition")See [`GetUserData`](#wx.SizerItem.GetUserData "wx.SizerItem.GetUserData") and [`SetUserData`](#wx.SizerItem.SetUserData "wx.SizerItem.SetUserData")
    Window: '_Window'  # `Window`[¶](#wx.SizerItem.Window "Permalink to this definition")See [`GetWindow`](#wx.SizerItem.GetWindow "wx.SizerItem.GetWindow")



class SpinButton(Control):
    """ **Possible constructors**:



```
SpinButton()

SpinButton(parent, id=-1, pos=DefaultPosition, size=DefaultSize,
           style=SP_VERTICAL, name="spinButton")

```


A SpinButton has two small up and down (or left and right) arrow
buttons.


  


        Source: https://docs.wxpython.org/wx.SpinButton.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SpinButton.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=SP\_VERTICAL, name=”spinButton”)*


Constructor, creating and showing a spin button.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then a default size is chosen.
* **style** (*long*) – Window style. See  [wx.SpinButton](#wx-spinbutton) class description.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.SpinButton.Create "wx.SpinButton.Create")





---

  





            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def Create(self, parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=SP_VERTICAL, name="wxSpinButton") -> bool:
        """ 

`Create`(*self*, *parent*, *id=-1*, *pos=DefaultPosition*, *size=DefaultSize*, *style=SP\_VERTICAL*, *name="wxSpinButton"*)[¶](#wx.SpinButton.Create "Permalink to this definition")
Scrollbar creation function called by the spin button constructor.


See  [wx.SpinButton](#wx-spinbutton) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.SpinButton.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def GetIncrement(self) -> int:
        """ 

`GetIncrement`(*self*)[¶](#wx.SpinButton.GetIncrement "Permalink to this definition")
Get the value for increment for a spin control.


The default value is 1 but it can be changed using [`SetIncrement`](#wx.SpinButton.SetIncrement "wx.SpinButton.SetIncrement") .



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def GetMax(self) -> int:
        """ 

`GetMax`(*self*)[¶](#wx.SpinButton.GetMax "Permalink to this definition")
Returns the maximum permissible value.



Return type
*int*





See also


[`SetRange`](#wx.SpinButton.SetRange "wx.SpinButton.SetRange")





            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def GetMin(self) -> int:
        """ 

`GetMin`(*self*)[¶](#wx.SpinButton.GetMin "Permalink to this definition")
Returns the minimum permissible value.



Return type
*int*





See also


[`SetRange`](#wx.SpinButton.SetRange "wx.SpinButton.SetRange")





            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def GetRange(self) -> None:
        """ 

`GetRange`(*self*)[¶](#wx.SpinButton.GetRange "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.SpinButton.GetValue "Permalink to this definition")
Returns the current spin button value.



Return type
*int*





See also


[`SetValue`](#wx.SpinButton.SetValue "wx.SpinButton.SetValue")





            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def SetIncrement(self, value: int) -> None:
        """ 

`SetIncrement`(*self*, *value*)[¶](#wx.SpinButton.SetIncrement "Permalink to this definition")
Sets the increment for the control.


The increment is the number by which the value changes when the up or down arrow is used.


The default is 1.


This function is currently implemented only in wxMSW and does nothing under the other platforms.



Parameters
**value** (*int*) – 





New in version 4.1/wxWidgets-3.1.6.




See also


[`wx.SpinCtrl.SetIncrement`](wx.SpinCtrl.html#wx.SpinCtrl.SetIncrement "wx.SpinCtrl.SetIncrement")





            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def SetMax(self, maxVal) -> None:
        """ 

`SetMax`(*self*, *maxVal*)[¶](#wx.SpinButton.SetMax "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def SetMin(self, minVal) -> None:
        """ 

`SetMin`(*self*, *minVal*)[¶](#wx.SpinButton.SetMin "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def SetRange(self, min, max) -> None:
        """ 

`SetRange`(*self*, *min*, *max*)[¶](#wx.SpinButton.SetRange "Permalink to this definition")
Sets the range of the spin button.


In portable code, *min* should be less than or equal to *max*. In wxMSW it is possible to specify minimum greater than maximum and the native control supports the same range as if they were reversed, but swaps the meaning of up and down arrows, however this dubious feature is not supported on other platforms.



Parameters
* **min** (*int*) – The minimum value for the spin button.
* **max** (*int*) – The maximum value for the spin button.





See also


[`GetMin`](#wx.SpinButton.GetMin "wx.SpinButton.GetMin") , [`GetMax`](#wx.SpinButton.GetMax "wx.SpinButton.GetMax")





            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    def SetValue(self, value: int) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.SpinButton.SetValue "Permalink to this definition")
Sets the value of the spin button.



Parameters
**value** (*int*) – The value for the spin button.






            Source: https://docs.wxpython.org/wx.SpinButton.html
        """

    Increment: int  # `Increment`[¶](#wx.SpinButton.Increment "Permalink to this definition")See [`GetIncrement`](#wx.SpinButton.GetIncrement "wx.SpinButton.GetIncrement") and [`SetIncrement`](#wx.SpinButton.SetIncrement "wx.SpinButton.SetIncrement")
    Max: int  # `Max`[¶](#wx.SpinButton.Max "Permalink to this definition")See [`GetMax`](#wx.SpinButton.GetMax "wx.SpinButton.GetMax") and [`SetMax`](#wx.SpinButton.SetMax "wx.SpinButton.SetMax")
    Min: int  # `Min`[¶](#wx.SpinButton.Min "Permalink to this definition")See [`GetMin`](#wx.SpinButton.GetMin "wx.SpinButton.GetMin") and [`SetMin`](#wx.SpinButton.SetMin "wx.SpinButton.SetMin")
    Range: None  # `Range`[¶](#wx.SpinButton.Range "Permalink to this definition")See [`GetRange`](#wx.SpinButton.GetRange "wx.SpinButton.GetRange")
    Value: int  # `Value`[¶](#wx.SpinButton.Value "Permalink to this definition")See [`GetValue`](#wx.SpinButton.GetValue "wx.SpinButton.GetValue") and [`SetValue`](#wx.SpinButton.SetValue "wx.SpinButton.SetValue")



SP_HORIZONTAL: int  # Specifies a horizontal spin button (note that this style is not supported in wxGTK).

SP_VERTICAL: int  # Specifies a vertical spin button.

SP_ARROW_KEYS: int  # The user can use arrow keys to change the value.

SP_WRAP: int  # The value wraps at the minimum and maximum. ^^

EVT_SPIN: int  # Generated whenever pressing an arrow changed the spin button value.

EVT_SPIN_UP: int  # Generated whenever pressing left/up arrow changed the spin button value.

EVT_SPIN_DOWN: int  # Generated whenever pressing right/down arrow changed the spin button value. ^^

UP: int

DOWN: int

class SpinCtrl(Control):
    """ **Possible constructors**:



```
SpinCtrl()

SpinCtrl(parent, id=ID_ANY, value="", pos=DefaultPosition,
         size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0,
         name="wxSpinCtrl")

```


SpinCtrl combines TextCtrl and SpinButton in one control.


  


        Source: https://docs.wxpython.org/wx.SpinCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SpinCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, value=””, pos=DefaultPosition, size=DefaultSize, style=SP\_ARROW\_KEYS, min=0, max=100, initial=0, name=”wxSpinCtrl”)*


Constructor, creating and showing a spin control.


If *value* is non-empty, it will be shown in the text entry part of the control and if it has numeric value, the initial numeric value of the control, as returned by [`GetValue`](#wx.SpinCtrl.GetValue "wx.SpinCtrl.GetValue") will also be determined by it instead of by *initial*. Hence, it only makes sense to specify *initial* if *value* is an empty string or is not convertible to a number, otherwise *initial* is simply ignored and the number specified by *value* is used.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **value** (*string*) – Default value (as text).
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then a default size is chosen.
* **style** (*long*) – Window style. See  [wx.SpinButton](wx.SpinButton.html#wx-spinbutton).
* **min** (*int*) – Minimal value.
* **max** (*int*) – Maximal value.
* **initial** (*int*) – Initial value.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.SpinCtrl.Create "wx.SpinCtrl.Create")





---

  





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def Create(self, parent, id=ID_ANY, value="", pos=DefaultPosition, size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, name="wxSpinCtrl") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *value=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=SP\_ARROW\_KEYS*, *min=0*, *max=100*, *initial=0*, *name="wxSpinCtrl"*)[¶](#wx.SpinCtrl.Create "Permalink to this definition")
Creation function called by the spin control constructor.


See  [wx.SpinCtrl](#wx-spinctrl) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **value** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **min** (*int*) –
* **max** (*int*) –
* **initial** (*int*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def GetBase(self) -> int:
        """ 

`GetBase`(*self*)[¶](#wx.SpinCtrl.GetBase "Permalink to this definition")
Returns the numerical base being currently used, 10 by default.



Return type
*int*





New in version 2.9.5.




See also


[`SetBase`](#wx.SpinCtrl.SetBase "wx.SpinCtrl.SetBase")





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.SpinCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def GetIncrement(self) -> int:
        """ 

`GetIncrement`(*self*)[¶](#wx.SpinCtrl.GetIncrement "Permalink to this definition")
Get the value for increment for a spin control.


The default value is 1 but it can be changed using [`SetIncrement`](#wx.SpinCtrl.SetIncrement "wx.SpinCtrl.SetIncrement") .



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def GetMax(self) -> int:
        """ 

`GetMax`(*self*)[¶](#wx.SpinCtrl.GetMax "Permalink to this definition")
Gets maximal allowable value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def GetMin(self) -> int:
        """ 

`GetMin`(*self*)[¶](#wx.SpinCtrl.GetMin "Permalink to this definition")
Gets minimal allowable value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def GetRange(self) -> None:
        """ 

`GetRange`(*self*)[¶](#wx.SpinCtrl.GetRange "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def GetTextValue(self) -> str:
        """ 

`GetTextValue`(*self*)[¶](#wx.SpinCtrl.GetTextValue "Permalink to this definition")
Returns the text in the text entry part of the control.



Return type
`string`





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.SpinCtrl.GetValue "Permalink to this definition")
Gets the value of the spin control.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def SetBase(self, base: int) -> bool:
        """ 

`SetBase`(*self*, *base*)[¶](#wx.SpinCtrl.SetBase "Permalink to this definition")
Sets the base to use for the numbers in this control.


Currently the only supported values are 10 (which is the default) and 16.


Changing the base allows the user to enter the numbers in the specified base, e.g. with “0x” prefix for hexadecimal numbers, and also displays the numbers in the specified base when they are changed using the spin control arrows.



Parameters
**base** (*int*) – Numeric base, currently only 10 and 16 are supported.



Return type
*bool*



Returns
`True` if the base was successfully changed or `False` if it failed, usually meaning that either the base is not 10 or 16 or that the base is not supported for values in the current range.





New in version 2.9.5.




Note


Setting a base to 16 is allowed only if current range does not include negative values.





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def SetIncrement(self, value: int) -> None:
        """ 

`SetIncrement`(*self*, *value*)[¶](#wx.SpinCtrl.SetIncrement "Permalink to this definition")
Sets the increment for the control.


The increment is the number by which the value changes when the up or down arrow is used.


The default is 1, but it can be useful to set it to a higher value when using the control for bigger numbers.


Note that it is still possible to enter any value (in the valid range) into the control manually, whatever is the value of the increment.



Parameters
**value** (*int*) – 





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def SetMax(self, maxVal) -> None:
        """ 

`SetMax`(*self*, *maxVal*)[¶](#wx.SpinCtrl.SetMax "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def SetMin(self, minVal) -> None:
        """ 

`SetMin`(*self*, *minVal*)[¶](#wx.SpinCtrl.SetMin "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def SetRange(self, minVal, maxVal) -> None:
        """ 

`SetRange`(*self*, *minVal*, *maxVal*)[¶](#wx.SpinCtrl.SetRange "Permalink to this definition")
Sets range of allowable values.


Notice that calling this method may change the value of the control if it’s not inside the new valid range, e.g. it will become *minVal* if it is less than it now. However no `wxEVT_SPINCTRL` event is generated, even if it the value does change.



Parameters
* **minVal** (*int*) –
* **maxVal** (*int*) –





Note


Setting a range including negative values is silently ignored if current base is set to 16.





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def SetSelection(self, from_, to_) -> None:
        """ 

`SetSelection`(*self*, *from\_*, *to\_*)[¶](#wx.SpinCtrl.SetSelection "Permalink to this definition")
Select the text in the text part of the control between positions *from* (inclusive) and *to* (exclusive).


This is similar to [`wx.TextCtrl.SetSelection`](wx.TextEntry.html#wx.TextEntry.SetSelection "wx.TextEntry.SetSelection") .



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –





Note


this is currently only implemented for Windows and generic versions of the control.





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    def SetValue(self, *args, **kw) -> None:
        """ 

`SetValue`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SpinCtrl.SetValue "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetValue** *(self, text)*


Sets the value of the spin control.


It is recommended to use the overload taking an integer value instead. If *text* doesn’t represent a valid number, it may not be shown in the text part of the control at all (only empty string is guaranteed to be supported under all platforms) and the numeric value will be changed to [`GetMin`](#wx.SpinCtrl.GetMin "wx.SpinCtrl.GetMin") .


Notice that, unlike [`wx.TextCtrl.SetValue`](wx.TextEntry.html#wx.TextEntry.SetValue "wx.TextEntry.SetValue") , but like most of the other setter methods in wxWidgets, calling this method does not generate any events as events are only generated for the user actions.



Parameters
**text** (*string*) – 






---

  



**SetValue** *(self, value)*


Sets the value of the spin control.


Calling this method doesn’t generate any `wxEVT_SPINCTRL` events.



Parameters
**value** (*int*) – 






---

  





            Source: https://docs.wxpython.org/wx.SpinCtrl.html
        """

    Base: int  # `Base`[¶](#wx.SpinCtrl.Base "Permalink to this definition")See [`GetBase`](#wx.SpinCtrl.GetBase "wx.SpinCtrl.GetBase") and [`SetBase`](#wx.SpinCtrl.SetBase "wx.SpinCtrl.SetBase")
    Increment: int  # `Increment`[¶](#wx.SpinCtrl.Increment "Permalink to this definition")See [`GetIncrement`](#wx.SpinCtrl.GetIncrement "wx.SpinCtrl.GetIncrement") and [`SetIncrement`](#wx.SpinCtrl.SetIncrement "wx.SpinCtrl.SetIncrement")
    Max: int  # `Max`[¶](#wx.SpinCtrl.Max "Permalink to this definition")See [`GetMax`](#wx.SpinCtrl.GetMax "wx.SpinCtrl.GetMax") and [`SetMax`](#wx.SpinCtrl.SetMax "wx.SpinCtrl.SetMax")
    Min: int  # `Min`[¶](#wx.SpinCtrl.Min "Permalink to this definition")See [`GetMin`](#wx.SpinCtrl.GetMin "wx.SpinCtrl.GetMin") and [`SetMin`](#wx.SpinCtrl.SetMin "wx.SpinCtrl.SetMin")
    Range: None  # `Range`[¶](#wx.SpinCtrl.Range "Permalink to this definition")See [`GetRange`](#wx.SpinCtrl.GetRange "wx.SpinCtrl.GetRange")
    TextValue: str  # `TextValue`[¶](#wx.SpinCtrl.TextValue "Permalink to this definition")See [`GetTextValue`](#wx.SpinCtrl.GetTextValue "wx.SpinCtrl.GetTextValue")
    Value: int  # `Value`[¶](#wx.SpinCtrl.Value "Permalink to this definition")See [`GetValue`](#wx.SpinCtrl.GetValue "wx.SpinCtrl.GetValue") and [`SetValue`](#wx.SpinCtrl.SetValue "wx.SpinCtrl.SetValue")



EVT_SPINCTRL: int  # Process a wxEVT_SPINCTRL event, which is generated whenever the numeric value of the spin control is updated. ^^

class SpinCtrlDouble(Control):
    """ **Possible constructors**:



```
SpinCtrlDouble()

SpinCtrlDouble(parent, id=-1, value="", pos=DefaultPosition,
               size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, inc=1,
               name=T("wxSpinCtrlDouble"))

```


SpinCtrlDouble combines TextCtrl and SpinButton in one control
and displays a real number.


  


        Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SpinCtrlDouble.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=-1, value=””, pos=DefaultPosition, size=DefaultSize, style=SP\_ARROW\_KEYS, min=0, max=100, initial=0, inc=1, name=T(“wxSpinCtrlDouble”))*


Constructor, creating and showing a spin control.


If *value* is non-empty, it will be shown in the text entry part of the control and if it has numeric value, the initial numeric value of the control, as returned by [`GetValue`](#wx.SpinCtrlDouble.GetValue "wx.SpinCtrlDouble.GetValue") will also be determined by it instead of by *initial*. Hence, it only makes sense to specify *initial* if *value* is an empty string or is not convertible to a number, otherwise *initial* is simply ignored and the number specified by *value* is used.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **value** (*string*) – Default value (as text).
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then a default size is chosen.
* **style** (*long*) – Window style. See  [wx.SpinButton](wx.SpinButton.html#wx-spinbutton).
* **min** (*float*) – Minimal value.
* **max** (*float*) – Maximal value.
* **initial** (*float*) – Initial value.
* **inc** (*float*) – Increment value.
* **name** (*string*) – Window name.




*inc*. If necessary, default precision can be adjusted by call to [`SetDigits`](#wx.SpinCtrlDouble.SetDigits "wx.SpinCtrlDouble.SetDigits") .



See also


[`Create`](#wx.SpinCtrlDouble.Create "wx.SpinCtrlDouble.Create")





---

  





            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def Create(self, parent, id=ID_ANY, value="", pos=DefaultPosition, size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, inc=1, name="wxSpinCtrlDouble") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *value=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=SP\_ARROW\_KEYS*, *min=0*, *max=100*, *initial=0*, *inc=1*, *name="wxSpinCtrlDouble"*)[¶](#wx.SpinCtrlDouble.Create "Permalink to this definition")
Creation function called by the spin control constructor.


See  [wx.SpinCtrlDouble](#wx-spinctrldouble) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **value** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **min** (*float*) –
* **max** (*float*) –
* **initial** (*float*) –
* **inc** (*float*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.SpinCtrlDouble.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def GetDigits(self) -> int:
        """ 

`GetDigits`(*self*)[¶](#wx.SpinCtrlDouble.GetDigits "Permalink to this definition")
Gets precision of the value of the spin control.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def GetIncrement(self) -> float:
        """ 

`GetIncrement`(*self*)[¶](#wx.SpinCtrlDouble.GetIncrement "Permalink to this definition")
Gets the increment value.



Return type
*float*






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def GetMax(self) -> float:
        """ 

`GetMax`(*self*)[¶](#wx.SpinCtrlDouble.GetMax "Permalink to this definition")
Gets maximal allowable value.



Return type
*float*






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def GetMin(self) -> float:
        """ 

`GetMin`(*self*)[¶](#wx.SpinCtrlDouble.GetMin "Permalink to this definition")
Gets minimal allowable value.



Return type
*float*






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def GetRange(self) -> None:
        """ 

`GetRange`(*self*)[¶](#wx.SpinCtrlDouble.GetRange "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def GetTextValue(self) -> str:
        """ 

`GetTextValue`(*self*)[¶](#wx.SpinCtrlDouble.GetTextValue "Permalink to this definition")
Returns the text in the text entry part of the control.



Return type
`string`





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def GetValue(self) -> float:
        """ 

`GetValue`(*self*)[¶](#wx.SpinCtrlDouble.GetValue "Permalink to this definition")
Gets the value of the spin control.



Return type
*float*






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def SetDigits(self, digits: int) -> None:
        """ 

`SetDigits`(*self*, *digits*)[¶](#wx.SpinCtrlDouble.SetDigits "Permalink to this definition")
Sets precision of the value of the spin control.


Up to 20 digits are allowed after the decimal point.



Parameters
**digits** (*int*) – 






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def SetIncrement(self, inc: float) -> None:
        """ 

`SetIncrement`(*self*, *inc*)[¶](#wx.SpinCtrlDouble.SetIncrement "Permalink to this definition")
Sets the increment value.


Using this method changes the number of digits used by the control to at least match the value of *inc*, e.g. using the increment of `0.01` sets the number of digits to 2 if it had been less than 2 before. However it doesn’t change the number of digits if it had been already high enough.


In any case, you may call [`SetDigits`](#wx.SpinCtrlDouble.SetDigits "wx.SpinCtrlDouble.SetDigits") explicitly to override the automatic determination of the number of digits.



Parameters
**inc** (*float*) – 






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def SetMax(self, maxVal) -> None:
        """ 

`SetMax`(*self*, *maxVal*)[¶](#wx.SpinCtrlDouble.SetMax "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def SetMin(self, minVal) -> None:
        """ 

`SetMin`(*self*, *minVal*)[¶](#wx.SpinCtrlDouble.SetMin "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def SetRange(self, minVal, maxVal) -> None:
        """ 

`SetRange`(*self*, *minVal*, *maxVal*)[¶](#wx.SpinCtrlDouble.SetRange "Permalink to this definition")
Sets range of allowable values.



Parameters
* **minVal** (*float*) –
* **maxVal** (*float*) –






            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    def SetValue(self, *args, **kw) -> None:
        """ 

`SetValue`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SpinCtrlDouble.SetValue "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetValue** *(self, text)*


Sets the value of the spin control.


It is recommended to use the overload taking a float value instead. If *text* doesn’t represent a valid number, it may not be shown in the text part of the control at all (only empty string is guaranteed to be supported under all platforms) and the numeric value will be changed to [`GetMin`](#wx.SpinCtrlDouble.GetMin "wx.SpinCtrlDouble.GetMin") .


Notice that, unlike [`wx.TextCtrl.SetValue`](wx.TextEntry.html#wx.TextEntry.SetValue "wx.TextEntry.SetValue") , but like most of the other setter methods in wxWidgets, calling this method does not generate any events as events are only generated for the user actions.



Parameters
**text** (*string*) – 






---

  



**SetValue** *(self, value)*


Sets the value of the spin control.


Calling this method doesn’t generate any `wxEVT_SPINCTRLDOUBLE` events.



Parameters
**value** (*float*) – 






---

  





            Source: https://docs.wxpython.org/wx.SpinCtrlDouble.html
        """

    Digits: int  # `Digits`[¶](#wx.SpinCtrlDouble.Digits "Permalink to this definition")See [`GetDigits`](#wx.SpinCtrlDouble.GetDigits "wx.SpinCtrlDouble.GetDigits") and [`SetDigits`](#wx.SpinCtrlDouble.SetDigits "wx.SpinCtrlDouble.SetDigits")
    Increment: float  # `Increment`[¶](#wx.SpinCtrlDouble.Increment "Permalink to this definition")See [`GetIncrement`](#wx.SpinCtrlDouble.GetIncrement "wx.SpinCtrlDouble.GetIncrement") and [`SetIncrement`](#wx.SpinCtrlDouble.SetIncrement "wx.SpinCtrlDouble.SetIncrement")
    Max: float  # `Max`[¶](#wx.SpinCtrlDouble.Max "Permalink to this definition")See [`GetMax`](#wx.SpinCtrlDouble.GetMax "wx.SpinCtrlDouble.GetMax") and [`SetMax`](#wx.SpinCtrlDouble.SetMax "wx.SpinCtrlDouble.SetMax")
    Min: float  # `Min`[¶](#wx.SpinCtrlDouble.Min "Permalink to this definition")See [`GetMin`](#wx.SpinCtrlDouble.GetMin "wx.SpinCtrlDouble.GetMin") and [`SetMin`](#wx.SpinCtrlDouble.SetMin "wx.SpinCtrlDouble.SetMin")
    Range: None  # `Range`[¶](#wx.SpinCtrlDouble.Range "Permalink to this definition")See [`GetRange`](#wx.SpinCtrlDouble.GetRange "wx.SpinCtrlDouble.GetRange")
    TextValue: str  # `TextValue`[¶](#wx.SpinCtrlDouble.TextValue "Permalink to this definition")See [`GetTextValue`](#wx.SpinCtrlDouble.GetTextValue "wx.SpinCtrlDouble.GetTextValue")
    Value: float  # `Value`[¶](#wx.SpinCtrlDouble.Value "Permalink to this definition")See [`GetValue`](#wx.SpinCtrlDouble.GetValue "wx.SpinCtrlDouble.GetValue") and [`SetValue`](#wx.SpinCtrlDouble.SetValue "wx.SpinCtrlDouble.SetValue")



EVT_SPINCTRLDOUBLE: int  # Generated whenever the numeric value of the spin control is changed, that is, when the up/down spin button is clicked, when ENTER is pressed, or the control loses focus and the new value is different from the last. See   wx.SpinDoubleEvent. ^^

class SpinDoubleEvent(NotifyEvent):
    """ **Possible constructors**:



```
SpinDoubleEvent(commandType=wxEVT_NULL, winid=0, value=0)

SpinDoubleEvent(event)

```


This event class is used for the events generated by SpinCtrlDouble.


  


        Source: https://docs.wxpython.org/wx.SpinDoubleEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SpinDoubleEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, commandType=wxEVT\_NULL, winid=0, value=0)*


The constructor.


Not normally used by the user code.



Parameters
* **commandType** (*wx.EventType*) –
* **winid** (*int*) –
* **value** (*float*) –






---

  



**\_\_init\_\_** *(self, event)*


The copy constructor.



Parameters
**event** ([*wx.SpinDoubleEvent*](#wx.SpinDoubleEvent "wx.SpinDoubleEvent")) – 






---

  





            Source: https://docs.wxpython.org/wx.SpinDoubleEvent.html
        """

    def GetValue(self) -> float:
        """ 

`GetValue`(*self*)[¶](#wx.SpinDoubleEvent.GetValue "Permalink to this definition")
Returns the value associated with this spin control event.



Return type
*float*






            Source: https://docs.wxpython.org/wx.SpinDoubleEvent.html
        """

    def SetValue(self, value: float) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.SpinDoubleEvent.SetValue "Permalink to this definition")
Set the value associated with the event.


(Not normally used by user code.)



Parameters
**value** (*float*) – 






            Source: https://docs.wxpython.org/wx.SpinDoubleEvent.html
        """

    Value: float  # `Value`[¶](#wx.SpinDoubleEvent.Value "Permalink to this definition")See [`GetValue`](#wx.SpinDoubleEvent.GetValue "wx.SpinDoubleEvent.GetValue") and [`SetValue`](#wx.SpinDoubleEvent.SetValue "wx.SpinDoubleEvent.SetValue")



class SpinEvent(NotifyEvent):
    """ **Possible constructors**:



```
SpinEvent(commandType=wxEVT_NULL, id=0)

```


This event class is used for the events generated by SpinButton and
SpinCtrl.


  


        Source: https://docs.wxpython.org/wx.SpinEvent.html
    """
    def __init__(self, commandType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *commandType=wxEVT\_NULL*, *id=0*)[¶](#wx.SpinEvent.__init__ "Permalink to this definition")
The constructor is not normally used by the user code.



Parameters
* **commandType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.SpinEvent.html
        """

    def GetPosition(self) -> int:
        """ 

`GetPosition`(*self*)[¶](#wx.SpinEvent.GetPosition "Permalink to this definition")
Retrieve the current spin button or control value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SpinEvent.html
        """

    def SetPosition(self, pos: int) -> None:
        """ 

`SetPosition`(*self*, *pos*)[¶](#wx.SpinEvent.SetPosition "Permalink to this definition")
Set the value associated with the event.



Parameters
**pos** (*int*) – 






            Source: https://docs.wxpython.org/wx.SpinEvent.html
        """

    Position: int  # `Position`[¶](#wx.SpinEvent.Position "Permalink to this definition")See [`GetPosition`](#wx.SpinEvent.GetPosition "wx.SpinEvent.GetPosition") and [`SetPosition`](#wx.SpinEvent.SetPosition "wx.SpinEvent.SetPosition")



class SplitterEvent(NotifyEvent):
    """ **Possible constructors**:



```
SplitterEvent(eventType=wxEVT_NULL, splitter=None)

```


This class represents the events generated by a splitter control.


  


        Source: https://docs.wxpython.org/wx.SplitterEvent.html
    """
    def __init__(self, eventType=wxEVT_NULL, splitter=None) -> None:
        """ 

`__init__`(*self*, *eventType=wxEVT\_NULL*, *splitter=None*)[¶](#wx.SplitterEvent.__init__ "Permalink to this definition")
Constructor.


Used internally by wxWidgets only.



Parameters
* **eventType** (*wx.EventType*) –
* **splitter** ([*wx.SplitterWindow*](wx.SplitterWindow.html#wx.SplitterWindow "wx.SplitterWindow")) –






            Source: https://docs.wxpython.org/wx.SplitterEvent.html
        """

    def GetOldSize(self) -> int:
        """ 

`GetOldSize`(*self*)[¶](#wx.SplitterEvent.GetOldSize "Permalink to this definition")
Returns the old size before the update.


The size value is already adjusted to the orientation of the sash. So for a vertical sash it’s the width and for a horizontal sash it’s the height.


May only be called while processing `wxEVT_SPLITTER_SASH_POS_CHANGING` , `wxEVT_SPLITTER_SASH_POS_RESIZE` and `wxEVT_SPLITTER_SASH_POS_CHANGED` events.
May only be called while processing `wxEVT_SPLITTER_SASH_POS_CHANGING` , `wxEVT_SPLITTER_SASH_POS_RESIZE` and `wxEVT_SPLITTER_SASH_POS_CHANGED` events.



Return type
*int*





New in version 4.1/wxWidgets-3.1.6: Returns the new size which is set after the update. The size value is already adjusted to the orientation of the sash. So for a vertical sash it’s the width and for a horizontal sash it’s the height.




New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.SplitterEvent.html
        """

    def GetSashPosition(self) -> int:
        """ 

`GetSashPosition`(*self*)[¶](#wx.SplitterEvent.GetSashPosition "Permalink to this definition")
Returns the new sash position.


May only be called while processing `wxEVT_SPLITTER_SASH_POS_CHANGING` , `wxEVT_SPLITTER_SASH_POS_RESIZE` and `wxEVT_SPLITTER_SASH_POS_CHANGED` events.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SplitterEvent.html
        """

    def GetWindowBeingRemoved(self) -> 'Window':
        """ 

`GetWindowBeingRemoved`(*self*)[¶](#wx.SplitterEvent.GetWindowBeingRemoved "Permalink to this definition")
Returns a pointer to the window being removed when a splitter window is unsplit.


May only be called while processing `wxEVT_SPLITTER_UNSPLIT` events.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.SplitterEvent.html
        """

    def GetX(self) -> int:
        """ 

`GetX`(*self*)[¶](#wx.SplitterEvent.GetX "Permalink to this definition")
Returns the x coordinate of the double-click point.


May only be called while processing `wxEVT_SPLITTER_DOUBLECLICKED` events.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SplitterEvent.html
        """

    def GetY(self) -> int:
        """ 

`GetY`(*self*)[¶](#wx.SplitterEvent.GetY "Permalink to this definition")
Returns the y coordinate of the double-click point.


May only be called while processing `wxEVT_SPLITTER_DOUBLECLICKED` events.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SplitterEvent.html
        """

    def SetSashPosition(self, pos: int) -> None:
        """ 

`SetSashPosition`(*self*, *pos*)[¶](#wx.SplitterEvent.SetSashPosition "Permalink to this definition")
In the case of `wxEVT_SPLITTER_SASH_POS_CHANGED` events, sets the new sash position.


In the case of `wxEVT_SPLITTER_SASH_POS_CHANGING` events, sets the new tracking bar position so visual feedback during dragging will represent that change that will actually take place. Set to -1 from the event handler code to prevent repositioning.


May only be called while processing `wxEVT_SPLITTER_SASH_POS_CHANGING` , `wxEVT_SPLITTER_SASH_POS_RESIZE` and `wxEVT_SPLITTER_SASH_POS_CHANGED` events.



Parameters
**pos** (*int*) – New sash position.






            Source: https://docs.wxpython.org/wx.SplitterEvent.html
        """

    def SetSize(self, oldSize, newSize) -> None:
        """ 

`SetSize`(*self*, *oldSize*, *newSize*)[¶](#wx.SplitterEvent.SetSize "Permalink to this definition")
Sets the size values of the window size.


This size is adjusted to the sash orientation. For a vertical sash it should be the width and for a horizontal sash it’s the height.


May only be called while processing `wxEVT_SPLITTER_SASH_POS_CHANGING` , `wxEVT_SPLITTER_SASH_POS_RESIZE` and `wxEVT_SPLITTER_SASH_POS_CHANGED` events.



Parameters
* **oldSize** (*int*) –
* **newSize** (*int*) –





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.SplitterEvent.html
        """

    OldSize: int  # `OldSize`[¶](#wx.SplitterEvent.OldSize "Permalink to this definition")See [`GetOldSize`](#wx.SplitterEvent.GetOldSize "wx.SplitterEvent.GetOldSize")
    SashPosition: int  # `SashPosition`[¶](#wx.SplitterEvent.SashPosition "Permalink to this definition")See [`GetSashPosition`](#wx.SplitterEvent.GetSashPosition "wx.SplitterEvent.GetSashPosition") and [`SetSashPosition`](#wx.SplitterEvent.SetSashPosition "wx.SplitterEvent.SetSashPosition")
    WindowBeingRemoved: 'Window'  # `WindowBeingRemoved`[¶](#wx.SplitterEvent.WindowBeingRemoved "Permalink to this definition")See [`GetWindowBeingRemoved`](#wx.SplitterEvent.GetWindowBeingRemoved "wx.SplitterEvent.GetWindowBeingRemoved")
    X: int  # `X`[¶](#wx.SplitterEvent.X "Permalink to this definition")See [`GetX`](#wx.SplitterEvent.GetX "wx.SplitterEvent.GetX")
    Y: int  # `Y`[¶](#wx.SplitterEvent.Y "Permalink to this definition")See [`GetY`](#wx.SplitterEvent.GetY "wx.SplitterEvent.GetY")



EVT_SPLITTER_SASH_POS_CHANGING: int  # The sash position is in the process of being changed. May be used to modify the position of the tracking bar to properly reflect the position that would be set if the drag were to be completed at this point. Processes a  wxEVT_SPLITTER_SASH_POS_CHANGING   event.

EVT_SPLITTER_SASH_POS_CHANGED: int  # The sash position was changed. May be used to modify the sash position before it is set, or to prevent the change from taking place. Processes a  wxEVT_SPLITTER_SASH_POS_CHANGED   event.

EVT_SPLITTER_UNSPLIT: int  # The splitter has been just unsplit. Processes a  wxEVT_SPLITTER_UNSPLIT   event.

EVT_SPLITTER_DCLICK: int  # The sash was double clicked. The default behaviour is to unsplit the window when this happens (unless the minimum pane size has been set to a value greater than zero). Processes a  wxEVT_SPLITTER_DOUBLECLICKED   event. ^^

class SplitterRenderParams:
    """ **Possible constructors**:



```
SplitterRenderParams(widthSash_, border_, isSens_)

```


This is just a simple struct used as a return value of
*RendererNative.GetSplitterParams().*


  


        Source: https://docs.wxpython.org/wx.SplitterRenderParams.html
    """
    def __init__(self, widthSash_, border_, isSens_) -> None:
        """ 

`__init__`(*self*, *widthSash\_*, *border\_*, *isSens\_*)[¶](#wx.SplitterRenderParams.__init__ "Permalink to this definition")
The only way to initialize this struct is by using this constructor.



Parameters
* **widthSash\_** (*int*) –
* **border\_** (*int*) –
* **isSens\_** (*bool*) –






            Source: https://docs.wxpython.org/wx.SplitterRenderParams.html
        """

    border: Any  # `border`[¶](#wx.SplitterRenderParams.border "Permalink to this definition")A public C++ attribute of type `int`. The width of the border drawn by the splitter inside it, may be 0.
    isHotSensitive: Any  # `isHotSensitive`[¶](#wx.SplitterRenderParams.isHotSensitive "Permalink to this definition")A public C++ attribute of type `bool`. `True` if the sash changes appearance when the mouse passes over it, `False` otherwise.
    widthSash: Any  # `widthSash`[¶](#wx.SplitterRenderParams.widthSash "Permalink to this definition")A public C++ attribute of type `int`. The width of the splitter sash.



_SplitMode: TypeAlias = SplitMode

class SplitterWindow(Window):
    """ **Possible constructors**:



```
SplitterWindow()

SplitterWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
               style=SP_3D, name="splitterWindow")

```


This class manages up to two subwindows.


  


        Source: https://docs.wxpython.org/wx.SplitterWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.SplitterWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=SP\_3D, name=”splitterWindow”)*


Constructor for creating the window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent of the splitter window.
* **id** (*wx.WindowID*) – The window identifier.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The window size.
* **style** (*long*) – The window style. See  [wx.SplitterWindow](#wx-splitterwindow).
* **name** (*string*) – The window name.





Note


After using this constructor, you must create either one or two subwindows with the splitter window as parent, and then call one of *wx.Initialize* , [`SplitVertically`](#wx.SplitterWindow.SplitVertically "wx.SplitterWindow.SplitVertically") and [`SplitHorizontally`](#wx.SplitterWindow.SplitHorizontally "wx.SplitterWindow.SplitHorizontally") in order to set the pane(s). You can create two windows, with one hidden when not being shown; or you can create and delete the second pane on demand.




See also


*wx.Initialize* , [`SplitVertically`](#wx.SplitterWindow.SplitVertically "wx.SplitterWindow.SplitVertically") , [`SplitHorizontally`](#wx.SplitterWindow.SplitHorizontally "wx.SplitterWindow.SplitHorizontally") , [`Create`](#wx.SplitterWindow.Create "wx.SplitterWindow.Create")





---

  





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def Create(self, parent, id=ID_ANY, point=DefaultPosition, size=DefaultSize, style=SP_3D, name="splitter") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *point=DefaultPosition*, *size=DefaultSize*, *style=SP\_3D*, *name="splitter"*)[¶](#wx.SplitterWindow.Create "Permalink to this definition")
Creation function, for two-step construction.


See  [wx.SplitterWindow](#wx-splitterwindow) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.SplitterWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def GetDefaultSashSize(self) -> int:
        """ 

`GetDefaultSashSize`(*self*)[¶](#wx.SplitterWindow.GetDefaultSashSize "Permalink to this definition")
Returns the default sash size in pixels.


The size of the sash is its width for a vertically split window and its height for a horizontally split one. Its other direction is the same as the client size of the window in the corresponding direction.


The default sash size is platform-dependent because it conforms to the current platform look-and-feel and cannot be changed.



Return type
*int*





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def GetMinimumPaneSize(self) -> int:
        """ 

`GetMinimumPaneSize`(*self*)[¶](#wx.SplitterWindow.GetMinimumPaneSize "Permalink to this definition")
Returns the current minimum pane size (defaults to zero).



Return type
*int*





See also


[`SetMinimumPaneSize`](#wx.SplitterWindow.SetMinimumPaneSize "wx.SplitterWindow.SetMinimumPaneSize")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def GetSashGravity(self) -> float:
        """ 

`GetSashGravity`(*self*)[¶](#wx.SplitterWindow.GetSashGravity "Permalink to this definition")
Returns the current sash gravity.



Return type
*float*





See also


[`SetSashGravity`](#wx.SplitterWindow.SetSashGravity "wx.SplitterWindow.SetSashGravity")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def GetSashPosition(self) -> int:
        """ 

`GetSashPosition`(*self*)[¶](#wx.SplitterWindow.GetSashPosition "Permalink to this definition")
Returns the current sash position.



Return type
*int*





See also


[`SetSashPosition`](#wx.SplitterWindow.SetSashPosition "wx.SplitterWindow.SetSashPosition")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def GetSashSize(self) -> int:
        """ 

`GetSashSize`(*self*)[¶](#wx.SplitterWindow.GetSashSize "Permalink to this definition")
Returns the default sash size in pixels or 0 if it is invisible.



Return type
*int*





See also


[`GetDefaultSashSize`](#wx.SplitterWindow.GetDefaultSashSize "wx.SplitterWindow.GetDefaultSashSize") , [`IsSashInvisible`](#wx.SplitterWindow.IsSashInvisible "wx.SplitterWindow.IsSashInvisible")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def GetSplitMode(self) -> 'SplitMode':
        """ 

`GetSplitMode`(*self*)[¶](#wx.SplitterWindow.GetSplitMode "Permalink to this definition")
Gets the split mode.



Return type
 [wx.SplitMode](wx.SplitMode.enumeration.html#wx-splitmode)





See also


[`SetSplitMode`](#wx.SplitterWindow.SetSplitMode "wx.SplitterWindow.SetSplitMode") , [`SplitVertically`](#wx.SplitterWindow.SplitVertically "wx.SplitterWindow.SplitVertically") , [`SplitHorizontally`](#wx.SplitterWindow.SplitHorizontally "wx.SplitterWindow.SplitHorizontally") .





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def GetWindow1(self) -> 'Window':
        """ 

`GetWindow1`(*self*)[¶](#wx.SplitterWindow.GetWindow1 "Permalink to this definition")
Returns the left/top or only pane.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def GetWindow2(self) -> 'Window':
        """ 

`GetWindow2`(*self*)[¶](#wx.SplitterWindow.GetWindow2 "Permalink to this definition")
Returns the right/bottom pane.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def Initialize(self, window: 'Window') -> None:
        """ 

`Initialize`(*self*, *window*)[¶](#wx.SplitterWindow.Initialize "Permalink to this definition")
Initializes the splitter window to have one pane.


The child window is shown if it is currently hidden.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The pane for the unsplit window.





Note


This should be called if you wish to initially view only a single pane in the splitter window.




See also


[`SplitVertically`](#wx.SplitterWindow.SplitVertically "wx.SplitterWindow.SplitVertically") , [`SplitHorizontally`](#wx.SplitterWindow.SplitHorizontally "wx.SplitterWindow.SplitHorizontally")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def IsSashInvisible(self) -> bool:
        """ 

`IsSashInvisible`(*self*)[¶](#wx.SplitterWindow.IsSashInvisible "Permalink to this definition")
Returns `True` if the sash is invisible even when the window is split, `False` otherwise.



Return type
*bool*





New in version 2.9.4.




Note


This is a shortcut for HasFlag(wxSP\_NOSASH)




See also


[`SetSashInvisible`](#wx.SplitterWindow.SetSashInvisible "wx.SplitterWindow.SetSashInvisible")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def IsSplit(self) -> bool:
        """ 

`IsSplit`(*self*)[¶](#wx.SplitterWindow.IsSplit "Permalink to this definition")
Returns `True` if the window is split, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def ReplaceWindow(self, winOld, winNew) -> bool:
        """ 

`ReplaceWindow`(*self*, *winOld*, *winNew*)[¶](#wx.SplitterWindow.ReplaceWindow "Permalink to this definition")
This function replaces one of the windows managed by the  [wx.SplitterWindow](#wx-splitterwindow) with another one.


It is in general better to use it instead of calling [`Unsplit`](#wx.SplitterWindow.Unsplit "wx.SplitterWindow.Unsplit") and then resplitting the window back because it will provoke much less flicker (if any). It is valid to call this function whether the splitter has two windows or only one.


Both parameters should be not `None` and *winOld* must specify one of the windows managed by the splitter. If the parameters are incorrect or the window couldn’t be replaced, `False` is returned. Otherwise the function will return `True`, but please notice that it will not delete the replaced window and you may wish to do it yourself.



Parameters
* **winOld** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winNew** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
*bool*





See also


[`GetMinimumPaneSize`](#wx.SplitterWindow.GetMinimumPaneSize "wx.SplitterWindow.GetMinimumPaneSize")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def SetMinimumPaneSize(self, paneSize: int) -> None:
        """ 

`SetMinimumPaneSize`(*self*, *paneSize*)[¶](#wx.SplitterWindow.SetMinimumPaneSize "Permalink to this definition")
Sets the minimum pane size.



Parameters
**paneSize** (*int*) – Minimum pane size in pixels.





Note


The default minimum pane size is zero, which means that either pane can be reduced to zero by dragging the sash, thus removing one of the panes. To prevent this behaviour (and veto out-of-range sash dragging), set a minimum size, for example 20 pixels. If the `wx.SP_PERMIT_UNSPLIT` style is used when a splitter window is created, the window may be unsplit even if minimum size is non-zero.




See also


[`GetMinimumPaneSize`](#wx.SplitterWindow.GetMinimumPaneSize "wx.SplitterWindow.GetMinimumPaneSize")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def SetSashGravity(self, gravity: float) -> None:
        """ 

`SetSashGravity`(*self*, *gravity*)[¶](#wx.SplitterWindow.SetSashGravity "Permalink to this definition")
Sets the sash gravity.



Parameters
**gravity** (*float*) – The sash gravity. Value between 0.0 and 1.0.




Notice that when sash gravity for a newly created splitter window, it is often necessary to explicitly set the splitter size using [`SetSize`](wx.Window.html#wx.Window.SetSize "wx.Window.SetSize") to ensure that is big enough for its initial sash position. Otherwise, i.e. if the window is created with the default tiny size and only resized to its correct size later, the initial sash position will be affected by the gravity and typically result in sash being at the rightmost position for the gravity of 1. See the example code creating  [wx.SplitterWindow](#wx-splitterwindow) in the splitter sample for more details.



Note


Gravity is real factor which controls position of sash while resizing  [wx.SplitterWindow](#wx-splitterwindow). Gravity tells  [wx.SplitterWindow](#wx-splitterwindow) how much will left/top window grow while resizing. Example values:


* 0.0: only the bottom/right window is automatically resized
* 0.5: both windows grow by equal size
* 1.0: only left/top window grows Gravity should be a real value between 0.0 and 1.0. Default value of sash gravity is 0.0. That value is compatible with previous (before gravity was introduced) behaviour of  [wx.SplitterWindow](#wx-splitterwindow).




See also


[`GetSashGravity`](#wx.SplitterWindow.GetSashGravity "wx.SplitterWindow.GetSashGravity")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def SetSashInvisible(self, invisible: bool=True) -> None:
        """ 

`SetSashInvisible`(*self*, *invisible=True*)[¶](#wx.SplitterWindow.SetSashInvisible "Permalink to this definition")
Sets whether the sash should be invisible, even when the window is split.


When the sash is invisible, it doesn’t appear on the screen at all and, in particular, doesn’t allow the user to resize the windows.



Parameters
**invisible** (*bool*) – If `True`, the sash is always invisible, else it is shown when the window is split.





New in version 2.9.4.




Note


Only sets the internal variable; does not update the display.




See also


[`IsSashInvisible`](#wx.SplitterWindow.IsSashInvisible "wx.SplitterWindow.IsSashInvisible")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def SetSashPosition(self, position, redraw=True) -> None:
        """ 

`SetSashPosition`(*self*, *position*, *redraw=True*)[¶](#wx.SplitterWindow.SetSashPosition "Permalink to this definition")
Sets the sash position.



Parameters
* **position** (*int*) – The sash position in pixels.
* **redraw** (*bool*) – If `True`, resizes the panes and redraws the sash and border.





Note


Does not currently check for an out-of-range value.




See also


[`GetSashPosition`](#wx.SplitterWindow.GetSashPosition "wx.SplitterWindow.GetSashPosition")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def SetSplitMode(self, mode: int) -> None:
        """ 

`SetSplitMode`(*self*, *mode*)[¶](#wx.SplitterWindow.SetSplitMode "Permalink to this definition")
Sets the split mode.



Parameters
**mode** (*int*) – Can be `wx.SPLIT_VERTICAL` or `wx.SPLIT_HORIZONTAL`.





Note


Only sets the internal variable; does not update the display.




See also


[`GetSplitMode`](#wx.SplitterWindow.GetSplitMode "wx.SplitterWindow.GetSplitMode") , [`SplitVertically`](#wx.SplitterWindow.SplitVertically "wx.SplitterWindow.SplitVertically") , [`SplitHorizontally`](#wx.SplitterWindow.SplitHorizontally "wx.SplitterWindow.SplitHorizontally") .





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def SplitHorizontally(self, window1, window2, sashPosition=0) -> bool:
        """ 

`SplitHorizontally`(*self*, *window1*, *window2*, *sashPosition=0*)[¶](#wx.SplitterWindow.SplitHorizontally "Permalink to this definition")
Initializes the top and bottom panes of the splitter window.


The child windows are shown if they are currently hidden.



Parameters
* **window1** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The top pane.
* **window2** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The bottom pane.
* **sashPosition** (*int*) – The initial position of the sash. If this value is positive, it specifies the size of the upper pane. If it is negative, its absolute value gives the size of the lower pane. Finally, specify 0 (default) to choose the default position (half of the total window height).



Return type
*bool*



Returns
`True` if successful, `False` otherwise (the window was already split).





Note


This should be called if you wish to initially view two panes. It can also be called at any subsequent time, but the application should check that the window is not currently split using [`IsSplit`](#wx.SplitterWindow.IsSplit "wx.SplitterWindow.IsSplit") .




See also


[`SplitVertically`](#wx.SplitterWindow.SplitVertically "wx.SplitterWindow.SplitVertically") , [`IsSplit`](#wx.SplitterWindow.IsSplit "wx.SplitterWindow.IsSplit") , [`Unsplit`](#wx.SplitterWindow.Unsplit "wx.SplitterWindow.Unsplit")





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def SplitVertically(self, window1, window2, sashPosition=0) -> bool:
        """ 

`SplitVertically`(*self*, *window1*, *window2*, *sashPosition=0*)[¶](#wx.SplitterWindow.SplitVertically "Permalink to this definition")
Initializes the left and right panes of the splitter window.


The child windows are shown if they are currently hidden.



Parameters
* **window1** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The left pane.
* **window2** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The right pane.
* **sashPosition** (*int*) – The initial position of the sash. If this value is positive, it specifies the size of the left pane. If it is negative, it is absolute value gives the size of the right pane. Finally, specify 0 (default) to choose the default position (half of the total window width).



Return type
*bool*



Returns
`True` if successful, `False` otherwise (the window was already split).





Note


This should be called if you wish to initially view two panes. It can also be called at any subsequent time, but the application should check that the window is not currently split using [`IsSplit`](#wx.SplitterWindow.IsSplit "wx.SplitterWindow.IsSplit") .




See also


[`SplitHorizontally`](#wx.SplitterWindow.SplitHorizontally "wx.SplitterWindow.SplitHorizontally") , [`IsSplit`](#wx.SplitterWindow.IsSplit "wx.SplitterWindow.IsSplit") , [`Unsplit`](#wx.SplitterWindow.Unsplit "wx.SplitterWindow.Unsplit") .





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def Unsplit(self, toRemove: Optional['Window']=None) -> bool:
        """ 

`Unsplit`(*self*, *toRemove=None*)[¶](#wx.SplitterWindow.Unsplit "Permalink to this definition")
Unsplits the window.



Parameters
**toRemove** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The pane to remove, or `None` to remove the right or bottom pane.



Return type
*bool*



Returns
`True` if successful, `False` otherwise (the window was not split).





Note


This call will not actually delete the pane being removed; it calls `OnUnsplit` which can be overridden for the desired behaviour. By default, the pane being removed is hidden.




See also


[`SplitHorizontally`](#wx.SplitterWindow.SplitHorizontally "wx.SplitterWindow.SplitHorizontally") , [`SplitVertically`](#wx.SplitterWindow.SplitVertically "wx.SplitterWindow.SplitVertically") , [`IsSplit`](#wx.SplitterWindow.IsSplit "wx.SplitterWindow.IsSplit") , `OnUnsplit`





            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    def UpdateSize(self) -> None:
        """ 

`UpdateSize`(*self*)[¶](#wx.SplitterWindow.UpdateSize "Permalink to this definition")
Causes any pending sizing of the sash and child panes to take place immediately.


Such resizing normally takes place in idle time, in order to wait for layout to be completed. However, this can cause unacceptable flicker as the panes are resized after the window has been shown. To work around this, you can perform window layout (for example by sending a size event to the parent window), and then call this function, before showing the top-level window.




            Source: https://docs.wxpython.org/wx.SplitterWindow.html
        """

    DefaultSashSize: int  # `DefaultSashSize`[¶](#wx.SplitterWindow.DefaultSashSize "Permalink to this definition")See [`GetDefaultSashSize`](#wx.SplitterWindow.GetDefaultSashSize "wx.SplitterWindow.GetDefaultSashSize")
    MinimumPaneSize: int  # `MinimumPaneSize`[¶](#wx.SplitterWindow.MinimumPaneSize "Permalink to this definition")See [`GetMinimumPaneSize`](#wx.SplitterWindow.GetMinimumPaneSize "wx.SplitterWindow.GetMinimumPaneSize") and [`SetMinimumPaneSize`](#wx.SplitterWindow.SetMinimumPaneSize "wx.SplitterWindow.SetMinimumPaneSize")
    SashGravity: float  # `SashGravity`[¶](#wx.SplitterWindow.SashGravity "Permalink to this definition")See [`GetSashGravity`](#wx.SplitterWindow.GetSashGravity "wx.SplitterWindow.GetSashGravity") and [`SetSashGravity`](#wx.SplitterWindow.SetSashGravity "wx.SplitterWindow.SetSashGravity")
    SashInvisible: Any  # `SashInvisible`[¶](#wx.SplitterWindow.SashInvisible "Permalink to this definition")See [`IsSashInvisible`](#wx.SplitterWindow.IsSashInvisible "wx.SplitterWindow.IsSashInvisible") and [`SetSashInvisible`](#wx.SplitterWindow.SetSashInvisible "wx.SplitterWindow.SetSashInvisible")
    SashPosition: int  # `SashPosition`[¶](#wx.SplitterWindow.SashPosition "Permalink to this definition")See [`GetSashPosition`](#wx.SplitterWindow.GetSashPosition "wx.SplitterWindow.GetSashPosition") and [`SetSashPosition`](#wx.SplitterWindow.SetSashPosition "wx.SplitterWindow.SetSashPosition")
    SashSize: int  # `SashSize`[¶](#wx.SplitterWindow.SashSize "Permalink to this definition")See [`GetSashSize`](#wx.SplitterWindow.GetSashSize "wx.SplitterWindow.GetSashSize")
    SplitMode: '_SplitMode'  # `SplitMode`[¶](#wx.SplitterWindow.SplitMode "Permalink to this definition")See [`GetSplitMode`](#wx.SplitterWindow.GetSplitMode "wx.SplitterWindow.GetSplitMode") and [`SetSplitMode`](#wx.SplitterWindow.SetSplitMode "wx.SplitterWindow.SetSplitMode")
    Window1: 'Window'  # `Window1`[¶](#wx.SplitterWindow.Window1 "Permalink to this definition")See [`GetWindow1`](#wx.SplitterWindow.GetWindow1 "wx.SplitterWindow.GetWindow1")
    Window2: 'Window'  # `Window2`[¶](#wx.SplitterWindow.Window2 "Permalink to this definition")See [`GetWindow2`](#wx.SplitterWindow.GetWindow2 "wx.SplitterWindow.GetWindow2")



SP_3D: int  # Draws a 3D effect border and sash.

SP_THIN_SASH: int  # Draws a thin sash.

SP_3DSASH: int  # Draws a 3D effect sash (part of default style).

SP_3DBORDER: int  # Synonym for wx.SP_BORDER.

SP_BORDER: int  # Draws a standard border.

SP_NOBORDER: int  # No border (default).

SP_NO_XP_THEME: int  # Under Windows, switches off the attempt to draw the splitter using Windows theming, so the borders and sash will take on the pre-XP look.

SP_PERMIT_UNSPLIT: int  # Always allow to unsplit, even with the minimum pane size other than zero.

SP_LIVE_UPDATE: int  # Don’t draw wx.XOR line but resize the child windows immediately. ^^

EVT_SPLITTER_SASH_POS_RESIZE: int  # The sash position is in the process of being updated. May be used to modify the position of the tracking bar to properly reflect the position that would be set if the update were to be completed. This can happen e.g. when the window is resized and the sash is moved according to the gravity setting. This event is sent when the window is resized and allows the application to select the desired new sash position. If it doesn’t process the event, the position is determined by the gravity setting. Processes a  wxEVT_SPLITTER_SASH_POS_RESIZE   event and is only available in wxWidgets 3.1.6 or newer.

XOR: int

SPLIT_VERTICAL: int

SPLIT_HORIZONTAL: int

class StandardPaths:
    """ **Possible constructors**:



```
StandardPaths()

```


StandardPaths returns the standard locations in the file system and
should be used by applications to find their data files in a portable
way.


  


        Source: https://docs.wxpython.org/wx.StandardPaths.html
    """
    @staticmethod
    def Get() -> 'StandardPaths':
        """ 

*static* `Get`()[¶](#wx.StandardPaths.Get "Permalink to this definition")
Returns reference to the unique global standard paths object.



Return type
 [wx.StandardPaths](#wx-standardpaths)






            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetAppDocumentsDir(self) -> str:
        """ 

`GetAppDocumentsDir`(*self*)[¶](#wx.StandardPaths.GetAppDocumentsDir "Permalink to this definition")
Return the directory for the document files used by this application.


If the application-specific directory doesn’t exist, this function returns [`GetDocumentsDir`](#wx.StandardPaths.GetDocumentsDir "wx.StandardPaths.GetDocumentsDir") .


Example return values:


* Unix: `~/appinfo`
* Windows: `"C:\Users\username\Documents\appinfo"` or `"C:\Documents and Settings\username\My Documents\appinfo"`
* Mac: `~/Documents/appinfo`



Return type
`string`





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetConfigDir(self) -> str:
        """ 

`GetConfigDir`(*self*)[¶](#wx.StandardPaths.GetConfigDir "Permalink to this definition")
Return the directory containing the system config files.


Example return values:


* Unix: `/etc`
* Windows: `"C:\ProgramData\appinfo"` or `"C:\Documents and Settings\All Users\Application Data\appinfo"`
* Mac: `/Library/Preferences`



Return type
`string`





Note


Under Windows this includes `appinfo` which makes it inconsistent with other ports.




See also


 [wx.FileConfig](wx.FileConfig.html#wx-fileconfig)





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetDataDir(self) -> str:
        """ 

`GetDataDir`(*self*)[¶](#wx.StandardPaths.GetDataDir "Permalink to this definition")
Return the location of the applications global, i.e. not user-specific, data files.


Example return values:


* Unix: `prefix/share/appinfo`
* Windows: the directory where the executable file is located
* Mac: `appinfo.app/Contents/SharedSupport` bundle subdirectory


Under Unix (only) it is possible to override the default value returned from this function by setting the value of `WX_APPNAME_DATA_DIR` environment variable to the directory to use (where `APPNAME` is the upper-cased value of `wx.App.GetAppName` ). This is useful in order to be able to run applications using this function without installing them as you can simply set this environment variable to the source directory location to allow the application to find its files there.



Return type
`string`





See also


[`GetLocalDataDir`](#wx.StandardPaths.GetLocalDataDir "wx.StandardPaths.GetLocalDataDir")





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetDocumentsDir(self) -> str:
        """ 

`GetDocumentsDir`(*self*)[¶](#wx.StandardPaths.GetDocumentsDir "Permalink to this definition")
Same as calling [`GetUserDir`](#wx.StandardPaths.GetUserDir "wx.StandardPaths.GetUserDir") with Dir\_Documents parameter.



Return type
`string`





New in version 2.7.0.




See also


[`GetAppDocumentsDir`](#wx.StandardPaths.GetAppDocumentsDir "wx.StandardPaths.GetAppDocumentsDir") , [`GetUserDir`](#wx.StandardPaths.GetUserDir "wx.StandardPaths.GetUserDir")





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetExecutablePath(self) -> str:
        """ 

`GetExecutablePath`(*self*)[¶](#wx.StandardPaths.GetExecutablePath "Permalink to this definition")
Return the directory and the filename for the current executable.


Example return values:


* Unix: `/usr/local/bin/exename`
* Windows: `"C:\Programs\AppFolder\exename.exe"`
* Mac: `/Applications/exename` .app/Contents/MacOS/exename



Return type
`string`






            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetFileLayout(self) -> 'FileLayout':
        """ 

`GetFileLayout`(*self*)[¶](#wx.StandardPaths.GetFileLayout "Permalink to this definition")
Returns the current file layout.



Return type
 [wx.StandardPaths.FileLayout](wx.StandardPaths.FileLayout.enumeration.html#wx-standardpaths-filelayout)





New in version 4.1/wxWidgets-3.1.1.




See also


[`SetFileLayout`](#wx.StandardPaths.SetFileLayout "wx.StandardPaths.SetFileLayout")





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetInstallPrefix(self) -> str:
        """ 

`GetInstallPrefix`(*self*)[¶](#wx.StandardPaths.GetInstallPrefix "Permalink to this definition")
Return the program installation prefix, e.g. `/usr` , `/opt` or `/home/zeitlin` .


If the prefix had been previously by [`SetInstallPrefix`](#wx.StandardPaths.SetInstallPrefix "wx.StandardPaths.SetInstallPrefix") , returns that value, otherwise tries to determine it automatically (Linux only right now) and finally returns the default `/usr/local` value if it failed.



Return type
`string`





Availability


Only available for GTK.




Note


This function is only available under Unix platforms (but not limited to wxGTK mentioned below).





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetLocalDataDir(self) -> str:
        """ 

`GetLocalDataDir`(*self*)[¶](#wx.StandardPaths.GetLocalDataDir "Permalink to this definition")
Return the location for application data files which are host-specific and can’t, or shouldn’t, be shared with the other machines.


This is the same as [`GetDataDir`](#wx.StandardPaths.GetDataDir "wx.StandardPaths.GetDataDir") except under Unix where it returns `/etc/appinfo` .



Return type
`string`






            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetLocalizedResourcesDir(self, lang, category=ResourceCat_None) -> str:
        """ 

`GetLocalizedResourcesDir`(*self*, *lang*, *category=ResourceCat\_None*)[¶](#wx.StandardPaths.GetLocalizedResourcesDir "Permalink to this definition")
Return the localized resources directory containing the resource files of the specified category for the given language.


In general this is just the same as *lang* subdirectory of [`GetResourcesDir`](#wx.StandardPaths.GetResourcesDir "wx.StandardPaths.GetResourcesDir") (or `lang.lproj` under macOS) but is something quite different for message catalog category under Unix where it returns the standard `prefix/share/locale/lang/LC_MESSAGES` directory.



Parameters
* **lang** (*string*) –
* **category** ([*ResourceCat*](wx.StandardPaths.ResourceCat.enumeration.html "ResourceCat")) –



Return type
`string`





New in version 2.7.0.





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetPluginsDir(self) -> str:
        """ 

`GetPluginsDir`(*self*)[¶](#wx.StandardPaths.GetPluginsDir "Permalink to this definition")
Return the directory where the loadable modules (plugins) live.


Example return values:


* Unix: `prefix/lib/appinfo`
* Windows: the directory of the executable file
* Mac: `appinfo.app/Contents/PlugIns` bundle subdirectory



Return type
`string`





See also


*DynamicLibrary*





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetResourcesDir(self) -> str:
        """ 

`GetResourcesDir`(*self*)[¶](#wx.StandardPaths.GetResourcesDir "Permalink to this definition")
Return the directory where the application resource files are located.


The resources are the auxiliary data files needed for the application to run and include, for example, image and sound files it might use.


This function is the same as [`GetDataDir`](#wx.StandardPaths.GetDataDir "wx.StandardPaths.GetDataDir") for all platforms except macOS. Example return values:


* Unix: `prefix/share/appinfo`
* Windows: the directory where the executable file is located
* Mac: `appinfo.app/Contents/Resources` bundle subdirectory



Return type
`string`





New in version 2.7.0.




See also


[`GetLocalizedResourcesDir`](#wx.StandardPaths.GetLocalizedResourcesDir "wx.StandardPaths.GetLocalizedResourcesDir")





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetTempDir(self) -> str:
        """ 

`GetTempDir`(*self*)[¶](#wx.StandardPaths.GetTempDir "Permalink to this definition")
Return the directory for storing temporary files, for the current user.


Same as `FileName.GetTempDir` . To create unique temporary files, it is best to use `FileName.CreateTempFileName` for correct behaviour when multiple processes are attempting to create temporary files.



Return type
`string`





New in version 2.7.2.





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetUserConfigDir(self) -> str:
        """ 

`GetUserConfigDir`(*self*)[¶](#wx.StandardPaths.GetUserConfigDir "Permalink to this definition")
Return the directory for the user config files.


This directory is:


* Unix: `~` (the home directory) or `XDG_CONFIG_HOME` depending on [`GetFileLayout`](#wx.StandardPaths.GetFileLayout "wx.StandardPaths.GetFileLayout") return value
* Windows: `"C:\Users\username\AppData\Roaming"` or `"C:\Documents and Settings\username\Application Data"`
* Mac: `~/Library/Preferences`


Only use this method if you have a single configuration file to put in this directory, otherwise [`GetUserDataDir`](#wx.StandardPaths.GetUserDataDir "wx.StandardPaths.GetUserDataDir") is more appropriate as the latter adds `appinfo` to the path, unlike this function.



Return type
`string`






            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetUserDataDir(self) -> str:
        """ 

`GetUserDataDir`(*self*)[¶](#wx.StandardPaths.GetUserDataDir "Permalink to this definition")
Return the directory for the user-dependent application data files:


* Unix: `~/` .appinfo
* Windows: `"C:\Users\username\AppData\Roaming\appinfo"` or `"C:\Documents and Settings\username\Application Data\appinfo"`
* Mac: `"~/Library/Application Support/appinfo"`



Return type
`string`






            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetUserDir(self, userDir: Dir) -> str:
        """ 

`GetUserDir`(*self*, *userDir*)[¶](#wx.StandardPaths.GetUserDir "Permalink to this definition")
Return the path of the specified user data directory.


If the value could not be determined the users home directory is returned.



Parameters
**userDir** ([*Dir*](wx.StandardPaths.Dir.enumeration.html "Dir")) – 



Return type
`string`





New in version 4.1/wxWidgets-3.1.0.




Note


On Unix this (newer) method always respects the XDG base directory specification, even if [`SetFileLayout`](#wx.StandardPaths.SetFileLayout "wx.StandardPaths.SetFileLayout") with `FileLayout_XDG` hadn’t been called.





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def GetUserLocalDataDir(self) -> str:
        """ 

`GetUserLocalDataDir`(*self*)[¶](#wx.StandardPaths.GetUserLocalDataDir "Permalink to this definition")
Return the directory for user data files which shouldn’t be shared with the other machines.


This is the same as [`GetUserDataDir`](#wx.StandardPaths.GetUserDataDir "wx.StandardPaths.GetUserDataDir") for all platforms except Windows where it returns `"C:\Users\username\AppData\Local\appinfo"` or `"C:\Documents and Settings\username\Local Settings\Application Data\appinfo"`



Return type
`string`






            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    @staticmethod
    def MSWGetShellDir(csidl: int) -> str:
        """ 

*static* `MSWGetShellDir`(*csidl*)[¶](#wx.StandardPaths.MSWGetShellDir "Permalink to this definition")
Returns location of Windows shell special folder.


This function is, by definition, MSW-specific. It can be used to access pre-defined shell directories not covered by the existing methods of this class, e.g.:



```
if wx.Platform == '__WXMSW__':
    # get the location of files waiting to be burned on a CD
    cdburnArea = wx.StandardPaths.MSWGetShellDir(CSIDL_CDBURN_AREA)

# endif __WXMSW__

```



Parameters
**csidl** (*int*) – 



Return type
`string`





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def MakeConfigFileName(self, basename, conv=ConfigFileConv_Ext) -> str:
        """ 

`MakeConfigFileName`(*self*, *basename*, *conv=ConfigFileConv\_Ext*)[¶](#wx.StandardPaths.MakeConfigFileName "Permalink to this definition")
Return the file name which would be used by  [wx.FileConfig](wx.FileConfig.html#wx-fileconfig) if it were constructed with *basename*.


*conv* is used to construct the name of the file under Unix and only matters when using the class file layout, i.e. if [`SetFileLayout`](#wx.StandardPaths.SetFileLayout "wx.StandardPaths.SetFileLayout") had *not* been called with `FileLayout_XDG` argument. In this case, this argument is used to determine whether to use an extension or a leading dot. When following XDG specification, the function always appends the extension, regardless of *conv* value. Finally, this argument is not used at all under non-Unix platforms.



Parameters
* **basename** (*string*) –
* **conv** ([*ConfigFileConv*](wx.StandardPaths.ConfigFileConv.enumeration.html "ConfigFileConv")) –



Return type
`string`





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def SetFileLayout(self, layout: FileLayout) -> None:
        """ 

`SetFileLayout`(*self*, *layout*)[¶](#wx.StandardPaths.SetFileLayout "Permalink to this definition")
Sets the current file layout.


The default layout is `FileLayout_Classic` for compatibility, however newer applications are encouraged to set it to `FileLayout_XDG` on program startup.



Parameters
**layout** ([*FileLayout*](wx.StandardPaths.FileLayout.enumeration.html "FileLayout")) – 





New in version 4.1/wxWidgets-3.1.1.





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def SetInstallPrefix(self, prefix: str) -> None:
        """ 

`SetInstallPrefix`(*self*, *prefix*)[¶](#wx.StandardPaths.SetInstallPrefix "Permalink to this definition")
Lets  [wx.StandardPaths](#wx-standardpaths) know about the real program installation prefix on a Unix system.


By default, the value returned by [`GetInstallPrefix`](#wx.StandardPaths.GetInstallPrefix "wx.StandardPaths.GetInstallPrefix") is used.


Although under Linux systems the program prefix may usually be determined automatically, portable programs should call this function. Usually the prefix is set during program configuration if using `GNU` autotools and so it is enough to pass its value defined in `config.h` to this function.



Parameters
**prefix** (*string*) – 





Availability


Only available for GTK.




Note


This function is only available under Unix platforms (but not limited to wxGTK mentioned below).





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def UseAppInfo(self, info: int) -> None:
        """ 

`UseAppInfo`(*self*, *info*)[¶](#wx.StandardPaths.UseAppInfo "Permalink to this definition")
Controls what application information is used when constructing paths that should be unique to this program, such as the application data directory, the plugins directory on Unix, etc.


Valid values for *info* are:


* `AppInfo_None` : use neither application nor vendor name in the paths.
* `AppInfo_AppName` : use the application name in the paths.
* `AppInfo_VendorName` : use the vendor name in the paths, usually used combined with `AppInfo_AppName` , i.e. as `AppInfo_AppName | AppInfo_VendorName` .


By default, only the application name is used.



Parameters
**info** (*int*) – 





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.StandardPaths.__init__ "Permalink to this definition")
Protected default constructor.


This constructor is protected in order to prevent creation of objects of this class as [`Get`](#wx.StandardPaths.Get "wx.StandardPaths.Get") should be used instead to access the unique global  [wx.StandardPaths](#wx-standardpaths) object of the correct type.




            Source: https://docs.wxpython.org/wx.StandardPaths.html
        """

    AppDocumentsDir: str  # `AppDocumentsDir`[¶](#wx.StandardPaths.AppDocumentsDir "Permalink to this definition")See [`GetAppDocumentsDir`](#wx.StandardPaths.GetAppDocumentsDir "wx.StandardPaths.GetAppDocumentsDir")
    ConfigDir: str  # `ConfigDir`[¶](#wx.StandardPaths.ConfigDir "Permalink to this definition")See [`GetConfigDir`](#wx.StandardPaths.GetConfigDir "wx.StandardPaths.GetConfigDir")
    DataDir: str  # `DataDir`[¶](#wx.StandardPaths.DataDir "Permalink to this definition")See [`GetDataDir`](#wx.StandardPaths.GetDataDir "wx.StandardPaths.GetDataDir")
    DocumentsDir: str  # `DocumentsDir`[¶](#wx.StandardPaths.DocumentsDir "Permalink to this definition")See [`GetDocumentsDir`](#wx.StandardPaths.GetDocumentsDir "wx.StandardPaths.GetDocumentsDir")
    ExecutablePath: str  # `ExecutablePath`[¶](#wx.StandardPaths.ExecutablePath "Permalink to this definition")See [`GetExecutablePath`](#wx.StandardPaths.GetExecutablePath "wx.StandardPaths.GetExecutablePath")
    InstallPrefix: str  # `InstallPrefix`[¶](#wx.StandardPaths.InstallPrefix "Permalink to this definition")See [`GetInstallPrefix`](#wx.StandardPaths.GetInstallPrefix "wx.StandardPaths.GetInstallPrefix") and [`SetInstallPrefix`](#wx.StandardPaths.SetInstallPrefix "wx.StandardPaths.SetInstallPrefix")
    LocalDataDir: str  # `LocalDataDir`[¶](#wx.StandardPaths.LocalDataDir "Permalink to this definition")See [`GetLocalDataDir`](#wx.StandardPaths.GetLocalDataDir "wx.StandardPaths.GetLocalDataDir")
    PluginsDir: str  # `PluginsDir`[¶](#wx.StandardPaths.PluginsDir "Permalink to this definition")See [`GetPluginsDir`](#wx.StandardPaths.GetPluginsDir "wx.StandardPaths.GetPluginsDir")
    ResourcesDir: str  # `ResourcesDir`[¶](#wx.StandardPaths.ResourcesDir "Permalink to this definition")See [`GetResourcesDir`](#wx.StandardPaths.GetResourcesDir "wx.StandardPaths.GetResourcesDir")
    TempDir: str  # `TempDir`[¶](#wx.StandardPaths.TempDir "Permalink to this definition")See [`GetTempDir`](#wx.StandardPaths.GetTempDir "wx.StandardPaths.GetTempDir")
    UserConfigDir: str  # `UserConfigDir`[¶](#wx.StandardPaths.UserConfigDir "Permalink to this definition")See [`GetUserConfigDir`](#wx.StandardPaths.GetUserConfigDir "wx.StandardPaths.GetUserConfigDir")
    UserDataDir: str  # `UserDataDir`[¶](#wx.StandardPaths.UserDataDir "Permalink to this definition")See [`GetUserDataDir`](#wx.StandardPaths.GetUserDataDir "wx.StandardPaths.GetUserDataDir")
    UserLocalDataDir: str  # `UserLocalDataDir`[¶](#wx.StandardPaths.UserLocalDataDir "Permalink to this definition")See [`GetUserLocalDataDir`](#wx.StandardPaths.GetUserLocalDataDir "wx.StandardPaths.GetUserLocalDataDir")



class StaticBitmap(Control):
    """ **Possible constructors**:



```
StaticBitmap()

StaticBitmap(parent, id=ID_ANY, bitmap=NullBitmap, pos=DefaultPosition,
             size=DefaultSize, style=0, name=StaticBitmapNameStr)

```


A static bitmap control displays a bitmap.


  


        Source: https://docs.wxpython.org/wx.StaticBitmap.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.StaticBitmap.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, bitmap=NullBitmap, pos=DefaultPosition, size=DefaultSize, style=0, name=StaticBitmapNameStr)*


Constructor, creating and showing a static bitmap control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Should not be `None`.
* **id** (*wx.WindowID*) – Control identifier. A value of -1 denotes a default value.
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size.
* **style** (*long*) – Window style. See  [wx.StaticBitmap](#wx-staticbitmap).
* **name** (*string*) – Window name.




Bitmap label.



See also


[`Create`](#wx.StaticBitmap.Create "wx.StaticBitmap.Create")





---

  





            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    def Create(self, parent, id=ID_ANY, bitmap=NullBitmap, pos=DefaultPosition, size=DefaultSize, style=0, name=StaticBitmapNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *bitmap=NullBitmap*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=StaticBitmapNameStr*)[¶](#wx.StaticBitmap.Create "Permalink to this definition")
Creation function, for two-step construction.


For details see  [wx.StaticBitmap](#wx-staticbitmap).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    def GetBitmap(self) -> 'Bitmap':
        """ 

`GetBitmap`(*self*)[¶](#wx.StaticBitmap.GetBitmap "Permalink to this definition")
Returns the bitmap currently used in the control.


Notice that this method can be called even if [`SetIcon`](#wx.StaticBitmap.SetIcon "wx.StaticBitmap.SetIcon") had been used.



Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)





See also


[`SetBitmap`](#wx.StaticBitmap.SetBitmap "wx.StaticBitmap.SetBitmap")





            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.StaticBitmap.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    def GetIcon(self) -> 'Icon':
        """ 

`GetIcon`(*self*)[¶](#wx.StaticBitmap.GetIcon "Permalink to this definition")
Returns the icon currently used in the control.


Notice that this method can only be called if [`SetIcon`](#wx.StaticBitmap.SetIcon "wx.StaticBitmap.SetIcon") had been used: an icon can’t be retrieved from the control if a bitmap had been set (using [`wx.StaticBitmap.SetBitmap`](#wx.StaticBitmap.SetBitmap "wx.StaticBitmap.SetBitmap") ).



Return type
 [wx.Icon](wx.Icon.html#wx-icon)





See also


[`SetIcon`](#wx.StaticBitmap.SetIcon "wx.StaticBitmap.SetIcon")





            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    def GetScaleMode(self) -> 'ScaleMode':
        """ 

`GetScaleMode`(*self*)[¶](#wx.StaticBitmap.GetScaleMode "Permalink to this definition")
Returns the scale mode currently used in the control.



Return type
 [wx.GenericStaticBitmap.ScaleMode](wx.GenericStaticBitmap.ScaleMode.enumeration.html#wx-genericstaticbitmap-scalemode)





New in version 4.1/wxWidgets-3.1.0.




See also


[`SetScaleMode`](#wx.StaticBitmap.SetScaleMode "wx.StaticBitmap.SetScaleMode")





            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    def SetBitmap(self, label: Union['Bitmap', 'BitmapBundle']) -> None:
        """ 

`SetBitmap`(*self*, *label*)[¶](#wx.StaticBitmap.SetBitmap "Permalink to this definition")
Sets the bitmap label.



Parameters
**label** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – The new bitmap.





See also


[`GetBitmap`](#wx.StaticBitmap.GetBitmap "wx.StaticBitmap.GetBitmap")





            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    def SetIcon(self, label: 'Icon') -> None:
        """ 

`SetIcon`(*self*, *label*)[¶](#wx.StaticBitmap.SetIcon "Permalink to this definition")
Sets the label to the given icon.



Parameters
**label** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – The new icon.






            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    def SetScaleMode(self, scaleMode: ScaleMode) -> None:
        """ 

`SetScaleMode`(*self*, *scaleMode*)[¶](#wx.StaticBitmap.SetScaleMode "Permalink to this definition")
Sets the scale mode.



Parameters
**scaleMode** ([*ScaleMode*](wx.GenericStaticBitmap.ScaleMode.enumeration.html "ScaleMode")) – Controls how the bitmap is scaled inside the control.





New in version 4.1/wxWidgets-3.1.0.




Note


Currently only the generic implementation supports all scaling modes. You may use generic implementation GenericStaticBitmap declared in <wx/generic/statbmpg.h> in all ports.




See also


[`GetScaleMode`](#wx.StaticBitmap.GetScaleMode "wx.StaticBitmap.GetScaleMode")





            Source: https://docs.wxpython.org/wx.StaticBitmap.html
        """

    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.StaticBitmap.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.StaticBitmap.GetBitmap "wx.StaticBitmap.GetBitmap") and [`SetBitmap`](#wx.StaticBitmap.SetBitmap "wx.StaticBitmap.SetBitmap")
    Icon: '_Icon'  # `Icon`[¶](#wx.StaticBitmap.Icon "Permalink to this definition")See [`GetIcon`](#wx.StaticBitmap.GetIcon "wx.StaticBitmap.GetIcon") and [`SetIcon`](#wx.StaticBitmap.SetIcon "wx.StaticBitmap.SetIcon")



class StaticBox(Control):
    """ **Possible constructors**:



```
StaticBox()

StaticBox(parent, id=ID_ANY, label="", pos=DefaultPosition,
          size=DefaultSize, style=0, name=StaticBoxNameStr)

```


A static box is a rectangle drawn around other windows to denote a
logical grouping of items.


  


        Source: https://docs.wxpython.org/wx.StaticBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.StaticBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, style=0, name=StaticBoxNameStr)*


Constructor, creating and showing a static box.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **label** (*string*) – Text to be displayed in the static box, the empty string for no label.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Checkbox size. If `wx.DefaultSize` is specified then a default size is chosen.
* **style** (*long*) – Window style. There are no StaticBox-specific styles, but generic `ALIGN_LEFT`, `ALIGN_CENTRE_HORIZONTAL` and `ALIGN_RIGHT` can be used here to change the position of the static box label when using wxGTK (these styles are ignored under the other platforms currently).
* **name** (*string*) – Window name.





See also


[`Create`](#wx.StaticBox.Create "wx.StaticBox.Create")





---

  





            Source: https://docs.wxpython.org/wx.StaticBox.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, style=0, name=StaticBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=StaticBoxNameStr*)[¶](#wx.StaticBox.Create "Permalink to this definition")
Creates the static box for two-step construction.


See  [wx.StaticBox](#wx-staticbox) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StaticBox.html
        """

    def Enable(self, enable: bool=True) -> bool:
        """ 

`Enable`(*self*, *enable=True*)[¶](#wx.StaticBox.Enable "Permalink to this definition")
Enables or disables the box without affecting its label window, if any.


 [wx.StaticBox](#wx-staticbox) overrides [`wx.Window.Enable`](wx.Window.html#wx.Window.Enable "wx.Window.Enable") in order to avoid disabling the control used as a label, if this box is using one. This is done in order to allow using a  [wx.CheckBox](wx.CheckBox.html#wx-checkbox), for example, label and enable or disable the box according to the state of the checkbox: if disabling the box also disabled the checkbox in this situation, it would make it impossible for the user to re-enable the box after disabling it, so the checkbox stays enabled even if `box->Enable(false)` is called.


However with the actual behaviour, implemented in this overridden method, the following code (shown using `C++11` only for convenience, this behaviour is not C++11-specific):



```
# NOTE: wxPython doesn't yet support using a control in place of the label...
check = wx.CheckBox(parent, wx.ID_ANY, "Use the box")
box = wx.StaticBox(parent, wx.ID_ANY, check)
check.Bind(wx.EVT_CHECKBOX, lambda evt: box.Enable(evt.IsChecked()))

```


does work as expected.


Please note that overriding [`Enable`](#wx.StaticBox.Enable "wx.StaticBox.Enable") to not actually disable this window itself has two possibly unexpected consequences:


* The box retains its enabled status, i.e. `IsEnabled` still returns `True`, after calling `Enable(false)` .
* The box children are enabled or disabled when the box is, which can result in the loss of their original state. E.g. if a box child is initially disabled, then the box itself is disabled and, finally, the box is enabled again, this child will end up being enabled too (this wouldn’t happen with any other parent window as its children would inherit the disabled state from the parent instead of being really disabled themselves when it is disabled). To avoid this problem, consider using `wx.wxEVT_UPDATE_UI` to ensure that the child state is always correct or restoring it manually after re-enabling the box.



Parameters
**enable** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StaticBox.html
        """

    def GetBordersForSizer(self) -> tuple:
        """ 

`GetBordersForSizer`(*self*)[¶](#wx.StaticBox.GetBordersForSizer "Permalink to this definition")
Returns extra space that may be needed for borders within a StaticBox.



Return type
*tuple*



Returns
( *borderTop*, *borderOther* )






            Source: https://docs.wxpython.org/wx.StaticBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.StaticBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.StaticBox.html
        """



_StaticBox: TypeAlias = StaticBox

class StaticBoxSizer(BoxSizer):
    """ **Possible constructors**:



```
StaticBoxSizer(box, orient=HORIZONTAL)

StaticBoxSizer(orient, parent, label="")

```


StaticBoxSizer is a sizer derived from BoxSizer but adds a static
box around the sizer.


  


        Source: https://docs.wxpython.org/wx.StaticBoxSizer.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.StaticBoxSizer.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, box, orient=HORIZONTAL)*


This constructor uses an already existing static box.



Parameters
* **box** ([*wx.StaticBox*](wx.StaticBox.html#wx.StaticBox "wx.StaticBox")) – The static box to associate with the sizer (which will take its ownership).
* **orient** (*int*) – Can be either `VERTICAL` or `HORIZONTAL` .






---

  



**\_\_init\_\_** *(self, orient, parent, label=””)*


This constructor creates a new static box with the given label and parent window.



Parameters
* **orient** (*int*) –
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **label** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.StaticBoxSizer.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.StaticBoxSizer.CalcMin "Permalink to this definition")
Implements the calculation of a box sizer’s minimal.


It is used internally only and must not be called by the user. Documented for information.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.StaticBoxSizer.html
        """

    def GetStaticBox(self) -> 'StaticBox':
        """ 

`GetStaticBox`(*self*)[¶](#wx.StaticBoxSizer.GetStaticBox "Permalink to this definition")
Returns the static box associated with the sizer.



Return type
 [wx.StaticBox](wx.StaticBox.html#wx-staticbox)






            Source: https://docs.wxpython.org/wx.StaticBoxSizer.html
        """

    def RepositionChildren(self, minSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`RepositionChildren`(*self*, *minSize*)[¶](#wx.StaticBoxSizer.RepositionChildren "Permalink to this definition")
Method which must be overridden in the derived sizer classes.


The implementation should reposition the children using the current total size available to the sizer ( `m_size` ) and the size computed by the last call to [`CalcMin`](#wx.StaticBoxSizer.CalcMin "wx.StaticBoxSizer.CalcMin") .



Parameters
**minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





New in version 4.1/wxWidgets-3.1.3: ,
before this version RecalcSizes() method not taking any arguments had to be overridden in the derived classes instead.





            Source: https://docs.wxpython.org/wx.StaticBoxSizer.html
        """

    StaticBox: '_StaticBox'  # `StaticBox`[¶](#wx.StaticBoxSizer.StaticBox "Permalink to this definition")See [`GetStaticBox`](#wx.StaticBoxSizer.GetStaticBox "wx.StaticBoxSizer.GetStaticBox")



class StaticLine(Control):
    """ **Possible constructors**:



```
StaticLine()

StaticLine(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
           style=LI_HORIZONTAL, name=StaticLineNameStr)

```


A static line is just a line which may be used in a dialog to separate
the groups of controls.


  


        Source: https://docs.wxpython.org/wx.StaticLine.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.StaticLine.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=LI\_HORIZONTAL, name=StaticLineNameStr)*


Constructor, creating and showing a static line.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `wx.ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Size. Note that either the height or the width (depending on whether the line if horizontal or vertical) is ignored.
* **style** (*long*) – Window style (either `wx.LI_HORIZONTAL` or `wx.LI_VERTICAL`).
* **name** (*string*) – Window name.





See also


[`Create`](#wx.StaticLine.Create "wx.StaticLine.Create")





---

  





            Source: https://docs.wxpython.org/wx.StaticLine.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=LI_HORIZONTAL, name=StaticLineNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=LI\_HORIZONTAL*, *name=StaticLineNameStr*)[¶](#wx.StaticLine.Create "Permalink to this definition")
Creates the static line for two-step construction.


See  [wx.StaticLine](#wx-staticline) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StaticLine.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.StaticLine.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.StaticLine.html
        """

    @staticmethod
    def GetDefaultSize() -> int:
        """ 

*static* `GetDefaultSize`()[¶](#wx.StaticLine.GetDefaultSize "Permalink to this definition")
This static function returns the size which will be given to the smaller dimension of the static line, i.e.


its height for a horizontal line or its width for a vertical one.



Return type
*int*






            Source: https://docs.wxpython.org/wx.StaticLine.html
        """

    def IsVertical(self) -> bool:
        """ 

`IsVertical`(*self*)[¶](#wx.StaticLine.IsVertical "Permalink to this definition")
Returns `True` if the line is vertical, `False` if horizontal.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StaticLine.html
        """



LI_HORIZONTAL: int  # Creates a horizontal line.

LI_VERTICAL: int  # Creates a vertical line. ^^

class StaticText(Control):
    """ **Possible constructors**:



```
StaticText()

StaticText(parent, id=ID_ANY, label="", pos=DefaultPosition,
           size=DefaultSize, style=0, name=StaticTextNameStr)

```


A static text control displays one or more lines of read-only text.


  


        Source: https://docs.wxpython.org/wx.StaticText.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.StaticText.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, label=””, pos=DefaultPosition, size=DefaultSize, style=0, name=StaticTextNameStr)*


Constructor, creating and showing a text control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Should not be `None`.
* **id** (*wx.WindowID*) – Control identifier. A value of -1 denotes a default value.
* **label** (*string*) – Text label.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size.
* **style** (*long*) – Window style. See  [wx.StaticText](#wx-statictext).
* **name** (*string*) – Window name.





See also


[`Create`](#wx.StaticText.Create "wx.StaticText.Create")





---

  





            Source: https://docs.wxpython.org/wx.StaticText.html
        """

    def Create(self, parent, id=ID_ANY, label="", pos=DefaultPosition, size=DefaultSize, style=0, name=StaticTextNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *label=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=StaticTextNameStr*)[¶](#wx.StaticText.Create "Permalink to this definition")
Creation function, for two-step construction.


For details see  [wx.StaticText](#wx-statictext).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **label** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StaticText.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.StaticText.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.StaticText.html
        """

    def IsEllipsized(self) -> bool:
        """ 

`IsEllipsized`(*self*)[¶](#wx.StaticText.IsEllipsized "Permalink to this definition")
Returns `True` if the window styles for this control contains one of the `ST_ELLIPSIZE_START` , `ST_ELLIPSIZE_MIDDLE` or `ST_ELLIPSIZE_END` styles.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StaticText.html
        """

    def SetLabel(self, label: str) -> None:
        """ 

`SetLabel`(*self*, *label*)[¶](#wx.StaticText.SetLabel "Permalink to this definition")
Change the label shown in the control.


Notice that since wxWidgets 3.1.1 this function is guaranteed not to do anything if the label didn’t really change, so there is no benefit to checking if the new label is different from the current one in the application code.



Parameters
**label** (*string*) – 





See also


[`wx.Control.SetLabel`](wx.Control.html#wx.Control.SetLabel "wx.Control.SetLabel")





            Source: https://docs.wxpython.org/wx.StaticText.html
        """

    def Wrap(self, width: int) -> None:
        """ 

`Wrap`(*self*, *width*)[¶](#wx.StaticText.Wrap "Permalink to this definition")
This functions wraps the controls label so that each of its lines becomes at most *width* pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long).


If *width* is negative, no wrapping is done. Note that this width is not necessarily the total width of the control, since a few pixels for the border (depending on the controls border style) may be added.



Parameters
**width** (*int*) – 





New in version 2.6.2.





            Source: https://docs.wxpython.org/wx.StaticText.html
        """



ST_NO_AUTORESIZE: int  # By default, the control will adjust its size to exactly fit to the size of the text when SetLabel  is called. If this style flag is given, the control will not change its size (this style is especially useful with controls which also have the  ALIGN_RIGHT   or the   ALIGN_CENTRE_HORIZONTAL   style because otherwise they won’t make sense any longer after a call to  SetLabel).

ST_ELLIPSIZE_START: int  # If the labeltext width exceeds the control width, replace the beginning of the label with an ellipsis; uses wx.Control.Ellipsize .

ST_ELLIPSIZE_MIDDLE: int  # If the label text width exceeds the control width, replace the middle of the label with an ellipsis; uses wx.Control.Ellipsize .

ST_ELLIPSIZE_END: int  # If the label text width exceeds the control width, replace the end of the label with an ellipsis; uses wx.Control.Ellipsize . ^^

class StatusBar(Control):
    """ **Possible constructors**:



```
StatusBar()

StatusBar(parent, id=ID_ANY, style=STB_DEFAULT_STYLE,
          name=StatusBarNameStr)

```


A status bar is a narrow window that can be placed along the bottom of
a frame to give small amounts of status information.


  


        Source: https://docs.wxpython.org/wx.StatusBar.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.StatusBar.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, style=STB\_DEFAULT\_STYLE, name=StatusBarNameStr)*


Constructor, creating the window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The window parent, usually a frame.
* **id** (*wx.WindowID*) – The window identifier. It may take a value of -1 to indicate a default value.
* **style** (*long*) – The window style. See  [wx.StatusBar](#wx-statusbar).
* **name** (*string*) – The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.





See also


[`Create`](#wx.StatusBar.Create "wx.StatusBar.Create")





---

  





            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def Create(self, parent, id=ID_ANY, style=STB_DEFAULT_STYLE, name=StatusBarNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *style=STB\_DEFAULT\_STYLE*, *name=StatusBarNameStr*)[¶](#wx.StatusBar.Create "Permalink to this definition")
Creates the window, for two-step construction.


See  [wx.StatusBar](#wx-statusbar) for details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def GetBorders(self) -> 'Size':
        """ 

`GetBorders`(*self*)[¶](#wx.StatusBar.GetBorders "Permalink to this definition")
Returns the horizontal and vertical borders used when rendering the field text inside the field area.


Note that the rect returned by [`GetFieldRect`](#wx.StatusBar.GetFieldRect "wx.StatusBar.GetFieldRect") already accounts for the presence of horizontal and vertical border returned by this function.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.StatusBar.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def GetField(self, n: int) -> 'StatusBarPane':
        """ 

`GetField`(*self*, *n*)[¶](#wx.StatusBar.GetField "Permalink to this definition")
Returns the  [wx.StatusBarPane](wx.StatusBarPane.html#wx-statusbarpane) representing the *n-th* field.



Parameters
**n** (*int*) – 



Return type
 [wx.StatusBarPane](wx.StatusBarPane.html#wx-statusbarpane)






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def GetFieldRect(self, i) -> 'Rect':
        """ 

`GetFieldRect`(*self*, *i*)[¶](#wx.StatusBar.GetFieldRect "Permalink to this definition")
Returns the size and position of a field’s internal bounding rectangle.



Return type
 [wx.Rect](wx.Rect.html#wx-rect)






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def GetFieldsCount(self) -> int:
        """ 

`GetFieldsCount`(*self*)[¶](#wx.StatusBar.GetFieldsCount "Permalink to this definition")
Returns the number of fields in the status bar.



Return type
*int*






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def GetStatusStyle(self, n: int) -> int:
        """ 

`GetStatusStyle`(*self*, *n*)[¶](#wx.StatusBar.GetStatusStyle "Permalink to this definition")
Returns the style of the *n-th* field.


See [`wx.StatusBarPane.GetStyle`](wx.StatusBarPane.html#wx.StatusBarPane.GetStyle "wx.StatusBarPane.GetStyle") for more info.



Parameters
**n** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def GetStatusText(self, i: int=0) -> str:
        """ 

`GetStatusText`(*self*, *i=0*)[¶](#wx.StatusBar.GetStatusText "Permalink to this definition")
Returns the string associated with a status bar field.



Parameters
**i** (*int*) – The number of the status field to retrieve, starting from zero.



Return type
`string`



Returns
The status field string if the field is valid, otherwise the empty string.





See also


[`SetStatusText`](#wx.StatusBar.SetStatusText "wx.StatusBar.SetStatusText")





            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def GetStatusWidth(self, n: int) -> int:
        """ 

`GetStatusWidth`(*self*, *n*)[¶](#wx.StatusBar.GetStatusWidth "Permalink to this definition")
Returns the width of the *n-th* field.


See [`wx.StatusBarPane.GetWidth`](wx.StatusBarPane.html#wx.StatusBarPane.GetWidth "wx.StatusBarPane.GetWidth") for more info.



Parameters
**n** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def PopStatusText(self, field: int=0) -> None:
        """ 

`PopStatusText`(*self*, *field=0*)[¶](#wx.StatusBar.PopStatusText "Permalink to this definition")
Restores the text to the value it had before the last call to [`PushStatusText`](#wx.StatusBar.PushStatusText "wx.StatusBar.PushStatusText") .


Notice that if [`SetStatusText`](#wx.StatusBar.SetStatusText "wx.StatusBar.SetStatusText") had been called in the meanwhile, [`PopStatusText`](#wx.StatusBar.PopStatusText "wx.StatusBar.PopStatusText") will not change the text, i.e. it does not override explicit changes to status text but only restores the saved text if it hadn’t been changed since.



Parameters
**field** (*int*) – 





See also


[`PushStatusText`](#wx.StatusBar.PushStatusText "wx.StatusBar.PushStatusText")





            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def PushStatusText(self, string, field=0) -> None:
        """ 

`PushStatusText`(*self*, *string*, *field=0*)[¶](#wx.StatusBar.PushStatusText "Permalink to this definition")
Saves the current field text in a per-field stack, and sets the field text to the string passed as argument.



Parameters
* **string** (*string*) –
* **field** (*int*) –





See also


[`PopStatusText`](#wx.StatusBar.PopStatusText "wx.StatusBar.PopStatusText")





            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def SetFieldsCount(self, number=1, widths=None) -> None:
        """ 

`SetFieldsCount`(*self*, *number=1*, *widths=None*)[¶](#wx.StatusBar.SetFieldsCount "Permalink to this definition")
Sets the number of fields, and optionally the field widths.



Parameters
* **number** (*int*) – The number of fields. If this is greater than the previous number, then new fields with empty strings will be added to the status bar.
* **widths** (*list of integers*) – An array of n integers interpreted in the same way as in [`SetStatusWidths`](#wx.StatusBar.SetStatusWidths "wx.StatusBar.SetStatusWidths") .






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def SetMinHeight(self, height: int) -> None:
        """ 

`SetMinHeight`(*self*, *height*)[¶](#wx.StatusBar.SetMinHeight "Permalink to this definition")
Sets the minimal possible height for the status bar.


The real height may be bigger than the height specified here depending on the size of the font used by the status bar.



Parameters
**height** (*int*) – 






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def SetStatusStyles(self, styles) -> None:
        """ 

`SetStatusStyles`(*self*, *styles*)[¶](#wx.StatusBar.SetStatusStyles "Permalink to this definition")
Sets the styles of the fields in the status line which can make fields appear flat or raised instead of the standard sunken 3D border.



Parameters
**styles** (*list of integers*) – Contains an array of *n* integers with the styles for each field. There are four possible styles:
* `SB_NORMAL` (default): The field appears with the default native border.
* `SB_FLAT:` No border is painted around the field so that it appears flat.
* `SB_RAISED:` A raised 3D border is painted around the field.
* `SB_SUNKEN:` A sunken 3D border is painted around the field (this style is new since wxWidgets 2.9.5).









            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def SetStatusText(self, text, i=0) -> None:
        """ 

`SetStatusText`(*self*, *text*, *i=0*)[¶](#wx.StatusBar.SetStatusText "Permalink to this definition")
Sets the status text for the *i-th* field.


The given text will replace the current text. The display of the status bar is updated immediately, so there is no need to call [`wx.Window.Update`](wx.Window.html#wx.Window.Update "wx.Window.Update") after calling this function.


Note that if [`PushStatusText`](#wx.StatusBar.PushStatusText "wx.StatusBar.PushStatusText") had been called before the new text will also replace the last saved value to make sure that the next call to [`PopStatusText`](#wx.StatusBar.PopStatusText "wx.StatusBar.PopStatusText") doesn’t restore the old value, which was overwritten by the call to this function.



Parameters
* **text** (*string*) – The text to be set. Use an empty string (“”) to clear the field.
* **i** (*int*) – The field to set, starting from zero.





See also


[`GetStatusText`](#wx.StatusBar.GetStatusText "wx.StatusBar.GetStatusText") , [`wx.Frame.SetStatusText`](wx.Frame.html#wx.Frame.SetStatusText "wx.Frame.SetStatusText")





            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    def SetStatusWidths(self, widths: list[int]) -> None:
        """ 

`SetStatusWidths`(*self*, *widths*)[¶](#wx.StatusBar.SetStatusWidths "Permalink to this definition")
Sets the widths of the fields in the status line.


There are two types of fields: **fixed** widths and **variable** width fields. For the fixed width fields you should specify their (constant) width in pixels. For the variable width fields, specify a negative number which indicates how the field should expand: the space left for all variable width fields is divided between them according to the absolute value of this number. A variable width field with width of -2 gets twice as much of it as a field with width -1 and so on.


For example, to create one fixed width field of width 100 in the right part of the status bar and two more fields which get 66% and 33% of the remaining space correspondingly, you should use an array containing -2, -1 and 100.



Parameters
**widths** (*list of integers*) – Contains an array of n integers, each of which is either an absolute status field width in pixels if positive or indicates a variable width field if negative. The special value `None` means that all fields should get the same width.






            Source: https://docs.wxpython.org/wx.StatusBar.html
        """

    Borders: 'Size'  # `Borders`[¶](#wx.StatusBar.Borders "Permalink to this definition")See [`GetBorders`](#wx.StatusBar.GetBorders "wx.StatusBar.GetBorders")
    FieldRect: 'Rect'  # `FieldRect`[¶](#wx.StatusBar.FieldRect "Permalink to this definition")See [`GetFieldRect`](#wx.StatusBar.GetFieldRect "wx.StatusBar.GetFieldRect")
    FieldsCount: int  # `FieldsCount`[¶](#wx.StatusBar.FieldsCount "Permalink to this definition")See [`GetFieldsCount`](#wx.StatusBar.GetFieldsCount "wx.StatusBar.GetFieldsCount") and [`SetFieldsCount`](#wx.StatusBar.SetFieldsCount "wx.StatusBar.SetFieldsCount")
    StatusText: str  # `StatusText`[¶](#wx.StatusBar.StatusText "Permalink to this definition")See [`GetStatusText`](#wx.StatusBar.GetStatusText "wx.StatusBar.GetStatusText") and [`SetStatusText`](#wx.StatusBar.SetStatusText "wx.StatusBar.SetStatusText")



STB_SIZEGRIP: int  # Displays a gripper at the right-hand side of the status bar which can be used to resize the parent window.

STB_SHOW_TIPS: int  # Displays tooltips for those panes whose status text has been ellipsized/truncated because the status text doesn’t fit the pane width. Note that this style has effect only on wxGTK (with GTK+ >= 2.12) currently.

STB_ELLIPSIZE_START: int  # Replace the beginning of the status texts with an ellipsis when the status text widths exceed the status bar pane’s widths (uses wx.Control.Ellipsize ).

STB_ELLIPSIZE_MIDDLE: int  # Replace the middle of the status texts with an ellipsis when the status text widths exceed the status bar pane’s widths (uses wx.Control.Ellipsize ).

STB_ELLIPSIZE_END: int  # Replace the end of the status texts with an ellipsis when the status text widths exceed the status bar pane’s widths (uses wx.Control.Ellipsize ).

STB_DEFAULT_STYLE: int  # The default style: includes  STB_SIZEGRIP|wxSTB_SHOW_TIPS|wxSTB_ELLIPSIZE_END|wxFULL_REPAINT_ON_RESIZE . ^^

class StatusBarPane:
    """ **Possible constructors**:



```
StatusBarPane(style=SB_NORMAL, width=0)

```


A status bar pane data container used by StatusBar.


  


        Source: https://docs.wxpython.org/wx.StatusBarPane.html
    """
    def __init__(self, style=SB_NORMAL, width=0) -> None:
        """ 

`__init__`(*self*, *style=SB\_NORMAL*, *width=0*)[¶](#wx.StatusBarPane.__init__ "Permalink to this definition")
Constructs the pane with the given *style* and *width*.



Parameters
* **style** (*int*) –
* **width** (*int*) –






            Source: https://docs.wxpython.org/wx.StatusBarPane.html
        """

    def GetStyle(self) -> int:
        """ 

`GetStyle`(*self*)[¶](#wx.StatusBarPane.GetStyle "Permalink to this definition")
Returns the pane style.



Return type
*int*






            Source: https://docs.wxpython.org/wx.StatusBarPane.html
        """

    def GetText(self) -> str:
        """ 

`GetText`(*self*)[¶](#wx.StatusBarPane.GetText "Permalink to this definition")
Returns the text currently shown in this pane.



Return type
`string`






            Source: https://docs.wxpython.org/wx.StatusBarPane.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.StatusBarPane.GetWidth "Permalink to this definition")
Returns the pane width; it maybe negative, indicating a variable-width field.



Return type
*int*






            Source: https://docs.wxpython.org/wx.StatusBarPane.html
        """

    Style: int  # `Style`[¶](#wx.StatusBarPane.Style "Permalink to this definition")See [`GetStyle`](#wx.StatusBarPane.GetStyle "wx.StatusBarPane.GetStyle")
    Text: str  # `Text`[¶](#wx.StatusBarPane.Text "Permalink to this definition")See [`GetText`](#wx.StatusBarPane.GetText "wx.StatusBarPane.GetText")
    Width: int  # `Width`[¶](#wx.StatusBarPane.Width "Permalink to this definition")See [`GetWidth`](#wx.StatusBarPane.GetWidth "wx.StatusBarPane.GetWidth")



class StdDialogButtonSizer(BoxSizer):
    """ **Possible constructors**:



```
StdDialogButtonSizer()

```


This class creates button layouts which conform to the standard button
spacing and ordering defined by the platform or toolkit’s user
interface guidelines (if such things exist).


  


        Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.StdDialogButtonSizer.__init__ "Permalink to this definition")
Constructor for a  [wx.StdDialogButtonSizer](#wx-stddialogbuttonsizer).




            Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
        """

    def AddButton(self, button: 'Button') -> None:
        """ 

`AddButton`(*self*, *button*)[¶](#wx.StdDialogButtonSizer.AddButton "Permalink to this definition")
Adds a button to the  [wx.StdDialogButtonSizer](#wx-stddialogbuttonsizer).


The *button* must have one of the following identifiers:


* `wx.ID_OK`
* `wx.ID_YES`
* `wx.ID_SAVE`
* `wx.ID_APPLY`
* `wx.ID_CLOSE`
* `wx.ID_NO`
* `wx.ID_CANCEL`
* `wx.ID_HELP`
* `wx.ID_CONTEXT_HELP`



Parameters
**button** ([*wx.Button*](wx.Button.html#wx.Button "wx.Button")) – 






            Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.StdDialogButtonSizer.CalcMin "Permalink to this definition")
Implements the calculation of a box sizer’s minimal.


It is used internally only and must not be called by the user. Documented for information.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
        """

    def Realize(self) -> None:
        """ 

`Realize`(*self*)[¶](#wx.StdDialogButtonSizer.Realize "Permalink to this definition")
Rearranges the buttons and applies proper spacing between buttons to make them match the platform or toolkit’s interface guidelines.




            Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
        """

    def RepositionChildren(self, minSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`RepositionChildren`(*self*, *minSize*)[¶](#wx.StdDialogButtonSizer.RepositionChildren "Permalink to this definition")
Method which must be overridden in the derived sizer classes.


The implementation should reposition the children using the current total size available to the sizer ( `m_size` ) and the size computed by the last call to [`CalcMin`](#wx.StdDialogButtonSizer.CalcMin "wx.StdDialogButtonSizer.CalcMin") .



Parameters
**minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





New in version 4.1/wxWidgets-3.1.3: ,
before this version RecalcSizes() method not taking any arguments had to be overridden in the derived classes instead.





            Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
        """

    def SetAffirmativeButton(self, button: 'Button') -> None:
        """ 

`SetAffirmativeButton`(*self*, *button*)[¶](#wx.StdDialogButtonSizer.SetAffirmativeButton "Permalink to this definition")
Sets the affirmative button for the sizer.


This allows you to use identifiers other than the standard identifiers outlined above.



Parameters
**button** ([*wx.Button*](wx.Button.html#wx.Button "wx.Button")) – 






            Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
        """

    def SetCancelButton(self, button: 'Button') -> None:
        """ 

`SetCancelButton`(*self*, *button*)[¶](#wx.StdDialogButtonSizer.SetCancelButton "Permalink to this definition")
Sets the cancel button for the sizer.


This allows you to use identifiers other than the standard identifiers outlined above.



Parameters
**button** ([*wx.Button*](wx.Button.html#wx.Button "wx.Button")) – 






            Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
        """

    def SetNegativeButton(self, button: 'Button') -> None:
        """ 

`SetNegativeButton`(*self*, *button*)[¶](#wx.StdDialogButtonSizer.SetNegativeButton "Permalink to this definition")
Sets the negative button for the sizer.


This allows you to use identifiers other than the standard identifiers outlined above.



Parameters
**button** ([*wx.Button*](wx.Button.html#wx.Button "wx.Button")) – 






            Source: https://docs.wxpython.org/wx.StdDialogButtonSizer.html
        """



class StockPreferencesPage(PreferencesPage):
    """ **Possible constructors**:



```
StockPreferencesPage(kind)

```


Specialization of PreferencesPage useful for certain commonly used
preferences page.


  


        Source: https://docs.wxpython.org/wx.StockPreferencesPage.html
    """
    def __init__(self, kind: Kind) -> None:
        """ 

`__init__`(*self*, *kind*)[¶](#wx.StockPreferencesPage.__init__ "Permalink to this definition")
Constructor.



Parameters
**kind** ([*Kind*](wx.StockPreferencesPage.Kind.enumeration.html "Kind")) – 






            Source: https://docs.wxpython.org/wx.StockPreferencesPage.html
        """

    def GetIcon(self) -> 'BitmapBundle':
        """ 

`GetIcon`(*self*)[¶](#wx.StockPreferencesPage.GetIcon "Permalink to this definition")
Reimplemented to return stock icon on macOS.



Return type
 [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle)






            Source: https://docs.wxpython.org/wx.StockPreferencesPage.html
        """

    def GetKind(self) -> 'Kind':
        """ 

`GetKind`(*self*)[¶](#wx.StockPreferencesPage.GetKind "Permalink to this definition")
Returns the page’s kind.



Return type
 [wx.StockPreferencesPage.Kind](wx.StockPreferencesPage.Kind.enumeration.html#wx-stockpreferencespage-kind)






            Source: https://docs.wxpython.org/wx.StockPreferencesPage.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.StockPreferencesPage.GetName "Permalink to this definition")
Reimplemented to return suitable name for the page’s kind.



Return type
`string`






            Source: https://docs.wxpython.org/wx.StockPreferencesPage.html
        """

    Icon: 'BitmapBundle'  # `Icon`[¶](#wx.StockPreferencesPage.Icon "Permalink to this definition")See [`GetIcon`](#wx.StockPreferencesPage.GetIcon "wx.StockPreferencesPage.GetIcon")
    Name: str  # `Name`[¶](#wx.StockPreferencesPage.Name "Permalink to this definition")See [`GetName`](#wx.StockPreferencesPage.GetName "wx.StockPreferencesPage.GetName")



class StopWatch:
    """ **Possible constructors**:



```
StopWatch()

```


The StopWatch class allow you to measure time intervals.


  


        Source: https://docs.wxpython.org/wx.StopWatch.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.StopWatch.__init__ "Permalink to this definition")
Constructor.


This starts the stop watch.




            Source: https://docs.wxpython.org/wx.StopWatch.html
        """

    def Pause(self) -> None:
        """ 

`Pause`(*self*)[¶](#wx.StopWatch.Pause "Permalink to this definition")
Pauses the stop watch.


Call [`Resume`](#wx.StopWatch.Resume "wx.StopWatch.Resume") to resume time measuring again.


If this method is called several times, [`Resume`](#wx.StopWatch.Resume "wx.StopWatch.Resume") must be called the same number of times to really resume the stop watch. You may, however, call [`Start`](#wx.StopWatch.Start "wx.StopWatch.Start") to resume it unconditionally.




            Source: https://docs.wxpython.org/wx.StopWatch.html
        """

    def Resume(self) -> None:
        """ 

`Resume`(*self*)[¶](#wx.StopWatch.Resume "Permalink to this definition")
Resumes the stop watch which had been paused with [`Pause`](#wx.StopWatch.Pause "wx.StopWatch.Pause") .




            Source: https://docs.wxpython.org/wx.StopWatch.html
        """

    def Start(self, milliseconds: int=0) -> None:
        """ 

`Start`(*self*, *milliseconds=0*)[¶](#wx.StopWatch.Start "Permalink to this definition")
(Re)starts the stop watch with a given initial value.


The stopwatch will always be running after calling [`Start`](#wx.StopWatch.Start "wx.StopWatch.Start") , even if [`Pause`](#wx.StopWatch.Pause "wx.StopWatch.Pause") had been called before and even if it had been called multiple times.



Parameters
**milliseconds** (*long*) – 






            Source: https://docs.wxpython.org/wx.StopWatch.html
        """

    def Time(self) -> int:
        """ 

`Time`(*self*)[¶](#wx.StopWatch.Time "Permalink to this definition")
Returns the time in milliseconds since the start (or restart) or the last call of [`Pause`](#wx.StopWatch.Pause "wx.StopWatch.Pause") .



Return type
*long*





See also


[`TimeInMicro`](#wx.StopWatch.TimeInMicro "wx.StopWatch.TimeInMicro")





            Source: https://docs.wxpython.org/wx.StopWatch.html
        """

    def TimeInMicro(self) -> int:
        """ 

`TimeInMicro`(*self*)[¶](#wx.StopWatch.TimeInMicro "Permalink to this definition")
Returns elapsed time in microseconds.


This method is similar to [`Time`](#wx.StopWatch.Time "wx.StopWatch.Time") but returns the elapsed time in microseconds and not milliseconds. Notice that not all platforms really can measure times with this precision.



Return type
*long*





New in version 2.9.3.





            Source: https://docs.wxpython.org/wx.StopWatch.html
        """



class StreamBase:
    """ **Possible constructors**:



```
StreamBase()

```


This class is the base class of most stream related classes in
wxWidgets.


  


        Source: https://docs.wxpython.org/wx.StreamBase.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.StreamBase.__init__ "Permalink to this definition")
Creates a dummy stream object.


It doesn’t do anything.




            Source: https://docs.wxpython.org/wx.StreamBase.html
        """

    def GetLastError(self) -> 'StreamError':
        """ 

`GetLastError`(*self*)[¶](#wx.StreamBase.GetLastError "Permalink to this definition")
This function returns the last error.



Return type
 [wx.StreamError](wx.StreamError.enumeration.html#wx-streamerror)






            Source: https://docs.wxpython.org/wx.StreamBase.html
        """

    def GetLength(self) -> 'FileOffset':
        """ 

`GetLength`(*self*)[¶](#wx.StreamBase.GetLength "Permalink to this definition")
Returns the length of the stream in bytes.


If the length cannot be determined (this is always the case for socket streams for example), returns `InvalidOffset` .



Return type
*wx.FileOffset*





New in version 2.5.4.





            Source: https://docs.wxpython.org/wx.StreamBase.html
        """

    def GetSize(self) -> int:
        """ 

`GetSize`(*self*)[¶](#wx.StreamBase.GetSize "Permalink to this definition")
This function returns the size of the stream.


For example, for a file it is the size of the file.



Return type
*int*





Warning


There are streams which do not have size by definition, such as socket streams. In that cases, [`GetSize`](#wx.StreamBase.GetSize "wx.StreamBase.GetSize") returns 0 so you should always test its return value.





            Source: https://docs.wxpython.org/wx.StreamBase.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.StreamBase.IsOk "Permalink to this definition")
Returns `True` if no error occurred on the stream.



Return type
*bool*





See also


[`GetLastError`](#wx.StreamBase.GetLastError "wx.StreamBase.GetLastError")





            Source: https://docs.wxpython.org/wx.StreamBase.html
        """

    def IsSeekable(self) -> bool:
        """ 

`IsSeekable`(*self*)[¶](#wx.StreamBase.IsSeekable "Permalink to this definition")
Returns `True` if the stream supports seeking to arbitrary offsets.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.StreamBase.html
        """

    def Reset(self, error: StreamError=STREAM_NO_ERROR) -> None:
        """ 

`Reset`(*self*, *error=STREAM\_NO\_ERROR*)[¶](#wx.StreamBase.Reset "Permalink to this definition")
Resets the stream state.


By default, resets the stream to good state, i.e. clears any errors. Since wxWidgets 2.9.3 can be also used to explicitly set the state to the specified error (the *error* argument didn’t exist in the previous versions).



Parameters
**error** ([*StreamError*](wx.StreamError.enumeration.html "StreamError")) – 





See also


[`GetLastError`](#wx.StreamBase.GetLastError "wx.StreamBase.GetLastError")





            Source: https://docs.wxpython.org/wx.StreamBase.html
        """

    LastError: 'StreamError'  # `LastError`[¶](#wx.StreamBase.LastError "Permalink to this definition")See [`GetLastError`](#wx.StreamBase.GetLastError "wx.StreamBase.GetLastError")
    Length: 'FileOffset'  # `Length`[¶](#wx.StreamBase.Length "Permalink to this definition")See [`GetLength`](#wx.StreamBase.GetLength "wx.StreamBase.GetLength")
    Size: int  # `Size`[¶](#wx.StreamBase.Size "Permalink to this definition")See [`GetSize`](#wx.StreamBase.GetSize "wx.StreamBase.GetSize")



class SVGBitmapEmbedHandler(SVGBitmapHandler):
    """ Handler embedding bitmaps as base64-encoded PNGs into the `SVG`.


  


        Source: https://docs.wxpython.org/wx.SVGBitmapEmbedHandler.html
    """
    def ProcessBitmap(self, bitmap, x, y, stream) -> bool:
        """ 

`ProcessBitmap`(*self*, *bitmap*, *x*, *y*, *stream*)[¶](#wx.SVGBitmapEmbedHandler.ProcessBitmap "Permalink to this definition")
Writes the bitmap representation as `SVG` to the given stream.


The `XML` generated by this function will be inserted into the `SVG` file inline with the `XML` generated by the main  [wx.SVGFileDC](wx.SVGFileDC.html#wx-svgfiledc) class so it is important that the `XML` is properly formed.



Parameters
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – A valid bitmap to add to `SVG`.
* **x** (*int*) – Horizontal position of the bitmap.
* **y** (*int*) – Vertical position of the bitmap.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – The stream to write `SVG` contents to.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SVGBitmapEmbedHandler.html
        """



class SVGBitmapFileHandler(SVGBitmapHandler):
    """ **Possible constructors**:



```
SVGBitmapFileHandler(path)

```


Handler saving bitmaps to external `PNG` files and linking to it from
the `SVG`.


  


        Source: https://docs.wxpython.org/wx.SVGBitmapFileHandler.html
    """
    def __init__(self, path: str) -> None:
        """ 

`__init__`(*self*, *path*)[¶](#wx.SVGBitmapFileHandler.__init__ "Permalink to this definition")
Create a  [wx.SVGBitmapFileHandler](#wx-svgbitmapfilehandler) and specify the location where the file will be saved.



Parameters
**path** (*string*) – The path of the save location. If *path* contains a filename, the autogenerated filename will be appended to this name.





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.SVGBitmapFileHandler.html
        """

    def ProcessBitmap(self, bitmap, x, y, stream) -> bool:
        """ 

`ProcessBitmap`(*self*, *bitmap*, *x*, *y*, *stream*)[¶](#wx.SVGBitmapFileHandler.ProcessBitmap "Permalink to this definition")
Writes the bitmap representation as `SVG` to the given stream.


The `XML` generated by this function will be inserted into the `SVG` file inline with the `XML` generated by the main  [wx.SVGFileDC](wx.SVGFileDC.html#wx-svgfiledc) class so it is important that the `XML` is properly formed.



Parameters
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – A valid bitmap to add to `SVG`.
* **x** (*int*) – Horizontal position of the bitmap.
* **y** (*int*) – Vertical position of the bitmap.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – The stream to write `SVG` contents to.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SVGBitmapFileHandler.html
        """



class SVGBitmapHandler:
    """ Abstract base class for handling bitmaps inside a SVGFileDC.


  


        Source: https://docs.wxpython.org/wx.SVGBitmapHandler.html
    """
    def ProcessBitmap(self, bitmap, x, y, stream) -> bool:
        """ 

`ProcessBitmap`(*self*, *bitmap*, *x*, *y*, *stream*)[¶](#wx.SVGBitmapHandler.ProcessBitmap "Permalink to this definition")
Writes the bitmap representation as `SVG` to the given stream.


The `XML` generated by this function will be inserted into the `SVG` file inline with the `XML` generated by the main  [wx.SVGFileDC](wx.SVGFileDC.html#wx-svgfiledc) class so it is important that the `XML` is properly formed.



Parameters
* **bitmap** ([*wx.Bitmap*](wx.Bitmap.html#wx.Bitmap "wx.Bitmap")) – A valid bitmap to add to `SVG`.
* **x** (*int*) – Horizontal position of the bitmap.
* **y** (*int*) – Vertical position of the bitmap.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – The stream to write `SVG` contents to.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SVGBitmapHandler.html
        """



class SVGFileDC(DC):
    """ **Possible constructors**:



```
SVGFileDC(filename, width=320, height=240, dpi=72, title="")

```


A SVGFileDC is a device context onto which graphics and text can be
drawn, and the output produced as a vector file, in `SVG` format.


  


        Source: https://docs.wxpython.org/wx.SVGFileDC.html
    """
    def __init__(self, filename, width=320, height=240, dpi=72, title="") -> None:
        """ 

`__init__`(*self*, *filename*, *width=320*, *height=240*, *dpi=72*, *title=""*)[¶](#wx.SVGFileDC.__init__ "Permalink to this definition")
Initializes a  [wx.SVGFileDC](#wx-svgfiledc) with the given *filename*, *width* and *height* at *dpi* resolution, and an optional *title*.


The title provides a readable name for the `SVG` document.



Parameters
* **filename** (*string*) –
* **width** (*int*) –
* **height** (*int*) –
* **dpi** (*float*) –
* **title** (*string*) –






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.SVGFileDC.Clear "Permalink to this definition")
Draws a rectangle the size of the `SVG` using the [`wx.DC.SetBackground`](wx.DC.html#wx.DC.SetBackground "wx.DC.SetBackground") brush.




            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def CrossHair(self, x, y) -> None:
        """ 

`CrossHair`(*self*, *x*, *y*)[¶](#wx.SVGFileDC.CrossHair "Permalink to this definition")
Function not implemented in this DC class.



Parameters
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def DestroyClippingRegion(self) -> None:
        """ 

`DestroyClippingRegion`(*self*)[¶](#wx.SVGFileDC.DestroyClippingRegion "Permalink to this definition")
Destroys the current clipping region so that none of the DC is clipped.


Since intersections arising from sequential calls to SetClippingRegion are represented with nested `SVG` group elements (<g>), all such groups are closed when DestroyClippingRegion is called.




            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def EndDoc(self) -> None:
        """ 

`EndDoc`(*self*)[¶](#wx.SVGFileDC.EndDoc "Permalink to this definition")
Function not implemented in this DC class.




            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def EndPage(self) -> None:
        """ 

`EndPage`(*self*)[¶](#wx.SVGFileDC.EndPage "Permalink to this definition")
Function not implemented in this DC class.




            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def FloodFill(self, x, y, colour, style=FLOOD_SURFACE) -> bool:
        """ 

`FloodFill`(*self*, *x*, *y*, *colour*, *style=FLOOD\_SURFACE*)[¶](#wx.SVGFileDC.FloodFill "Permalink to this definition")
Function not implemented in this DC class.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **style** ([*FloodFillStyle*](wx.FloodFillStyle.enumeration.html "FloodFillStyle")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def GetDepth(self) -> int:
        """ 

`GetDepth`(*self*)[¶](#wx.SVGFileDC.GetDepth "Permalink to this definition")
Function not implemented in this DC class.



Return type
*int*






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def GetLogicalFunction(self) -> 'RasterOperationMode':
        """ 

`GetLogicalFunction`(*self*)[¶](#wx.SVGFileDC.GetLogicalFunction "Permalink to this definition")
Function not implemented in this DC class.



Return type
 [wx.RasterOperationMode](wx.RasterOperationMode.enumeration.html#wx-rasteroperationmode)






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def GetPixel(self, x, y, colour) -> bool:
        """ 

`GetPixel`(*self*, *x*, *y*, *colour*)[¶](#wx.SVGFileDC.GetPixel "Permalink to this definition")
Function not implemented in this DC class.



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def SetBitmapHandler(self, handler: 'SVGBitmapHandler') -> None:
        """ 

`SetBitmapHandler`(*self*, *handler*)[¶](#wx.SVGFileDC.SetBitmapHandler "Permalink to this definition")
Replaces the default bitmap handler with *handler*.


By default, an object of  [wx.SVGBitmapFileHandler](wx.SVGBitmapFileHandler.html#wx-svgbitmapfilehandler) class is used as bitmap handler. You may want to replace it with an object of predefined  [wx.SVGBitmapEmbedHandler](wx.SVGBitmapEmbedHandler.html#wx-svgbitmapembedhandler) class to embed the bitmaps in the generated `SVG` instead of storing them in separate files like this:



```
mySVGFileDC.SetBitmapHandler(wx.SVGBitmapEmbedHandler())

```


or derive your own bitmap handler class and use it if you need to customize the bitmap handling further.



Parameters
**handler** ([*wx.SVGBitmapHandler*](wx.SVGBitmapHandler.html#wx.SVGBitmapHandler "wx.SVGBitmapHandler")) – The new bitmap handler. If not `None`, this object takes ownership of this handler and will delete it when it is not needed any more.





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def SetLogicalFunction(self, function: RasterOperationMode) -> None:
        """ 

`SetLogicalFunction`(*self*, *function*)[¶](#wx.SVGFileDC.SetLogicalFunction "Permalink to this definition")
Function not implemented in this DC class.



Parameters
**function** ([*RasterOperationMode*](wx.RasterOperationMode.enumeration.html "RasterOperationMode")) – 






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def SetPalette(self, palette: 'Palette') -> None:
        """ 

`SetPalette`(*self*, *palette*)[¶](#wx.SVGFileDC.SetPalette "Permalink to this definition")
Function not implemented in this DC class.



Parameters
**palette** ([*wx.Palette*](wx.Palette.html#wx.Palette "wx.Palette")) – 






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def SetShapeRenderingMode(self, renderingMode: SVGShapeRenderingMode) -> None:
        """ 

`SetShapeRenderingMode`(*self*, *renderingMode*)[¶](#wx.SVGFileDC.SetShapeRenderingMode "Permalink to this definition")
Set the shape rendering mode of the generated `SVG`.


All subsequent drawing calls will have this rendering mode set in the `SVG` file.


The default mode is `wx.SVG_SHAPE_RENDERING_AUTO`.



Parameters
**renderingMode** ([*SVGShapeRenderingMode*](wx.SVGShapeRenderingMode.enumeration.html "SVGShapeRenderingMode")) – 





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def StartDoc(self, message: str) -> bool:
        """ 

`StartDoc`(*self*, *message*)[¶](#wx.SVGFileDC.StartDoc "Permalink to this definition")
Function not implemented in this DC class.



Parameters
**message** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    def StartPage(self) -> None:
        """ 

`StartPage`(*self*)[¶](#wx.SVGFileDC.StartPage "Permalink to this definition")
Function not implemented in this DC class.




            Source: https://docs.wxpython.org/wx.SVGFileDC.html
        """

    Depth: int  # `Depth`[¶](#wx.SVGFileDC.Depth "Permalink to this definition")See [`GetDepth`](#wx.SVGFileDC.GetDepth "wx.SVGFileDC.GetDepth")
    LogicalFunction: 'RasterOperationMode'  # `LogicalFunction`[¶](#wx.SVGFileDC.LogicalFunction "Permalink to this definition")See [`GetLogicalFunction`](#wx.SVGFileDC.GetLogicalFunction "wx.SVGFileDC.GetLogicalFunction") and [`SetLogicalFunction`](#wx.SVGFileDC.SetLogicalFunction "wx.SVGFileDC.SetLogicalFunction")



SVG_SHAPE_RENDERING_AUTO: int

class SysColourChangedEvent(Event):
    """ **Possible constructors**:



```
SysColourChangedEvent()

```


This class is used for system colour change events, which are
generated when the user changes the colour settings or when the system
theme changes (e.g. automatic dark mode switching on macOS).


  


        Source: https://docs.wxpython.org/wx.SysColourChangedEvent.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.SysColourChangedEvent.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.SysColourChangedEvent.html
        """



class SystemAppearance:
    """ Provides information about the current system appearance.


  


        Source: https://docs.wxpython.org/wx.SystemAppearance.html
    """
    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.SystemAppearance.GetName "Permalink to this definition")
Return the name if available or empty string otherwise.


This is currently only implemented for macOS and returns a not necessarily user-readable string such as “NSAppearanceNameAqua” there and an empty string under all the other platforms.



Return type
`string`






            Source: https://docs.wxpython.org/wx.SystemAppearance.html
        """

    def IsDark(self) -> bool:
        """ 

`IsDark`(*self*)[¶](#wx.SystemAppearance.IsDark "Permalink to this definition")
Return `True` if the current system there is explicitly recognized as being a dark theme or if the default window background is dark.


This method should be used to check whether custom colours more appropriate for the default (light) or dark appearance should be used.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SystemAppearance.html
        """

    def IsUsingDarkBackground(self) -> bool:
        """ 

`IsUsingDarkBackground`(*self*)[¶](#wx.SystemAppearance.IsUsingDarkBackground "Permalink to this definition")
Return `True` if the default window background is significantly darker than foreground.


This is used by [`IsDark`](#wx.SystemAppearance.IsDark "wx.SystemAppearance.IsDark") if there is no platform-specific way to determine whether a dark mode is being used and is generally not very useful to call directly.



Return type
*bool*





See also


[`wx.Colour.GetLuminance`](wx.Colour.html#wx.Colour.GetLuminance "wx.Colour.GetLuminance")





            Source: https://docs.wxpython.org/wx.SystemAppearance.html
        """

    Name: str  # `Name`[¶](#wx.SystemAppearance.Name "Permalink to this definition")See [`GetName`](#wx.SystemAppearance.GetName "wx.SystemAppearance.GetName")



class SystemOptions(Object):
    """ **Possible constructors**:



```
SystemOptions()

```


SystemOptions stores option/value pairs that wxWidgets itself or
applications can use to alter behaviour at run-time.


  


        Source: https://docs.wxpython.org/wx.SystemOptions.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.SystemOptions.__init__ "Permalink to this definition")
Default constructor.


You don’t need to create an instance of  [wx.SystemOptions](#wx-systemoptions) since all of its functions are static.




            Source: https://docs.wxpython.org/wx.SystemOptions.html
        """

    @staticmethod
    def GetOption(name: str) -> str:
        """ 

*static* `GetOption`(*name*)[¶](#wx.SystemOptions.GetOption "Permalink to this definition")
Gets an option.


The function is case-insensitive to *name*. Returns empty string if the option hasn’t been set.



Parameters
**name** (*string*) – 



Return type
`string`





See also


[`SetOption`](#wx.SystemOptions.SetOption "wx.SystemOptions.SetOption") , [`GetOptionInt`](#wx.SystemOptions.GetOptionInt "wx.SystemOptions.GetOptionInt") , [`HasOption`](#wx.SystemOptions.HasOption "wx.SystemOptions.HasOption")





            Source: https://docs.wxpython.org/wx.SystemOptions.html
        """

    @staticmethod
    def GetOptionInt(name: str) -> int:
        """ 

*static* `GetOptionInt`(*name*)[¶](#wx.SystemOptions.GetOptionInt "Permalink to this definition")
Gets an option as an integer.


The function is case-insensitive to *name*. If the option hasn’t been set, this function returns 0.



Parameters
**name** (*string*) – 



Return type
*int*





See also


[`SetOption`](#wx.SystemOptions.SetOption "wx.SystemOptions.SetOption") , [`GetOption`](#wx.SystemOptions.GetOption "wx.SystemOptions.GetOption") , [`HasOption`](#wx.SystemOptions.HasOption "wx.SystemOptions.HasOption")





            Source: https://docs.wxpython.org/wx.SystemOptions.html
        """

    @staticmethod
    def HasOption(name: str) -> bool:
        """ 

*static* `HasOption`(*name*)[¶](#wx.SystemOptions.HasOption "Permalink to this definition")
Returns `True` if the given option is present.


The function is case-insensitive to *name*.



Parameters
**name** (*string*) – 



Return type
*bool*





See also


[`SetOption`](#wx.SystemOptions.SetOption "wx.SystemOptions.SetOption") , [`GetOption`](#wx.SystemOptions.GetOption "wx.SystemOptions.GetOption") , [`GetOptionInt`](#wx.SystemOptions.GetOptionInt "wx.SystemOptions.GetOptionInt")





            Source: https://docs.wxpython.org/wx.SystemOptions.html
        """

    @staticmethod
    def IsFalse(name: str) -> bool:
        """ 

*static* `IsFalse`(*name*)[¶](#wx.SystemOptions.IsFalse "Permalink to this definition")
Returns `True` if the option with the given *name* had been set to 0 value.


This is mostly useful for boolean options for which you can’t use `GetOptionInt(name)` == 0 as this would also be `True` if the option hadn’t been set at all.



Parameters
**name** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SystemOptions.html
        """

    @staticmethod
    def SetOption(*args, **kw) -> None:
        """ 

*static* `SetOption`(*\*args*, *\*\*kw*)[¶](#wx.SystemOptions.SetOption "Permalink to this definition")
Sets an option.


The function is case-insensitive to *name*.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetOption** *(name, value)*



Parameters
* **name** (*string*) –
* **value** (*string*) –






---

  



**SetOption** *(name, value)*



Parameters
* **name** (*string*) –
* **value** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.SystemOptions.html
        """



BG_STYLE_COLOUR: int

class SystemSettings:
    """ **Possible constructors**:



```
SystemSettings()

```


SystemSettings allows the application to ask for details about the
system.


  


        Source: https://docs.wxpython.org/wx.SystemSettings.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.SystemSettings.__init__ "Permalink to this definition")
Default constructor.


You don’t need to create an instance of  [wx.SystemSettings](#wx-systemsettings) since all of its functions are static.




            Source: https://docs.wxpython.org/wx.SystemSettings.html
        """

    @staticmethod
    def GetAppearance() -> 'SystemAppearance':
        """ 

*static* `GetAppearance`()[¶](#wx.SystemSettings.GetAppearance "Permalink to this definition")
Returns the object describing the current system appearance.



Return type
 [wx.SystemAppearance](wx.SystemAppearance.html#wx-systemappearance)





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.SystemSettings.html
        """

    @staticmethod
    def GetColour(index: SystemColour) -> 'Colour':
        """ 

*static* `GetColour`(*index*)[¶](#wx.SystemSettings.GetColour "Permalink to this definition")
Returns a system colour.



Parameters
**index** ([*SystemColour*](wx.SystemColour.enumeration.html "SystemColour")) – Can be one of the  [wx.SystemColour](wx.SystemColour.enumeration.html#wx-systemcolour) enum values.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)



Returns
The returned colour is always valid.






            Source: https://docs.wxpython.org/wx.SystemSettings.html
        """

    @staticmethod
    def GetFont(index: SystemFont) -> 'Font':
        """ 

*static* `GetFont`(*index*)[¶](#wx.SystemSettings.GetFont "Permalink to this definition")
Returns a system font.



Parameters
**index** ([*SystemFont*](wx.SystemFont.enumeration.html "SystemFont")) – Can be one of the  [wx.SystemFont](wx.SystemFont.enumeration.html#wx-systemfont) enum values.



Return type
 [wx.Font](wx.Font.html#wx-font)



Returns
The returned font is always valid.






            Source: https://docs.wxpython.org/wx.SystemSettings.html
        """

    @staticmethod
    def GetMetric(index, win=None) -> int:
        """ 

*static* `GetMetric`(*index*, *win=None*)[¶](#wx.SystemSettings.GetMetric "Permalink to this definition")
Returns the value of a system metric, or -1 if the metric is not supported on the current system.


The value of *win* determines if the metric returned is a global value or a  [wx.Window](wx.Window.html#wx-window) based value, in which case it might determine the widget, the display the window is on, or something similar. The window given should be as close to the metric as possible (e.g. a  [wx.TopLevelWindow](wx.TopLevelWindow.html#wx-toplevelwindow) in case of the `wx.SYS_CAPTION_Y` metric).


*index* can be one of the  [wx.SystemMetric](wx.SystemMetric.enumeration.html#wx-systemmetric) enum values.


*win* is a pointer to the window for which the metric is requested. Specifying the *win* parameter is encouraged, because some metrics on some ports are not supported without one, or they might be capable of reporting better values if given one. If a window does not make sense for a metric, one should still be given, as for example it might determine which displays cursor width is requested with `wx.SYS_CURSOR_X`.



Parameters
* **index** ([*SystemMetric*](wx.SystemMetric.enumeration.html "SystemMetric")) –
* **win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.SystemSettings.html
        """

    @staticmethod
    def GetScreenType() -> 'SystemScreenType':
        """ 

*static* `GetScreenType`()[¶](#wx.SystemSettings.GetScreenType "Permalink to this definition")
Returns the screen type.


The return value is one of the  [wx.SystemScreenType](wx.SystemScreenType.enumeration.html#wx-systemscreentype) enum values.



Return type
 [wx.SystemScreenType](wx.SystemScreenType.enumeration.html#wx-systemscreentype)






            Source: https://docs.wxpython.org/wx.SystemSettings.html
        """

    @staticmethod
    def HasFeature(index: SystemFeature) -> bool:
        """ 

*static* `HasFeature`(*index*)[¶](#wx.SystemSettings.HasFeature "Permalink to this definition")
Returns `True` if the port has certain feature.


See the  [wx.SystemFeature](wx.SystemFeature.enumeration.html#wx-systemfeature) enum values.



Parameters
**index** ([*SystemFeature*](wx.SystemFeature.enumeration.html "SystemFeature")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.SystemSettings.html
        """



SYS_CAPTION_Y: int

SYS_CURSOR_X: int

class TextAttr:
    """ **Possible constructors**:



```
TextAttr()

TextAttr(colText, colBack=NullColour, font=NullFont,
         alignment=TEXT_ALIGNMENT_DEFAULT)

TextAttr(attr)

```


TextAttr represents the character and paragraph attributes, or
style, for a range of text in a TextCtrl or RichTextCtrl.


  


        Source: https://docs.wxpython.org/wx.TextAttr.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TextAttr.__init__ "Permalink to this definition")
Constructors.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, colText, colBack=NullColour, font=NullFont, alignment=TEXT\_ALIGNMENT\_DEFAULT)*



Parameters
* **colText** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **colBack** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –
* **alignment** ([*TextAttrAlignment*](wx.TextAttrAlignment.enumeration.html "TextAttrAlignment")) –






---

  



**\_\_init\_\_** *(self, attr)*



Parameters
**attr** ([*wx.TextAttr*](#wx.TextAttr "wx.TextAttr")) – 






---

  





            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def Apply(self, style, compareWith=None) -> bool:
        """ 

`Apply`(*self*, *style*, *compareWith=None*)[¶](#wx.TextAttr.Apply "Permalink to this definition")
Applies the attributes in *style* to the original object, but not those attributes from *style* that are the same as those in *compareWith* (if passed).



Parameters
* **style** ([*wx.TextAttr*](#wx.TextAttr "wx.TextAttr")) –
* **compareWith** ([*wx.TextAttr*](#wx.TextAttr "wx.TextAttr")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def EqPartial(self, attr, weakTest=True) -> bool:
        """ 

`EqPartial`(*self*, *attr*, *weakTest=True*)[¶](#wx.TextAttr.EqPartial "Permalink to this definition")
Partial equality test.


If *weakTest* is `True`, attributes of this object do not have to be present if those attributes of `attr` are present. If *weakTest* is `False`, the function will fail if an attribute is present in `attr` but not in this object.



Parameters
* **attr** ([*wx.TextAttr*](#wx.TextAttr "wx.TextAttr")) –
* **weakTest** (*bool*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetAlignment(self) -> int:
        """ 

`GetAlignment`(*self*)[¶](#wx.TextAttr.GetAlignment "Permalink to this definition")
Returns the alignment flags.


See  [wx.TextAttrAlignment](wx.TextAttrAlignment.enumeration.html#wx-textattralignment) for a list of available styles.



Return type
 [wx.TextAttrAlignment](wx.TextAttrAlignment.enumeration.html#wx-textattralignment)






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetBackgroundColour(self) -> 'Colour':
        """ 

`GetBackgroundColour`(*self*)[¶](#wx.TextAttr.GetBackgroundColour "Permalink to this definition")
Returns the background colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetBulletFont(self) -> str:
        """ 

`GetBulletFont`(*self*)[¶](#wx.TextAttr.GetBulletFont "Permalink to this definition")
Returns a string containing the name of the font associated with the bullet symbol.


Only valid for attributes with `TEXT_ATTR_BULLET_SYMBOL`.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetBulletName(self) -> str:
        """ 

`GetBulletName`(*self*)[¶](#wx.TextAttr.GetBulletName "Permalink to this definition")
Returns the standard bullet name, applicable if the bullet style is `wx.TEXT_ATTR_BULLET_STYLE_STANDARD`.


Currently the following standard bullet names are supported:


* `standard/circle`
* `standard/square`
* `standard/diamond`
* `standard/triangle`



Return type
`string`





Note


For  [wx.richtext.RichTextCtrl](wx.richtext.RichTextCtrl.html#wx-richtext-richtextctrl) users only: if you wish your rich text controls to support further bullet graphics, you can derive a class from  [wx.richtext.RichTextRenderer](wx.richtext.RichTextRenderer.html#wx-richtext-richtextrenderer) or  [wx.richtext.RichTextStdRenderer](wx.richtext.RichTextStdRenderer.html#wx-richtext-richtextstdrenderer), override `DrawStandardBullet` and `EnumerateStandardBulletNames` , and set an instance of the class using [`wx.richtext.RichTextBuffer.SetRenderer`](wx.richtext.RichTextBuffer.html#wx.richtext.RichTextBuffer.SetRenderer "wx.richtext.RichTextBuffer.SetRenderer") .





            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetBulletNumber(self) -> int:
        """ 

`GetBulletNumber`(*self*)[¶](#wx.TextAttr.GetBulletNumber "Permalink to this definition")
Returns the bullet number.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetBulletStyle(self) -> int:
        """ 

`GetBulletStyle`(*self*)[¶](#wx.TextAttr.GetBulletStyle "Permalink to this definition")
Returns the bullet style.


See  [wx.TextAttrBulletStyle](wx.TextAttrBulletStyle.enumeration.html#wx-textattrbulletstyle) for a list of available styles.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetBulletText(self) -> str:
        """ 

`GetBulletText`(*self*)[¶](#wx.TextAttr.GetBulletText "Permalink to this definition")
Returns the bullet text, which could be a symbol, or (for example) cached outline text.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetCharacterStyleName(self) -> str:
        """ 

`GetCharacterStyleName`(*self*)[¶](#wx.TextAttr.GetCharacterStyleName "Permalink to this definition")
Returns the name of the character style.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFlags(self) -> int:
        """ 

`GetFlags`(*self*)[¶](#wx.TextAttr.GetFlags "Permalink to this definition")
Returns flags indicating which attributes are applicable.


See [`SetFlags`](#wx.TextAttr.SetFlags "wx.TextAttr.SetFlags") for a list of available flags.



Return type
*long*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFont(self) -> 'Font':
        """ 

`GetFont`(*self*)[¶](#wx.TextAttr.GetFont "Permalink to this definition")
Creates and returns a font specified by the font attributes in the  [wx.TextAttr](#wx-textattr) object.


Note that  [wx.TextAttr](#wx-textattr) does not store a  [wx.Font](wx.Font.html#wx-font) object, so this is only a temporary font.


For greater efficiency, access the font attributes directly.



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFontAttributes(self, font, flags=TEXT_ATTR_FONT) -> bool:
        """ 

`GetFontAttributes`(*self*, *font*, *flags=TEXT\_ATTR\_FONT*)[¶](#wx.TextAttr.GetFontAttributes "Permalink to this definition")
Gets the font attributes from the given font, using only the attributes specified by *flags*.



Parameters
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –
* **flags** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFontEncoding(self) -> int:
        """ 

`GetFontEncoding`(*self*)[¶](#wx.TextAttr.GetFontEncoding "Permalink to this definition")
Returns the font encoding.



Return type
 [wx.FontEncoding](wx.FontEncoding.enumeration.html#wx-fontencoding)






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFontFaceName(self) -> str:
        """ 

`GetFontFaceName`(*self*)[¶](#wx.TextAttr.GetFontFaceName "Permalink to this definition")
Returns the font face name.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFontFamily(self) -> int:
        """ 

`GetFontFamily`(*self*)[¶](#wx.TextAttr.GetFontFamily "Permalink to this definition")
Returns the font family.



Return type
 [wx.FontFamily](wx.FontFamily.enumeration.html#wx-fontfamily)






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFontSize(self) -> int:
        """ 

`GetFontSize`(*self*)[¶](#wx.TextAttr.GetFontSize "Permalink to this definition")
Returns the font size in points.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFontStyle(self) -> int:
        """ 

`GetFontStyle`(*self*)[¶](#wx.TextAttr.GetFontStyle "Permalink to this definition")
Returns the font style.



Return type
 [wx.FontStyle](wx.FontStyle.enumeration.html#wx-fontstyle)






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFontUnderlined(self) -> bool:
        """ 

`GetFontUnderlined`(*self*)[¶](#wx.TextAttr.GetFontUnderlined "Permalink to this definition")
Returns `True` if the font is underlined.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetFontWeight(self) -> int:
        """ 

`GetFontWeight`(*self*)[¶](#wx.TextAttr.GetFontWeight "Permalink to this definition")
Returns the font weight.



Return type
 [wx.FontWeight](wx.FontWeight.enumeration.html#wx-fontweight)






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetLeftIndent(self) -> int:
        """ 

`GetLeftIndent`(*self*)[¶](#wx.TextAttr.GetLeftIndent "Permalink to this definition")
Returns the left indent in tenths of a millimetre.



Return type
*long*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetLeftSubIndent(self) -> int:
        """ 

`GetLeftSubIndent`(*self*)[¶](#wx.TextAttr.GetLeftSubIndent "Permalink to this definition")
Returns the left sub-indent in tenths of a millimetre.



Return type
*long*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetLineSpacing(self) -> int:
        """ 

`GetLineSpacing`(*self*)[¶](#wx.TextAttr.GetLineSpacing "Permalink to this definition")
Returns the line spacing value, one of  [wx.TextAttrLineSpacing](wx.TextAttrLineSpacing.enumeration.html#wx-textattrlinespacing) values.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetListStyleName(self) -> str:
        """ 

`GetListStyleName`(*self*)[¶](#wx.TextAttr.GetListStyleName "Permalink to this definition")
Returns the name of the list style.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetOutlineLevel(self) -> int:
        """ 

`GetOutlineLevel`(*self*)[¶](#wx.TextAttr.GetOutlineLevel "Permalink to this definition")
Returns the outline level.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetParagraphSpacingAfter(self) -> int:
        """ 

`GetParagraphSpacingAfter`(*self*)[¶](#wx.TextAttr.GetParagraphSpacingAfter "Permalink to this definition")
Returns the space in tenths of a millimeter after the paragraph.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetParagraphSpacingBefore(self) -> int:
        """ 

`GetParagraphSpacingBefore`(*self*)[¶](#wx.TextAttr.GetParagraphSpacingBefore "Permalink to this definition")
Returns the space in tenths of a millimeter before the paragraph.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetParagraphStyleName(self) -> str:
        """ 

`GetParagraphStyleName`(*self*)[¶](#wx.TextAttr.GetParagraphStyleName "Permalink to this definition")
Returns the name of the paragraph style.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetRightIndent(self) -> int:
        """ 

`GetRightIndent`(*self*)[¶](#wx.TextAttr.GetRightIndent "Permalink to this definition")
Returns the right indent in tenths of a millimeter.



Return type
*long*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetTabs(self) -> int:
        """ 

`GetTabs`(*self*)[¶](#wx.TextAttr.GetTabs "Permalink to this definition")
Returns an array of tab stops, each expressed in tenths of a millimeter.


Each stop is measured from the left margin and therefore each value must be larger than the last.



Return type
*list of integers*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetTextColour(self) -> 'Colour':
        """ 

`GetTextColour`(*self*)[¶](#wx.TextAttr.GetTextColour "Permalink to this definition")
Returns the text foreground colour.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetTextEffectFlags(self) -> int:
        """ 

`GetTextEffectFlags`(*self*)[¶](#wx.TextAttr.GetTextEffectFlags "Permalink to this definition")
Returns the text effect bits of interest.


See [`SetFlags`](#wx.TextAttr.SetFlags "wx.TextAttr.SetFlags") for further information.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetTextEffects(self) -> int:
        """ 

`GetTextEffects`(*self*)[¶](#wx.TextAttr.GetTextEffects "Permalink to this definition")
Returns the text effects, a bit list of styles.


See [`SetTextEffects`](#wx.TextAttr.SetTextEffects "wx.TextAttr.SetTextEffects") for details.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetURL(self) -> str:
        """ 

`GetURL`(*self*)[¶](#wx.TextAttr.GetURL "Permalink to this definition")
Returns the URL for the content.


Content with `wx.TEXT_ATTR_URL` style causes  [wx.richtext.RichTextCtrl](wx.richtext.RichTextCtrl.html#wx-richtext-richtextctrl) to show a hand cursor over it, and  [wx.richtext.RichTextCtrl](wx.richtext.RichTextCtrl.html#wx-richtext-richtextctrl) generates a  [wx.TextUrlEvent](wx.TextUrlEvent.html#wx-texturlevent) when the content is clicked.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetUnderlineColour(self) -> 'Colour':
        """ 

`GetUnderlineColour`(*self*)[¶](#wx.TextAttr.GetUnderlineColour "Permalink to this definition")
Returns the underline color used.


NullColour when the text colour is used.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def GetUnderlineType(self) -> 'TextAttrUnderlineType':
        """ 

`GetUnderlineType`(*self*)[¶](#wx.TextAttr.GetUnderlineType "Permalink to this definition")
Returns the underline type, which is one of the TextAttrUnderlineType values.



Return type
 [wx.TextAttrUnderlineType](wx.TextAttrUnderlineType.enumeration.html#wx-textattrunderlinetype)





New in version 4.1/wxWidgets-3.1.3.





            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasAlignment(self) -> bool:
        """ 

`HasAlignment`(*self*)[¶](#wx.TextAttr.HasAlignment "Permalink to this definition")
Returns `True` if the attribute object specifies alignment.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasBackgroundColour(self) -> bool:
        """ 

`HasBackgroundColour`(*self*)[¶](#wx.TextAttr.HasBackgroundColour "Permalink to this definition")
Returns `True` if the attribute object specifies a background colour.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasBulletName(self) -> bool:
        """ 

`HasBulletName`(*self*)[¶](#wx.TextAttr.HasBulletName "Permalink to this definition")
Returns `True` if the attribute object specifies a standard bullet name.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasBulletNumber(self) -> bool:
        """ 

`HasBulletNumber`(*self*)[¶](#wx.TextAttr.HasBulletNumber "Permalink to this definition")
Returns `True` if the attribute object specifies a bullet number.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasBulletStyle(self) -> bool:
        """ 

`HasBulletStyle`(*self*)[¶](#wx.TextAttr.HasBulletStyle "Permalink to this definition")
Returns `True` if the attribute object specifies a bullet style.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasBulletText(self) -> bool:
        """ 

`HasBulletText`(*self*)[¶](#wx.TextAttr.HasBulletText "Permalink to this definition")
Returns `True` if the attribute object specifies bullet text (usually specifying a symbol).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasCharacterStyleName(self) -> bool:
        """ 

`HasCharacterStyleName`(*self*)[¶](#wx.TextAttr.HasCharacterStyleName "Permalink to this definition")
Returns `True` if the attribute object specifies a character style name.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFlag(self, flag: int) -> bool:
        """ 

`HasFlag`(*self*, *flag*)[¶](#wx.TextAttr.HasFlag "Permalink to this definition")
Returns `True` if the *flag* is present in the attribute object’s flag bitlist.



Parameters
**flag** (*long*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFont(self) -> bool:
        """ 

`HasFont`(*self*)[¶](#wx.TextAttr.HasFont "Permalink to this definition")
Returns `True` if the attribute object specifies any font attributes.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontEncoding(self) -> bool:
        """ 

`HasFontEncoding`(*self*)[¶](#wx.TextAttr.HasFontEncoding "Permalink to this definition")
Returns `True` if the attribute object specifies an encoding.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontFaceName(self) -> bool:
        """ 

`HasFontFaceName`(*self*)[¶](#wx.TextAttr.HasFontFaceName "Permalink to this definition")
Returns `True` if the attribute object specifies a font face name.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontFamily(self) -> bool:
        """ 

`HasFontFamily`(*self*)[¶](#wx.TextAttr.HasFontFamily "Permalink to this definition")
Returns `True` if the attribute object specifies a font family.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontItalic(self) -> bool:
        """ 

`HasFontItalic`(*self*)[¶](#wx.TextAttr.HasFontItalic "Permalink to this definition")
Returns `True` if the attribute object specifies italic style.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontPixelSize(self) -> bool:
        """ 

`HasFontPixelSize`(*self*)[¶](#wx.TextAttr.HasFontPixelSize "Permalink to this definition")
Returns `True` if the attribute object specifies a font pixel size.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontPointSize(self) -> bool:
        """ 

`HasFontPointSize`(*self*)[¶](#wx.TextAttr.HasFontPointSize "Permalink to this definition")
Returns `True` if the attribute object specifies a font point size.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontSize(self) -> bool:
        """ 

`HasFontSize`(*self*)[¶](#wx.TextAttr.HasFontSize "Permalink to this definition")
Returns `True` if the attribute object specifies a font point or pixel size.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontUnderlined(self) -> bool:
        """ 

`HasFontUnderlined`(*self*)[¶](#wx.TextAttr.HasFontUnderlined "Permalink to this definition")
Returns `True` if the attribute object specifies either underlining or no underlining.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasFontWeight(self) -> bool:
        """ 

`HasFontWeight`(*self*)[¶](#wx.TextAttr.HasFontWeight "Permalink to this definition")
Returns `True` if the attribute object specifies font weight (bold, light or normal).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasLeftIndent(self) -> bool:
        """ 

`HasLeftIndent`(*self*)[¶](#wx.TextAttr.HasLeftIndent "Permalink to this definition")
Returns `True` if the attribute object specifies a left indent.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasLineSpacing(self) -> bool:
        """ 

`HasLineSpacing`(*self*)[¶](#wx.TextAttr.HasLineSpacing "Permalink to this definition")
Returns `True` if the attribute object specifies line spacing.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasListStyleName(self) -> bool:
        """ 

`HasListStyleName`(*self*)[¶](#wx.TextAttr.HasListStyleName "Permalink to this definition")
Returns `True` if the attribute object specifies a list style name.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasOutlineLevel(self) -> bool:
        """ 

`HasOutlineLevel`(*self*)[¶](#wx.TextAttr.HasOutlineLevel "Permalink to this definition")
Returns `True` if the attribute object specifies an outline level.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasPageBreak(self) -> bool:
        """ 

`HasPageBreak`(*self*)[¶](#wx.TextAttr.HasPageBreak "Permalink to this definition")
Returns `True` if the attribute object specifies a page break before this paragraph.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasParagraphSpacingAfter(self) -> bool:
        """ 

`HasParagraphSpacingAfter`(*self*)[¶](#wx.TextAttr.HasParagraphSpacingAfter "Permalink to this definition")
Returns `True` if the attribute object specifies spacing after a paragraph.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasParagraphSpacingBefore(self) -> bool:
        """ 

`HasParagraphSpacingBefore`(*self*)[¶](#wx.TextAttr.HasParagraphSpacingBefore "Permalink to this definition")
Returns `True` if the attribute object specifies spacing before a paragraph.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasParagraphStyleName(self) -> bool:
        """ 

`HasParagraphStyleName`(*self*)[¶](#wx.TextAttr.HasParagraphStyleName "Permalink to this definition")
Returns `True` if the attribute object specifies a paragraph style name.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasRightIndent(self) -> bool:
        """ 

`HasRightIndent`(*self*)[¶](#wx.TextAttr.HasRightIndent "Permalink to this definition")
Returns `True` if the attribute object specifies a right indent.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasTabs(self) -> bool:
        """ 

`HasTabs`(*self*)[¶](#wx.TextAttr.HasTabs "Permalink to this definition")
Returns `True` if the attribute object specifies tab stops.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasTextColour(self) -> bool:
        """ 

`HasTextColour`(*self*)[¶](#wx.TextAttr.HasTextColour "Permalink to this definition")
Returns `True` if the attribute object specifies a text foreground colour.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasTextEffects(self) -> bool:
        """ 

`HasTextEffects`(*self*)[¶](#wx.TextAttr.HasTextEffects "Permalink to this definition")
Returns `True` if the attribute object specifies text effects.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def HasURL(self) -> bool:
        """ 

`HasURL`(*self*)[¶](#wx.TextAttr.HasURL "Permalink to this definition")
Returns `True` if the attribute object specifies a URL.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def IsCharacterStyle(self) -> bool:
        """ 

`IsCharacterStyle`(*self*)[¶](#wx.TextAttr.IsCharacterStyle "Permalink to this definition")
Returns `True` if the object represents a character style, that is, the flags specify a font or a text background or foreground colour.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def IsDefault(self) -> bool:
        """ 

`IsDefault`(*self*)[¶](#wx.TextAttr.IsDefault "Permalink to this definition")
Returns `False` if we have any attributes set, `True` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def IsParagraphStyle(self) -> bool:
        """ 

`IsParagraphStyle`(*self*)[¶](#wx.TextAttr.IsParagraphStyle "Permalink to this definition")
Returns `True` if the object represents a paragraph style, that is, the flags specify alignment, indentation, tabs, paragraph spacing, or bullet style.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def Merge(self, *args, **kw) -> None:
        """ 

`Merge`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TextAttr.Merge "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Merge** *(self, overlay)*


Copies all defined/valid properties from overlay to current object.



Parameters
**overlay** ([*wx.TextAttr*](#wx.TextAttr "wx.TextAttr")) – 






---

  



**Merge** *(base, overlay)*


Creates a new  [wx.TextAttr](#wx-textattr) which is a merge of *base* and *overlay*.


Properties defined in *overlay* take precedence over those in *base*. Properties undefined/invalid in both are undefined in the result.



Parameters
* **base** ([*wx.TextAttr*](#wx.TextAttr "wx.TextAttr")) –
* **overlay** ([*wx.TextAttr*](#wx.TextAttr "wx.TextAttr")) –



Return type
 [wx.TextAttr](#wx-textattr)






---

  





            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetAlignment(self, alignment: int) -> None:
        """ 

`SetAlignment`(*self*, *alignment*)[¶](#wx.TextAttr.SetAlignment "Permalink to this definition")
Sets the paragraph alignment.


See  [wx.TextAttrAlignment](wx.TextAttrAlignment.enumeration.html#wx-textattralignment) enumeration values.


Of these, `wx.TEXT_ALIGNMENT_JUSTIFIED` is unimplemented. In future justification may be supported when printing or previewing, only.



Parameters
**alignment** ([*TextAttrAlignment*](wx.TextAttrAlignment.enumeration.html "TextAttrAlignment")) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetBackgroundColour(self, colBack: Union[int, str, 'Colour']) -> None:
        """ 

`SetBackgroundColour`(*self*, *colBack*)[¶](#wx.TextAttr.SetBackgroundColour "Permalink to this definition")
Sets the background colour.



Parameters
**colBack** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetBulletFont(self, font: str) -> None:
        """ 

`SetBulletFont`(*self*, *font*)[¶](#wx.TextAttr.SetBulletFont "Permalink to this definition")
Sets the name of the font associated with the bullet symbol.


Only valid for attributes with `TEXT_ATTR_BULLET_SYMBOL`.



Parameters
**font** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetBulletName(self, name: str) -> None:
        """ 

`SetBulletName`(*self*, *name*)[¶](#wx.TextAttr.SetBulletName "Permalink to this definition")
Sets the standard bullet name, applicable if the bullet style is `wx.TEXT_ATTR_BULLET_STYLE_STANDARD`.


See [`GetBulletName`](#wx.TextAttr.GetBulletName "wx.TextAttr.GetBulletName") for a list of supported names, and how to expand the range of supported types.



Parameters
**name** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetBulletNumber(self, n: int) -> None:
        """ 

`SetBulletNumber`(*self*, *n*)[¶](#wx.TextAttr.SetBulletNumber "Permalink to this definition")
Sets the bullet number.



Parameters
**n** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetBulletStyle(self, style: int) -> None:
        """ 

`SetBulletStyle`(*self*, *style*)[¶](#wx.TextAttr.SetBulletStyle "Permalink to this definition")
Sets the bullet style.


The  [wx.TextAttrBulletStyle](wx.TextAttrBulletStyle.enumeration.html#wx-textattrbulletstyle) enumeration values are all supported, except for `wx.TEXT_ATTR_BULLET_STYLE_BITMAP`.



Parameters
**style** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetBulletText(self, text: str) -> None:
        """ 

`SetBulletText`(*self*, *text*)[¶](#wx.TextAttr.SetBulletText "Permalink to this definition")
Sets the bullet text, which could be a symbol, or (for example) cached outline text.



Parameters
**text** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetCharacterStyleName(self, name: str) -> None:
        """ 

`SetCharacterStyleName`(*self*, *name*)[¶](#wx.TextAttr.SetCharacterStyleName "Permalink to this definition")
Sets the character style name.



Parameters
**name** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFlags(self, flags: int) -> None:
        """ 

`SetFlags`(*self*, *flags*)[¶](#wx.TextAttr.SetFlags "Permalink to this definition")
Sets the flags determining which styles are being specified.


The  [wx.TextAttrFlags](wx.TextAttrFlags.enumeration.html#wx-textattrflags) values can be passed in a bitlist.



Parameters
**flags** (*long*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFont(self, font, flags=TEXT_ATTR_FONT & ~TEXT_ATTR_FONT_PIXEL_SIZE) -> None:
        """ 

`SetFont`(*self*, *font*, *flags=TEXT\_ATTR\_FONT & ~TEXT\_ATTR\_FONT\_PIXEL\_SIZE*)[¶](#wx.TextAttr.SetFont "Permalink to this definition")
Sets the attributes for the given font.


Note that  [wx.TextAttr](#wx-textattr) does not store an actual  [wx.Font](wx.Font.html#wx-font) object.



Parameters
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontEncoding(self, encoding: int) -> None:
        """ 

`SetFontEncoding`(*self*, *encoding*)[¶](#wx.TextAttr.SetFontEncoding "Permalink to this definition")
Sets the font encoding.



Parameters
**encoding** ([*FontEncoding*](wx.FontEncoding.enumeration.html "FontEncoding")) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontFaceName(self, faceName: str) -> None:
        """ 

`SetFontFaceName`(*self*, *faceName*)[¶](#wx.TextAttr.SetFontFaceName "Permalink to this definition")
Sets the font face name.



Parameters
**faceName** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontFamily(self, family: int) -> None:
        """ 

`SetFontFamily`(*self*, *family*)[¶](#wx.TextAttr.SetFontFamily "Permalink to this definition")
Sets the font family.



Parameters
**family** ([*FontFamily*](wx.FontFamily.enumeration.html "FontFamily")) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontPixelSize(self, pixelSize: int) -> None:
        """ 

`SetFontPixelSize`(*self*, *pixelSize*)[¶](#wx.TextAttr.SetFontPixelSize "Permalink to this definition")
Sets the font size in pixels.



Parameters
**pixelSize** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontPointSize(self, pointSize: int) -> None:
        """ 

`SetFontPointSize`(*self*, *pointSize*)[¶](#wx.TextAttr.SetFontPointSize "Permalink to this definition")
Sets the font size in points.



Parameters
**pointSize** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontSize(self, pointSize: int) -> None:
        """ 

`SetFontSize`(*self*, *pointSize*)[¶](#wx.TextAttr.SetFontSize "Permalink to this definition")
Sets the font size in points.



Parameters
**pointSize** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontStyle(self, fontStyle: int) -> None:
        """ 

`SetFontStyle`(*self*, *fontStyle*)[¶](#wx.TextAttr.SetFontStyle "Permalink to this definition")
Sets the font style (normal, italic or slanted).



Parameters
**fontStyle** ([*FontStyle*](wx.FontStyle.enumeration.html "FontStyle")) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontUnderlined(self, underlined: bool) -> None:
        """ 

`SetFontUnderlined`(*self*, *underlined*)[¶](#wx.TextAttr.SetFontUnderlined "Permalink to this definition")
Sets the font underlining (solid line, text colour).



Parameters
**underlined** (*bool*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontUnderlineType(self, type, colour=NullColour) -> None:
        """ 

`SetFontUnderlineType`(*self*, *type*, *colour=NullColour*)[¶](#wx.TextAttr.SetFontUnderlineType "Permalink to this definition")
Sets the font underlining.



Parameters
* **type** ([*TextAttrUnderlineType*](wx.TextAttrUnderlineType.enumeration.html "TextAttrUnderlineType")) – Type of underline.
* **colour** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – Colour to use for underlining, text colour is used by default.





New in version 4.1/wxWidgets-3.1.3.




Note


On wxMSW, `wx.TEXT_ATTR_UNDERLINE_DOUBLE` is shown as `wx.TEXT_ATTR_UNDERLINE_SOLID`. There is only a limited number of colours supported, the `RGB` values are listed [here](https://docs.microsoft.com/en-us/windows/win32/api/tom/nf-tom-itextdocument2-geteffectcolor). `wx.TEXT_ATTR_UNDERLINE_SPECIAL` is shown as a waved line.




Note


On wxGTK, underline colour is only supported by `GTK3`. `wx.TEXT_ATTR_UNDERLINE_SPECIAL` is shown as a waved line. GTK might overrule the colour of `wx.TEXT_ATTR_UNDERLINE_SPECIAL`.




Note


On wxOSX, `wx.TEXT_ATTR_UNDERLINE_SPECIAL` is shown as a dotted line.





            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetFontWeight(self, fontWeight: int) -> None:
        """ 

`SetFontWeight`(*self*, *fontWeight*)[¶](#wx.TextAttr.SetFontWeight "Permalink to this definition")
Sets the font weight.



Parameters
**fontWeight** ([*FontWeight*](wx.FontWeight.enumeration.html "FontWeight")) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetLeftIndent(self, indent, subIndent=0) -> None:
        """ 

`SetLeftIndent`(*self*, *indent*, *subIndent=0*)[¶](#wx.TextAttr.SetLeftIndent "Permalink to this definition")
Sets the left indent and left subindent in tenths of a millimetre.


The sub-indent is an offset from the left of the paragraph, and is used for all but the first line in a paragraph.


A positive value will cause the first line to appear to the left of the subsequent lines, and a negative value will cause the first line to be indented relative to the subsequent lines.


 [wx.richtext.RichTextBuffer](wx.richtext.RichTextBuffer.html#wx-richtext-richtextbuffer) uses indentation to render a bulleted item. The left indent is the distance between the margin and the bullet. The content of the paragraph, including the first line, starts at leftMargin + leftSubIndent. So the distance between the left edge of the bullet and the left of the actual paragraph is leftSubIndent.



Parameters
* **indent** (*int*) –
* **subIndent** (*int*) –






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetLineSpacing(self, spacing: int) -> None:
        """ 

`SetLineSpacing`(*self*, *spacing*)[¶](#wx.TextAttr.SetLineSpacing "Permalink to this definition")
Sets the line spacing.


*spacing* is a multiple, where 10 means single-spacing, 15 means 1.5 spacing, and 20 means float spacing. The  [wx.TextAttrLineSpacing](wx.TextAttrLineSpacing.enumeration.html#wx-textattrlinespacing) values are defined for convenience.



Parameters
**spacing** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetListStyleName(self, name: str) -> None:
        """ 

`SetListStyleName`(*self*, *name*)[¶](#wx.TextAttr.SetListStyleName "Permalink to this definition")
Sets the list style name.



Parameters
**name** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetOutlineLevel(self, level: int) -> None:
        """ 

`SetOutlineLevel`(*self*, *level*)[¶](#wx.TextAttr.SetOutlineLevel "Permalink to this definition")
Specifies the outline level.


Zero represents normal text. At present, the outline level is not used, but may be used in future for determining list levels and for applications that need to store document structure information.



Parameters
**level** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetPageBreak(self, pageBreak: bool=True) -> None:
        """ 

`SetPageBreak`(*self*, *pageBreak=True*)[¶](#wx.TextAttr.SetPageBreak "Permalink to this definition")
Specifies a page break before this paragraph.



Parameters
**pageBreak** (*bool*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetParagraphSpacingAfter(self, spacing: int) -> None:
        """ 

`SetParagraphSpacingAfter`(*self*, *spacing*)[¶](#wx.TextAttr.SetParagraphSpacingAfter "Permalink to this definition")
Sets the spacing after a paragraph, in tenths of a millimetre.



Parameters
**spacing** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetParagraphSpacingBefore(self, spacing: int) -> None:
        """ 

`SetParagraphSpacingBefore`(*self*, *spacing*)[¶](#wx.TextAttr.SetParagraphSpacingBefore "Permalink to this definition")
Sets the spacing before a paragraph, in tenths of a millimetre.



Parameters
**spacing** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetParagraphStyleName(self, name: str) -> None:
        """ 

`SetParagraphStyleName`(*self*, *name*)[¶](#wx.TextAttr.SetParagraphStyleName "Permalink to this definition")
Sets the name of the paragraph style.



Parameters
**name** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetRightIndent(self, indent: int) -> None:
        """ 

`SetRightIndent`(*self*, *indent*)[¶](#wx.TextAttr.SetRightIndent "Permalink to this definition")
Sets the right indent in tenths of a millimetre.



Parameters
**indent** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetTabs(self, tabs: int) -> None:
        """ 

`SetTabs`(*self*, *tabs*)[¶](#wx.TextAttr.SetTabs "Permalink to this definition")
Sets the tab stops, expressed in tenths of a millimetre.


Each stop is measured from the left margin and therefore each value must be larger than the last.



Parameters
**tabs** (*list of integers*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetTextColour(self, colText: Union[int, str, 'Colour']) -> None:
        """ 

`SetTextColour`(*self*, *colText*)[¶](#wx.TextAttr.SetTextColour "Permalink to this definition")
Sets the text foreground colour.



Parameters
**colText** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetTextEffectFlags(self, flags: int) -> None:
        """ 

`SetTextEffectFlags`(*self*, *flags*)[¶](#wx.TextAttr.SetTextEffectFlags "Permalink to this definition")
Sets the text effect bits of interest.


You should also pass `wx.TEXT_ATTR_EFFECTS` to [`SetFlags`](#wx.TextAttr.SetFlags "wx.TextAttr.SetFlags") . See [`SetFlags`](#wx.TextAttr.SetFlags "wx.TextAttr.SetFlags") for further information.



Parameters
**flags** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetTextEffects(self, effects: int) -> None:
        """ 

`SetTextEffects`(*self*, *effects*)[¶](#wx.TextAttr.SetTextEffects "Permalink to this definition")
Sets the text effects, a bit list of styles.


The  [wx.TextAttrEffects](wx.TextAttrEffects.enumeration.html#wx-textattreffects) enumeration values can be used.


Of these, only `wx.TEXT_ATTR_EFFECT_CAPITALS`, `wx.TEXT_ATTR_EFFECT_STRIKETHROUGH`, `wx.TEXT_ATTR_EFFECT_SUPERSCRIPT` and `wx.TEXT_ATTR_EFFECT_SUBSCRIPT` are implemented.


`wx.TEXT_ATTR_EFFECT_CAPITALS` capitalises text when displayed (leaving the case of the actual buffer text unchanged), and `wx.TEXT_ATTR_EFFECT_STRIKETHROUGH` draws a line through text.


To set effects, you should also pass `wx.TEXT_ATTR_EFFECTS` to [`SetFlags`](#wx.TextAttr.SetFlags "wx.TextAttr.SetFlags") , and call [`SetTextEffectFlags`](#wx.TextAttr.SetTextEffectFlags "wx.TextAttr.SetTextEffectFlags") with the styles (taken from the above set) that you are interested in setting.



Parameters
**effects** (*int*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    def SetURL(self, url: str) -> None:
        """ 

`SetURL`(*self*, *url*)[¶](#wx.TextAttr.SetURL "Permalink to this definition")
Sets the URL for the content.


Sets the `wx.TEXT_ATTR_URL` style; content with this style causes  [wx.richtext.RichTextCtrl](wx.richtext.RichTextCtrl.html#wx-richtext-richtextctrl) to show a hand cursor over it, and  [wx.richtext.RichTextCtrl](wx.richtext.RichTextCtrl.html#wx-richtext-richtextctrl) generates a  [wx.TextUrlEvent](wx.TextUrlEvent.html#wx-texturlevent) when the content is clicked.



Parameters
**url** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextAttr.html
        """

    Alignment: int  # `Alignment`[¶](#wx.TextAttr.Alignment "Permalink to this definition")See [`GetAlignment`](#wx.TextAttr.GetAlignment "wx.TextAttr.GetAlignment") and [`SetAlignment`](#wx.TextAttr.SetAlignment "wx.TextAttr.SetAlignment")
    BackgroundColour: 'Colour'  # `BackgroundColour`[¶](#wx.TextAttr.BackgroundColour "Permalink to this definition")See [`GetBackgroundColour`](#wx.TextAttr.GetBackgroundColour "wx.TextAttr.GetBackgroundColour") and [`SetBackgroundColour`](#wx.TextAttr.SetBackgroundColour "wx.TextAttr.SetBackgroundColour")
    BulletFont: str  # `BulletFont`[¶](#wx.TextAttr.BulletFont "Permalink to this definition")See [`GetBulletFont`](#wx.TextAttr.GetBulletFont "wx.TextAttr.GetBulletFont") and [`SetBulletFont`](#wx.TextAttr.SetBulletFont "wx.TextAttr.SetBulletFont")
    BulletName: str  # `BulletName`[¶](#wx.TextAttr.BulletName "Permalink to this definition")See [`GetBulletName`](#wx.TextAttr.GetBulletName "wx.TextAttr.GetBulletName") and [`SetBulletName`](#wx.TextAttr.SetBulletName "wx.TextAttr.SetBulletName")
    BulletNumber: int  # `BulletNumber`[¶](#wx.TextAttr.BulletNumber "Permalink to this definition")See [`GetBulletNumber`](#wx.TextAttr.GetBulletNumber "wx.TextAttr.GetBulletNumber") and [`SetBulletNumber`](#wx.TextAttr.SetBulletNumber "wx.TextAttr.SetBulletNumber")
    BulletStyle: int  # `BulletStyle`[¶](#wx.TextAttr.BulletStyle "Permalink to this definition")See [`GetBulletStyle`](#wx.TextAttr.GetBulletStyle "wx.TextAttr.GetBulletStyle") and [`SetBulletStyle`](#wx.TextAttr.SetBulletStyle "wx.TextAttr.SetBulletStyle")
    BulletText: str  # `BulletText`[¶](#wx.TextAttr.BulletText "Permalink to this definition")See [`GetBulletText`](#wx.TextAttr.GetBulletText "wx.TextAttr.GetBulletText") and [`SetBulletText`](#wx.TextAttr.SetBulletText "wx.TextAttr.SetBulletText")
    CharacterStyleName: str  # `CharacterStyleName`[¶](#wx.TextAttr.CharacterStyleName "Permalink to this definition")See [`GetCharacterStyleName`](#wx.TextAttr.GetCharacterStyleName "wx.TextAttr.GetCharacterStyleName") and [`SetCharacterStyleName`](#wx.TextAttr.SetCharacterStyleName "wx.TextAttr.SetCharacterStyleName")
    Flags: int  # `Flags`[¶](#wx.TextAttr.Flags "Permalink to this definition")See [`GetFlags`](#wx.TextAttr.GetFlags "wx.TextAttr.GetFlags") and [`SetFlags`](#wx.TextAttr.SetFlags "wx.TextAttr.SetFlags")
    Font: '_Font'  # `Font`[¶](#wx.TextAttr.Font "Permalink to this definition")See [`GetFont`](#wx.TextAttr.GetFont "wx.TextAttr.GetFont") and [`SetFont`](#wx.TextAttr.SetFont "wx.TextAttr.SetFont")
    FontEncoding: int  # `FontEncoding`[¶](#wx.TextAttr.FontEncoding "Permalink to this definition")See [`GetFontEncoding`](#wx.TextAttr.GetFontEncoding "wx.TextAttr.GetFontEncoding") and [`SetFontEncoding`](#wx.TextAttr.SetFontEncoding "wx.TextAttr.SetFontEncoding")
    FontFaceName: str  # `FontFaceName`[¶](#wx.TextAttr.FontFaceName "Permalink to this definition")See [`GetFontFaceName`](#wx.TextAttr.GetFontFaceName "wx.TextAttr.GetFontFaceName") and [`SetFontFaceName`](#wx.TextAttr.SetFontFaceName "wx.TextAttr.SetFontFaceName")
    FontFamily: int  # `FontFamily`[¶](#wx.TextAttr.FontFamily "Permalink to this definition")See [`GetFontFamily`](#wx.TextAttr.GetFontFamily "wx.TextAttr.GetFontFamily") and [`SetFontFamily`](#wx.TextAttr.SetFontFamily "wx.TextAttr.SetFontFamily")
    FontSize: int  # `FontSize`[¶](#wx.TextAttr.FontSize "Permalink to this definition")See [`GetFontSize`](#wx.TextAttr.GetFontSize "wx.TextAttr.GetFontSize") and [`SetFontSize`](#wx.TextAttr.SetFontSize "wx.TextAttr.SetFontSize")
    FontStyle: int  # `FontStyle`[¶](#wx.TextAttr.FontStyle "Permalink to this definition")See [`GetFontStyle`](#wx.TextAttr.GetFontStyle "wx.TextAttr.GetFontStyle") and [`SetFontStyle`](#wx.TextAttr.SetFontStyle "wx.TextAttr.SetFontStyle")
    FontUnderlined: bool  # `FontUnderlined`[¶](#wx.TextAttr.FontUnderlined "Permalink to this definition")See [`GetFontUnderlined`](#wx.TextAttr.GetFontUnderlined "wx.TextAttr.GetFontUnderlined") and [`SetFontUnderlined`](#wx.TextAttr.SetFontUnderlined "wx.TextAttr.SetFontUnderlined")
    FontWeight: int  # `FontWeight`[¶](#wx.TextAttr.FontWeight "Permalink to this definition")See [`GetFontWeight`](#wx.TextAttr.GetFontWeight "wx.TextAttr.GetFontWeight") and [`SetFontWeight`](#wx.TextAttr.SetFontWeight "wx.TextAttr.SetFontWeight")
    LeftIndent: int  # `LeftIndent`[¶](#wx.TextAttr.LeftIndent "Permalink to this definition")See [`GetLeftIndent`](#wx.TextAttr.GetLeftIndent "wx.TextAttr.GetLeftIndent") and [`SetLeftIndent`](#wx.TextAttr.SetLeftIndent "wx.TextAttr.SetLeftIndent")
    LeftSubIndent: int  # `LeftSubIndent`[¶](#wx.TextAttr.LeftSubIndent "Permalink to this definition")See [`GetLeftSubIndent`](#wx.TextAttr.GetLeftSubIndent "wx.TextAttr.GetLeftSubIndent")
    LineSpacing: int  # `LineSpacing`[¶](#wx.TextAttr.LineSpacing "Permalink to this definition")See [`GetLineSpacing`](#wx.TextAttr.GetLineSpacing "wx.TextAttr.GetLineSpacing") and [`SetLineSpacing`](#wx.TextAttr.SetLineSpacing "wx.TextAttr.SetLineSpacing")
    ListStyleName: str  # `ListStyleName`[¶](#wx.TextAttr.ListStyleName "Permalink to this definition")See [`GetListStyleName`](#wx.TextAttr.GetListStyleName "wx.TextAttr.GetListStyleName") and [`SetListStyleName`](#wx.TextAttr.SetListStyleName "wx.TextAttr.SetListStyleName")
    OutlineLevel: int  # `OutlineLevel`[¶](#wx.TextAttr.OutlineLevel "Permalink to this definition")See [`GetOutlineLevel`](#wx.TextAttr.GetOutlineLevel "wx.TextAttr.GetOutlineLevel") and [`SetOutlineLevel`](#wx.TextAttr.SetOutlineLevel "wx.TextAttr.SetOutlineLevel")
    ParagraphSpacingAfter: int  # `ParagraphSpacingAfter`[¶](#wx.TextAttr.ParagraphSpacingAfter "Permalink to this definition")See [`GetParagraphSpacingAfter`](#wx.TextAttr.GetParagraphSpacingAfter "wx.TextAttr.GetParagraphSpacingAfter") and [`SetParagraphSpacingAfter`](#wx.TextAttr.SetParagraphSpacingAfter "wx.TextAttr.SetParagraphSpacingAfter")
    ParagraphSpacingBefore: int  # `ParagraphSpacingBefore`[¶](#wx.TextAttr.ParagraphSpacingBefore "Permalink to this definition")See [`GetParagraphSpacingBefore`](#wx.TextAttr.GetParagraphSpacingBefore "wx.TextAttr.GetParagraphSpacingBefore") and [`SetParagraphSpacingBefore`](#wx.TextAttr.SetParagraphSpacingBefore "wx.TextAttr.SetParagraphSpacingBefore")
    ParagraphStyleName: str  # `ParagraphStyleName`[¶](#wx.TextAttr.ParagraphStyleName "Permalink to this definition")See [`GetParagraphStyleName`](#wx.TextAttr.GetParagraphStyleName "wx.TextAttr.GetParagraphStyleName") and [`SetParagraphStyleName`](#wx.TextAttr.SetParagraphStyleName "wx.TextAttr.SetParagraphStyleName")
    RightIndent: int  # `RightIndent`[¶](#wx.TextAttr.RightIndent "Permalink to this definition")See [`GetRightIndent`](#wx.TextAttr.GetRightIndent "wx.TextAttr.GetRightIndent") and [`SetRightIndent`](#wx.TextAttr.SetRightIndent "wx.TextAttr.SetRightIndent")
    Tabs: int  # `Tabs`[¶](#wx.TextAttr.Tabs "Permalink to this definition")See [`GetTabs`](#wx.TextAttr.GetTabs "wx.TextAttr.GetTabs") and [`SetTabs`](#wx.TextAttr.SetTabs "wx.TextAttr.SetTabs")
    TextColour: 'Colour'  # `TextColour`[¶](#wx.TextAttr.TextColour "Permalink to this definition")See [`GetTextColour`](#wx.TextAttr.GetTextColour "wx.TextAttr.GetTextColour") and [`SetTextColour`](#wx.TextAttr.SetTextColour "wx.TextAttr.SetTextColour")
    TextEffectFlags: int  # `TextEffectFlags`[¶](#wx.TextAttr.TextEffectFlags "Permalink to this definition")See [`GetTextEffectFlags`](#wx.TextAttr.GetTextEffectFlags "wx.TextAttr.GetTextEffectFlags") and [`SetTextEffectFlags`](#wx.TextAttr.SetTextEffectFlags "wx.TextAttr.SetTextEffectFlags")
    TextEffects: int  # `TextEffects`[¶](#wx.TextAttr.TextEffects "Permalink to this definition")See [`GetTextEffects`](#wx.TextAttr.GetTextEffects "wx.TextAttr.GetTextEffects") and [`SetTextEffects`](#wx.TextAttr.SetTextEffects "wx.TextAttr.SetTextEffects")
    URL: str  # `URL`[¶](#wx.TextAttr.URL "Permalink to this definition")See [`GetURL`](#wx.TextAttr.GetURL "wx.TextAttr.GetURL") and [`SetURL`](#wx.TextAttr.SetURL "wx.TextAttr.SetURL")
    UnderlineColour: 'Colour'  # `UnderlineColour`[¶](#wx.TextAttr.UnderlineColour "Permalink to this definition")See [`GetUnderlineColour`](#wx.TextAttr.GetUnderlineColour "wx.TextAttr.GetUnderlineColour")
    UnderlineType: 'TextAttrUnderlineType'  # `UnderlineType`[¶](#wx.TextAttr.UnderlineType "Permalink to this definition")See [`GetUnderlineType`](#wx.TextAttr.GetUnderlineType "wx.TextAttr.GetUnderlineType")



TEXT_ATTR_BULLET_STYLE_STANDARD: int

TEXT_ATTR_URL: int

TEXT_ALIGNMENT_JUSTIFIED: int

TEXT_ATTR_BULLET_STYLE_BITMAP: int

TEXT_ATTR_UNDERLINE_DOUBLE: int

TEXT_ATTR_UNDERLINE_SOLID: int

TEXT_ATTR_UNDERLINE_SPECIAL: int

TEXT_ATTR_EFFECTS: int

TEXT_ATTR_EFFECT_CAPITALS: int

TEXT_ATTR_EFFECT_STRIKETHROUGH: int

TEXT_ATTR_EFFECT_SUPERSCRIPT: int

TEXT_ATTR_EFFECT_SUBSCRIPT: int

_CommandProcessor: TypeAlias = CommandProcessor

class TextCompleter:
    """ Base class for custom text completer objects.


  


        Source: https://docs.wxpython.org/wx.TextCompleter.html
    """
    def GetNext(self) -> str:
        """ 

`GetNext`(*self*)[¶](#wx.TextCompleter.GetNext "Permalink to this definition")
Called to retrieve the next completion.


All completions returned by this function should start with the prefix passed to the last call to [`Start`](#wx.TextCompleter.Start "wx.TextCompleter.Start") .


Notice that, as [`Start`](#wx.TextCompleter.Start "wx.TextCompleter.Start") , this method is called from a worker thread context under MSW.



Return type
`string`



Returns
The next completion or an empty string to indicate that there are no more of them.






            Source: https://docs.wxpython.org/wx.TextCompleter.html
        """

    def Start(self, prefix: str) -> bool:
        """ 

`Start`(*self*, *prefix*)[¶](#wx.TextCompleter.Start "Permalink to this definition")
Function called to start iteration over the completions for the given prefix.


This function could start a database query, for example, if the results are read from a database.


Notice that under some platforms (currently MSW only) it is called from another thread context and so the appropriate synchronization mechanism should be used to access any data also used by the main UI thread.



Parameters
**prefix** (*string*) – The prefix for which completions are to be generated.



Return type
*bool*



Returns
`True` to continue with calling [`GetNext`](#wx.TextCompleter.GetNext "wx.TextCompleter.GetNext") or `False` to indicate that there are no matches and [`GetNext`](#wx.TextCompleter.GetNext "wx.TextCompleter.GetNext") shouldn’t be called at all.






            Source: https://docs.wxpython.org/wx.TextCompleter.html
        """

    Next: str  # `Next`[¶](#wx.TextCompleter.Next "Permalink to this definition")See [`GetNext`](#wx.TextCompleter.GetNext "wx.TextCompleter.GetNext")



class TextCompleterSimple(TextCompleter):
    """ A simpler base class for custom completer objects.


  


        Source: https://docs.wxpython.org/wx.TextCompleterSimple.html
    """
    def GetCompletions(self, prefix: str) -> 'res':
        """ 

`GetCompletions`(*self*, *prefix*)[¶](#wx.TextCompleterSimple.GetCompletions "Permalink to this definition")
Pure virtual method returning all possible completions for the given prefix.


The custom completer should examine the provided prefix and return all the possible completions for it in the output array *res*.


Please notice that the returned values should start with the prefix, otherwise they will be simply ignored, making adding them to the array in the first place useless.


Notice that this function may be called from thread other than main one (this is currently always the case under MSW) so the appropriate synchronization mechanism should be used to protect the shared data.



Parameters
**prefix** (*string*) – The possibly empty prefix that the user had already entered.



Return type
*res*






            Source: https://docs.wxpython.org/wx.TextCompleterSimple.html
        """

    def GetNext(self) -> str:
        """ 

`GetNext`(*self*)[¶](#wx.TextCompleterSimple.GetNext "Permalink to this definition")
Called to retrieve the next completion.


All completions returned by this function should start with the prefix passed to the last call to [`Start`](#wx.TextCompleterSimple.Start "wx.TextCompleterSimple.Start") .


Notice that, as [`Start`](#wx.TextCompleterSimple.Start "wx.TextCompleterSimple.Start") , this method is called from a worker thread context under MSW.



Return type
`string`



Returns
The next completion or an empty string to indicate that there are no more of them.






            Source: https://docs.wxpython.org/wx.TextCompleterSimple.html
        """

    def Start(self, prefix: str) -> bool:
        """ 

`Start`(*self*, *prefix*)[¶](#wx.TextCompleterSimple.Start "Permalink to this definition")
Function called to start iteration over the completions for the given prefix.


This function could start a database query, for example, if the results are read from a database.


Notice that under some platforms (currently MSW only) it is called from another thread context and so the appropriate synchronization mechanism should be used to access any data also used by the main UI thread.



Parameters
**prefix** (*string*) – The prefix for which completions are to be generated.



Return type
*bool*



Returns
`True` to continue with calling [`GetNext`](#wx.TextCompleterSimple.GetNext "wx.TextCompleterSimple.GetNext") or `False` to indicate that there are no matches and [`GetNext`](#wx.TextCompleterSimple.GetNext "wx.TextCompleterSimple.GetNext") shouldn’t be called at all.






            Source: https://docs.wxpython.org/wx.TextCompleterSimple.html
        """

    Next: str  # `Next`[¶](#wx.TextCompleterSimple.Next "Permalink to this definition")See [`GetNext`](#wx.TextCompleterSimple.GetNext "wx.TextCompleterSimple.GetNext")



class TextDataObject(DataObjectSimple):
    """ **Possible constructors**:



```
TextDataObject(text="")

```


TextDataObject is a specialization of DataObjectSimple for text
data.


  


        Source: https://docs.wxpython.org/wx.TextDataObject.html
    """
    def __init__(self, text: str="") -> None:
        """ 

`__init__`(*self*, *text=""*)[¶](#wx.TextDataObject.__init__ "Permalink to this definition")
Constructor, may be used to initialise the text (otherwise [`SetText`](#wx.TextDataObject.SetText "wx.TextDataObject.SetText") should be used later).



Parameters
**text** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextDataObject.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.TextDataObject.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.TextDataObject.html
        """

    def GetFormat(self) -> 'DataFormat':
        """ 

`GetFormat`(*self*)[¶](#wx.TextDataObject.GetFormat "Permalink to this definition")
Returns the preferred format supported by this object.


This is `DF_TEXT` or `DF_UNICODETEXT` depending on the platform and from the build mode (i.e. from `USE_UNICODE` ).



Return type
 [wx.DataFormat](wx.DataFormat.html#wx-dataformat)






            Source: https://docs.wxpython.org/wx.TextDataObject.html
        """

    def GetFormatCount(self, dir: int=DataObject.Get) -> int:
        """ 

`GetFormatCount`(*self*, *dir=DataObject.Get*)[¶](#wx.TextDataObject.GetFormatCount "Permalink to this definition")
Returns 2 under Mac and wxGTK, where text data coming from the clipboard may be provided as `ANSI` ( `DF_TEXT` ) or as Unicode text ( `DF_UNICODETEXT` , but only when `USE_UNICODE==1` ).


Returns 1 under other platforms (e.g. wxMSW) or when building in `ANSI` mode ( `USE_UNICODE==0` ).



Parameters
**dir** (*DataObject.Direction*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextDataObject.html
        """

    def GetText(self) -> str:
        """ 

`GetText`(*self*)[¶](#wx.TextDataObject.GetText "Permalink to this definition")
Returns the text associated with the data object.


You may wish to override this method when offering data on-demand, but this is not required by wxWidgets’ internals. Use this method to get data in text form from the  [wx.Clipboard](wx.Clipboard.html#wx-clipboard).



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextDataObject.html
        """

    def GetTextLength(self) -> int:
        """ 

`GetTextLength`(*self*)[¶](#wx.TextDataObject.GetTextLength "Permalink to this definition")
Returns the data size.


By default, returns the size of the text data set in the constructor or using [`SetText`](#wx.TextDataObject.SetText "wx.TextDataObject.SetText") . This can be overridden to provide text size data on-demand. It is recommended to return the text length plus 1 for a trailing zero, but this is not strictly required.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextDataObject.html
        """

    def SetData(self, format, buf) -> bool:
        """ 

`SetData`(*self*, *format*, *buf*)[¶](#wx.TextDataObject.SetData "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextDataObject.html
        """

    def SetText(self, strText: str) -> None:
        """ 

`SetText`(*self*, *strText*)[¶](#wx.TextDataObject.SetText "Permalink to this definition")
Sets the text associated with the data object.


This method is called when the data object receives the data and, by default, copies the text into the member variable. If you want to process the text on the fly you may wish to override this function.



Parameters
**strText** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextDataObject.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.TextDataObject.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.TextDataObject.GetAllFormats "wx.TextDataObject.GetAllFormats")
    Format: 'DataFormat'  # `Format`[¶](#wx.TextDataObject.Format "Permalink to this definition")See [`GetFormat`](#wx.TextDataObject.GetFormat "wx.TextDataObject.GetFormat")
    FormatCount: int  # `FormatCount`[¶](#wx.TextDataObject.FormatCount "Permalink to this definition")See [`GetFormatCount`](#wx.TextDataObject.GetFormatCount "wx.TextDataObject.GetFormatCount")
    Text: str  # `Text`[¶](#wx.TextDataObject.Text "Permalink to this definition")See [`GetText`](#wx.TextDataObject.GetText "wx.TextDataObject.GetText") and [`SetText`](#wx.TextDataObject.SetText "wx.TextDataObject.SetText")
    TextLength: int  # `TextLength`[¶](#wx.TextDataObject.TextLength "Permalink to this definition")See [`GetTextLength`](#wx.TextDataObject.GetTextLength "wx.TextDataObject.GetTextLength")



class TextDropTarget(DropTarget):
    """ **Possible constructors**:



```
TextDropTarget()

```


A predefined drop target for dealing with text data.


  


        Source: https://docs.wxpython.org/wx.TextDropTarget.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.TextDropTarget.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.TextDropTarget.html
        """

    def OnDrop(self, x, y) -> bool:
        """ 

`OnDrop`(*self*, *x*, *y*)[¶](#wx.TextDropTarget.OnDrop "Permalink to this definition")
See [`wx.DropTarget.OnDrop`](wx.DropTarget.html#wx.DropTarget.OnDrop "wx.DropTarget.OnDrop") .


This function is implemented appropriately for text, and calls [`OnDropText`](#wx.TextDropTarget.OnDropText "wx.TextDropTarget.OnDropText") .



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextDropTarget.html
        """

    def OnDropText(self, x, y, data) -> bool:
        """ 

`OnDropText`(*self*, *x*, *y*, *data*)[¶](#wx.TextDropTarget.OnDropText "Permalink to this definition")
Override this function to receive dropped text.



Parameters
* **x** (*int*) – The x coordinate of the mouse.
* **y** (*int*) – The y coordinate of the mouse.
* **data** (*string*) – The data being dropped: a *String* .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextDropTarget.html
        """



class TextEntry:
    """ Common base class for single line text entry fields.


  


        Source: https://docs.wxpython.org/wx.TextEntry.html
    """
    def AppendText(self, text: str) -> None:
        """ 

`AppendText`(*self*, *text*)[¶](#wx.TextEntry.AppendText "Permalink to this definition")
Appends the text to the end of the text control.



Parameters
**text** (*string*) – Text to write to the text control.





Note


After the text is appended, the insertion point will be at the end of the text control. If this behaviour is not desired, the programmer should use [`GetInsertionPoint`](#wx.TextEntry.GetInsertionPoint "wx.TextEntry.GetInsertionPoint") and [`SetInsertionPoint`](#wx.TextEntry.SetInsertionPoint "wx.TextEntry.SetInsertionPoint") .




See also


[`WriteText`](#wx.TextEntry.WriteText "wx.TextEntry.WriteText")





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def AutoComplete(self, *args, **kw) -> bool:
        """ 

`AutoComplete`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TextEntry.AutoComplete "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AutoComplete** *(self, choices)*


Call this function to enable auto-completion of the text typed in a single-line text control using the given *choices*.



Parameters
**choices** (*list of strings*) – 



Return type
*bool*



Returns
`True` if the auto-completion was enabled or `False` if the operation failed, typically because auto-completion is not supported by the current platform.





New in version 2.9.0.




See also


[`AutoCompleteFileNames`](#wx.TextEntry.AutoCompleteFileNames "wx.TextEntry.AutoCompleteFileNames")





---

  



**AutoComplete** *(self, completer)*


Enable auto-completion using the provided completer object.


This method should be used instead of [`AutoComplete`](#wx.TextEntry.AutoComplete "wx.TextEntry.AutoComplete") overload taking the array of possible completions if the total number of strings is too big as it allows returning the completions dynamically, depending on the text already entered by user and so is more efficient.


The specified *completer* object will be used to retrieve the list of possible completions for the already entered text and will be deleted by  [wx.TextEntry](#wx-textentry) itself when it’s not needed any longer.


Notice that you need to include */textcompleter.h* in order to define your class inheriting from  [wx.TextCompleter](wx.TextCompleter.html#wx-textcompleter).



Parameters
**completer** ([*wx.TextCompleter*](wx.TextCompleter.html#wx.TextCompleter "wx.TextCompleter")) – The object to be used for generating completions if not `None`. If it is `None`, auto-completion is disabled. The  [wx.TextEntry](#wx-textentry) object takes ownership of this pointer and will delete it in any case (i.e. even if this method returns `False`).



Return type
*bool*



Returns
`True` if the auto-completion was enabled or `False` if the operation failed, typically because auto-completion is not supported by the current platform.





New in version 2.9.2.




See also


 [wx.TextCompleter](wx.TextCompleter.html#wx-textcompleter)





---

  





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def AutoCompleteDirectories(self) -> bool:
        """ 

`AutoCompleteDirectories`(*self*)[¶](#wx.TextEntry.AutoCompleteDirectories "Permalink to this definition")
Call this function to enable auto-completion of the text using the file system directories.


Unlike [`AutoCompleteFileNames`](#wx.TextEntry.AutoCompleteFileNames "wx.TextEntry.AutoCompleteFileNames") which completes both file names and directories, this function only completes the directory names.


Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms.



Return type
*bool*



Returns
`True` if the auto-completion was enabled or `False` if the operation failed, typically because auto-completion is not supported by the current platform.





New in version 2.9.3.




See also


[`AutoComplete`](#wx.TextEntry.AutoComplete "wx.TextEntry.AutoComplete")





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def AutoCompleteFileNames(self) -> bool:
        """ 

`AutoCompleteFileNames`(*self*)[¶](#wx.TextEntry.AutoCompleteFileNames "Permalink to this definition")
Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.


Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms.



Return type
*bool*



Returns
`True` if the auto-completion was enabled or `False` if the operation failed, typically because auto-completion is not supported by the current platform.





New in version 2.9.0.




See also


[`AutoComplete`](#wx.TextEntry.AutoComplete "wx.TextEntry.AutoComplete")





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def CanCopy(self) -> bool:
        """ 

`CanCopy`(*self*)[¶](#wx.TextEntry.CanCopy "Permalink to this definition")
Returns `True` if the selection can be copied to the clipboard.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def CanCut(self) -> bool:
        """ 

`CanCut`(*self*)[¶](#wx.TextEntry.CanCut "Permalink to this definition")
Returns `True` if the selection can be cut to the clipboard.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def CanPaste(self) -> bool:
        """ 

`CanPaste`(*self*)[¶](#wx.TextEntry.CanPaste "Permalink to this definition")
Returns `True` if the contents of the clipboard can be pasted into the text control.


On some platforms (Motif, GTK) this is an approximation and returns `True` if the control is editable, `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def CanRedo(self) -> bool:
        """ 

`CanRedo`(*self*)[¶](#wx.TextEntry.CanRedo "Permalink to this definition")
Returns `True` if there is a redo facility available and the last operation can be redone.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def CanUndo(self) -> bool:
        """ 

`CanUndo`(*self*)[¶](#wx.TextEntry.CanUndo "Permalink to this definition")
Returns `True` if there is an undo facility available and the last operation can be undone.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def ChangeValue(self, value: str) -> None:
        """ 

`ChangeValue`(*self*, *value*)[¶](#wx.TextEntry.ChangeValue "Permalink to this definition")
Sets the new text control value.


It also marks the control as not-modified which means that IsModified() would return `False` immediately after the call to [`ChangeValue`](#wx.TextEntry.ChangeValue "wx.TextEntry.ChangeValue") .


The insertion point is set to the start of the control (i.e. position 0) by this function.


This functions does not generate the `wxEVT_TEXT` event but otherwise is identical to [`SetValue`](#wx.TextEntry.SetValue "wx.TextEntry.SetValue") .


See [User Generated Events vs Programmatically Generated Events](events_overview.html#user-generated-events-vs-programmatically-generated-events) for more information.



Parameters
**value** (*string*) – The new value to set. It may contain newline characters if the text control is multi-line.





New in version 2.7.1.





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.TextEntry.Clear "Permalink to this definition")
Clears the text in the control.


Note that this function will generate a `wxEVT_TEXT` event, i.e. its effect is identical to calling `SetValue` (“”).




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def Copy(self) -> None:
        """ 

`Copy`(*self*)[¶](#wx.TextEntry.Copy "Permalink to this definition")
Copies the selected text to the clipboard.




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def Cut(self) -> None:
        """ 

`Cut`(*self*)[¶](#wx.TextEntry.Cut "Permalink to this definition")
Copies the selected text to the clipboard and removes it from the control.




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def ForceUpper(self) -> None:
        """ 

`ForceUpper`(*self*)[¶](#wx.TextEntry.ForceUpper "Permalink to this definition")
Convert all text entered into the control to upper case.


Call this method to ensure that all text entered into the control is converted on the fly to upper case. If the control is not empty, its existing contents is also converted to upper case.



New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def GetHint(self) -> str:
        """ 

`GetHint`(*self*)[¶](#wx.TextEntry.GetHint "Permalink to this definition")
Returns the current hint string.


See [`SetHint`](#wx.TextEntry.SetHint "wx.TextEntry.SetHint") for more information about hints.



Return type
`string`





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def GetInsertionPoint(self) -> int:
        """ 

`GetInsertionPoint`(*self*)[¶](#wx.TextEntry.GetInsertionPoint "Permalink to this definition")
Returns the insertion point, or cursor, position.


This is defined as the zero based index of the character position to the right of the insertion point. For example, if the insertion point is at the end of the single-line text control, it is equal to [`GetLastPosition`](#wx.TextEntry.GetLastPosition "wx.TextEntry.GetLastPosition") .


Notice that insertion position is, in general, different from the index of the character the cursor position at in the string returned by [`GetValue`](#wx.TextEntry.GetValue "wx.TextEntry.GetValue") . While this is always the case for the single line controls, multi-line controls can use two characters `"\\r\\n"` as line separator (this is notably the case under MSW) meaning that indices in the control and its string value are offset by 1 for every line.


Hence to correctly get the character at the current cursor position, taking into account that there can be none if the cursor is at the end of the string, you could do the following:



```
def GetCurrentChar(textCtrl):

    pos = textCtrl.GetInsertionPoint()

    if pos == textCtrl.GetLastPosition():
        return ''

    return textCtrl.GetValue()[pos]

```



Return type
*long*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def GetLastPosition(self) -> 'TextPos':
        """ 

`GetLastPosition`(*self*)[¶](#wx.TextEntry.GetLastPosition "Permalink to this definition")
Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.



Return type
*wx.TextPos*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def GetMargins(self) -> 'Point':
        """ 

`GetMargins`(*self*)[¶](#wx.TextEntry.GetMargins "Permalink to this definition")
Returns the margins used by the control.


The `x` field of the returned point is the horizontal margin and the `y` field is the vertical one.



Return type
 [wx.Point](wx.Point.html#wx-point)





New in version 2.9.1.




Note


If given margin cannot be accurately determined, its value will be set to -1. On some platforms you cannot obtain valid margin values until you have called [`SetMargins`](#wx.TextEntry.SetMargins "wx.TextEntry.SetMargins") .




See also


[`SetMargins`](#wx.TextEntry.SetMargins "wx.TextEntry.SetMargins")





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def GetRange(self, from_, to_) -> str:
        """ 

`GetRange`(*self*, *from\_*, *to\_*)[¶](#wx.TextEntry.GetRange "Permalink to this definition")
Returns the string containing the text starting in the positions *from* and up to *to* in the control.


The positions must have been returned by another  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) method. Please note that the positions in a multiline  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) do **not** correspond to the indices in the string returned by [`GetValue`](#wx.TextEntry.GetValue "wx.TextEntry.GetValue") because of the different new line representations ( `CR` or `CR` `LF`) and so this method should be used to obtain the correct results instead of extracting parts of the entire value. It may also be more efficient, especially if the control contains a lot of data.



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def GetSelection(self) -> tuple:
        """ 

`GetSelection`(*self*)[¶](#wx.TextEntry.GetSelection "Permalink to this definition")
Gets the current selection span.


If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) methods but don’t necessarily represent the correct indices into the string returned by [`GetValue`](#wx.TextEntry.GetValue "wx.TextEntry.GetValue") for multiline controls under Windows (at least,) you should use [`GetStringSelection`](#wx.TextEntry.GetStringSelection "wx.TextEntry.GetStringSelection") to get the selected text.



Return type
*tuple*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def GetStringSelection(self) -> str:
        """ 

`GetStringSelection`(*self*)[¶](#wx.TextEntry.GetStringSelection "Permalink to this definition")
Gets the text currently selected in the control.


If there is no selection, the returned string is empty.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def GetValue(self) -> str:
        """ 

`GetValue`(*self*)[¶](#wx.TextEntry.GetValue "Permalink to this definition")
Gets the contents of the control.


Notice that for a multiline text control, the lines will be separated by (Unix-style) `\n` characters, even under Windows where they are separated by a `\r\n` sequence in the native control.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def IsEditable(self) -> bool:
        """ 

`IsEditable`(*self*)[¶](#wx.TextEntry.IsEditable "Permalink to this definition")
Returns `True` if the controls contents may be edited by user (note that it always can be changed by the program).


In other words, this functions returns `True` if the control hasn’t been put in read-only mode by a previous call to [`SetEditable`](#wx.TextEntry.SetEditable "wx.TextEntry.SetEditable") .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.TextEntry.IsEmpty "Permalink to this definition")
Returns `True` if the control is currently empty.


This is the same as [`GetValue`](#wx.TextEntry.GetValue "wx.TextEntry.GetValue") .empty() but can be much more efficient for the multiline controls containing big amounts of text.



Return type
*bool*





New in version 2.7.1.





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def Paste(self) -> None:
        """ 

`Paste`(*self*)[¶](#wx.TextEntry.Paste "Permalink to this definition")
Pastes text from the clipboard to the text item.




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def Redo(self) -> None:
        """ 

`Redo`(*self*)[¶](#wx.TextEntry.Redo "Permalink to this definition")
If there is a redo facility and the last operation can be redone, redoes the last operation.


Does nothing if there is no redo facility.




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def Remove(self, from_, to_) -> None:
        """ 

`Remove`(*self*, *from\_*, *to\_*)[¶](#wx.TextEntry.Remove "Permalink to this definition")
Removes the text starting at the first given position up to (but not including) the character at the last position.


This function puts the current insertion point position at *to* as a side effect.



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –




The first position.


The last position.




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def Replace(self, from_, to_, value) -> None:
        """ 

`Replace`(*self*, *from\_*, *to\_*, *value*)[¶](#wx.TextEntry.Replace "Permalink to this definition")
Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.


This function puts the current insertion point position at *to* as a side effect.



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –
* **value** (*string*) – The value to replace the existing text with.




The first position.


The last position.




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SelectAll(self) -> None:
        """ 

`SelectAll`(*self*)[¶](#wx.TextEntry.SelectAll "Permalink to this definition")
Selects all text in the control.



See also


[`SetSelection`](#wx.TextEntry.SetSelection "wx.TextEntry.SetSelection")





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SelectNone(self) -> None:
        """ 

`SelectNone`(*self*)[¶](#wx.TextEntry.SelectNone "Permalink to this definition")
Deselects selected text in the control.



New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SetEditable(self, editable: bool) -> None:
        """ 

`SetEditable`(*self*, *editable*)[¶](#wx.TextEntry.SetEditable "Permalink to this definition")
Makes the text item editable or read-only, overriding the `wx.TE_READONLY` flag.



Parameters
**editable** (*bool*) – If `True`, the control is editable. If `False`, the control is read-only.





See also


[`IsEditable`](#wx.TextEntry.IsEditable "wx.TextEntry.IsEditable")





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SetHint(self, hint: str) -> bool:
        """ 

`SetHint`(*self*, *hint*)[¶](#wx.TextEntry.SetHint "Permalink to this definition")
Sets a hint shown in an empty unfocused text control.


The hints are usually used to indicate to the user what is supposed to be entered into the given entry field, e.g. a common use of them is to show an explanation of what can be entered in a  [wx.SearchCtrl](wx.SearchCtrl.html#wx-searchctrl).


The hint is shown (usually greyed out) for an empty control until it gets focus and is shown again if the control loses it and remains empty. It won’t be shown once the control has a non-empty value, although it will be shown again if the control contents is cleared. Because of this, it generally only makes sense to use hints with the controls which are initially empty.


Notice that hints are known as *cue banners* under MSW or *placeholder strings* under macOS.


For the platforms without native hints support, the implementation has several known limitations. Notably, the hint display will not be properly updated if you change  [wx.TextEntry](#wx-textentry) contents programmatically when the hint is displayed using methods other than [`SetValue`](#wx.TextEntry.SetValue "wx.TextEntry.SetValue") or [`ChangeValue`](#wx.TextEntry.ChangeValue "wx.TextEntry.ChangeValue") or others which use them internally (e.g. [`Clear`](#wx.TextEntry.Clear "wx.TextEntry.Clear") ). In other words, currently you should avoid calling methods such as [`WriteText`](#wx.TextEntry.WriteText "wx.TextEntry.WriteText") or [`Replace`](#wx.TextEntry.Replace "wx.TextEntry.Replace") when using hints and the text control is empty. If you bind to the control’s focus and wxEVT\_TEXT events, you must call [`wx.Event.Skip`](wx.Event.html#wx.Event.Skip "wx.Event.Skip") on them so that the generic implementation works correctly.


Another limitation is that hints are ignored for the controls with `TE_PASSWORD` style.



Parameters
**hint** (*string*) – 



Return type
*bool*





New in version 2.9.0.




Note


Currently implemented natively on Windows (Vista and later only), macOS and GTK+ (3.2 and later).




Note


Hints can be used for single line text controls under all platforms, but only MSW and GTK+ 2 support them for multi-line text controls, they are ignored for them under the other platforms.





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SetInsertionPoint(self, pos: int) -> None:
        """ 

`SetInsertionPoint`(*self*, *pos*)[¶](#wx.TextEntry.SetInsertionPoint "Permalink to this definition")
Sets the insertion point at the given position.



Parameters
**pos** (*long*) – Position to set, in the range from 0 to [`GetLastPosition`](#wx.TextEntry.GetLastPosition "wx.TextEntry.GetLastPosition") inclusive.






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SetInsertionPointEnd(self) -> None:
        """ 

`SetInsertionPointEnd`(*self*)[¶](#wx.TextEntry.SetInsertionPointEnd "Permalink to this definition")
Sets the insertion point at the end of the text control.


This is equivalent to calling [`wx.TextCtrl.SetInsertionPoint`](#wx.TextEntry.SetInsertionPoint "wx.TextEntry.SetInsertionPoint") with [`wx.TextCtrl.GetLastPosition`](#wx.TextEntry.GetLastPosition "wx.TextEntry.GetLastPosition") argument.




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SetMargins(self, *args, **kw) -> None:
        """ 

`SetMargins`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TextEntry.SetMargins "Permalink to this definition")
Attempts to set the control margins.


When margins are given as  [wx.Point](wx.Point.html#wx-point), x indicates the left and y the top margin. Use -1 to indicate that an existing value should be used.



Returns
`True` if setting of all requested margins was successful.





New in version 2.9.1.



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetMargins** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
*bool*






---

  



**SetMargins** *(self, left, top=-1)*



Parameters
* **left** (*int*) –
* **top** (*int*) –



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SetMaxLength(self, len: int) -> None:
        """ 

`SetMaxLength`(*self*, *len*)[¶](#wx.TextEntry.SetMaxLength "Permalink to this definition")
This function sets the maximum number of characters the user can enter into the control.


In other words, it allows limiting the text value length to *len* not counting the terminating `NUL` character.


If *len* is 0, the previously set max length limit, if any, is discarded and the user may enter as much text as the underlying native text control widget supports (typically at least 32Kb). If the user tries to enter more characters into the text control when it already is filled up to the maximal length, a `wxEVT_TEXT_MAXLEN` event is sent to notify the program about it (giving it the possibility to show an explanatory message, for example) and the extra input is discarded.


Note that in wxGTK this function may only be used with single line text controls.



Parameters
**len** (*long*) – 






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SetSelection(self, from_, to_) -> None:
        """ 

`SetSelection`(*self*, *from\_*, *to\_*)[¶](#wx.TextEntry.SetSelection "Permalink to this definition")
Selects the text starting at the first position up to (but not including) the character at the last position.


If both parameters are equal to -1 all text in the control is selected.


Notice that the insertion point will be moved to *from* by this function.



Parameters
* **from\_** (*long*) –
* **to\_** (*long*) –




The first position.


The last position.



See also


[`SelectAll`](#wx.TextEntry.SelectAll "wx.TextEntry.SelectAll")





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def SetValue(self, value: str) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.TextEntry.SetValue "Permalink to this definition")
Sets the new text control value.


It also marks the control as not-modified which means that IsModified() would return `False` immediately after the call to [`SetValue`](#wx.TextEntry.SetValue "wx.TextEntry.SetValue") .


The insertion point is set to the start of the control (i.e. position 0) by this function unless the control value doesn’t change at all, in which case the insertion point is left at its original position.


Note that, unlike most other functions changing the controls values, this function generates a `wxEVT_TEXT` event. To avoid this you can use [`ChangeValue`](#wx.TextEntry.ChangeValue "wx.TextEntry.ChangeValue") instead.



Parameters
**value** (*string*) – The new value to set. It may contain newline characters if the text control is multi-line.






            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def Undo(self) -> None:
        """ 

`Undo`(*self*)[¶](#wx.TextEntry.Undo "Permalink to this definition")
If there is an undo facility and the last operation can be undone, undoes the last operation.


Does nothing if there is no undo facility.




            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    def WriteText(self, text: str) -> None:
        """ 

`WriteText`(*self*, *text*)[¶](#wx.TextEntry.WriteText "Permalink to this definition")
Writes the text into the text control at the current insertion position.



Parameters
**text** (*string*) – Text to write to the text control.





Note


Newlines in the text string are the only control characters allowed, and they will cause appropriate line breaks. See operator<<() and [`AppendText`](#wx.TextEntry.AppendText "wx.TextEntry.AppendText") for more convenient ways of writing to the window. After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended. To append text after the user may have interacted with the control, call [`wx.TextCtrl.SetInsertionPointEnd`](#wx.TextEntry.SetInsertionPointEnd "wx.TextEntry.SetInsertionPointEnd") before writing.





            Source: https://docs.wxpython.org/wx.TextEntry.html
        """

    Hint: str  # `Hint`[¶](#wx.TextEntry.Hint "Permalink to this definition")See [`GetHint`](#wx.TextEntry.GetHint "wx.TextEntry.GetHint") and [`SetHint`](#wx.TextEntry.SetHint "wx.TextEntry.SetHint")
    InsertionPoint: int  # `InsertionPoint`[¶](#wx.TextEntry.InsertionPoint "Permalink to this definition")See [`GetInsertionPoint`](#wx.TextEntry.GetInsertionPoint "wx.TextEntry.GetInsertionPoint") and [`SetInsertionPoint`](#wx.TextEntry.SetInsertionPoint "wx.TextEntry.SetInsertionPoint")
    LastPosition: 'TextPos'  # `LastPosition`[¶](#wx.TextEntry.LastPosition "Permalink to this definition")See [`GetLastPosition`](#wx.TextEntry.GetLastPosition "wx.TextEntry.GetLastPosition")
    Margins: 'Point'  # `Margins`[¶](#wx.TextEntry.Margins "Permalink to this definition")See [`GetMargins`](#wx.TextEntry.GetMargins "wx.TextEntry.GetMargins") and [`SetMargins`](#wx.TextEntry.SetMargins "wx.TextEntry.SetMargins")
    StringSelection: str  # `StringSelection`[¶](#wx.TextEntry.StringSelection "Permalink to this definition")See [`GetStringSelection`](#wx.TextEntry.GetStringSelection "wx.TextEntry.GetStringSelection")
    Value: str  # `Value`[¶](#wx.TextEntry.Value "Permalink to this definition")See [`GetValue`](#wx.TextEntry.GetValue "wx.TextEntry.GetValue") and [`SetValue`](#wx.TextEntry.SetValue "wx.TextEntry.SetValue")



class TextEntryDialog(Dialog):
    """ **Possible constructors**:



```
TextEntryDialog()

TextEntryDialog(parent, message, caption=GetTextFromUserPromptStr,
                value="", style=TextEntryDialogStyle, pos=DefaultPosition)

```


This class represents a dialog that requests a one-line text string
from the user.


  


        Source: https://docs.wxpython.org/wx.TextEntryDialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TextEntryDialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


Call [`Create`](#wx.TextEntryDialog.Create "wx.TextEntryDialog.Create") to really create the dialog later.



New in version 2.9.5.





---

  



**\_\_init\_\_** *(self, parent, message, caption=GetTextFromUserPromptStr, value=””, style=TextEntryDialogStyle, pos=DefaultPosition)*


Constructor.


Use [`ShowModal`](#wx.TextEntryDialog.ShowModal "wx.TextEntryDialog.ShowModal") to show the dialog.


See [`Create`](#wx.TextEntryDialog.Create "wx.TextEntryDialog.Create") method for parameter description.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **message** (*string*) –
* **caption** (*string*) –
* **value** (*string*) –
* **style** (*long*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –






---

  





            Source: https://docs.wxpython.org/wx.TextEntryDialog.html
        """

    def Create(self, parent, message, caption=GetTextFromUserPromptStr, value="", style=TextEntryDialogStyle, pos=DefaultPosition) -> bool:
        """ 

`Create`(*self*, *parent*, *message*, *caption=GetTextFromUserPromptStr*, *value=""*, *style=TextEntryDialogStyle*, *pos=DefaultPosition*)[¶](#wx.TextEntryDialog.Create "Permalink to this definition")

Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window.
* **message** (*string*) – Message to show on the dialog.
* **caption** (*string*) – The caption of the dialog.
* **value** (*string*) – The default value, which may be the empty string.
* **style** (*long*) – A dialog style, specifying the buttons (wx``wx.OK``, `wx.CANCEL`) and an optional `wx.CENTRE` style. Additionally, most  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) styles (such as `TE_PASSWORD` or `TE_MULTILINE` ) may be specified here, but `TE_READONLY` may not be used, as it doesn’t make sense for this dialog, used for text input.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Dialog position.



Return type
*bool*





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.TextEntryDialog.html
        """

    def ForceUpper(self) -> None:
        """ 

`ForceUpper`(*self*)[¶](#wx.TextEntryDialog.ForceUpper "Permalink to this definition")
Convert all text entered into the text control used by the dialog to upper case.


Call this method to ensure that all text entered into the text control used by the dialog is converted on the fly to upper case. If the text control is not empty, its existing contents is also converted to upper case.



New in version 4.1/wxWidgets-3.1.0.




See also


[`wx.TextEntry.ForceUpper`](wx.TextEntry.html#wx.TextEntry.ForceUpper "wx.TextEntry.ForceUpper")





            Source: https://docs.wxpython.org/wx.TextEntryDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.TextEntryDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.TextEntryDialog.html
        """

    def GetValue(self) -> str:
        """ 

`GetValue`(*self*)[¶](#wx.TextEntryDialog.GetValue "Permalink to this definition")
Returns the text that the user has entered if the user has pressed `wx.OK`, or the original value if the user has pressed Cancel.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TextEntryDialog.html
        """

    def SetMaxLength(self, len: int) -> None:
        """ 

`SetMaxLength`(*self*, *len*)[¶](#wx.TextEntryDialog.SetMaxLength "Permalink to this definition")
This function sets the maximum number of characters the user can enter into this dialog.



Parameters
**len** (*long*) – 





New in version 2.9.5.




See also


[`wx.TextEntry.SetMaxLength`](wx.TextEntry.html#wx.TextEntry.SetMaxLength "wx.TextEntry.SetMaxLength")





            Source: https://docs.wxpython.org/wx.TextEntryDialog.html
        """

    def SetValue(self, value: str) -> None:
        """ 

`SetValue`(*self*, *value*)[¶](#wx.TextEntryDialog.SetValue "Permalink to this definition")
Sets the default text value.



Parameters
**value** (*string*) – 






            Source: https://docs.wxpython.org/wx.TextEntryDialog.html
        """

    def ShowModal(self) -> int:
        """ 

`ShowModal`(*self*)[¶](#wx.TextEntryDialog.ShowModal "Permalink to this definition")
Shows the dialog, returning `wx.ID_OK` if the user pressed `wx.OK`, and `wx.ID_CANCEL` otherwise.


Call [`GetValue`](#wx.TextEntryDialog.GetValue "wx.TextEntryDialog.GetValue") to retrieve the values of the string entered by the user after showing the dialog.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TextEntryDialog.html
        """

    Value: str  # `Value`[¶](#wx.TextEntryDialog.Value "Permalink to this definition")See [`GetValue`](#wx.TextEntryDialog.GetValue "wx.TextEntryDialog.GetValue") and [`SetValue`](#wx.TextEntryDialog.SetValue "wx.TextEntryDialog.SetValue")



_MouseEvent: TypeAlias = MouseEvent

class TextUrlEvent(CommandEvent):
    """ **Possible constructors**:



```
TextUrlEvent(winid, evtMouse, start, end)

TextUrlEvent(event)

```


  


        Source: https://docs.wxpython.org/wx.TextUrlEvent.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TextUrlEvent.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, winid, evtMouse, start, end)*



Parameters
* **winid** (*int*) –
* **evtMouse** ([*wx.MouseEvent*](wx.MouseEvent.html#wx.MouseEvent "wx.MouseEvent")) –
* **start** (*long*) –
* **end** (*long*) –






---

  



**\_\_init\_\_** *(self, event)*



Parameters
**event** ([*wx.TextUrlEvent*](#wx.TextUrlEvent "wx.TextUrlEvent")) – 






---

  





            Source: https://docs.wxpython.org/wx.TextUrlEvent.html
        """

    def Clone(self) -> 'Event':
        """ 

`Clone`(*self*)[¶](#wx.TextUrlEvent.Clone "Permalink to this definition")
Returns a copy of the event.


Any event that is posted to the wxWidgets event system for later action (via [`wx.EvtHandler.AddPendingEvent`](wx.EvtHandler.html#wx.EvtHandler.AddPendingEvent "wx.EvtHandler.AddPendingEvent") , [`wx.EvtHandler.QueueEvent`](wx.EvtHandler.html#wx.EvtHandler.QueueEvent "wx.EvtHandler.QueueEvent") or [`wx.PostEvent`](wx.functions.html#wx.PostEvent "wx.PostEvent") ) must implement this method.


All wxWidgets events fully implement this method, but any derived events implemented by the user should also implement this method just in case they (or some event derived from them) are ever posted.


All wxWidgets events implement a copy constructor, so the easiest way of implementing the Clone function is to implement a copy constructor for a new event (call it MyEvent) and then define the Clone function like this:



```
def Clone(self):

    return MyEvent()

```



Return type
 [wx.Event](wx.Event.html#wx-event)






            Source: https://docs.wxpython.org/wx.TextUrlEvent.html
        """

    def GetMouseEvent(self) -> 'MouseEvent':
        """ 

`GetMouseEvent`(*self*)[¶](#wx.TextUrlEvent.GetMouseEvent "Permalink to this definition")

Return type
 [wx.MouseEvent](wx.MouseEvent.html#wx-mouseevent)






            Source: https://docs.wxpython.org/wx.TextUrlEvent.html
        """

    def GetURLEnd(self) -> int:
        """ 

`GetURLEnd`(*self*)[¶](#wx.TextUrlEvent.GetURLEnd "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.TextUrlEvent.html
        """

    def GetURLStart(self) -> int:
        """ 

`GetURLStart`(*self*)[¶](#wx.TextUrlEvent.GetURLStart "Permalink to this definition")

Return type
*long*






            Source: https://docs.wxpython.org/wx.TextUrlEvent.html
        """

    MouseEvent: '_MouseEvent'  # `MouseEvent`[¶](#wx.TextUrlEvent.MouseEvent "Permalink to this definition")See [`GetMouseEvent`](#wx.TextUrlEvent.GetMouseEvent "wx.TextUrlEvent.GetMouseEvent")
    URLEnd: int  # `URLEnd`[¶](#wx.TextUrlEvent.URLEnd "Permalink to this definition")See [`GetURLEnd`](#wx.TextUrlEvent.GetURLEnd "wx.TextUrlEvent.GetURLEnd")
    URLStart: int  # `URLStart`[¶](#wx.TextUrlEvent.URLStart "Permalink to this definition")See [`GetURLStart`](#wx.TextUrlEvent.GetURLStart "wx.TextUrlEvent.GetURLStart")



class TGAHandler(ImageHandler):
    """ **Possible constructors**:



```
TGAHandler()

```


This is the image handler for the `TGA` format.


  


        Source: https://docs.wxpython.org/wx.TGAHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.TGAHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.TGAHandler](#wx-tgahandler).




            Source: https://docs.wxpython.org/wx.TGAHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.TGAHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TGAHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.TGAHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.TGAHandler.SaveFile "wx.TGAHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.TGAHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.TGAHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.TGAHandler.LoadFile "wx.TGAHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.TGAHandler.html
        """



class ThreadEvent(Event):
    """ **Possible constructors**:



```
ThreadEvent(eventType=wxEVT_THREAD, id=ID_ANY)

```


This class adds some simple functionality to Event to facilitate
inter-thread communication.


  


        Source: https://docs.wxpython.org/wx.ThreadEvent.html
    """
    def __init__(self, eventType=wxEVT_THREAD, id=ID_ANY) -> None:
        """ 

`__init__`(*self*, *eventType=wxEVT\_THREAD*, *id=ID\_ANY*)[¶](#wx.ThreadEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **eventType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    def Clone(self) -> 'Event':
        """ 

`Clone`(*self*)[¶](#wx.ThreadEvent.Clone "Permalink to this definition")
Clones this event making sure that all internal members which use `COW` (only `m_commandString` for now; see [Reference Counting](refcount_overview.html#reference-counting)) are unshared (see [`wx.Object.UnShare`](wx.Object.html#wx.Object.UnShare "wx.Object.UnShare") ).



Return type
 [wx.Event](wx.Event.html#wx-event)






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    def GetEventCategory(self) -> int:
        """ 

`GetEventCategory`(*self*)[¶](#wx.ThreadEvent.GetEventCategory "Permalink to this definition")
Returns `wxEVT_CATEGORY_THREAD` .


This is important to avoid unwanted processing of thread events when calling [`wx.EventLoopBase.YieldFor`](wx.EventLoopBase.html#wx.EventLoopBase.YieldFor "wx.EventLoopBase.YieldFor") .



Return type
 [wx.EventCategory](wx.EventCategory.enumeration.html#wx-eventcategory)






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    def GetExtraLong(self) -> int:
        """ 

`GetExtraLong`(*self*)[¶](#wx.ThreadEvent.GetExtraLong "Permalink to this definition")
Returns extra information integer value.



Return type
*long*






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    def GetInt(self) -> int:
        """ 

`GetInt`(*self*)[¶](#wx.ThreadEvent.GetInt "Permalink to this definition")
Returns stored integer value.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    def GetString(self) -> str:
        """ 

`GetString`(*self*)[¶](#wx.ThreadEvent.GetString "Permalink to this definition")
Returns stored string value.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    def SetExtraLong(self, extraLong: int) -> None:
        """ 

`SetExtraLong`(*self*, *extraLong*)[¶](#wx.ThreadEvent.SetExtraLong "Permalink to this definition")
Sets the extra information value.



Parameters
**extraLong** (*long*) – 






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    def SetInt(self, intCommand: int) -> None:
        """ 

`SetInt`(*self*, *intCommand*)[¶](#wx.ThreadEvent.SetInt "Permalink to this definition")
Sets the integer value.



Parameters
**intCommand** (*int*) – 






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    def SetString(self, string: str) -> None:
        """ 

`SetString`(*self*, *string*)[¶](#wx.ThreadEvent.SetString "Permalink to this definition")
Sets the string value.



Parameters
**string** (*string*) – 






            Source: https://docs.wxpython.org/wx.ThreadEvent.html
        """

    EventCategory: int  # `EventCategory`[¶](#wx.ThreadEvent.EventCategory "Permalink to this definition")See [`GetEventCategory`](#wx.ThreadEvent.GetEventCategory "wx.ThreadEvent.GetEventCategory")
    ExtraLong: int  # `ExtraLong`[¶](#wx.ThreadEvent.ExtraLong "Permalink to this definition")See [`GetExtraLong`](#wx.ThreadEvent.GetExtraLong "wx.ThreadEvent.GetExtraLong") and [`SetExtraLong`](#wx.ThreadEvent.SetExtraLong "wx.ThreadEvent.SetExtraLong")
    Int: int  # `Int`[¶](#wx.ThreadEvent.Int "Permalink to this definition")See [`GetInt`](#wx.ThreadEvent.GetInt "wx.ThreadEvent.GetInt") and [`SetInt`](#wx.ThreadEvent.SetInt "wx.ThreadEvent.SetInt")
    String: str  # `String`[¶](#wx.ThreadEvent.String "Permalink to this definition")See [`GetString`](#wx.ThreadEvent.GetString "wx.ThreadEvent.GetString") and [`SetString`](#wx.ThreadEvent.SetString "wx.ThreadEvent.SetString")



class TIFFHandler(ImageHandler):
    """ **Possible constructors**:



```
TIFFHandler()

```


This is the image handler for the `TIFF` format.


  


        Source: https://docs.wxpython.org/wx.TIFFHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.TIFFHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.TIFFHandler](#wx-tiffhandler).




            Source: https://docs.wxpython.org/wx.TIFFHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.TIFFHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TIFFHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.TIFFHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](wx.ImageHandler.html#wx.ImageHandler.SaveFile "wx.ImageHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.TIFFHandler.html
        """



_Timer: TypeAlias = Timer

class TimerEvent(Event):
    """ **Possible constructors**:



```
TimerEvent(timer)

```


TimerEvent object is passed to the event handler of timer events
(see *Timer.SetOwner).*


  


        Source: https://docs.wxpython.org/wx.TimerEvent.html
    """
    def __init__(self, timer: 'Timer') -> None:
        """ 

`__init__`(*self*, *timer*)[¶](#wx.TimerEvent.__init__ "Permalink to this definition")

Parameters
**timer** ([*wx.Timer*](wx.Timer.html#wx.Timer "wx.Timer")) – 






            Source: https://docs.wxpython.org/wx.TimerEvent.html
        """

    def GetInterval(self) -> int:
        """ 

`GetInterval`(*self*)[¶](#wx.TimerEvent.GetInterval "Permalink to this definition")
Returns the interval of the timer which generated this event.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TimerEvent.html
        """

    def GetTimer(self) -> 'Timer':
        """ 

`GetTimer`(*self*)[¶](#wx.TimerEvent.GetTimer "Permalink to this definition")
Returns the timer object which generated this event.



Return type
 [wx.Timer](wx.Timer.html#wx-timer)






            Source: https://docs.wxpython.org/wx.TimerEvent.html
        """

    Interval: int  # `Interval`[¶](#wx.TimerEvent.Interval "Permalink to this definition")See [`GetInterval`](#wx.TimerEvent.GetInterval "wx.TimerEvent.GetInterval")
    Timer: '_Timer'  # `Timer`[¶](#wx.TimerEvent.Timer "Permalink to this definition")See [`GetTimer`](#wx.TimerEvent.GetTimer "wx.TimerEvent.GetTimer")



class TimerRunner:
    """ **Possible constructors**:



```
TimerRunner(timer)

TimerRunner(timer, milli, oneShot=False)

```


Starts the timer in its constructor, stops in the dtor.


  


        Source: https://docs.wxpython.org/wx.TimerRunner.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TimerRunner.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, timer)*



Parameters
**timer** ([*wx.Timer*](wx.Timer.html#wx.Timer "wx.Timer")) – 






---

  



**\_\_init\_\_** *(self, timer, milli, oneShot=False)*



Parameters
* **timer** ([*wx.Timer*](wx.Timer.html#wx.Timer "wx.Timer")) –
* **milli** (*int*) –
* **oneShot** (*bool*) –






---

  





            Source: https://docs.wxpython.org/wx.TimerRunner.html
        """

    def Start(self, milli, oneShot=False) -> None:
        """ 

`Start`(*self*, *milli*, *oneShot=False*)[¶](#wx.TimerRunner.Start "Permalink to this definition")

Parameters
* **milli** (*int*) –
* **oneShot** (*bool*) –






            Source: https://docs.wxpython.org/wx.TimerRunner.html
        """



class TimeSpan:
    """ **Possible constructors**:



```
TimeSpan()

TimeSpan(hours, min=0, sec=0, msec=0)

```


TimeSpan class represents a time interval.


  


        Source: https://docs.wxpython.org/wx.TimeSpan.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TimeSpan.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor, constructs a zero timespan.




---

  



**\_\_init\_\_** *(self, hours, min=0, sec=0, msec=0)*


Constructs timespan from separate values for each component, with the date set to 0.


Hours are not restricted to `0-24` range, neither are minutes, seconds or milliseconds.



Parameters
* **hours** (*long*) –
* **min** (*long*) –
* **sec** (*long*) –
* **msec** (*long*) –






---

  





            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def Abs(self) -> 'TimeSpan':
        """ 

`Abs`(*self*)[¶](#wx.TimeSpan.Abs "Permalink to this definition")
Returns the absolute value of the timespan: does not modify the object.



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def Add(self, diff: 'TimeSpan') -> 'TimeSpan':
        """ 

`Add`(*self*, *diff*)[¶](#wx.TimeSpan.Add "Permalink to this definition")
Adds the given  [wx.TimeSpan](#wx-timespan) to this  [wx.TimeSpan](#wx-timespan) and returns a reference to itself.



Parameters
**diff** ([*wx.TimeSpan*](#wx.TimeSpan "wx.TimeSpan")) – 



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Day() -> 'TimeSpan':
        """ 

*static* `Day`()[¶](#wx.TimeSpan.Day "Permalink to this definition")
Returns the timespan for one day.



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Days(days: int) -> 'TimeSpan':
        """ 

*static* `Days`(*days*)[¶](#wx.TimeSpan.Days "Permalink to this definition")
Returns the timespan for the given number of days.



Parameters
**days** (*long*) – 



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def Format(self, format: str=DefaultTimeSpanFormat) -> str:
        """ 

`Format`(*self*, *format=DefaultTimeSpanFormat*)[¶](#wx.TimeSpan.Format "Permalink to this definition")
Returns the string containing the formatted representation of the time span.


The following format specifiers are allowed after %:


* `H` - Number of Hours
* `M` - Number of Minutes
* `S` - Number of Seconds
* `l` - Number of Milliseconds
* `D` - Number of Days
* `E` - Number of Weeks
* `%` - The percent character


Note that, for example, the number of hours in the description above is not well defined: it can be either the total number of hours (for example, for a time span of 50 hours this would be 50) or just the hour part of the time span, which would be 2 in this case as 50 hours is equal to 2 days and 2 hours.


 [wx.TimeSpan](#wx-timespan) resolves this ambiguity in the following way: if there had been, indeed, the `D` format specified preceding the `H` , then it is interpreted as 2. Otherwise, it is 50.


The same applies to all other format specifiers: if they follow a specifier of larger unit, only the rest part is taken, otherwise the full value is used.



Parameters
**format** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def GetDays(self) -> int:
        """ 

`GetDays`(*self*)[¶](#wx.TimeSpan.GetDays "Permalink to this definition")
Returns the difference in number of days.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def GetHours(self) -> int:
        """ 

`GetHours`(*self*)[¶](#wx.TimeSpan.GetHours "Permalink to this definition")
Returns the difference in number of hours.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def GetMilliseconds(self) -> int:
        """ 

`GetMilliseconds`(*self*)[¶](#wx.TimeSpan.GetMilliseconds "Permalink to this definition")
Returns the difference in number of milliseconds.



Return type
*long*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def GetMinutes(self) -> int:
        """ 

`GetMinutes`(*self*)[¶](#wx.TimeSpan.GetMinutes "Permalink to this definition")
Returns the difference in number of minutes.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def GetSeconds(self) -> int:
        """ 

`GetSeconds`(*self*)[¶](#wx.TimeSpan.GetSeconds "Permalink to this definition")
Returns the difference in number of seconds.



Return type
*long*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.TimeSpan.GetValue "Permalink to this definition")
Returns the internal representation of timespan.



Return type
*long*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def GetWeeks(self) -> int:
        """ 

`GetWeeks`(*self*)[¶](#wx.TimeSpan.GetWeeks "Permalink to this definition")
Returns the difference in number of weeks.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Hour() -> 'TimeSpan':
        """ 

*static* `Hour`()[¶](#wx.TimeSpan.Hour "Permalink to this definition")
Returns the timespan for one hour.



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Hours(hours: int) -> 'TimeSpan':
        """ 

*static* `Hours`(*hours*)[¶](#wx.TimeSpan.Hours "Permalink to this definition")
Returns the timespan for the given number of hours.



Parameters
**hours** (*long*) – 



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def IsEqualTo(self, ts: 'TimeSpan') -> bool:
        """ 

`IsEqualTo`(*self*, *ts*)[¶](#wx.TimeSpan.IsEqualTo "Permalink to this definition")
Returns `True` if two timespans are equal.



Parameters
**ts** ([*wx.TimeSpan*](#wx.TimeSpan "wx.TimeSpan")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def IsLongerThan(self, ts: 'TimeSpan') -> bool:
        """ 

`IsLongerThan`(*self*, *ts*)[¶](#wx.TimeSpan.IsLongerThan "Permalink to this definition")
Compares two timespans: works with the absolute values, i.e. -2 hours is longer than 1 hour.


Also, it will return `False` if the timespans are equal in absolute value.



Parameters
**ts** ([*wx.TimeSpan*](#wx.TimeSpan "wx.TimeSpan")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def IsNegative(self) -> bool:
        """ 

`IsNegative`(*self*)[¶](#wx.TimeSpan.IsNegative "Permalink to this definition")
Returns `True` if the timespan is negative.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def IsNull(self) -> bool:
        """ 

`IsNull`(*self*)[¶](#wx.TimeSpan.IsNull "Permalink to this definition")
Returns `True` if the timespan is empty.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def IsPositive(self) -> bool:
        """ 

`IsPositive`(*self*)[¶](#wx.TimeSpan.IsPositive "Permalink to this definition")
Returns `True` if the timespan is positive.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def IsShorterThan(self, ts: 'TimeSpan') -> bool:
        """ 

`IsShorterThan`(*self*, *ts*)[¶](#wx.TimeSpan.IsShorterThan "Permalink to this definition")
Compares two timespans: works with the absolute values, i.e. 1 hour is shorter than -2 hours.


Also, it will return `False` if the timespans are equal in absolute value.



Parameters
**ts** ([*wx.TimeSpan*](#wx.TimeSpan "wx.TimeSpan")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Millisecond() -> 'TimeSpan':
        """ 

*static* `Millisecond`()[¶](#wx.TimeSpan.Millisecond "Permalink to this definition")
Returns the timespan for one millisecond.



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Milliseconds(ms: int) -> 'TimeSpan':
        """ 

*static* `Milliseconds`(*ms*)[¶](#wx.TimeSpan.Milliseconds "Permalink to this definition")
Returns the timespan for the given number of milliseconds.



Parameters
**ms** (*long*) – 



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Minute() -> 'TimeSpan':
        """ 

*static* `Minute`()[¶](#wx.TimeSpan.Minute "Permalink to this definition")
Returns the timespan for one minute.



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Minutes(min: int) -> 'TimeSpan':
        """ 

*static* `Minutes`(*min*)[¶](#wx.TimeSpan.Minutes "Permalink to this definition")
Returns the timespan for the given number of minutes.



Parameters
**min** (*long*) – 



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def Multiply(self, n: int) -> 'TimeSpan':
        """ 

`Multiply`(*self*, *n*)[¶](#wx.TimeSpan.Multiply "Permalink to this definition")
Multiplies this time span by *n*.



Parameters
**n** (*int*) – 



Return type
 [wx.TimeSpan](#wx-timespan)



Returns
A reference to this  [wx.TimeSpan](#wx-timespan) object modified in place.






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def Neg(self) -> 'TimeSpan':
        """ 

`Neg`(*self*)[¶](#wx.TimeSpan.Neg "Permalink to this definition")
Negate the value of the timespan.



Return type
 [wx.TimeSpan](#wx-timespan)





See also


[`Negate`](#wx.TimeSpan.Negate "wx.TimeSpan.Negate")





            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def Negate(self) -> 'TimeSpan':
        """ 

`Negate`(*self*)[¶](#wx.TimeSpan.Negate "Permalink to this definition")
Returns timespan with inverted sign.



Return type
 [wx.TimeSpan](#wx-timespan)





See also


[`Neg`](#wx.TimeSpan.Neg "wx.TimeSpan.Neg")





            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Second() -> 'TimeSpan':
        """ 

*static* `Second`()[¶](#wx.TimeSpan.Second "Permalink to this definition")
Returns the timespan for one second.



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Seconds(sec: int) -> 'TimeSpan':
        """ 

*static* `Seconds`(*sec*)[¶](#wx.TimeSpan.Seconds "Permalink to this definition")
Returns the timespan for the given number of seconds.



Parameters
**sec** (*long*) – 



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    def Subtract(self, diff: 'TimeSpan') -> 'TimeSpan':
        """ 

`Subtract`(*self*, *diff*)[¶](#wx.TimeSpan.Subtract "Permalink to this definition")
Subtracts the given  [wx.TimeSpan](#wx-timespan) to this  [wx.TimeSpan](#wx-timespan) and returns a reference to itself.



Parameters
**diff** ([*wx.TimeSpan*](#wx.TimeSpan "wx.TimeSpan")) – 



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Week() -> 'TimeSpan':
        """ 

*static* `Week`()[¶](#wx.TimeSpan.Week "Permalink to this definition")
Returns the timespan for one week.



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """

    @staticmethod
    def Weeks(weeks: int) -> 'TimeSpan':
        """ 

*static* `Weeks`(*weeks*)[¶](#wx.TimeSpan.Weeks "Permalink to this definition")
Returns the timespan for the given number of weeks.



Parameters
**weeks** (*long*) – 



Return type
 [wx.TimeSpan](#wx-timespan)






            Source: https://docs.wxpython.org/wx.TimeSpan.html
        """



class TipWindow(Window):
    """ **Possible constructors**:



```
TipWindow(parent, text, maxLength=100)

```


Shows simple text in a popup tip window on creation.


  


        Source: https://docs.wxpython.org/wx.TipWindow.html
    """
    def __init__(self, parent, text, maxLength=100) -> None:
        """ 

`__init__`(*self*, *parent*, *text*, *maxLength=100*)[¶](#wx.TipWindow.__init__ "Permalink to this definition")
Constructor.


The tip is shown immediately after the window is constructed.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window, must be not `None`
* **text** (*string*) – The text to show, may contain the new line characters
* **maxLength** (*int*) – The length of each line, in pixels. Set to a very large value to avoid wrapping lines






            Source: https://docs.wxpython.org/wx.TipWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.TipWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.TipWindow.html
        """

    def SetBoundingRect(self, rectBound: 'Rect') -> None:
        """ 

`SetBoundingRect`(*self*, *rectBound*)[¶](#wx.TipWindow.SetBoundingRect "Permalink to this definition")
By default, the tip window disappears when the user clicks the mouse or presses a keyboard key or if it loses focus in any other way - for example because the user switched to another application window.


Additionally, if a non-empty *rectBound* is provided, the tip window will also automatically close if the mouse leaves this area. This is useful to dismiss the tip mouse when the mouse leaves the object it is associated with.



Parameters
**rectBound** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – The bounding rectangle for the mouse in the screen coordinates






            Source: https://docs.wxpython.org/wx.TipWindow.html
        """



class ToolBar(Control):
    """ **Possible constructors**:



```
ToolBar()

ToolBar(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
        style=TB_HORIZONTAL, name=ToolBarNameStr)

```


A toolbar is a bar of buttons and/or other controls usually placed
below the menu bar in a Frame.


  


        Source: https://docs.wxpython.org/wx.ToolBar.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ToolBar.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=TB\_HORIZONTAL, name=ToolBarNameStr)*


Constructs a toolbar.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Pointer to a parent window.
* **id** (*wx.WindowID*) – Window identifier. If -1, will automatically create an identifier.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. `wx.DefaultPosition` indicates that wxWidgets should generate a default position for the window. If using the  [wx.Window](wx.Window.html#wx-window) class directly, supply an actual position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. `wx.DefaultSize` indicates that wxWidgets should generate a default size for the window.
* **style** (*long*) – Window style. See  [wx.ToolBar](#wx-toolbar) initial description for details.
* **name** (*string*) – Window name.





Note


After a toolbar is created, you use [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") and perhaps [`AddSeparator`](#wx.ToolBar.AddSeparator "wx.ToolBar.AddSeparator") , and then you must call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") to construct and display the toolbar tools.





---

  





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def AddCheckTool(self, toolId, label, bitmap1, bmpDisabled=NullBitmap, shortHelp="", longHelp="", clientData=None) -> 'ToolBarToolBase':
        """ 

`AddCheckTool`(*self*, *toolId*, *label*, *bitmap1*, *bmpDisabled=NullBitmap*, *shortHelp=""*, *longHelp=""*, *clientData=None*)[¶](#wx.ToolBar.AddCheckTool "Permalink to this definition")
Adds a new check (or toggle) tool to the toolbar.


The parameters are the same as in [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .



Parameters
* **toolId** (*int*) –
* **label** (*string*) –
* **bitmap1** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **bmpDisabled** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **shortHelp** (*string*) –
* **longHelp** (*string*) –
* **clientData** (*PyUserData*) –



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





See also


[`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def AddControl(self, control, label="") -> 'ToolBarToolBase':
        """ 

`AddControl`(*self*, *control*, *label=""*)[¶](#wx.ToolBar.AddControl "Permalink to this definition")
Adds any control to the toolbar, typically e.g. a  [wx.ComboBox](wx.ComboBox.html#wx-combobox).



Parameters
* **control** ([*wx.Control*](wx.Control.html#wx.Control "wx.Control")) – The control to be added.
* **label** (*string*) – Text to be displayed near the control.



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





Note


Mac: labels are only displayed if wxWidgets is built with `MAC_USE_NATIVE_TOOLBAR` set to 1





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def AddLabelTool(self, id, label, bitmap, bmpDisabled=wx.NullBitmap, kind=wx.ITEM_NORMAL, shortHelp="", longHelp="", clientData=None) -> None:
        """ 

`AddLabelTool`(*self*, *id*, *label*, *bitmap*, *bmpDisabled=wx.NullBitmap*, *kind=wx.ITEM\_NORMAL*, *shortHelp=""*, *longHelp=""*, *clientData=None*)[¶](#wx.ToolBar.AddLabelTool "Permalink to this definition")
Old style method to add a tool in the toolbar.




            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def AddRadioTool(self, toolId, label, bitmap1, bmpDisabled=NullBitmap, shortHelp="", longHelp="", clientData=None) -> 'ToolBarToolBase':
        """ 

`AddRadioTool`(*self*, *toolId*, *label*, *bitmap1*, *bmpDisabled=NullBitmap*, *shortHelp=""*, *longHelp=""*, *clientData=None*)[¶](#wx.ToolBar.AddRadioTool "Permalink to this definition")
Adds a new radio tool to the toolbar.


Consecutive radio tools form a radio group such that exactly one button in the group is pressed at any moment, in other words whenever a button in the group is pressed the previously pressed button is automatically released. You should avoid having the radio groups of only one element as it would be impossible for the user to use such button.


By default, the first button in the radio group is initially pressed, the others are not.



Parameters
* **toolId** (*int*) –
* **label** (*string*) –
* **bitmap1** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **bmpDisabled** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **shortHelp** (*string*) –
* **longHelp** (*string*) –
* **clientData** (*PyUserData*) –



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





See also


[`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def AddSeparator(self) -> 'ToolBarToolBase':
        """ 

`AddSeparator`(*self*)[¶](#wx.ToolBar.AddSeparator "Permalink to this definition")
Adds a separator for spacing groups of tools.


Notice that the separator uses the look appropriate for the current platform so it can be a vertical line (MSW, some versions of GTK) or just an empty space or something else.



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





See also


[`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") , [`SetToolSeparation`](#wx.ToolBar.SetToolSeparation "wx.ToolBar.SetToolSeparation") , [`AddStretchableSpace`](#wx.ToolBar.AddStretchableSpace "wx.ToolBar.AddStretchableSpace")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def AddSimpleTool(self, toolId, bitmap, shortHelpString="", longHelpString="", isToggle=0) -> None:
        """ 

`AddSimpleTool`(*self*, *toolId*, *bitmap*, *shortHelpString=""*, *longHelpString=""*, *isToggle=0*)[¶](#wx.ToolBar.AddSimpleTool "Permalink to this definition")
Old style method to add a tool to the toolbar.




            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def AddStretchableSpace(self) -> 'ToolBarToolBase':
        """ 

`AddStretchableSpace`(*self*)[¶](#wx.ToolBar.AddStretchableSpace "Permalink to this definition")
Adds a stretchable space to the toolbar.


Any space not taken up by the fixed items (all items except for stretchable spaces) is distributed in equal measure between the stretchable spaces in the toolbar. The most common use for this method is to add a single stretchable space before the items which should be right-aligned in the toolbar, but more exotic possibilities are possible, e.g. a stretchable space may be added in the beginning and the end of the toolbar to centre all toolbar items.



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





New in version 2.9.1.




See also


[`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") , [`AddSeparator`](#wx.ToolBar.AddSeparator "wx.ToolBar.AddSeparator") , [`InsertStretchableSpace`](#wx.ToolBar.InsertStretchableSpace "wx.ToolBar.InsertStretchableSpace")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def AddTool(self, *args, **kw) -> 'ToolBarToolBase':
        """ 

`AddTool`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ToolBar.AddTool "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddTool** *(self, tool)*


Adds a tool to the toolbar.



Parameters
**tool** ([*wx.ToolBarToolBase*](wx.ToolBarToolBase.html#wx.ToolBarToolBase "wx.ToolBarToolBase")) – The tool to be added.



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





Note


After you have added tools to a toolbar, you must call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") in order to have the tools appear.




See also


[`AddSeparator`](#wx.ToolBar.AddSeparator "wx.ToolBar.AddSeparator") , [`AddCheckTool`](#wx.ToolBar.AddCheckTool "wx.ToolBar.AddCheckTool") , [`AddRadioTool`](#wx.ToolBar.AddRadioTool "wx.ToolBar.AddRadioTool") , [`InsertTool`](#wx.ToolBar.InsertTool "wx.ToolBar.InsertTool") , [`DeleteTool`](#wx.ToolBar.DeleteTool "wx.ToolBar.DeleteTool") , [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") , [`SetDropdownMenu`](#wx.ToolBar.SetDropdownMenu "wx.ToolBar.SetDropdownMenu")





---

  



**AddTool** *(self, toolId, label, bitmap, shortHelp=””, kind=ITEM\_NORMAL)*


Adds a tool to the toolbar.


This most commonly used version has fewer parameters than the full version below which specifies the more rarely used button features.



Parameters
* **toolId** (*int*) – An integer by which the tool may be identified in subsequent operations.
* **label** (*string*) – The string to be displayed with the tool. This string may include mnemonics, i.e. characters prefixed by an ampersand (“&”), but they are stripped from it and not actually shown in the toolbar as tools can’t be activated from keyboard.
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – The primary tool bitmap.
* **shortHelp** (*string*) – This string is used for the tools tooltip.
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) – May be `ITEM_NORMAL` for a normal button (default), `ITEM_CHECK` for a checkable tool (such tool stays pressed after it had been toggled) or `ITEM_RADIO` for a checkable tool which makes part of a radio group of tools each of which is automatically unchecked whenever another button in the group is checked. `ITEM_DROPDOWN` specifies that a drop-down menu button will appear next to the tool button (only GTK+ and MSW). Call [`SetDropdownMenu`](#wx.ToolBar.SetDropdownMenu "wx.ToolBar.SetDropdownMenu") afterwards.



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





Note


After you have added tools to a toolbar, you must call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") in order to have the tools appear.




See also


[`AddSeparator`](#wx.ToolBar.AddSeparator "wx.ToolBar.AddSeparator") , [`AddCheckTool`](#wx.ToolBar.AddCheckTool "wx.ToolBar.AddCheckTool") , [`AddRadioTool`](#wx.ToolBar.AddRadioTool "wx.ToolBar.AddRadioTool") , [`InsertTool`](#wx.ToolBar.InsertTool "wx.ToolBar.InsertTool") , [`DeleteTool`](#wx.ToolBar.DeleteTool "wx.ToolBar.DeleteTool") , [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") , [`SetDropdownMenu`](#wx.ToolBar.SetDropdownMenu "wx.ToolBar.SetDropdownMenu")





---

  



**AddTool** *(self, toolId, label, bitmap, bmpDisabled, kind=ITEM\_NORMAL, shortHelp=””, longHelp=””, clientData=None)*


Adds a tool to the toolbar.



Parameters
* **toolId** (*int*) – An integer by which the tool may be identified in subsequent operations.
* **label** (*string*) – The string to be displayed with the tool.
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – The primary tool bitmap.
* **bmpDisabled** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – The bitmap used when the tool is disabled. If it is equal to `wx.NullBitmap` (default), the disabled bitmap is automatically generated by greying the normal one.
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) – May be `ITEM_NORMAL` for a normal button (default), `ITEM_CHECK` for a checkable tool (such tool stays pressed after it had been toggled) or `ITEM_RADIO` for a checkable tool which makes part of a radio group of tools each of which is automatically unchecked whenever another button in the group is checked. `ITEM_DROPDOWN` specifies that a drop-down menu button will appear next to the tool button (only GTK+ and MSW). Call [`SetDropdownMenu`](#wx.ToolBar.SetDropdownMenu "wx.ToolBar.SetDropdownMenu") afterwards.
* **shortHelp** (*string*) – This string is used for the tools tooltip.
* **longHelp** (*string*) – This string is shown in the statusbar (if any) of the parent frame when the mouse pointer is inside the tool.
* **clientData** (*PyUserData*) – An optional pointer to client data which can be retrieved later using [`GetToolClientData`](#wx.ToolBar.GetToolClientData "wx.ToolBar.GetToolClientData") .



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





Note


After you have added tools to a toolbar, you must call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") in order to have the tools appear.




See also


[`AddSeparator`](#wx.ToolBar.AddSeparator "wx.ToolBar.AddSeparator") , [`AddCheckTool`](#wx.ToolBar.AddCheckTool "wx.ToolBar.AddCheckTool") , [`AddRadioTool`](#wx.ToolBar.AddRadioTool "wx.ToolBar.AddRadioTool") , [`InsertTool`](#wx.ToolBar.InsertTool "wx.ToolBar.InsertTool") , [`DeleteTool`](#wx.ToolBar.DeleteTool "wx.ToolBar.DeleteTool") , [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") , [`SetDropdownMenu`](#wx.ToolBar.SetDropdownMenu "wx.ToolBar.SetDropdownMenu")





---

  





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def ClearTools(self) -> None:
        """ 

`ClearTools`(*self*)[¶](#wx.ToolBar.ClearTools "Permalink to this definition")
Deletes all the tools in the toolbar.




            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def CreateSeparator(self) -> 'ToolBarToolBase':
        """ 

`CreateSeparator`(*self*)[¶](#wx.ToolBar.CreateSeparator "Permalink to this definition")
Factory function to create a new separator toolbar tool.



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def CreateTool(self, *args, **kw) -> 'ToolBarToolBase':
        """ 

`CreateTool`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ToolBar.CreateTool "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**CreateTool** *(self, toolId, label, bmpNormal, bmpDisabled=NullBitmap, kind=ITEM\_NORMAL, clientData=None, shortHelp=””, longHelp=””)*


Factory function to create a new toolbar tool.



Parameters
* **toolId** (*int*) –
* **label** (*string*) –
* **bmpNormal** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **bmpDisabled** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) –
* **clientData** (*PyUserData*) –
* **shortHelp** (*string*) –
* **longHelp** (*string*) –



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)






---

  



**CreateTool** *(self, control, label)*


Factory function to create a new control toolbar tool.



Parameters
* **control** ([*wx.Control*](wx.Control.html#wx.Control "wx.Control")) –
* **label** (*string*) –



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)






---

  





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def DeleteTool(self, toolId: int) -> bool:
        """ 

`DeleteTool`(*self*, *toolId*)[¶](#wx.ToolBar.DeleteTool "Permalink to this definition")
Removes the specified tool from the toolbar and deletes it.


If you don’t want to delete the tool, but just to remove it from the toolbar (to possibly add it back later), you may use [`RemoveTool`](#wx.ToolBar.RemoveTool "wx.ToolBar.RemoveTool") instead.



Parameters
**toolId** (*int*) – 



Return type
*bool*



Returns
`True` if the tool was deleted, `False` otherwise.





Note


It is unnecessary to call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") for the change to take place, it will happen immediately.




See also


[`DeleteToolByPos`](#wx.ToolBar.DeleteToolByPos "wx.ToolBar.DeleteToolByPos")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def DeleteToolByPos(self, pos: int) -> bool:
        """ 

`DeleteToolByPos`(*self*, *pos*)[¶](#wx.ToolBar.DeleteToolByPos "Permalink to this definition")
This function behaves like [`DeleteTool`](#wx.ToolBar.DeleteTool "wx.ToolBar.DeleteTool") but it deletes the tool at the specified position and not the one with the given id.



Parameters
**pos** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def EnableTool(self, toolId, enable) -> None:
        """ 

`EnableTool`(*self*, *toolId*, *enable*)[¶](#wx.ToolBar.EnableTool "Permalink to this definition")
Enables or disables the tool.



Parameters
* **toolId** (*int*) – `ID` of the tool to enable or disable, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .
* **enable** (*bool*) – If `True`, enables the tool, otherwise disables it.





Note


Some implementations will change the visible state of the tool to indicate that it is disabled.




See also


[`GetToolEnabled`](#wx.ToolBar.GetToolEnabled "wx.ToolBar.GetToolEnabled") , [`ToggleTool`](#wx.ToolBar.ToggleTool "wx.ToolBar.ToggleTool")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def FindById(self, id: int) -> 'ToolBarToolBase':
        """ 

`FindById`(*self*, *id*)[¶](#wx.ToolBar.FindById "Permalink to this definition")
Returns a pointer to the tool identified by *id* or `None` if no corresponding tool is found.



Parameters
**id** (*int*) – 



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def FindControl(self, id: int) -> 'Control':
        """ 

`FindControl`(*self*, *id*)[¶](#wx.ToolBar.FindControl "Permalink to this definition")
Returns a pointer to the control identified by *id* or `None` if no corresponding control is found.



Parameters
**id** (*int*) – 



Return type
 [wx.Control](wx.Control.html#wx-control)






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def FindToolForPosition(self, x, y) -> 'ToolBarToolBase':
        """ 

`FindToolForPosition`(*self*, *x*, *y*)[¶](#wx.ToolBar.FindToolForPosition "Permalink to this definition")
Finds a tool for the given mouse position.



Parameters
* **x** (*int*) – X position.
* **y** (*int*) – Y position.



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)



Returns
A pointer to a tool if a tool is found, or `None` otherwise.





Note


Currently not implemented in wxGTK (always returns `None` there).





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.ToolBar.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetMargins(self) -> 'Size':
        """ 

`GetMargins`(*self*)[¶](#wx.ToolBar.GetMargins "Permalink to this definition")
Returns the left/right and top/bottom margins, which are also used for inter-toolspacing.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`SetMargins`](#wx.ToolBar.SetMargins "wx.ToolBar.SetMargins")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolBitmapSize(self) -> 'Size':
        """ 

`GetToolBitmapSize`(*self*)[¶](#wx.ToolBar.GetToolBitmapSize "Permalink to this definition")
Returns the size of bitmap that the toolbar expects to have.


The default bitmap size is platform-dependent: for example, it is 16x15 for MSW and 24x24 for GTK. This size does *not* necessarily indicate the best size to use for the toolbars on the given platform, for this you should use `ArtProvider::GetNativeSizeHint(wxART_TOOLBAR)` but in any case, as the bitmap size is deduced automatically from the size of the bitmaps associated with the tools added to the toolbar, it is usually unnecessary to call either this function or [`SetToolBitmapSize`](#wx.ToolBar.SetToolBitmapSize "wx.ToolBar.SetToolBitmapSize") at all.


This function returns the size in logical pixels, for consistency with [`SetToolBitmapSize`](#wx.ToolBar.SetToolBitmapSize "wx.ToolBar.SetToolBitmapSize") which takes size in logical pixels. See High DPI Support in wxWidgets for more information about the different pixel types and how to convert between them.



Return type
 [wx.Size](wx.Size.html#wx-size)





Note


Note that this is the size of the bitmap you pass to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") , and not the eventual size of the tool button.




See also


[`SetToolBitmapSize`](#wx.ToolBar.SetToolBitmapSize "wx.ToolBar.SetToolBitmapSize") , [`GetToolSize`](#wx.ToolBar.GetToolSize "wx.ToolBar.GetToolSize")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolByPos(self, pos: int) -> 'ToolBarToolBase':
        """ 

`GetToolByPos`(*self*, *pos*)[¶](#wx.ToolBar.GetToolByPos "Permalink to this definition")
Returns a pointer to the tool at ordinal position *pos*.


Don’t confuse this with [`FindToolForPosition`](#wx.ToolBar.FindToolForPosition "wx.ToolBar.FindToolForPosition") .



Parameters
**pos** (*int*) – 



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





New in version 2.9.1.




See also


[`GetToolsCount`](#wx.ToolBar.GetToolsCount "wx.ToolBar.GetToolsCount")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolClientData(self, toolId: int) -> 'PyUserData':
        """ 

`GetToolClientData`(*self*, *toolId*)[¶](#wx.ToolBar.GetToolClientData "Permalink to this definition")
Get any client data associated with the tool.



Parameters
**toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .



Return type
*PyUserData*



Returns
Client data, or `None` if there is none.






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolEnabled(self, toolId: int) -> bool:
        """ 

`GetToolEnabled`(*self*, *toolId*)[¶](#wx.ToolBar.GetToolEnabled "Permalink to this definition")
Called to determine whether a tool is enabled (responds to user input).



Parameters
**toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .



Return type
*bool*



Returns
`True` if the tool is enabled, `False` otherwise.





See also


[`EnableTool`](#wx.ToolBar.EnableTool "wx.ToolBar.EnableTool")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolLongHelp(self, toolId: int) -> str:
        """ 

`GetToolLongHelp`(*self*, *toolId*)[¶](#wx.ToolBar.GetToolLongHelp "Permalink to this definition")
Returns the long help for the given tool.



Parameters
**toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .



Return type
`string`





See also


[`SetToolLongHelp`](#wx.ToolBar.SetToolLongHelp "wx.ToolBar.SetToolLongHelp") , [`SetToolShortHelp`](#wx.ToolBar.SetToolShortHelp "wx.ToolBar.SetToolShortHelp")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolPacking(self) -> int:
        """ 

`GetToolPacking`(*self*)[¶](#wx.ToolBar.GetToolPacking "Permalink to this definition")
Returns the value used for packing tools.



Return type
*int*





See also


[`SetToolPacking`](#wx.ToolBar.SetToolPacking "wx.ToolBar.SetToolPacking")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolPos(self, toolId: int) -> int:
        """ 

`GetToolPos`(*self*, *toolId*)[¶](#wx.ToolBar.GetToolPos "Permalink to this definition")
Returns the tool position in the toolbar, or `NOT_FOUND` if the tool is not found.



Parameters
**toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .



Return type
*int*






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolSeparation(self) -> int:
        """ 

`GetToolSeparation`(*self*)[¶](#wx.ToolBar.GetToolSeparation "Permalink to this definition")
Returns the default separator size.



Return type
*int*





See also


[`SetToolSeparation`](#wx.ToolBar.SetToolSeparation "wx.ToolBar.SetToolSeparation")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolShortHelp(self, toolId: int) -> str:
        """ 

`GetToolShortHelp`(*self*, *toolId*)[¶](#wx.ToolBar.GetToolShortHelp "Permalink to this definition")
Returns the short help for the given tool.



Parameters
**toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .



Return type
`string`





See also


[`GetToolLongHelp`](#wx.ToolBar.GetToolLongHelp "wx.ToolBar.GetToolLongHelp") , [`SetToolShortHelp`](#wx.ToolBar.SetToolShortHelp "wx.ToolBar.SetToolShortHelp")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolSize(self) -> 'Size':
        """ 

`GetToolSize`(*self*)[¶](#wx.ToolBar.GetToolSize "Permalink to this definition")
Returns the size of a whole button, which is usually larger than a tool bitmap because of added 3D effects.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`SetToolBitmapSize`](#wx.ToolBar.SetToolBitmapSize "wx.ToolBar.SetToolBitmapSize") , [`GetToolBitmapSize`](#wx.ToolBar.GetToolBitmapSize "wx.ToolBar.GetToolBitmapSize")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolState(self, toolId: int) -> bool:
        """ 

`GetToolState`(*self*, *toolId*)[¶](#wx.ToolBar.GetToolState "Permalink to this definition")
Gets the on/off state of a toggle tool.



Parameters
**toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .



Return type
*bool*



Returns
`True` if the tool is toggled on, `False` otherwise.





See also


[`ToggleTool`](#wx.ToolBar.ToggleTool "wx.ToolBar.ToggleTool")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def GetToolsCount(self) -> int:
        """ 

`GetToolsCount`(*self*)[¶](#wx.ToolBar.GetToolsCount "Permalink to this definition")
Returns the number of tools in the toolbar.



Return type
*int*






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def InsertControl(self, pos, control, label="") -> 'ToolBarToolBase':
        """ 

`InsertControl`(*self*, *pos*, *control*, *label=""*)[¶](#wx.ToolBar.InsertControl "Permalink to this definition")
Inserts the control into the toolbar at the given position.


You must call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") for the change to take place.



Parameters
* **pos** (*int*) –
* **control** ([*wx.Control*](wx.Control.html#wx.Control "wx.Control")) –
* **label** (*string*) –



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





See also


[`AddControl`](#wx.ToolBar.AddControl "wx.ToolBar.AddControl") , [`InsertTool`](#wx.ToolBar.InsertTool "wx.ToolBar.InsertTool")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def InsertLabelTool(self, pos, id, label, bitmap, bmpDisabled=wx.NullBitmap, kind=wx.ITEM_NORMAL, shortHelp="", longHelp="", clientData=None) -> None:
        """ 

`InsertLabelTool`(*self*, *pos*, *id*, *label*, *bitmap*, *bmpDisabled=wx.NullBitmap*, *kind=wx.ITEM\_NORMAL*, *shortHelp=""*, *longHelp=""*, *clientData=None*)[¶](#wx.ToolBar.InsertLabelTool "Permalink to this definition")
Old style method to insert a tool in the toolbar.




            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def InsertSeparator(self, pos: int) -> 'ToolBarToolBase':
        """ 

`InsertSeparator`(*self*, *pos*)[¶](#wx.ToolBar.InsertSeparator "Permalink to this definition")
Inserts the separator into the toolbar at the given position.


You must call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") for the change to take place.



Parameters
**pos** (*int*) – 



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





See also


[`AddSeparator`](#wx.ToolBar.AddSeparator "wx.ToolBar.AddSeparator") , [`InsertTool`](#wx.ToolBar.InsertTool "wx.ToolBar.InsertTool")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def InsertSimpleTool(self, pos, toolId, bitmap, shortHelpString="", longHelpString="", isToggle=0) -> None:
        """ 

`InsertSimpleTool`(*self*, *pos*, *toolId*, *bitmap*, *shortHelpString=""*, *longHelpString=""*, *isToggle=0*)[¶](#wx.ToolBar.InsertSimpleTool "Permalink to this definition")
Old style method to insert a tool in the toolbar.




            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def InsertStretchableSpace(self, pos: int) -> 'ToolBarToolBase':
        """ 

`InsertStretchableSpace`(*self*, *pos*)[¶](#wx.ToolBar.InsertStretchableSpace "Permalink to this definition")
Inserts a stretchable space at the given position.


See [`AddStretchableSpace`](#wx.ToolBar.AddStretchableSpace "wx.ToolBar.AddStretchableSpace") for details about stretchable spaces.



Parameters
**pos** (*int*) – 



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





New in version 2.9.1.




See also


[`InsertTool`](#wx.ToolBar.InsertTool "wx.ToolBar.InsertTool") , [`InsertSeparator`](#wx.ToolBar.InsertSeparator "wx.ToolBar.InsertSeparator")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def InsertTool(self, *args, **kw) -> None:
        """ 

`InsertTool`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ToolBar.InsertTool "Permalink to this definition")
Inserts the tool with the specified attributes into the toolbar at the given position.


You must call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") for the change to take place.



Returns
The newly inserted tool or `None` on failure. Notice that with the overload taking *tool* parameter the caller is responsible for deleting the tool in the latter case.





See also


[`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") , [`InsertControl`](#wx.ToolBar.InsertControl "wx.ToolBar.InsertControl") , [`InsertSeparator`](#wx.ToolBar.InsertSeparator "wx.ToolBar.InsertSeparator")



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**InsertTool** *(self, pos, toolId, label, bitmap, bmpDisabled=NullBitmap, kind=ITEM\_NORMAL, shortHelp=””, longHelp=””, clientData=None)*



Parameters
* **pos** (*int*) –
* **toolId** (*int*) –
* **label** (*string*) –
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **bmpDisabled** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) –
* **shortHelp** (*string*) –
* **longHelp** (*string*) –
* **clientData** (*PyUserData*) –



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)






---

  



**InsertTool** *(self, pos, tool)*



Parameters
* **pos** (*int*) –
* **tool** ([*wx.ToolBarToolBase*](wx.ToolBarToolBase.html#wx.ToolBarToolBase "wx.ToolBarToolBase")) –



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)






---

  





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def Realize(self) -> bool:
        """ 

`Realize`(*self*)[¶](#wx.ToolBar.Realize "Permalink to this definition")
This function should be called after you have added tools.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def RemoveTool(self, id: int) -> 'ToolBarToolBase':
        """ 

`RemoveTool`(*self*, *id*)[¶](#wx.ToolBar.RemoveTool "Permalink to this definition")
Removes the given tool from the toolbar but doesn’t delete it.


This allows inserting/adding this tool back to this (or another) toolbar later.



Parameters
**id** (*int*) – 



Return type
 [wx.ToolBarToolBase](wx.ToolBarToolBase.html#wx-toolbartoolbase)





Note


It is unnecessary to call [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") for the change to take place, it will happen immediately.




See also


[`DeleteTool`](#wx.ToolBar.DeleteTool "wx.ToolBar.DeleteTool")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetDropdownMenu(self, id, menu) -> bool:
        """ 

`SetDropdownMenu`(*self*, *id*, *menu*)[¶](#wx.ToolBar.SetDropdownMenu "Permalink to this definition")
Sets the dropdown menu for the tool given by its *id*.


The tool itself will delete the menu when it’s no longer needed. Only supported under GTK+ und MSW.


If you define a EVT\_TOOL\_DROPDOWN() handler in your program, you must call [`wx.Event.Skip`](wx.Event.html#wx.Event.Skip "wx.Event.Skip") from it or the menu won’t be displayed.



Parameters
* **id** (*int*) –
* **menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetMargins(self, *args, **kw) -> None:
        """ 

`SetMargins`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ToolBar.SetMargins "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetMargins** *(self, x, y)*


Set the values to be used as margins for the toolbar.



Parameters
* **x** (*int*) – Left margin, right margin and inter-tool separation value.
* **y** (*int*) – Top margin, bottom margin and inter-tool separation value.





Note


This must be called before the tools are added if absolute positioning is to be used, and the default (zero-size) margins are to be overridden.




See also


[`GetMargins`](#wx.ToolBar.GetMargins "wx.ToolBar.GetMargins")





---

  



**SetMargins** *(self, size)*


Set the margins for the toolbar.



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Margin size.





Note


This must be called before the tools are added if absolute positioning is to be used, and the default (zero-size) margins are to be overridden.




See also


[`GetMargins`](#wx.ToolBar.GetMargins "wx.ToolBar.GetMargins") ,  [wx.Size](wx.Size.html#wx-size)





---

  





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetToolBitmapSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetToolBitmapSize`(*self*, *size*)[¶](#wx.ToolBar.SetToolBitmapSize "Permalink to this definition")
Sets the default size of each tool bitmap.


It is usually unnecessary to call this function, as the tools will always be made big enough to fit the size of the bitmaps used in them. Moreover, calling it forces  [wx.ToolBar](#wx-toolbar) to scale its images in high `DPI` using the provided size, instead of letting  [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle) used for the tool bitmaps determine the best suitable bitmap size, which may result in suboptimal appearance.


If you do call it, it must be done before toolbar is [`Realize`](#wx.ToolBar.Realize "wx.ToolBar.Realize") ‘d.


Example of using this function to force the bitmaps to be at least 32 pixels wide and tall (at normal `DPI`):



```
toolbar.SetToolBitmapSize(self.FromDIP(wx.Size(32, 32)))
toolbar.AddTool(wx.ID_NEW, "New", wx.BitmapBundle.FromXXX(...))
...
toolbar.Realize()

```



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The size of the bitmaps in the toolbar in logical pixels.





See also


[`GetToolBitmapSize`](#wx.ToolBar.GetToolBitmapSize "wx.ToolBar.GetToolBitmapSize") , [`GetToolSize`](#wx.ToolBar.GetToolSize "wx.ToolBar.GetToolSize")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetToolClientData(self, id, clientData) -> None:
        """ 

`SetToolClientData`(*self*, *id*, *clientData*)[¶](#wx.ToolBar.SetToolClientData "Permalink to this definition")
Sets the client data associated with the tool.



Parameters
* **id** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .
* **clientData** (*PyUserData*) – The client data to use.






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetToolDisabledBitmap(self, id, bitmap) -> None:
        """ 

`SetToolDisabledBitmap`(*self*, *id*, *bitmap*)[¶](#wx.ToolBar.SetToolDisabledBitmap "Permalink to this definition")
Sets the bitmap to be used by the tool with the given `ID` when the tool is in a disabled state.


This can only be used on Button tools, not controls.



Parameters
* **id** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – Bitmap to use for disabled tools.





Note


The native toolbar classes on the main platforms all synthesize the disabled bitmap from the normal bitmap, so this function will have no effect on those platforms.





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetToolLongHelp(self, toolId, helpString) -> None:
        """ 

`SetToolLongHelp`(*self*, *toolId*, *helpString*)[¶](#wx.ToolBar.SetToolLongHelp "Permalink to this definition")
Sets the long help for the given tool.



Parameters
* **toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .
* **helpString** (*string*) – A string for the long help.





Note


You might use the long help for displaying the tool purpose on the status line.




See also


[`GetToolLongHelp`](#wx.ToolBar.GetToolLongHelp "wx.ToolBar.GetToolLongHelp") , [`SetToolShortHelp`](#wx.ToolBar.SetToolShortHelp "wx.ToolBar.SetToolShortHelp") ,





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetToolNormalBitmap(self, id, bitmap) -> None:
        """ 

`SetToolNormalBitmap`(*self*, *id*, *bitmap*)[¶](#wx.ToolBar.SetToolNormalBitmap "Permalink to this definition")
Sets the bitmap to be used by the tool with the given `ID`.


This can only be used on Button tools, not controls.



Parameters
* **id** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .
* **bitmap** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – Bitmap to use for normals tools.






            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetToolPacking(self, packing: int) -> None:
        """ 

`SetToolPacking`(*self*, *packing*)[¶](#wx.ToolBar.SetToolPacking "Permalink to this definition")
Sets the value used for spacing tools.


The default value is 1.



Parameters
**packing** (*int*) – The value for packing.





Note


The packing is used for spacing in the vertical direction if the toolbar is horizontal, and for spacing in the horizontal direction if the toolbar is vertical.




See also


[`GetToolPacking`](#wx.ToolBar.GetToolPacking "wx.ToolBar.GetToolPacking")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetToolSeparation(self, separation: int) -> None:
        """ 

`SetToolSeparation`(*self*, *separation*)[¶](#wx.ToolBar.SetToolSeparation "Permalink to this definition")
Sets the default separator size.


The default value is 5.



Parameters
**separation** (*int*) – The separator size.





See also


[`AddSeparator`](#wx.ToolBar.AddSeparator "wx.ToolBar.AddSeparator")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def SetToolShortHelp(self, toolId, helpString) -> None:
        """ 

`SetToolShortHelp`(*self*, *toolId*, *helpString*)[¶](#wx.ToolBar.SetToolShortHelp "Permalink to this definition")
Sets the short help for the given tool.



Parameters
* **toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .
* **helpString** (*string*) – The string for the short help.





Note


An application might use short help for identifying the tool purpose in a tooltip.




See also


[`GetToolShortHelp`](#wx.ToolBar.GetToolShortHelp "wx.ToolBar.GetToolShortHelp") , [`SetToolLongHelp`](#wx.ToolBar.SetToolLongHelp "wx.ToolBar.SetToolLongHelp")





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    def ToggleTool(self, toolId, toggle) -> None:
        """ 

`ToggleTool`(*self*, *toolId*, *toggle*)[¶](#wx.ToolBar.ToggleTool "Permalink to this definition")
Toggles a tool on or off.


This does not cause any event to get emitted.



Parameters
* **toolId** (*int*) – `ID` of the tool in question, as passed to [`AddTool`](#wx.ToolBar.AddTool "wx.ToolBar.AddTool") .
* **toggle** (*bool*) – If `True`, toggles the tool on, otherwise toggles it off.





Note


Only applies to a tool that has been specified as a toggle tool.





            Source: https://docs.wxpython.org/wx.ToolBar.html
        """

    Margins: 'Size'  # `Margins`[¶](#wx.ToolBar.Margins "Permalink to this definition")See [`GetMargins`](#wx.ToolBar.GetMargins "wx.ToolBar.GetMargins") and [`SetMargins`](#wx.ToolBar.SetMargins "wx.ToolBar.SetMargins")
    ToolBitmapSize: 'Size'  # `ToolBitmapSize`[¶](#wx.ToolBar.ToolBitmapSize "Permalink to this definition")See [`GetToolBitmapSize`](#wx.ToolBar.GetToolBitmapSize "wx.ToolBar.GetToolBitmapSize") and [`SetToolBitmapSize`](#wx.ToolBar.SetToolBitmapSize "wx.ToolBar.SetToolBitmapSize")
    ToolPacking: int  # `ToolPacking`[¶](#wx.ToolBar.ToolPacking "Permalink to this definition")See [`GetToolPacking`](#wx.ToolBar.GetToolPacking "wx.ToolBar.GetToolPacking") and [`SetToolPacking`](#wx.ToolBar.SetToolPacking "wx.ToolBar.SetToolPacking")
    ToolSeparation: int  # `ToolSeparation`[¶](#wx.ToolBar.ToolSeparation "Permalink to this definition")See [`GetToolSeparation`](#wx.ToolBar.GetToolSeparation "wx.ToolBar.GetToolSeparation") and [`SetToolSeparation`](#wx.ToolBar.SetToolSeparation "wx.ToolBar.SetToolSeparation")
    ToolSize: 'Size'  # `ToolSize`[¶](#wx.ToolBar.ToolSize "Permalink to this definition")See [`GetToolSize`](#wx.ToolBar.GetToolSize "wx.ToolBar.GetToolSize")
    ToolsCount: int  # `ToolsCount`[¶](#wx.ToolBar.ToolsCount "Permalink to this definition")See [`GetToolsCount`](#wx.ToolBar.GetToolsCount "wx.ToolBar.GetToolsCount")



TB_FLAT: int  # Gives the toolbar a flat look (Windows and GTK only).

TB_DOCKABLE: int  # Makes the toolbar floatable and dockable (GTK only).

TB_HORIZONTAL: int  # Specifies horizontal layout (default).

TB_VERTICAL: int  # Specifies vertical layout.

TB_TEXT: int  # Shows the text in the toolbar buttons; by default only icons are shown.

TB_NOICONS: int  # Specifies no icons in the toolbar buttons; by default they are shown.

TB_NODIVIDER: int  # Specifies no divider (border) above the toolbar (Windows only)

TB_NOALIGN: int  # Specifies no alignment with the parent window (Windows only, not very useful).

TB_HORZ_LAYOUT: int  # Shows the text and the icons alongside, not vertically stacked (Windows and GTK 2 only). This style must be used with  TB_TEXT .

TB_HORZ_TEXT: int  # Combination of  TB_HORZ_LAYOUT   and   TB_TEXT .

TB_NO_TOOLTIPS: int  # Don’t show the short help tooltips for the tools when the mouse hovers over them.

TB_BOTTOM: int  # Align the toolbar at the bottom of parent window.

TB_RIGHT: int  # Align the toolbar at the right side of parent window.

TB_DEFAULT_STYLE: int  # The  TB_HORIZONTAL   style. This style is new since wxWidgets 2.9.5. ^^

EVT_TOOL_DROPDOWN: int  # Process a  wxEVT_TOOL_DROPDOWN   event. If unhandled, displays the default dropdown menu set using  wx.ToolBar.SetDropdownMenu . ^^

_Control: TypeAlias = Control

class ToolBarToolBase(Object):
    """ **Possible constructors**:



```
ToolBarToolBase(tbar=None, toolid=ID_SEPARATOR, label="",
                bmpNormal=NullBitmap, bmpDisabled=NullBitmap, kind=ITEM_NORMAL,
                clientData=None, shortHelpString="",
                longHelpString="")

ToolBarToolBase(tbar, control, label)

```


A toolbar tool represents one item on the toolbar.


  


        Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ToolBarToolBase.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, tbar=None, toolid=ID\_SEPARATOR, label=””, bmpNormal=NullBitmap, bmpDisabled=NullBitmap, kind=ITEM\_NORMAL, clientData=None, shortHelpString=””, longHelpString=””)*



Parameters
* **tbar** ([*wx.ToolBar*](wx.ToolBar.html#wx.ToolBar "wx.ToolBar")) –
* **toolid** (*int*) –
* **label** (*string*) –
* **bmpNormal** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **bmpDisabled** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) –
* **kind** ([*ItemKind*](wx.ItemKind.enumeration.html "ItemKind")) –
* **clientData** (*PyUserData*) –
* **shortHelpString** (*string*) –
* **longHelpString** (*string*) –






---

  



**\_\_init\_\_** *(self, tbar, control, label)*



Parameters
* **tbar** ([*wx.ToolBar*](wx.ToolBar.html#wx.ToolBar "wx.ToolBar")) –
* **control** ([*wx.Control*](wx.Control.html#wx.Control "wx.Control")) –
* **label** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def Attach(self, tbar: 'ToolBar') -> None:
        """ 

`Attach`(*self*, *tbar*)[¶](#wx.ToolBarToolBase.Attach "Permalink to this definition")

Parameters
**tbar** ([*wx.ToolBar*](wx.ToolBar.html#wx.ToolBar "wx.ToolBar")) – 






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def CanBeToggled(self) -> bool:
        """ 

`CanBeToggled`(*self*)[¶](#wx.ToolBarToolBase.CanBeToggled "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def Detach(self) -> None:
        """ 

`Detach`(*self*)[¶](#wx.ToolBarToolBase.Detach "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def Enable(self, enable: bool) -> bool:
        """ 

`Enable`(*self*, *enable*)[¶](#wx.ToolBarToolBase.Enable "Permalink to this definition")

Parameters
**enable** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetBitmap(self) -> 'Bitmap':
        """ 

`GetBitmap`(*self*)[¶](#wx.ToolBarToolBase.GetBitmap "Permalink to this definition")

Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetClientData(self) -> 'PyUserData':
        """ 

`GetClientData`(*self*)[¶](#wx.ToolBarToolBase.GetClientData "Permalink to this definition")

Return type
*PyUserData*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetControl(self) -> 'Control':
        """ 

`GetControl`(*self*)[¶](#wx.ToolBarToolBase.GetControl "Permalink to this definition")

Return type
 [wx.Control](wx.Control.html#wx-control)






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetDisabledBitmap(self) -> 'Bitmap':
        """ 

`GetDisabledBitmap`(*self*)[¶](#wx.ToolBarToolBase.GetDisabledBitmap "Permalink to this definition")

Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetDisabledBitmapBundle(self) -> 'BitmapBundle':
        """ 

`GetDisabledBitmapBundle`(*self*)[¶](#wx.ToolBarToolBase.GetDisabledBitmapBundle "Permalink to this definition")
Return the bundle containing disabled tool bitmaps.


This bundle may be invalid if the tool doesn’t show a bitmap or doesn’t have a specific disabled bitmap creates one automatically from the normal bitmap.



Return type
 [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle)





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetDropdownMenu(self) -> 'Menu':
        """ 

`GetDropdownMenu`(*self*)[¶](#wx.ToolBarToolBase.GetDropdownMenu "Permalink to this definition")

Return type
 [wx.Menu](wx.Menu.html#wx-menu)






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetId(self) -> int:
        """ 

`GetId`(*self*)[¶](#wx.ToolBarToolBase.GetId "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetKind(self) -> 'ItemKind':
        """ 

`GetKind`(*self*)[¶](#wx.ToolBarToolBase.GetKind "Permalink to this definition")

Return type
 [wx.ItemKind](wx.ItemKind.enumeration.html#wx-itemkind)






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetLabel(self) -> str:
        """ 

`GetLabel`(*self*)[¶](#wx.ToolBarToolBase.GetLabel "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetLongHelp(self) -> str:
        """ 

`GetLongHelp`(*self*)[¶](#wx.ToolBarToolBase.GetLongHelp "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetNormalBitmap(self) -> 'Bitmap':
        """ 

`GetNormalBitmap`(*self*)[¶](#wx.ToolBarToolBase.GetNormalBitmap "Permalink to this definition")

Return type
 [wx.Bitmap](wx.Bitmap.html#wx-bitmap)






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetNormalBitmapBundle(self) -> 'BitmapBundle':
        """ 

`GetNormalBitmapBundle`(*self*)[¶](#wx.ToolBarToolBase.GetNormalBitmapBundle "Permalink to this definition")
Return the bundle containing normal tool bitmaps.


This bundle may be invalid if the tool doesn’t show a bitmap.



Return type
 [wx.BitmapBundle](wx.BitmapBundle.html#wx-bitmapbundle)





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetShortHelp(self) -> str:
        """ 

`GetShortHelp`(*self*)[¶](#wx.ToolBarToolBase.GetShortHelp "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetStyle(self) -> int:
        """ 

`GetStyle`(*self*)[¶](#wx.ToolBarToolBase.GetStyle "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def GetToolBar(self) -> 'ToolBar':
        """ 

`GetToolBar`(*self*)[¶](#wx.ToolBarToolBase.GetToolBar "Permalink to this definition")
Return the toolbar this tool is a member of.



Return type
 [wx.ToolBar](wx.ToolBar.html#wx-toolbar)






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def IsButton(self) -> bool:
        """ 

`IsButton`(*self*)[¶](#wx.ToolBarToolBase.IsButton "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def IsControl(self) -> bool:
        """ 

`IsControl`(*self*)[¶](#wx.ToolBarToolBase.IsControl "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def IsEnabled(self) -> bool:
        """ 

`IsEnabled`(*self*)[¶](#wx.ToolBarToolBase.IsEnabled "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def IsSeparator(self) -> bool:
        """ 

`IsSeparator`(*self*)[¶](#wx.ToolBarToolBase.IsSeparator "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def IsStretchable(self) -> bool:
        """ 

`IsStretchable`(*self*)[¶](#wx.ToolBarToolBase.IsStretchable "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def IsStretchableSpace(self) -> bool:
        """ 

`IsStretchableSpace`(*self*)[¶](#wx.ToolBarToolBase.IsStretchableSpace "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def IsToggled(self) -> bool:
        """ 

`IsToggled`(*self*)[¶](#wx.ToolBarToolBase.IsToggled "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def MakeStretchable(self) -> None:
        """ 

`MakeStretchable`(*self*)[¶](#wx.ToolBarToolBase.MakeStretchable "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def SetClientData(self, clientData: PyUserData) -> None:
        """ 

`SetClientData`(*self*, *clientData*)[¶](#wx.ToolBarToolBase.SetClientData "Permalink to this definition")

Parameters
**clientData** (*PyUserData*) – 






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def SetDisabledBitmap(self, bmp: 'BitmapBundle') -> None:
        """ 

`SetDisabledBitmap`(*self*, *bmp*)[¶](#wx.ToolBarToolBase.SetDisabledBitmap "Permalink to this definition")

Parameters
**bmp** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def SetDropdownMenu(self, menu: 'Menu') -> None:
        """ 

`SetDropdownMenu`(*self*, *menu*)[¶](#wx.ToolBarToolBase.SetDropdownMenu "Permalink to this definition")

Parameters
**menu** ([*wx.Menu*](wx.Menu.html#wx.Menu "wx.Menu")) – 






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def SetLabel(self, label: str) -> None:
        """ 

`SetLabel`(*self*, *label*)[¶](#wx.ToolBarToolBase.SetLabel "Permalink to this definition")

Parameters
**label** (*string*) – 






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def SetLongHelp(self, help: str) -> bool:
        """ 

`SetLongHelp`(*self*, *help*)[¶](#wx.ToolBarToolBase.SetLongHelp "Permalink to this definition")

Parameters
**help** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def SetNormalBitmap(self, bmp: 'BitmapBundle') -> None:
        """ 

`SetNormalBitmap`(*self*, *bmp*)[¶](#wx.ToolBarToolBase.SetNormalBitmap "Permalink to this definition")

Parameters
**bmp** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def SetShortHelp(self, help: str) -> bool:
        """ 

`SetShortHelp`(*self*, *help*)[¶](#wx.ToolBarToolBase.SetShortHelp "Permalink to this definition")

Parameters
**help** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def SetToggle(self, toggle: bool) -> bool:
        """ 

`SetToggle`(*self*, *toggle*)[¶](#wx.ToolBarToolBase.SetToggle "Permalink to this definition")

Parameters
**toggle** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    def Toggle(self, *args, **kw) -> bool:
        """ 

`Toggle`(*self*, *\*args*, *\*\*kw*)[¶](#wx.ToolBarToolBase.Toggle "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Toggle** *(self, toggle)*



Parameters
**toggle** (*bool*) – 



Return type
*bool*






---

  



**Toggle** *(self)*




---

  





            Source: https://docs.wxpython.org/wx.ToolBarToolBase.html
        """

    Bitmap: '_Bitmap'  # `Bitmap`[¶](#wx.ToolBarToolBase.Bitmap "Permalink to this definition")See [`GetBitmap`](#wx.ToolBarToolBase.GetBitmap "wx.ToolBarToolBase.GetBitmap")
    ClientData: 'PyUserData'  # `ClientData`[¶](#wx.ToolBarToolBase.ClientData "Permalink to this definition")See [`GetClientData`](#wx.ToolBarToolBase.GetClientData "wx.ToolBarToolBase.GetClientData") and [`SetClientData`](#wx.ToolBarToolBase.SetClientData "wx.ToolBarToolBase.SetClientData")
    Control: '_Control'  # `Control`[¶](#wx.ToolBarToolBase.Control "Permalink to this definition")See [`GetControl`](#wx.ToolBarToolBase.GetControl "wx.ToolBarToolBase.GetControl")
    DisabledBitmap: 'Bitmap'  # `DisabledBitmap`[¶](#wx.ToolBarToolBase.DisabledBitmap "Permalink to this definition")See [`GetDisabledBitmap`](#wx.ToolBarToolBase.GetDisabledBitmap "wx.ToolBarToolBase.GetDisabledBitmap") and [`SetDisabledBitmap`](#wx.ToolBarToolBase.SetDisabledBitmap "wx.ToolBarToolBase.SetDisabledBitmap")
    DisabledBitmapBundle: 'BitmapBundle'  # `DisabledBitmapBundle`[¶](#wx.ToolBarToolBase.DisabledBitmapBundle "Permalink to this definition")See [`GetDisabledBitmapBundle`](#wx.ToolBarToolBase.GetDisabledBitmapBundle "wx.ToolBarToolBase.GetDisabledBitmapBundle")
    DropdownMenu: 'Menu'  # `DropdownMenu`[¶](#wx.ToolBarToolBase.DropdownMenu "Permalink to this definition")See [`GetDropdownMenu`](#wx.ToolBarToolBase.GetDropdownMenu "wx.ToolBarToolBase.GetDropdownMenu") and [`SetDropdownMenu`](#wx.ToolBarToolBase.SetDropdownMenu "wx.ToolBarToolBase.SetDropdownMenu")
    Id: int  # `Id`[¶](#wx.ToolBarToolBase.Id "Permalink to this definition")See [`GetId`](#wx.ToolBarToolBase.GetId "wx.ToolBarToolBase.GetId")
    Kind: 'ItemKind'  # `Kind`[¶](#wx.ToolBarToolBase.Kind "Permalink to this definition")See [`GetKind`](#wx.ToolBarToolBase.GetKind "wx.ToolBarToolBase.GetKind")
    Label: str  # `Label`[¶](#wx.ToolBarToolBase.Label "Permalink to this definition")See [`GetLabel`](#wx.ToolBarToolBase.GetLabel "wx.ToolBarToolBase.GetLabel") and [`SetLabel`](#wx.ToolBarToolBase.SetLabel "wx.ToolBarToolBase.SetLabel")
    LongHelp: str  # `LongHelp`[¶](#wx.ToolBarToolBase.LongHelp "Permalink to this definition")See [`GetLongHelp`](#wx.ToolBarToolBase.GetLongHelp "wx.ToolBarToolBase.GetLongHelp") and [`SetLongHelp`](#wx.ToolBarToolBase.SetLongHelp "wx.ToolBarToolBase.SetLongHelp")
    NormalBitmap: 'Bitmap'  # `NormalBitmap`[¶](#wx.ToolBarToolBase.NormalBitmap "Permalink to this definition")See [`GetNormalBitmap`](#wx.ToolBarToolBase.GetNormalBitmap "wx.ToolBarToolBase.GetNormalBitmap") and [`SetNormalBitmap`](#wx.ToolBarToolBase.SetNormalBitmap "wx.ToolBarToolBase.SetNormalBitmap")
    NormalBitmapBundle: 'BitmapBundle'  # `NormalBitmapBundle`[¶](#wx.ToolBarToolBase.NormalBitmapBundle "Permalink to this definition")See [`GetNormalBitmapBundle`](#wx.ToolBarToolBase.GetNormalBitmapBundle "wx.ToolBarToolBase.GetNormalBitmapBundle")
    ShortHelp: str  # `ShortHelp`[¶](#wx.ToolBarToolBase.ShortHelp "Permalink to this definition")See [`GetShortHelp`](#wx.ToolBarToolBase.GetShortHelp "wx.ToolBarToolBase.GetShortHelp") and [`SetShortHelp`](#wx.ToolBarToolBase.SetShortHelp "wx.ToolBarToolBase.SetShortHelp")
    Style: int  # `Style`[¶](#wx.ToolBarToolBase.Style "Permalink to this definition")See [`GetStyle`](#wx.ToolBarToolBase.GetStyle "wx.ToolBarToolBase.GetStyle")
    ToolBar: '_ToolBar'  # `ToolBar`[¶](#wx.ToolBarToolBase.ToolBar "Permalink to this definition")See [`GetToolBar`](#wx.ToolBarToolBase.GetToolBar "wx.ToolBarToolBase.GetToolBar")



class Toolbook(BookCtrlBase):
    """ **Possible constructors**:



```
Toolbook()

Toolbook(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
         style=0, name="")

```


Toolbook is a class similar to Notebook but which uses a ToolBar
to show the labels instead of the tabs.


  


        Source: https://docs.wxpython.org/wx.Toolbook.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Toolbook.__init__ "Permalink to this definition")
Constructs a choicebook control.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=””)*



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.Toolbook.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name="") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=""*)[¶](#wx.Toolbook.Create "Permalink to this definition")
Create the tool book control that has already been constructed with the default constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Toolbook.html
        """

    def EnablePage(self, *args, **kw) -> bool:
        """ 

`EnablePage`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Toolbook.EnablePage "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**EnablePage** *(self, page, enable)*


Enables or disables the specified page.


Using this function, a page can be disabled when it can’t be used, while still remaining present to let the users know that more functionality is available, even if currently inaccessible.


Icons for disabled pages are created by [`wx.Bitmap.ConvertToDisabled`](wx.Bitmap.html#wx.Bitmap.ConvertToDisabled "wx.Bitmap.ConvertToDisabled") .



Parameters
* **page** (*int*) – The index of the page.
* **enable** (*bool*) – `True` to enable the page and `False` to disable it.



Return type
*bool*



Returns
`True` if successful, `False` otherwise (currently only if the index is invalid).





New in version 4.1/wxWidgets-3.1.2.





---

  



**EnablePage** *(self, page, enable)*


Enables or disables the specified page.


This is similar to the overload above, but finds the index of the specified page.



Parameters
* **page** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Pointer of a page windows inside the book control.
* **enable** (*bool*) – `True` to enable the page and `False` to disable it.



Return type
*bool*



Returns
`True` if successful, `False` otherwise, e.g. if *page* is not one of the pages of this control.





New in version 4.1/wxWidgets-3.1.2.





---

  





            Source: https://docs.wxpython.org/wx.Toolbook.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.Toolbook.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.Toolbook.html
        """

    def GetToolBar(self) -> 'ToolBar':
        """ 

`GetToolBar`(*self*)[¶](#wx.Toolbook.GetToolBar "Permalink to this definition")
Return the toolbar used for page selection.



Return type
 [wx.ToolBar](wx.ToolBar.html#wx-toolbar)






            Source: https://docs.wxpython.org/wx.Toolbook.html
        """

    ToolBar: '_ToolBar'  # `ToolBar`[¶](#wx.Toolbook.ToolBar "Permalink to this definition")See [`GetToolBar`](#wx.Toolbook.GetToolBar "wx.Toolbook.GetToolBar")



TBK_BUTTONBAR: int  # Use ButtonToolBar-based implementation under macOS (ignored under other platforms).

TBK_HORZ_LAYOUT: int  # Shows the text and the icons alongside, not vertically stacked (only implement under Windows and GTK 2 platforms as it relies on  TB_HORZ_LAYOUT   flag support). ^^

EVT_TOOLBOOK_PAGE_CHANGED: int  # The page selection was changed. Processes a  wxEVT_TOOLBOOK_PAGE_CHANGED   event.

EVT_TOOLBOOK_PAGE_CHANGING: int  # The page selection is about to be changed. Processes a  wxEVT_TOOLBOOK_PAGE_CHANGING   event. This event can be vetoed (using  wx.NotifyEvent.Veto ). ^^

class ToolTip(Object):
    """ **Possible constructors**:



```
ToolTip(tip)

```


This class holds information about a tooltip associated with a window
(see *Window.SetToolTip()).*


  


        Source: https://docs.wxpython.org/wx.ToolTip.html
    """
    def __init__(self, tip: str) -> None:
        """ 

`__init__`(*self*, *tip*)[¶](#wx.ToolTip.__init__ "Permalink to this definition")
Constructor.



Parameters
**tip** (*string*) – 






            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    @staticmethod
    def Enable(flag: bool) -> None:
        """ 

*static* `Enable`(*flag*)[¶](#wx.ToolTip.Enable "Permalink to this definition")
Enable or disable tooltips globally.



Parameters
**flag** (*bool*) – 





Note


May not be supported on all platforms (eg. Cocoa).





            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    def GetTip(self) -> str:
        """ 

`GetTip`(*self*)[¶](#wx.ToolTip.GetTip "Permalink to this definition")
Get the tooltip text.



Return type
`string`






            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.ToolTip.GetWindow "Permalink to this definition")
Get the associated window.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    @staticmethod
    def SetAutoPop(msecs: int) -> None:
        """ 

*static* `SetAutoPop`(*msecs*)[¶](#wx.ToolTip.SetAutoPop "Permalink to this definition")
Set the delay after which the tooltip disappears or how long a tooltip remains visible.



Parameters
**msecs** (*long*) – 





Note


May not be supported on all platforms (eg. Cocoa, GTK).





            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    @staticmethod
    def SetDelay(msecs: int) -> None:
        """ 

*static* `SetDelay`(*msecs*)[¶](#wx.ToolTip.SetDelay "Permalink to this definition")
Set the delay after which the tooltip appears.



Parameters
**msecs** (*long*) – 





Note


May not be supported on all platforms.





            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    @staticmethod
    def SetMaxWidth(width: int) -> None:
        """ 

*static* `SetMaxWidth`(*width*)[¶](#wx.ToolTip.SetMaxWidth "Permalink to this definition")
Set tooltip maximal width in pixels.


By default, tooltips are wrapped at a suitably chosen width. You can pass -1 as *width* to disable wrapping them completely, 0 to restore the default behaviour or an arbitrary positive value to wrap them at the given width.


Notice that this function does not change the width of the tooltips created before calling it.



Parameters
**width** (*int*) – 





Note


Currently this function is MSW-only.





            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    @staticmethod
    def SetReshow(msecs: int) -> None:
        """ 

*static* `SetReshow`(*msecs*)[¶](#wx.ToolTip.SetReshow "Permalink to this definition")
Set the delay between subsequent tooltips to appear.



Parameters
**msecs** (*long*) – 





Note


May not be supported on all platforms (eg. Cocoa, GTK).





            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    def SetTip(self, tip: str) -> None:
        """ 

`SetTip`(*self*, *tip*)[¶](#wx.ToolTip.SetTip "Permalink to this definition")
Set the tooltip text.



Parameters
**tip** (*string*) – 






            Source: https://docs.wxpython.org/wx.ToolTip.html
        """

    Tip: str  # `Tip`[¶](#wx.ToolTip.Tip "Permalink to this definition")See [`GetTip`](#wx.ToolTip.GetTip "wx.ToolTip.GetTip") and [`SetTip`](#wx.ToolTip.SetTip "wx.ToolTip.SetTip")
    Window: '_Window'  # `Window`[¶](#wx.ToolTip.Window "Permalink to this definition")See [`GetWindow`](#wx.ToolTip.GetWindow "wx.ToolTip.GetWindow")



class TopLevelWindow(NonOwnedWindow):
    """ **Possible constructors**:



```
TopLevelWindow()

TopLevelWindow(parent, id=ID_ANY, title="",
               pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE,
               name=FrameNameStr)

```


TopLevelWindow is a common base class for Dialog and Frame.


  


        Source: https://docs.wxpython.org/wx.TopLevelWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TopLevelWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, title=””, pos=DefaultPosition, size=DefaultSize, style=DEFAULT\_FRAME\_STYLE, name=FrameNameStr)*


Constructor creating the top level window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def CanSetTransparent(self) -> bool:
        """ 

`CanSetTransparent`(*self*)[¶](#wx.TopLevelWindow.CanSetTransparent "Permalink to this definition")
Returns `True` if the platform supports making the window translucent.



Return type
*bool*





See also


[`SetTransparent`](#wx.TopLevelWindow.SetTransparent "wx.TopLevelWindow.SetTransparent")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def CenterOnScreen(self, direction: int=BOTH) -> None:
        """ 

`CenterOnScreen`(*self*, *direction=BOTH*)[¶](#wx.TopLevelWindow.CenterOnScreen "Permalink to this definition")
A synonym for [`CentreOnScreen`](#wx.TopLevelWindow.CentreOnScreen "wx.TopLevelWindow.CentreOnScreen") .



Parameters
**direction** (*int*) – 






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def CentreOnScreen(self, direction: int=BOTH) -> None:
        """ 

`CentreOnScreen`(*self*, *direction=BOTH*)[¶](#wx.TopLevelWindow.CentreOnScreen "Permalink to this definition")
Centres the window on screen.



Parameters
**direction** (*int*) – Specifies the direction for the centering. May be `HORIZONTAL` , `VERTICAL` or `BOTH` .





See also


[`wx.Window.CentreOnParent`](wx.Window.html#wx.Window.CentreOnParent "wx.Window.CentreOnParent")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def Create(self, parent, id=ID_ANY, title="", pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *title=""*, *pos=DefaultPosition*, *size=DefaultSize*, *style=DEFAULT\_FRAME\_STYLE*, *name=FrameNameStr*)[¶](#wx.TopLevelWindow.Create "Permalink to this definition")
Creates the top level window.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def EnableCloseButton(self, enable: bool=True) -> bool:
        """ 

`EnableCloseButton`(*self*, *enable=True*)[¶](#wx.TopLevelWindow.EnableCloseButton "Permalink to this definition")
Enables or disables the Close button (most often in the right upper corner of a dialog) and the Close entry of the system menu (most often in the left upper corner of the dialog).


Returns `True` if operation was successful. This may be wrong on X11 (including GTK+) where the window manager may not support this operation and there is no way to find out.



Parameters
**enable** (*bool*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def EnableFullScreenView(self, enable=True, style=FULLSCREEN_ALL) -> bool:
        """ 

`EnableFullScreenView`(*self*, *enable=True*, *style=FULLSCREEN\_ALL*)[¶](#wx.TopLevelWindow.EnableFullScreenView "Permalink to this definition")
Enables the zoom button to toggle full screen mode.


A  [wx.FullScreenEvent](wx.FullScreenEvent.html#wx-fullscreenevent) is generated when the users enters or exits full screen via the enter/exit full screen button.



Parameters
* **enable** (*bool*) – If `True` (default) make the zoom button toggle full screen; if `False` the button does only toggle zoom.
* **style** (*long*) – This parameter sets which elements will be hidden when the user presses the full screen button. See [`ShowFullScreen`](#wx.TopLevelWindow.ShowFullScreen "wx.TopLevelWindow.ShowFullScreen") for possible values. It is available since wxWidgets 3.1.6.



Return type
*bool*



Returns
`True` if the button behaviour has been changed, `False` if running under another OS.





New in version 4.1/wxWidgets-3.1.0.




Availability


Only available for OSX.




Note


Having the button is also required to let [`ShowFullScreen`](#wx.TopLevelWindow.ShowFullScreen "wx.TopLevelWindow.ShowFullScreen") make use of the full screen API: a full screen window gets its own space and entering and exiting the mode is animated. If the button is not present the old way of switching to full screen is used. Only `FULLSCREEN_NOTOOLBAR` and `FULLSCREEN_NOMENUBAR` will be used when using the fullscreen API (other values are ignored).




See also


[`ShowFullScreen`](#wx.TopLevelWindow.ShowFullScreen "wx.TopLevelWindow.ShowFullScreen") ,  [wx.FullScreenEvent](wx.FullScreenEvent.html#wx-fullscreenevent)





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def EnableMaximizeButton(self, enable: bool=True) -> bool:
        """ 

`EnableMaximizeButton`(*self*, *enable=True*)[¶](#wx.TopLevelWindow.EnableMaximizeButton "Permalink to this definition")
Enables or disables the Maximize button (in the right or left upper corner of a frame or dialog).


Currently only implemented for wxMSW and wxOSX.


The window style must contain `wx.MAXIMIZE_BOX`.


Returns `True` if operation was successful. Note that a successful operation does not change the window style flags.



Parameters
**enable** (*bool*) – 



Return type
*bool*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def EnableMinimizeButton(self, enable: bool=True) -> bool:
        """ 

`EnableMinimizeButton`(*self*, *enable=True*)[¶](#wx.TopLevelWindow.EnableMinimizeButton "Permalink to this definition")
Enables or disables the Minimize button (in the right or left upper corner of a frame or dialog).


Currently only implemented for wxMSW and wxOSX.


The window style must contain `wx.MINIMIZE_BOX`.


Note that in wxMSW a successful operation will change the window style flags.


Returns `True` if operation was successful. Note that a successful operation does not change the window style flags.



Parameters
**enable** (*bool*) – 



Return type
*bool*





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.TopLevelWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def GetContentProtection(self) -> 'ContentProtection':
        """ 

`GetContentProtection`(*self*)[¶](#wx.TopLevelWindow.GetContentProtection "Permalink to this definition")
Get the current content protection of the window.



Return type
 [wx.ContentProtection](wx.ContentProtection.enumeration.html#wx-contentprotection)





New in version 4.1/wxWidgets-3.1.6.




See also


[`SetContentProtection`](#wx.TopLevelWindow.SetContentProtection "wx.TopLevelWindow.SetContentProtection")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def GetDefaultItem(self) -> 'Window':
        """ 

`GetDefaultItem`(*self*)[¶](#wx.TopLevelWindow.GetDefaultItem "Permalink to this definition")
Returns a pointer to the button which is the default for this window, or


The default button is the one activated by pressing the Enter key.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    @staticmethod
    def GetDefaultSize() -> 'Size':
        """ 

*static* `GetDefaultSize`()[¶](#wx.TopLevelWindow.GetDefaultSize "Permalink to this definition")
Get the default size for a new top level window.


This is used internally by wxWidgets on some platforms to determine the default size for a window created using `wx.DefaultSize` so it is not necessary to use it when creating a  [wx.TopLevelWindow](#wx-toplevelwindow), however it may be useful if a rough estimation of the window size is needed for some other reason.



Return type
 [wx.Size](wx.Size.html#wx-size)





New in version 2.9.2.





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def GetIcon(self) -> 'Icon':
        """ 

`GetIcon`(*self*)[¶](#wx.TopLevelWindow.GetIcon "Permalink to this definition")
Returns the standard icon of the window.


The icon will be invalid if it hadn’t been previously set by [`SetIcon`](#wx.TopLevelWindow.SetIcon "wx.TopLevelWindow.SetIcon") .



Return type
 [wx.Icon](wx.Icon.html#wx-icon)





See also


[`GetIcons`](#wx.TopLevelWindow.GetIcons "wx.TopLevelWindow.GetIcons")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def GetIcons(self) -> 'IconBundle':
        """ 

`GetIcons`(*self*)[¶](#wx.TopLevelWindow.GetIcons "Permalink to this definition")
Returns all icons associated with the window, there will be none of them if neither [`SetIcon`](#wx.TopLevelWindow.SetIcon "wx.TopLevelWindow.SetIcon") nor [`SetIcons`](#wx.TopLevelWindow.SetIcons "wx.TopLevelWindow.SetIcons") had been called before.


Use [`GetIcon`](#wx.TopLevelWindow.GetIcon "wx.TopLevelWindow.GetIcon") to get the main icon of the window.



Return type
 [wx.IconBundle](wx.IconBundle.html#wx-iconbundle)





See also


 [wx.IconBundle](wx.IconBundle.html#wx-iconbundle)





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def GetTitle(self) -> str:
        """ 

`GetTitle`(*self*)[¶](#wx.TopLevelWindow.GetTitle "Permalink to this definition")
Gets a string containing the window title.



Return type
`string`





See also


[`SetTitle`](#wx.TopLevelWindow.SetTitle "wx.TopLevelWindow.SetTitle")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def GetTmpDefaultItem(self) -> 'Window':
        """ 

`GetTmpDefaultItem`(*self*)[¶](#wx.TopLevelWindow.GetTmpDefaultItem "Permalink to this definition")

Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def Iconize(self, iconize: bool=True) -> None:
        """ 

`Iconize`(*self*, *iconize=True*)[¶](#wx.TopLevelWindow.Iconize "Permalink to this definition")
Iconizes or restores the window.


Note that in wxGTK the change to the window state is not immediate, i.e. [`IsIconized`](#wx.TopLevelWindow.IsIconized "wx.TopLevelWindow.IsIconized") will typically return `False` right after a call to [`Iconize`](#wx.TopLevelWindow.Iconize "wx.TopLevelWindow.Iconize") and its return value will only change after the control flow returns to the event loop and the notification about the window being really iconized is received.



Parameters
**iconize** (*bool*) – If `True`, iconizes the window; if `False`, shows and restores it.





See also


[`IsIconized`](#wx.TopLevelWindow.IsIconized "wx.TopLevelWindow.IsIconized") , [`Restore`](#wx.TopLevelWindow.Restore "wx.TopLevelWindow.Restore") (),  [wx.IconizeEvent](wx.IconizeEvent.html#wx-iconizeevent).





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def IsActive(self) -> bool:
        """ 

`IsActive`(*self*)[¶](#wx.TopLevelWindow.IsActive "Permalink to this definition")
Returns `True` if this window is currently active, i.e. if the user is currently working with it.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def IsAlwaysMaximized(self) -> bool:
        """ 

`IsAlwaysMaximized`(*self*)[¶](#wx.TopLevelWindow.IsAlwaysMaximized "Permalink to this definition")
Returns `True` if this window is expected to be always maximized, either due to platform policy or due to local policy regarding particular class.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def IsFullScreen(self) -> bool:
        """ 

`IsFullScreen`(*self*)[¶](#wx.TopLevelWindow.IsFullScreen "Permalink to this definition")
Returns `True` if the window is in fullscreen mode.



Return type
*bool*





See also


[`ShowFullScreen`](#wx.TopLevelWindow.ShowFullScreen "wx.TopLevelWindow.ShowFullScreen")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def IsIconized(self) -> bool:
        """ 

`IsIconized`(*self*)[¶](#wx.TopLevelWindow.IsIconized "Permalink to this definition")
Returns `True` if the window is iconized.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def IsMaximized(self) -> bool:
        """ 

`IsMaximized`(*self*)[¶](#wx.TopLevelWindow.IsMaximized "Permalink to this definition")
Returns `True` if the window is maximized.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def Layout(self) -> bool:
        """ 

`Layout`(*self*)[¶](#wx.TopLevelWindow.Layout "Permalink to this definition")
Lays out the children using the window sizer or resizes the only child of the window to cover its entire area.


This class overrides the base class [`Layout`](#wx.TopLevelWindow.Layout "wx.TopLevelWindow.Layout") method to check if this window contains exactly one child – which is commonly the case, with  [wx.Panel](wx.Panel.html#wx-panel) being often created as the only child of  [wx.TopLevelWindow](#wx-toplevelwindow) – and, if this is the case, resizes this child window to cover the entire client area.


Note that if you associate a sizer with this window, the sizer takes precedence and the only-child-resizing is only used as fallback.



Return type
*bool*



Returns
`False` if nothing was done because the window has neither a sizer nor a single child, `True` otherwise.






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def MacGetMetalAppearance(self) -> bool:
        """ 

`MacGetMetalAppearance`(*self*)[¶](#wx.TopLevelWindow.MacGetMetalAppearance "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def MacGetTopLevelWindowRef(self) -> None:
        """ 

`MacGetTopLevelWindowRef`(*self*)[¶](#wx.TopLevelWindow.MacGetTopLevelWindowRef "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def MacGetUnifiedAppearance(self) -> bool:
        """ 

`MacGetUnifiedAppearance`(*self*)[¶](#wx.TopLevelWindow.MacGetUnifiedAppearance "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def MacSetMetalAppearance(self, on) -> None:
        """ 

`MacSetMetalAppearance`(*self*, *on*)[¶](#wx.TopLevelWindow.MacSetMetalAppearance "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def Maximize(self, maximize: bool=True) -> None:
        """ 

`Maximize`(*self*, *maximize=True*)[¶](#wx.TopLevelWindow.Maximize "Permalink to this definition")
Maximizes or restores the window.


Note that, just as with [`Iconize`](#wx.TopLevelWindow.Iconize "wx.TopLevelWindow.Iconize") , the change to the window state is not immediate in at least wxGTK port.



Parameters
**maximize** (*bool*) – If `True`, maximizes the window, otherwise it restores it.





See also


[`Restore`](#wx.TopLevelWindow.Restore "wx.TopLevelWindow.Restore") , [`Iconize`](#wx.TopLevelWindow.Iconize "wx.TopLevelWindow.Iconize")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def OSXIsModified(self) -> bool:
        """ 

`OSXIsModified`(*self*)[¶](#wx.TopLevelWindow.OSXIsModified "Permalink to this definition")
Returns the current modified state of the  [wx.TopLevelWindow](#wx-toplevelwindow) on macOS.


On other platforms, this method does nothing.



Return type
*bool*





See also


[`OSXSetModified`](#wx.TopLevelWindow.OSXSetModified "wx.TopLevelWindow.OSXSetModified")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def OSXSetModified(self, modified: bool) -> None:
        """ 

`OSXSetModified`(*self*, *modified*)[¶](#wx.TopLevelWindow.OSXSetModified "Permalink to this definition")
This function sets the  [wx.TopLevelWindow](#wx-toplevelwindow)’s modified state on macOS, which currently draws a black dot in the  [wx.TopLevelWindow](#wx-toplevelwindow)’s close button.


On other platforms, this method does nothing.



Parameters
**modified** (*bool*) – 





See also


[`OSXIsModified`](#wx.TopLevelWindow.OSXIsModified "wx.TopLevelWindow.OSXIsModified")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def RequestUserAttention(self, flags: int=USER_ATTENTION_INFO) -> None:
        """ 

`RequestUserAttention`(*self*, *flags=USER\_ATTENTION\_INFO*)[¶](#wx.TopLevelWindow.RequestUserAttention "Permalink to this definition")
Use a system-dependent way to attract users attention to the window when it is in background.


*flags* may have the value of either `USER_ATTENTION_INFO` (default) or `USER_ATTENTION_ERROR` which results in a more drastic action. When in doubt, use the default value.


This function is currently implemented for Win32 where it flashes the window icon in the taskbar, and for wxGTK with task bars supporting it.



Parameters
**flags** (*int*) – 





Note


This function should normally be only used when the application is not already in foreground.





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def Restore(self) -> None:
        """ 

`Restore`(*self*)[¶](#wx.TopLevelWindow.Restore "Permalink to this definition")
Restore a previously iconized or maximized window to its normal state.


In wxGTK this method currently doesn’t return the maximized window to its normal state and you must use [`Maximize`](#wx.TopLevelWindow.Maximize "wx.TopLevelWindow.Maximize") with `False` argument explicitly for this. In the other ports, it both unmaximizes the maximized windows and uniconizes the iconized ones.



See also


[`Iconize`](#wx.TopLevelWindow.Iconize "wx.TopLevelWindow.Iconize") , [`Maximize`](#wx.TopLevelWindow.Maximize "wx.TopLevelWindow.Maximize")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def RestoreToGeometry(self, ser: 'TopLevelWindow.GeometrySerializer') -> bool:
        """ 

`RestoreToGeometry`(*self*, *ser*)[¶](#wx.TopLevelWindow.RestoreToGeometry "Permalink to this definition")
Restores the window to the previously saved geometry.


This is a companion function to [`SaveGeometry`](#wx.TopLevelWindow.SaveGeometry "wx.TopLevelWindow.SaveGeometry") and can be called later to restore the window to the geometry it had when it was saved.



Parameters
**ser** ([*wx.TopLevelWindow.GeometrySerializer*](wx.TopLevelWindow.GeometrySerializer.html#wx.TopLevelWindow.GeometrySerializer "wx.TopLevelWindow.GeometrySerializer")) – An object implementing  [wx.TopLevelWindow.GeometrySerializer](wx.TopLevelWindow.GeometrySerializer.html#wx-toplevelwindow-geometryserializer) virtual methods.



Return type
*bool*



Returns
`True` if any (and, usually, but not necessarily, all) of the window geometry attributes were restored or `False` if there was no saved geometry information at all or restoring it failed.





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SaveGeometry(self, ser: 'TopLevelWindow.GeometrySerializer') -> bool:
        """ 

`SaveGeometry`(*self*, *ser*)[¶](#wx.TopLevelWindow.SaveGeometry "Permalink to this definition")
Save the current window geometry to allow restoring it later.


After calling this function, window geometry is saved in the provided serializer and calling [`RestoreToGeometry`](#wx.TopLevelWindow.RestoreToGeometry "wx.TopLevelWindow.RestoreToGeometry") with the same serializer later (i.e. usually during a subsequent program execution) would restore the window to the same position, size, maximized/minimized state etc.


This function is used by *PersistentTLW* , so it is not necessary to use it if the goal is to just save and restore window geometry in the simplest possible way. However is more flexibility is required, it can be also used directly with a custom serializer object.



Parameters
**ser** ([*wx.TopLevelWindow.GeometrySerializer*](wx.TopLevelWindow.GeometrySerializer.html#wx.TopLevelWindow.GeometrySerializer "wx.TopLevelWindow.GeometrySerializer")) – An object implementing  [wx.TopLevelWindow.GeometrySerializer](wx.TopLevelWindow.GeometrySerializer.html#wx-toplevelwindow-geometryserializer) virtual methods.



Return type
*bool*



Returns
`True` if the geometry was saved, `False` if doing it failed





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetContentProtection(self, contentProtection: ContentProtection) -> bool:
        """ 

`SetContentProtection`(*self*, *contentProtection*)[¶](#wx.TopLevelWindow.SetContentProtection "Permalink to this definition")
Set content protection for the window.


When content protection is enabled contents of this window will not be included in screen captures.


Obviously this can’t provide absolute security as there might be workarounds and tools that bypass this protection. Additionally a screen could always be photographed.



Parameters
**contentProtection** ([*ContentProtection*](wx.ContentProtection.enumeration.html "ContentProtection")) – 



Return type
*bool*



Returns
`True` if the content protection was changed, `False` if running under an unsupported OS.





New in version 4.1/wxWidgets-3.1.6.




Availability


Only available for MSW, OSX.




Note


Windows 7 or newer is required but any macOS version is supported.




See also


[`GetContentProtection`](#wx.TopLevelWindow.GetContentProtection "wx.TopLevelWindow.GetContentProtection")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetDefaultItem(self, win: 'Window') -> 'Window':
        """ 

`SetDefaultItem`(*self*, *win*)[¶](#wx.TopLevelWindow.SetDefaultItem "Permalink to this definition")
Changes the default item for the panel, usually *win* is a button.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.Window](wx.Window.html#wx-window)





See also


[`GetDefaultItem`](#wx.TopLevelWindow.GetDefaultItem "wx.TopLevelWindow.GetDefaultItem")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetIcon(self, icon: 'Icon') -> None:
        """ 

`SetIcon`(*self*, *icon*)[¶](#wx.TopLevelWindow.SetIcon "Permalink to this definition")
Sets the icon for this window.



Parameters
**icon** ([*wx.Icon*](wx.Icon.html#wx.Icon "wx.Icon")) – The  [wx.Icon](wx.Icon.html#wx-icon) to associate with this window.





Note


The window takes a ‘copy’ of *icon*, but since it uses reference counting, the copy is very quick. It is safe to delete *icon* after calling this function.




Note


In wxMSW, *icon* must be either 16x16 or 32x32 icon.




See also


 [wx.Icon](wx.Icon.html#wx-icon), [`SetIcons`](#wx.TopLevelWindow.SetIcons "wx.TopLevelWindow.SetIcons")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetIcons(self, icons: 'IconBundle') -> None:
        """ 

`SetIcons`(*self*, *icons*)[¶](#wx.TopLevelWindow.SetIcons "Permalink to this definition")
Sets several icons of different sizes for this window: this allows using different icons for different situations (e.g.


task switching bar, taskbar, window title bar) instead of scaling, with possibly bad looking results, the only icon set by [`SetIcon`](#wx.TopLevelWindow.SetIcon "wx.TopLevelWindow.SetIcon") .



Parameters
**icons** ([*wx.IconBundle*](wx.IconBundle.html#wx.IconBundle "wx.IconBundle")) – The icons to associate with this window.





Note


In wxMSW, *icons* must contain a 16x16 or 32x32 icon, preferably both.




See also


 [wx.IconBundle](wx.IconBundle.html#wx-iconbundle)





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetMaxSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetMaxSize`(*self*, *size*)[¶](#wx.TopLevelWindow.SetMaxSize "Permalink to this definition")
A simpler interface for setting the size hints than [`SetSizeHints`](#wx.TopLevelWindow.SetSizeHints "wx.TopLevelWindow.SetSizeHints") .



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetMinSize(self, size: Union[tuple[int, int], 'Size']) -> None:
        """ 

`SetMinSize`(*self*, *size*)[¶](#wx.TopLevelWindow.SetMinSize "Permalink to this definition")
A simpler interface for setting the size hints than [`SetSizeHints`](#wx.TopLevelWindow.SetSizeHints "wx.TopLevelWindow.SetSizeHints") .



Parameters
**size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetRepresentedFilename(self, filename: str) -> None:
        """ 

`SetRepresentedFilename`(*self*, *filename*)[¶](#wx.TopLevelWindow.SetRepresentedFilename "Permalink to this definition")
Sets the file name represented by this  [wx.TopLevelWindow](#wx-toplevelwindow).


Under macOS, this file name is used to set the “proxy icon”, which appears in the window title bar near its title, corresponding to this file name. Under other platforms it currently doesn’t do anything but it is harmless to call it now and it might be implemented to do something useful in the future so you’re encouraged to use it for any window representing a file-based document.



Parameters
**filename** (*string*) – 





New in version 2.9.4.





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetSizeHints(self, *args, **kw) -> None:
        """ 

`SetSizeHints`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TopLevelWindow.SetSizeHints "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetSizeHints** *(self, minW, minH, maxW=-1, maxH=-1, incW=-1, incH=-1)*


Allows specification of minimum and maximum window sizes, and window size increments.


If a pair of values is not set (or set to -1), no constraints will be used.



Parameters
* **minW** (*int*) – The minimum width.
* **minH** (*int*) – The minimum height.
* **maxW** (*int*) – The maximum width.
* **maxH** (*int*) – The maximum height.
* **incW** (*int*) – Specifies the increment for sizing the width (GTK/Motif/Xt only).
* **incH** (*int*) – Specifies the increment for sizing the height (GTK/Motif/Xt only).





Note


Notice that this function not only prevents the user from resizing the window outside the given bounds but it also prevents the program itself from doing it using [`wx.Window.SetSize`](wx.Window.html#wx.Window.SetSize "wx.Window.SetSize") .





---

  



**SetSizeHints** *(self, minSize, maxSize=DefaultSize, incSize=DefaultSize)*


Allows specification of minimum and maximum window sizes, and window size increments.


If a pair of values is not set (or set to -1), no constraints will be used.



Parameters
* **minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The minimum size of the window.
* **maxSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The maximum size of the window.
* **incSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Increment size (only taken into account under X11-based ports such as GTK/wxMotif/wxX11).





Note


Notice that this function not only prevents the user from resizing the window outside the given bounds but it also prevents the program itself from doing it using [`wx.Window.SetSize`](wx.Window.html#wx.Window.SetSize "wx.Window.SetSize") .





---

  





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetTitle(self, title: str) -> None:
        """ 

`SetTitle`(*self*, *title*)[¶](#wx.TopLevelWindow.SetTitle "Permalink to this definition")
Sets the window title.



Parameters
**title** (*string*) – The window title.





See also


[`GetTitle`](#wx.TopLevelWindow.GetTitle "wx.TopLevelWindow.GetTitle")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetTmpDefaultItem(self, win: 'Window') -> 'Window':
        """ 

`SetTmpDefaultItem`(*self*, *win*)[¶](#wx.TopLevelWindow.SetTmpDefaultItem "Permalink to this definition")

Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def SetTransparent(self, alpha: 'Byte') -> bool:
        """ 

`SetTransparent`(*self*, *alpha*)[¶](#wx.TopLevelWindow.SetTransparent "Permalink to this definition")
If the platform supports it will set the window to be translucent.


Note that in wxGTK this function must be called before the window is shown the first time it’s called (but it can be called again after showing the window too).


See the shaped sample for an example of using this function.



Parameters
**alpha** (*wx.Byte*) – Determines how opaque or transparent the window will be, if the platform supports the operation. A value of 0 sets the window to be fully transparent, and a value of 255 sets the window to be fully opaque.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def ShouldPreventAppExit(self) -> bool:
        """ 

`ShouldPreventAppExit`(*self*)[¶](#wx.TopLevelWindow.ShouldPreventAppExit "Permalink to this definition")
This virtual function is not meant to be called directly but can be overridden to return `False` (it returns `True` by default) to allow the application to close even if this, presumably not very important, window is still opened.


By default, the application stays alive as long as there are any open top level windows.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def ShowFullScreen(self, show, style=FULLSCREEN_ALL) -> bool:
        """ 

`ShowFullScreen`(*self*, *show*, *style=FULLSCREEN\_ALL*)[¶](#wx.TopLevelWindow.ShowFullScreen "Permalink to this definition")
Depending on the value of *show* parameter the window is either shown full screen or restored to its normal state.


*style* is a bit list containing some or all of the following values, which indicate what elements of the window to hide in full-screen mode:


* `FULLSCREEN_NOMENUBAR`
* `FULLSCREEN_NOTOOLBAR`
* `FULLSCREEN_NOSTATUSBAR`
* `FULLSCREEN_NOBORDER`
* `FULLSCREEN_NOCAPTION`
* `FULLSCREEN_ALL` (all of the above)


This function has not been tested with MDI frames.



Parameters
* **show** (*bool*) –
* **style** (*long*) –



Return type
*bool*





Note


Showing a window full screen also actually `Show` s the window if it isn’t shown.




See also


[`EnableFullScreenView`](#wx.TopLevelWindow.EnableFullScreenView "wx.TopLevelWindow.EnableFullScreenView") , [`IsFullScreen`](#wx.TopLevelWindow.IsFullScreen "wx.TopLevelWindow.IsFullScreen")





            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    def ShowWithoutActivating(self) -> None:
        """ 

`ShowWithoutActivating`(*self*)[¶](#wx.TopLevelWindow.ShowWithoutActivating "Permalink to this definition")
Show the  [wx.TopLevelWindow](#wx-toplevelwindow), but do not give it keyboard focus.


This can be used for pop up or notification windows that should not steal the current focus.




            Source: https://docs.wxpython.org/wx.TopLevelWindow.html
        """

    DefaultItem: 'Window'  # `DefaultItem`[¶](#wx.TopLevelWindow.DefaultItem "Permalink to this definition")See [`GetDefaultItem`](#wx.TopLevelWindow.GetDefaultItem "wx.TopLevelWindow.GetDefaultItem") and [`SetDefaultItem`](#wx.TopLevelWindow.SetDefaultItem "wx.TopLevelWindow.SetDefaultItem")
    Icon: '_Icon'  # `Icon`[¶](#wx.TopLevelWindow.Icon "Permalink to this definition")See [`GetIcon`](#wx.TopLevelWindow.GetIcon "wx.TopLevelWindow.GetIcon") and [`SetIcon`](#wx.TopLevelWindow.SetIcon "wx.TopLevelWindow.SetIcon")
    MacMetalAppearance: Any  # `MacMetalAppearance`[¶](#wx.TopLevelWindow.MacMetalAppearance "Permalink to this definition")See [`MacGetMetalAppearance`](#wx.TopLevelWindow.MacGetMetalAppearance "wx.TopLevelWindow.MacGetMetalAppearance") and [`MacSetMetalAppearance`](#wx.TopLevelWindow.MacSetMetalAppearance "wx.TopLevelWindow.MacSetMetalAppearance")
    OSXModified: Any  # `OSXModified`[¶](#wx.TopLevelWindow.OSXModified "Permalink to this definition")See [`OSXIsModified`](#wx.TopLevelWindow.OSXIsModified "wx.TopLevelWindow.OSXIsModified") and [`OSXSetModified`](#wx.TopLevelWindow.OSXSetModified "wx.TopLevelWindow.OSXSetModified")
    Title: str  # `Title`[¶](#wx.TopLevelWindow.Title "Permalink to this definition")See [`GetTitle`](#wx.TopLevelWindow.GetTitle "wx.TopLevelWindow.GetTitle") and [`SetTitle`](#wx.TopLevelWindow.SetTitle "wx.TopLevelWindow.SetTitle")
    TmpDefaultItem: 'Window'  # `TmpDefaultItem`[¶](#wx.TopLevelWindow.TmpDefaultItem "Permalink to this definition")See [`GetTmpDefaultItem`](#wx.TopLevelWindow.GetTmpDefaultItem "wx.TopLevelWindow.GetTmpDefaultItem") and [`SetTmpDefaultItem`](#wx.TopLevelWindow.SetTmpDefaultItem "wx.TopLevelWindow.SetTmpDefaultItem")



class Trackable:
    """ Add-on base class for a trackable object.




        Source: https://docs.wxpython.org/wx.Trackable.html
    """


class Translations:
    """ **Possible constructors**:



```
Translations()

```


This class allows getting translations for strings.


  


        Source: https://docs.wxpython.org/wx.Translations.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.Translations.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def AddCatalog(self, domain, msgIdLanguage=LANGUAGE_ENGLISH_US) -> bool:
        """ 

`AddCatalog`(*self*, *domain*, *msgIdLanguage=LANGUAGE\_ENGLISH\_US*)[¶](#wx.Translations.AddCatalog "Permalink to this definition")
Add a catalog for use with the current locale.


By default, it is searched for in standard places (see  [wx.FileTranslationsLoader](wx.FileTranslationsLoader.html#wx-filetranslationsloader)), but you may also prepend additional directories to the search path with [`wx.FileTranslationsLoader.AddCatalogLookupPathPrefix`](wx.FileTranslationsLoader.html#wx.FileTranslationsLoader.AddCatalogLookupPathPrefix "wx.FileTranslationsLoader.AddCatalogLookupPathPrefix") .


All loaded catalogs will be used for message lookup by GetString() for the current locale.


By default, i.e. if *msgIdLanguage* is not given, `msgid` strings are assumed to be in English and written only using 7-bit `ASCII` characters. If you have to deal with non-English strings or 8-bit characters in the source code, see the instructions in [Writing Non-English Applications](writing_non_english_applications.html#writing-non-english-applications).



Parameters
* **domain** (*string*) – The catalog domain to add.
* **msgIdLanguage** ([*Language*](wx.Language.enumeration.html "Language")) – Specifies the language of “msgid” strings in source code (i.e. arguments to GetString(), [`wx.GetTranslation`](wx.functions.html#wx.GetTranslation "wx.GetTranslation") and the *wx.\_* macro). It is used if [`AddCatalog`](#wx.Translations.AddCatalog "wx.Translations.AddCatalog") cannot find any catalog for current language: if the language is same as source code language, then strings from source code are used instead.



Return type
*bool*



Returns
`True` if catalog was successfully loaded, `False` otherwise (which might mean that the catalog is not found or that it isn’t in the correct format).






            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def AddStdCatalog(self) -> bool:
        """ 

`AddStdCatalog`(*self*)[¶](#wx.Translations.AddStdCatalog "Permalink to this definition")
Add standard wxWidgets catalogs (“wxstd” and possible port-specific catalogs).



Return type
*bool*



Returns
`True` if a suitable catalog was found, `False` otherwise





See also


[`AddCatalog`](#wx.Translations.AddCatalog "wx.Translations.AddCatalog")





            Source: https://docs.wxpython.org/wx.Translations.html
        """

    @staticmethod
    def Get() -> 'Translations':
        """ 

*static* `Get`()[¶](#wx.Translations.Get "Permalink to this definition")
Returns current translations object, may return `None`.


You must either call this early in app initialization code, or let  [wx.Locale](wx.Locale.html#wx-locale) do it for you.



Return type
 [wx.Translations](#wx-translations)






            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def GetAvailableTranslations(self, domain: str) -> list[str]:
        """ 

`GetAvailableTranslations`(*self*, *domain*)[¶](#wx.Translations.GetAvailableTranslations "Permalink to this definition")
Returns list of all translations of *domain* that were found.


This method can be used e.g. to populate list of application’s translations offered to the user. To do this, pass the app’s main catalog as *domain*.



Parameters
**domain** (*string*) – 



Return type
*list of strings*





See also


[`GetBestTranslation`](#wx.Translations.GetBestTranslation "wx.Translations.GetBestTranslation")





            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def GetBestTranslation(self, *args, **kw) -> None:
        """ 

`GetBestTranslation`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Translations.GetBestTranslation "Permalink to this definition")
Returns the best UI language for the *domain*.


The language is determined from the preferred UI language or languages list the user configured in the OS. Notice that this may or may not correspond to the default `locale` as obtained from [`wx.Locale.GetSystemLanguage`](wx.Locale.html#wx.Locale.GetSystemLanguage "wx.Locale.GetSystemLanguage") ; modern operation systems (Windows Vista+, macOS) have separate language and regional (= locale) settings.



Parameters
* **domain** (*string*) – The catalog domain to look for.
* **msgIdLanguage** ([*Language*](wx.Language.enumeration.html "Language")) – Specifies the language of “msgid” strings in source code (i.e. arguments to GetString(), [`wx.GetTranslation`](wx.functions.html#wx.GetTranslation "wx.GetTranslation") and the *wx.\_* macro).



Returns
Language code if a suitable match was found, empty string otherwise.





New in version 2.9.5.



[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetBestTranslation** *(self, domain, msgIdLanguage)*



Parameters
* **domain** (*string*) – The catalog domain to look for.
* **msgIdLanguage** ([*Language*](wx.Language.enumeration.html "Language")) – Specifies the language of “msgid” strings in source code (i.e. arguments to GetString(), [`wx.GetTranslation`](wx.functions.html#wx.GetTranslation "wx.GetTranslation") and the *wx.\_* macro).



Return type
`string`






---

  



**GetBestTranslation** *(self, domain, msgIdLanguage=”en”)*



Parameters
* **domain** (*string*) – The catalog domain to look for.
* **msgIdLanguage** (*string*) – Specifies the language of “msgid” strings in source code (i.e. arguments to GetString(), [`wx.GetTranslation`](wx.functions.html#wx.GetTranslation "wx.GetTranslation") and the *wx.\_* macro).



Return type
`string`






---

  





            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def GetHeaderValue(self, header, domain="") -> str:
        """ 

`GetHeaderValue`(*self*, *header*, *domain=""*)[¶](#wx.Translations.GetHeaderValue "Permalink to this definition")
Returns the header value for header *header*.


The search for *header* is case sensitive. If a *domain* is passed, this domain is searched. Else all domains will be searched until a header has been found.


The return value is the value of the header if found. Else this will be empty.



Parameters
* **header** (*string*) –
* **domain** (*string*) –



Return type
`string`






            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def GetTranslatedString(self, *args, **kw) -> str:
        """ 

`GetTranslatedString`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Translations.GetTranslatedString "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**GetTranslatedString** *(self, origString, domain=””)*


Retrieves the translation for a string in all loaded domains unless the *domain* parameter is specified (and then only this catalog/domain is searched).


Returns `None` if translation is not available.


This function is thread-safe.



Parameters
* **origString** (*string*) –
* **domain** (*string*) –



Return type
`string`





New in version 3.0.




Note


Domains are searched in the last to first order, i.e. catalogs added later override those added before.





---

  



**GetTranslatedString** *(self, origString, n, domain=””)*


Retrieves the translation for a string in all loaded domains unless the *domain* parameter is specified (and then only this catalog/domain is searched).


Returns `None` if translation is not available.


This form is used when retrieving translation of string that has different singular and plural form in English or different plural forms in some other language.



Parameters
* **origString** (*string*) – The singular form of the string to be converted.
* **n** – The number on which the plural form choice depends on. (In some languages, there are different plural forms for e.g. n=2 and n=3 etc., in addition to the singular form (n=1) being different.)
* **domain** (*string*) – The only domain (i.e. message catalog) to search if specified. By default this parameter is empty, indicating that all loaded catalogs should be searched.



Return type
`string`




[`wx.GetTranslation`](wx.functions.html#wx.GetTranslation "wx.GetTranslation") function and *wx.\_* macro.


This function is thread-safe.



New in version 3.0.




Note


Domains are searched in the last to first order, i.e. catalogs added later override those added before.





---

  





            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def IsLoaded(self, domain: str) -> bool:
        """ 

`IsLoaded`(*self*, *domain*)[¶](#wx.Translations.IsLoaded "Permalink to this definition")
Check if the given catalog is loaded, and returns `True` if it is.


According to `GNU` gettext tradition, each catalog normally corresponds to ‘domain’ which is more or less the application name.



Parameters
**domain** (*string*) – 



Return type
*bool*





See also


[`AddCatalog`](#wx.Translations.AddCatalog "wx.Translations.AddCatalog")





            Source: https://docs.wxpython.org/wx.Translations.html
        """

    @staticmethod
    def Set(t: 'Translations') -> None:
        """ 

*static* `Set`(*t*)[¶](#wx.Translations.Set "Permalink to this definition")
Sets current translations object.


Deletes previous translation object and takes ownership of *t*.



Parameters
**t** ([*wx.Translations*](#wx.Translations "wx.Translations")) – 






            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def SetLanguage(self, *args, **kw) -> None:
        """ 

`SetLanguage`(*self*, *\*args*, *\*\*kw*)[¶](#wx.Translations.SetLanguage "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetLanguage** *(self, lang)*


Sets translations language to use.


`wx.LANGUAGE_DEFAULT` has special meaning: best suitable translation, given user’s preference and available translations, will be used.



Parameters
**lang** ([*Language*](wx.Language.enumeration.html "Language")) – 






---

  



**SetLanguage** *(self, lang)*


Sets translations language to use.


Empty *lang* string has the same meaning as `wx.LANGUAGE_DEFAULT` in [`SetLanguage`](#wx.Translations.SetLanguage "wx.Translations.SetLanguage") : best suitable translation, given user’s preference and available translations, will be used.



Parameters
**lang** (*string*) – 






---

  





            Source: https://docs.wxpython.org/wx.Translations.html
        """

    def SetLoader(self, loader: 'TranslationsLoader') -> None:
        """ 

`SetLoader`(*self*, *loader*)[¶](#wx.Translations.SetLoader "Permalink to this definition")
Changes loader use to read catalogs to a non-default one.


Deletes previous loader and takes ownership of *loader*.



Parameters
**loader** ([*wx.TranslationsLoader*](wx.TranslationsLoader.html#wx.TranslationsLoader "wx.TranslationsLoader")) – 





See also


 [wx.TranslationsLoader](wx.TranslationsLoader.html#wx-translationsloader),  [wx.FileTranslationsLoader](wx.FileTranslationsLoader.html#wx-filetranslationsloader), *ResourceTranslationsLoader*





            Source: https://docs.wxpython.org/wx.Translations.html
        """



class TreeCtrl(Control,WithImages):
    """ **Possible constructors**:



```
TreeCtrl()

TreeCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
         style=TR_DEFAULT_STYLE, validator=DefaultValidator,
         name=TreeCtrlNameStr)

```


A tree control presents information as a hierarchy, with items that
may be expanded to show further items.


  


        Source: https://docs.wxpython.org/wx.TreeCtrl.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TreeCtrl.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default Constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=TR\_DEFAULT\_STYLE, validator=DefaultValidator, name=TreeCtrlNameStr)*


Constructor, creating and showing a tree control.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. The value `ID_ANY` indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position. If `wx.DefaultPosition` is specified then a default position is chosen.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If `wx.DefaultSize` is specified then the window is sized appropriately.
* **style** (*long*) – Window style. See  [wx.TreeCtrl](#wx-treectrl).
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.





See also


[`Create`](#wx.TreeCtrl.Create "wx.TreeCtrl.Create") ,  [wx.Validator](wx.Validator.html#wx-validator)





---

  





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def AddRoot(self, text, image=-1, selImage=-1, data=None) -> 'TreeItemId':
        """ 

`AddRoot`(*self*, *text*, *image=-1*, *selImage=-1*, *data=None*)[¶](#wx.TreeCtrl.AddRoot "Permalink to this definition")
Adds the root node to the tree, returning the new item.


The *image* and *selImage* parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If *image* > -1 and *selImage* is -1, the same image is used for both selected and unselected items.



Parameters
* **text** (*string*) –
* **image** (*int*) –
* **selImage** (*int*) –
* **data** (*TreeItemData*) –



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def AppendItem(self, parent, text, image=-1, selImage=-1, data=None) -> 'TreeItemId':
        """ 

`AppendItem`(*self*, *parent*, *text*, *image=-1*, *selImage=-1*, *data=None*)[¶](#wx.TreeCtrl.AppendItem "Permalink to this definition")
Appends an item to the end of the branch identified by *parent*, return a new item id.


The *image* and *selImage* parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If *image* > -1 and *selImage* is -1, the same image is used for both selected and unselected items.



Parameters
* **parent** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **text** (*string*) –
* **image** (*int*) –
* **selImage** (*int*) –
* **data** (*TreeItemData*) –



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def AssignStateImageList(self, imageList: 'ImageList') -> None:
        """ 

`AssignStateImageList`(*self*, *imageList*)[¶](#wx.TreeCtrl.AssignStateImageList "Permalink to this definition")
Sets the state image list.


Image list assigned with this method will be automatically deleted by  [wx.TreeCtrl](#wx-treectrl) as appropriate (i.e. it takes ownership of the list).



Parameters
**imageList** ([*wx.ImageList*](wx.ImageList.html#wx.ImageList "wx.ImageList")) – 





See also


[`SetStateImageList`](#wx.TreeCtrl.SetStateImageList "wx.TreeCtrl.SetStateImageList") .





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def ClearFocusedItem(self) -> None:
        """ 

`ClearFocusedItem`(*self*)[¶](#wx.TreeCtrl.ClearFocusedItem "Permalink to this definition")
Clears the currently focused item.



New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def Collapse(self, item: 'TreeItemId') -> None:
        """ 

`Collapse`(*self*, *item*)[¶](#wx.TreeCtrl.Collapse "Permalink to this definition")
Collapses the given item.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def CollapseAll(self) -> None:
        """ 

`CollapseAll`(*self*)[¶](#wx.TreeCtrl.CollapseAll "Permalink to this definition")
Collapses the root item.



See also


[`ExpandAll`](#wx.TreeCtrl.ExpandAll "wx.TreeCtrl.ExpandAll")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def CollapseAllChildren(self, item: 'TreeItemId') -> None:
        """ 

`CollapseAllChildren`(*self*, *item*)[¶](#wx.TreeCtrl.CollapseAllChildren "Permalink to this definition")
Collapses this item and all of its children, recursively.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 





See also


[`ExpandAllChildren`](#wx.TreeCtrl.ExpandAllChildren "wx.TreeCtrl.ExpandAllChildren")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def CollapseAndReset(self, item: 'TreeItemId') -> None:
        """ 

`CollapseAndReset`(*self*, *item*)[¶](#wx.TreeCtrl.CollapseAndReset "Permalink to this definition")
Collapses the given item and removes all children.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TR_DEFAULT_STYLE, validator=DefaultValidator, name=TreeCtrlNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=TR\_DEFAULT\_STYLE*, *validator=DefaultValidator*, *name=TreeCtrlNameStr*)[¶](#wx.TreeCtrl.Create "Permalink to this definition")
Creates the tree control.


See `TreeCtrl.__init__` for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def Delete(self, item: 'TreeItemId') -> None:
        """ 

`Delete`(*self*, *item*)[¶](#wx.TreeCtrl.Delete "Permalink to this definition")
Deletes the specified item.


A `EVT_TREE_DELETE_ITEM` event will be generated.


This function may cause a subsequent call to [`GetNextChild`](#wx.TreeCtrl.GetNextChild "wx.TreeCtrl.GetNextChild") to fail.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def DeleteAllItems(self) -> None:
        """ 

`DeleteAllItems`(*self*)[¶](#wx.TreeCtrl.DeleteAllItems "Permalink to this definition")
Deletes all items in the control.


This function generates `wxEVT_TREE_DELETE_ITEM` events for each item being deleted, including the root one if it is shown, i.e. unless `wx.TR_HIDE_ROOT` style is used.




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def DeleteChildren(self, item: 'TreeItemId') -> None:
        """ 

`DeleteChildren`(*self*, *item*)[¶](#wx.TreeCtrl.DeleteChildren "Permalink to this definition")
Deletes all children of the given item (but not the item itself).


A `wxEVT_TREE_DELETE_ITEM` event will be generated for every item being deleted.


If you have called [`SetItemHasChildren`](#wx.TreeCtrl.SetItemHasChildren "wx.TreeCtrl.SetItemHasChildren") , you may need to call it again since [`DeleteChildren`](#wx.TreeCtrl.DeleteChildren "wx.TreeCtrl.DeleteChildren") does not automatically clear the setting.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def EditLabel(self, item: 'TreeItemId') -> 'TextCtrl':
        """ 

`EditLabel`(*self*, *item*)[¶](#wx.TreeCtrl.EditLabel "Permalink to this definition")
Starts editing the label of the given *item*.


This function generates a `EVT_TREE_BEGIN_LABEL_EDIT` event which can be vetoed to prevent the editing from starting.


If it does start, a text control, which can be retrieved using [`GetEditControl`](#wx.TreeCtrl.GetEditControl "wx.TreeCtrl.GetEditControl") , allowing the user to edit the label interactively is shown. In wxMSW, this text control is created using *textCtrlClass*, however this parameter is currently ignored in the other ports where a plain  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) is always used.


When the editing ends, `EVT_TREE_END_LABEL_EDIT` event is sent and this event can be vetoed as well to prevent the label from changing. Note that this event is sent both when the user accepts (e.g. by pressing Enter) or cancels (e.g. by pressing Escape) and its handler can use [`wx.TreeEvent.IsEditCancelled`](wx.TreeEvent.html#wx.TreeEvent.IsEditCancelled "wx.TreeEvent.IsEditCancelled") to distinguish between these situations.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl)





See also


[`EndEditLabel`](#wx.TreeCtrl.EndEditLabel "wx.TreeCtrl.EndEditLabel") ,  [wx.TreeEvent](wx.TreeEvent.html#wx-treeevent)





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def EnableBellOnNoMatch(self, on: bool=True) -> None:
        """ 

`EnableBellOnNoMatch`(*self*, *on=True*)[¶](#wx.TreeCtrl.EnableBellOnNoMatch "Permalink to this definition")
Enable or disable a beep if there is no match for the currently entered text when searching for the item from keyboard.


The default is to not beep in this case except in wxMSW where the beep is always generated by the native control and cannot be disabled, i.e. calls to this function do nothing there.



Parameters
**on** (*bool*) – 





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def EnableSystemTheme(self, enable: bool=True) -> None:
        """ 

`EnableSystemTheme`(*self*, *enable=True*)[¶](#wx.TreeCtrl.EnableSystemTheme "Permalink to this definition")
Can be used to disable the system theme of controls using it by default.


On Windows there an alternative theme available for the list and list-like
controls since Windows Vista. This theme is used by Windows Explorer list
and tree view and so is arguably more familiar to the users than the standard
appearance of these controls. This class automatically uses the new theme,
but if that is not desired then this method can be used to turn it off.


Please note that this method should be called before the widget is
actually created, using the 2-phase create pattern. Something like this:



```
# This creates the object, but not the window
widget = wx.TreeCtrl()

# Disable the system theme
widget.EnableSystemTheme(False)

# Now create the window
widget.Create(parent, wx.``wx.ID_ANY``)

```


This method has no effect on other platorms



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def EndEditLabel(self, item, discardChanges=False) -> None:
        """ 

`EndEditLabel`(*self*, *item*, *discardChanges=False*)[¶](#wx.TreeCtrl.EndEditLabel "Permalink to this definition")
Ends label editing.


If *cancelEdit* is `True`, the edit will be cancelled.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **discardChanges** (*bool*) –





Note


This function is currently supported under Windows only.




See also


[`EditLabel`](#wx.TreeCtrl.EditLabel "wx.TreeCtrl.EditLabel")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def EnsureVisible(self, item: 'TreeItemId') -> None:
        """ 

`EnsureVisible`(*self*, *item*)[¶](#wx.TreeCtrl.EnsureVisible "Permalink to this definition")
Scrolls and/or expands items to ensure that the given item is visible.


This method can be used, and will work, even while the window is frozen (see [`wx.Window.Freeze`](wx.Window.html#wx.Window.Freeze "wx.Window.Freeze") ).



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def Expand(self, item: 'TreeItemId') -> None:
        """ 

`Expand`(*self*, *item*)[¶](#wx.TreeCtrl.Expand "Permalink to this definition")
Expands the given item.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def ExpandAll(self) -> None:
        """ 

`ExpandAll`(*self*)[¶](#wx.TreeCtrl.ExpandAll "Permalink to this definition")
Expands all items in the tree.




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def ExpandAllChildren(self, item: 'TreeItemId') -> None:
        """ 

`ExpandAllChildren`(*self*, *item*)[¶](#wx.TreeCtrl.ExpandAllChildren "Permalink to this definition")
Expands the given item and all its children recursively.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetBoundingRect(self, item, textOnly=False) -> Any:
        """ 

`GetBoundingRect`(*self*, *item*, *textOnly=False*)[¶](#wx.TreeCtrl.GetBoundingRect "Permalink to this definition")

> Returns the rectangle bounding the item. If textOnly is `True`,
> only the rectangle around the item’s label will be returned, otherwise
> the item’s image is also taken into account. The return value may be None
> if the rectangle was not successfully retrieved, such as if the item is
> currently not visible.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetChildrenCount(self, item, recursively=True) -> int:
        """ 

`GetChildrenCount`(*self*, *item*, *recursively=True*)[¶](#wx.TreeCtrl.GetChildrenCount "Permalink to this definition")
Returns the number of items in the branch.


If *recursively* is `True`, returns the total number of descendants, otherwise only one level of children is counted.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **recursively** (*bool*) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.TreeCtrl.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetCount(self) -> int:
        """ 

`GetCount`(*self*)[¶](#wx.TreeCtrl.GetCount "Permalink to this definition")
Returns the number of items in the control.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetEditControl(self) -> 'TextCtrl':
        """ 

`GetEditControl`(*self*)[¶](#wx.TreeCtrl.GetEditControl "Permalink to this definition")
Returns the edit control being currently used to edit a label.


Returns `None` if no label is being edited.



Return type
 [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl)





Note


This is currently only implemented for wxMSW.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetFirstChild(self, item) -> tuple['TreeItemId', str]:
        """ 

`GetFirstChild`(*self*, *item*)[¶](#wx.TreeCtrl.GetFirstChild "Permalink to this definition")
Returns the first child; call [`GetNextChild`](#wx.TreeCtrl.GetNextChild "wx.TreeCtrl.GetNextChild") for the next child.


For this enumeration function you must pass in a ‘cookie’ parameter which is opaque for the application but is necessary for the library to make these functions reentrant (i.e. allow more than one enumeration on one and the same object simultaneously). The cookie passed to [`GetFirstChild`](#wx.TreeCtrl.GetFirstChild "wx.TreeCtrl.GetFirstChild") and [`GetNextChild`](#wx.TreeCtrl.GetNextChild "wx.TreeCtrl.GetNextChild") should be the same variable.


Returns an invalid tree item (i.e. [`wx.TreeItemId.IsOk`](wx.TreeItemId.html#wx.TreeItemId.IsOk "wx.TreeItemId.IsOk") returns `False`) if there are no further children.




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetFirstVisibleItem(self) -> 'TreeItemId':
        """ 

`GetFirstVisibleItem`(*self*)[¶](#wx.TreeCtrl.GetFirstVisibleItem "Permalink to this definition")
Returns the first visible item.



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetFocusedItem(self) -> 'TreeItemId':
        """ 

`GetFocusedItem`(*self*)[¶](#wx.TreeCtrl.GetFocusedItem "Permalink to this definition")
Returns the item last clicked or otherwise selected.


Unlike [`GetSelection`](#wx.TreeCtrl.GetSelection "wx.TreeCtrl.GetSelection") , it can be used whether or not the control has the `TR_MULTIPLE` style.



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetIndent(self) -> int:
        """ 

`GetIndent`(*self*)[¶](#wx.TreeCtrl.GetIndent "Permalink to this definition")
Returns the current tree control indentation.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetItemBackgroundColour(self, item: 'TreeItemId') -> 'Colour':
        """ 

`GetItemBackgroundColour`(*self*, *item*)[¶](#wx.TreeCtrl.GetItemBackgroundColour "Permalink to this definition")
Returns the background colour of the item.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetItemData(self, item) -> Any:
        """ 

`GetItemData`(*self*, *item*)[¶](#wx.TreeCtrl.GetItemData "Permalink to this definition")
Returns the tree item data associated with the item.




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetItemFont(self, item: 'TreeItemId') -> 'Font':
        """ 

`GetItemFont`(*self*, *item*)[¶](#wx.TreeCtrl.GetItemFont "Permalink to this definition")
Returns the font of the item label.


If the font hadn’t been explicitly set for the specified *item* with [`SetItemFont`](#wx.TreeCtrl.SetItemFont "wx.TreeCtrl.SetItemFont") , returns an invalid `wx.NullFont` font. `GetFont` can be used to retrieve the global tree control font used for the items without any specific font.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.Font](wx.Font.html#wx-font)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetItemImage(self, item, which=TreeItemIcon_Normal) -> int:
        """ 

`GetItemImage`(*self*, *item*, *which=TreeItemIcon\_Normal*)[¶](#wx.TreeCtrl.GetItemImage "Permalink to this definition")
Gets the specified item image.


The value of *which* may be:


* `wx.TreeItemIcon_Normal` : to get the normal item image.
* `wx.TreeItemIcon_Selected` : to get the selected item image (i.e. the image which is shown when the item is currently selected).
* `wx.TreeItemIcon_Expanded` : to get the expanded image (this only makes sense for items which have children - then this image is shown when the item is expanded and the normal image is shown when it is collapsed).
* `wx.TreeItemIcon_SelectedExpanded` : to get the selected expanded image (which is shown when an expanded item is currently selected).



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **which** ([*TreeItemIcon*](wx.TreeItemIcon.enumeration.html "TreeItemIcon")) –



Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetItemParent(self, item: 'TreeItemId') -> 'TreeItemId':
        """ 

`GetItemParent`(*self*, *item*)[¶](#wx.TreeCtrl.GetItemParent "Permalink to this definition")
Returns the item’s parent.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetItemState(self, item: 'TreeItemId') -> int:
        """ 

`GetItemState`(*self*, *item*)[¶](#wx.TreeCtrl.GetItemState "Permalink to this definition")
Gets the specified item state.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetItemText(self, item: 'TreeItemId') -> str:
        """ 

`GetItemText`(*self*, *item*)[¶](#wx.TreeCtrl.GetItemText "Permalink to this definition")
Returns the item label.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetItemTextColour(self, item: 'TreeItemId') -> 'Colour':
        """ 

`GetItemTextColour`(*self*, *item*)[¶](#wx.TreeCtrl.GetItemTextColour "Permalink to this definition")
Returns the colour of the item label.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.Colour](wx.Colour.html#wx-colour)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetLastChild(self, item: 'TreeItemId') -> 'TreeItemId':
        """ 

`GetLastChild`(*self*, *item*)[¶](#wx.TreeCtrl.GetLastChild "Permalink to this definition")
Returns the last child of the item (or an invalid tree item if this item has no children).



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)





See also


[`GetFirstChild`](#wx.TreeCtrl.GetFirstChild "wx.TreeCtrl.GetFirstChild") , [`GetNextSibling`](#wx.TreeCtrl.GetNextSibling "wx.TreeCtrl.GetNextSibling") , [`GetLastChild`](#wx.TreeCtrl.GetLastChild "wx.TreeCtrl.GetLastChild")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetNextChild(self, item, cookie) -> tuple['TreeItemId', str]:
        """ 

`GetNextChild`(*self*, *item*, *cookie*)[¶](#wx.TreeCtrl.GetNextChild "Permalink to this definition")
Returns the next child; call [`GetFirstChild`](#wx.TreeCtrl.GetFirstChild "wx.TreeCtrl.GetFirstChild") for the first child.


For this enumeration function you must pass in a ‘cookie’ parameter which is opaque for the application but is necessary for the library to make these functions reentrant (i.e. allow more than one enumeration on one and the same object simultaneously). The cookie passed to [`GetFirstChild`](#wx.TreeCtrl.GetFirstChild "wx.TreeCtrl.GetFirstChild") and [`GetNextChild`](#wx.TreeCtrl.GetNextChild "wx.TreeCtrl.GetNextChild") should be the same.


Returns an invalid tree item if there are no further children.




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetNextSibling(self, item: 'TreeItemId') -> 'TreeItemId':
        """ 

`GetNextSibling`(*self*, *item*)[¶](#wx.TreeCtrl.GetNextSibling "Permalink to this definition")
Returns the next sibling of the specified item; call [`GetPrevSibling`](#wx.TreeCtrl.GetPrevSibling "wx.TreeCtrl.GetPrevSibling") for the previous sibling.


Returns an invalid tree item if there are no further siblings.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)





See also


[`GetPrevSibling`](#wx.TreeCtrl.GetPrevSibling "wx.TreeCtrl.GetPrevSibling")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetNextVisible(self, item: 'TreeItemId') -> 'TreeItemId':
        """ 

`GetNextVisible`(*self*, *item*)[¶](#wx.TreeCtrl.GetNextVisible "Permalink to this definition")
Returns the next visible item or an invalid item if this item is the last visible one.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)





Note


The *item* itself must be visible.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetPrevSibling(self, item: 'TreeItemId') -> 'TreeItemId':
        """ 

`GetPrevSibling`(*self*, *item*)[¶](#wx.TreeCtrl.GetPrevSibling "Permalink to this definition")
Returns the previous sibling of the specified item; call [`GetNextSibling`](#wx.TreeCtrl.GetNextSibling "wx.TreeCtrl.GetNextSibling") for the next sibling.


Returns an invalid tree item if there are no further children.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)





See also


[`GetNextSibling`](#wx.TreeCtrl.GetNextSibling "wx.TreeCtrl.GetNextSibling")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetPrevVisible(self, item: 'TreeItemId') -> 'TreeItemId':
        """ 

`GetPrevVisible`(*self*, *item*)[¶](#wx.TreeCtrl.GetPrevVisible "Permalink to this definition")
Returns the previous visible item or an invalid item if this item is the first visible one.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)





Note


The *item* itself must be visible.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetQuickBestSize(self) -> bool:
        """ 

`GetQuickBestSize`(*self*)[¶](#wx.TreeCtrl.GetQuickBestSize "Permalink to this definition")
Returns `True` if the control will use a quick calculation for the best size, looking only at the first and last items.


The default is `False`.



Return type
*bool*





See also


[`SetQuickBestSize`](#wx.TreeCtrl.SetQuickBestSize "wx.TreeCtrl.SetQuickBestSize")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetRootItem(self) -> 'TreeItemId':
        """ 

`GetRootItem`(*self*)[¶](#wx.TreeCtrl.GetRootItem "Permalink to this definition")
Returns the root item for the tree control.



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetSelection(self) -> 'TreeItemId':
        """ 

`GetSelection`(*self*)[¶](#wx.TreeCtrl.GetSelection "Permalink to this definition")
Returns the selection, or an invalid item if there is no selection.


This function only works with the controls without `TR_MULTIPLE` style, use [`GetSelections`](#wx.TreeCtrl.GetSelections "wx.TreeCtrl.GetSelections") for the controls which do have this style or, if a single item is wanted, use [`GetFocusedItem`](#wx.TreeCtrl.GetFocusedItem "wx.TreeCtrl.GetFocusedItem") .



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetSelections(self) -> Any:
        """ 

`GetSelections`(*self*)[¶](#wx.TreeCtrl.GetSelections "Permalink to this definition")
Returns a list of currently selected items in the tree. This function can be called only if the control has the wx.``wx.TR\_MULTIPLE`` style.



Return type
*PyObject*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetSpacing(self) -> int:
        """ 

`GetSpacing`(*self*)[¶](#wx.TreeCtrl.GetSpacing "Permalink to this definition")
Returns the current tree control spacing.


This is the number of horizontal pixels between the buttons and the state images.



Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def GetStateImageList(self) -> 'ImageList':
        """ 

`GetStateImageList`(*self*)[¶](#wx.TreeCtrl.GetStateImageList "Permalink to this definition")
Returns the state image list (from which application-defined state images are taken).



Return type
 [wx.ImageList](wx.ImageList.html#wx-imagelist)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def HitTest(self, point: Union['Point', tuple[int, int]], flags: Optional[int] = None) -> tuple['TreeItemId', int]:
        """ 

`HitTest`(*self*, *point*, *flags*)[¶](#wx.TreeCtrl.HitTest "Permalink to this definition")
Calculates which (if any) item is under the given *point*, returning the tree item id at this point plus extra information *flags*.


*flags* is a bitlist of the following:


* `TREE_HITTEST_ABOVE:` Above the client area.
* `TREE_HITTEST_BELOW:` Below the client area.
* `TREE_HITTEST_NOWHERE:` In the client area but below the last item.
* `TREE_HITTEST_ONITEMBUTTON:` On the button associated with an item.
* `TREE_HITTEST_ONITEMICON:` On the bitmap associated with an item.
* `TREE_HITTEST_ONITEMINDENT:` In the indentation associated with an item.
* `TREE_HITTEST_ONITEMLABEL:` On the label (string) associated with an item.
* `TREE_HITTEST_ONITEMRIGHT:` In the area to the right of an item.
* `TREE_HITTEST_ONITEMSTATEICON:` On the state icon for a tree view item that is in a user-defined state.
* `TREE_HITTEST_TOLEFT:` To the right of the client area.
* `TREE_HITTEST_TORIGHT:` To the left of the client area.




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def InsertItem(self, *args, **kw) -> 'TreeItemId':
        """ 

`InsertItem`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TreeCtrl.InsertItem "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**InsertItem** *(self, parent, previous, text, image=-1, selImage=-1, data=None)*


Inserts an item after a given one (*previous*).


The *image* and *selImage* parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If *image* > -1 and *selImage* is -1, the same image is used for both selected and unselected items.



Parameters
* **parent** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **previous** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **text** (*string*) –
* **image** (*int*) –
* **selImage** (*int*) –
* **data** (*TreeItemData*) –



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






---

  



**InsertItem** *(self, parent, pos, text, image=-1, selImage=-1, data=None)*


Inserts an item before one identified by its position (*pos*).


*pos* must be less than or equal to the number of children.


The *image* and *selImage* parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If *image* > -1 and *selImage* is -1, the same image is used for both selected and unselected items.



Parameters
* **parent** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **pos** (*int*) –
* **text** (*string*) –
* **image** (*int*) –
* **selImage** (*int*) –
* **data** (*TreeItemData*) –



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






---

  





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def IsBold(self, item: 'TreeItemId') -> bool:
        """ 

`IsBold`(*self*, *item*)[¶](#wx.TreeCtrl.IsBold "Permalink to this definition")
Returns `True` if the given item is in bold state.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
*bool*





See also


[`SetItemBold`](#wx.TreeCtrl.SetItemBold "wx.TreeCtrl.SetItemBold")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.TreeCtrl.IsEmpty "Permalink to this definition")
Returns `True` if the control is empty (i.e. has no items, even no root one).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def IsExpanded(self, item: 'TreeItemId') -> bool:
        """ 

`IsExpanded`(*self*, *item*)[¶](#wx.TreeCtrl.IsExpanded "Permalink to this definition")
Returns `True` if the item is expanded (only makes sense if it has children).



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def IsSelected(self, item: 'TreeItemId') -> bool:
        """ 

`IsSelected`(*self*, *item*)[¶](#wx.TreeCtrl.IsSelected "Permalink to this definition")
Returns `True` if the item is selected.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def IsVisible(self, item: 'TreeItemId') -> bool:
        """ 

`IsVisible`(*self*, *item*)[¶](#wx.TreeCtrl.IsVisible "Permalink to this definition")
Returns `True` if the item is visible on the screen.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def ItemHasChildren(self, item: 'TreeItemId') -> bool:
        """ 

`ItemHasChildren`(*self*, *item*)[¶](#wx.TreeCtrl.ItemHasChildren "Permalink to this definition")
Returns `True` if the item has children.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def OnCompareItems(self, item1, item2) -> int:
        """ 

`OnCompareItems`(*self*, *item1*, *item2*)[¶](#wx.TreeCtrl.OnCompareItems "Permalink to this definition")
Override this function in the derived class to change the sort order of the items in the tree control.


The function should return a negative, zero or positive value if the first item is less than, equal to or greater than the second one.


Please note that you **must** use `RTTI` macros `DECLARE_DYNAMIC_CLASS` and `IMPLEMENT_DYNAMIC_CLASS` if you override this function because otherwise the base class considers that it is not overridden and uses the default comparison, i.e. sorts the items alphabetically, which allows it optimize away the calls to the virtual function completely.



Parameters
* **item1** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **item2** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –



Return type
*int*





See also


[`SortChildren`](#wx.TreeCtrl.SortChildren "wx.TreeCtrl.SortChildren")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def PrependItem(self, parent, text, image=-1, selImage=-1, data=None) -> 'TreeItemId':
        """ 

`PrependItem`(*self*, *parent*, *text*, *image=-1*, *selImage=-1*, *data=None*)[¶](#wx.TreeCtrl.PrependItem "Permalink to this definition")
Appends an item as the first child of *parent*, return a new item id.


The *image* and *selImage* parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If *image* > -1 and *selImage* is -1, the same image is used for both selected and unselected items.



Parameters
* **parent** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **text** (*string*) –
* **image** (*int*) –
* **selImage** (*int*) –
* **data** (*TreeItemData*) –



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def ScrollTo(self, item: 'TreeItemId') -> None:
        """ 

`ScrollTo`(*self*, *item*)[¶](#wx.TreeCtrl.ScrollTo "Permalink to this definition")
Scrolls the specified item into view.


Note that this method doesn’t work while the window is frozen (See [`wx.Window.Freeze`](wx.Window.html#wx.Window.Freeze "wx.Window.Freeze") ), at least under MSW.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 





See also


[`EnsureVisible`](#wx.TreeCtrl.EnsureVisible "wx.TreeCtrl.EnsureVisible")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SelectChildren(self, parent: 'TreeItemId') -> None:
        """ 

`SelectChildren`(*self*, *parent*)[¶](#wx.TreeCtrl.SelectChildren "Permalink to this definition")
Select all the immediate children of the given parent.


This function can be used with multiselection controls only.



Parameters
**parent** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SelectItem(self, item, select=True) -> None:
        """ 

`SelectItem`(*self*, *item*, *select=True*)[¶](#wx.TreeCtrl.SelectItem "Permalink to this definition")
Selects the given item.


In multiple selection controls, can be also used to deselect a currently selected item if the value of `select` is `False`.


Notice that calling this method will generate `wxEVT_TREE_SEL_CHANGING` and `wxEVT_TREE_SEL_CHANGED` events and that the change could be vetoed by the former event handler.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **select** (*bool*) –






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetFocusedItem(self, item: 'TreeItemId') -> None:
        """ 

`SetFocusedItem`(*self*, *item*)[¶](#wx.TreeCtrl.SetFocusedItem "Permalink to this definition")
Sets the currently focused item.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – The item to make the current one. It must be valid.





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetIndent(self, indent: int) -> None:
        """ 

`SetIndent`(*self*, *indent*)[¶](#wx.TreeCtrl.SetIndent "Permalink to this definition")
Sets the indentation for the tree control.



Parameters
**indent** (*int*) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemBackgroundColour(self, item, col) -> None:
        """ 

`SetItemBackgroundColour`(*self*, *item*, *col*)[¶](#wx.TreeCtrl.SetItemBackgroundColour "Permalink to this definition")
Sets the colour of the item’s background.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemBold(self, item, bold=True) -> None:
        """ 

`SetItemBold`(*self*, *item*, *bold=True*)[¶](#wx.TreeCtrl.SetItemBold "Permalink to this definition")
Makes item appear in bold font if *bold* parameter is `True` or resets it to the normal state.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **bold** (*bool*) –





See also


[`IsBold`](#wx.TreeCtrl.IsBold "wx.TreeCtrl.IsBold")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemData(self, item, data) -> None:
        """ 

`SetItemData`(*self*, *item*, *data*)[¶](#wx.TreeCtrl.SetItemData "Permalink to this definition")
Sets the item client data.


Notice that the client data previously associated with the *item* (if any) is *not* freed by this function and so calling this function multiple times for the same item will result in memory leaks unless you delete the old item data pointer yourself.




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemDropHighlight(self, item, highlight=True) -> None:
        """ 

`SetItemDropHighlight`(*self*, *item*, *highlight=True*)[¶](#wx.TreeCtrl.SetItemDropHighlight "Permalink to this definition")
Gives the item the visual feedback for Drag’n’Drop actions, which is useful if something is dragged from the outside onto the tree control (as opposed to a DnD operation within the tree control, which already is implemented internally).



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **highlight** (*bool*) –






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemFont(self, item, font) -> None:
        """ 

`SetItemFont`(*self*, *item*, *font*)[¶](#wx.TreeCtrl.SetItemFont "Permalink to this definition")
Sets the item’s font.


All items in the tree should have the same height to avoid text clipping, so the fonts height should be the same for all of them, although font attributes may vary.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) –





See also


[`SetItemBold`](#wx.TreeCtrl.SetItemBold "wx.TreeCtrl.SetItemBold")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemHasChildren(self, item, hasChildren=True) -> None:
        """ 

`SetItemHasChildren`(*self*, *item*, *hasChildren=True*)[¶](#wx.TreeCtrl.SetItemHasChildren "Permalink to this definition")
Force appearance of the button next to the item.


This is useful to allow the user to expand the items which don’t have any children now, but instead adding them only when needed, thus minimizing memory usage and loading time.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **hasChildren** (*bool*) –






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemImage(self, item, image, which=TreeItemIcon_Normal) -> None:
        """ 

`SetItemImage`(*self*, *item*, *image*, *which=TreeItemIcon\_Normal*)[¶](#wx.TreeCtrl.SetItemImage "Permalink to this definition")
Sets the specified item’s image.


See [`GetItemImage`](#wx.TreeCtrl.GetItemImage "wx.TreeCtrl.GetItemImage") for the description of the *which* parameter.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **image** (*int*) –
* **which** ([*TreeItemIcon*](wx.TreeItemIcon.enumeration.html "TreeItemIcon")) –






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemState(self, item, state) -> None:
        """ 

`SetItemState`(*self*, *item*, *state*)[¶](#wx.TreeCtrl.SetItemState "Permalink to this definition")
Sets the specified item state.


The value of *state* may be an index into the state image list, or one of the special values:


* `TREE_ITEMSTATE_NONE:` to disable the item state (the state image will be not displayed).
* `TREE_ITEMSTATE_NEXT:` to set the next item state.
* `TREE_ITEMSTATE_PREV:` to set the previous item state.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **state** (*int*) –






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemText(self, item, text) -> None:
        """ 

`SetItemText`(*self*, *item*, *text*)[¶](#wx.TreeCtrl.SetItemText "Permalink to this definition")
Sets the item label.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **text** (*string*) –






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetItemTextColour(self, item, col) -> None:
        """ 

`SetItemTextColour`(*self*, *item*, *col*)[¶](#wx.TreeCtrl.SetItemTextColour "Permalink to this definition")
Sets the colour of the item’s text.



Parameters
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –
* **col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) –






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetQuickBestSize(self, quickBestSize: bool) -> None:
        """ 

`SetQuickBestSize`(*self*, *quickBestSize*)[¶](#wx.TreeCtrl.SetQuickBestSize "Permalink to this definition")
If `True` is passed, specifies that the control will use a quick calculation for the best size, looking only at the first and last items.


Otherwise, it will look at all items. The default is `False`.



Parameters
**quickBestSize** (*bool*) – 





See also


[`GetQuickBestSize`](#wx.TreeCtrl.GetQuickBestSize "wx.TreeCtrl.GetQuickBestSize")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetSpacing(self, spacing: int) -> None:
        """ 

`SetSpacing`(*self*, *spacing*)[¶](#wx.TreeCtrl.SetSpacing "Permalink to this definition")
Sets the spacing for the tree control.


Spacing is the number of horizontal pixels between the buttons and the state images. This has no effect under wxMSW.



Parameters
**spacing** (*int*) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetStateImageList(self, imageList: 'ImageList') -> None:
        """ 

`SetStateImageList`(*self*, *imageList*)[¶](#wx.TreeCtrl.SetStateImageList "Permalink to this definition")
Sets the state image list (from which application-defined state images are taken).


Image list assigned with this method will **not** be deleted by  [wx.TreeCtrl](#wx-treectrl)’s destructor, you must delete it yourself.



Parameters
**imageList** ([*wx.ImageList*](wx.ImageList.html#wx.ImageList "wx.ImageList")) – 





See also


[`AssignStateImageList`](#wx.TreeCtrl.AssignStateImageList "wx.TreeCtrl.AssignStateImageList") .





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SetWindowStyle(self, styles: int) -> None:
        """ 

`SetWindowStyle`(*self*, *styles*)[¶](#wx.TreeCtrl.SetWindowStyle "Permalink to this definition")
Sets the mode flags associated with the display of the tree control.


The new mode takes effect immediately.



Parameters
**styles** (*long*) – 





Note


Generic only; MSW ignores changes.





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def SortChildren(self, item: 'TreeItemId') -> None:
        """ 

`SortChildren`(*self*, *item*)[¶](#wx.TreeCtrl.SortChildren "Permalink to this definition")
Sorts the children of the given item using [`OnCompareItems`](#wx.TreeCtrl.OnCompareItems "wx.TreeCtrl.OnCompareItems") .


You should override that method to change the sort order (the default is ascending case-sensitive alphabetical order).



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 





See also


*TreeItemData* , [`OnCompareItems`](#wx.TreeCtrl.OnCompareItems "wx.TreeCtrl.OnCompareItems")





            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def Toggle(self, item: 'TreeItemId') -> None:
        """ 

`Toggle`(*self*, *item*)[¶](#wx.TreeCtrl.Toggle "Permalink to this definition")
Toggles the given item between collapsed and expanded states.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def ToggleItemSelection(self, item: 'TreeItemId') -> None:
        """ 

`ToggleItemSelection`(*self*, *item*)[¶](#wx.TreeCtrl.ToggleItemSelection "Permalink to this definition")
Toggles the given item between selected and unselected states.


For multiselection controls only.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def Unselect(self) -> None:
        """ 

`Unselect`(*self*)[¶](#wx.TreeCtrl.Unselect "Permalink to this definition")
Removes the selection from the currently selected item (if any).




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def UnselectAll(self) -> None:
        """ 

`UnselectAll`(*self*)[¶](#wx.TreeCtrl.UnselectAll "Permalink to this definition")
This function either behaves the same as [`Unselect`](#wx.TreeCtrl.Unselect "wx.TreeCtrl.Unselect") if the control doesn’t have `TR_MULTIPLE` style, or removes the selection from all items if it does have this style.




            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    def UnselectItem(self, item: 'TreeItemId') -> None:
        """ 

`UnselectItem`(*self*, *item*)[¶](#wx.TreeCtrl.UnselectItem "Permalink to this definition")
Unselects the given item.


This works in multiselection controls only.



Parameters
**item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) – 






            Source: https://docs.wxpython.org/wx.TreeCtrl.html
        """

    BoundingRect: Any  # `BoundingRect`[¶](#wx.TreeCtrl.BoundingRect "Permalink to this definition")See [`GetBoundingRect`](#wx.TreeCtrl.GetBoundingRect "wx.TreeCtrl.GetBoundingRect")
    Count: int  # `Count`[¶](#wx.TreeCtrl.Count "Permalink to this definition")See [`GetCount`](#wx.TreeCtrl.GetCount "wx.TreeCtrl.GetCount")
    EditControl: 'TextCtrl'  # `EditControl`[¶](#wx.TreeCtrl.EditControl "Permalink to this definition")See [`GetEditControl`](#wx.TreeCtrl.GetEditControl "wx.TreeCtrl.GetEditControl")
    FirstVisibleItem: 'TreeItemId'  # `FirstVisibleItem`[¶](#wx.TreeCtrl.FirstVisibleItem "Permalink to this definition")See [`GetFirstVisibleItem`](#wx.TreeCtrl.GetFirstVisibleItem "wx.TreeCtrl.GetFirstVisibleItem")
    FocusedItem: 'TreeItemId'  # `FocusedItem`[¶](#wx.TreeCtrl.FocusedItem "Permalink to this definition")See [`GetFocusedItem`](#wx.TreeCtrl.GetFocusedItem "wx.TreeCtrl.GetFocusedItem") and [`SetFocusedItem`](#wx.TreeCtrl.SetFocusedItem "wx.TreeCtrl.SetFocusedItem")
    Indent: int  # `Indent`[¶](#wx.TreeCtrl.Indent "Permalink to this definition")See [`GetIndent`](#wx.TreeCtrl.GetIndent "wx.TreeCtrl.GetIndent") and [`SetIndent`](#wx.TreeCtrl.SetIndent "wx.TreeCtrl.SetIndent")
    QuickBestSize: bool  # `QuickBestSize`[¶](#wx.TreeCtrl.QuickBestSize "Permalink to this definition")See [`GetQuickBestSize`](#wx.TreeCtrl.GetQuickBestSize "wx.TreeCtrl.GetQuickBestSize") and [`SetQuickBestSize`](#wx.TreeCtrl.SetQuickBestSize "wx.TreeCtrl.SetQuickBestSize")
    RootItem: 'TreeItemId'  # `RootItem`[¶](#wx.TreeCtrl.RootItem "Permalink to this definition")See [`GetRootItem`](#wx.TreeCtrl.GetRootItem "wx.TreeCtrl.GetRootItem")
    Selection: 'TreeItemId'  # `Selection`[¶](#wx.TreeCtrl.Selection "Permalink to this definition")See [`GetSelection`](#wx.TreeCtrl.GetSelection "wx.TreeCtrl.GetSelection")
    Selections: Any  # `Selections`[¶](#wx.TreeCtrl.Selections "Permalink to this definition")See [`GetSelections`](#wx.TreeCtrl.GetSelections "wx.TreeCtrl.GetSelections")
    Spacing: int  # `Spacing`[¶](#wx.TreeCtrl.Spacing "Permalink to this definition")See [`GetSpacing`](#wx.TreeCtrl.GetSpacing "wx.TreeCtrl.GetSpacing") and [`SetSpacing`](#wx.TreeCtrl.SetSpacing "wx.TreeCtrl.SetSpacing")
    StateImageList: 'ImageList'  # `StateImageList`[¶](#wx.TreeCtrl.StateImageList "Permalink to this definition")See [`GetStateImageList`](#wx.TreeCtrl.GetStateImageList "wx.TreeCtrl.GetStateImageList") and [`SetStateImageList`](#wx.TreeCtrl.SetStateImageList "wx.TreeCtrl.SetStateImageList")



TR_EDIT_LABELS: int  # Use this style if you wish the user to be able to edit labels in the tree control.

TR_NO_BUTTONS: int  # For convenience to document that no buttons are to be drawn.

TR_HAS_BUTTONS: int  # Use this style to show + and - buttons to the left of parent items.

TR_TWIST_BUTTONS: int  # Selects alternative style of  +/ -   buttons  and shows rotating (“twisting”) arrows instead. Currently this style is only implemented under Microsoft Windows Vista and later Windows versions and is ignored under the other platforms as enabling it is equivalent to using  SystemThemedControl.EnableSystemTheme .

TR_NO_LINES: int  # Use this style to hide vertical level connectors.

TR_FULL_ROW_HIGHLIGHT: int  # Use this style to have the background colour and the selection highlight extend over the entire horizontal row of the tree control window. (This flag is ignored under Windows unless you specify  TR_NO_LINES   as well.)

TR_LINES_AT_ROOT: int  # Use this style to show lines leading to the root nodes (unless no  TR_NO_LINES   is also used, in which case no lines are shown). Note that in the MSW version, if this style is omitted, not only the lines, but also the button used for expanding the root item is not shown, which can be unexpected, so it is recommended to always use it.

TR_HIDE_ROOT: int  # Use this style to suppress the display of the root node, effectively causing the first-level nodes to appear as a series of root nodes.

TR_ROW_LINES: int  # Use this style to draw a contrasting border between displayed rows.

TR_HAS_VARIABLE_ROW_HEIGHT: int  # Use this style to cause row heights to be just big enough to fit the content. If not set, all rows use the largest row height. The default is that this flag is unset. Generic only.

TR_SINGLE: int  # For convenience to document that only one item may be selected at a time. Selecting another item causes the current selection, if any, to be deselected. This is the default.

TR_MULTIPLE: int  # Use this style to allow a range of items to be selected. If a second range is selected, the current range, if any, is deselected.

TR_DEFAULT_STYLE: int  # The set of flags that are closest to the defaults for the native control for a particular toolkit. ^^

EVT_TREE_BEGIN_DRAG: int  # Begin dragging with the left mouse button. If you want to enable left-dragging you need to intercept this event and explicitly call wx.TreeEvent.Allow , as it’s vetoed by default. Processes a  wxEVT_TREE_BEGIN_DRAG   event type.

EVT_TREE_BEGIN_RDRAG: int  # Begin dragging with the right mouse button. If you want to enable right-dragging you need to intercept this event and explicitly call wx.TreeEvent.Allow , as it’s vetoed by default. Processes a  wxEVT_TREE_BEGIN_RDRAG   event type.

EVT_TREE_END_DRAG: int  # End dragging with the left or right mouse button. Processes a  wxEVT_TREE_END_DRAG   event type.

EVT_TREE_BEGIN_LABEL_EDIT: int  # Begin editing a label. This can be prevented by calling Veto(). Processes a  wxEVT_TREE_BEGIN_LABEL_EDIT   event type.

EVT_TREE_END_LABEL_EDIT: int  # Finish editing a label. This can be prevented by calling Veto(). Processes a  wxEVT_TREE_END_LABEL_EDIT   event type.

EVT_TREE_DELETE_ITEM: int  # An item was deleted. Processes a  wxEVT_TREE_DELETE_ITEM   event type.

EVT_TREE_GET_INFO: int  # Request information from the application. Processes a  wxEVT_TREE_GET_INFO   event type.

EVT_TREE_SET_INFO: int  # Information is being supplied. Processes a  wxEVT_TREE_SET_INFO   event type.

EVT_TREE_ITEM_ACTIVATED: int  # The item has been activated, i.e. chosen by double clicking it with mouse or from keyboard. Processes a  wxEVT_TREE_ITEM_ACTIVATED   event type.

EVT_TREE_ITEM_COLLAPSED: int  # The item has been collapsed. Processes a  wxEVT_TREE_ITEM_COLLAPSED   event type.

EVT_TREE_ITEM_COLLAPSING: int  # The item is being collapsed. This can be prevented by calling Veto(). Processes a  wxEVT_TREE_ITEM_COLLAPSING   event type.

EVT_TREE_ITEM_EXPANDED: int  # The item has been expanded. Processes a  wxEVT_TREE_ITEM_EXPANDED   event type.

EVT_TREE_ITEM_EXPANDING: int  # The item is being expanded. This can be prevented by calling Veto(). Processes a  wxEVT_TREE_ITEM_EXPANDING   event type.

EVT_TREE_ITEM_RIGHT_CLICK: int  # The user has clicked the item with the right mouse button. Processes a  wxEVT_TREE_ITEM_RIGHT_CLICK   event type.

EVT_TREE_ITEM_MIDDLE_CLICK: int  # The user has clicked the item with the middle mouse button. This is only supported by the generic control. Processes a  wxEVT_TREE_ITEM_MIDDLE_CLICK   event type.

EVT_TREE_SEL_CHANGED: int  # Selection has changed. Processes a  wxEVT_TREE_SEL_CHANGED   event type.

EVT_TREE_SEL_CHANGING: int  # Selection is changing. This can be prevented by calling Veto(). Processes a  wxEVT_TREE_SEL_CHANGING   event type.

EVT_TREE_KEY_DOWN: int  # A key has been pressed. Processes a  wxEVT_TREE_KEY_DOWN   event type.

EVT_TREE_ITEM_GETTOOLTIP: int  # The opportunity to set the item tooltip is being given to the application (call wx.TreeEvent.SetToolTip ). Windows only. Processes a  wxEVT_TREE_ITEM_GETTOOLTIP   event type.

EVT_TREE_ITEM_MENU: int  # The context menu for the selected item has been requested, either by a right click or by using the menu key. Notice that these events always carry a valid tree item and so are not generated when (right) clicking outside of the items area. If you need to handle such events, consider using  wxEVT_CONTEXT_MENU   instead. Processes a   wxEVT_TREE_ITEM_MENU   event type.

EVT_TREE_STATE_IMAGE_CLICK: int  # The state image has been clicked. Processes a  wxEVT_TREE_STATE_IMAGE_CLICK   event type. ^^

_KeyEvent: TypeAlias = KeyEvent

class TreeEvent(NotifyEvent):
    """ **Possible constructors**:



```
TreeEvent(commandType, tree, item=TreeItemId())

```


A tree event holds information about events associated with TreeCtrl
objects.


  


        Source: https://docs.wxpython.org/wx.TreeEvent.html
    """
    def __init__(*args, **kwargs) -> None:
        """ 

`__init__`(*self*, *commandType*, *tree*, *item=TreeItemId()*)[¶](#wx.TreeEvent.__init__ "Permalink to this definition")
Constructor, used by wxWidgets itself only.



Parameters
* **commandType** (*wx.EventType*) –
* **tree** ([*wx.TreeCtrl*](wx.TreeCtrl.html#wx.TreeCtrl "wx.TreeCtrl")) –
* **item** ([*wx.TreeItemId*](wx.TreeItemId.html#wx.TreeItemId "wx.TreeItemId")) –






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    def GetItem(self) -> 'TreeItemId':
        """ 

`GetItem`(*self*)[¶](#wx.TreeEvent.GetItem "Permalink to this definition")
Returns the item.


Note that the item may be invalid for wxEVT\_TREE\_SEL\_CHANGED events when the previously selected item has been deselected and there is no new selection any longer, as it notably happens when deleting all tree control items.



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    def GetKeyCode(self) -> int:
        """ 

`GetKeyCode`(*self*)[¶](#wx.TreeEvent.GetKeyCode "Permalink to this definition")
Returns the key code if the event is a key event.


Use [`GetKeyEvent`](#wx.TreeEvent.GetKeyEvent "wx.TreeEvent.GetKeyEvent") to get the values of the modifier keys for this event (i.e. Shift or Ctrl).



Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    def GetKeyEvent(self) -> 'KeyEvent':
        """ 

`GetKeyEvent`(*self*)[¶](#wx.TreeEvent.GetKeyEvent "Permalink to this definition")
Returns the key event for `EVT_TREE_KEY_DOWN` events.



Return type
 [wx.KeyEvent](wx.KeyEvent.html#wx-keyevent)






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    def GetLabel(self) -> str:
        """ 

`GetLabel`(*self*)[¶](#wx.TreeEvent.GetLabel "Permalink to this definition")
Returns the label if the event is a begin or end edit label event.



Return type
`string`






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    def GetOldItem(self) -> 'TreeItemId':
        """ 

`GetOldItem`(*self*)[¶](#wx.TreeEvent.GetOldItem "Permalink to this definition")
Returns the old item index (valid for `EVT_TREE_SEL_CHANGING` and `EVT_TREE_SEL_CHANGED` events).



Return type
 [wx.TreeItemId](wx.TreeItemId.html#wx-treeitemid)






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    def GetPoint(self) -> 'Point':
        """ 

`GetPoint`(*self*)[¶](#wx.TreeEvent.GetPoint "Permalink to this definition")
Returns the position of the mouse pointer if the event is a drag or menu-context event.


In both cases the position is in client coordinates - i.e. relative to the  [wx.TreeCtrl](wx.TreeCtrl.html#wx-treectrl) window (so that you can pass it directly to e.g. [`wx.Window.PopupMenu`](wx.Window.html#wx.Window.PopupMenu "wx.Window.PopupMenu") ).



Return type
 [wx.Point](wx.Point.html#wx-point)






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    def IsEditCancelled(self) -> bool:
        """ 

`IsEditCancelled`(*self*)[¶](#wx.TreeEvent.IsEditCancelled "Permalink to this definition")
Returns `True` if the label edit was cancelled.


This should be called from within an `EVT_TREE_END_LABEL_EDIT` handler.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    def SetToolTip(self, tooltip: str) -> None:
        """ 

`SetToolTip`(*self*, *tooltip*)[¶](#wx.TreeEvent.SetToolTip "Permalink to this definition")
Set the tooltip for the item (valid for `EVT_TREE_ITEM_GETTOOLTIP` events).


Windows only.



Parameters
**tooltip** (*string*) – 






            Source: https://docs.wxpython.org/wx.TreeEvent.html
        """

    Item: 'TreeItemId'  # `Item`[¶](#wx.TreeEvent.Item "Permalink to this definition")See [`GetItem`](#wx.TreeEvent.GetItem "wx.TreeEvent.GetItem")
    KeyCode: int  # `KeyCode`[¶](#wx.TreeEvent.KeyCode "Permalink to this definition")See [`GetKeyCode`](#wx.TreeEvent.GetKeyCode "wx.TreeEvent.GetKeyCode")
    KeyEvent: '_KeyEvent'  # `KeyEvent`[¶](#wx.TreeEvent.KeyEvent "Permalink to this definition")See [`GetKeyEvent`](#wx.TreeEvent.GetKeyEvent "wx.TreeEvent.GetKeyEvent")
    Label: str  # `Label`[¶](#wx.TreeEvent.Label "Permalink to this definition")See [`GetLabel`](#wx.TreeEvent.GetLabel "wx.TreeEvent.GetLabel")
    OldItem: 'TreeItemId'  # `OldItem`[¶](#wx.TreeEvent.OldItem "Permalink to this definition")See [`GetOldItem`](#wx.TreeEvent.GetOldItem "wx.TreeEvent.GetOldItem")
    Point: '_Point'  # `Point`[¶](#wx.TreeEvent.Point "Permalink to this definition")See [`GetPoint`](#wx.TreeEvent.GetPoint "wx.TreeEvent.GetPoint")



class TreeItemId:
    """ **Possible constructors**:



```
TreeItemId()

TreeItemId(pItem)

```


An opaque reference to a tree item.


  


        Source: https://docs.wxpython.org/wx.TreeItemId.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.TreeItemId.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.


A  [wx.TreeItemId](#wx-treeitemid) is not meant to be constructed explicitly by the user; only those returned by the  [wx.TreeCtrl](wx.TreeCtrl.html#wx-treectrl) functions should be used.




---

  



**\_\_init\_\_** *(self, pItem)*



Parameters
**pItem** (*void*) – 






---

  





            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    def GetID(self) -> None:
        """ 

`GetID`(*self*)[¶](#wx.TreeItemId.GetID "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.TreeItemId.IsOk "Permalink to this definition")
Returns `True` if this instance is referencing a valid tree item.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    def Unset(self) -> None:
        """ 

`Unset`(*self*)[¶](#wx.TreeItemId.Unset "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.TreeItemId.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*, *other*)[¶](#wx.TreeItemId.__eq__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    def __hash__(self) -> None:
        """ 

`__hash__`(*self*)[¶](#wx.TreeItemId.__hash__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*, *other*)[¶](#wx.TreeItemId.__ne__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.TreeItemId.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.TreeItemId.html
        """

    ID: None  # `ID`[¶](#wx.TreeItemId.ID "Permalink to this definition")See [`GetID`](#wx.TreeItemId.GetID "wx.TreeItemId.GetID")



class TwoFingerTapEvent(GestureEvent):
    """ **Possible constructors**:



```
TwoFingerTapEvent(windid=0)

```


This event is generated when two fingers touch the surface at the same
time.


  


        Source: https://docs.wxpython.org/wx.TwoFingerTapEvent.html
    """
    def __init__(self, windid: int=0) -> None:
        """ 

`__init__`(*self*, *windid=0*)[¶](#wx.TwoFingerTapEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**windid** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.TwoFingerTapEvent.html
        """



EVT_TWO_FINGER_TAP: int  # Process a  wxEVT_TWO_FINGER_TAP . ^^

class UIActionSimulator:
    """ **Possible constructors**:



```
UIActionSimulator()

```


UIActionSimulator is a class used to simulate user interface actions
such as a mouse click or a key press.


  


        Source: https://docs.wxpython.org/wx.UIActionSimulator.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.UIActionSimulator.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def Char(self, keycode, modifiers=MOD_NONE) -> bool:
        """ 

`Char`(*self*, *keycode*, *modifiers=MOD\_NONE*)[¶](#wx.UIActionSimulator.Char "Permalink to this definition")
Press and release a key.



Parameters
* **keycode** (*int*) – Key to operate on, as an integer. It is interpreted as a KeyCode.
* **modifiers** (*int*) – A combination of  [wx.KeyModifier](wx.KeyModifier.enumeration.html#wx-keymodifier) flags to be pressed with the given keycode.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def KeyDown(self, keycode, modifiers=MOD_NONE) -> bool:
        """ 

`KeyDown`(*self*, *keycode*, *modifiers=MOD\_NONE*)[¶](#wx.UIActionSimulator.KeyDown "Permalink to this definition")
Press a key.


If you are using modifiers then it needs to be paired with an identical KeyUp or the modifiers will not be released (MSW and macOS).



Parameters
* **keycode** (*int*) – Key to operate on, as an integer. It is interpreted as a KeyCode.
* **modifiers** (*int*) – A combination of  [wx.KeyModifier](wx.KeyModifier.enumeration.html#wx-keymodifier) flags to be pressed with the given keycode.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def KeyUp(self, keycode, modifiers=MOD_NONE) -> bool:
        """ 

`KeyUp`(*self*, *keycode*, *modifiers=MOD\_NONE*)[¶](#wx.UIActionSimulator.KeyUp "Permalink to this definition")
Release a key.



Parameters
* **keycode** (*int*) – Key to operate on, as an integer. It is interpreted as a KeyCode.
* **modifiers** (*int*) – A combination of  [wx.KeyModifier](wx.KeyModifier.enumeration.html#wx-keymodifier) flags to be pressed with the given keycode.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def MouseClick(self, button: int=MOUSE_BTN_LEFT) -> bool:
        """ 

`MouseClick`(*self*, *button=MOUSE\_BTN\_LEFT*)[¶](#wx.UIActionSimulator.MouseClick "Permalink to this definition")
Click a mouse button.



Parameters
**button** (*int*) – Button to press. See [`wx.UIActionSimulator.MouseDown`](#wx.UIActionSimulator.MouseDown "wx.UIActionSimulator.MouseDown") for a list of valid constants.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def MouseDblClick(self, button: int=MOUSE_BTN_LEFT) -> bool:
        """ 

`MouseDblClick`(*self*, *button=MOUSE\_BTN\_LEFT*)[¶](#wx.UIActionSimulator.MouseDblClick "Permalink to this definition")
Double-click a mouse button.



Parameters
**button** (*int*) – Button to press. See [`wx.UIActionSimulator.MouseDown`](#wx.UIActionSimulator.MouseDown "wx.UIActionSimulator.MouseDown") for a list of valid constants.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def MouseDown(self, button: int=MOUSE_BTN_LEFT) -> bool:
        """ 

`MouseDown`(*self*, *button=MOUSE\_BTN\_LEFT*)[¶](#wx.UIActionSimulator.MouseDown "Permalink to this definition")
Press a mouse button.



Parameters
**button** (*int*) – Button to press. Valid constants are `MOUSE_BTN_LEFT` , `MOUSE_BTN_MIDDLE` , and `MOUSE_BTN_RIGHT` .



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def MouseDragDrop(self, x1, y1, x2, y2, button=MOUSE_BTN_LEFT) -> bool:
        """ 

`MouseDragDrop`(*self*, *x1*, *y1*, *x2*, *y2*, *button=MOUSE\_BTN\_LEFT*)[¶](#wx.UIActionSimulator.MouseDragDrop "Permalink to this definition")
Perform a drag and drop operation.



Parameters
* **x1** (*long*) – x start coordinate, in screen coordinates.
* **y1** (*long*) – y start coordinate, in screen coordinates.
* **x2** (*long*) – x destination coordinate, in screen coordinates.
* **y2** (*long*) – y destination coordinate, in screen coordinates.
* **button** (*int*) – Button to press. See [`wx.UIActionSimulator.MouseDown`](#wx.UIActionSimulator.MouseDown "wx.UIActionSimulator.MouseDown") for a list of valid constants.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def MouseMove(self, *args, **kw) -> bool:
        """ 

`MouseMove`(*self*, *\*args*, *\*\*kw*)[¶](#wx.UIActionSimulator.MouseMove "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**MouseMove** *(self, x, y)*


Move the mouse to the specified coordinates.



Parameters
* **x** (*long*) – x coordinate to move to, in screen coordinates.
* **y** (*long*) – y coordinate to move to, in screen coordinates.



Return type
*bool*






---

  



**MouseMove** *(self, point)*


Move the mouse to the specified coordinates.



Parameters
**point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Point to move to, in screen coordinates.



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def MouseUp(self, button: int=MOUSE_BTN_LEFT) -> bool:
        """ 

`MouseUp`(*self*, *button=MOUSE\_BTN\_LEFT*)[¶](#wx.UIActionSimulator.MouseUp "Permalink to this definition")
Release a mouse button.



Parameters
**button** (*int*) – Button to press. See [`wx.UIActionSimulator.MouseDown`](#wx.UIActionSimulator.MouseDown "wx.UIActionSimulator.MouseDown") for a list of valid constants.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def Select(self, text: str) -> bool:
        """ 

`Select`(*self*, *text*)[¶](#wx.UIActionSimulator.Select "Permalink to this definition")
Simulate selection of an item with the given text.


This method selects an item in the currently focused  [wx.Choice](wx.Choice.html#wx-choice),  [wx.ComboBox](wx.ComboBox.html#wx-combobox),  [wx.ListBox](wx.ListBox.html#wx-listbox) and similar controls. It does it by simulating keyboard events, so the behaviour should be the same as if the item was really selected by the user.


Notice that the implementation of this method uses [`wx.Yield`](wx.functions.html#wx.Yield "wx.Yield") and so events can be dispatched from it.



Parameters
**text** (*string*) – The text of the item to select.



Return type
*bool*



Returns
`True` if the item *text* was successfully selected or `False` if the currently focused window is not one of the controls allowing item selection or if the item with the given text was not found in it.





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """

    def Text(self, text: int) -> bool:
        """ 

`Text`(*self*, *text*)[¶](#wx.UIActionSimulator.Text "Permalink to this definition")
Emulate typing in the keys representing the given string.


Currently only the `ASCII` letters are universally supported. Digits and punctuation characters can be used with the standard `QWERTY` (`US`) keyboard layout but may not work with other layouts.



Parameters
**text** (*int*) – The string, containing only `US` `ASCII` characters, to type.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UIActionSimulator.html
        """



class UniChar:
    """ **Possible constructors**:



```
UniChar(c)

UniChar(c)

```


This class represents a single Unicode character.


  


        Source: https://docs.wxpython.org/wx.UniChar.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.UniChar.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, c)*



Parameters
**c** (*long*) – 






---

  



**\_\_init\_\_** *(self, c)*



Parameters
**c** (*long*) – 






---

  





            Source: https://docs.wxpython.org/wx.UniChar.html
        """

    def GetAsChar(self, c: int) -> bool:
        """ 

`GetAsChar`(*self*, *c*)[¶](#wx.UniChar.GetAsChar "Permalink to this definition")
Returns `True` if the character is representable as a single byte in the current locale encoding.


This function only returns `True` if the character can be converted in exactly one byte, e.g. it only returns `True` for 7 bit `ASCII` characters when the encoding used is `UTF-8`.


It is mostly useful to test if the character can be passed to functions taking a int and is used by wxWidgets itself for this purpose.



Parameters
**c** (*int*) – An output pointer to the value of this Unicode character as a `char` . Must be not `None`.



Return type
*bool*



Returns
`True` if the object is an 8 bit int and *c* was filled with its value as int or `False` otherwise (*c* won’t be modified then).





New in version 2.9.1.




See also


[`IsAscii`](#wx.UniChar.IsAscii "wx.UniChar.IsAscii")





            Source: https://docs.wxpython.org/wx.UniChar.html
        """

    def GetValue(self) -> 'value_type':
        """ 

`GetValue`(*self*)[¶](#wx.UniChar.GetValue "Permalink to this definition")
Returns Unicode code point value of the character.



Return type
*value\_type*






            Source: https://docs.wxpython.org/wx.UniChar.html
        """

    def HighSurrogate(self, *args, **kw) -> 'Uint16':
        """ 

`HighSurrogate`(*self*, *\*args*, *\*\*kw*)[¶](#wx.UniChar.HighSurrogate "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**HighSurrogate** *(self)*


Returns the high surrogate code unit for the supplementary character.



Return type
*wx.Uint16*





New in version 4.1/wxWidgets-3.1.1.




Precondition
[`IsSupplementary`](#wx.UniChar.IsSupplementary "wx.UniChar.IsSupplementary")






---

  



**HighSurrogate** *(value)*


Returns the high surrogate code unit for the supplementary character.



Parameters
**value** (*wx.int*) – The Unicode code point of the character.



Return type
*wx.Uint16*





New in version 4.1/wxWidgets-3.1.1.




Precondition
[`IsSupplementary`](#wx.UniChar.IsSupplementary "wx.UniChar.IsSupplementary")






---

  





            Source: https://docs.wxpython.org/wx.UniChar.html
        """

    def IsAscii(self) -> bool:
        """ 

`IsAscii`(*self*)[¶](#wx.UniChar.IsAscii "Permalink to this definition")
Returns `True` if the character is an `ASCII` character (i.e. if its value is less than 128).



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UniChar.html
        """

    def IsBMP(self, *args, **kw) -> bool:
        """ 

`IsBMP`(*self*, *\*args*, *\*\*kw*)[¶](#wx.UniChar.IsBMP "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**IsBMP** *(self)*


Returns `True` if the character is a `BMP` character (i.e. if its value is less than 0x10000).



Return type
*bool*





New in version 4.1/wxWidgets-3.1.1.





---

  



**IsBMP** *(value)*


Returns `True` if the character is a `BMP` character (i.e. if its value is less than 0x10000).



Parameters
**value** (*wx.int*) – The Unicode code point of the character.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.1.





---

  





            Source: https://docs.wxpython.org/wx.UniChar.html
        """

    def IsSupplementary(self, *args, **kw) -> bool:
        """ 

`IsSupplementary`(*self*, *\*args*, *\*\*kw*)[¶](#wx.UniChar.IsSupplementary "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**IsSupplementary** *(self)*


Returns `True` if the character is a supplementary character (i.e. between 0x10000 and 0x10FFFF).



Return type
*bool*





New in version 4.1/wxWidgets-3.1.1.





---

  



**IsSupplementary** *(value)*


Returns `True` if the character is a supplementary character (i.e. between 0x10000 and 0x10FFFF).



Parameters
**value** (*wx.int*) – The Unicode code point of the character.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.1.





---

  





            Source: https://docs.wxpython.org/wx.UniChar.html
        """

    def LowSurrogate(self, *args, **kw) -> 'Uint16':
        """ 

`LowSurrogate`(*self*, *\*args*, *\*\*kw*)[¶](#wx.UniChar.LowSurrogate "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**LowSurrogate** *(self)*


Returns the low surrogate code unit for the supplementary character.



Return type
*wx.Uint16*





New in version 4.1/wxWidgets-3.1.1.




Precondition
[`IsSupplementary`](#wx.UniChar.IsSupplementary "wx.UniChar.IsSupplementary")






---

  



**LowSurrogate** *(value)*


Returns the low surrogate code unit for the supplementary character.



Parameters
**value** (*wx.int*) – The Unicode code point of the character.



Return type
*wx.Uint16*





New in version 4.1/wxWidgets-3.1.1.




Precondition
[`IsSupplementary`](#wx.UniChar.IsSupplementary "wx.UniChar.IsSupplementary")






---

  





            Source: https://docs.wxpython.org/wx.UniChar.html
        """

    Value: 'value_type'  # `Value`[¶](#wx.UniChar.Value "Permalink to this definition")See [`GetValue`](#wx.UniChar.GetValue "wx.UniChar.GetValue")



class UpdateUIEvent(CommandEvent):
    """ **Possible constructors**:



```
UpdateUIEvent(commandId=0)

```


This class is used for pseudo-events which are called by wxWidgets to
give an application the chance to update various user interface
elements.


  


        Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
    """
    def __init__(self, commandId: int=0) -> None:
        """ 

`__init__`(*self*, *commandId=0*)[¶](#wx.UpdateUIEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**commandId** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    @staticmethod
    def CanUpdate(window: 'Window') -> bool:
        """ 

*static* `CanUpdate`(*window*)[¶](#wx.UpdateUIEvent.CanUpdate "Permalink to this definition")
Returns `True` if it is appropriate to update (send UI update events to) this window.


This function looks at the mode used (see [`wx.UpdateUIEvent.SetMode`](#wx.UpdateUIEvent.SetMode "wx.UpdateUIEvent.SetMode") ), the `wx.WS_EX_PROCESS_UI_UPDATES` flag in *window*, the time update events were last sent in idle time, and the update interval, to determine whether events should be sent to this window now. By default this will always return `True` because the update mode is initially `wx.UPDATE_UI_PROCESS_ALL` and the interval is set to 0; so update events will be sent as often as possible. You can reduce the frequency that events are sent by changing the mode and/or setting an update interval.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
*bool*





See also


[`ResetUpdateTime`](#wx.UpdateUIEvent.ResetUpdateTime "wx.UpdateUIEvent.ResetUpdateTime") , [`SetUpdateInterval`](#wx.UpdateUIEvent.SetUpdateInterval "wx.UpdateUIEvent.SetUpdateInterval") , [`SetMode`](#wx.UpdateUIEvent.SetMode "wx.UpdateUIEvent.SetMode")





            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def Check(self, check: bool) -> None:
        """ 

`Check`(*self*, *check*)[¶](#wx.UpdateUIEvent.Check "Permalink to this definition")
Check or uncheck the UI element.



Parameters
**check** (*bool*) – 






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def Enable(self, enable: bool) -> None:
        """ 

`Enable`(*self*, *enable*)[¶](#wx.UpdateUIEvent.Enable "Permalink to this definition")
Enable or disable the UI element.



Parameters
**enable** (*bool*) – 






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def GetChecked(self) -> bool:
        """ 

`GetChecked`(*self*)[¶](#wx.UpdateUIEvent.GetChecked "Permalink to this definition")
Returns `True` if the UI element should be checked.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def GetEnabled(self) -> bool:
        """ 

`GetEnabled`(*self*)[¶](#wx.UpdateUIEvent.GetEnabled "Permalink to this definition")
Returns `True` if the UI element should be enabled.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    @staticmethod
    def GetMode() -> 'UpdateUIMode':
        """ 

*static* `GetMode`()[¶](#wx.UpdateUIEvent.GetMode "Permalink to this definition")
Static function returning a value specifying how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.



Return type
 [wx.UpdateUIMode](wx.UpdateUIMode.enumeration.html#wx-updateuimode)





See also


[`SetMode`](#wx.UpdateUIEvent.SetMode "wx.UpdateUIEvent.SetMode")





            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def GetSetChecked(self) -> bool:
        """ 

`GetSetChecked`(*self*)[¶](#wx.UpdateUIEvent.GetSetChecked "Permalink to this definition")
Returns `True` if the application has called [`Check`](#wx.UpdateUIEvent.Check "wx.UpdateUIEvent.Check") .


For wxWidgets internal use only.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def GetSetEnabled(self) -> bool:
        """ 

`GetSetEnabled`(*self*)[¶](#wx.UpdateUIEvent.GetSetEnabled "Permalink to this definition")
Returns `True` if the application has called [`Enable`](#wx.UpdateUIEvent.Enable "wx.UpdateUIEvent.Enable") .


For wxWidgets internal use only.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def GetSetShown(self) -> bool:
        """ 

`GetSetShown`(*self*)[¶](#wx.UpdateUIEvent.GetSetShown "Permalink to this definition")
Returns `True` if the application has called [`Show`](#wx.UpdateUIEvent.Show "wx.UpdateUIEvent.Show") .


For wxWidgets internal use only.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def GetSetText(self) -> bool:
        """ 

`GetSetText`(*self*)[¶](#wx.UpdateUIEvent.GetSetText "Permalink to this definition")
Returns `True` if the application has called [`SetText`](#wx.UpdateUIEvent.SetText "wx.UpdateUIEvent.SetText") .


For wxWidgets internal use only.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def GetShown(self) -> bool:
        """ 

`GetShown`(*self*)[¶](#wx.UpdateUIEvent.GetShown "Permalink to this definition")
Returns `True` if the UI element should be shown.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def GetText(self) -> str:
        """ 

`GetText`(*self*)[¶](#wx.UpdateUIEvent.GetText "Permalink to this definition")
Returns the text that should be set for the UI element.



Return type
`string`






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    @staticmethod
    def GetUpdateInterval() -> int:
        """ 

*static* `GetUpdateInterval`()[¶](#wx.UpdateUIEvent.GetUpdateInterval "Permalink to this definition")
Returns the current interval between updates in milliseconds.


The value -1 disables updates, 0 updates as frequently as possible.



Return type
*long*





See also


[`SetUpdateInterval`](#wx.UpdateUIEvent.SetUpdateInterval "wx.UpdateUIEvent.SetUpdateInterval") .





            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def IsCheckable(self) -> bool:
        """ 

`IsCheckable`(*self*)[¶](#wx.UpdateUIEvent.IsCheckable "Permalink to this definition")
Returns `True` if the UI element can be checked.


For the event handlers that can be used for multiple items, not all of which can be checked, this method can be useful to determine whether to call [`Check`](#wx.UpdateUIEvent.Check "wx.UpdateUIEvent.Check") on the event object or not, i.e. the main use case for this method is:



```
def OnUpdateUI(self, event):
    ....
    if event.IsCheckable()
        event.Check(...some condition...)

```



Return type
*bool*





New in version 4.1/wxWidgets-3.1.5.





            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    @staticmethod
    def ResetUpdateTime() -> None:
        """ 

*static* `ResetUpdateTime`()[¶](#wx.UpdateUIEvent.ResetUpdateTime "Permalink to this definition")
Used internally to reset the last-updated time to the current time.


It is assumed that update events are normally sent in idle time, so this is called at the end of idle processing.



See also


[`CanUpdate`](#wx.UpdateUIEvent.CanUpdate "wx.UpdateUIEvent.CanUpdate") , [`SetUpdateInterval`](#wx.UpdateUIEvent.SetUpdateInterval "wx.UpdateUIEvent.SetUpdateInterval") , [`SetMode`](#wx.UpdateUIEvent.SetMode "wx.UpdateUIEvent.SetMode")





            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    @staticmethod
    def SetMode(mode: UpdateUIMode) -> None:
        """ 

*static* `SetMode`(*mode*)[¶](#wx.UpdateUIEvent.SetMode "Permalink to this definition")
Specify how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.



Parameters
**mode** ([*UpdateUIMode*](wx.UpdateUIMode.enumeration.html "UpdateUIMode")) – this parameter may be one of the  [wx.UpdateUIMode](wx.UpdateUIMode.enumeration.html#wx-updateuimode) enumeration values. The default mode is `wx.UPDATE_UI_PROCESS_ALL`.






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def SetText(self, text: str) -> None:
        """ 

`SetText`(*self*, *text*)[¶](#wx.UpdateUIEvent.SetText "Permalink to this definition")
Sets the text for this UI element.



Parameters
**text** (*string*) – 






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    @staticmethod
    def SetUpdateInterval(updateInterval: int) -> None:
        """ 

*static* `SetUpdateInterval`(*updateInterval*)[¶](#wx.UpdateUIEvent.SetUpdateInterval "Permalink to this definition")
Sets the interval between updates in milliseconds.


Set to -1 to disable updates, or to 0 to update as frequently as possible. The default is 0.


Use this to reduce the overhead of UI update events if your application has a lot of windows. If you set the value to -1 or greater than 0, you may also need to call [`wx.Window.UpdateWindowUI`](wx.Window.html#wx.Window.UpdateWindowUI "wx.Window.UpdateWindowUI") at appropriate points in your application, such as when a dialog is about to be shown.



Parameters
**updateInterval** (*long*) – 






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    def Show(self, show: bool) -> None:
        """ 

`Show`(*self*, *show*)[¶](#wx.UpdateUIEvent.Show "Permalink to this definition")
Show or hide the UI element.



Parameters
**show** (*bool*) – 






            Source: https://docs.wxpython.org/wx.UpdateUIEvent.html
        """

    Checked: bool  # `Checked`[¶](#wx.UpdateUIEvent.Checked "Permalink to this definition")See [`GetChecked`](#wx.UpdateUIEvent.GetChecked "wx.UpdateUIEvent.GetChecked") and [`Check`](#wx.UpdateUIEvent.Check "wx.UpdateUIEvent.Check")
    Enabled: bool  # `Enabled`[¶](#wx.UpdateUIEvent.Enabled "Permalink to this definition")See [`GetEnabled`](#wx.UpdateUIEvent.GetEnabled "wx.UpdateUIEvent.GetEnabled") and [`Enable`](#wx.UpdateUIEvent.Enable "wx.UpdateUIEvent.Enable")
    Shown: bool  # `Shown`[¶](#wx.UpdateUIEvent.Shown "Permalink to this definition")See [`GetShown`](#wx.UpdateUIEvent.GetShown "wx.UpdateUIEvent.GetShown") and [`Show`](#wx.UpdateUIEvent.Show "wx.UpdateUIEvent.Show")
    Text: str  # `Text`[¶](#wx.UpdateUIEvent.Text "Permalink to this definition")See [`GetText`](#wx.UpdateUIEvent.GetText "wx.UpdateUIEvent.GetText") and [`SetText`](#wx.UpdateUIEvent.SetText "wx.UpdateUIEvent.SetText")



EVT_UPDATE_UI: int  # Process a  wxEVT_UPDATE_UI   event for the command with the given id.

EVT_UPDATE_UI_RANGE: int  # Process a  wxEVT_UPDATE_UI   event for any command with id included in the given range. ^^

UPDATE_UI_PROCESS_SPECIFIED: int

UPDATE_UI_PROCESS_ALL: int

class URLDataObject(DataObject):
    """ **Possible constructors**:



```
URLDataObject(url="")

```


URLDataObject is a DataObject containing an URL and can be used
e.g.


  


        Source: https://docs.wxpython.org/wx.URLDataObject.html
    """
    def __init__(self, url: str="") -> None:
        """ 

`__init__`(*self*, *url=""*)[¶](#wx.URLDataObject.__init__ "Permalink to this definition")
Constructor, may be used to initialize the URL.


If *url* is empty, [`SetURL`](#wx.URLDataObject.SetURL "wx.URLDataObject.SetURL") can be used later.



Parameters
**url** (*string*) – 






            Source: https://docs.wxpython.org/wx.URLDataObject.html
        """

    def GetAllFormats(self, dir=DataObject.Get) -> None:
        """ 

`GetAllFormats`(*self*, *dir=DataObject.Get*)[¶](#wx.URLDataObject.GetAllFormats "Permalink to this definition")
Returns a list of wx.DataFormat objects which this data object
supports transferring in the given direction.




            Source: https://docs.wxpython.org/wx.URLDataObject.html
        """

    def GetURL(self) -> str:
        """ 

`GetURL`(*self*)[¶](#wx.URLDataObject.GetURL "Permalink to this definition")
Returns the URL stored by this object, as a string.



Return type
`string`






            Source: https://docs.wxpython.org/wx.URLDataObject.html
        """

    def SetData(self, format, buf) -> bool:
        """ 

`SetData`(*self*, *format*, *buf*)[¶](#wx.URLDataObject.SetData "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.URLDataObject.html
        """

    def SetURL(self, url: str) -> None:
        """ 

`SetURL`(*self*, *url*)[¶](#wx.URLDataObject.SetURL "Permalink to this definition")
Sets the URL stored by this object.



Parameters
**url** (*string*) – 






            Source: https://docs.wxpython.org/wx.URLDataObject.html
        """

    AllFormats: None  # `AllFormats`[¶](#wx.URLDataObject.AllFormats "Permalink to this definition")See [`GetAllFormats`](#wx.URLDataObject.GetAllFormats "wx.URLDataObject.GetAllFormats")
    URL: str  # `URL`[¶](#wx.URLDataObject.URL "Permalink to this definition")See [`GetURL`](#wx.URLDataObject.GetURL "wx.URLDataObject.GetURL") and [`SetURL`](#wx.URLDataObject.SetURL "wx.URLDataObject.SetURL")



class Validator(EvtHandler):
    """ **Possible constructors**:



```
Validator()

```


Validator is the base class for a family of validator classes that
mediate between a class of control, and application data.


  


        Source: https://docs.wxpython.org/wx.Validator.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.Validator.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.Validator.html
        """

    def Clone(self) -> 'Window':
        """ 

`Clone`(*self*)[¶](#wx.Validator.Clone "Permalink to this definition")
All validator classes must implement the [`Clone`](#wx.Validator.Clone "wx.Validator.Clone") function, which returns an identical copy of itself.


This is because validators are passed to control constructors as references which must be copied. Unlike objects such as pens and brushes, it does not make sense to have a reference counting scheme to do this cloning because all validators should have separate data.



Return type
 [wx.Object](wx.Object.html#wx-object)



Returns
This base function returns `None`.






            Source: https://docs.wxpython.org/wx.Validator.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.Validator.GetWindow "Permalink to this definition")
Returns the window associated with the validator.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.Validator.html
        """

    @staticmethod
    def IsSilent() -> bool:
        """ 

*static* `IsSilent`()[¶](#wx.Validator.IsSilent "Permalink to this definition")
Returns if the error sound is currently disabled.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.Validator.html
        """

    def SetWindow(self, window: 'Window') -> None:
        """ 

`SetWindow`(*self*, *window*)[¶](#wx.Validator.SetWindow "Permalink to this definition")
Associates a window with the validator.


This function is automatically called by wxWidgets when creating a Window-derived class instance which takes a  [wx.Validator](#wx-validator) reference. Since wxWidgets 3.1.1, it can be overridden in custom validators in order to perform any one-time initialization or checks of the window when the validator is associated with it.


E.g.



```
wx.TextCtrl(self, wx.ID_ANY, u'', wx.DefaultPosition, wx.DefaultSize, 0,
            validator=MyValidator())

```


will automatically link the *TextValidator* instance with the  [wx.TextCtrl](wx.TextCtrl.html#wx-textctrl) instance and call [`SetWindow`](#wx.Validator.SetWindow "wx.Validator.SetWindow") method on the *TextValidator* object.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.Validator.html
        """

    @staticmethod
    def SuppressBellOnError(suppress: bool=True) -> None:
        """ 

*static* `SuppressBellOnError`(*suppress=True*)[¶](#wx.Validator.SuppressBellOnError "Permalink to this definition")
This functions switches on or turns off the error sound produced by the validators if an invalid key is pressed.



Parameters
**suppress** (*bool*) – If `True`, error sound is not played when a validator detects an error. If `False`, error sound is enabled.





New in version 2.9.1.





            Source: https://docs.wxpython.org/wx.Validator.html
        """

    def TransferFromWindow(self) -> bool:
        """ 

`TransferFromWindow`(*self*)[¶](#wx.Validator.TransferFromWindow "Permalink to this definition")
This overridable function is called when the value in the window must be transferred to the validator.



Return type
*bool*



Returns
`False` if there is a problem.






            Source: https://docs.wxpython.org/wx.Validator.html
        """

    def TransferToWindow(self) -> bool:
        """ 

`TransferToWindow`(*self*)[¶](#wx.Validator.TransferToWindow "Permalink to this definition")
This overridable function is called when the value associated with the validator must be transferred to the window.



Return type
*bool*



Returns
`False` if there is a problem.






            Source: https://docs.wxpython.org/wx.Validator.html
        """

    def Validate(self, parent: 'Window') -> bool:
        """ 

`Validate`(*self*, *parent*)[¶](#wx.Validator.Validate "Permalink to this definition")
This overridable function is called when the value in the associated window must be validated.



Parameters
**parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent of the window associated with the validator.



Return type
*bool*



Returns
`False` if the value in the window is not valid; you may pop up an error dialog.






            Source: https://docs.wxpython.org/wx.Validator.html
        """

    Window: '_Window'  # `Window`[¶](#wx.Validator.Window "Permalink to this definition")See [`GetWindow`](#wx.Validator.GetWindow "wx.Validator.GetWindow") and [`SetWindow`](#wx.Validator.SetWindow "wx.Validator.SetWindow")



class VarHScrollHelper(VarScrollHelperBase):
    """ **Possible constructors**:



```
VarHScrollHelper(winToScroll)

```


This class provides functions wrapping the VarScrollHelperBase
class, targeted for horizontal-specific scrolling.


  


        Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
    """
    def __init__(self, winToScroll: 'Window') -> None:
        """ 

`__init__`(*self*, *winToScroll*)[¶](#wx.VarHScrollHelper.__init__ "Permalink to this definition")
Constructor taking the target window to be scrolled by this helper class.


This will attach scroll event handlers to the target window to catch and handle scroll events appropriately.



Parameters
**winToScroll** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def EstimateTotalWidth(self) -> 'Coord':
        """ 

`EstimateTotalWidth`(*self*)[¶](#wx.VarHScrollHelper.EstimateTotalWidth "Permalink to this definition")
This class forwards calls from [`EstimateTotalSize`](wx.VarScrollHelperBase.html#wx.VarScrollHelperBase.EstimateTotalSize "wx.VarScrollHelperBase.EstimateTotalSize") to this function so derived classes can override either just the height or the width estimation, or just estimate both differently if desired in any  [wx.HVScrolledWindow](wx.HVScrolledWindow.html#wx-hvscrolledwindow) derived class.



Return type
*wx.Coord*





Note


This function will not be called if [`EstimateTotalSize`](wx.VarScrollHelperBase.html#wx.VarScrollHelperBase.EstimateTotalSize "wx.VarScrollHelperBase.EstimateTotalSize") is overridden in your derived class.





            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def GetColumnCount(self) -> int:
        """ 

`GetColumnCount`(*self*)[¶](#wx.VarHScrollHelper.GetColumnCount "Permalink to this definition")
Returns the number of columns the target window contains.



Return type
*int*





See also


[`SetColumnCount`](#wx.VarHScrollHelper.SetColumnCount "wx.VarHScrollHelper.SetColumnCount")





            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def GetVisibleColumnsBegin(self) -> int:
        """ 

`GetVisibleColumnsBegin`(*self*)[¶](#wx.VarHScrollHelper.GetVisibleColumnsBegin "Permalink to this definition")
Returns the index of the first visible column based on the scroll position.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def GetVisibleColumnsEnd(self) -> int:
        """ 

`GetVisibleColumnsEnd`(*self*)[¶](#wx.VarHScrollHelper.GetVisibleColumnsEnd "Permalink to this definition")
Returns the index of the last visible column based on the scroll position.


This includes the last column even if it is only partially visible.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def IsColumnVisible(self, column: int) -> bool:
        """ 

`IsColumnVisible`(*self*, *column*)[¶](#wx.VarHScrollHelper.IsColumnVisible "Permalink to this definition")
Returns `True` if the given column is currently visible (even if only partially visible) or `False` otherwise.



Parameters
**column** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def OnGetColumnWidth(self, column: int) -> 'Coord':
        """ 

`OnGetColumnWidth`(*self*, *column*)[¶](#wx.VarHScrollHelper.OnGetColumnWidth "Permalink to this definition")
This function must be overridden in the derived class, and should return the width of the given column in pixels.



Parameters
**column** (*int*) – 



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def OnGetColumnsWidthHint(self, columnMin, columnMax) -> None:
        """ 

`OnGetColumnsWidthHint`(*self*, *columnMin*, *columnMax*)[¶](#wx.VarHScrollHelper.OnGetColumnsWidthHint "Permalink to this definition")
This function doesn’t have to be overridden but it may be useful to do so if calculating the columns’ sizes is a relatively expensive operation as it gives your code a chance to calculate several of them at once and cache the result if necessary.


[`OnGetColumnsWidthHint`](#wx.VarHScrollHelper.OnGetColumnsWidthHint "wx.VarHScrollHelper.OnGetColumnsWidthHint") is normally called just before [`OnGetColumnWidth`](#wx.VarHScrollHelper.OnGetColumnWidth "wx.VarHScrollHelper.OnGetColumnWidth") but you shouldn’t rely on the latter being called for all columns in the interval specified here. It is also possible that [`OnGetColumnWidth`](#wx.VarHScrollHelper.OnGetColumnWidth "wx.VarHScrollHelper.OnGetColumnWidth") will be called for units outside of this interval, so this is really just a hint, not a promise.


Finally, note that *columnMin* is inclusive, while *columnMax* is exclusive.



Parameters
* **columnMin** (*int*) –
* **columnMax** (*int*) –






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def RefreshColumn(self, column: int) -> None:
        """ 

`RefreshColumn`(*self*, *column*)[¶](#wx.VarHScrollHelper.RefreshColumn "Permalink to this definition")
Triggers a refresh for just the given column’s area of the window if it’s visible.



Parameters
**column** (*int*) – 






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def RefreshColumns(self, from_, to_) -> None:
        """ 

`RefreshColumns`(*self*, *from\_*, *to\_*)[¶](#wx.VarHScrollHelper.RefreshColumns "Permalink to this definition")
Triggers a refresh for the area between the specified range of columns given (inclusively).



Parameters
* **from\_** (*int*) –
* **to\_** (*int*) –






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def ScrollColumnPages(self, pages: int) -> bool:
        """ 

`ScrollColumnPages`(*self*, *pages*)[¶](#wx.VarHScrollHelper.ScrollColumnPages "Permalink to this definition")
Scroll by the specified number of pages which may be positive (to scroll right) or negative (to scroll left).



Parameters
**pages** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def ScrollColumns(self, columns: int) -> bool:
        """ 

`ScrollColumns`(*self*, *columns*)[¶](#wx.VarHScrollHelper.ScrollColumns "Permalink to this definition")
Scroll by the specified number of columns which may be positive (to scroll right) or negative (to scroll left).



Parameters
**columns** (*int*) – 



Return type
*bool*



Returns
`True` if the window was scrolled, `False` otherwise (for example, if we’re trying to scroll right but we are already showing the last column).






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def ScrollToColumn(self, column: int) -> bool:
        """ 

`ScrollToColumn`(*self*, *column*)[¶](#wx.VarHScrollHelper.ScrollToColumn "Permalink to this definition")
Scroll to the specified column.


It will become the first visible column in the window.



Parameters
**column** (*int*) – 



Return type
*bool*



Returns
`True` if we scrolled the window, `False` if nothing was done.






            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    def SetColumnCount(self, columnCount: int) -> None:
        """ 

`SetColumnCount`(*self*, *columnCount*)[¶](#wx.VarHScrollHelper.SetColumnCount "Permalink to this definition")
Set the number of columns the window contains.


The derived class must provide the widths for all columns with indices up to the one given here in it’s [`OnGetColumnWidth`](#wx.VarHScrollHelper.OnGetColumnWidth "wx.VarHScrollHelper.OnGetColumnWidth") implementation.



Parameters
**columnCount** (*int*) – 





See also


[`GetColumnCount`](#wx.VarHScrollHelper.GetColumnCount "wx.VarHScrollHelper.GetColumnCount")





            Source: https://docs.wxpython.org/wx.VarHScrollHelper.html
        """

    ColumnCount: int  # `ColumnCount`[¶](#wx.VarHScrollHelper.ColumnCount "Permalink to this definition")See [`GetColumnCount`](#wx.VarHScrollHelper.GetColumnCount "wx.VarHScrollHelper.GetColumnCount") and [`SetColumnCount`](#wx.VarHScrollHelper.SetColumnCount "wx.VarHScrollHelper.SetColumnCount")
    VisibleColumnsBegin: int  # `VisibleColumnsBegin`[¶](#wx.VarHScrollHelper.VisibleColumnsBegin "Permalink to this definition")See [`GetVisibleColumnsBegin`](#wx.VarHScrollHelper.GetVisibleColumnsBegin "wx.VarHScrollHelper.GetVisibleColumnsBegin")
    VisibleColumnsEnd: int  # `VisibleColumnsEnd`[¶](#wx.VarHScrollHelper.VisibleColumnsEnd "Permalink to this definition")See [`GetVisibleColumnsEnd`](#wx.VarHScrollHelper.GetVisibleColumnsEnd "wx.VarHScrollHelper.GetVisibleColumnsEnd")



_Orientation: TypeAlias = Orientation

class VarScrollHelperBase:
    """ **Possible constructors**:



```
VarScrollHelperBase(winToScroll)

```


This class provides all common base functionality for scroll
calculations shared among all variable scrolled window implementations
as well as automatic scrollbar functionality, saved scroll positions,
controlling target windows to be scrolled, as well as defining all
required virtual functions that need to be implemented for any
orientation specific work.


  


        Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
    """
    def __init__(self, winToScroll: 'Window') -> None:
        """ 

`__init__`(*self*, *winToScroll*)[¶](#wx.VarScrollHelperBase.__init__ "Permalink to this definition")
Constructor taking the target window to be scrolled by this helper class.


This will attach scroll event handlers to the target window to catch and handle scroll events appropriately.



Parameters
**winToScroll** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def CalcScrolledPosition(self, coord: int) -> int:
        """ 

`CalcScrolledPosition`(*self*, *coord*)[¶](#wx.VarScrollHelperBase.CalcScrolledPosition "Permalink to this definition")
Translates the logical coordinate given to the current device coordinate.


For example, if the window is scrolled 10 units and each scroll unit represents 10 device units (which may not be the case since this class allows for variable scroll unit sizes), a call to this function with a coordinate of 15 will return -85.



Parameters
**coord** (*int*) – 



Return type
*int*





See also


[`CalcUnscrolledPosition`](#wx.VarScrollHelperBase.CalcUnscrolledPosition "wx.VarScrollHelperBase.CalcUnscrolledPosition")





            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def CalcUnscrolledPosition(self, coord: int) -> int:
        """ 

`CalcUnscrolledPosition`(*self*, *coord*)[¶](#wx.VarScrollHelperBase.CalcUnscrolledPosition "Permalink to this definition")
Translates the device coordinate given to the corresponding logical coordinate.


For example, if the window is scrolled 10 units and each scroll unit represents 10 device units (which may not be the case since this class allows for variable scroll unit sizes), a call to this function with a coordinate of 15 will return 115.



Parameters
**coord** (*int*) – 



Return type
*int*





See also


[`CalcScrolledPosition`](#wx.VarScrollHelperBase.CalcScrolledPosition "wx.VarScrollHelperBase.CalcScrolledPosition")





            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def EnablePhysicalScrolling(self, scrolling: bool=True) -> None:
        """ 

`EnablePhysicalScrolling`(*self*, *scrolling=True*)[¶](#wx.VarScrollHelperBase.EnablePhysicalScrolling "Permalink to this definition")
With physical scrolling on (when this is `True`), the device origin is changed properly when a  [wx.PaintDC](wx.PaintDC.html#wx-paintdc) is prepared, children are actually moved and laid out properly, and the contents of the window (pixels) are actually moved.


When this is `False`, you are responsible for repainting any invalidated areas of the window yourself to account for the new scroll position.



Parameters
**scrolling** (*bool*) – 






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def EstimateTotalSize(self) -> 'Coord':
        """ 

`EstimateTotalSize`(*self*)[¶](#wx.VarScrollHelperBase.EstimateTotalSize "Permalink to this definition")
When the number of scroll units change, we try to estimate the total size of all units when the full window size is needed (i.e.


to calculate the scrollbar thumb size). This is a rather expensive operation in terms of unit access, so if the user code may estimate the average size better or faster than we do, it should override this function to implement its own logic. This function should return the best guess for the total virtual window size.



Return type
*wx.Coord*





Note


Although returning a totally wrong value would still work, it risks resulting in very strange scrollbar behaviour so this function should really try to make the best guess possible.





            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def GetNonOrientationTargetSize(self) -> int:
        """ 

`GetNonOrientationTargetSize`(*self*)[¶](#wx.VarScrollHelperBase.GetNonOrientationTargetSize "Permalink to this definition")
This function needs to be overridden in the in the derived class to return the window size with respect to the opposing orientation.


If this is a vertical scrolled window, it should return the height.



Return type
*int*





See also


[`GetOrientationTargetSize`](#wx.VarScrollHelperBase.GetOrientationTargetSize "wx.VarScrollHelperBase.GetOrientationTargetSize")





            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def GetOrientation(self) -> 'Orientation':
        """ 

`GetOrientation`(*self*)[¶](#wx.VarScrollHelperBase.GetOrientation "Permalink to this definition")
This function need to be overridden to return the orientation that this helper is working with, either `HORIZONTAL` or `VERTICAL` .



Return type
 [wx.Orientation](wx.Orientation.enumeration.html#wx-orientation)






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def GetOrientationTargetSize(self) -> int:
        """ 

`GetOrientationTargetSize`(*self*)[¶](#wx.VarScrollHelperBase.GetOrientationTargetSize "Permalink to this definition")
This function needs to be overridden in the in the derived class to return the window size with respect to the orientation this helper is working with.


If this is a vertical scrolled window, it should return the width.



Return type
*int*





See also


[`GetNonOrientationTargetSize`](#wx.VarScrollHelperBase.GetNonOrientationTargetSize "wx.VarScrollHelperBase.GetNonOrientationTargetSize")





            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def GetTargetWindow(self) -> 'Window':
        """ 

`GetTargetWindow`(*self*)[¶](#wx.VarScrollHelperBase.GetTargetWindow "Permalink to this definition")
This function will return the target window this helper class is currently scrolling.



Return type
 [wx.Window](wx.Window.html#wx-window)





See also


[`SetTargetWindow`](#wx.VarScrollHelperBase.SetTargetWindow "wx.VarScrollHelperBase.SetTargetWindow")





            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def GetVisibleBegin(self) -> int:
        """ 

`GetVisibleBegin`(*self*)[¶](#wx.VarScrollHelperBase.GetVisibleBegin "Permalink to this definition")
Returns the index of the first visible unit based on the scroll position.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def GetVisibleEnd(self) -> int:
        """ 

`GetVisibleEnd`(*self*)[¶](#wx.VarScrollHelperBase.GetVisibleEnd "Permalink to this definition")
Returns the index of the last visible unit based on the scroll position.


This includes the last unit even if it is only partially visible.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def IsVisible(self, unit: int) -> bool:
        """ 

`IsVisible`(*self*, *unit*)[¶](#wx.VarScrollHelperBase.IsVisible "Permalink to this definition")
Returns `True` if the given scroll unit is currently visible (even if only partially visible) or `False` otherwise.



Parameters
**unit** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def OnGetUnitSize(self, unit: int) -> 'Coord':
        """ 

`OnGetUnitSize`(*self*, *unit*)[¶](#wx.VarScrollHelperBase.OnGetUnitSize "Permalink to this definition")
This function must be overridden in the derived class, and should return the size of the given unit in pixels.



Parameters
**unit** (*int*) – 



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def OnGetUnitsSizeHint(self, unitMin, unitMax) -> None:
        """ 

`OnGetUnitsSizeHint`(*self*, *unitMin*, *unitMax*)[¶](#wx.VarScrollHelperBase.OnGetUnitsSizeHint "Permalink to this definition")
This function doesn’t have to be overridden but it may be useful to do so if calculating the units’ sizes is a relatively expensive operation as it gives your code a chance to calculate several of them at once and cache the result if necessary.


[`OnGetUnitsSizeHint`](#wx.VarScrollHelperBase.OnGetUnitsSizeHint "wx.VarScrollHelperBase.OnGetUnitsSizeHint") is normally called just before [`OnGetUnitSize`](#wx.VarScrollHelperBase.OnGetUnitSize "wx.VarScrollHelperBase.OnGetUnitSize") but you shouldn’t rely on the latter being called for all units in the interval specified here. It is also possible that [`OnGetUnitSize`](#wx.VarScrollHelperBase.OnGetUnitSize "wx.VarScrollHelperBase.OnGetUnitSize") will be called for units outside of this interval, so this is really just a hint, not a promise.


Finally, note that *unitMin* is inclusive, while *unitMax* is exclusive.



Parameters
* **unitMin** (*int*) –
* **unitMax** (*int*) –






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def RefreshAll(self) -> None:
        """ 

`RefreshAll`(*self*)[¶](#wx.VarScrollHelperBase.RefreshAll "Permalink to this definition")
Recalculate all parameters and repaint all units.




            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def SetTargetWindow(self, target: 'Window') -> None:
        """ 

`SetTargetWindow`(*self*, *target*)[¶](#wx.VarScrollHelperBase.SetTargetWindow "Permalink to this definition")
Normally the window will scroll itself, but in some rare occasions you might want it to scroll (part of) another window (e.g.


a child of it in order to scroll only a portion the area between the scrollbars like a spreadsheet where only the cell area will move).



Parameters
**target** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 





See also


[`GetTargetWindow`](#wx.VarScrollHelperBase.GetTargetWindow "wx.VarScrollHelperBase.GetTargetWindow")





            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def UpdateScrollbar(self) -> None:
        """ 

`UpdateScrollbar`(*self*)[¶](#wx.VarScrollHelperBase.UpdateScrollbar "Permalink to this definition")
Update the thumb size shown by the scrollbar.




            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    def VirtualHitTest(self, coord: int) -> int:
        """ 

`VirtualHitTest`(*self*, *coord*)[¶](#wx.VarScrollHelperBase.VirtualHitTest "Permalink to this definition")
Returns the virtual scroll unit under the device unit given accounting for scroll position or `NOT_FOUND` if none (i.e.


if it is below the last item).



Parameters
**coord** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.VarScrollHelperBase.html
        """

    NonOrientationTargetSize: int  # `NonOrientationTargetSize`[¶](#wx.VarScrollHelperBase.NonOrientationTargetSize "Permalink to this definition")See [`GetNonOrientationTargetSize`](#wx.VarScrollHelperBase.GetNonOrientationTargetSize "wx.VarScrollHelperBase.GetNonOrientationTargetSize")
    Orientation: '_Orientation'  # `Orientation`[¶](#wx.VarScrollHelperBase.Orientation "Permalink to this definition")See [`GetOrientation`](#wx.VarScrollHelperBase.GetOrientation "wx.VarScrollHelperBase.GetOrientation")
    OrientationTargetSize: int  # `OrientationTargetSize`[¶](#wx.VarScrollHelperBase.OrientationTargetSize "Permalink to this definition")See [`GetOrientationTargetSize`](#wx.VarScrollHelperBase.GetOrientationTargetSize "wx.VarScrollHelperBase.GetOrientationTargetSize")
    TargetWindow: 'Window'  # `TargetWindow`[¶](#wx.VarScrollHelperBase.TargetWindow "Permalink to this definition")See [`GetTargetWindow`](#wx.VarScrollHelperBase.GetTargetWindow "wx.VarScrollHelperBase.GetTargetWindow") and [`SetTargetWindow`](#wx.VarScrollHelperBase.SetTargetWindow "wx.VarScrollHelperBase.SetTargetWindow")
    VisibleBegin: int  # `VisibleBegin`[¶](#wx.VarScrollHelperBase.VisibleBegin "Permalink to this definition")See [`GetVisibleBegin`](#wx.VarScrollHelperBase.GetVisibleBegin "wx.VarScrollHelperBase.GetVisibleBegin")
    VisibleEnd: int  # `VisibleEnd`[¶](#wx.VarScrollHelperBase.VisibleEnd "Permalink to this definition")See [`GetVisibleEnd`](#wx.VarScrollHelperBase.GetVisibleEnd "wx.VarScrollHelperBase.GetVisibleEnd")



class VarHVScrollHelper(VarVScrollHelper,VarHScrollHelper):
    """ **Possible constructors**:



```
VarHVScrollHelper(winToScroll)

```


This class provides functions wrapping the VarHScrollHelper and
VarVScrollHelper classes, targeted for scrolling a window in both
axis.


  


        Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
    """
    def __init__(self, winToScroll: 'Window') -> None:
        """ 

`__init__`(*self*, *winToScroll*)[¶](#wx.VarHVScrollHelper.__init__ "Permalink to this definition")
Constructor taking the target window to be scrolled by this helper class.


This will attach scroll event handlers to the target window to catch and handle scroll events appropriately.



Parameters
**winToScroll** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def EnablePhysicalScrolling(self, vscrolling=True, hscrolling=True) -> None:
        """ 

`EnablePhysicalScrolling`(*self*, *vscrolling=True*, *hscrolling=True*)[¶](#wx.VarHVScrollHelper.EnablePhysicalScrolling "Permalink to this definition")
With physical scrolling on (when this is `True`), the device origin is changed properly when a  [wx.PaintDC](wx.PaintDC.html#wx-paintdc) is prepared, children are actually moved and laid out properly, and the contents of the window (pixels) are actually moved.


When this is `False`, you are responsible for repainting any invalidated areas of the window yourself to account for the new scroll position.



Parameters
* **vscrolling** (*bool*) – Specifies if physical scrolling should be turned on when scrolling vertically.
* **hscrolling** (*bool*) – Specifies if physical scrolling should be turned on when scrolling horizontally.






            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def GetRowColumnCount(self) -> 'Size':
        """ 

`GetRowColumnCount`(*self*)[¶](#wx.VarHVScrollHelper.GetRowColumnCount "Permalink to this definition")
Returns the number of columns and rows the target window contains.



Return type
 [wx.Size](wx.Size.html#wx-size)





See also


[`SetRowColumnCount`](#wx.VarHVScrollHelper.SetRowColumnCount "wx.VarHVScrollHelper.SetRowColumnCount")





            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def GetVisibleBegin(self) -> 'Position':
        """ 

`GetVisibleBegin`(*self*)[¶](#wx.VarHVScrollHelper.GetVisibleBegin "Permalink to this definition")
Returns the index of the first visible column and row based on the current scroll position.



Return type
 [wx.Position](wx.Position.html#wx-position)






            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def GetVisibleEnd(self) -> 'Position':
        """ 

`GetVisibleEnd`(*self*)[¶](#wx.VarHVScrollHelper.GetVisibleEnd "Permalink to this definition")
Returns the index of the last visible column and row based on the scroll position.


This includes any partially visible columns or rows.



Return type
 [wx.Position](wx.Position.html#wx-position)






            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def IsVisible(self, *args, **kw) -> bool:
        """ 

`IsVisible`(*self*, *\*args*, *\*\*kw*)[¶](#wx.VarHVScrollHelper.IsVisible "Permalink to this definition")
Returns `True` if both the given row and column are currently visible (even if only partially visible) or `False` otherwise.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**IsVisible** *(self, row, column)*



Parameters
* **row** (*int*) –
* **column** (*int*) –



Return type
*bool*






---

  



**IsVisible** *(self, pos)*



Parameters
**pos** ([*wx.Position*](wx.Position.html#wx.Position "wx.Position")) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def RefreshRowColumn(self, *args, **kw) -> None:
        """ 

`RefreshRowColumn`(*self*, *\*args*, *\*\*kw*)[¶](#wx.VarHVScrollHelper.RefreshRowColumn "Permalink to this definition")
Triggers a refresh for just the area shared between the given row and column of the window if it is visible.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**RefreshRowColumn** *(self, row, column)*



Parameters
* **row** (*int*) –
* **column** (*int*) –






---

  



**RefreshRowColumn** *(self, pos)*



Parameters
**pos** ([*wx.Position*](wx.Position.html#wx.Position "wx.Position")) – 






---

  





            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def RefreshRowsColumns(self, *args, **kw) -> None:
        """ 

`RefreshRowsColumns`(*self*, *\*args*, *\*\*kw*)[¶](#wx.VarHVScrollHelper.RefreshRowsColumns "Permalink to this definition")
Triggers a refresh for the visible area shared between all given rows and columns (inclusive) of the window.


If the target window for both orientations is the same, the rectangle of cells is refreshed; if the target windows differ, the entire client size opposite the orientation direction is refreshed between the specified limits.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**RefreshRowsColumns** *(self, fromRow, toRow, fromColumn, toColumn)*



Parameters
* **fromRow** (*int*) –
* **toRow** (*int*) –
* **fromColumn** (*int*) –
* **toColumn** (*int*) –






---

  



**RefreshRowsColumns** *(self, from, to)*



Parameters
* **from** ([*wx.Position*](wx.Position.html#wx.Position "wx.Position")) –
* **to** ([*wx.Position*](wx.Position.html#wx.Position "wx.Position")) –






---

  





            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def ScrollToRowColumn(self, *args, **kw) -> bool:
        """ 

`ScrollToRowColumn`(*self*, *\*args*, *\*\*kw*)[¶](#wx.VarHVScrollHelper.ScrollToRowColumn "Permalink to this definition")
Scroll to the specified row and column.


It will become the first visible row and column in the window. Returns `True` if we scrolled the window, `False` if nothing was done.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**ScrollToRowColumn** *(self, row, column)*



Parameters
* **row** (*int*) –
* **column** (*int*) –



Return type
*bool*






---

  



**ScrollToRowColumn** *(self, pos)*



Parameters
**pos** ([*wx.Position*](wx.Position.html#wx.Position "wx.Position")) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def SetRowColumnCount(self, rowCount, columnCount) -> None:
        """ 

`SetRowColumnCount`(*self*, *rowCount*, *columnCount*)[¶](#wx.VarHVScrollHelper.SetRowColumnCount "Permalink to this definition")
Set the number of rows and columns the target window will contain.


The derived class must provide the sizes for all rows and columns with indices up to the ones given here in it’s [`OnGetRowHeight`](wx.VarVScrollHelper.html#wx.VarVScrollHelper.OnGetRowHeight "wx.VarVScrollHelper.OnGetRowHeight") and [`OnGetColumnWidth`](wx.VarHScrollHelper.html#wx.VarHScrollHelper.OnGetColumnWidth "wx.VarHScrollHelper.OnGetColumnWidth") implementations, respectively.



Parameters
* **rowCount** (*int*) –
* **columnCount** (*int*) –





See also


[`GetRowColumnCount`](#wx.VarHVScrollHelper.GetRowColumnCount "wx.VarHVScrollHelper.GetRowColumnCount")





            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    def VirtualHitTest(self, *args, **kw) -> 'Position':
        """ 

`VirtualHitTest`(*self*, *\*args*, *\*\*kw*)[¶](#wx.VarHVScrollHelper.VirtualHitTest "Permalink to this definition")
Returns the virtual scroll unit under the device unit given accounting for scroll position or `NOT_FOUND` (for the row, column, or possibly both values) if none.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**VirtualHitTest** *(self, x, y)*



Parameters
* **x** (*int*) –
* **y** (*int*) –



Return type
 [wx.Position](wx.Position.html#wx-position)






---

  



**VirtualHitTest** *(self, pos)*



Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 



Return type
 [wx.Position](wx.Position.html#wx-position)






---

  





            Source: https://docs.wxpython.org/wx.VarHVScrollHelper.html
        """

    RowColumnCount: 'Size'  # `RowColumnCount`[¶](#wx.VarHVScrollHelper.RowColumnCount "Permalink to this definition")See [`GetRowColumnCount`](#wx.VarHVScrollHelper.GetRowColumnCount "wx.VarHVScrollHelper.GetRowColumnCount") and [`SetRowColumnCount`](#wx.VarHVScrollHelper.SetRowColumnCount "wx.VarHVScrollHelper.SetRowColumnCount")
    VisibleBegin: 'Position'  # `VisibleBegin`[¶](#wx.VarHVScrollHelper.VisibleBegin "Permalink to this definition")See [`GetVisibleBegin`](#wx.VarHVScrollHelper.GetVisibleBegin "wx.VarHVScrollHelper.GetVisibleBegin")
    VisibleEnd: 'Position'  # `VisibleEnd`[¶](#wx.VarHVScrollHelper.VisibleEnd "Permalink to this definition")See [`GetVisibleEnd`](#wx.VarHVScrollHelper.GetVisibleEnd "wx.VarHVScrollHelper.GetVisibleEnd")



class VarVScrollHelper(VarScrollHelperBase):
    """ **Possible constructors**:



```
VarVScrollHelper(winToScroll)

```


This class provides functions wrapping the VarScrollHelperBase
class, targeted for vertical-specific scrolling.


  


        Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
    """
    def __init__(self, winToScroll: 'Window') -> None:
        """ 

`__init__`(*self*, *winToScroll*)[¶](#wx.VarVScrollHelper.__init__ "Permalink to this definition")
Constructor taking the target window to be scrolled by this helper class.


This will attach scroll event handlers to the target window to catch and handle scroll events appropriately.



Parameters
**winToScroll** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def EstimateTotalHeight(self) -> 'Coord':
        """ 

`EstimateTotalHeight`(*self*)[¶](#wx.VarVScrollHelper.EstimateTotalHeight "Permalink to this definition")
This class forwards calls from [`EstimateTotalSize`](wx.VarScrollHelperBase.html#wx.VarScrollHelperBase.EstimateTotalSize "wx.VarScrollHelperBase.EstimateTotalSize") to this function so derived classes can override either just the height or the width estimation, or just estimate both differently if desired in any  [wx.HVScrolledWindow](wx.HVScrolledWindow.html#wx-hvscrolledwindow) derived class.



Return type
*wx.Coord*





Note


This function will not be called if [`EstimateTotalSize`](wx.VarScrollHelperBase.html#wx.VarScrollHelperBase.EstimateTotalSize "wx.VarScrollHelperBase.EstimateTotalSize") is overridden in your derived class.





            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def GetRowCount(self) -> int:
        """ 

`GetRowCount`(*self*)[¶](#wx.VarVScrollHelper.GetRowCount "Permalink to this definition")
Returns the number of rows the target window contains.



Return type
*int*





See also


[`SetRowCount`](#wx.VarVScrollHelper.SetRowCount "wx.VarVScrollHelper.SetRowCount")





            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def GetVisibleRowsBegin(self) -> int:
        """ 

`GetVisibleRowsBegin`(*self*)[¶](#wx.VarVScrollHelper.GetVisibleRowsBegin "Permalink to this definition")
Returns the index of the first visible row based on the scroll position.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def GetVisibleRowsEnd(self) -> int:
        """ 

`GetVisibleRowsEnd`(*self*)[¶](#wx.VarVScrollHelper.GetVisibleRowsEnd "Permalink to this definition")
Returns the index of the last visible row based on the scroll position.


This includes the last row even if it is only partially visible.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def IsRowVisible(self, row: int) -> bool:
        """ 

`IsRowVisible`(*self*, *row*)[¶](#wx.VarVScrollHelper.IsRowVisible "Permalink to this definition")
Returns `True` if the given row is currently visible (even if only partially visible) or `False` otherwise.



Parameters
**row** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def OnGetRowHeight(self, row: int) -> 'Coord':
        """ 

`OnGetRowHeight`(*self*, *row*)[¶](#wx.VarVScrollHelper.OnGetRowHeight "Permalink to this definition")
This function must be overridden in the derived class, and should return the height of the given row in pixels.



Parameters
**row** (*int*) – 



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def OnGetRowsHeightHint(self, rowMin, rowMax) -> None:
        """ 

`OnGetRowsHeightHint`(*self*, *rowMin*, *rowMax*)[¶](#wx.VarVScrollHelper.OnGetRowsHeightHint "Permalink to this definition")
This function doesn’t have to be overridden but it may be useful to do so if calculating the rows’ sizes is a relatively expensive operation as it gives your code a chance to calculate several of them at once and cache the result if necessary.


[`OnGetRowsHeightHint`](#wx.VarVScrollHelper.OnGetRowsHeightHint "wx.VarVScrollHelper.OnGetRowsHeightHint") is normally called just before [`OnGetRowHeight`](#wx.VarVScrollHelper.OnGetRowHeight "wx.VarVScrollHelper.OnGetRowHeight") but you shouldn’t rely on the latter being called for all rows in the interval specified here. It is also possible that [`OnGetRowHeight`](#wx.VarVScrollHelper.OnGetRowHeight "wx.VarVScrollHelper.OnGetRowHeight") will be called for units outside of this interval, so this is really just a hint, not a promise.


Finally, note that *rowMin* is inclusive, while *rowMax* is exclusive.



Parameters
* **rowMin** (*int*) –
* **rowMax** (*int*) –






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def RefreshRow(self, row: int) -> None:
        """ 

`RefreshRow`(*self*, *row*)[¶](#wx.VarVScrollHelper.RefreshRow "Permalink to this definition")
Triggers a refresh for just the given row’s area of the window if it’s visible.



Parameters
**row** (*int*) – 






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def RefreshRows(self, from_, to_) -> None:
        """ 

`RefreshRows`(*self*, *from\_*, *to\_*)[¶](#wx.VarVScrollHelper.RefreshRows "Permalink to this definition")
Triggers a refresh for the area between the specified range of rows given (inclusively).



Parameters
* **from\_** (*int*) –
* **to\_** (*int*) –






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def ScrollRowPages(self, pages: int) -> bool:
        """ 

`ScrollRowPages`(*self*, *pages*)[¶](#wx.VarVScrollHelper.ScrollRowPages "Permalink to this definition")
Scroll by the specified number of pages which may be positive (to scroll down) or negative (to scroll up).



Parameters
**pages** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def ScrollRows(self, rows: int) -> bool:
        """ 

`ScrollRows`(*self*, *rows*)[¶](#wx.VarVScrollHelper.ScrollRows "Permalink to this definition")
Scroll by the specified number of rows which may be positive (to scroll down) or negative (to scroll up).



Parameters
**rows** (*int*) – 



Return type
*bool*



Returns
`True` if the window was scrolled, `False` otherwise (for example, if we’re trying to scroll down but we are already showing the last row).






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def ScrollToRow(self, row: int) -> bool:
        """ 

`ScrollToRow`(*self*, *row*)[¶](#wx.VarVScrollHelper.ScrollToRow "Permalink to this definition")
Scroll to the specified row.


It will become the first visible row in the window.



Parameters
**row** (*int*) – 



Return type
*bool*



Returns
`True` if we scrolled the window, `False` if nothing was done.






            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    def SetRowCount(self, rowCount: int) -> None:
        """ 

`SetRowCount`(*self*, *rowCount*)[¶](#wx.VarVScrollHelper.SetRowCount "Permalink to this definition")
Set the number of rows the window contains.


The derived class must provide the heights for all rows with indices up to the one given here in it’s [`OnGetRowHeight`](#wx.VarVScrollHelper.OnGetRowHeight "wx.VarVScrollHelper.OnGetRowHeight") implementation.



Parameters
**rowCount** (*int*) – 





See also


[`GetRowCount`](#wx.VarVScrollHelper.GetRowCount "wx.VarVScrollHelper.GetRowCount")





            Source: https://docs.wxpython.org/wx.VarVScrollHelper.html
        """

    RowCount: int  # `RowCount`[¶](#wx.VarVScrollHelper.RowCount "Permalink to this definition")See [`GetRowCount`](#wx.VarVScrollHelper.GetRowCount "wx.VarVScrollHelper.GetRowCount") and [`SetRowCount`](#wx.VarVScrollHelper.SetRowCount "wx.VarVScrollHelper.SetRowCount")
    VisibleRowsBegin: int  # `VisibleRowsBegin`[¶](#wx.VarVScrollHelper.VisibleRowsBegin "Permalink to this definition")See [`GetVisibleRowsBegin`](#wx.VarVScrollHelper.GetVisibleRowsBegin "wx.VarVScrollHelper.GetVisibleRowsBegin")
    VisibleRowsEnd: int  # `VisibleRowsEnd`[¶](#wx.VarVScrollHelper.VisibleRowsEnd "Permalink to this definition")See [`GetVisibleRowsEnd`](#wx.VarVScrollHelper.GetVisibleRowsEnd "wx.VarVScrollHelper.GetVisibleRowsEnd")



class VersionInfo:
    """ **Possible constructors**:



```
VersionInfo(name="", major=0, minor=0, micro=0, revision=0,
            description="", copyright="")

```


VersionInfo contains version information.


  


        Source: https://docs.wxpython.org/wx.VersionInfo.html
    """
    def __init__(self, name="", major=0, minor=0, micro=0, revision=0, description="", copyright="") -> None:
        """ 

`__init__`(*self*, *name=""*, *major=0*, *minor=0*, *micro=0*, *revision=0*, *description=""*, *copyright=""*)[¶](#wx.VersionInfo.__init__ "Permalink to this definition")
Constructor.


The version information objects need to be initialized with this constructor and are immutable once they are created.



Parameters
* **name** (*string*) – The name of the library or other entity that this object pertains to.
* **major** (*int*) – The major version component.
* **minor** (*int*) – The minor version component.
* **micro** (*int*) – The micro version component, 0 by default.
* **revision** (*int*) – The revision version component, also known as “build
number”. This component is also 0 by default and is only available since wxWidgets 3.2.0.
* **description** (*string*) – Free form description of this version, none by default.
* **copyright** (*string*) – Copyright string, none by default.






            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def GetCopyright(self) -> str:
        """ 

`GetCopyright`(*self*)[¶](#wx.VersionInfo.GetCopyright "Permalink to this definition")
Get the copyright string.


The copyright string may be empty.



Return type
`string`



Returns
The copyright string.






            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def GetDescription(self) -> str:
        """ 

`GetDescription`(*self*)[¶](#wx.VersionInfo.GetDescription "Permalink to this definition")
Get the description string.


The description may be empty.



Return type
`string`



Returns
The description string, free-form.






            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def GetMajor(self) -> int:
        """ 

`GetMajor`(*self*)[¶](#wx.VersionInfo.GetMajor "Permalink to this definition")
Get the major version number.



Return type
*int*



Returns
Major version number.






            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def GetMicro(self) -> int:
        """ 

`GetMicro`(*self*)[¶](#wx.VersionInfo.GetMicro "Permalink to this definition")
Get the micro version, or release number.


This is the third component of the version.



Return type
*int*



Returns
Micro version, or release number.






            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def GetMinor(self) -> int:
        """ 

`GetMinor`(*self*)[¶](#wx.VersionInfo.GetMinor "Permalink to this definition")
Get the minor version number.



Return type
*int*



Returns
Minor version number.






            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.VersionInfo.GetName "Permalink to this definition")
Get the name of the object (library).



Return type
`string`



Returns
Name string.






            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def GetRevision(self) -> int:
        """ 

`GetRevision`(*self*)[¶](#wx.VersionInfo.GetRevision "Permalink to this definition")
Get the revision version, or build number.


This is the fourth component of the version.



Return type
*int*



Returns
Revision version, or build number.





New in version 4.2/wxWidgets-3.2.0.





            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def GetVersionString(self) -> str:
        """ 

`GetVersionString`(*self*)[¶](#wx.VersionInfo.GetVersionString "Permalink to this definition")
Get the string representation.


The micro and revision components of the version are ignored/not used if they are both zero. If the revision component is non-zero all four parts will be used even if the micro component is zero.



Return type
`string`



Returns
The version string in the form “name major.minor[.micro[.revision]]”.






            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def HasCopyright(self) -> bool:
        """ 

`HasCopyright`(*self*)[¶](#wx.VersionInfo.HasCopyright "Permalink to this definition")
Returns `True` if a copyright string has been specified.



Return type
*bool*





See also


[`GetCopyright`](#wx.VersionInfo.GetCopyright "wx.VersionInfo.GetCopyright")





            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def HasDescription(self) -> bool:
        """ 

`HasDescription`(*self*)[¶](#wx.VersionInfo.HasDescription "Permalink to this definition")
Return `True` if a description string has been specified.



Return type
*bool*





See also


[`GetDescription`](#wx.VersionInfo.GetDescription "wx.VersionInfo.GetDescription")





            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    def ToString(self) -> str:
        """ 

`ToString`(*self*)[¶](#wx.VersionInfo.ToString "Permalink to this definition")
Get the string representation of this version object.


This function returns the description if it is non-empty or [`GetVersionString`](#wx.VersionInfo.GetVersionString "wx.VersionInfo.GetVersionString") if there is no description.



Return type
`string`





See also


[`GetDescription`](#wx.VersionInfo.GetDescription "wx.VersionInfo.GetDescription") , [`GetVersionString`](#wx.VersionInfo.GetVersionString "wx.VersionInfo.GetVersionString")





            Source: https://docs.wxpython.org/wx.VersionInfo.html
        """

    Copyright: str  # `Copyright`[¶](#wx.VersionInfo.Copyright "Permalink to this definition")See [`GetCopyright`](#wx.VersionInfo.GetCopyright "wx.VersionInfo.GetCopyright")
    Description: str  # `Description`[¶](#wx.VersionInfo.Description "Permalink to this definition")See [`GetDescription`](#wx.VersionInfo.GetDescription "wx.VersionInfo.GetDescription")
    Major: int  # `Major`[¶](#wx.VersionInfo.Major "Permalink to this definition")See [`GetMajor`](#wx.VersionInfo.GetMajor "wx.VersionInfo.GetMajor")
    Micro: int  # `Micro`[¶](#wx.VersionInfo.Micro "Permalink to this definition")See [`GetMicro`](#wx.VersionInfo.GetMicro "wx.VersionInfo.GetMicro")
    Minor: int  # `Minor`[¶](#wx.VersionInfo.Minor "Permalink to this definition")See [`GetMinor`](#wx.VersionInfo.GetMinor "wx.VersionInfo.GetMinor")
    Name: str  # `Name`[¶](#wx.VersionInfo.Name "Permalink to this definition")See [`GetName`](#wx.VersionInfo.GetName "wx.VersionInfo.GetName")
    Revision: int  # `Revision`[¶](#wx.VersionInfo.Revision "Permalink to this definition")See [`GetRevision`](#wx.VersionInfo.GetRevision "wx.VersionInfo.GetRevision")
    VersionString: str  # `VersionString`[¶](#wx.VersionInfo.VersionString "Permalink to this definition")See [`GetVersionString`](#wx.VersionInfo.GetVersionString "wx.VersionInfo.GetVersionString")



class VideoMode:
    """ **Possible constructors**:



```
VideoMode(width=0, height=0, depth=0, freq=0)

```


Determines the sizes and locations of displays connected to the
system.


  


        Source: https://docs.wxpython.org/wx.VideoMode.html
    """
    def __init__(self, width=0, height=0, depth=0, freq=0) -> None:
        """ 

`__init__`(*self*, *width=0*, *height=0*, *depth=0*, *freq=0*)[¶](#wx.VideoMode.__init__ "Permalink to this definition")
Constructs this class using the given parameters.



Parameters
* **width** (*int*) –
* **height** (*int*) –
* **depth** (*int*) –
* **freq** (*int*) –






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def GetDepth(self) -> int:
        """ 

`GetDepth`(*self*)[¶](#wx.VideoMode.GetDepth "Permalink to this definition")
Returns bits per pixel (e.g. 32), 1 is monochrome and 0 means unspecified/known.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def GetHeight(self) -> int:
        """ 

`GetHeight`(*self*)[¶](#wx.VideoMode.GetHeight "Permalink to this definition")
Returns the screen height in pixels (e.g. 480), 0 means unspecified.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.VideoMode.GetWidth "Permalink to this definition")
Returns the screen width in pixels (e.g. 640), 0 means unspecified.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def IsOk(self) -> bool:
        """ 

`IsOk`(*self*)[¶](#wx.VideoMode.IsOk "Permalink to this definition")
Returns `True` if the object has been initialized.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def Matches(self, other: 'VideoMode') -> bool:
        """ 

`Matches`(*self*, *other*)[¶](#wx.VideoMode.Matches "Permalink to this definition")
Returns `True` if this mode matches the other one in the sense that all non zero fields of the other mode have the same value in this one (except for refresh which is allowed to have a greater value).



Parameters
**other** ([*wx.VideoMode*](#wx.VideoMode "wx.VideoMode")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def __bool__(self) -> int:
        """ 

`__bool__`(*self*)[¶](#wx.VideoMode.__bool__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def __nonzero__(self) -> int:
        """ 

`__nonzero__`(*self*)[¶](#wx.VideoMode.__nonzero__ "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*)[¶](#wx.VideoMode.__ne__ "Permalink to this definition")

Parameters
**mode** ([*wx.VideoMode*](#wx.VideoMode "wx.VideoMode")) – 






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*)[¶](#wx.VideoMode.__eq__ "Permalink to this definition")

Parameters
**m** ([*wx.VideoMode*](#wx.VideoMode "wx.VideoMode")) – 






            Source: https://docs.wxpython.org/wx.VideoMode.html
        """

    Depth: int  # `Depth`[¶](#wx.VideoMode.Depth "Permalink to this definition")See [`GetDepth`](#wx.VideoMode.GetDepth "wx.VideoMode.GetDepth")
    Height: int  # `Height`[¶](#wx.VideoMode.Height "Permalink to this definition")See [`GetHeight`](#wx.VideoMode.GetHeight "wx.VideoMode.GetHeight")
    Width: int  # `Width`[¶](#wx.VideoMode.Width "Permalink to this definition")See [`GetWidth`](#wx.VideoMode.GetWidth "wx.VideoMode.GetWidth")
    bpp: Any  # `bpp`[¶](#wx.VideoMode.bpp "Permalink to this definition")A public C++ attribute of type `int`. Bits per pixel (e.g. 32), 1 is monochrome and 0 means unspecified/known.
    h: Any  # `h`[¶](#wx.VideoMode.h "Permalink to this definition")A public C++ attribute of type `int`. The screen height in pixels (e.g. 480), 0 means unspecified.
    refresh: Any  # `refresh`[¶](#wx.VideoMode.refresh "Permalink to this definition")A public C++ attribute of type `int`. Refresh frequency in Hz, 0 means unspecified/unknown.
    w: Any  # `w`[¶](#wx.VideoMode.w "Permalink to this definition")A public C++ attribute of type `int`. The screen width in pixels (e.g. 640), 0 means unspecified.



class VisualAttributes:
    """ Struct containing all the visual attributes of a control.


  


        Source: https://docs.wxpython.org/wx.VisualAttributes.html
    """
    colBg: Any  # `colBg`[¶](#wx.VisualAttributes.colBg "Permalink to this definition")A public C++ attribute of type [`Colour`](wx.Colour.html#wx.Colour "wx.Colour") . The background colour.
    colFg: Any  # `colFg`[¶](#wx.VisualAttributes.colFg "Permalink to this definition")A public C++ attribute of type [`Colour`](wx.Colour.html#wx.Colour "wx.Colour") . The foreground colour.
    font: Any  # `font`[¶](#wx.VisualAttributes.font "Permalink to this definition")A public C++ attribute of type [`Font`](wx.Font.html#wx.Font "wx.Font") . The font used for control label/text inside it.



class VListBox(VScrolledWindow):
    """ **Possible constructors**:



```
VListBox()

VListBox(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
         style=0, name=VListBoxNameStr)

```


VListBox is a ListBox-like control with the following two main
differences from a regular ListBox: it can have an arbitrarily huge
number of items because it doesn’t store them itself but uses the
OnDrawItem() callback to draw them (so it is a virtual listbox) and
its items can have variable height as determined by OnMeasureItem()
(so it is also a listbox with the lines of variable height).


  


        Source: https://docs.wxpython.org/wx.VListBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.VListBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor, you must call [`Create`](#wx.VListBox.Create "wx.VListBox.Create") later.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=VListBoxNameStr)*


Normal constructor which calls [`Create`](#wx.VListBox.Create "wx.VListBox.Create") internally.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def Clear(self) -> None:
        """ 

`Clear`(*self*)[¶](#wx.VListBox.Clear "Permalink to this definition")
Deletes all items from the control.




            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=VListBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=VListBoxNameStr*)[¶](#wx.VListBox.Create "Permalink to this definition")
Creates the control.


To finish creating it you also should call [`SetItemCount`](#wx.VListBox.SetItemCount "wx.VListBox.SetItemCount") to let it know about the number of items it contains.


The only special style which may be used with  [wx.VListBox](#wx-vlistbox) is `LB_MULTIPLE` which indicates that the listbox should support multiple selection.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*



Returns
`True` on success or `False` if the control couldn’t be created.






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def DeselectAll(self) -> bool:
        """ 

`DeselectAll`(*self*)[¶](#wx.VListBox.DeselectAll "Permalink to this definition")
Deselects all the items in the listbox.


This method is only valid for multi selection listboxes.



Return type
*bool*



Returns
`True` if any items were changed, i.e. if there had been any selected items before, or `False` if all the items were already deselected.





See also


[`SelectAll`](#wx.VListBox.SelectAll "wx.VListBox.SelectAll") , [`Select`](#wx.VListBox.Select "wx.VListBox.Select")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.VListBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def GetFirstSelected(self) -> tuple:
        """ 

`GetFirstSelected`(*self*)[¶](#wx.VListBox.GetFirstSelected "Permalink to this definition")
Returns the index of the first selected item in the listbox or `NOT_FOUND` if no items are currently selected.


*cookie* is an opaque parameter which should be passed to the subsequent calls to [`GetNextSelected`](#wx.VListBox.GetNextSelected "wx.VListBox.GetNextSelected") . It is needed in order to allow parallel iterations over the selected items.


Here is a typical example of using these functions:



```
item, cookie = vlbox.GetFirstSelected()
while item != wx.NOT_FOUND:
    # ... process item ...
    item, cookie = vlbox.GetNextSelected(cookie)

```


This method is only valid for multi selection listboxes.



Return type
*tuple*



Returns
( *int*, *cookie* )






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def GetItemCount(self) -> int:
        """ 

`GetItemCount`(*self*)[¶](#wx.VListBox.GetItemCount "Permalink to this definition")
Get the number of items in the control.



Return type
*int*





See also


[`SetItemCount`](#wx.VListBox.SetItemCount "wx.VListBox.SetItemCount")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def GetItemRect(self, item: int) -> 'Rect':
        """ 

`GetItemRect`(*self*, *item*)[¶](#wx.VListBox.GetItemRect "Permalink to this definition")
Returns the rectangle occupied by this item in physical coordinates.


If the item is not currently visible, returns an empty rectangle.



Parameters
**item** (*int*) – 



Return type
 [wx.Rect](wx.Rect.html#wx-rect)





New in version 2.9.0.





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def GetMargins(self) -> 'Point':
        """ 

`GetMargins`(*self*)[¶](#wx.VListBox.GetMargins "Permalink to this definition")
Returns the margins used by the control.


The `x` field of the returned point is the horizontal margin and the `y` field is the vertical one.



Return type
 [wx.Point](wx.Point.html#wx-point)





See also


[`SetMargins`](#wx.VListBox.SetMargins "wx.VListBox.SetMargins")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def GetNextSelected(self, cookie: int) -> tuple:
        """ 

`GetNextSelected`(*self*, *cookie*)[¶](#wx.VListBox.GetNextSelected "Permalink to this definition")
Returns the index of the next selected item or `NOT_FOUND` if there are no more.


This method is only valid for multi selection listboxes.



Parameters
**cookie** (*long*) – 



Return type
*tuple*



Returns
( *int*, *cookie* )





See also


[`GetFirstSelected`](#wx.VListBox.GetFirstSelected "wx.VListBox.GetFirstSelected")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def GetSelectedCount(self) -> int:
        """ 

`GetSelectedCount`(*self*)[¶](#wx.VListBox.GetSelectedCount "Permalink to this definition")
Returns the number of the items currently selected.


It is valid for both single and multi selection controls. In the former case it may only return 0 or 1 however.



Return type
*int*





See also


[`IsSelected`](#wx.VListBox.IsSelected "wx.VListBox.IsSelected") , [`GetFirstSelected`](#wx.VListBox.GetFirstSelected "wx.VListBox.GetFirstSelected") , [`GetNextSelected`](#wx.VListBox.GetNextSelected "wx.VListBox.GetNextSelected")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def GetSelection(self) -> int:
        """ 

`GetSelection`(*self*)[¶](#wx.VListBox.GetSelection "Permalink to this definition")
Get the currently selected item or `NOT_FOUND` if there is no selection.



Return type
*int*






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def GetSelectionBackground(self) -> 'Colour':
        """ 

`GetSelectionBackground`(*self*)[¶](#wx.VListBox.GetSelectionBackground "Permalink to this definition")
Returns the background colour used for the selected cells.


By default the standard system colour is used.



Return type
 [wx.Colour](wx.Colour.html#wx-colour)





See also


[`wx.SystemSettings.GetColour`](wx.SystemSettings.html#wx.SystemSettings.GetColour "wx.SystemSettings.GetColour") , [`SetSelectionBackground`](#wx.VListBox.SetSelectionBackground "wx.VListBox.SetSelectionBackground")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def HasMultipleSelection(self) -> bool:
        """ 

`HasMultipleSelection`(*self*)[¶](#wx.VListBox.HasMultipleSelection "Permalink to this definition")
Returns `True` if the listbox was created with `LB_MULTIPLE` style and so supports multiple selection or `False` if it is a single selection listbox.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def IsCurrent(self, item: int) -> bool:
        """ 

`IsCurrent`(*self*, *item*)[¶](#wx.VListBox.IsCurrent "Permalink to this definition")
Returns `True` if this item is the current one, `False` otherwise.


The current item is always the same as selected one for the single selection listbox and in this case this method is equivalent to [`IsSelected`](#wx.VListBox.IsSelected "wx.VListBox.IsSelected") but they are different for multi selection listboxes where many items may be selected but only one (at most) is current.



Parameters
**item** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def IsSelected(self, item: int) -> bool:
        """ 

`IsSelected`(*self*, *item*)[¶](#wx.VListBox.IsSelected "Permalink to this definition")
Returns `True` if this item is selected, `False` otherwise.



Parameters
**item** (*int*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def OnDrawBackground(self, dc, rect, n) -> None:
        """ 

`OnDrawBackground`(*self*, *dc*, *rect*, *n*)[¶](#wx.VListBox.OnDrawBackground "Permalink to this definition")
This method is used to draw the item’s background and, maybe, a border around it.


The base class version implements a reasonable default behaviour which consists in drawing the selected item with the standard background colour and drawing a border around the item if it is either selected or current.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) –
* **n** (*int*) –





Todo


Change this function signature to non-const.





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def OnDrawItem(self, dc, rect, n) -> None:
        """ 

`OnDrawItem`(*self*, *dc*, *rect*, *n*)[¶](#wx.VListBox.OnDrawItem "Permalink to this definition")
The derived class must implement this function to actually draw the item with the given index on the provided DC.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The device context to use for drawing.
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – The bounding rectangle for the item being drawn (DC clipping region is set to this rectangle before calling this function).
* **n** (*int*) – The index of the item to be drawn.





Todo


Change this function signature to non-const.





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def OnDrawSeparator(self, dc, rect, n) -> None:
        """ 

`OnDrawSeparator`(*self*, *dc*, *rect*, *n*)[¶](#wx.VListBox.OnDrawSeparator "Permalink to this definition")
This method may be used to draw separators between the lines.


The rectangle passed to it may be modified, typically to deflate it a bit before passing to [`OnDrawItem`](#wx.VListBox.OnDrawItem "wx.VListBox.OnDrawItem") .


The base class version of this method doesn’t do anything.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – The device context to use for drawing.
* **rect** ([*wx.Rect*](wx.Rect.html#wx.Rect "wx.Rect")) – The bounding rectangle for the item.
* **n** (*int*) – The index of the item.





Todo


Change this function signature to non-const.





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def OnMeasureItem(self, n: int) -> 'Coord':
        """ 

`OnMeasureItem`(*self*, *n*)[¶](#wx.VListBox.OnMeasureItem "Permalink to this definition")
The derived class must implement this method to return the height of the specified item (in pixels).



Parameters
**n** (*int*) – 



Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def Select(self, item, select=True) -> bool:
        """ 

`Select`(*self*, *item*, *select=True*)[¶](#wx.VListBox.Select "Permalink to this definition")
Selects or deselects the specified item which must be valid (i.e. not equal to `NOT_FOUND` ).


This function is only valid for the multiple selection listboxes, use [`SetSelection`](#wx.VListBox.SetSelection "wx.VListBox.SetSelection") for the single selection ones.



Parameters
* **item** (*int*) –
* **select** (*bool*) –



Return type
*bool*



Returns
`True` if the items selection status has changed or `False` otherwise.






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def SelectAll(self) -> bool:
        """ 

`SelectAll`(*self*)[¶](#wx.VListBox.SelectAll "Permalink to this definition")
Selects all the items in the listbox.


This method is only valid for multi selection listboxes.



Return type
*bool*



Returns
`True` if any items were changed, i.e. if there had been any unselected items before, or `False` if all the items were already selected.





See also


[`DeselectAll`](#wx.VListBox.DeselectAll "wx.VListBox.DeselectAll") , [`Select`](#wx.VListBox.Select "wx.VListBox.Select")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def SelectRange(self, from_, to_) -> bool:
        """ 

`SelectRange`(*self*, *from\_*, *to\_*)[¶](#wx.VListBox.SelectRange "Permalink to this definition")
Selects all items in the specified range which may be given in any order.


This method is only valid for multi selection listboxes.



Parameters
* **from\_** (*int*) –
* **to\_** (*int*) –



Return type
*bool*



Returns
`True` if the items selection status has changed or `False` otherwise.





See also


[`SelectAll`](#wx.VListBox.SelectAll "wx.VListBox.SelectAll") , [`Select`](#wx.VListBox.Select "wx.VListBox.Select")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def SetItemCount(self, count: int) -> None:
        """ 

`SetItemCount`(*self*, *count*)[¶](#wx.VListBox.SetItemCount "Permalink to this definition")
Set the number of items to be shown in the control.


This is just a synonym for [`wx.VScrolledWindow.SetRowCount`](wx.VarVScrollHelper.html#wx.VarVScrollHelper.SetRowCount "wx.VarVScrollHelper.SetRowCount") .



Parameters
**count** (*int*) – 






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def SetMargins(self, *args, **kw) -> None:
        """ 

`SetMargins`(*self*, *\*args*, *\*\*kw*)[¶](#wx.VListBox.SetMargins "Permalink to this definition")
Set the margins: horizontal margin is the distance between the window border and the item contents while vertical margin is half of the distance between items.


By default both margins are 0.


[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetMargins** *(self, pt)*



Parameters
**pt** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 






---

  



**SetMargins** *(self, x, y)*



Parameters
* **x** (*int*) –
* **y** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def SetSelection(self, selection: int) -> None:
        """ 

`SetSelection`(*self*, *selection*)[¶](#wx.VListBox.SetSelection "Permalink to this definition")
Set the selection to the specified item, if it is -1 the selection is unset.


The selected item will be automatically scrolled into view if it isn’t currently visible.


This method may be used both with single and multiple selection listboxes.



Parameters
**selection** (*int*) – 






            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def SetSelectionBackground(self, col: Union[int, str, 'Colour']) -> None:
        """ 

`SetSelectionBackground`(*self*, *col*)[¶](#wx.VListBox.SetSelectionBackground "Permalink to this definition")
Sets the colour to be used for the selected cells background.


The background of the standard cells may be changed by simply calling [`wx.Window.SetBackgroundColour`](wx.Window.html#wx.Window.SetBackgroundColour "wx.Window.SetBackgroundColour") .



Parameters
**col** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 





Note


Using a non-default background colour may result in control having an appearance different from the similar native controls and should be avoided in general.




See also


[`GetSelectionBackground`](#wx.VListBox.GetSelectionBackground "wx.VListBox.GetSelectionBackground")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    def Toggle(self, item: int) -> None:
        """ 

`Toggle`(*self*, *item*)[¶](#wx.VListBox.Toggle "Permalink to this definition")
Toggles the state of the specified *item*, i.e. selects it if it was unselected and deselects it if it was selected.


This method is only valid for multi selection listboxes.



Parameters
**item** (*int*) – 





See also


[`Select`](#wx.VListBox.Select "wx.VListBox.Select")





            Source: https://docs.wxpython.org/wx.VListBox.html
        """

    ItemCount: int  # `ItemCount`[¶](#wx.VListBox.ItemCount "Permalink to this definition")See [`GetItemCount`](#wx.VListBox.GetItemCount "wx.VListBox.GetItemCount") and [`SetItemCount`](#wx.VListBox.SetItemCount "wx.VListBox.SetItemCount")
    Margins: 'Point'  # `Margins`[¶](#wx.VListBox.Margins "Permalink to this definition")See [`GetMargins`](#wx.VListBox.GetMargins "wx.VListBox.GetMargins") and [`SetMargins`](#wx.VListBox.SetMargins "wx.VListBox.SetMargins")
    SelectedCount: int  # `SelectedCount`[¶](#wx.VListBox.SelectedCount "Permalink to this definition")See [`GetSelectedCount`](#wx.VListBox.GetSelectedCount "wx.VListBox.GetSelectedCount")
    Selection: int  # `Selection`[¶](#wx.VListBox.Selection "Permalink to this definition")See [`GetSelection`](#wx.VListBox.GetSelection "wx.VListBox.GetSelection") and [`SetSelection`](#wx.VListBox.SetSelection "wx.VListBox.SetSelection")
    SelectionBackground: 'Colour'  # `SelectionBackground`[¶](#wx.VListBox.SelectionBackground "Permalink to this definition")See [`GetSelectionBackground`](#wx.VListBox.GetSelectionBackground "wx.VListBox.GetSelectionBackground") and [`SetSelectionBackground`](#wx.VListBox.SetSelectionBackground "wx.VListBox.SetSelectionBackground")



class VScrolledWindow(Panel,VarVScrollHelper):
    """ **Possible constructors**:



```
VScrolledWindow()

VScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition,
                size=DefaultSize, style=0, name=PanelNameStr)

```


In the name of this class, “V” may stand for “variable” because it can
be used for scrolling rows of variable heights; “virtual”, because it
is not necessary to know the heights of all rows in advance only
those which are shown on the screen need to be measured; or even
“vertical”, because this class only supports scrolling vertically.


  


        Source: https://docs.wxpython.org/wx.VScrolledWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.VScrolledWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor, you must call [`Create`](#wx.VScrolledWindow.Create "wx.VScrolledWindow.Create") later.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)*


This is the normal constructor, no need to call [`Create`](#wx.VScrolledWindow.Create "wx.VScrolledWindow.Create") after using this constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – The parent window, must not be `None`.
* **id** (*wx.WindowID*) – The identifier of this window, `wx.ID_ANY` by default.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – The initial window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – The initial window size.
* **style** (*long*) – The window style. There are no special style bits defined for this class.
* **name** (*string*) – The name for this window; usually not used.





Note


`VSCROLL` is always automatically added to the style, there is no need to specify it explicitly.





---

  





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=PanelNameStr*)[¶](#wx.VScrolledWindow.Create "Permalink to this definition")
Same as the non-default constructor, but returns a status code: `True` if ok, `False` if the window couldn’t be created.


Just as with the constructor, the `VSCROLL` style is always used, there is no need to specify it explicitly.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.VScrolledWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
 [wx.VisualAttributes](wx.VisualAttributes.html#wx-visualattributes)






            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def GetFirstVisibleLine(self) -> int:
        """ 

`GetFirstVisibleLine`(*self*)[¶](#wx.VScrolledWindow.GetFirstVisibleLine "Permalink to this definition")
Deprecated compatibility helper.



Return type
*int*





Deprecated


Use GetVisibleRowsBegin instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def GetLastVisibleLine(self) -> int:
        """ 

`GetLastVisibleLine`(*self*)[¶](#wx.VScrolledWindow.GetLastVisibleLine "Permalink to this definition")
Deprecated compatibility helper.



Return type
*int*





Deprecated


Use GetVisibleRowsEnd instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def GetLineCount(self) -> int:
        """ 

`GetLineCount`(*self*)[¶](#wx.VScrolledWindow.GetLineCount "Permalink to this definition")
Deprecated compatibility helper.



Return type
*int*





Deprecated


Use GetRowCount instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def HitTest(self, *args) -> None:
        """ 

`HitTest`(*self*, *\*args*)[¶](#wx.VScrolledWindow.HitTest "Permalink to this definition")
Deprecated compatibility helper.




            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def RefreshLine(self, line) -> None:
        """ 

`RefreshLine`(*self*, *line*)[¶](#wx.VScrolledWindow.RefreshLine "Permalink to this definition")
Deprecated compatibility helper.



Deprecated


Use RefreshRow instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def RefreshLines(self, from_, to_) -> None:
        """ 

`RefreshLines`(*self*, *from\_*, *to\_*)[¶](#wx.VScrolledWindow.RefreshLines "Permalink to this definition")
Deprecated compatibility helper.



Deprecated


Use RefreshRows instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def ScrollLines(self, lines) -> bool:
        """ 

`ScrollLines`(*self*, *lines*)[¶](#wx.VScrolledWindow.ScrollLines "Permalink to this definition")
Deprecated compatibility helper.



Return type
*bool*





Deprecated


Use ScrollRows instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def ScrollPages(self, pages) -> bool:
        """ 

`ScrollPages`(*self*, *pages*)[¶](#wx.VScrolledWindow.ScrollPages "Permalink to this definition")
Deprecated compatibility helper.



Return type
*bool*





Deprecated


Use ScrollRowPages instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def ScrollToLine(self, line) -> bool:
        """ 

`ScrollToLine`(*self*, *line*)[¶](#wx.VScrolledWindow.ScrollToLine "Permalink to this definition")
Deprecated compatibility helper.



Return type
*bool*





Deprecated


Use ScrollToRow instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    def SetLineCount(self, count) -> None:
        """ 

`SetLineCount`(*self*, *count*)[¶](#wx.VScrolledWindow.SetLineCount "Permalink to this definition")
Deprecated compatibility helper.



Deprecated


Use SetRowCount instead.





            Source: https://docs.wxpython.org/wx.VScrolledWindow.html
        """

    FirstVisibleLine: int  # `FirstVisibleLine`[¶](#wx.VScrolledWindow.FirstVisibleLine "Permalink to this definition")See [`GetFirstVisibleLine`](#wx.VScrolledWindow.GetFirstVisibleLine "wx.VScrolledWindow.GetFirstVisibleLine")
    LastVisibleLine: int  # `LastVisibleLine`[¶](#wx.VScrolledWindow.LastVisibleLine "Permalink to this definition")See [`GetLastVisibleLine`](#wx.VScrolledWindow.GetLastVisibleLine "wx.VScrolledWindow.GetLastVisibleLine")
    LineCount: int  # `LineCount`[¶](#wx.VScrolledWindow.LineCount "Permalink to this definition")See [`GetLineCount`](#wx.VScrolledWindow.GetLineCount "wx.VScrolledWindow.GetLineCount") and [`SetLineCount`](#wx.VScrolledWindow.SetLineCount "wx.VScrolledWindow.SetLineCount")



class WindowBase:
    """ 
  


        Source: https://docs.wxpython.org/wx.WindowBase.html
    """
    def AddChild(self, child: 'WindowBase') -> None:
        """ 

`AddChild`(*self*, *child*)[¶](#wx.WindowBase.AddChild "Permalink to this definition")

Parameters
**child** ([*wx.WindowBase*](#wx.WindowBase "wx.WindowBase")) – 






            Source: https://docs.wxpython.org/wx.WindowBase.html
        """

    def RemoveChild(self, child: 'WindowBase') -> None:
        """ 

`RemoveChild`(*self*, *child*)[¶](#wx.WindowBase.RemoveChild "Permalink to this definition")

Parameters
**child** ([*wx.WindowBase*](#wx.WindowBase "wx.WindowBase")) – 






            Source: https://docs.wxpython.org/wx.WindowBase.html
        """



class WindowCreateEvent(CommandEvent):
    """ **Possible constructors**:



```
WindowCreateEvent(win=None)

```


This event is sent just after the actual window associated with a
Window object has been created.


  


        Source: https://docs.wxpython.org/wx.WindowCreateEvent.html
    """
    def __init__(self, win: Optional['Window']=None) -> None:
        """ 

`__init__`(*self*, *win=None*)[¶](#wx.WindowCreateEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.WindowCreateEvent.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.WindowCreateEvent.GetWindow "Permalink to this definition")
Return the window being created.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.WindowCreateEvent.html
        """

    Window: '_Window'  # `Window`[¶](#wx.WindowCreateEvent.Window "Permalink to this definition")See [`GetWindow`](#wx.WindowCreateEvent.GetWindow "wx.WindowCreateEvent.GetWindow")



EVT_WINDOW_CREATE: int  # Process a  wxEVT_CREATE   event. ^^

class WindowDC(DC):
    """ **Possible constructors**:



```
WindowDC(window)

```


A WindowDC must be constructed if an application wishes to paint on
the whole area of a window (client and decorations).


  


        Source: https://docs.wxpython.org/wx.WindowDC.html
    """
    def __init__(self, window: 'Window') -> None:
        """ 

`__init__`(*self*, *window*)[¶](#wx.WindowDC.__init__ "Permalink to this definition")
Constructor.


Pass a pointer to the window on which you wish to paint.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.WindowDC.html
        """



class WindowDestroyEvent(CommandEvent):
    """ **Possible constructors**:



```
WindowDestroyEvent(win=None)

```


This event is sent as early as possible during the window destruction
process.


  


        Source: https://docs.wxpython.org/wx.WindowDestroyEvent.html
    """
    def __init__(self, win: Optional['Window']=None) -> None:
        """ 

`__init__`(*self*, *win=None*)[¶](#wx.WindowDestroyEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.WindowDestroyEvent.html
        """

    def GetWindow(self) -> 'Window':
        """ 

`GetWindow`(*self*)[¶](#wx.WindowDestroyEvent.GetWindow "Permalink to this definition")
Return the window being destroyed.



Return type
 [wx.Window](wx.Window.html#wx-window)






            Source: https://docs.wxpython.org/wx.WindowDestroyEvent.html
        """

    Window: '_Window'  # `Window`[¶](#wx.WindowDestroyEvent.Window "Permalink to this definition")See [`GetWindow`](#wx.WindowDestroyEvent.GetWindow "wx.WindowDestroyEvent.GetWindow")



class WindowDisabler:
    """ **Possible constructors**:



```
WindowDisabler(disable=True)

WindowDisabler(winToSkip, winToSkip2=None)

```


This class disables all top level windows of the application (maybe
with the exception of one of them) in its constructor and enables them
back in its destructor.


  


        Source: https://docs.wxpython.org/wx.WindowDisabler.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.WindowDisabler.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, disable=True)*


Disables all top level windows of the applications.


If *disable* is `false` nothing is done. This can be convenient if the windows should be disabled depending on some condition.



Parameters
**disable** (*bool*) – 





New in version 2.9.0.





---

  



**\_\_init\_\_** *(self, winToSkip, winToSkip2=None)*


Disables all top level windows of the applications with the exception of *winToSkip* if it is not `None`.


Notice that under MSW if *winToSkip* appears in the taskbar, the user will be able to close the entire application (even though its main window is disabled) by right clicking on the taskbar icon and selecting the appropriate “Close” command from the context menu. To prevent this from happening you may want to use `wx.FRAME_TOOL_WINDOW`, if applicable, or `wx.FRAME_NO_TASKBAR` style when creating the window that will remain enabled.


The argument *winToSkip2* may be used to specify another window to leave enabled, if it is non-null. This parameter is only available since wxWidgets 3.1.7.



Parameters
* **winToSkip** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **winToSkip2** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –






---

  





            Source: https://docs.wxpython.org/wx.WindowDisabler.html
        """

    def __enter__(self) -> None:
        """ 

`__enter__`(*self*)[¶](#wx.WindowDisabler.__enter__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.WindowDisabler.html
        """

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """ 

`__exit__`(*self*, *exc\_type*, *exc\_val*, *exc\_tb*)[¶](#wx.WindowDisabler.__exit__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.WindowDisabler.html
        """



class WindowIDRef:
    """ **Possible constructors**:



```
WindowIDRef()

WindowIDRef(id)

WindowIDRef(idref)

```


A WindowIDRef object wraps an `ID` value and marks it as being in-use
until all references to that `ID` are gone.


  


        Source: https://docs.wxpython.org/wx.WindowIDRef.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.WindowIDRef.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor




---

  



**\_\_init\_\_** *(self, id)*


Create reference from an `ID`



Parameters
**id** (*int*) – 






---

  



**\_\_init\_\_** *(self, idref)*


Copy an `ID` reference



Parameters
**idref** (`WindowIDRef`) – 






---

  





            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def GetId(self) -> int:
        """ 

`GetId`(*self*)[¶](#wx.WindowIDRef.GetId "Permalink to this definition")
Alias for GetValue allowing the IDRef to be passed as the source parameter to [`wx.EvtHandler.Bind`](wx.EvtHandler.html#wx.EvtHandler.Bind "wx.EvtHandler.Bind").



Return type
*int*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def GetValue(self) -> int:
        """ 

`GetValue`(*self*)[¶](#wx.WindowIDRef.GetValue "Permalink to this definition")
Get the `ID` value



Return type
*int*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __eq__(self, item: Any) -> bool:
        """ 

`__eq__`(*self*, *id*)[¶](#wx.WindowIDRef.__eq__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __ge__(self, id) -> bool:
        """ 

`__ge__`(*self*, *id*)[¶](#wx.WindowIDRef.__ge__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __gt__(self, id) -> bool:
        """ 

`__gt__`(*self*, *id*)[¶](#wx.WindowIDRef.__gt__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __hash__(self) -> None:
        """ 

`__hash__`(*self*)[¶](#wx.WindowIDRef.__hash__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __index__(self) -> int:
        """ 

`__index__`(*self*)[¶](#wx.WindowIDRef.__index__ "Permalink to this definition")
See [`__int__`](#wx.WindowIDRef.__int__ "wx.WindowIDRef.__int__")



Return type
*int*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __int__(self) -> int:
        """ 

`__int__`(*self*)[¶](#wx.WindowIDRef.__int__ "Permalink to this definition")
Alias for GetValue allowing the IDRef to be passed as the WindowID parameter when creating widgets or other places an integer type is needed.



Return type
*int*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __le__(self, id) -> bool:
        """ 

`__le__`(*self*, *id*)[¶](#wx.WindowIDRef.__le__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __lt__(self, id) -> bool:
        """ 

`__lt__`(*self*, *id*)[¶](#wx.WindowIDRef.__lt__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __ne__(self, item: Any) -> bool:
        """ 

`__ne__`(*self*, *id*)[¶](#wx.WindowIDRef.__ne__ "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    def __repr__(self) -> None:
        """ 

`__repr__`(*self*)[¶](#wx.WindowIDRef.__repr__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.WindowIDRef.html
        """

    Id: int  # `Id`[¶](#wx.WindowIDRef.Id "Permalink to this definition")See [`GetId`](#wx.WindowIDRef.GetId "wx.WindowIDRef.GetId")
    Value: int  # `Value`[¶](#wx.WindowIDRef.Value "Permalink to this definition")See [`GetValue`](#wx.WindowIDRef.GetValue "wx.WindowIDRef.GetValue")



_Dialog: TypeAlias = Dialog

class WindowModalDialogEvent(CommandEvent):
    """ **Possible constructors**:



```
WindowModalDialogEvent(commandType=wxEVT_NULL, id=0)

```


Event sent by *Dialog.ShowWindowModal()* when the dialog closes.


  


        Source: https://docs.wxpython.org/wx.WindowModalDialogEvent.html
    """
    def __init__(self, commandType=wxEVT_NULL, id=0) -> None:
        """ 

`__init__`(*self*, *commandType=wxEVT\_NULL*, *id=0*)[¶](#wx.WindowModalDialogEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
* **commandType** (*wx.EventType*) –
* **id** (*int*) –






            Source: https://docs.wxpython.org/wx.WindowModalDialogEvent.html
        """

    def Clone(self) -> 'Event':
        """ 

`Clone`(*self*)[¶](#wx.WindowModalDialogEvent.Clone "Permalink to this definition")
Clone the event.



Return type
 [wx.Event](wx.Event.html#wx-event)






            Source: https://docs.wxpython.org/wx.WindowModalDialogEvent.html
        """

    def GetDialog(self) -> 'Dialog':
        """ 

`GetDialog`(*self*)[¶](#wx.WindowModalDialogEvent.GetDialog "Permalink to this definition")
Return the corresponding dialog.



Return type
 [wx.Dialog](wx.Dialog.html#wx-dialog)






            Source: https://docs.wxpython.org/wx.WindowModalDialogEvent.html
        """

    def GetReturnCode(self) -> int:
        """ 

`GetReturnCode`(*self*)[¶](#wx.WindowModalDialogEvent.GetReturnCode "Permalink to this definition")
Return the dialog’s return code.



Return type
*int*






            Source: https://docs.wxpython.org/wx.WindowModalDialogEvent.html
        """

    Dialog: '_Dialog'  # `Dialog`[¶](#wx.WindowModalDialogEvent.Dialog "Permalink to this definition")See [`GetDialog`](#wx.WindowModalDialogEvent.GetDialog "wx.WindowModalDialogEvent.GetDialog")
    ReturnCode: int  # `ReturnCode`[¶](#wx.WindowModalDialogEvent.ReturnCode "Permalink to this definition")See [`GetReturnCode`](#wx.WindowModalDialogEvent.GetReturnCode "wx.WindowModalDialogEvent.GetReturnCode")



_ImageList: TypeAlias = ImageList

class WithImages:
    """ **Possible constructors**:



```
WithImages()

```


A mixin class to be used with other classes that use a ImageList.


  


        Source: https://docs.wxpython.org/wx.WithImages.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.WithImages.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.WithImages.html
        """

    def AssignImageList(self, imageList: 'ImageList') -> None:
        """ 

`AssignImageList`(*self*, *imageList*)[¶](#wx.WithImages.AssignImageList "Permalink to this definition")
Sets the image list for the page control and takes ownership of the list.


This function exists for compatibility only, please use [`SetImages`](#wx.WithImages.SetImages "wx.WithImages.SetImages") in the new code.



Parameters
**imageList** ([*wx.ImageList*](wx.ImageList.html#wx.ImageList "wx.ImageList")) – 





See also


 [wx.ImageList](wx.ImageList.html#wx-imagelist), [`SetImageList`](#wx.WithImages.SetImageList "wx.WithImages.SetImageList")





            Source: https://docs.wxpython.org/wx.WithImages.html
        """

    def GetImageCount(self) -> int:
        """ 

`GetImageCount`(*self*)[¶](#wx.WithImages.GetImageCount "Permalink to this definition")
Return the number of images in this control.


The returned value may be 0 if there are no images associated with the control.



Return type
*int*





New in version 4.1/wxWidgets-3.1.6.




See also


[`HasImages`](#wx.WithImages.HasImages "wx.WithImages.HasImages")





            Source: https://docs.wxpython.org/wx.WithImages.html
        """

    def GetImageList(self) -> 'ImageList':
        """ 

`GetImageList`(*self*)[¶](#wx.WithImages.GetImageList "Permalink to this definition")
Returns the associated image list, may be `None`.


Note that the new code should use [`GetUpdatedImageListFor`](#wx.WithImages.GetUpdatedImageListFor "wx.WithImages.GetUpdatedImageListFor") instead.



Return type
 [wx.ImageList](wx.ImageList.html#wx-imagelist)





See also


 [wx.ImageList](wx.ImageList.html#wx-imagelist), [`SetImageList`](#wx.WithImages.SetImageList "wx.WithImages.SetImageList")





            Source: https://docs.wxpython.org/wx.WithImages.html
        """

    def GetUpdatedImageListFor(self, win: 'Window') -> 'ImageList':
        """ 

`GetUpdatedImageListFor`(*self*, *win*)[¶](#wx.WithImages.GetUpdatedImageListFor "Permalink to this definition")
Returns the image list updated to reflect the `DPI` scaling used for the given window if possible.


If [`SetImages`](#wx.WithImages.SetImages "wx.WithImages.SetImages") has been called, this function creates the image list containing the images using the `DPI` scaling in effect for the provided *win*, which must be valid.


Otherwise it behaves as [`GetImageList`](#wx.WithImages.GetImageList "wx.WithImages.GetImageList") , i.e. returns the image list previously set using [`SetImageList`](#wx.WithImages.SetImageList "wx.WithImages.SetImageList") or [`AssignImageList`](#wx.WithImages.AssignImageList "wx.WithImages.AssignImageList") , and just returns `None` if none of them had been called.



Parameters
**win** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 



Return type
 [wx.ImageList](wx.ImageList.html#wx-imagelist)



Returns
Possibly null pointer owned by this object, i.e. which must *not* be deleted by the caller.





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.WithImages.html
        """

    def HasImages(self) -> bool:
        """ 

`HasImages`(*self*)[¶](#wx.WithImages.HasImages "Permalink to this definition")
Return `True` if the control has any images associated with it.



Return type
*bool*





New in version 4.1/wxWidgets-3.1.6.




See also


[`GetImageCount`](#wx.WithImages.GetImageCount "wx.WithImages.GetImageCount")





            Source: https://docs.wxpython.org/wx.WithImages.html
        """

    def SetImageList(self, imageList: 'ImageList') -> None:
        """ 

`SetImageList`(*self*, *imageList*)[¶](#wx.WithImages.SetImageList "Permalink to this definition")
Sets the image list to use.


It does not take ownership of the image list, you must delete it yourself.


This function exists for compatibility only, please use [`SetImages`](#wx.WithImages.SetImages "wx.WithImages.SetImages") in the new code.



Parameters
**imageList** ([*wx.ImageList*](wx.ImageList.html#wx.ImageList "wx.ImageList")) – 





See also


 [wx.ImageList](wx.ImageList.html#wx-imagelist), [`AssignImageList`](#wx.WithImages.AssignImageList "wx.WithImages.AssignImageList")





            Source: https://docs.wxpython.org/wx.WithImages.html
        """

    def SetImages(self, images: Vector) -> None:
        """ 

`SetImages`(*self*, *images*)[¶](#wx.WithImages.SetImages "Permalink to this definition")
Set the images to use for the items in the control.


This function allows to specify the images to use in multiple different resolutions, letting the control to select the appropriate one for its `DPI` scaling. For this reason, it should be preferred to using the functions taking  [wx.ImageList](wx.ImageList.html#wx-imagelist), which has a fixed size, in the new code.



Parameters
**images** (*Vector*) – Non empty vector of bitmap bundles. Valid image indexes for the items in this control are determined by the size of this vector.





New in version 4.1/wxWidgets-3.1.6.





            Source: https://docs.wxpython.org/wx.WithImages.html
        """

    ImageCount: int  # `ImageCount`[¶](#wx.WithImages.ImageCount "Permalink to this definition")See [`GetImageCount`](#wx.WithImages.GetImageCount "wx.WithImages.GetImageCount")
    ImageList: '_ImageList'  # `ImageList`[¶](#wx.WithImages.ImageList "Permalink to this definition")See [`GetImageList`](#wx.WithImages.GetImageList "wx.WithImages.GetImageList") and [`SetImageList`](#wx.WithImages.SetImageList "wx.WithImages.SetImageList")



NO_IMAGE: int

class WrapSizer(BoxSizer):
    """ **Possible constructors**:



```
WrapSizer(orient=HORIZONTAL, flags=WRAPSIZER_DEFAULT_FLAGS)

```


A wrap sizer lays out its items in a single line, like a box sizer as
long as there is space available in that direction.


  


        Source: https://docs.wxpython.org/wx.WrapSizer.html
    """
    def __init__(self, orient=HORIZONTAL, flags=WRAPSIZER_DEFAULT_FLAGS) -> None:
        """ 

`__init__`(*self*, *orient=HORIZONTAL*, *flags=WRAPSIZER\_DEFAULT\_FLAGS*)[¶](#wx.WrapSizer.__init__ "Permalink to this definition")
Constructor for a  [wx.WrapSizer](#wx-wrapsizer).


*orient* determines the primary direction of the sizer (the most common case being `HORIZONTAL` ). The flags parameter can be a combination of the values `EXTEND_LAST_ON_EACH_LINE` which will cause the last item on each line to use any remaining space on that line and `REMOVE_LEADING_SPACES` which removes any spacer elements from the beginning of a row.


Both of these flags are on by default.



Parameters
* **orient** (*int*) –
* **flags** (*int*) –






            Source: https://docs.wxpython.org/wx.WrapSizer.html
        """

    def CalcMin(self) -> 'Size':
        """ 

`CalcMin`(*self*)[¶](#wx.WrapSizer.CalcMin "Permalink to this definition")
Implements the calculation of a box sizer’s minimal.


It is used internally only and must not be called by the user. Documented for information.



Return type
 [wx.Size](wx.Size.html#wx-size)






            Source: https://docs.wxpython.org/wx.WrapSizer.html
        """

    def InformFirstDirection(self, direction, size, availableOtherDir) -> bool:
        """ 

`InformFirstDirection`(*self*, *direction*, *size*, *availableOtherDir*)[¶](#wx.WrapSizer.InformFirstDirection "Permalink to this definition")
Not used by an application.


This is the mechanism by which sizers can inform sub-items of the first determined size component. The sub-item can then better determine its size requirements.


Returns `True` if the information was used (and the sub-item min size was updated).



Parameters
* **direction** (*int*) –
* **size** (*int*) –
* **availableOtherDir** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.WrapSizer.html
        """

    def IsSpaceItem(self, item: 'SizerItem') -> bool:
        """ 

`IsSpaceItem`(*self*, *item*)[¶](#wx.WrapSizer.IsSpaceItem "Permalink to this definition")
Can be overridden in the derived classes to treat some normal items as spacers.


This method is used to determine whether the given *item* should be considered to be a spacer for the purposes of `REMOVE_LEADING_SPACES` implementation. By default only returns `True` for the real spacers.



Parameters
**item** ([*wx.SizerItem*](wx.SizerItem.html#wx.SizerItem "wx.SizerItem")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.WrapSizer.html
        """

    def RepositionChildren(self, minSize: Union[tuple[int, int], 'Size']) -> None:
        """ 

`RepositionChildren`(*self*, *minSize*)[¶](#wx.WrapSizer.RepositionChildren "Permalink to this definition")
Method which must be overridden in the derived sizer classes.


The implementation should reposition the children using the current total size available to the sizer ( `m_size` ) and the size computed by the last call to [`CalcMin`](#wx.WrapSizer.CalcMin "wx.WrapSizer.CalcMin") .



Parameters
**minSize** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – 





New in version 4.1/wxWidgets-3.1.3: ,
before this version RecalcSizes() method not taking any arguments had to be overridden in the derived classes instead.





            Source: https://docs.wxpython.org/wx.WrapSizer.html
        """



class XPMHandler(ImageHandler):
    """ **Possible constructors**:



```
XPMHandler()

```


This is the image handler for the XPM format.


  


        Source: https://docs.wxpython.org/wx.XPMHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.XPMHandler.__init__ "Permalink to this definition")
Default constructor for  [wx.XPMHandler](#wx-xpmhandler).




            Source: https://docs.wxpython.org/wx.XPMHandler.html
        """

    def DoCanRead(self, stream: 'InputStream') -> bool:
        """ 

`DoCanRead`(*self*, *stream*)[¶](#wx.XPMHandler.DoCanRead "Permalink to this definition")
Called to test if this handler can read an image from the given stream.


`NOTE`: this function is allowed to change the current stream position since CallDoCanRead() will take care of restoring it later



Parameters
**stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.XPMHandler.html
        """

    def LoadFile(self, image, stream, verbose=True, index=-1) -> bool:
        """ 

`LoadFile`(*self*, *image*, *stream*, *verbose=True*, *index=-1*)[¶](#wx.XPMHandler.LoadFile "Permalink to this definition")
Loads an image from a stream, putting the resulting data into *image*.


If the image file contains more than one image and the image handler is capable of retrieving these individually, *index* indicates which image to read from the stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.InputStream*](wx.InputStream.html#wx.InputStream "wx.InputStream")) – Opened input stream for reading image data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.
* **index** (*int*) – The index of the image in the file (starting from zero).



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`SaveFile`](#wx.XPMHandler.SaveFile "wx.XPMHandler.SaveFile")





            Source: https://docs.wxpython.org/wx.XPMHandler.html
        """

    def SaveFile(self, image, stream, verbose=True) -> bool:
        """ 

`SaveFile`(*self*, *image*, *stream*, *verbose=True*)[¶](#wx.XPMHandler.SaveFile "Permalink to this definition")
Saves an image in the output stream.



Parameters
* **image** ([*wx.Image*](wx.Image.html#wx.Image "wx.Image")) – The image object which is to be affected by this operation.
* **stream** ([*wx.OutputStream*](wx.OutputStream.html#wx.OutputStream "wx.OutputStream")) – Opened output stream for writing the data.
* **verbose** (*bool*) – If set to `True`, errors reported by the image handler will produce LogMessages.



Return type
*bool*



Returns
`True` if the operation succeeded, `False` otherwise.





See also


[`wx.Image.LoadFile`](wx.Image.html#wx.Image.LoadFile "wx.Image.LoadFile") , [`wx.Image.SaveFile`](wx.Image.html#wx.Image.SaveFile "wx.Image.SaveFile") , [`LoadFile`](#wx.XPMHandler.LoadFile "wx.XPMHandler.LoadFile")





            Source: https://docs.wxpython.org/wx.XPMHandler.html
        """



class ZoomGestureEvent(GestureEvent):
    """ **Possible constructors**:



```
ZoomGestureEvent(windid=0)

```


This event is generated when two fingers pinch the surface to zoom in
or out.


  


        Source: https://docs.wxpython.org/wx.ZoomGestureEvent.html
    """
    def __init__(self, windid: int=0) -> None:
        """ 

`__init__`(*self*, *windid=0*)[¶](#wx.ZoomGestureEvent.__init__ "Permalink to this definition")
Constructor.



Parameters
**windid** (*wx.WindowID*) – 






            Source: https://docs.wxpython.org/wx.ZoomGestureEvent.html
        """

    def GetZoomFactor(self) -> float:
        """ 

`GetZoomFactor`(*self*)[¶](#wx.ZoomGestureEvent.GetZoomFactor "Permalink to this definition")
Returns the zoom Factor since the gesture started.


Hence, starting of the gesture is considered as 1:1. A value greater than 1.0 means we should enlarge (or zoom in), a value less than 1.0 means we should shrink (or zoom out).



Return type
*float*






            Source: https://docs.wxpython.org/wx.ZoomGestureEvent.html
        """

    def SetZoomFactor(self, zoomFactor: float) -> None:
        """ 

`SetZoomFactor`(*self*, *zoomFactor*)[¶](#wx.ZoomGestureEvent.SetZoomFactor "Permalink to this definition")
Sets the zoom Factor.



Parameters
**zoomFactor** (*float*) – 






            Source: https://docs.wxpython.org/wx.ZoomGestureEvent.html
        """

    ZoomFactor: float  # `ZoomFactor`[¶](#wx.ZoomGestureEvent.ZoomFactor "Permalink to this definition")See [`GetZoomFactor`](#wx.ZoomGestureEvent.GetZoomFactor "wx.ZoomGestureEvent.GetZoomFactor") and [`SetZoomFactor`](#wx.ZoomGestureEvent.SetZoomFactor "wx.ZoomGestureEvent.SetZoomFactor")



EVT_GESTURE_ZOOM: int  # Process a  wxEVT_GESTURE_ZOOM . ^^

BatteryState: TypeAlias = int  # Enumeration

BATTERY_NORMAL_STATE: int

BATTERY_LOW_STATE: int

BATTERY_CRITICAL_STATE: int

BATTERY_SHUTDOWN_STATE: int

BATTERY_UNKNOWN_STATE: int

KeyCode: TypeAlias = int  # Enumeration

WXK_NONE: int

WXK_CONTROL_A: int

WXK_CONTROL_B: int

WXK_CONTROL_C: int

WXK_CONTROL_D: int

WXK_CONTROL_E: int

WXK_CONTROL_F: int

WXK_CONTROL_G: int

WXK_CONTROL_H: int

WXK_CONTROL_I: int

WXK_CONTROL_J: int

WXK_CONTROL_K: int

WXK_CONTROL_L: int

WXK_CONTROL_M: int

WXK_CONTROL_N: int

WXK_CONTROL_O: int

WXK_CONTROL_P: int

WXK_CONTROL_Q: int

WXK_CONTROL_R: int

WXK_CONTROL_S: int

WXK_CONTROL_T: int

WXK_CONTROL_U: int

WXK_CONTROL_V: int

WXK_CONTROL_W: int

WXK_CONTROL_X: int

WXK_CONTROL_Y: int

WXK_CONTROL_Z: int

WXK_START: int

WXK_LBUTTON: int

WXK_RBUTTON: int

WXK_MBUTTON: int

WXK_CONTROL: int

WXK_RAW_CONTROL: int

WXK_NUMPAD0: int

WXK_NUMPAD1: int

WXK_NUMPAD2: int

WXK_NUMPAD3: int

WXK_NUMPAD4: int

WXK_NUMPAD5: int

WXK_NUMPAD6: int

WXK_NUMPAD7: int

WXK_NUMPAD8: int

WXK_NUMPAD9: int

WXK_MULTIPLY: int

WXK_F1: int

WXK_F2: int

WXK_F3: int

WXK_F4: int

WXK_F5: int

WXK_F6: int

WXK_F7: int

WXK_F8: int

WXK_F9: int

WXK_F10: int

WXK_F11: int

WXK_F12: int

WXK_F13: int

WXK_F14: int

WXK_F15: int

WXK_F16: int

WXK_F17: int

WXK_F18: int

WXK_F19: int

WXK_F20: int

WXK_F21: int

WXK_F22: int

WXK_F23: int

WXK_F24: int

WXK_NUMPAD_F1: int

WXK_NUMPAD_F2: int

WXK_NUMPAD_F3: int

WXK_NUMPAD_F4: int

WXK_SPECIAL1: int

WXK_SPECIAL2: int

WXK_SPECIAL3: int

WXK_SPECIAL4: int

WXK_SPECIAL5: int

WXK_SPECIAL6: int

WXK_SPECIAL7: int

WXK_SPECIAL8: int

WXK_SPECIAL9: int

WXK_SPECIAL10: int

WXK_SPECIAL11: int

WXK_SPECIAL12: int

WXK_SPECIAL13: int

WXK_SPECIAL14: int

WXK_SPECIAL15: int

WXK_SPECIAL16: int

WXK_SPECIAL17: int

WXK_SPECIAL18: int

WXK_SPECIAL19: int

WXK_SPECIAL20: int

WXK_BROWSER_BACK: int

WXK_BROWSER_FORWARD: int

WXK_BROWSER_REFRESH: int

WXK_BROWSER_STOP: int

WXK_BROWSER_SEARCH: int

WXK_BROWSER_FAVORITES: int

WXK_BROWSER_HOME: int

WXK_VOLUME_MUTE: int

WXK_VOLUME_DOWN: int

WXK_VOLUME_UP: int

WXK_MEDIA_NEXT_TRACK: int

WXK_MEDIA_PREV_TRACK: int

WXK_MEDIA_STOP: int

WXK_MEDIA_PLAY_PAUSE: int

WXK_LAUNCH_MAIL: int

WXK_LAUNCH_APP1: int

WXK_LAUNCH_APP2: int

WXK_LAUNCH_0: int

WXK_LAUNCH_1: int

WXK_LAUNCH_2: int

WXK_LAUNCH_3: int

WXK_LAUNCH_4: int

WXK_LAUNCH_5: int

WXK_LAUNCH_6: int

WXK_LAUNCH_7: int

WXK_LAUNCH_8: int

WXK_LAUNCH_9: int

WXK_LAUNCH_A: int

WXK_LAUNCH_B: int

WXK_LAUNCH_C: int

WXK_LAUNCH_D: int

WXK_LAUNCH_E: int

WXK_LAUNCH_F: int

OperatingSystemId: TypeAlias = int  # Enumeration

OS_UNKNOWN: int

OS_MAC_OS: int

OS_MAC_OSX_DARWIN: int

OS_MAC: int

OS_WINDOWS_NT: int

OS_WINDOWS: int

OS_UNIX_LINUX: int

OS_UNIX_FREEBSD: int

OS_UNIX_OPENBSD: int

OS_UNIX_NETBSD: int

OS_UNIX_SOLARIS: int

OS_UNIX_AIX: int

OS_UNIX_HPUX: int

OS_UNIX: int

PowerType: TypeAlias = int  # Enumeration

POWER_SOCKET: int

POWER_BATTERY: int

POWER_UNKNOWN: int

DragResult: TypeAlias = int  # Enumeration

Signal: TypeAlias = int  # Enumeration

SIGNONE: int

SIGHUP: int

SIGINT: int

SIGQUIT: int

SIGILL: int

SIGTRAP: int

SIGABRT: int

SIGEMT: int

SIGFPE: int

SIGKILL: int

SIGBUS: int

SIGSEGV: int

SIGSYS: int

SIGPIPE: int

SIGALRM: int

SIGTERM: int

KillError: TypeAlias = int  # Enumeration

KILL_OK: int

KILL_BAD_SIGNAL: int

KILL_ACCESS_DENIED: int

KILL_NO_PROCESS: int

KILL_ERROR: int

AcceleratorEntryFlags: TypeAlias = int  # Enumeration

ACCEL_NORMAL: int

ACCEL_ALT: int

ACCEL_CTRL: int

ACCEL_SHIFT: int

ACCEL_RAW_CTRL: int

ACCEL_CMD: int

AccStatus: TypeAlias = int  # Enumeration

ACC_FAIL: int

ACC_FALSE: int

ACC_NOT_IMPLEMENTED: int

ACC_INVALID_ARG: int

NavDir: TypeAlias = int  # Enumeration

NAVDIR_FIRSTCHILD: int

NAVDIR_LASTCHILD: int

NAVDIR_DOWN: int

NAVDIR_LEFT: int

NAVDIR_NEXT: int

NAVDIR_PREVIOUS: int

NAVDIR_RIGHT: int

NAVDIR_UP: int

AccObject: TypeAlias = int  # Enumeration

OBJID_WINDOW: int

OBJID_SYSMENU: int

OBJID_TITLEBAR: int

OBJID_MENU: int

OBJID_CLIENT: int

OBJID_VSCROLL: int

OBJID_HSCROLL: int

OBJID_SIZEGRIP: int

OBJID_CARET: int

OBJID_CURSOR: int

OBJID_ALERT: int

OBJID_SOUND: int

AccSelectionFlags: TypeAlias = int  # Enumeration

ACC_SEL_NONE: int

ACC_SEL_TAKEFOCUS: int

ACC_SEL_TAKESELECTION: int

ACC_SEL_EXTENDSELECTION: int

ACC_SEL_ADDSELECTION: int

ACC_SEL_REMOVESELECTION: int

WS_EX_BLOCK_EVENTS: int

ID_OK: int

ID_ANY: int

ID_HIGHEST: int

ID_LOWEST: int

WindowVariant: TypeAlias = int  # Enumeration

WINDOW_VARIANT_NORMAL: int

WINDOW_VARIANT_SMALL: int

WINDOW_VARIANT_MINI: int

WINDOW_VARIANT_LARGE: int

WINDOW_VARIANT_MAX: int

BitmapType: TypeAlias = int  # Enumeration

BITMAP_TYPE_INVALID: int

BITMAP_TYPE_XBM: int

BITMAP_TYPE_XBM_DATA: int

BITMAP_TYPE_XPM_DATA: int

BITMAP_TYPE_TIF: int

BITMAP_TYPE_PICT: int

BITMAP_TYPE_ICON: int

BITMAP_TYPE_IFF: int

BITMAP_TYPE_MACCURSOR: int

BITMAP_TYPE_BMP_RESOURCE: int

BITMAP_TYPE_BMP: int

BITMAP_TYPE_XPM: int

BITMAP_TYPE_XBM: int

BITMAP_TYPE_ICO_RESOURCE: int

BITMAP_TYPE_ICO: int

BITMAP_TYPE_CUR_RESOURCE: int

BITMAP_TYPE_CUR: int

PortId: TypeAlias = int  # Enumeration

PORT_UNKNOWN: int

PORT_BASE: int

PORT_MSW: int

PORT_MOTIF: int

PORT_DFB: int

PORT_X11: int

PORT_MAC: int

PORT_COCOA: int

PORT_QT: int

ID_ABOUT: int

ID_ADD: int

ID_APPLY: int

ID_BACKWARD: int

ID_BOLD: int

ID_BOTTOM: int

ID_CANCEL: int

ID_CDROM: int

ID_CLEAR: int

ID_CLOSE: int

ID_CONVERT: int

ID_COPY: int

ID_CUT: int

ID_DELETE: int

ID_DOWN: int

ID_EDIT: int

ID_EXECUTE: int

ID_EXIT: int

ID_FILE: int

ID_FIND: int

ID_FIRST: int

ID_FLOPPY: int

ID_FORWARD: int

ID_HARDDISK: int

ID_HELP: int

ID_HOME: int

ID_INDENT: int

ID_INDEX: int

ID_INFO: int

ID_ITALIC: int

ID_JUMP_TO: int

ID_JUSTIFY_CENTER: int

ID_JUSTIFY_FILL: int

ID_JUSTIFY_LEFT: int

ID_JUSTIFY_RIGHT: int

ID_LAST: int

ID_NETWORK: int

ID_NEW: int

ID_NO: int

ID_OPEN: int

ID_PASTE: int

ID_PREFERENCES: int

ID_PREVIEW: int

ID_PRINT: int

ID_PROPERTIES: int

ID_REDO: int

ID_REFRESH: int

ID_REMOVE: int

ID_REPLACE: int

ID_REVERT_TO_SAVED: int

ID_SAVE: int

ID_SAVEAS: int

ID_SELECTALL: int

ID_SELECT_COLOR: int

ID_SELECT_FONT: int

ID_SORT_ASCENDING: int

ID_SORT_DESCENDING: int

ID_SPELL_CHECK: int

ID_STOP: int

ID_STRIKETHROUGH: int

ID_TOP: int

ID_UNDELETE: int

ID_UNDERLINE: int

ID_UNDO: int

ID_UNINDENT: int

ID_UP: int

ID_YES: int

ID_ZOOM_100: int

ID_ZOOM_FIT: int

ID_ZOOM_IN: int

ID_ZOOM_OUT: int

RasterOperationMode: TypeAlias = int  # Enumeration

CLEAR: int

INVERT: int

OR_REVERSE: int

OR: int

AND_REVERSE: int

AND: int

AND_INVERT: int

NO_OP: int

NOR: int

EQUIV: int

SRC_INVERT: int

OR_INVERT: int

NAND: int

SET: int

FloodFillStyle: TypeAlias = int  # Enumeration

MappingMode: TypeAlias = int  # Enumeration

MM_TEXT: int

MM_METRIC: int

MM_LOMETRIC: int

MM_TWIPS: int

MM_POINTS: int

Direction: TypeAlias = int  # Enumeration

NORTH: int

SOUTH: int

WEST: int

EAST: int

DIRECTION_MASK: int

DragCopy: int

DragMove: int

BK_TOP: int

BK_BOTTOM: int

BK_LEFT: int

BK_RIGHT: int

BK_DEFAULT: int

def Add(window, proportion=0, flag=0, border=0, userData=None) -> 'SizerItem':
    """ 

`Add`(*window*, *proportion=0*, *flag=0*, *border=0*, *userData=None*)[¶](#Add "Permalink to this definition")
Appends a child to the sizer.



Parameters
* **window** – a window, a spacer or another sizer to be added to the sizer. Its initial size
(either set explicitly by the user or calculated internally) is interpreted as the minimal and
in many cases also the initial size.
* **proportion** (*int*) – this parameter is used in [`wx.BoxSizer`](wx.BoxSizer.html#wx.BoxSizer "wx.BoxSizer") to indicate if a child of a sizer
can change its size in the main orientation of the [`wx.BoxSizer`](wx.BoxSizer.html#wx.BoxSizer "wx.BoxSizer") - where 0 stands for not changeable
and a value of more than zero is interpreted relative to the value of other children of the same
[`wx.BoxSizer`](wx.BoxSizer.html#wx.BoxSizer "wx.BoxSizer"). For example, you might have a horizontal [`wx.BoxSizer`](wx.BoxSizer.html#wx.BoxSizer "wx.BoxSizer") with three children, two
of which are supposed to change their size with the sizer. Then the two stretchable windows would
get a value of 1 each to make them grow and shrink equally with the sizer’s horizontal dimension.
* **flag** (*int*) – OR-combination of flags affecting sizer’s behaviour.
* **border** (*int*) – determines the border width, if the flag parameter is set to include any border flag.
* **userData** (*object*) – allows an extra object to be attached to the sizer item, for use in derived
classes when sizing information is more complex than the proportion and flag will allow for.



Return type
[`wx.SizerItem`](wx.SizerItem.html#wx.SizerItem "wx.SizerItem")






        Source: https://docs.wxpython.org/sizers_overview.html
    """


TOP: int

BOTTOM: int

LEFT: int

RIGHT: int

ALL: int

EXPAND: int

SHAPED: int

FIXED_MINSIZE: int

RESERVE_SPACE_EVEN_IF_HIDDEN: int

ALIGN_CENTER: int

ALIGN_CENTRE: int

ALIGN_LEFT: int

ALIGN_RIGHT: int

ALIGN_TOP: int

ALIGN_BOTTOM: int

ALIGN_CENTER_VERTICAL: int

ALIGN_CENTRE_VERTICAL: int

ALIGN_CENTER_HORIZONTAL: int

ALIGN_CENTRE_HORIZONTAL: int

GROW: int

NORTH: int

WEST: int

BrushStyle: TypeAlias = int  # Enumeration

BRUSHSTYLE_INVALID: int

BRUSHSTYLE_SOLID: int

BRUSHSTYLE_STIPPLE_MASK_OPAQUE: int

BRUSHSTYLE_STIPPLE_MASK: int

BRUSHSTYLE_STIPPLE: int

BRUSHSTYLE_BDIAGONAL_HATCH: int

BRUSHSTYLE_CROSSDIAG_HATCH: int

BRUSHSTYLE_FDIAGONAL_HATCH: int

BRUSHSTYLE_CROSS_HATCH: int

BRUSHSTYLE_HORIZONTAL_HATCH: int

BRUSHSTYLE_VERTICAL_HATCH: int

BRUSHSTYLE_FIRST_HATCH: int

BRUSHSTYLE_LAST_HATCH: int

CheckBoxState: TypeAlias = int  # Enumeration

CHK_UNCHECKED: int

CHK_CHECKED: int

_ListCtrl: TypeAlias = ListCtrl

HitTest: TypeAlias = int  # Enumeration

HT_NOWHERE: int

HT_SCROLLBAR_FIRST: int

HT_SCROLLBAR_ARROW_LINE_1: int

HT_SCROLLBAR_ARROW_LINE_2: int

HT_SCROLLBAR_ARROW_PAGE_1: int

HT_SCROLLBAR_ARROW_PAGE_2: int

HT_SCROLLBAR_THUMB: int

HT_SCROLLBAR_BAR_1: int

HT_SCROLLBAR_BAR_2: int

HT_SCROLLBAR_LAST: int

HT_WINDOW_OUTSIDE: int

HT_WINDOW_INSIDE: int

HT_WINDOW_VERT_SCROLLBAR: int

HT_WINDOW_HORZ_SCROLLBAR: int

HT_WINDOW_CORNER: int

HT_MAX: int

EVT_CLOSE: int

FD_OPEN: int

FD_SAVE: int

FD_OVERWRITE_PROMPT: int

FD_HIDE_READONLY: int

FD_FILE_MUST_EXIST: int

FD_MULTIPLE: int

FD_CHANGE_DIR: int

ID_FILE1: int

ID_FILE9: int

_DragResult: TypeAlias = DragResult

EVT_PAINT: int

DefaultSize: int

EVT_SIZE: int

BackgroundStyle: TypeAlias = int  # Enumeration

BG_STYLE_ERASE: int

BG_STYLE_SYSTEM: int

BG_STYLE_TRANSPARENT: int

Border: TypeAlias = int  # Enumeration

ShowEffect: TypeAlias = int  # Enumeration

SHOW_EFFECT_ROLL_TO_LEFT: int

SHOW_EFFECT_ROLL_TO_RIGHT: int

SHOW_EFFECT_ROLL_TO_TOP: int

SHOW_EFFECT_ROLL_TO_BOTTOM: int

SHOW_EFFECT_SLIDE_TO_LEFT: int

SHOW_EFFECT_SLIDE_TO_RIGHT: int

SHOW_EFFECT_BLEND: int

SHOW_EFFECT_EXPAND: int

SHOW_EFFECT_MAX: int

VERTICAL: int

HORIZONTAL: int

UpdateUI: TypeAlias = int  # Enumeration

UPDATE_UI_NONE: int

UPDATE_UI_RECURSE: int

EllipsizeMode: TypeAlias = int  # Enumeration

ELLIPSIZE_NONE: int

ELLIPSIZE_START: int

ELLIPSIZE_MIDDLE: int

ELLIPSIZE_END: int

EllipsizeFlags: TypeAlias = int  # Enumeration

ELLIPSIZE_FLAGS_NONE: int

ELLIPSIZE_FLAGS_PROCESS_MNEMONICS: int

ELLIPSIZE_FLAGS_EXPAND_TABS: int

ELLIPSIZE_FLAGS_DEFAULT: int

DataFormatId: TypeAlias = int  # Enumeration

DF_SYLK: int

DF_DIF: int

DF_TIFF: int

DF_OEMTEXT: int

DF_DIB: int

DF_PALETTE: int

DF_PENDATA: int

DF_RIFF: int

DF_WAVE: int

DF_ENHMETAFILE: int

DF_LOCALE: int

DF_PRIVATE: int

DF_MAX: int

HeaderSortIconType: TypeAlias = int  # Enumeration

HDR_SORT_ICON_NONE: int

HDR_SORT_ICON_UP: int

HDR_SORT_ICON_DOWN: int

Orientation: TypeAlias = int  # Enumeration

ORIENTATION_MASK: int

DIALOG_ADAPTATION_MODE_DEFAULT: int

DIALOG_ADAPTATION_MODE_ENABLED: int

DIALOG_ADAPTATION_MODE_DISABLED: int

DialogLayoutAdaptationMode: TypeAlias = int  # Enumeration

DIALOG_ADAPTATION_MODE_DEFAULT: int

DIALOG_ADAPTATION_MODE_ENABLED: int

DIALOG_ADAPTATION_MODE_DISABLED: int

EventCategory: TypeAlias = int  # Enumeration

FileHistoryMenuPathStyle: TypeAlias = int  # Enumeration

FH_PATH_SHOW_IF_DIFFERENT: int

FH_PATH_SHOW_NEVER: int

FH_PATH_SHOW_ALWAYS: int

FileSystemOpenFlags: TypeAlias = int  # Enumeration

FSWWarningType: TypeAlias = int  # Enumeration

FSW_WARNING_NONE: int

FSW_WARNING_GENERAL: int

FSW_WARNING_OVERFLOW: int

FindReplaceFlags: TypeAlias = int  # Enumeration

FR_DOWN: int

FR_WHOLEWORD: int

FR_MATCHCASE: int

FlexSizerGrowMode: TypeAlias = int  # Enumeration

DEFAULT: int

DECORATIVE: int

ROMAN: int

SCRIPT: int

SWISS: int

MODERN: int

NORMAL: int

SLANT: int

ITALIC: int

LIGHT: int

BOLD: int

FONTENCODING_XXX: int

FONTENCODING_SYSTEM: int

FONTENCODING_DEFAULT: int

FONTENCODING_KOI8: int

FONTENCODING_ISO8859_5: int

FONTENCODING_CP1251: int

FONTENCODING_CP1250: int

FONTENCODING_CP1252: int

FontSymbolicSize: TypeAlias = int  # Enumeration

FONTSIZE_XX_SMALL: int

FONTSIZE_X_SMALL: int

FONTSIZE_SMALL: int

FONTSIZE_MEDIUM: int

FONTSIZE_LARGE: int

FONTSIZE_X_LARGE: int

FONTSIZE_XX_LARGE: int

FontFlag: TypeAlias = int  # Enumeration

FONTFLAG_DEFAULT: int

FONTFLAG_ITALIC: int

FONTFLAG_SLANT: int

FONTFLAG_LIGHT: int

FONTFLAG_BOLD: int

FONTFLAG_ANTIALIASED: int

FONTFLAG_NOT_ANTIALIASED: int

FONTFLAG_UNDERLINED: int

FONTFLAG_STRIKETHROUGH: int

FONTFLAG_MASK: int

PolygonFillMode: TypeAlias = int  # Enumeration

AntialiasMode: TypeAlias = int  # Enumeration

ANTIALIAS_NONE: int

ANTIALIAS_DEFAULT: int

CompositionMode: TypeAlias = int  # Enumeration

COMPOSITION_INVALID: int

COMPOSITION_CLEAR: int

COMPOSITION_SOURCE: int

COMPOSITION_OVER: int

COMPOSITION_IN: int

COMPOSITION_OUT: int

COMPOSITION_ATOP: int

COMPOSITION_DEST: int

COMPOSITION_DEST_OVER: int

COMPOSITION_DEST_IN: int

COMPOSITION_DEST_OUT: int

COMPOSITION_DEST_ATOP: int

COMPOSITION_XOR: int

COMPOSITION_ADD: int

COMPOSITION_DIFF: int

InterpolationQuality: TypeAlias = int  # Enumeration

INTERPOLATION_DEFAULT: int

INTERPOLATION_NONE: int

INTERPOLATION_FAST: int

INTERPOLATION_GOOD: int

INTERPOLATION_BEST: int

PenStyle: TypeAlias = int  # Enumeration

PENSTYLE_INVALID: int

PENSTYLE_SOLID: int

PENSTYLE_DOT: int

PENSTYLE_LONG_DASH: int

PENSTYLE_SHORT_DASH: int

PENSTYLE_DOT_DASH: int

PENSTYLE_USER_DASH: int

PENSTYLE_STIPPLE_MASK_OPAQUE: int

PENSTYLE_STIPPLE_MASK: int

PENSTYLE_STIPPLE: int

PENSTYLE_BDIAGONAL_HATCH: int

PENSTYLE_CROSSDIAG_HATCH: int

PENSTYLE_FDIAGONAL_HATCH: int

PENSTYLE_CROSS_HATCH: int

PENSTYLE_HORIZONTAL_HATCH: int

PENSTYLE_VERTICAL_HATCH: int

PENSTYLE_FIRST_HATCH: int

PENSTYLE_LAST_HATCH: int

PenCap: TypeAlias = int  # Enumeration

CAP_INVALID: int

CAP_ROUND: int

CAP_PROJECTING: int

CAP_BUTT: int

PenJoin: TypeAlias = int  # Enumeration

JOIN_INVALID: int

JOIN_BEVEL: int

JOIN_MITER: int

JOIN_ROUND: int

PenQuality: TypeAlias = int  # Enumeration

PEN_QUALITY_DEFAULT: int

PEN_QUALITY_LOW: int

PEN_QUALITY_HIGH: int

GradientType: TypeAlias = int  # Enumeration

GRADIENT_NONE: int

GRADIENT_LINEAR: int

GRADIENT_RADIAL: int

Alignment: TypeAlias = int  # Enumeration

ALIGN_INVALID: int

ALIGN_MASK: int

_EllipsizeMode: TypeAlias = EllipsizeMode

_DataFormat: TypeAlias = DataFormat

HelpSearchMode: TypeAlias = int  # Enumeration

HELP_SEARCH_INDEX: int

HELP_SEARCH_ALL: int

IdleMode: TypeAlias = int  # Enumeration

ImageAlphaBlendMode: TypeAlias = int  # Enumeration

IMAGE_ALPHA_BLEND_OVER: int

IMAGE_ALPHA_BLEND_COMPOSE: int

ImageResizeQuality: TypeAlias = int  # Enumeration

IMAGE_QUALITY_NEAREST: int

IMAGE_QUALITY_BILINEAR: int

IMAGE_QUALITY_BICUBIC: int

IMAGE_QUALITY_BOX_AVERAGE: int

IMAGE_QUALITY_NORMAL: int

IMAGE_QUALITY_HIGH: int

KeyModifier: TypeAlias = int  # Enumeration

MOD_NONE: int

MOD_ALTGR: int

MOD_META: int

MOD_RAW_CONTROL: int

MOD_CMD: int

MOD_ALL: int

KeyCategoryFlags: TypeAlias = int  # Enumeration

WXK_CATEGORY_ARROW: int

WXK_CATEGORY_PAGING: int

WXK_CATEGORY_JUMP: int

WXK_CATEGORY_TAB: int

WXK_CATEGORY_CUT: int

WXK_CATEGORY_NAVIGATION: int

ListColumnFormat: TypeAlias = int  # Enumeration

LIST_FORMAT_LEFT: int

LIST_FORMAT_RIGHT: int

LIST_FORMAT_CENTRE: int

LIST_FORMAT_CENTER: int

LocaleInfo: TypeAlias = int  # Enumeration

LOCALE_THOUSANDS_SEP: int

LOCALE_DECIMAL_POINT: int

LOCALE_SHORT_DATE_FMT: int

LOCALE_LONG_DATE_FMT: int

LOCALE_DATE_TIME_FMT: int

LOCALE_TIME_FMT: int

LocaleCategory: TypeAlias = int  # Enumeration

LOCALE_CAT_NUMBER: int

LOCALE_CAT_DATE: int

LOCALE_CAT_MONEY: int

ItemKind: TypeAlias = int  # Enumeration

ITEM_SEPARATOR: int

ITEM_NORMAL: int

ITEM_CHECK: int

ITEM_RADIO: int

ITEM_DROPDOWN: int

ITEM_MAX: int

MouseButton: TypeAlias = int  # Enumeration

MOUSE_BTN_ANY: int

MOUSE_BTN_NONE: int

MOUSE_BTN_LEFT: int

MOUSE_BTN_MIDDLE: int

MOUSE_BTN_RIGHT: int

MOUSE_BTN_AUX1: int

MOUSE_BTN_AUX2: int

MOUSE_BTN_MAX: int

MouseWheelAxis: TypeAlias = int  # Enumeration

MOUSE_WHEEL_VERTICAL: int

MOUSE_WHEEL_HORIZONTAL: int

_VersionInfo: TypeAlias = VersionInfo

PaperSize: TypeAlias = int  # Enumeration

PAPER_10X11: int

PAPER_10X14: int

PAPER_11X17: int

PAPER_12X11: int

PAPER_15X11: int

PAPER_9X11: int

PAPER_A2: int

PAPER_A3: int

PAPER_A3_EXTRA: int

PAPER_A3_EXTRA_TRANSVERSE: int

PAPER_A3_ROTATED: int

PAPER_A3_TRANSVERSE: int

PAPER_A4: int

PAPER_A4SMALL: int

PAPER_A4_EXTRA: int

PAPER_A4_PLUS: int

PAPER_A4_ROTATED: int

PAPER_A4_TRANSVERSE: int

PAPER_A5: int

PAPER_A5_EXTRA: int

PAPER_A5_ROTATED: int

PAPER_A5_TRANSVERSE: int

PAPER_A6: int

PAPER_A6_ROTATED: int

PAPER_A_PLUS: int

PAPER_B4: int

PAPER_B4_JIS_ROTATED: int

PAPER_B5: int

PAPER_B5_EXTRA: int

PAPER_B5_JIS_ROTATED: int

PAPER_B5_TRANSVERSE: int

PAPER_B6_JIS: int

PAPER_B6_JIS_ROTATED: int

PAPER_B_PLUS: int

PAPER_CSHEET: int

PAPER_DBL_JAPANESE_POSTCARD: int

PAPER_DBL_JAPANESE_POSTCARD_ROTATED: int

PAPER_DSHEET: int

PAPER_ENV_10: int

PAPER_ENV_11: int

PAPER_ENV_12: int

PAPER_ENV_14: int

PAPER_ENV_9: int

PAPER_ENV_B4: int

PAPER_ENV_B5: int

PAPER_ENV_B6: int

PAPER_ENV_C3: int

PAPER_ENV_C4: int

PAPER_ENV_C5: int

PAPER_ENV_C6: int

PAPER_ENV_C65: int

PAPER_ENV_DL: int

PAPER_ENV_INVITE: int

PAPER_ENV_ITALY: int

PAPER_ENV_MONARCH: int

PAPER_ENV_PERSONAL: int

PAPER_ESHEET: int

PAPER_EXECUTIVE: int

PAPER_FANFOLD_LGL_GERMAN: int

PAPER_FANFOLD_STD_GERMAN: int

PAPER_FANFOLD_US: int

PAPER_FOLIO: int

PAPER_ISO_B4: int

PAPER_JAPANESE_POSTCARD: int

PAPER_JAPANESE_POSTCARD_ROTATED: int

PAPER_JENV_CHOU3: int

PAPER_JENV_CHOU3_ROTATED: int

PAPER_JENV_CHOU4: int

PAPER_JENV_CHOU4_ROTATED: int

PAPER_JENV_KAKU2: int

PAPER_JENV_KAKU2_ROTATED: int

PAPER_JENV_KAKU3: int

PAPER_JENV_KAKU3_ROTATED: int

PAPER_JENV_YOU4: int

PAPER_JENV_YOU4_ROTATED: int

PAPER_LEDGER: int

PAPER_LEGAL: int

PAPER_LEGAL_EXTRA: int

PAPER_LETTER: int

PAPER_LETTERSMALL: int

PAPER_LETTER_EXTRA: int

PAPER_LETTER_EXTRA_TRANSVERSE: int

PAPER_LETTER_PLUS: int

PAPER_LETTER_ROTATED: int

PAPER_LETTER_TRANSVERSE: int

PAPER_NONE: int

PAPER_NOTE: int

PAPER_P16K: int

PAPER_P16K_ROTATED: int

PAPER_P32K: int

PAPER_P32KBIG: int

PAPER_P32KBIG_ROTATED: int

PAPER_P32K_ROTATED: int

PAPER_PENV_1: int

PAPER_PENV_10: int

PAPER_PENV_10_ROTATED: int

PAPER_PENV_1_ROTATED: int

PAPER_PENV_2: int

PAPER_PENV_2_ROTATED: int

PAPER_PENV_3: int

PAPER_PENV_3_ROTATED: int

PAPER_PENV_4: int

PAPER_PENV_4_ROTATED: int

PAPER_PENV_5: int

PAPER_PENV_5_ROTATED: int

PAPER_PENV_6: int

PAPER_PENV_6_ROTATED: int

PAPER_PENV_7: int

PAPER_PENV_7_ROTATED: int

PAPER_PENV_8: int

PAPER_PENV_8_ROTATED: int

PAPER_PENV_9: int

PAPER_PENV_9_ROTATED: int

PAPER_QUARTO: int

PAPER_STATEMENT: int

PAPER_TABLOID: int

PAPER_TABLOID_EXTRA: int

Bitness: TypeAlias = int  # Enumeration

BITNESS_INVALID: int

BITNESS_32: int

BITNESS_64: int

BITNESS_MAX: int

Endianness: TypeAlias = int  # Enumeration

ENDIAN_INVALID: int

ENDIAN_BIG: int

ENDIAN_LITTLE: int

ENDIAN_PDP: int

ENDIAN_MAX: int

Architecture: TypeAlias = int  # Enumeration

ARCH_INVALID: int

ARCH_32: int

ARCH_64: int

ARCH_MAX: int

PowerResourceKind: TypeAlias = int  # Enumeration

POWER_RESOURCE_SCREEN: int

POWER_RESOURCE_SYSTEM: int

PrintBin: TypeAlias = int  # Enumeration

PRINTBIN_DEFAULT: int

PRINTBIN_ONLYONE: int

PRINTBIN_LOWER: int

PRINTBIN_MIDDLE: int

PRINTBIN_MANUAL: int

PRINTBIN_ENVELOPE: int

PRINTBIN_ENVMANUAL: int

PRINTBIN_AUTO: int

PRINTBIN_TRACTOR: int

PRINTBIN_SMALLFMT: int

PRINTBIN_LARGEFMT: int

PRINTBIN_LARGECAPACITY: int

PRINTBIN_CASSETTE: int

PRINTBIN_FORMSOURCE: int

PRINTBIN_USER: int

DuplexMode: TypeAlias = int  # Enumeration

PrintOrientation: TypeAlias = int  # Enumeration

PrintMode: TypeAlias = int  # Enumeration

PRINT_MODE_NONE: int

PRINT_MODE_PREVIEW: int

PRINT_MODE_FILE: int

PRINT_MODE_PRINTER: int

PRINT_MODE_STREAM: int

PrinterError: TypeAlias = int  # Enumeration

AppAssertMode: TypeAlias = int  # Enumeration

APP_ASSERT_SUPPRESS: int

APP_ASSERT_EXCEPTION: int

APP_ASSERT_DIALOG: int

APP_ASSERT_LOG: int

ScrollbarVisibility: TypeAlias = int  # Enumeration

SP_3D: int

SplitMode: TypeAlias = int  # Enumeration

StreamError: TypeAlias = int  # Enumeration

STREAM_NO_ERROR: int

STREAM_EOF: int

STREAM_WRITE_ERROR: int

STREAM_READ_ERROR: int

SVGShapeRenderingMode: TypeAlias = int  # Enumeration

SVG_SHAPE_RENDERING_OPTIMIZE_SPEED: int

SVG_SHAPE_RENDERING_CRISP_EDGES: int

SVG_SHAPE_RENDERING_GEOMETRIC_PRECISION: int

SVG_SHAPE_RENDERING_OPTIMISE_SPEED: int

SystemColour: TypeAlias = int  # Enumeration

SYS_COLOUR_SCROLLBAR: int

SYS_COLOUR_DESKTOP: int

SYS_COLOUR_ACTIVECAPTION: int

SYS_COLOUR_INACTIVECAPTION: int

SYS_COLOUR_MENU: int

SYS_COLOUR_WINDOW: int

SYS_COLOUR_WINDOWFRAME: int

SYS_COLOUR_MENUTEXT: int

SYS_COLOUR_WINDOWTEXT: int

SYS_COLOUR_CAPTIONTEXT: int

SYS_COLOUR_ACTIVEBORDER: int

SYS_COLOUR_INACTIVEBORDER: int

SYS_COLOUR_APPWORKSPACE: int

SYS_COLOUR_HIGHLIGHT: int

SYS_COLOUR_HIGHLIGHTTEXT: int

SYS_COLOUR_BTNFACE: int

SYS_COLOUR_BTNSHADOW: int

SYS_COLOUR_GRAYTEXT: int

SYS_COLOUR_BTNTEXT: int

SYS_COLOUR_INACTIVECAPTIONTEXT: int

SYS_COLOUR_BTNHIGHLIGHT: int

SYS_COLOUR_3DDKSHADOW: int

SYS_COLOUR_3DLIGHT: int

SYS_COLOUR_INFOTEXT: int

SYS_COLOUR_INFOBK: int

SYS_COLOUR_LISTBOX: int

SYS_COLOUR_HOTLIGHT: int

SYS_COLOUR_GRADIENTACTIVECAPTION: int

SYS_COLOUR_GRADIENTINACTIVECAPTION: int

SYS_COLOUR_MENUHILIGHT: int

SYS_COLOUR_MENUBAR: int

SYS_COLOUR_LISTBOXTEXT: int

SYS_COLOUR_LISTBOXHIGHLIGHTTEXT: int

SYS_COLOUR_BACKGROUND: int

SYS_COLOUR_3DFACE: int

SYS_COLOUR_3DSHADOW: int

SYS_COLOUR_BTNHILIGHT: int

SYS_COLOUR_3DHIGHLIGHT: int

SYS_COLOUR_3DHILIGHT: int

SYS_COLOUR_FRAMEBK: int

SystemFont: TypeAlias = int  # Enumeration

SYS_OEM_FIXED_FONT: int

SYS_ANSI_FIXED_FONT: int

SYS_ANSI_VAR_FONT: int

SYS_SYSTEM_FONT: int

SYS_DEVICE_DEFAULT_FONT: int

SYS_DEFAULT_GUI_FONT: int

SystemMetric: TypeAlias = int  # Enumeration

SYS_MOUSE_BUTTONS: int

SYS_BORDER_X: int

SYS_BORDER_Y: int

SYS_CURSOR_Y: int

SYS_DCLICK_X: int

SYS_DCLICK_Y: int

SYS_DRAG_X: int

SYS_DRAG_Y: int

SYS_EDGE_X: int

SYS_EDGE_Y: int

SYS_HSCROLL_ARROW_X: int

SYS_HSCROLL_ARROW_Y: int

SYS_HTHUMB_X: int

SYS_ICON_X: int

SYS_ICON_Y: int

SYS_ICONSPACING_X: int

SYS_ICONSPACING_Y: int

SYS_WINDOWMIN_X: int

SYS_WINDOWMIN_Y: int

SYS_SCREEN_X: int

SYS_SCREEN_Y: int

SYS_FRAMESIZE_X: int

SYS_FRAMESIZE_Y: int

SYS_SMALLICON_X: int

SYS_SMALLICON_Y: int

SYS_HSCROLL_Y: int

SYS_VSCROLL_X: int

SYS_VSCROLL_ARROW_X: int

SYS_VSCROLL_ARROW_Y: int

SYS_VTHUMB_Y: int

SYS_MENU_Y: int

SYS_NETWORK_PRESENT: int

SYS_PENWINDOWS_PRESENT: int

SYS_SHOW_SOUNDS: int

SYS_SWAP_BUTTONS: int

SYS_DCLICK_MSEC: int

SYS_CARET_ON_MSEC: int

SYS_CARET_OFF_MSEC: int

SYS_CARET_TIMEOUT_MSEC: int

SystemScreenType: TypeAlias = int  # Enumeration

SYS_SCREEN_NONE: int

SYS_SCREEN_TINY: int

SYS_SCREEN_PDA: int

SYS_SCREEN_SMALL: int

SYS_SCREEN_DESKTOP: int

SystemFeature: TypeAlias = int  # Enumeration

SYS_CAN_DRAW_FRAME_DECORATIONS: int

SYS_CAN_ICONIZE_FRAME: int

SYS_TABLET_PRESENT: int

TextAttrLineSpacing: TypeAlias = int  # Enumeration

TEXT_ATTR_LINE_SPACING_NORMAL: int

TEXT_ATTR_LINE_SPACING_HALF: int

TEXT_ATTR_LINE_SPACING_TWICE: int

TextAttrAlignment: TypeAlias = int  # Enumeration

TEXT_ALIGNMENT_DEFAULT: int

TEXT_ALIGNMENT_LEFT: int

TEXT_ALIGNMENT_CENTRE: int

TEXT_ALIGNMENT_CENTER: int

TEXT_ALIGNMENT_RIGHT: int

TextAttrBulletStyle: TypeAlias = int  # Enumeration

TEXT_ATTR_BULLET_STYLE_NONE: int

TEXT_ATTR_BULLET_STYLE_ARABIC: int

TEXT_ATTR_BULLET_STYLE_LETTERS_UPPER: int

TEXT_ATTR_BULLET_STYLE_LETTERS_LOWER: int

TEXT_ATTR_BULLET_STYLE_ROMAN_UPPER: int

TEXT_ATTR_BULLET_STYLE_ROMAN_LOWER: int

TEXT_ATTR_BULLET_STYLE_SYMBOL: int

TEXT_ATTR_BULLET_STYLE_PARENTHESES: int

TEXT_ATTR_BULLET_STYLE_PERIOD: int

TEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS: int

TEXT_ATTR_BULLET_STYLE_OUTLINE: int

TEXT_ATTR_BULLET_STYLE_ALIGN_LEFT: int

TEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT: int

TEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE: int

TEXT_ATTR_BULLET_STYLE_CONTINUATION: int

TextAttrUnderlineType: TypeAlias = int  # Enumeration

TEXT_ATTR_UNDERLINE_NONE: int

TextAttrFlags: TypeAlias = int  # Enumeration

TEXT_ATTR_TEXT_COLOUR: int

TEXT_ATTR_BACKGROUND_COLOUR: int

TEXT_ATTR_FONT_FACE: int

TEXT_ATTR_FONT_POINT_SIZE: int

TEXT_ATTR_FONT_PIXEL_SIZE: int

TEXT_ATTR_FONT_WEIGHT: int

TEXT_ATTR_FONT_ITALIC: int

TEXT_ATTR_FONT_UNDERLINE: int

TEXT_ATTR_FONT_STRIKETHROUGH: int

TEXT_ATTR_FONT_ENCODING: int

TEXT_ATTR_FONT_FAMILY: int

TEXT_ATTR_FONT_SIZE: int

TEXT_ATTR_FONT: int

TEXT_ATTR_ALIGNMENT: int

TEXT_ATTR_LEFT_INDENT: int

TEXT_ATTR_RIGHT_INDENT: int

TEXT_ATTR_TABS: int

TEXT_ATTR_PARA_SPACING_AFTER: int

TEXT_ATTR_PARA_SPACING_BEFORE: int

TEXT_ATTR_LINE_SPACING: int

TEXT_ATTR_CHARACTER_STYLE_NAME: int

TEXT_ATTR_PARAGRAPH_STYLE_NAME: int

TEXT_ATTR_LIST_STYLE_NAME: int

TEXT_ATTR_BULLET_STYLE: int

TEXT_ATTR_BULLET_NUMBER: int

TEXT_ATTR_BULLET_TEXT: int

TEXT_ATTR_BULLET_NAME: int

TEXT_ATTR_BULLET: int

TEXT_ATTR_PAGE_BREAK: int

TEXT_ATTR_OUTLINE_LEVEL: int

TEXT_ATTR_AVOID_PAGE_BREAK_BEFORE: int

TEXT_ATTR_AVOID_PAGE_BREAK_AFTER: int

TEXT_ATTR_CHARACTER: int

TEXT_ATTR_PARAGRAPH: int

TEXT_ATTR_ALL: int

TextAttrEffects: TypeAlias = int  # Enumeration

TEXT_ATTR_EFFECT_NONE: int

TEXT_ATTR_EFFECT_SMALL_CAPITALS: int

TEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH: int

TEXT_ATTR_EFFECT_SHADOW: int

TEXT_ATTR_EFFECT_EMBOSS: int

TEXT_ATTR_EFFECT_OUTLINE: int

TEXT_ATTR_EFFECT_ENGRAVE: int

TEXT_ATTR_EFFECT_RTL: int

TEXT_ATTR_EFFECT_SUPPRESS_HYPHENATION: int

TextCtrlHitTestResult: TypeAlias = int  # Enumeration

TE_HT_UNKNOWN: int

TE_HT_BEFORE: int

TE_HT_ON_TEXT: int

TE_HT_BELOW: int

TE_HT_BEYOND: int

ContentProtection: TypeAlias = int  # Enumeration

CONTENT_PROTECTION_NONE: int

CONTENT_PROTECTION_ENABLED: int

EVT_TREE_ITEM_EXPANDING: int

UpdateUIMode: TypeAlias = int  # Enumeration

_FileSystem: TypeAlias = FileSystem

ID_NONE: int

_SizerItem: TypeAlias = SizerItem

TextFileType: TypeAlias = int  # Enumeration

def HtmlWinParser_AddTagHandler(tagHandlerClass) -> None:
    """ 

`wx.html.``HtmlWinParser_AddTagHandler`(*tagHandlerClass*)[¶](#wx.html.HtmlWinParser_AddTagHandler "Permalink to this definition")


        Source: https://docs.wxpython.org/wx.html.functions.html
    """


Coord: TypeAlias = Any

Char: TypeAlias = Any

Double: TypeAlias = Any

CommandList: TypeAlias = Any

WindowList: TypeAlias = list['Window']  # WindowList is a type-safe List-like class whose elements are of type Window* .

intshort: TypeAlias = int

FileHistoryMenuList: TypeAlias = 'Menu'

MessageDialogButtonLabel: TypeAlias = str

SizerItemList: TypeAlias = list['SizerItem']

Edge: TypeAlias = int

MenuItemList: TypeAlias = list['MenuItem']

ObjectRefData: TypeAlias = Any

PrintQuality: TypeAlias = int

Point2DDouble: TypeAlias = Any

TextPos: TypeAlias = int

ClientData: TypeAlias = Any

PyUserData: TypeAlias = Any

FileOffset: TypeAlias = int

WeekDay: TypeAlias = int

value_type: TypeAlias = bytes

Byte: TypeAlias = bytes

ArtClient: TypeAlias = Any

Vector: TypeAlias = Any

LongLong_t: TypeAlias = Any

ArrayVideoModes: TypeAlias = list['VideoMode']

MsgCatalog: TypeAlias = Any

SIP_SSIZE_T: TypeAlias = int

RGBValue: TypeAlias = 'Image.RGBValue'

HSVValue: TypeAlias = 'Image.HSVValue'

Relationship: TypeAlias = int  # Enumeration

LogLevel: TypeAlias = int  # Enumeration

PlatformInfo: TypeAlias = tuple[str, str, str, str, str, str, str, str, str, str]

PreviewFrameModalityKind: TypeAlias = int  # Enumeration

Rect2DDouble: TypeAlias = Any

OutCode: TypeAlias = int  # Enumeration

RegionContain: TypeAlias = int  # Enumeration

Dir: TypeAlias = 'StandardPaths.Dir'  # Enumeration

ScaleMode: TypeAlias = 'StaticBitmap.ScaleMode'  # Enumeration

res: TypeAlias = Any

void: TypeAlias = Any

Uint16: TypeAlias = int

MemoryBuffer: TypeAlias = Any

Calendar: TypeAlias = int  # Enumeration

GROW: int  # Synonym of wx.EXPAND

RA_HORIZONTAL: int  # Synonym of wx.HORIZONTAL

RA_VERTICAL: int  # Synonym of wx.VERTICAL

NORMAL: int

DEFAULT: int

wxEVT_COMMAND_BUTTON_CLICKED: int

RED: 'Colour'

YELLOW: 'Colour'

BLUE: 'Colour'

GREEN: 'Colour'

CYAN: 'Colour'

OPEN: int

NullBitmap: 'Bitmap'

EVT_TIMER: int

class FrozenWindow(ContextManager):
    """ Freeze the window and all its children.
    """
    def __init__(self, window: 'Window') -> None:
        """ Constructor
        """

    def __enter__(self) -> None:
        """ Enter the context manager.
        """

    def __exit__(self, *args, **kwargs) -> None:
        """ Exit the context manager.
        """



NullCursor: 'Cursor'

LIST_AUTOSIZE: int

DefaultValidator: 'Validator'

DefaultPosition: 'Position'

TREE_HITTEST_ABOVE: int  # Above the client area.

TREE_HITTEST_BELOW: int  # Below the client area.

TREE_HITTEST_NOWHERE: int  # In the client area but below the last item.

TREE_HITTEST_ONITEMBUTTON: int  # On the button associated with an item.

TREE_HITTEST_ONITEMICON: int  # On the bitmap associated with an item.

TREE_HITTEST_ONITEMINDENT: int  # In the indentation associated with an item.

TREE_HITTEST_ONITEMLABEL: int  # On the label (string) associated with an item.

TREE_HITTEST_ONITEMRIGHT: int  # In the area to the right of an item.

TREE_HITTEST_ONITEMSTATEICON: int  # On the state icon for a tree view item that is in a user-defined state.

TREE_HITTEST_TOLEFT: int  # To the right of the client area.

TREE_HITTEST_TORIGHT: int  # To the left of the client area.

wxEVT_COMMAND_TREE_END_DRAG: int

TheColourDatabase: 'ColourDatabase'

TheClipboard: 'Clipboard'

DD_NEW_DIR_BUTTON: int

SOLID: int

GREY: int

CHOICEDLG_STYLE: int

TRANSPARENT: int

LOG_FatalError: int

LOG_Error: int

EVT_CALENDAR_DAY: int

