# -*- coding: utf-8 -*-
from typing import Any, ContextManager, Optional, Union, TypeAlias

from .. import CommandEvent, _MouseEvent, _Point, MouseEvent, Point, Window, VisualAttributes, HtmlListBox, ItemContainer, Dialog, Frame, HelpControllerBase, Object, Cursor, PageSetupDialogData, _PrintData, PrintData, Printout, HtmlWindowInterface, VListBox, _FileSystem, FileSystem, Colour, FSFile, HtmlParser, _DC, Font, DC, HtmlCell, HtmlTagHandler, Coord, HtmlWordCell

class HtmlCellEvent(CommandEvent):
    """ **Possible constructors**:



```
HtmlCellEvent(commandType, id, cell, point, ev)

```


This event class is used for the events generated by HtmlWindow.


  


        Source: https://docs.wxpython.org/wx.html.HtmlCellEvent.html
    """
    def __init__(self, commandType, id, cell, point, ev) -> None:
        """ 

`__init__`(*self*, *commandType*, *id*, *cell*, *point*, *ev*)[¶](#wx.html.HtmlCellEvent.__init__ "Permalink to this definition")
The constructor is not normally used by the user code.



Parameters
* **commandType** (*wx.EventType*) –
* **id** (*int*) –
* **cell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) –
* **point** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **ev** ([*wx.MouseEvent*](wx.MouseEvent.html#wx.MouseEvent "wx.MouseEvent")) –






            Source: https://docs.wxpython.org/wx.html.HtmlCellEvent.html
        """

    def GetCell(self) -> 'HtmlCell':
        """ 

`GetCell`(*self*)[¶](#wx.html.HtmlCellEvent.GetCell "Permalink to this definition")
Returns the  [wx.html.HtmlCellEvent](#wx-html-htmlcellevent) associated with the event.



Return type
 [wx.html.HtmlCell](wx.html.HtmlCell.html#wx-html-htmlcell)






            Source: https://docs.wxpython.org/wx.html.HtmlCellEvent.html
        """

    def GetLinkClicked(self) -> bool:
        """ 

`GetLinkClicked`(*self*)[¶](#wx.html.HtmlCellEvent.GetLinkClicked "Permalink to this definition")
Returns `True` if SetLinkClicked(true) has previously been called; `False` otherwise.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlCellEvent.html
        """

    def GetMouseEvent(self) -> 'MouseEvent':
        """ 

`GetMouseEvent`(*self*)[¶](#wx.html.HtmlCellEvent.GetMouseEvent "Permalink to this definition")
Returns the  [wx.MouseEvent](wx.MouseEvent.html#wx-mouseevent) associated with the event.



Return type
[`MouseEvent`](#wx.html.HtmlCellEvent.MouseEvent "wx.html.HtmlCellEvent.MouseEvent")






            Source: https://docs.wxpython.org/wx.html.HtmlCellEvent.html
        """

    def GetPoint(self) -> 'Point':
        """ 

`GetPoint`(*self*)[¶](#wx.html.HtmlCellEvent.GetPoint "Permalink to this definition")
Returns the  [wx.Point](wx.Point.html#wx-point) associated with the event.



Return type
[`Point`](#wx.html.HtmlCellEvent.Point "wx.html.HtmlCellEvent.Point")






            Source: https://docs.wxpython.org/wx.html.HtmlCellEvent.html
        """

    def SetLinkClicked(self, linkclicked: bool) -> None:
        """ 

`SetLinkClicked`(*self*, *linkclicked*)[¶](#wx.html.HtmlCellEvent.SetLinkClicked "Permalink to this definition")
Call this function with *linkclicked* set to `True` if the cell which has been clicked contained a link or `False` otherwise (which is the default).


With this function the event handler can return info to the  [wx.html.HtmlWindow](wx.html.HtmlWindow.html#wx-html-htmlwindow) which sent the event.



Parameters
**linkclicked** (*bool*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlCellEvent.html
        """

    Cell: 'HtmlCell'  # `Cell`[¶](#wx.html.HtmlCellEvent.Cell "Permalink to this definition")See [`GetCell`](#wx.html.HtmlCellEvent.GetCell "wx.html.HtmlCellEvent.GetCell")
    LinkClicked: bool  # `LinkClicked`[¶](#wx.html.HtmlCellEvent.LinkClicked "Permalink to this definition")See [`GetLinkClicked`](#wx.html.HtmlCellEvent.GetLinkClicked "wx.html.HtmlCellEvent.GetLinkClicked") and [`SetLinkClicked`](#wx.html.HtmlCellEvent.SetLinkClicked "wx.html.HtmlCellEvent.SetLinkClicked")
    MouseEvent: '_MouseEvent'  # `MouseEvent`[¶](#wx.html.HtmlCellEvent.MouseEvent "Permalink to this definition")See [`GetMouseEvent`](#wx.html.HtmlCellEvent.GetMouseEvent "wx.html.HtmlCellEvent.GetMouseEvent")
    Point: '_Point'  # `Point`[¶](#wx.html.HtmlCellEvent.Point "Permalink to this definition")See [`GetPoint`](#wx.html.HtmlCellEvent.GetPoint "wx.html.HtmlCellEvent.GetPoint")



EVT_HTML_CELL_HOVER: int  # User moved the mouse over a   wx.html.HtmlCell.

EVT_HTML_CELL_CLICKED: int  # User clicked on a   wx.html.HtmlCell. When handling this event, remember to use HtmlCell.SetLinkClicked(true) if the cell contains a link. ^^

class HtmlLinkEvent(CommandEvent):
    """ **Possible constructors**:



```
HtmlLinkEvent(id, linkinfo)

```


This event class is used for the events generated by HtmlWindow.


  


        Source: https://docs.wxpython.org/wx.html.HtmlLinkEvent.html
    """
    def __init__(self, id, linkinfo) -> None:
        """ 

`__init__`(*self*, *id*, *linkinfo*)[¶](#wx.html.HtmlLinkEvent.__init__ "Permalink to this definition")
The constructor is not normally used by the user code.



Parameters
* **id** (*int*) –
* **linkinfo** ([*wx.html.HtmlLinkInfo*](wx.html.HtmlLinkInfo.html#wx.html.HtmlLinkInfo "wx.html.HtmlLinkInfo")) –






            Source: https://docs.wxpython.org/wx.html.HtmlLinkEvent.html
        """

    def GetLinkInfo(self) -> 'HtmlLinkInfo':
        """ 

`GetLinkInfo`(*self*)[¶](#wx.html.HtmlLinkEvent.GetLinkInfo "Permalink to this definition")
Returns the  [wx.html.HtmlLinkInfo](wx.html.HtmlLinkInfo.html#wx-html-htmllinkinfo) which contains info about the cell clicked and the hyperlink it contains.



Return type
 [wx.html.HtmlLinkInfo](wx.html.HtmlLinkInfo.html#wx-html-htmllinkinfo)






            Source: https://docs.wxpython.org/wx.html.HtmlLinkEvent.html
        """

    LinkInfo: 'HtmlLinkInfo'  # `LinkInfo`[¶](#wx.html.HtmlLinkEvent.LinkInfo "Permalink to this definition")See [`GetLinkInfo`](#wx.html.HtmlLinkEvent.GetLinkInfo "wx.html.HtmlLinkEvent.GetLinkInfo")



EVT_HTML_LINK_CLICKED: int  # User clicked on a hyperlink. ^^

class HtmlHelpWindow(Window):
    """ **Possible constructors**:



```
HtmlHelpWindow(data=None)

HtmlHelpWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
               style=TAB_TRAVERSAL|BORDER_NONE, helpStyle=HF_DEFAULT_STYLE, data=None)

```


This class is used by HtmlHelpController to display help within a
frame or dialog, but you can use it yourself to create an embedded
HTML help window.


  


        Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlHelpWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, data=None)*



Parameters
**data** ([*wx.html.HtmlHelpData*](wx.html.HtmlHelpData.html#wx.html.HtmlHelpData "wx.html.HtmlHelpData")) – 






---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=TAB\_TRAVERSAL|BORDER\_NONE, helpStyle=HF\_DEFAULT\_STYLE, data=None)*


Constructor.


For the values of *helpStyle*, please see the documentation for  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*int*) –
* **helpStyle** (*int*) –
* **data** ([*wx.html.HtmlHelpData*](wx.html.HtmlHelpData.html#wx.html.HtmlHelpData "wx.html.HtmlHelpData")) –






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def AddToolbarButtons(self, toolBar, style) -> None:
        """ 

`AddToolbarButtons`(*self*, *toolBar*, *style*)[¶](#wx.html.HtmlHelpWindow.AddToolbarButtons "Permalink to this definition")
You may override this virtual method to add more buttons to the help window’s toolbar.


*toolBar* is a pointer to the toolbar and *style* is the style flag as passed to the [`Create`](#wx.html.HtmlHelpWindow.Create "wx.html.HtmlHelpWindow.Create") method.


[`wx.ToolBar.Realize`](wx.ToolBar.html#wx.ToolBar.Realize "wx.ToolBar.Realize") is called immediately after returning from this function. See `samples/html/helpview` for an example.



Parameters
* **toolBar** ([*wx.ToolBar*](wx.ToolBar.html#wx.ToolBar "wx.ToolBar")) –
* **style** (*int*) –






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TAB_TRAVERSAL|BORDER_NONE, helpStyle=HF_DEFAULT_STYLE) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=TAB\_TRAVERSAL|BORDER\_NONE*, *helpStyle=HF\_DEFAULT\_STYLE*)[¶](#wx.html.HtmlHelpWindow.Create "Permalink to this definition")
Creates the help window.


See [the constructor](#wx-html-htmlhelpwindow) for a description of the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*int*) –
* **helpStyle** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def CreateContents(self) -> None:
        """ 

`CreateContents`(*self*)[¶](#wx.html.HtmlHelpWindow.CreateContents "Permalink to this definition")
Creates contents panel.


(May take some time.)




            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def CreateIndex(self) -> None:
        """ 

`CreateIndex`(*self*)[¶](#wx.html.HtmlHelpWindow.CreateIndex "Permalink to this definition")
Creates index panel.


(May take some time.)




            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def CreateSearch(self) -> None:
        """ 

`CreateSearch`(*self*)[¶](#wx.html.HtmlHelpWindow.CreateSearch "Permalink to this definition")
Creates search panel.




            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def Display(self, *args, **kw) -> bool:
        """ 

`Display`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlHelpWindow.Display "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Display** *(self, x)*


Displays page x.


If not found it will give the user the choice of searching books. Looking for the page runs in these steps:


* try to locate file named x (if x is for example “doc/howto.htm”)
* try to open starting page of book x
* try to find x in contents (if x is for example “How To …”)
* try to find x in index (if x is for example “How To …”)



Parameters
**x** (*string*) – 



Return type
*bool*






---

  



**Display** *(self, id)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**id** (*int*) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def DisplayContents(self) -> bool:
        """ 

`DisplayContents`(*self*)[¶](#wx.html.HtmlHelpWindow.DisplayContents "Permalink to this definition")
Displays contents panel.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def DisplayIndex(self) -> bool:
        """ 

`DisplayIndex`(*self*)[¶](#wx.html.HtmlHelpWindow.DisplayIndex "Permalink to this definition")
Displays index panel.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.html.HtmlHelpWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
*VisualAttributes*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def GetController(self) -> 'HtmlHelpController':
        """ 

`GetController`(*self*)[¶](#wx.html.HtmlHelpWindow.GetController "Permalink to this definition")

Return type
 [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def GetData(self) -> 'HtmlHelpData':
        """ 

`GetData`(*self*)[¶](#wx.html.HtmlHelpWindow.GetData "Permalink to this definition")
Returns the  [wx.html.HtmlHelpData](wx.html.HtmlHelpData.html#wx-html-htmlhelpdata) object, which is usually a pointer to the controller’s data.



Return type
 [wx.html.HtmlHelpData](wx.html.HtmlHelpData.html#wx-html-htmlhelpdata)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def KeywordSearch(self, keyword, mode=HELP_SEARCH_ALL) -> bool:
        """ 

`KeywordSearch`(*self*, *keyword*, *mode=HELP\_SEARCH\_ALL*)[¶](#wx.html.HtmlHelpWindow.KeywordSearch "Permalink to this definition")
Search for given keyword.


Optionally it searches through the index (mode = `HELP_SEARCH_INDEX` ), default the content (mode = `HELP_SEARCH_ALL` ).



Parameters
* **keyword** (*string*) –
* **mode** ([*HelpSearchMode*](wx.HelpSearchMode.enumeration.html "HelpSearchMode")) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def ReadCustomization(self, cfg, path="") -> None:
        """ 

`ReadCustomization`(*self*, *cfg*, *path=""*)[¶](#wx.html.HtmlHelpWindow.ReadCustomization "Permalink to this definition")
Reads the user’s settings for this window.



Parameters
* **cfg** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **path** (*string*) –





See also


[`wx.html.HtmlHelpController.ReadCustomization`](wx.html.HtmlHelpController.html#wx.html.HtmlHelpController.ReadCustomization "wx.html.HtmlHelpController.ReadCustomization")





            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def RefreshLists(self) -> None:
        """ 

`RefreshLists`(*self*)[¶](#wx.html.HtmlHelpWindow.RefreshLists "Permalink to this definition")
Refresh all panels.


This is necessary if a new book was added.




            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def SetController(self, controller: 'html.HtmlHelpController') -> None:
        """ 

`SetController`(*self*, *controller*)[¶](#wx.html.HtmlHelpWindow.SetController "Permalink to this definition")

Parameters
**controller** ([*wx.html.HtmlHelpController*](wx.html.HtmlHelpController.html#wx.html.HtmlHelpController "wx.html.HtmlHelpController")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def UseConfig(self, config, rootpath="") -> None:
        """ 

`UseConfig`(*self*, *config*, *rootpath=""*)[¶](#wx.html.HtmlHelpWindow.UseConfig "Permalink to this definition")
Associates a Config object with the help window.


It is recommended that you use [`wx.html.HtmlHelpController.UseConfig`](wx.html.HtmlHelpController.html#wx.html.HtmlHelpController.UseConfig "wx.html.HtmlHelpController.UseConfig") instead.



Parameters
* **config** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **rootpath** (*string*) –






            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    def WriteCustomization(self, cfg, path="") -> None:
        """ 

`WriteCustomization`(*self*, *cfg*, *path=""*)[¶](#wx.html.HtmlHelpWindow.WriteCustomization "Permalink to this definition")
Saves the user’s settings for this window.



Parameters
* **cfg** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **path** (*string*) –





See also


[`wx.html.HtmlHelpController.WriteCustomization`](wx.html.HtmlHelpController.html#wx.html.HtmlHelpController.WriteCustomization "wx.html.HtmlHelpController.WriteCustomization")





            Source: https://docs.wxpython.org/wx.html.HtmlHelpWindow.html
        """

    Controller: 'HtmlHelpController'  # `Controller`[¶](#wx.html.HtmlHelpWindow.Controller "Permalink to this definition")See [`GetController`](#wx.html.HtmlHelpWindow.GetController "wx.html.HtmlHelpWindow.GetController") and [`SetController`](#wx.html.HtmlHelpWindow.SetController "wx.html.HtmlHelpWindow.SetController")
    Data: 'HtmlHelpData'  # `Data`[¶](#wx.html.HtmlHelpWindow.Data "Permalink to this definition")See [`GetData`](#wx.html.HtmlHelpWindow.GetData "wx.html.HtmlHelpWindow.GetData")



HF_EMBEDDED: int

class SimpleHtmlListBox(HtmlListBox,ItemContainer):
    """ **Possible constructors**:



```
SimpleHtmlListBox(parent, id=ID_ANY, pos=DefaultPosition,
                  size=DefaultSize, choices=[], style=HLB_DEFAULT_STYLE,
                  validator=DefaultValidator, name=SimpleHtmlListBoxNameStr)

SimpleHtmlListBox()

```


SimpleHtmlListBox is an implementation of HtmlListBox which shows
HTML content in the listbox rows.


  


        Source: https://docs.wxpython.org/wx.html.SimpleHtmlListBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.SimpleHtmlListBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=HLB\_DEFAULT\_STYLE, validator=DefaultValidator, name=SimpleHtmlListBoxNameStr)*


Constructor, creating and showing the HTML list box.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Parent window. Must not be `None`.
* **id** (*wx.WindowID*) – Window identifier. A value of -1 indicates a default value.
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Window position.
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) – Window size. If DefaultSize is specified then the window is sized appropriately.
* **choices** (*list of strings*) – An array of strings with which to initialise the control.
* **style** (*long*) – Window style. See `HLB_` flags.
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) – Window validator.
* **name** (*string*) – Window name.






---

  



**\_\_init\_\_** *(self)*


Default constructor, you must call [`Create`](#wx.html.SimpleHtmlListBox.Create "wx.html.SimpleHtmlListBox.Create") later.




---

  





            Source: https://docs.wxpython.org/wx.html.SimpleHtmlListBox.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=HLB_DEFAULT_STYLE, validator=DefaultValidator, name=SimpleHtmlListBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *choices=[]*, *style=HLB\_DEFAULT\_STYLE*, *validator=DefaultValidator*, *name=SimpleHtmlListBoxNameStr*)[¶](#wx.html.SimpleHtmlListBox.Create "Permalink to this definition")
Creates the HTML listbox for two-step construction.


See  [wx.html.SimpleHtmlListBox](#wx-html-simplehtmllistbox) for further details.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **choices** (*list of strings*) –
* **style** (*long*) –
* **validator** ([*wx.Validator*](wx.Validator.html#wx.Validator "wx.Validator")) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.SimpleHtmlListBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.html.SimpleHtmlListBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
*VisualAttributes*






            Source: https://docs.wxpython.org/wx.html.SimpleHtmlListBox.html
        """



HLB_DEFAULT_STYLE: int  # The default style: wx.BORDER_SUNKEN

HLB_MULTIPLE: int  # Multiple-selection list: the user can toggle multiple items on and off. ^^

EVT_LISTBOX: int  # Process a  wxEVT_LISTBOX   event, when an item on the list is selected. See    wx.CommandEvent.

EVT_LISTBOX_DCLICK: int  # Process a  wxEVT_LISTBOX_DCLICK   event, when the listbox is double-clicked. See    wx.CommandEvent.

BORDER_SUNKEN: int

class HtmlHelpDialog(Dialog):
    """ **Possible constructors**:



```
HtmlHelpDialog(data=None)

HtmlHelpDialog(parent, id=ID_ANY, title="", style=HF_DEFAULT_STYLE,
               data=None)

```


This class is used by HtmlHelpController to display help.


  


        Source: https://docs.wxpython.org/wx.html.HtmlHelpDialog.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlHelpDialog.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, data=None)*



Parameters
**data** ([*wx.html.HtmlHelpData*](wx.html.HtmlHelpData.html#wx.html.HtmlHelpData "wx.html.HtmlHelpData")) – 






---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, title=””, style=HF\_DEFAULT\_STYLE, data=None)*


Constructor.


For the possible values of *style*, please see  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **style** (*int*) –
* **data** ([*wx.html.HtmlHelpData*](wx.html.HtmlHelpData.html#wx.html.HtmlHelpData "wx.html.HtmlHelpData")) –






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlHelpDialog.html
        """

    def AddToolbarButtons(self, toolBar, style) -> None:
        """ 

`AddToolbarButtons`(*self*, *toolBar*, *style*)[¶](#wx.html.HtmlHelpDialog.AddToolbarButtons "Permalink to this definition")
You may override this virtual method to add more buttons to the help window’s toolbar.


*toolBar* is a pointer to the toolbar and *style* is the style flag as passed to the [`Create`](#wx.html.HtmlHelpDialog.Create "wx.html.HtmlHelpDialog.Create") method.


[`wx.ToolBar.Realize`](wx.ToolBar.html#wx.ToolBar.Realize "wx.ToolBar.Realize") is called immediately after returning from this function.



Parameters
* **toolBar** ([*wx.ToolBar*](wx.ToolBar.html#wx.ToolBar "wx.ToolBar")) –
* **style** (*int*) –






            Source: https://docs.wxpython.org/wx.html.HtmlHelpDialog.html
        """

    def Create(self, parent, id=ID_ANY, title="", style=HF_DEFAULT_STYLE) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *title=""*, *style=HF\_DEFAULT\_STYLE*)[¶](#wx.html.HtmlHelpDialog.Create "Permalink to this definition")
Creates the dialog.


See [the constructor](#wx-html-htmlhelpdialog) for a description of the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **style** (*int*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpDialog.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.html.HtmlHelpDialog.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
*VisualAttributes*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpDialog.html
        """

    def GetController(self) -> 'HtmlHelpController':
        """ 

`GetController`(*self*)[¶](#wx.html.HtmlHelpDialog.GetController "Permalink to this definition")
Returns the help controller associated with the dialog.



Return type
 [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpDialog.html
        """

    def SetController(self, controller: 'html.HtmlHelpController') -> None:
        """ 

`SetController`(*self*, *controller*)[¶](#wx.html.HtmlHelpDialog.SetController "Permalink to this definition")
Sets the help controller associated with the dialog.



Parameters
**controller** ([*wx.html.HtmlHelpController*](wx.html.HtmlHelpController.html#wx.html.HtmlHelpController "wx.html.HtmlHelpController")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpDialog.html
        """

    def SetTitleFormat(self, format: str) -> None:
        """ 

`SetTitleFormat`(*self*, *format*)[¶](#wx.html.HtmlHelpDialog.SetTitleFormat "Permalink to this definition")
Sets the dialog’s title format.


*format* must contain exactly one “%s” (it will be replaced by the page title).



Parameters
**format** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpDialog.html
        """

    Controller: 'HtmlHelpController'  # `Controller`[¶](#wx.html.HtmlHelpDialog.Controller "Permalink to this definition")See [`GetController`](#wx.html.HtmlHelpDialog.GetController "wx.html.HtmlHelpDialog.GetController") and [`SetController`](#wx.html.HtmlHelpDialog.SetController "wx.html.HtmlHelpDialog.SetController")



class HtmlHelpFrame(Frame):
    """ **Possible constructors**:



```
HtmlHelpFrame(data=None)

HtmlHelpFrame(parent, id=ID_ANY, title="", style=HF_DEFAULT_STYLE,
              data=None, config=None, rootpath="")

```


This class is used by HtmlHelpController to display help.


  


        Source: https://docs.wxpython.org/wx.html.HtmlHelpFrame.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlHelpFrame.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, data=None)*



Parameters
**data** ([*wx.html.HtmlHelpData*](wx.html.HtmlHelpData.html#wx.html.HtmlHelpData "wx.html.HtmlHelpData")) – 






---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, title=””, style=HF\_DEFAULT\_STYLE, data=None, config=None, rootpath=””)*


Constructor.


For the possible values of *style*, please see  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller).



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **style** (*int*) –
* **data** ([*wx.html.HtmlHelpData*](wx.html.HtmlHelpData.html#wx.html.HtmlHelpData "wx.html.HtmlHelpData")) –
* **config** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **rootpath** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlHelpFrame.html
        """

    def AddToolbarButtons(self, toolBar, style) -> None:
        """ 

`AddToolbarButtons`(*self*, *toolBar*, *style*)[¶](#wx.html.HtmlHelpFrame.AddToolbarButtons "Permalink to this definition")
You may override this virtual method to add more buttons to the help window’s toolbar.


*toolBar* is a pointer to the toolbar and *style* is the style flag as passed to the [`Create`](#wx.html.HtmlHelpFrame.Create "wx.html.HtmlHelpFrame.Create") method.


[`wx.ToolBar.Realize`](wx.ToolBar.html#wx.ToolBar.Realize "wx.ToolBar.Realize") is called immediately after returning from this function.



Parameters
* **toolBar** ([*wx.ToolBar*](wx.ToolBar.html#wx.ToolBar "wx.ToolBar")) –
* **style** (*int*) –






            Source: https://docs.wxpython.org/wx.html.HtmlHelpFrame.html
        """

    def Create(self, parent, id=ID_ANY, title="", style=HF_DEFAULT_STYLE, config=None, rootpath="") -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *title=""*, *style=HF\_DEFAULT\_STYLE*, *config=None*, *rootpath=""*)[¶](#wx.html.HtmlHelpFrame.Create "Permalink to this definition")
Creates the frame.


See [the constructor](#wx-html-htmlhelpframe) for a description of the parameters.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **title** (*string*) –
* **style** (*int*) –
* **config** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **rootpath** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpFrame.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.html.HtmlHelpFrame.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
*VisualAttributes*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpFrame.html
        """

    def GetController(self) -> 'HtmlHelpController':
        """ 

`GetController`(*self*)[¶](#wx.html.HtmlHelpFrame.GetController "Permalink to this definition")
Returns the help controller associated with the frame.



Return type
 [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpFrame.html
        """

    def SetController(self, controller: 'html.HtmlHelpController') -> None:
        """ 

`SetController`(*self*, *controller*)[¶](#wx.html.HtmlHelpFrame.SetController "Permalink to this definition")
Sets the help controller associated with the frame.



Parameters
**controller** ([*wx.html.HtmlHelpController*](wx.html.HtmlHelpController.html#wx.html.HtmlHelpController "wx.html.HtmlHelpController")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpFrame.html
        """

    def SetTitleFormat(self, format: str) -> None:
        """ 

`SetTitleFormat`(*self*, *format*)[¶](#wx.html.HtmlHelpFrame.SetTitleFormat "Permalink to this definition")
Sets the frame’s title format.


*format* must contain exactly one “%s” (it will be replaced by the page title).



Parameters
**format** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpFrame.html
        """

    Controller: 'HtmlHelpController'  # `Controller`[¶](#wx.html.HtmlHelpFrame.Controller "Permalink to this definition")See [`GetController`](#wx.html.HtmlHelpFrame.GetController "wx.html.HtmlHelpFrame.GetController") and [`SetController`](#wx.html.HtmlHelpFrame.SetController "wx.html.HtmlHelpFrame.SetController")



class HtmlHelpController(HelpControllerBase):
    """ **Possible constructors**:



```
HtmlHelpController(style=HF_DEFAULT_STYLE, parentWindow=None)

HtmlHelpController(parentWindow, style=HF_DEFAULT_STYLE)

```


This help controller provides an easy way of displaying HTML help in
your application (see HTML Sample, test example).


  


        Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlHelpController.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, style=HF\_DEFAULT\_STYLE, parentWindow=None)*


Constructor.



Parameters
* **style** (*int*) – This is a combination of these flags:

	+ `wx.html.HF_TOOLBAR`: The help window has a toolbar.
	+ `wx.html.HF_FLAT_TOOLBAR`: The help window has a toolbar with flat buttons (aka coolbar).
	+ `wx.html.HF_CONTENTS`: The help window has a contents panel.
	+ `wx.html.HF_INDEX`: The help window has an index panel.
	+ `wx.html.HF_SEARCH`: The help window has a search panel.
	+ `wx.html.HF_BOOKMARKS`: The help window has bookmarks controls.
	+ `wx.html.HF_OPEN_FILES`: Allows user to open arbitrary HTML document.
	+ `wx.html.HF_PRINT`: The toolbar contains “print” button.
	+ `wx.html.HF_MERGE_BOOKS`: The contents pane does not show book nodes. All books are merged together and appear as single book to the user.
	+ `wx.html.HF_ICONS_BOOK`: All nodes in contents pane have a book icon. This is how Microsoft’s HTML help viewer behaves.
	+ `wx.html.HF_ICONS_FOLDER`: Book nodes in contents pane have a book icon, book’s sections have a folder icon. This is the default.
	+ `wx.html.HF_ICONS_BOOK_CHAPTER`: Both book nodes and nodes of top-level sections of a book (i.e. chapters) have a book icon, all other sections (sections, subsections, …) have a folder icon.
	+ `wx.html.HF_EMBEDDED`: Specifies that the help controller controls an embedded window of class  [wx.html.HtmlHelpWindow](wx.html.HtmlHelpWindow.html#wx-html-htmlhelpwindow) that should not be destroyed when the controller is destroyed.
	+ `wx.html.HF_DIALOG`: Specifies that the help controller should create a dialog containing the help window.
	+ `wx.html.HF_FRAME`: Specifies that the help controller should create a frame containing the help window. This is the default if neither `wx.html.HF_DIALOG` nor `wx.html.HF_EMBEDDED` is specified.
	+ `wx.html.HF_MODAL`: Specifies that the help controller should create a modal dialog containing the help window (used with the `wx.html.HF_DIALOG` style).
	+ `wx.html.HF_DEFAULT_STYLE`: `wx.html.HF_TOOLBAR` | `wx.html.HF_CONTENTS` | `wx.html.HF_INDEX` | `wx.html.HF_SEARCH` | `wx.html.HF_BOOKMARKS` | `wx.html.HF_PRINT`
* **parentWindow** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – This is an optional window to be used as the parent for the help window.






---

  



**\_\_init\_\_** *(self, parentWindow, style=HF\_DEFAULT\_STYLE)*



Parameters
* **parentWindow** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **style** (*int*) –






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def AddBook(self, *args, **kw) -> bool:
        """ 

`AddBook`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlHelpController.AddBook "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**AddBook** *(self, bookFile, showWaitMsg=False)*


Adds a book (i.e.


a [.hhp file](html_overview.html#hhp-file); an HTML Help Workshop project file) into the list of loaded books.


This must be called at least once before displaying any help. *bookFile* or *bookUrl* may be either `".hhp"` file or a `ZIP` archive that contains an arbitrary number of `".hhp"` files in its top-level directory. This `ZIP` archive must have `".zip"` or `".htb"` extension (the latter stands for “HTML book”). In other words,



```
AddBook("help.zip")

```


is possible and is the recommended way.



Parameters
* **bookFile** (*string*) – Help book filename. It is recommended to use this prototype instead of the one taking URL, because it is less error-prone.
* **showWaitMsg** (*bool*) – If `True` then a decoration-less window with progress message is displayed.



Return type
*bool*






---

  



**AddBook** *(self, bookUrl, showWaitMsg=False)*


Adds a book (i.e.


a [.hhp file](html_overview.html#hhp-file); an HTML Help Workshop project file) into the list of loaded books.


See the other overload for additional info.



Parameters
* **bookUrl** (*string*) – Help book URL (note that syntax of filename and URL is different on most platforms).
* **showWaitMsg** (*bool*) – If `True` then a decoration-less window with progress message is displayed.



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def CreateHelpDialog(self, data: 'html.HtmlHelpData') -> 'HtmlHelpDialog':
        """ 

`CreateHelpDialog`(*self*, *data*)[¶](#wx.html.HtmlHelpController.CreateHelpDialog "Permalink to this definition")
This protected virtual method may be overridden so that when specifying the `HF_DIALOG` style, the controller uses a different dialog.



Parameters
**data** ([*wx.html.HtmlHelpData*](wx.html.HtmlHelpData.html#wx.html.HtmlHelpData "wx.html.HtmlHelpData")) – 



Return type
 [wx.html.HtmlHelpDialog](wx.html.HtmlHelpDialog.html#wx-html-htmlhelpdialog)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def CreateHelpFrame(self, data: 'html.HtmlHelpData') -> 'HtmlHelpFrame':
        """ 

`CreateHelpFrame`(*self*, *data*)[¶](#wx.html.HtmlHelpController.CreateHelpFrame "Permalink to this definition")
This protected virtual method may be overridden so that the controller uses a different frame.



Parameters
**data** ([*wx.html.HtmlHelpData*](wx.html.HtmlHelpData.html#wx.html.HtmlHelpData "wx.html.HtmlHelpData")) – 



Return type
 [wx.html.HtmlHelpFrame](wx.html.HtmlHelpFrame.html#wx-html-htmlhelpframe)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def Display(self, *args, **kw) -> bool:
        """ 

`Display`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlHelpController.Display "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Display** *(self, x)*


Displays page *x*.


This is `THE` important function - it is used to display the help in application. You can specify the page in many ways:


* as direct filename of HTML document
* as chapter name (from contents) or as a book name
* as some word from index
* even as any word (will be searched)


Looking for the page runs in these steps:


* try to locate file named x (if x is for example “doc/howto.htm”)
* try to open starting page of book named x
* try to find x in contents (if x is for example “How To …”)
* try to find x in index (if x is for example “How To …”)
* switch to Search panel and start searching



Parameters
**x** (*string*) – 



Return type
*bool*






---

  



**Display** *(self, id)*


This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



Parameters
**id** (*int*) – 



Return type
*bool*






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def DisplayContents(self) -> bool:
        """ 

`DisplayContents`(*self*)[¶](#wx.html.HtmlHelpController.DisplayContents "Permalink to this definition")
Displays help window and focuses contents panel.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def DisplayIndex(self) -> bool:
        """ 

`DisplayIndex`(*self*)[¶](#wx.html.HtmlHelpController.DisplayIndex "Permalink to this definition")
Displays help window and focuses index panel.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def GetDialog(self) -> 'HtmlHelpDialog':
        """ 

`GetDialog`(*self*)[¶](#wx.html.HtmlHelpController.GetDialog "Permalink to this definition")
Returns the current help dialog.


(May be `None`.)



Return type
 [wx.html.HtmlHelpDialog](wx.html.HtmlHelpDialog.html#wx-html-htmlhelpdialog)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def GetFrame(self) -> 'HtmlHelpFrame':
        """ 

`GetFrame`(*self*)[¶](#wx.html.HtmlHelpController.GetFrame "Permalink to this definition")
Returns the current help frame.


(May be `None`.)



Return type
 [wx.html.HtmlHelpFrame](wx.html.HtmlHelpFrame.html#wx-html-htmlhelpframe)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def GetHelpWindow(self) -> 'HtmlHelpWindow':
        """ 

`GetHelpWindow`(*self*)[¶](#wx.html.HtmlHelpController.GetHelpWindow "Permalink to this definition")
Get the current help window.



Return type
 [wx.html.HtmlHelpWindow](wx.html.HtmlHelpWindow.html#wx-html-htmlhelpwindow)






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def KeywordSearch(self, keyword, mode=HELP_SEARCH_ALL) -> bool:
        """ 

`KeywordSearch`(*self*, *keyword*, *mode=HELP\_SEARCH\_ALL*)[¶](#wx.html.HtmlHelpController.KeywordSearch "Permalink to this definition")
Displays the help window, focuses search panel and starts searching.


Returns `True` if the keyword was found. Optionally it searches through the index (mode = `HELP_SEARCH_INDEX` ), default the content (mode = `HELP_SEARCH_ALL` ).



Parameters
* **keyword** (*string*) –
* **mode** ([*HelpSearchMode*](wx.HelpSearchMode.enumeration.html "HelpSearchMode")) –



Return type
*bool*





Note


[`KeywordSearch`](#wx.html.HtmlHelpController.KeywordSearch "wx.html.HtmlHelpController.KeywordSearch") searches only pages listed in `".hhc"` file(s). You should list all pages in the contents file.





            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def ReadCustomization(self, cfg, path="") -> None:
        """ 

`ReadCustomization`(*self*, *cfg*, *path=""*)[¶](#wx.html.HtmlHelpController.ReadCustomization "Permalink to this definition")
Reads the controller’s setting (position of window, etc.)



Parameters
* **cfg** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **path** (*string*) –






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def SetHelpWindow(self, helpWindow: 'html.HtmlHelpWindow') -> None:
        """ 

`SetHelpWindow`(*self*, *helpWindow*)[¶](#wx.html.HtmlHelpController.SetHelpWindow "Permalink to this definition")
Set the help window to be managed by this controller.


This makes it possible to have a help window that might not be in a  [wx.html.HtmlHelpFrame](wx.html.HtmlHelpFrame.html#wx-html-htmlhelpframe) or dialog but is embedded in some other window in the application. Be sure to use the `wx.html.HF_EMBEDDED` style in this case.



Parameters
**helpWindow** ([*wx.html.HtmlHelpWindow*](wx.html.HtmlHelpWindow.html#wx.html.HtmlHelpWindow "wx.html.HtmlHelpWindow")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def SetShouldPreventAppExit(self, enable: bool) -> None:
        """ 

`SetShouldPreventAppExit`(*self*, *enable*)[¶](#wx.html.HtmlHelpController.SetShouldPreventAppExit "Permalink to this definition")
Sets whether the help frame should prevent application from exiting if it’s the only remaining top level window.



Parameters
**enable** (*bool*) – If `True`, the application will not quit unless the help frame is closed. Default is `False`, i.e. the application does exit if only the help window remains opened.





New in version 2.9.2.




See also


[`wx.App.SetExitOnFrameDelete`](wx.PyApp.html#wx.PyApp.SetExitOnFrameDelete "wx.PyApp.SetExitOnFrameDelete")





            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def SetTempDir(self, path: str) -> None:
        """ 

`SetTempDir`(*self*, *path*)[¶](#wx.html.HtmlHelpController.SetTempDir "Permalink to this definition")
Sets the path for storing temporary files - cached binary versions of index and contents files.


These binary forms are much faster to read. Default value is empty string (empty string means that no cached data are stored). Note that these files are *not* deleted when program exits.


Once created these cached files will be used in all subsequent executions of your application. If cached files become older than corresponding `".hhp"` file (e.g. if you regenerate documentation) it will be refreshed.



Parameters
**path** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def SetTitleFormat(self, format: str) -> None:
        """ 

`SetTitleFormat`(*self*, *format*)[¶](#wx.html.HtmlHelpController.SetTitleFormat "Permalink to this definition")
Sets format of title of the frame.


Must contain exactly one “%s” (for title of displayed HTML page).



Parameters
**format** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def UseConfig(self, config, rootpath="") -> None:
        """ 

`UseConfig`(*self*, *config*, *rootpath=""*)[¶](#wx.html.HtmlHelpController.UseConfig "Permalink to this definition")
Associates the *config* object with the controller.


If there is associated config object,  [wx.html.HtmlHelpController](#wx-html-htmlhelpcontroller) automatically reads and writes settings (including  [wx.html.HtmlWindow](wx.html.HtmlWindow.html#wx-html-htmlwindow)’s settings) when needed. The only thing you must do is create Config object and call [`UseConfig`](#wx.html.HtmlHelpController.UseConfig "wx.html.HtmlHelpController.UseConfig") .


If you do not use [`UseConfig`](#wx.html.HtmlHelpController.UseConfig "wx.html.HtmlHelpController.UseConfig") ,  [wx.html.HtmlHelpController](#wx-html-htmlhelpcontroller) will use the default Config object if available (for details see [`wx.ConfigBase.Get`](wx.ConfigBase.html#wx.ConfigBase.Get "wx.ConfigBase.Get") and [`wx.ConfigBase.Set`](wx.ConfigBase.html#wx.ConfigBase.Set "wx.ConfigBase.Set") ).



Parameters
* **config** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **rootpath** (*string*) –






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    def WriteCustomization(self, cfg, path="") -> None:
        """ 

`WriteCustomization`(*self*, *cfg*, *path=""*)[¶](#wx.html.HtmlHelpController.WriteCustomization "Permalink to this definition")
Stores controllers setting (position of window etc.)



Parameters
* **cfg** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) –
* **path** (*string*) –






            Source: https://docs.wxpython.org/wx.html.HtmlHelpController.html
        """

    Dialog: 'HtmlHelpDialog'  # `Dialog`[¶](#wx.html.HtmlHelpController.Dialog "Permalink to this definition")See [`GetDialog`](#wx.html.HtmlHelpController.GetDialog "wx.html.HtmlHelpController.GetDialog")
    Frame: 'HtmlHelpFrame'  # `Frame`[¶](#wx.html.HtmlHelpController.Frame "Permalink to this definition")See [`GetFrame`](#wx.html.HtmlHelpController.GetFrame "wx.html.HtmlHelpController.GetFrame")
    HelpWindow: 'HtmlHelpWindow'  # `HelpWindow`[¶](#wx.html.HtmlHelpController.HelpWindow "Permalink to this definition")See [`GetHelpWindow`](#wx.html.HtmlHelpController.GetHelpWindow "wx.html.HtmlHelpController.GetHelpWindow") and [`SetHelpWindow`](#wx.html.HtmlHelpController.SetHelpWindow "wx.html.HtmlHelpController.SetHelpWindow")



HF_TOOLBAR: int

HF_FLAT_TOOLBAR: int

HF_CONTENTS: int

HF_INDEX: int

HF_SEARCH: int

HF_BOOKMARKS: int

HF_OPEN_FILES: int

HF_PRINT: int

HF_MERGE_BOOKS: int

HF_ICONS_BOOK: int

HF_ICONS_FOLDER: int

HF_ICONS_BOOK_CHAPTER: int

HF_DIALOG: int

HF_FRAME: int

HF_MODAL: int

HF_DEFAULT_STYLE: int

class HtmlCell(Object):
    """ **Possible constructors**:



```
HtmlCell()

```


Internal data structure.


  


        Source: https://docs.wxpython.org/wx.html.HtmlCell.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlCell.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def AdjustPagebreak(self, pagebreak, pageHeight) -> tuple:
        """ 

`AdjustPagebreak`(*self*, *pagebreak*, *pageHeight*)[¶](#wx.html.HtmlCell.AdjustPagebreak "Permalink to this definition")
This method is called when paginating HTML, e.g. when printing.


User code should never call this function, but may need to override it in custom HTML cell classes with any specific page breaking requirements.


On input, *pagebreak* contains y-coordinate of page break (i.e. the horizontal line that should not be crossed by words, images etc.) relative to the parent cell on entry and may be modified to request a page break at a position before it if this cell cannot be divided into two pieces (each one on its own page).


Note that page break must still happen on the current page, i.e. the returned value must be strictly greater than:



```
ret_value, kp = container.AdjustPagebreak(p, kp, ph)
while ret_value:
    ret_value, kp = container.AdjustPagebreak(p, kp, ph)

```


and less or equal to `*pagebreak` for the value of *pagebreak* on input.



Parameters
* **pagebreak** (*int*) – position in pixels of the pagebreak.
* **pageHeight** (*int*) – the height in pixels of the page drawable area



Return type
*tuple*



Returns
( *bool*, *pagebreak* )






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def ConvertToText(self, sel: 'html.HtmlSelection') -> str:
        """ 

`ConvertToText`(*self*, *sel*)[¶](#wx.html.HtmlCell.ConvertToText "Permalink to this definition")
Converts the cell into text representation.


If sel != `None` then only part of the cell inside the selection is converted.



Parameters
**sel** ([*wx.html.HtmlSelection*](wx.html.HtmlSelection.html#wx.html.HtmlSelection "wx.html.HtmlSelection")) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def Draw(self, dc, x, y, view_y1, view_y2, info) -> None:
        """ 

`Draw`(*self*, *dc*, *x*, *y*, *view\_y1*, *view\_y2*, *info*)[¶](#wx.html.HtmlCell.Draw "Permalink to this definition")
Renders the cell.



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – Device context to which the cell is to be drawn.
* **x** (*int*) –
* **y** (*int*) – Coordinates of parent’s upper left corner (origin). You must add this to m\_PosX,m\_PosY when passing coordinates to dc’s methods Example:
dc.DrawText(“hello”, x + cell.PosX, y + cell.PosY)
* **view\_y1** (*int*) – y-coord of the first line visible in window. This is used to optimize rendering speed.
* **view\_y2** (*int*) – y-coord of the last line visible in window. This is used to optimize rendering speed.
* **info** ([*wx.html.HtmlRenderingInfo*](wx.html.HtmlRenderingInfo.html#wx.html.HtmlRenderingInfo "wx.html.HtmlRenderingInfo")) – Additional information for the rendering of the cell.






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def DrawInvisible(self, dc, x, y, info) -> None:
        """ 

`DrawInvisible`(*self*, *dc*, *x*, *y*, *info*)[¶](#wx.html.HtmlCell.DrawInvisible "Permalink to this definition")
This method is called instead of [`Draw`](#wx.html.HtmlCell.Draw "wx.html.HtmlCell.Draw") when the cell is certainly out of the screen (and thus invisible).


This is not nonsense - some tags (like  [wx.html.HtmlColourCell](wx.html.HtmlColourCell.html#wx-html-htmlcolourcell) or font setter) must be drawn even if they are invisible!



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) – Device context to which the cell is to be drawn.
* **x** (*int*) –
* **y** (*int*) – Coordinates of parent’s upper left corner. You must add this to m\_PosX,m\_PosY when passing coordinates to dc’s methods Example:
dc.DrawText(“hello”, x + cell.PosX, y + cell.PosY)
* **info** ([*wx.html.HtmlRenderingInfo*](wx.html.HtmlRenderingInfo.html#wx.html.HtmlRenderingInfo "wx.html.HtmlRenderingInfo")) – Additional information for the rendering of the cell.






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def Find(self, condition, param) -> 'HtmlCell':
        """ 

`Find`(*self*, *condition*, *param*)[¶](#wx.html.HtmlCell.Find "Permalink to this definition")
Returns pointer to itself if this cell matches condition (or if any of the cells following in the list matches), `None` otherwise.


(In other words if you call top-level container’s [`Find`](#wx.html.HtmlCell.Find "wx.html.HtmlCell.Find") it will return pointer to the first cell that matches the condition)


It is recommended way how to obtain pointer to particular cell or to cell of some type (e.g. HtmlAnchorCell reacts on `wx.html.HTML_COND_ISANCHOR` condition).



Parameters
* **condition** (*int*) – Unique integer identifier of condition
* **param** (*string*) – Optional parameters



Return type
 [wx.html.HtmlCell](#wx-html-htmlcell)






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def FindCellByPos(self, x, y, flags=HTML_FIND_EXACT) -> 'HtmlCell':
        """ 

`FindCellByPos`(*self*, *x*, *y*, *flags=HTML\_FIND\_EXACT*)[¶](#wx.html.HtmlCell.FindCellByPos "Permalink to this definition")
Find a cell inside this cell positioned at the given coordinates (relative to this’s positions).


Returns `None` if no such cell exists. The flag can be used to specify whether to look for terminal or nonterminal cells or both. In either case, returned cell is deepest cell in cells tree that contains [x,y].



Parameters
* **x** (*int*) –
* **y** (*int*) –
* **flags** –



Return type
 [wx.html.HtmlCell](#wx-html-htmlcell)






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetAbsPos(self, rootCell: Optional['html.HtmlCell']=None) -> 'Point':
        """ 

`GetAbsPos`(*self*, *rootCell=None*)[¶](#wx.html.HtmlCell.GetAbsPos "Permalink to this definition")

Parameters
**rootCell** ([*wx.html.HtmlCell*](#wx.html.HtmlCell "wx.html.HtmlCell")) – 



Return type
*Point*






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetDescent(self) -> int:
        """ 

`GetDescent`(*self*)[¶](#wx.html.HtmlCell.GetDescent "Permalink to this definition")
Returns descent value of the cell (m\_Descent member).


See explanation:



![_staticimagesoverviewshtmlcell_descent.png](_staticimagesoverviewshtmlcell_descent.png)


  



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetFirstChild(self) -> 'HtmlCell':
        """ 

`GetFirstChild`(*self*)[¶](#wx.html.HtmlCell.GetFirstChild "Permalink to this definition")
Returns pointer to the first cell in the list.


You can then use child’s [`GetNext`](#wx.html.HtmlCell.GetNext "wx.html.HtmlCell.GetNext") method to obtain pointer to the next cell in list.



Return type
 [wx.html.HtmlCell](#wx-html-htmlcell)





Note


This shouldn’t be used by the end user. If you need some way of finding particular cell in the list, try [`Find`](#wx.html.HtmlCell.Find "wx.html.HtmlCell.Find") method instead.





            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetHeight(self) -> int:
        """ 

`GetHeight`(*self*)[¶](#wx.html.HtmlCell.GetHeight "Permalink to this definition")
Returns height of the cell (m\_Height member).



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetId(self) -> str:
        """ 

`GetId`(*self*)[¶](#wx.html.HtmlCell.GetId "Permalink to this definition")
Returns unique cell identifier if there is any, the empty string otherwise.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetLink(self, x=0, y=0) -> 'HtmlLinkInfo':
        """ 

`GetLink`(*self*, *x=0*, *y=0*)[¶](#wx.html.HtmlCell.GetLink "Permalink to this definition")
Returns hypertext link if associated with this cell or `None` otherwise.


See  [wx.html.HtmlLinkInfo](wx.html.HtmlLinkInfo.html#wx-html-htmllinkinfo). (Note: this makes sense only for visible tags).



Parameters
* **x** (*int*) –
* **y** (*int*) – Coordinates of position where the user pressed mouse button. These coordinates are used e.g. by `COLORMAP`. Values are relative to the upper left corner of `THIS` cell (i.e. from 0 to m\_Width or m\_Height)



Return type
 [wx.html.HtmlLinkInfo](wx.html.HtmlLinkInfo.html#wx-html-htmllinkinfo)






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetMouseCursor(self, window: 'html.HtmlWindowInterface') -> 'Cursor':
        """ 

`GetMouseCursor`(*self*, *window*)[¶](#wx.html.HtmlCell.GetMouseCursor "Permalink to this definition")
Returns cursor to show when mouse pointer is over the cell.



Parameters
**window** ([*wx.html.HtmlWindowInterface*](wx.html.HtmlWindowInterface.html#wx.html.HtmlWindowInterface "wx.html.HtmlWindowInterface")) – interface to the parent HTML window



Return type
*Cursor*





See also


[`GetMouseCursorAt`](#wx.html.HtmlCell.GetMouseCursorAt "wx.html.HtmlCell.GetMouseCursorAt")





            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetMouseCursorAt(self, window, rePos) -> 'Cursor':
        """ 

`GetMouseCursorAt`(*self*, *window*, *rePos*)[¶](#wx.html.HtmlCell.GetMouseCursorAt "Permalink to this definition")
Returns cursor to show when mouse pointer is over the specified point.


This function should be overridden instead of [`GetMouseCursorAt`](#wx.html.HtmlCell.GetMouseCursorAt "wx.html.HtmlCell.GetMouseCursorAt") if the cursor should depend on the exact position of the mouse in the window.



Parameters
* **window** ([*wx.html.HtmlWindowInterface*](wx.html.HtmlWindowInterface.html#wx.html.HtmlWindowInterface "wx.html.HtmlWindowInterface")) – interface to the parent HTML window
* **rePos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – Position to show cursor.



Return type
*Cursor*





New in version 3.0.





            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetNext(self) -> 'HtmlCell':
        """ 

`GetNext`(*self*)[¶](#wx.html.HtmlCell.GetNext "Permalink to this definition")
Returns pointer to the next cell in list (see *htmlcell.h* if you’re interested in details).



Return type
 [wx.html.HtmlCell](#wx-html-htmlcell)






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetParent(self) -> 'HtmlContainerCell':
        """ 

`GetParent`(*self*)[¶](#wx.html.HtmlCell.GetParent "Permalink to this definition")
Returns pointer to parent container.



Return type
 [wx.html.HtmlContainerCell](wx.html.HtmlContainerCell.html#wx-html-htmlcontainercell)






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetPosX(self) -> int:
        """ 

`GetPosX`(*self*)[¶](#wx.html.HtmlCell.GetPosX "Permalink to this definition")
Returns X position within parent (the value is relative to parent’s upper left corner).


The returned value is meaningful only if parent’s [`Layout`](#wx.html.HtmlCell.Layout "wx.html.HtmlCell.Layout") was called before!



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetPosY(self) -> int:
        """ 

`GetPosY`(*self*)[¶](#wx.html.HtmlCell.GetPosY "Permalink to this definition")
Returns Y position within parent (the value is relative to parent’s upper left corner).


The returned value is meaningful only if parent’s [`Layout`](#wx.html.HtmlCell.Layout "wx.html.HtmlCell.Layout") was called before!



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetRootCell(self) -> 'HtmlCell':
        """ 

`GetRootCell`(*self*)[¶](#wx.html.HtmlCell.GetRootCell "Permalink to this definition")

Return type
 [wx.html.HtmlCell](#wx-html-htmlcell)






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def GetWidth(self) -> int:
        """ 

`GetWidth`(*self*)[¶](#wx.html.HtmlCell.GetWidth "Permalink to this definition")
Returns width of the cell (m\_Width member).



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def Layout(self, w: int) -> None:
        """ 

`Layout`(*self*, *w*)[¶](#wx.html.HtmlCell.Layout "Permalink to this definition")
Layouts the cell.


This method performs two actions:


* adjusts the cell’s width according to the fact that maximal possible width is *w* (this has sense when working with horizontal lines, tables etc.)
* prepares layout (=fill-in m\_PosX, m\_PosY (and sometimes m\_Height) members) based on actual width *w*


It must be called before displaying cells structure because m\_PosX and m\_PosY are undefined (or invalid) before calling [`Layout`](#wx.html.HtmlCell.Layout "wx.html.HtmlCell.Layout") .



Parameters
**w** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def ProcessMouseClick(self, window, pos, event) -> bool:
        """ 

`ProcessMouseClick`(*self*, *window*, *pos*, *event*)[¶](#wx.html.HtmlCell.ProcessMouseClick "Permalink to this definition")
This function is simple event handler.


Each time the user clicks mouse button over a cell within  [wx.html.HtmlWindow](wx.html.HtmlWindow.html#wx-html-htmlwindow) this method of that cell is called. Default behaviour is to call [`wx.html.HtmlWindow.LoadPage`](wx.html.HtmlWindow.html#wx.html.HtmlWindow.LoadPage "wx.html.HtmlWindow.LoadPage") .



Parameters
* **window** ([*wx.html.HtmlWindowInterface*](wx.html.HtmlWindowInterface.html#wx.html.HtmlWindowInterface "wx.html.HtmlWindowInterface")) – interface to the parent HTML window
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – coordinates of mouse click (this is relative to cell’s origin
* **event** ([*wx.MouseEvent*](wx.MouseEvent.html#wx.MouseEvent "wx.MouseEvent")) – mouse event that triggered the call



Return type
*bool*



Returns
`True` if a link was clicked, `False` otherwise.





New in version 2.7.0: (before OnMouseClick() method served a similar purpose).




Note


If you need more “advanced” event handling you should use HtmlBinderCell instead.





            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def SetId(self, id: str) -> None:
        """ 

`SetId`(*self*, *id*)[¶](#wx.html.HtmlCell.SetId "Permalink to this definition")
Sets unique cell identifier.


Default value is no identifier, i.e. empty string.



Parameters
**id** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def SetLink(self, link: 'html.HtmlLinkInfo') -> None:
        """ 

`SetLink`(*self*, *link*)[¶](#wx.html.HtmlCell.SetLink "Permalink to this definition")
Sets the hypertext link associated with this cell.


(Default value is :ref:[`](#id1)wx.html.HtmlLinkInfo`(“”, “”) (no link))



Parameters
**link** ([*wx.html.HtmlLinkInfo*](wx.html.HtmlLinkInfo.html#wx.html.HtmlLinkInfo "wx.html.HtmlLinkInfo")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def SetNext(self, cell: 'html.HtmlCell') -> None:
        """ 

`SetNext`(*self*, *cell*)[¶](#wx.html.HtmlCell.SetNext "Permalink to this definition")
Sets the next cell in the list.


This shouldn’t be called by user - it is to be used only by [`wx.html.HtmlContainerCell.InsertCell`](wx.html.HtmlContainerCell.html#wx.html.HtmlContainerCell.InsertCell "wx.html.HtmlContainerCell.InsertCell") .



Parameters
**cell** ([*wx.html.HtmlCell*](#wx.html.HtmlCell "wx.html.HtmlCell")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def SetParent(self, p: 'html.HtmlContainerCell') -> None:
        """ 

`SetParent`(*self*, *p*)[¶](#wx.html.HtmlCell.SetParent "Permalink to this definition")
Sets parent container of this cell.


This is called from [`wx.html.HtmlContainerCell.InsertCell`](wx.html.HtmlContainerCell.html#wx.html.HtmlContainerCell.InsertCell "wx.html.HtmlContainerCell.InsertCell") .



Parameters
**p** ([*wx.html.HtmlContainerCell*](wx.html.HtmlContainerCell.html#wx.html.HtmlContainerCell "wx.html.HtmlContainerCell")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    def SetPos(self, x, y) -> None:
        """ 

`SetPos`(*self*, *x*, *y*)[¶](#wx.html.HtmlCell.SetPos "Permalink to this definition")
Sets the cell’s position within parent container.



Parameters
* **x** (*int*) –
* **y** (*int*) –






            Source: https://docs.wxpython.org/wx.html.HtmlCell.html
        """

    AbsPos: 'Point'  # `AbsPos`[¶](#wx.html.HtmlCell.AbsPos "Permalink to this definition")See [`GetAbsPos`](#wx.html.HtmlCell.GetAbsPos "wx.html.HtmlCell.GetAbsPos")
    Descent: int  # `Descent`[¶](#wx.html.HtmlCell.Descent "Permalink to this definition")See [`GetDescent`](#wx.html.HtmlCell.GetDescent "wx.html.HtmlCell.GetDescent")
    FirstChild: 'HtmlCell'  # `FirstChild`[¶](#wx.html.HtmlCell.FirstChild "Permalink to this definition")See [`GetFirstChild`](#wx.html.HtmlCell.GetFirstChild "wx.html.HtmlCell.GetFirstChild")
    Height: int  # `Height`[¶](#wx.html.HtmlCell.Height "Permalink to this definition")See [`GetHeight`](#wx.html.HtmlCell.GetHeight "wx.html.HtmlCell.GetHeight")
    Id: str  # `Id`[¶](#wx.html.HtmlCell.Id "Permalink to this definition")See [`GetId`](#wx.html.HtmlCell.GetId "wx.html.HtmlCell.GetId") and [`SetId`](#wx.html.HtmlCell.SetId "wx.html.HtmlCell.SetId")
    Link: 'HtmlLinkInfo'  # `Link`[¶](#wx.html.HtmlCell.Link "Permalink to this definition")See [`GetLink`](#wx.html.HtmlCell.GetLink "wx.html.HtmlCell.GetLink") and [`SetLink`](#wx.html.HtmlCell.SetLink "wx.html.HtmlCell.SetLink")
    Next: 'HtmlCell'  # `Next`[¶](#wx.html.HtmlCell.Next "Permalink to this definition")See [`GetNext`](#wx.html.HtmlCell.GetNext "wx.html.HtmlCell.GetNext") and [`SetNext`](#wx.html.HtmlCell.SetNext "wx.html.HtmlCell.SetNext")
    Parent: 'HtmlContainerCell'  # `Parent`[¶](#wx.html.HtmlCell.Parent "Permalink to this definition")See [`GetParent`](#wx.html.HtmlCell.GetParent "wx.html.HtmlCell.GetParent") and [`SetParent`](#wx.html.HtmlCell.SetParent "wx.html.HtmlCell.SetParent")
    PosX: int  # `PosX`[¶](#wx.html.HtmlCell.PosX "Permalink to this definition")See [`GetPosX`](#wx.html.HtmlCell.GetPosX "wx.html.HtmlCell.GetPosX")
    PosY: int  # `PosY`[¶](#wx.html.HtmlCell.PosY "Permalink to this definition")See [`GetPosY`](#wx.html.HtmlCell.GetPosY "wx.html.HtmlCell.GetPosY")
    RootCell: 'HtmlCell'  # `RootCell`[¶](#wx.html.HtmlCell.RootCell "Permalink to this definition")See [`GetRootCell`](#wx.html.HtmlCell.GetRootCell "wx.html.HtmlCell.GetRootCell")
    Width: int  # `Width`[¶](#wx.html.HtmlCell.Width "Permalink to this definition")See [`GetWidth`](#wx.html.HtmlCell.GetWidth "wx.html.HtmlCell.GetWidth")



HTML_COND_ISANCHOR: int

class HtmlDCRenderer(Object):
    """ **Possible constructors**:



```
HtmlDCRenderer()

```


This class can render HTML document into a specified area of a DC.


  


        Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlDCRenderer.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def FindNextPageBreak(self, pos: int) -> int:
        """ 

`FindNextPageBreak`(*self*, *pos*)[¶](#wx.html.HtmlDCRenderer.FindNextPageBreak "Permalink to this definition")
Finds the next page break after the specified (vertical) position.


An example of using this method:



```
pages = []
while pos != wx.NOT_FOUND:
    pos = renderer.FindNextPageBreak(pos)
    pages.append(pos)

# "pages" now contains all page break positions and, in
# particular, its size is the number of pages

```



Parameters
**pos** (*int*) – Absolute position of the last page break. For the initial call of this function, it should be 0 and for the subsequent ones it should be the previous return value.



Return type
*int*



Returns
Position of the next page break or `NOT_FOUND` if there are no more of them.





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def GetTotalHeight(self) -> int:
        """ 

`GetTotalHeight`(*self*)[¶](#wx.html.HtmlDCRenderer.GetTotalHeight "Permalink to this definition")
Returns the height of the HTML text in pixels.


If the height of the area used with this renderer (see [`wx.html.HtmlDCRenderer.SetSize`](#wx.html.HtmlDCRenderer.SetSize "wx.html.HtmlDCRenderer.SetSize") ) is smaller that total height, the renderer will produce more than one page of output.



Return type
*int*





See also


[`GetTotalWidth`](#wx.html.HtmlDCRenderer.GetTotalWidth "wx.html.HtmlDCRenderer.GetTotalWidth")





            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def GetTotalWidth(self) -> int:
        """ 

`GetTotalWidth`(*self*)[¶](#wx.html.HtmlDCRenderer.GetTotalWidth "Permalink to this definition")
Returns the width of the HTML text in pixels.


This can be compared with the width parameter of [`SetSize`](#wx.html.HtmlDCRenderer.SetSize "wx.html.HtmlDCRenderer.SetSize") to check if the document being printed fits into the page boundary.



Return type
*int*





New in version 2.9.0.




See also


[`GetTotalHeight`](#wx.html.HtmlDCRenderer.GetTotalHeight "wx.html.HtmlDCRenderer.GetTotalHeight")





            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def Render(self, x, y, from_=0, to_=INT_MAX) -> None:
        """ 

`Render`(*self*, *x*, *y*, *from\_=0*, *to\_=INT\_MAX*)[¶](#wx.html.HtmlDCRenderer.Render "Permalink to this definition")
Renders HTML text to the DC.


When using multi-page documents, [`FindNextPageBreak`](#wx.html.HtmlDCRenderer.FindNextPageBreak "wx.html.HtmlDCRenderer.FindNextPageBreak") can be used to find the values for *from* and *to*, which should be the consecutive page breaks returned by that function.



Parameters
* **x** (*int*) –
* **y** (*int*) – position of upper-left corner of printing rectangle (see [`SetSize`](#wx.html.HtmlDCRenderer.SetSize "wx.html.HtmlDCRenderer.SetSize") ).
* **from\_** (*int*) –
* **to\_** (*int*) –




y-coordinate of the very first visible cell.


y-coordinate of the last visible cell or `INT_MAX` to use the full page height.



Note


The following three methods **must** always be called before any call to [`Render`](#wx.html.HtmlDCRenderer.Render "wx.html.HtmlDCRenderer.Render") , in this order:


* [`SetDC`](#wx.html.HtmlDCRenderer.SetDC "wx.html.HtmlDCRenderer.SetDC")
* [`SetSize`](#wx.html.HtmlDCRenderer.SetSize "wx.html.HtmlDCRenderer.SetSize")
* [`SetHtmlText`](#wx.html.HtmlDCRenderer.SetHtmlText "wx.html.HtmlDCRenderer.SetHtmlText")





            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def SetDC(self, dc, pixel_scale=1.0) -> None:
        """ 

`SetDC`(*self*, *dc*, *pixel\_scale=1.0*)[¶](#wx.html.HtmlDCRenderer.SetDC "Permalink to this definition")
Assign DC instance to the renderer.


*pixel\_scale* can be used when rendering to high-resolution DCs (e.g. printer) to adjust size of pixel metrics. (Many dimensions in HTML are given in pixels – e.g. image sizes. 300x300 image would be only one inch wide on typical printer. With pixel\_scale = 3.0 it would be 3 inches.)



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **pixel\_scale** (*float*) –






            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def SetFonts(self, normal_face, fixed_face, sizes) -> None:
        """ 

`SetFonts`(*self*, *normal\_face*, *fixed\_face*, *sizes*)[¶](#wx.html.HtmlDCRenderer.SetFonts "Permalink to this definition")
This function sets font sizes and faces.



Parameters
* **normal\_face** (*string*) – This is face name for normal (i.e. non-fixed) font. It can be either empty string (then the default face is chosen) or platform-specific face name. Examples are “helvetica” under Unix or “Times New Roman” under Windows.
* **fixed\_face** (*string*) – The same thing for fixed face ( <TT>..</TT> )
* **sizes** (*list of integers*) – This is an array of 7 items of int type. The values represent size of font with HTML size from -2 to +4 ( <FONT SIZE=-2> to <FONT SIZE=+4> ). Default sizes are used if sizes is `None`.





See also


[`SetSize`](#wx.html.HtmlDCRenderer.SetSize "wx.html.HtmlDCRenderer.SetSize")





            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def SetHtmlCell(self, cell: 'html.HtmlContainerCell') -> None:
        """ 

`SetHtmlCell`(*self*, *cell*)[¶](#wx.html.HtmlDCRenderer.SetHtmlCell "Permalink to this definition")
Associate the given HTML contents to the renderer.


This is similar to [`SetHtmlText`](#wx.html.HtmlDCRenderer.SetHtmlText "wx.html.HtmlDCRenderer.SetHtmlText") , but is more efficient as the text can be parsed only once, using [`wx.html.HtmlParser.Parse`](wx.html.HtmlParser.html#wx.html.HtmlParser.Parse "wx.html.HtmlParser.Parse") , and then passed to  [wx.html.HtmlDCRenderer](#wx-html-htmldcrenderer) multiple times or already reused for other purposes.


Note that *cell* will be modified (e.g. laid out) by this function.



Parameters
**cell** ([*wx.html.HtmlContainerCell*](wx.html.HtmlContainerCell.html#wx.html.HtmlContainerCell "wx.html.HtmlContainerCell")) – 





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def SetHtmlText(self, html, basepath="", isdir=True) -> None:
        """ 

`SetHtmlText`(*self*, *html*, *basepath=""*, *isdir=True*)[¶](#wx.html.HtmlDCRenderer.SetHtmlText "Permalink to this definition")
Assign text to the renderer.


[`Render`](#wx.html.HtmlDCRenderer.Render "wx.html.HtmlDCRenderer.Render") then draws the text onto DC.



Parameters
* **html** (*string*) – HTML text. This is not a filename.
* **basepath** (*string*) – base directory (html string would be stored there if it was in file). It is used to determine path for loading images, for example.
* **isdir** (*bool*) – `False` if basepath is filename, `True` if it is directory name (see  [wx.FileSystem](wx.FileSystem.html#wx-filesystem) for detailed explanation).






            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def SetSize(self, width, height) -> None:
        """ 

`SetSize`(*self*, *width*, *height*)[¶](#wx.html.HtmlDCRenderer.SetSize "Permalink to this definition")
Set size of output rectangle, in pixels.


Note that you **can’t** change width of the rectangle between calls to [`Render`](#wx.html.HtmlDCRenderer.Render "wx.html.HtmlDCRenderer.Render") ! (You can freely change height.)



Parameters
* **width** (*int*) –
* **height** (*int*) –






            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    def SetStandardFonts(self, size=-1, normal_face="", fixed_face="") -> None:
        """ 

`SetStandardFonts`(*self*, *size=-1*, *normal\_face=""*, *fixed\_face=""*)[¶](#wx.html.HtmlDCRenderer.SetStandardFonts "Permalink to this definition")
Sets font sizes to be relative to the given size or the system default size; use either specified or default font.



Parameters
* **size** (*int*) – Point size of the default HTML text
* **normal\_face** (*string*) – This is face name for normal (i.e. non-fixed) font. It can be either empty string (then the default face is chosen) or platform-specific face name. Examples are “helvetica” under Unix or “Times New Roman” under Windows.
* **fixed\_face** (*string*) – The same thing for fixed face ( <TT>..</TT> )





See also


[`SetSize`](#wx.html.HtmlDCRenderer.SetSize "wx.html.HtmlDCRenderer.SetSize")





            Source: https://docs.wxpython.org/wx.html.HtmlDCRenderer.html
        """

    TotalHeight: int  # `TotalHeight`[¶](#wx.html.HtmlDCRenderer.TotalHeight "Permalink to this definition")See [`GetTotalHeight`](#wx.html.HtmlDCRenderer.GetTotalHeight "wx.html.HtmlDCRenderer.GetTotalHeight")
    TotalWidth: int  # `TotalWidth`[¶](#wx.html.HtmlDCRenderer.TotalWidth "Permalink to this definition")See [`GetTotalWidth`](#wx.html.HtmlDCRenderer.GetTotalWidth "wx.html.HtmlDCRenderer.GetTotalWidth")



class HtmlEasyPrinting(Object):
    """ **Possible constructors**:



```
HtmlEasyPrinting(name="Printing", parentWindow=None)

```


This class provides very simple interface to printing architecture.


  


        Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
    """
    def __init__(self, name="Printing", parentWindow=None) -> None:
        """ 

`__init__`(*self*, *name="Printing"*, *parentWindow=None*)[¶](#wx.html.HtmlEasyPrinting.__init__ "Permalink to this definition")
Constructor.



Parameters
* **name** (*string*) – Name of the printing object. Used by preview frames and setup dialogs.
* **parentWindow** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – pointer to the window that will own the preview frame and setup dialogs. May be `None`.






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.html.HtmlEasyPrinting.GetName "Permalink to this definition")
Returns the current name being used for preview frames and setup dialogs.



Return type
`string`





New in version 2.8.11: / 2.9.1





            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def GetPageSetupData(self) -> 'PageSetupDialogData':
        """ 

`GetPageSetupData`(*self*)[¶](#wx.html.HtmlEasyPrinting.GetPageSetupData "Permalink to this definition")
Returns a pointer to  [wx.PageSetupDialogData](wx.PageSetupDialogData.html#wx-pagesetupdialogdata) instance used by this class.


You can set its parameters (via SetXXXX methods).



Return type
*PageSetupDialogData*






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def GetParentWindow(self) -> 'Window':
        """ 

`GetParentWindow`(*self*)[¶](#wx.html.HtmlEasyPrinting.GetParentWindow "Permalink to this definition")
Gets the parent window for dialogs.



Return type
*Window*






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def GetPrintData(self) -> 'PrintData':
        """ 

`GetPrintData`(*self*)[¶](#wx.html.HtmlEasyPrinting.GetPrintData "Permalink to this definition")
Returns pointer to  [wx.PrintData](wx.PrintData.html#wx-printdata) instance used by this class.


You can set its parameters (via SetXXXX methods).



Return type
[`PrintData`](#wx.html.HtmlEasyPrinting.PrintData "wx.html.HtmlEasyPrinting.PrintData")






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def PageSetup(self) -> None:
        """ 

`PageSetup`(*self*)[¶](#wx.html.HtmlEasyPrinting.PageSetup "Permalink to this definition")
Display page setup dialog and allows the user to modify settings.




            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def PreviewFile(self, htmlfile: str) -> bool:
        """ 

`PreviewFile`(*self*, *htmlfile*)[¶](#wx.html.HtmlEasyPrinting.PreviewFile "Permalink to this definition")
Preview HTML file.


Returns `False` in case of error – call [`wx.Printer.GetLastError`](wx.Printer.html#wx.Printer.GetLastError "wx.Printer.GetLastError") to get detailed information about the kind of the error.



Parameters
**htmlfile** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def PreviewText(self, htmltext, basepath="") -> bool:
        """ 

`PreviewText`(*self*, *htmltext*, *basepath=""*)[¶](#wx.html.HtmlEasyPrinting.PreviewText "Permalink to this definition")
Preview HTML text (not file!).


Returns `False` in case of error – call [`wx.Printer.GetLastError`](wx.Printer.html#wx.Printer.GetLastError "wx.Printer.GetLastError") to get detailed information about the kind of the error.



Parameters
* **htmltext** (*string*) – HTML text.
* **basepath** (*string*) – base directory (html string would be stored there if it was in file). It is used to determine path for loading images, for example.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def PrintFile(self, htmlfile: str) -> bool:
        """ 

`PrintFile`(*self*, *htmlfile*)[¶](#wx.html.HtmlEasyPrinting.PrintFile "Permalink to this definition")
Print HTML file.


Returns `False` in case of error – call [`wx.Printer.GetLastError`](wx.Printer.html#wx.Printer.GetLastError "wx.Printer.GetLastError") to get detailed information about the kind of the error.



Parameters
**htmlfile** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def PrintText(self, htmltext, basepath="") -> bool:
        """ 

`PrintText`(*self*, *htmltext*, *basepath=""*)[¶](#wx.html.HtmlEasyPrinting.PrintText "Permalink to this definition")
Print HTML text (not file!).


Returns `False` in case of error – call [`wx.Printer.GetLastError`](wx.Printer.html#wx.Printer.GetLastError "wx.Printer.GetLastError") to get detailed information about the kind of the error.



Parameters
* **htmltext** (*string*) – HTML text.
* **basepath** (*string*) – base directory (html string would be stored there if it was in file). It is used to determine path for loading images, for example.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def SetFonts(self, normal_face, fixed_face, sizes) -> None:
        """ 

`SetFonts`(*self*, *normal\_face*, *fixed\_face*, *sizes*)[¶](#wx.html.HtmlEasyPrinting.SetFonts "Permalink to this definition")
Sets fonts.


See [`wx.html.HtmlDCRenderer.SetFonts`](wx.html.HtmlDCRenderer.html#wx.html.HtmlDCRenderer.SetFonts "wx.html.HtmlDCRenderer.SetFonts") for detailed description.



Parameters
* **normal\_face** (*string*) –
* **fixed\_face** (*string*) –
* **sizes** (*list of integers*) –






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def SetFooter(self, footer, pg=PAGE_ALL) -> None:
        """ 

`SetFooter`(*self*, *footer*, *pg=PAGE\_ALL*)[¶](#wx.html.HtmlEasyPrinting.SetFooter "Permalink to this definition")
Set page footer.


The following macros can be used inside it: @``DATE``@ is replaced by the current date in default format @``PAGENUM``@ is replaced by page number @``PAGESCNT``@ is replaced by total number of pages @``TIME``@ is replaced by the current time in default format @``TITLE``@ is replaced with the title of the document



Parameters
* **footer** (*string*) – HTML text to be used as footer.
* **pg** (*int*) – one of `wx.html.PAGE_ODD`, `wx.html.PAGE_EVEN` and `wx.html.PAGE_ALL` constants.






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def SetHeader(self, header, pg=PAGE_ALL) -> None:
        """ 

`SetHeader`(*self*, *header*, *pg=PAGE\_ALL*)[¶](#wx.html.HtmlEasyPrinting.SetHeader "Permalink to this definition")
Set page header.


The following macros can be used inside it:


* @``DATE``@ is replaced by the current date in default format
* @``PAGENUM``@ is replaced by page number
* @``PAGESCNT``@ is replaced by total number of pages
* @``TIME``@ is replaced by the current time in default format
* @``TITLE``@ is replaced with the title of the document



Parameters
* **header** (*string*) – HTML text to be used as header.
* **pg** (*int*) – one of `wx.html.PAGE_ODD`, `wx.html.PAGE_EVEN` and `wx.html.PAGE_ALL` constants.






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def SetName(self, name: str) -> None:
        """ 

`SetName`(*self*, *name*)[¶](#wx.html.HtmlEasyPrinting.SetName "Permalink to this definition")
Sets the name used for preview frames and setup dialogs.



Parameters
**name** (*string*) – 





New in version 2.8.11: / 2.9.1





            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def SetParentWindow(self, window: 'Window') -> None:
        """ 

`SetParentWindow`(*self*, *window*)[¶](#wx.html.HtmlEasyPrinting.SetParentWindow "Permalink to this definition")
Sets the parent window for dialogs.



Parameters
**window** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def SetPromptMode(self, promptMode: PromptMode) -> None:
        """ 

`SetPromptMode`(*self*, *promptMode*)[¶](#wx.html.HtmlEasyPrinting.SetPromptMode "Permalink to this definition")
Enable or disable showing the dialog before printing.


The prompt mode determines the value of the `prompt` parameter passed to [`wx.Printer.Print`](wx.Printer.html#wx.Printer.Print "wx.Printer.Print") when it is called by this class.


Default prompt mode value is Prompt\_Always.



Parameters
**promptMode** ([*PromptMode*](wx.html.HtmlEasyPrinting.PromptMode.enumeration.html "PromptMode")) – 





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    def SetStandardFonts(self, size=-1, normal_face="", fixed_face="") -> None:
        """ 

`SetStandardFonts`(*self*, *size=-1*, *normal\_face=""*, *fixed\_face=""*)[¶](#wx.html.HtmlEasyPrinting.SetStandardFonts "Permalink to this definition")
Sets default font sizes and/or default font size.


See [`wx.html.HtmlDCRenderer.SetStandardFonts`](wx.html.HtmlDCRenderer.html#wx.html.HtmlDCRenderer.SetStandardFonts "wx.html.HtmlDCRenderer.SetStandardFonts") for detailed description.



Parameters
* **size** (*int*) –
* **normal\_face** (*string*) –
* **fixed\_face** (*string*) –





See also


[`SetFonts`](#wx.html.HtmlEasyPrinting.SetFonts "wx.html.HtmlEasyPrinting.SetFonts")





            Source: https://docs.wxpython.org/wx.html.HtmlEasyPrinting.html
        """

    Name: str  # `Name`[¶](#wx.html.HtmlEasyPrinting.Name "Permalink to this definition")See [`GetName`](#wx.html.HtmlEasyPrinting.GetName "wx.html.HtmlEasyPrinting.GetName") and [`SetName`](#wx.html.HtmlEasyPrinting.SetName "wx.html.HtmlEasyPrinting.SetName")
    PageSetupData: 'PageSetupDialogData'  # `PageSetupData`[¶](#wx.html.HtmlEasyPrinting.PageSetupData "Permalink to this definition")See [`GetPageSetupData`](#wx.html.HtmlEasyPrinting.GetPageSetupData "wx.html.HtmlEasyPrinting.GetPageSetupData")
    ParentWindow: 'Window'  # `ParentWindow`[¶](#wx.html.HtmlEasyPrinting.ParentWindow "Permalink to this definition")See [`GetParentWindow`](#wx.html.HtmlEasyPrinting.GetParentWindow "wx.html.HtmlEasyPrinting.GetParentWindow") and [`SetParentWindow`](#wx.html.HtmlEasyPrinting.SetParentWindow "wx.html.HtmlEasyPrinting.SetParentWindow")
    PrintData: '_PrintData'  # `PrintData`[¶](#wx.html.HtmlEasyPrinting.PrintData "Permalink to this definition")See [`GetPrintData`](#wx.html.HtmlEasyPrinting.GetPrintData "wx.html.HtmlEasyPrinting.GetPrintData")



PAGE_ODD: int

PAGE_EVEN: int

PAGE_ALL: int

class HtmlFilter(Object):
    """ **Possible constructors**:



```
HtmlFilter()

```


This class is the parent class of input filters for HtmlWindow.


  


        Source: https://docs.wxpython.org/wx.html.HtmlFilter.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlFilter.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.html.HtmlFilter.html
        """

    def CanRead(self, file: 'FSFile') -> bool:
        """ 

`CanRead`(*self*, *file*)[¶](#wx.html.HtmlFilter.CanRead "Permalink to this definition")
Returns `True` if this filter is capable of reading file *file*.


Example:



```
def CanRead(file):

    # file is a wx.FSFile in this case...
    return (file.GetMimeType() == "application/x-ugh")

```



Parameters
**file** ([*wx.FSFile*](wx.FSFile.html#wx.FSFile "wx.FSFile")) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlFilter.html
        """

    def ReadFile(self, file: 'FSFile') -> str:
        """ 

`ReadFile`(*self*, *file*)[¶](#wx.html.HtmlFilter.ReadFile "Permalink to this definition")
Reads the file and returns string with HTML document.


Example:



```
def ReadFile(file):

    # file is a wx.FSFile in this case...
    return "<html><body><img src=\"" + file.GetLocation() + \
           "\"></body></html>"

```



Parameters
**file** ([*wx.FSFile*](wx.FSFile.html#wx.FSFile "wx.FSFile")) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlFilter.html
        """



class HtmlHelpData(Object):
    """ **Possible constructors**:



```
HtmlHelpData()

```


This class is used by HtmlHelpController and HtmlHelpFrame to
access HTML help items.


  


        Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlHelpData.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
        """

    def AddBook(self, book_url: str) -> bool:
        """ 

`AddBook`(*self*, *book\_url*)[¶](#wx.html.HtmlHelpData.AddBook "Permalink to this definition")
Adds new book.


*book\_url* is URL (not filename!) of HTML help project (hhp) or `ZIP` file that contains arbitrary number of .hhp projects (this zip file can have either .zip or .htb extension, htb stands for “html book”).


Returns success.



Parameters
**book\_url** (*string*) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
        """

    def FindPageById(self, id: int) -> str:
        """ 

`FindPageById`(*self*, *id*)[¶](#wx.html.HtmlHelpData.FindPageById "Permalink to this definition")
Returns page’s URL based on integer `ID` stored in project.



Parameters
**id** (*int*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
        """

    def FindPageByName(self, page: str) -> str:
        """ 

`FindPageByName`(*self*, *page*)[¶](#wx.html.HtmlHelpData.FindPageByName "Permalink to this definition")
Returns page’s URL based on its (file)name.



Parameters
**page** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
        """

    def GetBookRecArray(self) -> 'HtmlBookRecArray':
        """ 

`GetBookRecArray`(*self*)[¶](#wx.html.HtmlHelpData.GetBookRecArray "Permalink to this definition")
Returns array with help books info.



Return type
*HtmlBookRecArray*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
        """

    def GetContentsArray(self) -> 'HtmlHelpDataItems':
        """ 

`GetContentsArray`(*self*)[¶](#wx.html.HtmlHelpData.GetContentsArray "Permalink to this definition")
Returns reference to array with contents entries.



Return type
*HtmlHelpDataItems*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
        """

    def GetIndexArray(self) -> 'HtmlHelpDataItems':
        """ 

`GetIndexArray`(*self*)[¶](#wx.html.HtmlHelpData.GetIndexArray "Permalink to this definition")
Returns reference to array with index entries.



Return type
*HtmlHelpDataItems*






            Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
        """

    def SetTempDir(self, path: str) -> None:
        """ 

`SetTempDir`(*self*, *path*)[¶](#wx.html.HtmlHelpData.SetTempDir "Permalink to this definition")
Sets the temporary directory where binary cached versions of MS HTML Workshop files will be stored.


(This is turned off by default and you can enable this feature by setting non-empty temp dir.)



Parameters
**path** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlHelpData.html
        """

    BookRecArray: 'HtmlBookRecArray'  # `BookRecArray`[¶](#wx.html.HtmlHelpData.BookRecArray "Permalink to this definition")See [`GetBookRecArray`](#wx.html.HtmlHelpData.GetBookRecArray "wx.html.HtmlHelpData.GetBookRecArray")
    ContentsArray: 'HtmlHelpDataItems'  # `ContentsArray`[¶](#wx.html.HtmlHelpData.ContentsArray "Permalink to this definition")See [`GetContentsArray`](#wx.html.HtmlHelpData.GetContentsArray "wx.html.HtmlHelpData.GetContentsArray")
    IndexArray: 'HtmlHelpDataItems'  # `IndexArray`[¶](#wx.html.HtmlHelpData.IndexArray "Permalink to this definition")See [`GetIndexArray`](#wx.html.HtmlHelpData.GetIndexArray "wx.html.HtmlHelpData.GetIndexArray")



class HtmlLinkInfo(Object):
    """ **Possible constructors**:



```
HtmlLinkInfo()

HtmlLinkInfo(href, target="")

```


This class stores all necessary information about hypertext links (as
represented by <A> tag in HTML documents).


  


        Source: https://docs.wxpython.org/wx.html.HtmlLinkInfo.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlLinkInfo.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, href, target=””)*


Construct hypertext link from `HREF` (aka URL) and `TARGET` (name of target frame).



Parameters
* **href** (*string*) –
* **target** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlLinkInfo.html
        """

    def GetEvent(self) -> 'MouseEvent':
        """ 

`GetEvent`(*self*)[¶](#wx.html.HtmlLinkInfo.GetEvent "Permalink to this definition")
Return pointer to event that generated OnLinkClicked() event.


Valid only within [`wx.html.HtmlWindow.OnLinkClicked`](wx.html.HtmlWindow.html#wx.html.HtmlWindow.OnLinkClicked "wx.html.HtmlWindow.OnLinkClicked") , `None` otherwise.



Return type
*MouseEvent*






            Source: https://docs.wxpython.org/wx.html.HtmlLinkInfo.html
        """

    def GetHref(self) -> str:
        """ 

`GetHref`(*self*)[¶](#wx.html.HtmlLinkInfo.GetHref "Permalink to this definition")
Return `HREF` value of the <A> tag.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlLinkInfo.html
        """

    def GetHtmlCell(self) -> 'HtmlCell':
        """ 

`GetHtmlCell`(*self*)[¶](#wx.html.HtmlLinkInfo.GetHtmlCell "Permalink to this definition")
Return pointer to the cell that was clicked.


Valid only within [`wx.html.HtmlWindow.OnLinkClicked`](wx.html.HtmlWindow.html#wx.html.HtmlWindow.OnLinkClicked "wx.html.HtmlWindow.OnLinkClicked") , `None` otherwise.



Return type
 [wx.html.HtmlCell](wx.html.HtmlCell.html#wx-html-htmlcell)






            Source: https://docs.wxpython.org/wx.html.HtmlLinkInfo.html
        """

    def GetTarget(self) -> str:
        """ 

`GetTarget`(*self*)[¶](#wx.html.HtmlLinkInfo.GetTarget "Permalink to this definition")
Return `TARGET` value of the <A> tag (this value is used to specify in which frame should be the page pointed by [`GetHref`](#wx.html.HtmlLinkInfo.GetHref "wx.html.HtmlLinkInfo.GetHref") Href opened).



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlLinkInfo.html
        """

    Event: 'MouseEvent'  # `Event`[¶](#wx.html.HtmlLinkInfo.Event "Permalink to this definition")See [`GetEvent`](#wx.html.HtmlLinkInfo.GetEvent "wx.html.HtmlLinkInfo.GetEvent")
    Href: str  # `Href`[¶](#wx.html.HtmlLinkInfo.Href "Permalink to this definition")See [`GetHref`](#wx.html.HtmlLinkInfo.GetHref "wx.html.HtmlLinkInfo.GetHref")
    HtmlCell: 'HtmlCell'  # `HtmlCell`[¶](#wx.html.HtmlLinkInfo.HtmlCell "Permalink to this definition")See [`GetHtmlCell`](#wx.html.HtmlLinkInfo.GetHtmlCell "wx.html.HtmlLinkInfo.GetHtmlCell")
    Target: str  # `Target`[¶](#wx.html.HtmlLinkInfo.Target "Permalink to this definition")See [`GetTarget`](#wx.html.HtmlLinkInfo.GetTarget "wx.html.HtmlLinkInfo.GetTarget")



class HtmlTagHandler(Object):
    """ **Possible constructors**:



```
HtmlTagHandler()

```


  


        Source: https://docs.wxpython.org/wx.html.HtmlTagHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlTagHandler.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.html.HtmlTagHandler.html
        """

    def GetParser(self) -> 'HtmlParser':
        """ 

`GetParser`(*self*)[¶](#wx.html.HtmlTagHandler.GetParser "Permalink to this definition")
Returns the parser associated with this tag handler.



Return type
 [wx.html.HtmlParser](wx.html.HtmlParser.html#wx-html-htmlparser)





New in version 2.9.5.





            Source: https://docs.wxpython.org/wx.html.HtmlTagHandler.html
        """

    def GetSupportedTags(self) -> str:
        """ 

`GetSupportedTags`(*self*)[¶](#wx.html.HtmlTagHandler.GetSupportedTags "Permalink to this definition")
Returns list of supported tags.


The list is in uppercase and tags are delimited by ‘,’. Example: `"I,B,FONT,P"`



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlTagHandler.html
        """

    def HandleTag(self, tag: 'html.HtmlTag') -> bool:
        """ 

`HandleTag`(*self*, *tag*)[¶](#wx.html.HtmlTagHandler.HandleTag "Permalink to this definition")
This is the core method of each handler.


It is called each time one of supported tags is detected. *tag* contains all necessary info (see  [wx.html.HtmlTag](wx.html.HtmlTag.html#wx-html-htmltag) for details).


Example:



```
def HandleTag(self, tag):

    # change state of parser (e.g. set bold face)
    self.ParseInner(tag)
    # ...
    # restore original state of parser

```


You shouldn’t call [`ParseInner`](#wx.html.HtmlTagHandler.ParseInner "wx.html.HtmlTagHandler.ParseInner") if the tag is not paired with an ending one.



Parameters
**tag** ([*wx.html.HtmlTag*](wx.html.HtmlTag.html#wx.html.HtmlTag "wx.html.HtmlTag")) – 



Return type
*bool*



Returns
`True` if [`ParseInner`](#wx.html.HtmlTagHandler.ParseInner "wx.html.HtmlTagHandler.ParseInner") was called, `False` otherwise.






            Source: https://docs.wxpython.org/wx.html.HtmlTagHandler.html
        """

    def ParseInner(self, tag: 'html.HtmlTag') -> None:
        """ 

`ParseInner`(*self*, *tag*)[¶](#wx.html.HtmlTagHandler.ParseInner "Permalink to this definition")
This method calls parser’s [`wx.html.HtmlParser.DoParsing`](wx.html.HtmlParser.html#wx.html.HtmlParser.DoParsing "wx.html.HtmlParser.DoParsing") method for the string between this tag and the paired ending tag:



```
<A HREF="x.htm">Hello, world!</A>

```


In this example, a call to [`ParseInner`](#wx.html.HtmlTagHandler.ParseInner "wx.html.HtmlTagHandler.ParseInner") (with *tag* pointing to A tag) will parse ‘Hello, world!’.



Parameters
**tag** ([*wx.html.HtmlTag*](wx.html.HtmlTag.html#wx.html.HtmlTag "wx.html.HtmlTag")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlTagHandler.html
        """

    def ParseInnerSource(self, source: str) -> None:
        """ 

`ParseInnerSource`(*self*, *source*)[¶](#wx.html.HtmlTagHandler.ParseInnerSource "Permalink to this definition")
Parses given source as if it was tag’s inner code (see *HtmlParser.GetInnerSource).*


Unlike [`ParseInner`](#wx.html.HtmlTagHandler.ParseInner "wx.html.HtmlTagHandler.ParseInner") , this method lets you specify the source code to parse. This is useful when you need to modify the inner text before parsing.



Parameters
**source** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlTagHandler.html
        """

    def SetParser(self, parser: 'html.HtmlParser') -> None:
        """ 

`SetParser`(*self*, *parser*)[¶](#wx.html.HtmlTagHandler.SetParser "Permalink to this definition")
Assigns `parser` to this handler.


Each **instance** of handler is guaranteed to be called only from the one parser.



Parameters
**parser** ([*wx.html.HtmlParser*](wx.html.HtmlParser.html#wx.html.HtmlParser "wx.html.HtmlParser")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlTagHandler.html
        """

    Parser: 'HtmlParser'  # `Parser`[¶](#wx.html.HtmlTagHandler.Parser "Permalink to this definition")See [`GetParser`](#wx.html.HtmlTagHandler.GetParser "wx.html.HtmlTagHandler.GetParser") and [`SetParser`](#wx.html.HtmlTagHandler.SetParser "wx.html.HtmlTagHandler.SetParser")
    SupportedTags: str  # `SupportedTags`[¶](#wx.html.HtmlTagHandler.SupportedTags "Permalink to this definition")See [`GetSupportedTags`](#wx.html.HtmlTagHandler.GetSupportedTags "wx.html.HtmlTagHandler.GetSupportedTags")



class HtmlPrintout(Printout):
    """ **Possible constructors**:



```
HtmlPrintout(title="Printout")

```


This class serves as printout class for HTML documents.


  


        Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
    """
    def __init__(self, title: str="Printout") -> None:
        """ 

`__init__`(*self*, *title="Printout"*)[¶](#wx.html.HtmlPrintout.__init__ "Permalink to this definition")
Constructor.



Parameters
**title** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
        """

    @staticmethod
    def AddFilter(filter: 'html.HtmlFilter') -> None:
        """ 

*static* `AddFilter`(*filter*)[¶](#wx.html.HtmlPrintout.AddFilter "Permalink to this definition")
Adds a filter to the static list of filters for  [wx.html.HtmlPrintout](#wx-html-htmlprintout).


See  [wx.html.HtmlFilter](wx.html.HtmlFilter.html#wx-html-htmlfilter) for further information.



Parameters
**filter** ([*wx.html.HtmlFilter*](wx.html.HtmlFilter.html#wx.html.HtmlFilter "wx.html.HtmlFilter")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
        """

    def SetFonts(self, normal_face, fixed_face, sizes) -> None:
        """ 

`SetFonts`(*self*, *normal\_face*, *fixed\_face*, *sizes*)[¶](#wx.html.HtmlPrintout.SetFonts "Permalink to this definition")
This function sets font sizes and faces.


See [`wx.html.HtmlWindow.SetFonts`](wx.html.HtmlWindow.html#wx.html.HtmlWindow.SetFonts "wx.html.HtmlWindow.SetFonts") for detailed description.



Parameters
* **normal\_face** (*string*) –
* **fixed\_face** (*string*) –
* **sizes** (*list of integers*) –






            Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
        """

    def SetFooter(self, footer, pg=PAGE_ALL) -> None:
        """ 

`SetFooter`(*self*, *footer*, *pg=PAGE\_ALL*)[¶](#wx.html.HtmlPrintout.SetFooter "Permalink to this definition")
Set page footer.


The following macros can be used inside it:


* @``DATE``@ is replaced by the current date in default format
* @``PAGENUM``@ is replaced by page number
* @``PAGESCNT``@ is replaced by total number of pages
* @``TIME``@ is replaced by the current time in default format
* @``TITLE``@ is replaced with the title of the document



Parameters
* **footer** (*string*) – HTML text to be used as footer.
* **pg** (*int*) – one of `wx.html.PAGE_ODD`, `wx.html.PAGE_EVEN` and `wx.html.PAGE_ALL` constants.






            Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
        """

    def SetHeader(self, header, pg=PAGE_ALL) -> None:
        """ 

`SetHeader`(*self*, *header*, *pg=PAGE\_ALL*)[¶](#wx.html.HtmlPrintout.SetHeader "Permalink to this definition")
Set page header.


The following macros can be used inside it:


* @``DATE``@ is replaced by the current date in default format
* @``PAGENUM``@ is replaced by page number
* @``PAGESCNT``@ is replaced by total number of pages
* @``TIME``@ is replaced by the current time in default format
* @``TITLE``@ is replaced with the title of the document



Parameters
* **header** (*string*) – HTML text to be used as header.
* **pg** (*int*) – one of `wx.html.PAGE_ODD`, `wx.html.PAGE_EVEN` and `wx.html.PAGE_ALL` constants.






            Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
        """

    def SetHtmlFile(self, htmlfile: str) -> None:
        """ 

`SetHtmlFile`(*self*, *htmlfile*)[¶](#wx.html.HtmlPrintout.SetHtmlFile "Permalink to this definition")
Prepare the class for printing this HTML **file**.


The file may be located on any virtual file system or it may be normal file.



Parameters
**htmlfile** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
        """

    def SetHtmlText(self, html, basepath="", isdir=True) -> None:
        """ 

`SetHtmlText`(*self*, *html*, *basepath=""*, *isdir=True*)[¶](#wx.html.HtmlPrintout.SetHtmlText "Permalink to this definition")
Prepare the class for printing this HTML text.



Parameters
* **html** (*string*) – HTML text. (NOT file!)
* **basepath** (*string*) – base directory (html string would be stored there if it was in file). It is used to determine path for loading images, for example.
* **isdir** (*bool*) – `False` if basepath is filename, `True` if it is directory name (see  [wx.FileSystem](wx.FileSystem.html#wx-filesystem) for detailed explanation).






            Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
        """

    def SetMargins(self, *args, **kw) -> None:
        """ 

`SetMargins`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlPrintout.SetMargins "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetMargins** *(self, top=25.2, bottom=25.2, left=25.2, right=25.2, spaces=5)*


Sets margins in millimeters.


Defaults to 1 inch for margins and 0.5cm for space between text and header and/or footer.



Parameters
* **top** (*float*) –
* **bottom** (*float*) –
* **left** (*float*) –
* **right** (*float*) –
* **spaces** (*float*) –






---

  



**SetMargins** *(self, pageSetupData)*


Sets margins from  [wx.PageSetupDialogData](wx.PageSetupDialogData.html#wx-pagesetupdialogdata).



Parameters
**pageSetupData** ([*wx.PageSetupDialogData*](wx.PageSetupDialogData.html#wx.PageSetupDialogData "wx.PageSetupDialogData")) – 





New in version 4.1/wxWidgets-3.1.0.





---

  





            Source: https://docs.wxpython.org/wx.html.HtmlPrintout.html
        """



class HtmlWindow(Scrolled,HtmlWindowInterface):
    """ **Possible constructors**:



```
HtmlWindow()

HtmlWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
           style=HW_DEFAULT_STYLE, name="htmlWindow")

```


HtmlWindow is probably the only class you will directly use unless
you want to do something special (like adding new tag handlers or MIME
filters).


  


        Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlWindow.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self)*


Default constructor.




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=HW\_DEFAULT\_STYLE, name=”htmlWindow”)*


Constructor.


The parameters are the same as `Scrolled.__init__` constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    @staticmethod
    def AddFilter(filter: 'html.HtmlFilter') -> None:
        """ 

*static* `AddFilter`(*filter*)[¶](#wx.html.HtmlWindow.AddFilter "Permalink to this definition")
Adds an [input filter](html_overview.html#input-filter) to the static list of available filters.


These filters are present by default:



```
text/html
text/plain
image/*

```


The plain text filter will be used if no other filter matches.



Parameters
**filter** ([*wx.html.HtmlFilter*](wx.html.HtmlFilter.html#wx.html.HtmlFilter "wx.html.HtmlFilter")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def AppendToPage(self, source: str) -> bool:
        """ 

`AppendToPage`(*self*, *source*)[¶](#wx.html.HtmlWindow.AppendToPage "Permalink to this definition")
Appends HTML fragment to currently displayed text and refreshes the window.



Parameters
**source** (*string*) – HTML code fragment



Return type
*bool*



Returns
`False` if an error occurred, `True` otherwise.






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.html.HtmlWindow.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
*VisualAttributes*






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    @staticmethod
    def GetDefaultHTMLCursor(type: HTMLCursor) -> 'Cursor':
        """ 

*static* `GetDefaultHTMLCursor`(*type*)[¶](#wx.html.HtmlWindow.GetDefaultHTMLCursor "Permalink to this definition")
Retrieves the default cursor for a given HTMLCursor type.



Parameters
**type** ([*HTMLCursor*](wx.html.HtmlWindowInterface.HTMLCursor.enumeration.html "HTMLCursor")) – HTMLCursor type to retrieve.



Return type
`Cursor`





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def GetInternalRepresentation(self) -> 'HtmlContainerCell':
        """ 

`GetInternalRepresentation`(*self*)[¶](#wx.html.HtmlWindow.GetInternalRepresentation "Permalink to this definition")
Returns pointer to the top-level container.



Return type
 [wx.html.HtmlContainerCell](wx.html.HtmlContainerCell.html#wx-html-htmlcontainercell)





See also


[Cells and Containers](html_overview.html#cells-and-containers), [Printing Framework Overview](printing_framework_overview.html#printing-framework-overview)





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def GetOpenedAnchor(self) -> str:
        """ 

`GetOpenedAnchor`(*self*)[¶](#wx.html.HtmlWindow.GetOpenedAnchor "Permalink to this definition")
Returns anchor within currently opened page (see [`wx.html.HtmlWindow.GetOpenedPage`](#wx.html.HtmlWindow.GetOpenedPage "wx.html.HtmlWindow.GetOpenedPage") ).


If no page is opened or if the displayed page wasn’t produced by call to [`LoadPage`](#wx.html.HtmlWindow.LoadPage "wx.html.HtmlWindow.LoadPage") , empty string is returned.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def GetOpenedPage(self) -> str:
        """ 

`GetOpenedPage`(*self*)[¶](#wx.html.HtmlWindow.GetOpenedPage "Permalink to this definition")
Returns full location of the opened page.


If no page is opened or if the displayed page wasn’t produced by call to [`LoadPage`](#wx.html.HtmlWindow.LoadPage "wx.html.HtmlWindow.LoadPage") , empty string is returned.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def GetOpenedPageTitle(self) -> str:
        """ 

`GetOpenedPageTitle`(*self*)[¶](#wx.html.HtmlWindow.GetOpenedPageTitle "Permalink to this definition")
Returns title of the opened page or “” if the current page does not contain <`TITLE`> tag.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def GetParser(self) -> 'HtmlWinParser':
        """ 

`GetParser`(*self*)[¶](#wx.html.HtmlWindow.GetParser "Permalink to this definition")
Returns a pointer to the current parser.



Return type
 [wx.html.HtmlWinParser](wx.html.HtmlWinParser.html#wx-html-htmlwinparser)






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def GetRelatedFrame(self) -> 'Frame':
        """ 

`GetRelatedFrame`(*self*)[¶](#wx.html.HtmlWindow.GetRelatedFrame "Permalink to this definition")
Returns the related frame.



Return type
*Frame*






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def HistoryBack(self) -> bool:
        """ 

`HistoryBack`(*self*)[¶](#wx.html.HtmlWindow.HistoryBack "Permalink to this definition")
Moves back to the previous page.


Only pages displayed using [`LoadPage`](#wx.html.HtmlWindow.LoadPage "wx.html.HtmlWindow.LoadPage") are stored in history list.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def HistoryCanBack(self) -> bool:
        """ 

`HistoryCanBack`(*self*)[¶](#wx.html.HtmlWindow.HistoryCanBack "Permalink to this definition")
Returns `True` if it is possible to go back in the history i.e.


[`HistoryBack`](#wx.html.HtmlWindow.HistoryBack "wx.html.HtmlWindow.HistoryBack") won’t fail.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def HistoryCanForward(self) -> bool:
        """ 

`HistoryCanForward`(*self*)[¶](#wx.html.HtmlWindow.HistoryCanForward "Permalink to this definition")
Returns `True` if it is possible to go forward in the history i.e.


[`HistoryForward`](#wx.html.HtmlWindow.HistoryForward "wx.html.HtmlWindow.HistoryForward") won’t fail.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def HistoryClear(self) -> None:
        """ 

`HistoryClear`(*self*)[¶](#wx.html.HtmlWindow.HistoryClear "Permalink to this definition")
Clears history.




            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def HistoryForward(self) -> bool:
        """ 

`HistoryForward`(*self*)[¶](#wx.html.HtmlWindow.HistoryForward "Permalink to this definition")
Moves to next page in history.


Only pages displayed using [`LoadPage`](#wx.html.HtmlWindow.LoadPage "wx.html.HtmlWindow.LoadPage") are stored in history list.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def LoadFile(self, filename: str) -> bool:
        """ 

`LoadFile`(*self*, *filename*)[¶](#wx.html.HtmlWindow.LoadFile "Permalink to this definition")
Loads an HTML page from a file and displays it.



Parameters
**filename** (*string*) – 



Return type
*bool*



Returns
`False` if an error occurred, `True` otherwise





See also


[`LoadPage`](#wx.html.HtmlWindow.LoadPage "wx.html.HtmlWindow.LoadPage")





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def LoadPage(self, location: str) -> bool:
        """ 

`LoadPage`(*self*, *location*)[¶](#wx.html.HtmlWindow.LoadPage "Permalink to this definition")
Unlike [`SetPage`](#wx.html.HtmlWindow.SetPage "wx.html.HtmlWindow.SetPage") this function first loads the HTML page from *location* and then displays it.



Parameters
**location** (*string*) – The address of the document. See the [FileSystem Overview](filesystem_overview.html#filesystem-overview) for details on the address format and  [wx.FileSystem](wx.FileSystem.html#wx-filesystem) for a description of how the file is opened.



Return type
*bool*



Returns
`False` if an error occurred, `True` otherwise





See also


[`LoadFile`](#wx.html.HtmlWindow.LoadFile "wx.html.HtmlWindow.LoadFile")





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def OnCellClicked(self, cell, x, y, event) -> bool:
        """ 

`OnCellClicked`(*self*, *cell*, *x*, *y*, *event*)[¶](#wx.html.HtmlWindow.OnCellClicked "Permalink to this definition")
This method is called when a mouse button is clicked inside  [wx.html.HtmlWindow](#wx-html-htmlwindow).


The default behaviour is to emit a  [wx.html.HtmlCellEvent](wx.html.HtmlCellEvent.html#wx-html-htmlcellevent) and, if the event was not processed or skipped, call [`OnLinkClicked`](#wx.html.HtmlWindow.OnLinkClicked "wx.html.HtmlWindow.OnLinkClicked") if the cell contains a hypertext link.


Overloading this method is deprecated; intercept the event instead.



Parameters
* **cell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) – The cell inside which the mouse was clicked, always a simple (i.e. non-container) cell
* **x** (*int*) – The logical x coordinate of the click point
* **y** (*int*) – The logical y coordinate of the click point
* **event** ([*wx.MouseEvent*](wx.MouseEvent.html#wx.MouseEvent "wx.MouseEvent")) – The mouse event containing other information about the click



Return type
*bool*



Returns
`True` if a link was clicked, `False` otherwise.






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def OnCellMouseHover(self, cell, x, y) -> None:
        """ 

`OnCellMouseHover`(*self*, *cell*, *x*, *y*)[¶](#wx.html.HtmlWindow.OnCellMouseHover "Permalink to this definition")
This method is called when a mouse moves over an HTML cell.


Default behaviour is to emit a  [wx.html.HtmlCellEvent](wx.html.HtmlCellEvent.html#wx-html-htmlcellevent).


Overloading this method is deprecated; intercept the event instead.



Parameters
* **cell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) – The cell inside which the mouse is currently, always a simple (i.e. non-container) cell
* **x** (*int*) – The logical x coordinate of the click point
* **y** (*int*) – The logical y coordinate of the click point






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def OnLinkClicked(self, link: 'html.HtmlLinkInfo') -> None:
        """ 

`OnLinkClicked`(*self*, *link*)[¶](#wx.html.HtmlWindow.OnLinkClicked "Permalink to this definition")
Called when user clicks on hypertext link.


Default behaviour is to emit a  [wx.html.HtmlLinkEvent](wx.html.HtmlLinkEvent.html#wx-html-htmllinkevent) and, if the event was not processed or skipped, call [`LoadPage`](#wx.html.HtmlWindow.LoadPage "wx.html.HtmlWindow.LoadPage") and do nothing else.


Overloading this method is deprecated; intercept the event instead.


Also see  [wx.html.HtmlLinkInfo](wx.html.HtmlLinkInfo.html#wx-html-htmllinkinfo).



Parameters
**link** ([*wx.html.HtmlLinkInfo*](wx.html.HtmlLinkInfo.html#wx.html.HtmlLinkInfo "wx.html.HtmlLinkInfo")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def OnOpeningURL(self, type, url) -> None:
        """ 

`OnOpeningURL`(*self*, *type*, *url*)[¶](#wx.html.HtmlWindow.OnOpeningURL "Permalink to this definition")
Called when an URL is being opened (either when the user clicks on a link or an image is loaded).


The URL will be opened only if [`OnOpeningURL`](#wx.html.HtmlWindow.OnOpeningURL "wx.html.HtmlWindow.OnOpeningURL") returns `HTML_OPEN` . This method is called by [`wx.html.HtmlParser.OpenURL`](wx.html.HtmlParser.html#wx.html.HtmlParser.OpenURL "wx.html.HtmlParser.OpenURL") .


You can override [`OnOpeningURL`](#wx.html.HtmlWindow.OnOpeningURL "wx.html.HtmlWindow.OnOpeningURL") to selectively block some URLs (e.g. for security reasons) or to redirect them elsewhere. Default behaviour is to always return `HTML_OPEN` .



Parameters
* **type** ([*HtmlURLType*](wx.html.HtmlURLType.enumeration.html "HtmlURLType")) – Indicates type of the resource. Is one of

	+ `wx.html.HTML_URL_PAGE`: Opening a HTML page.
	+ `wx.html.HTML_URL_IMAGE`: Opening an image.
	+ `wx.html.HTML_URL_OTHER`: Opening a resource that doesn’t fall into any other category.
* **url** (*string*) – URL being opened.




Pointer to *String* variable that must be filled with an URL if [`OnOpeningURL`](#wx.html.HtmlWindow.OnOpeningURL "wx.html.HtmlWindow.OnOpeningURL") returns `HTML_REDIRECT` .



Return type
*tuple*




* `wx.html.HTML_OPEN`: Open the URL.
* `wx.html.HTML_BLOCK`: Deny access to the URL, [`wx.html.HtmlParser.OpenURL`](wx.html.HtmlParser.html#wx.html.HtmlParser.OpenURL "wx.html.HtmlParser.OpenURL") will return `None`.
* `wx.html.HTML_REDIRECT`: Don’t open url, redirect to another URL. [`OnOpeningURL`](#wx.html.HtmlWindow.OnOpeningURL "wx.html.HtmlWindow.OnOpeningURL") must fill redirect with the new URL. [`OnOpeningURL`](#wx.html.HtmlWindow.OnOpeningURL "wx.html.HtmlWindow.OnOpeningURL") will be called again on returned URL.



Returns
(  [wx.html.HtmlOpeningStatus](wx.html.HtmlOpeningStatus.enumeration.html#wx-html-htmlopeningstatus), *redirectTo* )






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def OnSetTitle(self, title: str) -> None:
        """ 

`OnSetTitle`(*self*, *title*)[¶](#wx.html.HtmlWindow.OnSetTitle "Permalink to this definition")
Called on parsing <`TITLE`> tag.



Parameters
**title** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def ReadCustomization(self, cfg, path="") -> None:
        """ 

`ReadCustomization`(*self*, *cfg*, *path=""*)[¶](#wx.html.HtmlWindow.ReadCustomization "Permalink to this definition")
This reads custom settings from Config.


It uses the path ‘path’ if given, otherwise it saves info into currently selected path. The values are stored in sub-path  [wx.html.HtmlWindow](#wx-html-htmlwindow). Read values: all things set by [`SetFonts`](#wx.html.HtmlWindow.SetFonts "wx.html.HtmlWindow.SetFonts") , [`SetBorders`](#wx.html.HtmlWindow.SetBorders "wx.html.HtmlWindow.SetBorders") .



Parameters
* **cfg** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) – Config from which you want to read the configuration.
* **path** (*string*) – Optional path in config tree. If not given current path is used.






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def ScrollToAnchor(self, anchor: str) -> bool:
        """ 

`ScrollToAnchor`(*self*, *anchor*)[¶](#wx.html.HtmlWindow.ScrollToAnchor "Permalink to this definition")

Parameters
**anchor** (`String`) – 



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SelectAll(self) -> None:
        """ 

`SelectAll`(*self*)[¶](#wx.html.HtmlWindow.SelectAll "Permalink to this definition")
Selects all text in the window.



See also


[`SelectLine`](#wx.html.HtmlWindow.SelectLine "wx.html.HtmlWindow.SelectLine") , [`SelectWord`](#wx.html.HtmlWindow.SelectWord "wx.html.HtmlWindow.SelectWord")





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SelectLine(self, pos: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SelectLine`(*self*, *pos*)[¶](#wx.html.HtmlWindow.SelectLine "Permalink to this definition")
Selects the line of text that *pos* points at.


Note that *pos* is relative to the top of displayed page, not to window’s origin, use [`wx.Scrolled.CalcUnscrolledPosition`](wx.Scrolled.html#wx.Scrolled.CalcUnscrolledPosition "wx.Scrolled.CalcUnscrolledPosition") to convert physical coordinate.



Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 





See also


[`SelectAll`](#wx.html.HtmlWindow.SelectAll "wx.html.HtmlWindow.SelectAll") , [`SelectWord`](#wx.html.HtmlWindow.SelectWord "wx.html.HtmlWindow.SelectWord")





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SelectWord(self, pos: Union[tuple[int, int], 'Point']) -> None:
        """ 

`SelectWord`(*self*, *pos*)[¶](#wx.html.HtmlWindow.SelectWord "Permalink to this definition")
Selects the word at position *pos*.


Note that *pos* is relative to the top of displayed page, not to window’s origin, use [`wx.Scrolled.CalcUnscrolledPosition`](wx.Scrolled.html#wx.Scrolled.CalcUnscrolledPosition "wx.Scrolled.CalcUnscrolledPosition") to convert physical coordinate.



Parameters
**pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) – 





See also


[`SelectAll`](#wx.html.HtmlWindow.SelectAll "wx.html.HtmlWindow.SelectAll") , [`SelectLine`](#wx.html.HtmlWindow.SelectLine "wx.html.HtmlWindow.SelectLine")





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SelectionToText(self) -> str:
        """ 

`SelectionToText`(*self*)[¶](#wx.html.HtmlWindow.SelectionToText "Permalink to this definition")
Returns the current selection as plain text.


Returns an empty string if no text is currently selected.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SetBorders(self, b: int) -> None:
        """ 

`SetBorders`(*self*, *b*)[¶](#wx.html.HtmlWindow.SetBorders "Permalink to this definition")
This function sets the space between border of window and HTML contents.


See image:



![_staticimagesoverviewshtmlwin_border.png](_staticimagesoverviewshtmlwin_border.png)


  



Parameters
**b** (*int*) – indentation from borders in pixels






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    @staticmethod
    def SetDefaultHTMLCursor(type, cursor) -> None:
        """ 

*static* `SetDefaultHTMLCursor`(*type*, *cursor*)[¶](#wx.html.HtmlWindow.SetDefaultHTMLCursor "Permalink to this definition")
Sets the default cursor for a given HTMLCursor type.


These cursors are used for all  [wx.html.HtmlWindow](#wx-html-htmlwindow) objects by default, but can be overridden on a per-window basis.



Parameters
* **type** ([*HTMLCursor*](wx.html.HtmlWindowInterface.HTMLCursor.enumeration.html "HTMLCursor")) – HTMLCursor type to retrieve.
* **cursor** ([*wx.Cursor*](wx.Cursor.html#wx.Cursor "wx.Cursor")) – The default cursor for the specified cursor type.





New in version 4.1/wxWidgets-3.1.0.





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SetFonts(self, normal_face, fixed_face, sizes) -> None:
        """ 

`SetFonts`(*self*, *normal\_face*, *fixed\_face*, *sizes*)[¶](#wx.html.HtmlWindow.SetFonts "Permalink to this definition")
This function sets font sizes and faces.


See [`wx.html.HtmlDCRenderer.SetFonts`](wx.html.HtmlDCRenderer.html#wx.html.HtmlDCRenderer.SetFonts "wx.html.HtmlDCRenderer.SetFonts") for detailed description.



Parameters
* **normal\_face** (*string*) –
* **fixed\_face** (*string*) –
* **sizes** (*list of integers*) –





See also


SetSize()





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SetPage(self, source: str) -> bool:
        """ 

`SetPage`(*self*, *source*)[¶](#wx.html.HtmlWindow.SetPage "Permalink to this definition")
Sets the source of a page and displays it, for example:



```
htmlwin.SetPage("<html><body>Hello, world!</body></html>")

```


If you want to load a document from some location use [`LoadPage`](#wx.html.HtmlWindow.LoadPage "wx.html.HtmlWindow.LoadPage") instead.



Parameters
**source** (*string*) – The HTML to be displayed.



Return type
*bool*



Returns
`False` if an error occurred, `True` otherwise.






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SetRelatedFrame(self, frame, format) -> None:
        """ 

`SetRelatedFrame`(*self*, *frame*, *format*)[¶](#wx.html.HtmlWindow.SetRelatedFrame "Permalink to this definition")
Sets the frame in which page title will be displayed.


*format* is the format of the frame title, e.g. “HtmlHelp : %s”. It must contain exactly one s. This s is substituted with HTML page title.



Parameters
* **frame** ([*wx.Frame*](wx.Frame.html#wx.Frame "wx.Frame")) –
* **format** (*string*) –






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SetRelatedStatusBar(self, *args, **kw) -> None:
        """ 

`SetRelatedStatusBar`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlWindow.SetRelatedStatusBar "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetRelatedStatusBar** *(self, index)*


**After** calling [`SetRelatedFrame`](#wx.html.HtmlWindow.SetRelatedFrame "wx.html.HtmlWindow.SetRelatedFrame") , this sets statusbar slot where messages will be displayed.


(Default is -1 = no messages.)



Parameters
**index** (*int*) – Statusbar slot number (0..n)






---

  



**SetRelatedStatusBar** *(self, statusbar, index=0)*


**Sets** the associated statusbar where messages will be displayed.


Call this instead of [`SetRelatedFrame`](#wx.html.HtmlWindow.SetRelatedFrame "wx.html.HtmlWindow.SetRelatedFrame") if you want statusbar updates only, no changing of the frame title.



Parameters
* **statusbar** ([*wx.StatusBar*](wx.StatusBar.html#wx.StatusBar "wx.StatusBar")) – Statusbar pointer
* **index** (*int*) – Statusbar slot number (0..n)





New in version 2.9.0.





---

  





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def SetStandardFonts(self, size=-1, normal_face="", fixed_face="") -> None:
        """ 

`SetStandardFonts`(*self*, *size=-1*, *normal\_face=""*, *fixed\_face=""*)[¶](#wx.html.HtmlWindow.SetStandardFonts "Permalink to this definition")
Sets default font sizes and/or default font size.


See [`wx.html.HtmlDCRenderer.SetStandardFonts`](wx.html.HtmlDCRenderer.html#wx.html.HtmlDCRenderer.SetStandardFonts "wx.html.HtmlDCRenderer.SetStandardFonts") for detailed description.



Parameters
* **size** (*int*) –
* **normal\_face** (*string*) –
* **fixed\_face** (*string*) –





See also


[`SetFonts`](#wx.html.HtmlWindow.SetFonts "wx.html.HtmlWindow.SetFonts")





            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def ToText(self) -> str:
        """ 

`ToText`(*self*)[¶](#wx.html.HtmlWindow.ToText "Permalink to this definition")
Returns content of currently displayed page as plain text.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    def WriteCustomization(self, cfg, path="") -> None:
        """ 

`WriteCustomization`(*self*, *cfg*, *path=""*)[¶](#wx.html.HtmlWindow.WriteCustomization "Permalink to this definition")
Saves custom settings into Config.


It uses the path ‘path’ if given, otherwise it saves info into currently selected path. Regardless of whether the path is given or not, the function creates sub-path  [wx.html.HtmlWindow](#wx-html-htmlwindow).


Saved values: all things set by [`SetFonts`](#wx.html.HtmlWindow.SetFonts "wx.html.HtmlWindow.SetFonts") , [`SetBorders`](#wx.html.HtmlWindow.SetBorders "wx.html.HtmlWindow.SetBorders") .



Parameters
* **cfg** ([*wx.ConfigBase*](wx.ConfigBase.html#wx.ConfigBase "wx.ConfigBase")) – Config to which you want to save the configuration.
* **path** (*string*) – Optional path in config tree. If not given, the current path is used.






            Source: https://docs.wxpython.org/wx.html.HtmlWindow.html
        """

    InternalRepresentation: 'HtmlContainerCell'  # `InternalRepresentation`[¶](#wx.html.HtmlWindow.InternalRepresentation "Permalink to this definition")See [`GetInternalRepresentation`](#wx.html.HtmlWindow.GetInternalRepresentation "wx.html.HtmlWindow.GetInternalRepresentation")
    OpenedAnchor: str  # `OpenedAnchor`[¶](#wx.html.HtmlWindow.OpenedAnchor "Permalink to this definition")See [`GetOpenedAnchor`](#wx.html.HtmlWindow.GetOpenedAnchor "wx.html.HtmlWindow.GetOpenedAnchor")
    OpenedPage: str  # `OpenedPage`[¶](#wx.html.HtmlWindow.OpenedPage "Permalink to this definition")See [`GetOpenedPage`](#wx.html.HtmlWindow.GetOpenedPage "wx.html.HtmlWindow.GetOpenedPage")
    OpenedPageTitle: str  # `OpenedPageTitle`[¶](#wx.html.HtmlWindow.OpenedPageTitle "Permalink to this definition")See [`GetOpenedPageTitle`](#wx.html.HtmlWindow.GetOpenedPageTitle "wx.html.HtmlWindow.GetOpenedPageTitle")
    Parser: 'HtmlWinParser'  # `Parser`[¶](#wx.html.HtmlWindow.Parser "Permalink to this definition")See [`GetParser`](#wx.html.HtmlWindow.GetParser "wx.html.HtmlWindow.GetParser")
    RelatedFrame: 'Frame'  # `RelatedFrame`[¶](#wx.html.HtmlWindow.RelatedFrame "Permalink to this definition")See [`GetRelatedFrame`](#wx.html.HtmlWindow.GetRelatedFrame "wx.html.HtmlWindow.GetRelatedFrame") and [`SetRelatedFrame`](#wx.html.HtmlWindow.SetRelatedFrame "wx.html.HtmlWindow.SetRelatedFrame")



HW_SCROLLBAR_NEVER: int  # Never display scrollbars, not even when the page is larger than the window.

HW_SCROLLBAR_AUTO: int  # Display scrollbars only if page’s size exceeds window’s size.

HW_NO_SELECTION: int  # Don’t allow the user to select text. ^^

HTML_URL_PAGE: int

HTML_URL_IMAGE: int

HTML_URL_OTHER: int

HTML_OPEN: int

HTML_BLOCK: int

HTML_REDIRECT: int

class HtmlListBox(VListBox):
    """ **Possible constructors**:



```
HtmlListBox(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
            style=0, name=HtmlListBoxNameStr)

HtmlListBox()

```


HtmlListBox is an implementation of VListBox which shows HTML
content in the listbox rows.


  


        Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
    """
    def __init__(self, *args, **kw) -> None:
        """ 

`__init__`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlListBox.__init__ "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**\_\_init\_\_** *(self, parent, id=ID\_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=HtmlListBoxNameStr)*


Normal constructor which calls [`Create`](#wx.html.HtmlListBox.Create "wx.html.HtmlListBox.Create") internally.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –






---

  



**\_\_init\_\_** *(self)*


Default constructor, you must call [`Create`](#wx.html.HtmlListBox.Create "wx.html.HtmlListBox.Create") later.




---

  





            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=HtmlListBoxNameStr) -> bool:
        """ 

`Create`(*self*, *parent*, *id=ID\_ANY*, *pos=DefaultPosition*, *size=DefaultSize*, *style=0*, *name=HtmlListBoxNameStr*)[¶](#wx.html.HtmlListBox.Create "Permalink to this definition")
Creates the control and optionally sets the initial number of items in it (it may also be set or changed later with [`wx.VListBox.SetItemCount`](wx.VListBox.html#wx.VListBox.SetItemCount "wx.VListBox.SetItemCount") ).


There are no special styles defined for  [wx.html.HtmlListBox](#wx-html-htmllistbox), in particular the  [wx.ListBox](wx.ListBox.html#wx-listbox) styles (with the exception of `LB_MULTIPLE` ) cannot be used here.


Returns `True` on success or `False` if the control couldn’t be created



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) –
* **id** (*wx.WindowID*) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **size** ([*wx.Size*](wx.Size.html#wx.Size "wx.Size")) –
* **style** (*long*) –
* **name** (*string*) –



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    @staticmethod
    def GetClassDefaultAttributes(variant: int=WINDOW_VARIANT_NORMAL) -> 'VisualAttributes':
        """ 

*static* `GetClassDefaultAttributes`(*variant=WINDOW\_VARIANT\_NORMAL*)[¶](#wx.html.HtmlListBox.GetClassDefaultAttributes "Permalink to this definition")

Parameters
**variant** ([*WindowVariant*](wx.WindowVariant.enumeration.html "WindowVariant")) – 



Return type
*VisualAttributes*






            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    def GetFileSystem(self) -> 'FileSystem':
        """ 

`GetFileSystem`(*self*)[¶](#wx.html.HtmlListBox.GetFileSystem "Permalink to this definition")
Returns the  [wx.FileSystem](wx.FileSystem.html#wx-filesystem) used by the HTML parser of this object.


The file system object is used to resolve the paths in HTML fragments displayed in the control and you should use [`wx.FileSystem.ChangePathTo`](wx.FileSystem.html#wx.FileSystem.ChangePathTo "wx.FileSystem.ChangePathTo") if you use relative paths for the images or other resources embedded in your HTML.



Return type
[`FileSystem`](#wx.html.HtmlListBox.FileSystem "wx.html.HtmlListBox.FileSystem")






            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    def GetSelectedTextBgColour(self, colBg: Union[int, str, 'Colour']) -> 'Colour':
        """ 

`GetSelectedTextBgColour`(*self*, *colBg*)[¶](#wx.html.HtmlListBox.GetSelectedTextBgColour "Permalink to this definition")
This virtual function may be overridden to change the appearance of the background of the selected cells in the same way as [`GetSelectedTextColour`](#wx.html.HtmlListBox.GetSelectedTextColour "wx.html.HtmlListBox.GetSelectedTextColour") .


It should be rarely, if ever, used because [`wx.VListBox.SetSelectionBackground`](wx.VListBox.html#wx.VListBox.SetSelectionBackground "wx.VListBox.SetSelectionBackground") allows changing the selection background for all cells at once and doing anything more fancy is probably going to look strangely.



Parameters
**colBg** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
*Colour*





See also


[`GetSelectedTextColour`](#wx.html.HtmlListBox.GetSelectedTextColour "wx.html.HtmlListBox.GetSelectedTextColour")





            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    def GetSelectedTextColour(self, colFg: Union[int, str, 'Colour']) -> 'Colour':
        """ 

`GetSelectedTextColour`(*self*, *colFg*)[¶](#wx.html.HtmlListBox.GetSelectedTextColour "Permalink to this definition")
This virtual function may be overridden to customize the appearance of the selected cells.


It is used to determine how the colour *colFg* is going to look inside selection. By default all original colours are completely ignored and the standard, system-dependent, selection colour is used but the program may wish to override this to achieve some custom appearance.



Parameters
**colFg** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
*Colour*





See also


[`GetSelectedTextBgColour`](#wx.html.HtmlListBox.GetSelectedTextBgColour "wx.html.HtmlListBox.GetSelectedTextBgColour") , [`wx.VListBox.SetSelectionBackground`](wx.VListBox.html#wx.VListBox.SetSelectionBackground "wx.VListBox.SetSelectionBackground") , [`wx.SystemSettings.GetColour`](wx.SystemSettings.html#wx.SystemSettings.GetColour "wx.SystemSettings.GetColour")





            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    def OnGetItem(self, n: int) -> str:
        """ 

`OnGetItem`(*self*, *n*)[¶](#wx.html.HtmlListBox.OnGetItem "Permalink to this definition")
This method must be implemented in the derived class and should return the body (i.e. without `html` nor `body` tags) of the HTML fragment for the given item.


Note that this function should always return a text fragment for the *n* item which renders with the same height both when it is selected and when it’s not: i.e. if you call, inside your [`OnGetItem`](#wx.html.HtmlListBox.OnGetItem "wx.html.HtmlListBox.OnGetItem") implementation, `IsSelected(n)` to make the items appear differently when they are selected, then you should make sure that the returned HTML fragment will render with the same height or else you’ll see some artifacts when the user selects an item.



Parameters
**n** (*int*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    def OnGetItemMarkup(self, n: int) -> str:
        """ 

`OnGetItemMarkup`(*self*, *n*)[¶](#wx.html.HtmlListBox.OnGetItemMarkup "Permalink to this definition")
This function may be overridden to decorate HTML returned by [`OnGetItem`](#wx.html.HtmlListBox.OnGetItem "wx.html.HtmlListBox.OnGetItem") .



Parameters
**n** (*int*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    def OnLinkClicked(self, n, link) -> None:
        """ 

`OnLinkClicked`(*self*, *n*, *link*)[¶](#wx.html.HtmlListBox.OnLinkClicked "Permalink to this definition")
Called when the user clicks on hypertext link.


Does nothing by default. Overloading this method is deprecated; intercept the event instead.



Parameters
* **n** (*int*) – Index of the item containing the link.
* **link** ([*wx.html.HtmlLinkInfo*](wx.html.HtmlLinkInfo.html#wx.html.HtmlLinkInfo "wx.html.HtmlLinkInfo")) – Description of the link.





See also


 [wx.html.HtmlLinkInfo](wx.html.HtmlLinkInfo.html#wx-html-htmllinkinfo).





            Source: https://docs.wxpython.org/wx.html.HtmlListBox.html
        """

    FileSystem: '_FileSystem'  # `FileSystem`[¶](#wx.html.HtmlListBox.FileSystem "Permalink to this definition")See [`GetFileSystem`](#wx.html.HtmlListBox.GetFileSystem "wx.html.HtmlListBox.GetFileSystem")



class HtmlModalHelp:
    """ **Possible constructors**:



```
HtmlModalHelp(parent, helpFile, topic="",
              style=HF_DEFAULT_STYLE|HF_DIALOG|HF_MODAL)

```


This class uses HtmlHelpController to display help in a modal
dialog.


  


        Source: https://docs.wxpython.org/wx.html.HtmlModalHelp.html
    """
    def __init__(self, parent, helpFile, topic="", style=HF_DEFAULT_STYLE|HF_DIALOG|HF_MODAL) -> None:
        """ 

`__init__`(*self*, *parent*, *helpFile*, *topic=""*, *style=HF\_DEFAULT\_STYLE|HF\_DIALOG|HF\_MODAL*)[¶](#wx.html.HtmlModalHelp.__init__ "Permalink to this definition")
The constructor.



Parameters
* **parent** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – is the parent of the dialog.
* **helpFile** (*string*) – is the HTML help file to show.
* **topic** (*string*) – is an optional topic. If this is empty, the help contents will be shown.
* **style** (*int*) – is a combination of the flags described in the  [wx.html.HtmlHelpController](wx.html.HtmlHelpController.html#wx-html-htmlhelpcontroller) documentation.






            Source: https://docs.wxpython.org/wx.html.HtmlModalHelp.html
        """



class HtmlParser:
    """ **Possible constructors**:



```
HtmlParser()

```


Classes derived from this handle the generic parsing of HTML
documents: it scans the document and divide it into blocks of tags
(where one block consists of beginning and ending tag and of text
between these two tags).


  


        Source: https://docs.wxpython.org/wx.html.HtmlParser.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlParser.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def AddTag(self, tag: 'html.HtmlTag') -> None:
        """ 

`AddTag`(*self*, *tag*)[¶](#wx.html.HtmlParser.AddTag "Permalink to this definition")
This may (and may not) be overwritten in derived class.


This method is called each time new tag is about to be added. *tag* contains information about the tag. (See  [wx.html.HtmlTag](wx.html.HtmlTag.html#wx-html-htmltag) for details.)


Default ( [wx.html.HtmlParser](#wx-html-htmlparser)) behaviour is this: first it finds a handler capable of handling this tag and then it calls handler’s HandleTag() method.



Parameters
**tag** ([*wx.html.HtmlTag*](wx.html.HtmlTag.html#wx.html.HtmlTag "wx.html.HtmlTag")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def AddTagHandler(self, handler: 'html.HtmlTagHandler') -> None:
        """ 

`AddTagHandler`(*self*, *handler*)[¶](#wx.html.HtmlParser.AddTagHandler "Permalink to this definition")
Adds handler to the internal list ( hash table) of handlers.


This method should not be called directly by user but rather by derived class’ constructor.


This adds the handler to this **instance** of  [wx.html.HtmlParser](#wx-html-htmlparser), not to all objects of this class! (Static front-end to AddTagHandler is provided by  [wx.html.HtmlWinParser](wx.html.HtmlWinParser.html#wx-html-htmlwinparser)).


All handlers are deleted on object deletion.



Parameters
**handler** ([*wx.html.HtmlTagHandler*](wx.html.HtmlTagHandler.html#wx.html.HtmlTagHandler "wx.html.HtmlTagHandler")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def DoParsing(self) -> None:
        """ 

`DoParsing`(*self*)[¶](#wx.html.HtmlParser.DoParsing "Permalink to this definition")
Parses the whole m\_Source.




            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def DoneParser(self) -> None:
        """ 

`DoneParser`(*self*)[¶](#wx.html.HtmlParser.DoneParser "Permalink to this definition")
This must be called after [`DoParsing`](#wx.html.HtmlParser.DoParsing "wx.html.HtmlParser.DoParsing") .




            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def GetFS(self) -> 'FileSystem':
        """ 

`GetFS`(*self*)[¶](#wx.html.HtmlParser.GetFS "Permalink to this definition")
Returns pointer to the file system.


Because each tag handler has reference to it is parent parser it can easily request the file by calling:



```
f = self.Parser.GetFS().OpenFile("image.jpg")

```



Return type
*FileSystem*






            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def GetProduct(self) -> 'Object':
        """ 

`GetProduct`(*self*)[¶](#wx.html.HtmlParser.GetProduct "Permalink to this definition")
Returns product of parsing.


Returned value is result of parsing of the document.


The type of this result depends on internal representation in derived parser (but it must be derived from Object!). See  [wx.html.HtmlWinParser](wx.html.HtmlWinParser.html#wx-html-htmlwinparser) for details.



Return type
*Object*






            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def GetSource(self) -> str:
        """ 

`GetSource`(*self*)[¶](#wx.html.HtmlParser.GetSource "Permalink to this definition")
Returns pointer to the source being parsed.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def InitParser(self, source: str) -> None:
        """ 

`InitParser`(*self*, *source*)[¶](#wx.html.HtmlParser.InitParser "Permalink to this definition")
Setups the parser for parsing the *source* string.


(Should be overridden in derived class)



Parameters
**source** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def OpenURL(self, type, url) -> 'FSFile':
        """ 

`OpenURL`(*self*, *type*, *url*)[¶](#wx.html.HtmlParser.OpenURL "Permalink to this definition")
Opens given URL and returns  [wx.FSFile](wx.FSFile.html#wx-fsfile) object that can be used to read data from it.


This method may return `None` in one of two cases: either the URL doesn’t point to any valid resource or the URL is blocked by overridden implementation of [`OpenURL`](#wx.html.HtmlParser.OpenURL "wx.html.HtmlParser.OpenURL") in derived class.



Parameters
* **type** ([*HtmlURLType*](wx.html.HtmlURLType.enumeration.html "HtmlURLType")) – Indicates type of the resource. Is one of:

	+ `wx.html.HTML_URL_PAGE`: Opening a HTML page.
	+ `wx.html.HTML_URL_IMAGE`: Opening an image.
	+ `wx.html.HTML_URL_OTHER`: Opening a resource that doesn’t fall into any other category.
* **url** (*string*) – URL being opened.



Return type
*FSFile*





Note


Always use this method in tag handlers instead of [`GetFS`](#wx.html.HtmlParser.GetFS "wx.html.HtmlParser.GetFS") .OpenFile() because it can block the URL and is thus more secure. Default behaviour is to call [`wx.html.HtmlWindow.OnOpeningURL`](wx.html.HtmlWindow.html#wx.html.HtmlWindow.OnOpeningURL "wx.html.HtmlWindow.OnOpeningURL") of the associated  [wx.html.HtmlWindow](wx.html.HtmlWindow.html#wx-html-htmlwindow) object (which may decide to block the URL or redirect it to another one),if there’s any, and always open the URL if the parser is not used with  [wx.html.HtmlWindow](wx.html.HtmlWindow.html#wx-html-htmlwindow). Returned  [wx.FSFile](wx.FSFile.html#wx-fsfile) object is not guaranteed to point to url, it might have been redirected!





            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def Parse(self, source: str) -> 'Object':
        """ 

`Parse`(*self*, *source*)[¶](#wx.html.HtmlParser.Parse "Permalink to this definition")
Proceeds parsing of the document.


This is end-user method. You can simply call it when you need to obtain parsed output (which is parser-specific).


The method does these things:


* calls InitParser(source)
* calls [`DoParsing`](#wx.html.HtmlParser.DoParsing "wx.html.HtmlParser.DoParsing")
* calls [`GetProduct`](#wx.html.HtmlParser.GetProduct "wx.html.HtmlParser.GetProduct")
* calls [`DoneParser`](#wx.html.HtmlParser.DoneParser "wx.html.HtmlParser.DoneParser")
* returns value returned by [`GetProduct`](#wx.html.HtmlParser.GetProduct "wx.html.HtmlParser.GetProduct")


You shouldn’t use [`InitParser`](#wx.html.HtmlParser.InitParser "wx.html.HtmlParser.InitParser") , [`DoParsing`](#wx.html.HtmlParser.DoParsing "wx.html.HtmlParser.DoParsing") , [`GetProduct`](#wx.html.HtmlParser.GetProduct "wx.html.HtmlParser.GetProduct") or [`DoneParser`](#wx.html.HtmlParser.DoneParser "wx.html.HtmlParser.DoneParser") directly.



Parameters
**source** (*string*) – 



Return type
*Object*






            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def PopTagHandler(self) -> None:
        """ 

`PopTagHandler`(*self*)[¶](#wx.html.HtmlParser.PopTagHandler "Permalink to this definition")
Restores parser’s state before last call to [`PushTagHandler`](#wx.html.HtmlParser.PushTagHandler "wx.html.HtmlParser.PushTagHandler") .




            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def PushTagHandler(self, handler, tags) -> None:
        """ 

`PushTagHandler`(*self*, *handler*, *tags*)[¶](#wx.html.HtmlParser.PushTagHandler "Permalink to this definition")
Forces the handler to handle additional tags (not returned by [`wx.html.HtmlTagHandler.GetSupportedTags`](wx.html.HtmlTagHandler.html#wx.html.HtmlTagHandler.GetSupportedTags "wx.html.HtmlTagHandler.GetSupportedTags") ).


The handler should already be added to this parser.



Parameters
* **handler** ([*wx.html.HtmlTagHandler*](wx.html.HtmlTagHandler.html#wx.html.HtmlTagHandler "wx.html.HtmlTagHandler")) – the handler
* **tags** (*string*) – List of tags (in same format as GetSupportedTags()’s return value). The parser will redirect these tags to handler (until call to [`PopTagHandler`](#wx.html.HtmlParser.PopTagHandler "wx.html.HtmlParser.PopTagHandler") ).




Imagine you want to parse following pseudo-html structure:



```
<myitems>
    <param name="one" value="1">
    <param name="two" value="2">
</myitems>

<execute>
    <param program="text.exe">
</execute>

```


It is obvious that you cannot use only one tag handler for <param> tag. Instead you must use context-sensitive handlers for <param> inside <myitems> and <param> inside <execute>. This is the preferred solution:



```
# some code in HandleTag for "MYITEMS"...

self.Parser.PushTagHandler(self, "PARAM")
self.ParseInner(tag)
self.Parser.PopTagHandler()

# back to working on "MYITEMS"...

```




            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def SetFS(self, fs: 'FileSystem') -> None:
        """ 

`SetFS`(*self*, *fs*)[¶](#wx.html.HtmlParser.SetFS "Permalink to this definition")
Sets the virtual file system that will be used to request additional files.


(For example `IMG` tag handler requests  [wx.FSFile](wx.FSFile.html#wx-fsfile) with the image data.)



Parameters
**fs** ([*wx.FileSystem*](wx.FileSystem.html#wx.FileSystem "wx.FileSystem")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    def StopParsing(self) -> None:
        """ 

`StopParsing`(*self*)[¶](#wx.html.HtmlParser.StopParsing "Permalink to this definition")
Call this function to interrupt parsing from a tag handler.


No more tags will be parsed afterward. This function may only be called from [`Parse`](#wx.html.HtmlParser.Parse "wx.html.HtmlParser.Parse") or any function called by it (i.e. from tag handlers).




            Source: https://docs.wxpython.org/wx.html.HtmlParser.html
        """

    FS: 'FileSystem'  # `FS`[¶](#wx.html.HtmlParser.FS "Permalink to this definition")See [`GetFS`](#wx.html.HtmlParser.GetFS "wx.html.HtmlParser.GetFS") and [`SetFS`](#wx.html.HtmlParser.SetFS "wx.html.HtmlParser.SetFS")
    Product: 'Object'  # `Product`[¶](#wx.html.HtmlParser.Product "Permalink to this definition")See [`GetProduct`](#wx.html.HtmlParser.GetProduct "wx.html.HtmlParser.GetProduct")
    Source: str  # `Source`[¶](#wx.html.HtmlParser.Source "Permalink to this definition")See [`GetSource`](#wx.html.HtmlParser.GetSource "wx.html.HtmlParser.GetSource")



class HtmlWinParser(HtmlParser):
    """ **Possible constructors**:



```
HtmlWinParser(wndIface=None)

```


This class is derived from HtmlParser and its main goal is to parse
HTML input so that it can be displayed in HtmlWindow.


  


        Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
    """
    def __init__(self, wndIface: Optional['html.HtmlWindowInterface']=None) -> None:
        """ 

`__init__`(*self*, *wndIface=None*)[¶](#wx.html.HtmlWinParser.__init__ "Permalink to this definition")
Constructor.


Don’t use the default one, use the constructor with *wndIface* parameter (*wndIface* is a pointer to interface object for the associated  [wx.html.HtmlWindow](wx.html.HtmlWindow.html#wx-html-htmlwindow) or other HTML rendering window such as  [wx.html.HtmlListBox](wx.html.HtmlListBox.html#wx-html-htmllistbox)).



Parameters
**wndIface** ([*wx.html.HtmlWindowInterface*](wx.html.HtmlWindowInterface.html#wx.html.HtmlWindowInterface "wx.html.HtmlWindowInterface")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def CloseContainer(self) -> 'HtmlContainerCell':
        """ 

`CloseContainer`(*self*)[¶](#wx.html.HtmlWinParser.CloseContainer "Permalink to this definition")
Closes the container, sets actual container to the parent one and returns pointer to it (see [Cells and Containers](html_overview.html#cells-and-containers)).



Return type
 [wx.html.HtmlContainerCell](wx.html.HtmlContainerCell.html#wx-html-htmlcontainercell)






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def CreateCurrentFont(self) -> 'Font':
        """ 

`CreateCurrentFont`(*self*)[¶](#wx.html.HtmlWinParser.CreateCurrentFont "Permalink to this definition")
Creates font based on current setting (see [`SetFontSize`](#wx.html.HtmlWinParser.SetFontSize "wx.html.HtmlWinParser.SetFontSize") , [`SetFontBold`](#wx.html.HtmlWinParser.SetFontBold "wx.html.HtmlWinParser.SetFontBold") , [`SetFontItalic`](#wx.html.HtmlWinParser.SetFontItalic "wx.html.HtmlWinParser.SetFontItalic") , [`SetFontFixed`](#wx.html.HtmlWinParser.SetFontFixed "wx.html.HtmlWinParser.SetFontFixed") , [`wx.html.HtmlWinParser.SetFontUnderlined`](#wx.html.HtmlWinParser.SetFontUnderlined "wx.html.HtmlWinParser.SetFontUnderlined") ) and returns pointer to it.


If the font was already created only a pointer is returned.



Return type
*Font*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetActualColor(self) -> 'Colour':
        """ 

`GetActualColor`(*self*)[¶](#wx.html.HtmlWinParser.GetActualColor "Permalink to this definition")
Returns actual text colour.



Return type
*Colour*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetAlign(self) -> int:
        """ 

`GetAlign`(*self*)[¶](#wx.html.HtmlWinParser.GetAlign "Permalink to this definition")
Returns default horizontal alignment.



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetCharHeight(self) -> int:
        """ 

`GetCharHeight`(*self*)[¶](#wx.html.HtmlWinParser.GetCharHeight "Permalink to this definition")
Returns (average) int height in standard font.


It is used as DC-independent metrics.



Return type
*int*





Note


This function doesn’t return the *actual* height. If you want to know the height of the current font, call GetDC-> [`GetCharHeight`](#wx.html.HtmlWinParser.GetCharHeight "wx.html.HtmlWinParser.GetCharHeight") .





            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetCharWidth(self) -> int:
        """ 

`GetCharWidth`(*self*)[¶](#wx.html.HtmlWinParser.GetCharWidth "Permalink to this definition")
Returns average int width in standard font.


It is used as DC-independent metrics.



Return type
*int*





Note


This function doesn’t return the *actual* width. If you want to know the height of the current font, call GetDC-> [`GetCharWidth`](#wx.html.HtmlWinParser.GetCharWidth "wx.html.HtmlWinParser.GetCharWidth") .





            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetContainer(self) -> 'HtmlContainerCell':
        """ 

`GetContainer`(*self*)[¶](#wx.html.HtmlWinParser.GetContainer "Permalink to this definition")
Returns pointer to the currently opened container (see [Cells and Containers](html_overview.html#cells-and-containers)).


Common use:



```
self.WParser.GetContainer().InsertCell(html_cell)

```



Return type
 [wx.html.HtmlContainerCell](wx.html.HtmlContainerCell.html#wx-html-htmlcontainercell)






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetDC(self) -> 'DC':
        """ 

`GetDC`(*self*)[¶](#wx.html.HtmlWinParser.GetDC "Permalink to this definition")
Returns pointer to the DC used during parsing.



Return type
[`DC`](#wx.html.HtmlWinParser.DC "wx.html.HtmlWinParser.DC")






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetFontBold(self) -> int:
        """ 

`GetFontBold`(*self*)[¶](#wx.html.HtmlWinParser.GetFontBold "Permalink to this definition")
Returns `True` if actual font is bold, `False` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetFontFace(self) -> str:
        """ 

`GetFontFace`(*self*)[¶](#wx.html.HtmlWinParser.GetFontFace "Permalink to this definition")
Returns actual font face name.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetFontFixed(self) -> int:
        """ 

`GetFontFixed`(*self*)[¶](#wx.html.HtmlWinParser.GetFontFixed "Permalink to this definition")
Returns `True` if actual font is fixed face, `False` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetFontItalic(self) -> int:
        """ 

`GetFontItalic`(*self*)[¶](#wx.html.HtmlWinParser.GetFontItalic "Permalink to this definition")
Returns `True` if actual font is italic, `False` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetFontSize(self) -> int:
        """ 

`GetFontSize`(*self*)[¶](#wx.html.HtmlWinParser.GetFontSize "Permalink to this definition")
Returns actual font size (HTML size varies from -2 to +4)



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetFontUnderlined(self) -> int:
        """ 

`GetFontUnderlined`(*self*)[¶](#wx.html.HtmlWinParser.GetFontUnderlined "Permalink to this definition")
Returns `True` if actual font is underlined, `False` otherwise.



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetLink(self) -> 'HtmlLinkInfo':
        """ 

`GetLink`(*self*)[¶](#wx.html.HtmlWinParser.GetLink "Permalink to this definition")
Returns actual hypertext link.


(This value has a non-empty [`wx.html.HtmlLinkInfo.GetHref`](wx.html.HtmlLinkInfo.html#wx.html.HtmlLinkInfo.GetHref "wx.html.HtmlLinkInfo.GetHref") Href string if the parser is between <A> and </A> tags, “” otherwise.)



Return type
 [wx.html.HtmlLinkInfo](wx.html.HtmlLinkInfo.html#wx-html-htmllinkinfo)






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetLinkColor(self) -> 'Colour':
        """ 

`GetLinkColor`(*self*)[¶](#wx.html.HtmlWinParser.GetLinkColor "Permalink to this definition")
Returns the colour of hypertext link text.



Return type
*Colour*






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def GetWindowInterface(self) -> 'HtmlWindowInterface':
        """ 

`GetWindowInterface`(*self*)[¶](#wx.html.HtmlWinParser.GetWindowInterface "Permalink to this definition")
Returns associated window ( [wx.html.HtmlWindow](wx.html.HtmlWindow.html#wx-html-htmlwindow)).


This may be `None`! (You should always test if it is not `None`. For example `TITLE` handler sets window title only if some window is associated, otherwise it does nothing.



Return type
 [wx.html.HtmlWindowInterface](wx.html.HtmlWindowInterface.html#wx-html-htmlwindowinterface)






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def OpenContainer(self) -> 'HtmlContainerCell':
        """ 

`OpenContainer`(*self*)[¶](#wx.html.HtmlWinParser.OpenContainer "Permalink to this definition")
Opens new container and returns pointer to it (see [Cells and Containers](html_overview.html#cells-and-containers)).



Return type
 [wx.html.HtmlContainerCell](wx.html.HtmlContainerCell.html#wx-html-htmlcontainercell)






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetActualColor(self, clr: Union[int, str, 'Colour']) -> None:
        """ 

`SetActualColor`(*self*, *clr*)[¶](#wx.html.HtmlWinParser.SetActualColor "Permalink to this definition")
Sets actual text colour.


Note: this DOESN’T change the colour! You must create  [wx.html.HtmlColourCell](wx.html.HtmlColourCell.html#wx-html-htmlcolourcell) yourself.



Parameters
**clr** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetAlign(self, a: int) -> None:
        """ 

`SetAlign`(*self*, *a*)[¶](#wx.html.HtmlWinParser.SetAlign "Permalink to this definition")
Sets default horizontal alignment (see [`wx.html.HtmlContainerCell.SetAlignHor`](wx.html.HtmlContainerCell.html#wx.html.HtmlContainerCell.SetAlignHor "wx.html.HtmlContainerCell.SetAlignHor") ).


Alignment of newly opened container is set to this value.



Parameters
**a** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetContainer(self, c: 'html.HtmlContainerCell') -> 'HtmlContainerCell':
        """ 

`SetContainer`(*self*, *c*)[¶](#wx.html.HtmlWinParser.SetContainer "Permalink to this definition")
Allows you to directly set opened container.


This is not recommended - you should use [`OpenContainer`](#wx.html.HtmlWinParser.OpenContainer "wx.html.HtmlWinParser.OpenContainer") wherever possible.



Parameters
**c** ([*wx.html.HtmlContainerCell*](wx.html.HtmlContainerCell.html#wx.html.HtmlContainerCell "wx.html.HtmlContainerCell")) – 



Return type
 [wx.html.HtmlContainerCell](wx.html.HtmlContainerCell.html#wx-html-htmlcontainercell)






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetDC(self, dc, pixel_scale=1.0e+0) -> None:
        """ 

`SetDC`(*self*, *dc*, *pixel\_scale=1.0e+0*)[¶](#wx.html.HtmlWinParser.SetDC "Permalink to this definition")
Sets the DC.


This must be called before [`wx.html.HtmlParser.Parse`](wx.html.HtmlParser.html#wx.html.HtmlParser.Parse "wx.html.HtmlParser.Parse") !


*pixel\_scale* can be used when rendering to high-resolution DCs (e.g. printer) to adjust size of pixel metrics. (Many dimensions in HTML are given in pixels – e.g. image sizes. 300x300 image would be only one inch wide on typical printer. With pixel\_scale = 3.0 it would be 3 inches.)



Parameters
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –
* **pixel\_scale** (*float*) –






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetFontBold(self, x: int) -> None:
        """ 

`SetFontBold`(*self*, *x*)[¶](#wx.html.HtmlWinParser.SetFontBold "Permalink to this definition")
Sets bold flag of actualfont.


*x* is either `True` of `False`.



Parameters
**x** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetFontFace(self, face: str) -> None:
        """ 

`SetFontFace`(*self*, *face*)[¶](#wx.html.HtmlWinParser.SetFontFace "Permalink to this definition")
Sets current font face to *face*.


This affects either fixed size font or proportional, depending on context (whether the parser is inside `<TT>` tag or not).



Parameters
**face** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetFontFixed(self, x: int) -> None:
        """ 

`SetFontFixed`(*self*, *x*)[¶](#wx.html.HtmlWinParser.SetFontFixed "Permalink to this definition")
Sets fixed face flag of actualfont.


*x* is either `True` of `False`.



Parameters
**x** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetFontItalic(self, x: int) -> None:
        """ 

`SetFontItalic`(*self*, *x*)[¶](#wx.html.HtmlWinParser.SetFontItalic "Permalink to this definition")
Sets italic flag of actualfont.


*x* is either `True` of `False`.



Parameters
**x** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetFontSize(self, s: int) -> None:
        """ 

`SetFontSize`(*self*, *s*)[¶](#wx.html.HtmlWinParser.SetFontSize "Permalink to this definition")
Sets actual font size (HTML size varies from 1 to 7).



Parameters
**s** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetFontUnderlined(self, x: int) -> None:
        """ 

`SetFontUnderlined`(*self*, *x*)[¶](#wx.html.HtmlWinParser.SetFontUnderlined "Permalink to this definition")
Sets underlined flag of actualfont.


*x* is either `True` of `False`.



Parameters
**x** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetFonts(self, normal_face, fixed_face, sizes) -> None:
        """ 

`SetFonts`(*self*, *normal\_face*, *fixed\_face*, *sizes*)[¶](#wx.html.HtmlWinParser.SetFonts "Permalink to this definition")
Sets fonts.


See [`wx.html.HtmlWindow.SetFonts`](wx.html.HtmlWindow.html#wx.html.HtmlWindow.SetFonts "wx.html.HtmlWindow.SetFonts") for detailed description.



Parameters
* **normal\_face** (*string*) –
* **fixed\_face** (*string*) –
* **sizes** (*list of integers*) –






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetLink(self, link: 'html.HtmlLinkInfo') -> None:
        """ 

`SetLink`(*self*, *link*)[¶](#wx.html.HtmlWinParser.SetLink "Permalink to this definition")
Sets actual hypertext link.


Empty link is represented by  [wx.html.HtmlLinkInfo](wx.html.HtmlLinkInfo.html#wx-html-htmllinkinfo) with *Href* equal to “”.



Parameters
**link** ([*wx.html.HtmlLinkInfo*](wx.html.HtmlLinkInfo.html#wx.html.HtmlLinkInfo "wx.html.HtmlLinkInfo")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    def SetLinkColor(self, clr: Union[int, str, 'Colour']) -> None:
        """ 

`SetLinkColor`(*self*, *clr*)[¶](#wx.html.HtmlWinParser.SetLinkColor "Permalink to this definition")
Sets colour of hypertext link.



Parameters
**clr** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinParser.html
        """

    ActualColor: 'Colour'  # `ActualColor`[¶](#wx.html.HtmlWinParser.ActualColor "Permalink to this definition")See [`GetActualColor`](#wx.html.HtmlWinParser.GetActualColor "wx.html.HtmlWinParser.GetActualColor") and [`SetActualColor`](#wx.html.HtmlWinParser.SetActualColor "wx.html.HtmlWinParser.SetActualColor")
    Align: int  # `Align`[¶](#wx.html.HtmlWinParser.Align "Permalink to this definition")See [`GetAlign`](#wx.html.HtmlWinParser.GetAlign "wx.html.HtmlWinParser.GetAlign") and [`SetAlign`](#wx.html.HtmlWinParser.SetAlign "wx.html.HtmlWinParser.SetAlign")
    CharHeight: int  # `CharHeight`[¶](#wx.html.HtmlWinParser.CharHeight "Permalink to this definition")See [`GetCharHeight`](#wx.html.HtmlWinParser.GetCharHeight "wx.html.HtmlWinParser.GetCharHeight")
    CharWidth: int  # `CharWidth`[¶](#wx.html.HtmlWinParser.CharWidth "Permalink to this definition")See [`GetCharWidth`](#wx.html.HtmlWinParser.GetCharWidth "wx.html.HtmlWinParser.GetCharWidth")
    Container: 'HtmlContainerCell'  # `Container`[¶](#wx.html.HtmlWinParser.Container "Permalink to this definition")See [`GetContainer`](#wx.html.HtmlWinParser.GetContainer "wx.html.HtmlWinParser.GetContainer") and [`SetContainer`](#wx.html.HtmlWinParser.SetContainer "wx.html.HtmlWinParser.SetContainer")
    DC: '_DC'  # `DC`[¶](#wx.html.HtmlWinParser.DC "Permalink to this definition")See [`GetDC`](#wx.html.HtmlWinParser.GetDC "wx.html.HtmlWinParser.GetDC") and [`SetDC`](#wx.html.HtmlWinParser.SetDC "wx.html.HtmlWinParser.SetDC")
    FontBold: int  # `FontBold`[¶](#wx.html.HtmlWinParser.FontBold "Permalink to this definition")See [`GetFontBold`](#wx.html.HtmlWinParser.GetFontBold "wx.html.HtmlWinParser.GetFontBold") and [`SetFontBold`](#wx.html.HtmlWinParser.SetFontBold "wx.html.HtmlWinParser.SetFontBold")
    FontFace: str  # `FontFace`[¶](#wx.html.HtmlWinParser.FontFace "Permalink to this definition")See [`GetFontFace`](#wx.html.HtmlWinParser.GetFontFace "wx.html.HtmlWinParser.GetFontFace") and [`SetFontFace`](#wx.html.HtmlWinParser.SetFontFace "wx.html.HtmlWinParser.SetFontFace")
    FontFixed: int  # `FontFixed`[¶](#wx.html.HtmlWinParser.FontFixed "Permalink to this definition")See [`GetFontFixed`](#wx.html.HtmlWinParser.GetFontFixed "wx.html.HtmlWinParser.GetFontFixed") and [`SetFontFixed`](#wx.html.HtmlWinParser.SetFontFixed "wx.html.HtmlWinParser.SetFontFixed")
    FontItalic: int  # `FontItalic`[¶](#wx.html.HtmlWinParser.FontItalic "Permalink to this definition")See [`GetFontItalic`](#wx.html.HtmlWinParser.GetFontItalic "wx.html.HtmlWinParser.GetFontItalic") and [`SetFontItalic`](#wx.html.HtmlWinParser.SetFontItalic "wx.html.HtmlWinParser.SetFontItalic")
    FontSize: int  # `FontSize`[¶](#wx.html.HtmlWinParser.FontSize "Permalink to this definition")See [`GetFontSize`](#wx.html.HtmlWinParser.GetFontSize "wx.html.HtmlWinParser.GetFontSize") and [`SetFontSize`](#wx.html.HtmlWinParser.SetFontSize "wx.html.HtmlWinParser.SetFontSize")
    FontUnderlined: int  # `FontUnderlined`[¶](#wx.html.HtmlWinParser.FontUnderlined "Permalink to this definition")See [`GetFontUnderlined`](#wx.html.HtmlWinParser.GetFontUnderlined "wx.html.HtmlWinParser.GetFontUnderlined") and [`SetFontUnderlined`](#wx.html.HtmlWinParser.SetFontUnderlined "wx.html.HtmlWinParser.SetFontUnderlined")
    Link: 'HtmlLinkInfo'  # `Link`[¶](#wx.html.HtmlWinParser.Link "Permalink to this definition")See [`GetLink`](#wx.html.HtmlWinParser.GetLink "wx.html.HtmlWinParser.GetLink") and [`SetLink`](#wx.html.HtmlWinParser.SetLink "wx.html.HtmlWinParser.SetLink")
    LinkColor: 'Colour'  # `LinkColor`[¶](#wx.html.HtmlWinParser.LinkColor "Permalink to this definition")See [`GetLinkColor`](#wx.html.HtmlWinParser.GetLinkColor "wx.html.HtmlWinParser.GetLinkColor") and [`SetLinkColor`](#wx.html.HtmlWinParser.SetLinkColor "wx.html.HtmlWinParser.SetLinkColor")
    WindowInterface: 'HtmlWindowInterface'  # `WindowInterface`[¶](#wx.html.HtmlWinParser.WindowInterface "Permalink to this definition")See [`GetWindowInterface`](#wx.html.HtmlWinParser.GetWindowInterface "wx.html.HtmlWinParser.GetWindowInterface")



class HtmlContainerCell(HtmlCell):
    """ **Possible constructors**:



```
HtmlContainerCell(parent)

```


The HtmlContainerCell class is an implementation of a cell that may
contain more cells in it.


  


        Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
    """
    def __init__(self, parent: 'html.HtmlContainerCell') -> None:
        """ 

`__init__`(*self*, *parent*)[¶](#wx.html.HtmlContainerCell.__init__ "Permalink to this definition")
Constructor.


*parent* is pointer to parent container or `None`.



Parameters
**parent** ([*wx.html.HtmlContainerCell*](#wx.html.HtmlContainerCell "wx.html.HtmlContainerCell")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def Detach(self, cell: 'html.HtmlCell') -> None:
        """ 

`Detach`(*self*, *cell*)[¶](#wx.html.HtmlContainerCell.Detach "Permalink to this definition")
Detach a child cell.


Detaching a cell removes it from this container and allows reattaching it to another one by using [`InsertCell`](#wx.html.HtmlContainerCell.InsertCell "wx.html.HtmlContainerCell.InsertCell") . Alternatively, this method can be used to selectively remove some elements of the HTML document tree by deleting the cell after calling it.



Parameters
**cell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) – Must be non-null and an immediate child of this cell.





New in version 4.1/wxWidgets-3.1.2.





            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def GetAlignHor(self) -> int:
        """ 

`GetAlignHor`(*self*)[¶](#wx.html.HtmlContainerCell.GetAlignHor "Permalink to this definition")
Returns container’s horizontal alignment.



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def GetAlignVer(self) -> int:
        """ 

`GetAlignVer`(*self*)[¶](#wx.html.HtmlContainerCell.GetAlignVer "Permalink to this definition")
Returns container’s vertical alignment.



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def GetBackgroundColour(self) -> 'Colour':
        """ 

`GetBackgroundColour`(*self*)[¶](#wx.html.HtmlContainerCell.GetBackgroundColour "Permalink to this definition")
Returns the background colour of the container or `NullColour` if no background colour is set.



Return type
*Colour*






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def GetIndent(self, ind: int) -> int:
        """ 

`GetIndent`(*self*, *ind*)[¶](#wx.html.HtmlContainerCell.GetIndent "Permalink to this definition")
Returns the indentation.


*ind* is one of the `HTML_INDENT_` constants.



Parameters
**ind** (*int*) – 



Return type
*int*





Note


You must call [`GetIndentUnits`](#wx.html.HtmlContainerCell.GetIndentUnits "wx.html.HtmlContainerCell.GetIndentUnits") with same *ind* parameter in order to correctly interpret the returned integer value. It is NOT always in pixels!





            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def GetIndentUnits(self, ind: int) -> int:
        """ 

`GetIndentUnits`(*self*, *ind*)[¶](#wx.html.HtmlContainerCell.GetIndentUnits "Permalink to this definition")
Returns the units of indentation for *ind* where *ind* is one of the `HTML_INDENT_` constants.



Parameters
**ind** (*int*) – 



Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def InsertCell(self, cell: 'html.HtmlCell') -> None:
        """ 

`InsertCell`(*self*, *cell*)[¶](#wx.html.HtmlContainerCell.InsertCell "Permalink to this definition")
Inserts a new cell into the container.


Note that the container takes ownership of the cell and will delete it when it itself is destroyed.



Parameters
**cell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def SetAlign(self, tag: 'html.HtmlTag') -> None:
        """ 

`SetAlign`(*self*, *tag*)[¶](#wx.html.HtmlContainerCell.SetAlign "Permalink to this definition")
Sets the container’s alignment (both horizontal and vertical) according to the values stored in *tag*.


(Tags `ALIGN` parameter is extracted.) In fact it is only a front-end to [`SetAlignHor`](#wx.html.HtmlContainerCell.SetAlignHor "wx.html.HtmlContainerCell.SetAlignHor") and [`SetAlignVer`](#wx.html.HtmlContainerCell.SetAlignVer "wx.html.HtmlContainerCell.SetAlignVer") .



Parameters
**tag** ([*wx.html.HtmlTag*](wx.html.HtmlTag.html#wx.html.HtmlTag "wx.html.HtmlTag")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def SetAlignHor(self, al) -> None:
        """ 

`SetAlignHor`(*self*, *al*)[¶](#wx.html.HtmlContainerCell.SetAlignHor "Permalink to this definition")
Sets the container’s *horizontal* alignment.


During [`wx.html.HtmlCell.Layout`](wx.html.HtmlCell.html#wx.html.HtmlCell.Layout "wx.html.HtmlCell.Layout") each line is aligned according to *al* value.



Parameters
**al** (*int*) – new horizontal alignment. May be one of these values:
* `wx.html.HTML_ALIGN_LEFT`: lines are left-aligned (default)
* `wx.html.HTML_ALIGN_JUSTIFY`: lines are justified
* `wx.html.HTML_ALIGN_CENTER`: lines are centered
* `wx.html.HTML_ALIGN_RIGHT`: lines are right-aligned









            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def SetAlignVer(self, al) -> None:
        """ 

`SetAlignVer`(*self*, *al*)[¶](#wx.html.HtmlContainerCell.SetAlignVer "Permalink to this definition")
Sets the container’s *vertical* alignment.


This is per-line alignment!



Parameters
**al** (*int*) – new vertical alignment. May be one of these values:
* `wx.html.HTML_ALIGN_BOTTOM`: cells are over the line (default)
* `wx.html.HTML_ALIGN_CENTER`: cells are centered on line
* `wx.html.HTML_ALIGN_TOP`: cells are under the line








![_staticimagesoverviewshtmlcontcell_alignv.png](_staticimagesoverviewshtmlcontcell_alignv.png)


  




            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def SetBackgroundColour(self, clr: Union[int, str, 'Colour']) -> None:
        """ 

`SetBackgroundColour`(*self*, *clr*)[¶](#wx.html.HtmlContainerCell.SetBackgroundColour "Permalink to this definition")
Sets the background colour for this container.



Parameters
**clr** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def SetBorder(self, clr1, clr2, border=1) -> None:
        """ 

`SetBorder`(*self*, *clr1*, *clr2*, *border=1*)[¶](#wx.html.HtmlContainerCell.SetBorder "Permalink to this definition")
Sets the border (frame) colours.


A border is a rectangle around the container.



Parameters
* **clr1** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – Colour of top and left lines
* **clr2** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – Colour of bottom and right lines
* **border** (*int*) – Size of the border in pixels






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def SetIndent(self, i, what, units=HTML_UNITS_PIXELS) -> None:
        """ 

`SetIndent`(*self*, *i*, *what*, *units=HTML\_UNITS\_PIXELS*)[¶](#wx.html.HtmlContainerCell.SetIndent "Permalink to this definition")
Sets the indentation (free space between borders of container and subcells).



![_staticimagesoverviewshtmlcontcell_indent.png](_staticimagesoverviewshtmlcontcell_indent.png)


  



Parameters
* **i** (*int*) – Indentation value.
* **what** (*int*) – Determines which of the four borders we’re setting. It is `wx.OR` combination of following constants:

	+ `wx.html.HTML_INDENT_TOP`: top border
	+ `wx.html.HTML_INDENT_BOTTOM`: bottom
	+ `wx.html.HTML_INDENT_LEFT`: left
	+ `wx.html.HTML_INDENT_RIGHT`: right
	+ `wx.html.HTML_INDENT_HORIZONTAL`: left and right
	+ `wx.html.HTML_INDENT_VERTICAL`: top and bottom
	+ `wx.html.HTML_INDENT_ALL`: all 4 borders
* **units** (*int*) – Units of i. This parameter affects interpretation of value.

	+ `wx.html.HTML_UNITS_PIXELS`: *i* is number of pixels
	+ `wx.html.HTML_UNITS_PERCENT`: *i* is interpreted as percents of width of parent container






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def SetMinHeight(self, h, align=HTML_ALIGN_TOP) -> None:
        """ 

`SetMinHeight`(*self*, *h*, *align=HTML\_ALIGN\_TOP*)[¶](#wx.html.HtmlContainerCell.SetMinHeight "Permalink to this definition")
Sets minimal height of the container.


When container’s [`wx.html.HtmlCell.Layout`](wx.html.HtmlCell.html#wx.html.HtmlCell.Layout "wx.html.HtmlCell.Layout") is called, m\_Height is set depending on layout of subcells to the height of area covered by layed-out subcells. Calling this method guarantees you that the height of container is never smaller than *h* - even if the subcells cover much smaller area.



Parameters
* **h** (*int*) – The minimal height.
* **align** (*int*) – If height of the container is lower than the minimum height, empty space must be inserted somewhere in order to ensure minimal height. This parameter is one of `HTML_ALIGN_TOP` , `HTML_ALIGN_BOTTOM` , `HTML_ALIGN_CENTER` . It refers to the contents, not to the empty place.






            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    def SetWidthFloat(self, *args, **kw) -> None:
        """ 

`SetWidthFloat`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlContainerCell.SetWidthFloat "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**SetWidthFloat** *(self, w, units)*


Sets floating width adjustment.


The normal behaviour of container is that its width is the same as the width of parent container (and thus you can have only one sub-container per line). You can change this by setting the floating width adjustment.



Parameters
* **w** (*int*) – Width of the container. If the value is negative it means complement to full width of parent container. E.g.:

```
SetWidthFloat(-50, wx.html.HTML_UNITS_PIXELS)

```


sets the width of container to parent’s width minus 50 pixels. This is useful when creating tables - you can call SetWidthFloat(50) and SetWidthFloat(-50).
* **units** (*int*) – Units of w This parameter affects the interpretation of value.

	+ `wx.html.HTML_UNITS_PIXELS`: *w* is number of pixels
	+ `wx.html.HTML_UNITS_PERCENT`: *w* is interpreted as percents of width of parent container






---

  



**SetWidthFloat** *(self, tag, pixel\_scale=1.0)*


Sets floating width adjustment.


The normal behaviour of container is that its width is the same as the width of parent container (and thus you can have only one sub-container per line). You can change this by setting the floating width adjustment.



Parameters
* **tag** ([*wx.html.HtmlTag*](wx.html.HtmlTag.html#wx.html.HtmlTag "wx.html.HtmlTag")) – In the second version of method, *w* and *units* info is extracted from tag’s `WIDTH` parameter.
* **pixel\_scale** (*float*) – This is number of real pixels that equals to 1 HTML pixel.






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlContainerCell.html
        """

    AlignHor: int  # `AlignHor`[¶](#wx.html.HtmlContainerCell.AlignHor "Permalink to this definition")See [`GetAlignHor`](#wx.html.HtmlContainerCell.GetAlignHor "wx.html.HtmlContainerCell.GetAlignHor") and [`SetAlignHor`](#wx.html.HtmlContainerCell.SetAlignHor "wx.html.HtmlContainerCell.SetAlignHor")
    AlignVer: int  # `AlignVer`[¶](#wx.html.HtmlContainerCell.AlignVer "Permalink to this definition")See [`GetAlignVer`](#wx.html.HtmlContainerCell.GetAlignVer "wx.html.HtmlContainerCell.GetAlignVer") and [`SetAlignVer`](#wx.html.HtmlContainerCell.SetAlignVer "wx.html.HtmlContainerCell.SetAlignVer")
    BackgroundColour: 'Colour'  # `BackgroundColour`[¶](#wx.html.HtmlContainerCell.BackgroundColour "Permalink to this definition")See [`GetBackgroundColour`](#wx.html.HtmlContainerCell.GetBackgroundColour "wx.html.HtmlContainerCell.GetBackgroundColour") and [`SetBackgroundColour`](#wx.html.HtmlContainerCell.SetBackgroundColour "wx.html.HtmlContainerCell.SetBackgroundColour")



HTML_ALIGN_LEFT: int

HTML_ALIGN_JUSTIFY: int

HTML_ALIGN_CENTER: int

HTML_ALIGN_RIGHT: int

HTML_ALIGN_BOTTOM: int

HTML_ALIGN_TOP: int

OR: int

HTML_INDENT_TOP: int

HTML_INDENT_BOTTOM: int

HTML_INDENT_LEFT: int

HTML_INDENT_RIGHT: int

HTML_INDENT_HORIZONTAL: int

HTML_INDENT_VERTICAL: int

HTML_INDENT_ALL: int

HTML_UNITS_PIXELS: int

HTML_UNITS_PERCENT: int

class HtmlWinTagHandler(HtmlTagHandler):
    """ **Possible constructors**:



```
HtmlWinTagHandler()

```


This is basically HtmlTagHandler except that it is extended with
protected member m\_WParser pointing to the HtmlWinParser object
(value of this member is identical to HtmlParser’s m\_Parser).


  


        Source: https://docs.wxpython.org/wx.html.HtmlWinTagHandler.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlWinTagHandler.__init__ "Permalink to this definition")
Constructor.




            Source: https://docs.wxpython.org/wx.html.HtmlWinTagHandler.html
        """

    def GetParser(self) -> 'HtmlWinParser':
        """ 

`GetParser`(*self*)[¶](#wx.html.HtmlWinTagHandler.GetParser "Permalink to this definition")

Return type
 [wx.html.HtmlWinParser](wx.html.HtmlWinParser.html#wx-html-htmlwinparser)






            Source: https://docs.wxpython.org/wx.html.HtmlWinTagHandler.html
        """

    def SetParser(self, parser: 'html.HtmlParser') -> None:
        """ 

`SetParser`(*self*, *parser*)[¶](#wx.html.HtmlWinTagHandler.SetParser "Permalink to this definition")
Assigns `parser` to this handler.


Each **instance** of handler is guaranteed to be called only from the one parser.



Parameters
**parser** ([*wx.html.HtmlParser*](wx.html.HtmlParser.html#wx.html.HtmlParser "wx.html.HtmlParser")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWinTagHandler.html
        """

    Parser: 'HtmlWinParser'  # `Parser`[¶](#wx.html.HtmlWinTagHandler.Parser "Permalink to this definition")See [`GetParser`](#wx.html.HtmlWinTagHandler.GetParser "wx.html.HtmlWinTagHandler.GetParser") and [`SetParser`](#wx.html.HtmlWinTagHandler.SetParser "wx.html.HtmlWinTagHandler.SetParser")



class HtmlColourCell(HtmlCell):
    """ **Possible constructors**:



```
HtmlColourCell(clr, flags=HTML_CLR_FOREGROUND)

```


This cell changes the colour of either the background or the
foreground.


  


        Source: https://docs.wxpython.org/wx.html.HtmlColourCell.html
    """
    def __init__(self, clr, flags=HTML_CLR_FOREGROUND) -> None:
        """ 

`__init__`(*self*, *clr*, *flags=HTML\_CLR\_FOREGROUND*)[¶](#wx.html.HtmlColourCell.__init__ "Permalink to this definition")
Constructor.



Parameters
* **clr** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – The color
* **flags** (*int*) – Can be one of following:

	+ `wx.html.HTML_CLR_FOREGROUND`: change color of text
	+ `wx.html.HTML_CLR_BACKGROUND`: change background color






            Source: https://docs.wxpython.org/wx.html.HtmlColourCell.html
        """



HTML_CLR_FOREGROUND: int

HTML_CLR_BACKGROUND: int

class HtmlFontCell(HtmlCell):
    """ **Possible constructors**:



```
HtmlFontCell(font)

```


This cell represents a font change in the document stream.


  


        Source: https://docs.wxpython.org/wx.html.HtmlFontCell.html
    """
    def __init__(self, font: 'Font') -> None:
        """ 

`__init__`(*self*, *font*)[¶](#wx.html.HtmlFontCell.__init__ "Permalink to this definition")

Parameters
**font** ([*wx.Font*](wx.Font.html#wx.Font "wx.Font")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlFontCell.html
        """



class HtmlWidgetCell(HtmlCell):
    """ **Possible constructors**:



```
HtmlWidgetCell(wnd, w=0)

```


HtmlWidgetCell is a class that provides a connection between HTML
cells and widgets (an object derived from Window).


  


        Source: https://docs.wxpython.org/wx.html.HtmlWidgetCell.html
    """
    def __init__(self, wnd, w=0) -> None:
        """ 

`__init__`(*self*, *wnd*, *w=0*)[¶](#wx.html.HtmlWidgetCell.__init__ "Permalink to this definition")
Constructor.



Parameters
* **wnd** ([*wx.Window*](wx.Window.html#wx.Window "wx.Window")) – Connected window. It is parent window **must** be the  [wx.html.HtmlWindow](wx.html.HtmlWindow.html#wx-html-htmlwindow) object within which it is displayed!
* **w** (*int*) – Floating width. If non-zero width of wnd window is adjusted so that it is always w percents of parent container’s width. (For example w = 100 means that the window will always have same width as parent container).






            Source: https://docs.wxpython.org/wx.html.HtmlWidgetCell.html
        """



class HtmlWordCell(HtmlCell):
    """ **Possible constructors**:



```
HtmlWordCell(word, dc)

```


This html cell represents a single word or text fragment in the
document stream.


  


        Source: https://docs.wxpython.org/wx.html.HtmlWordCell.html
    """
    def __init__(self, word, dc) -> None:
        """ 

`__init__`(*self*, *word*, *dc*)[¶](#wx.html.HtmlWordCell.__init__ "Permalink to this definition")

Parameters
* **word** (*string*) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –






            Source: https://docs.wxpython.org/wx.html.HtmlWordCell.html
        """



class HtmlSelection:
    """ **Possible constructors**:



```
HtmlSelection()

```


  


        Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlSelection.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def AreFromToCharacterPosSet(self) -> bool:
        """ 

`AreFromToCharacterPosSet`(*self*)[¶](#wx.html.HtmlSelection.AreFromToCharacterPosSet "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def ClearFromToCharacterPos(self) -> None:
        """ 

`ClearFromToCharacterPos`(*self*)[¶](#wx.html.HtmlSelection.ClearFromToCharacterPos "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def GetFromCell(self) -> 'HtmlCell':
        """ 

`GetFromCell`(*self*)[¶](#wx.html.HtmlSelection.GetFromCell "Permalink to this definition")

Return type
 [wx.html.HtmlCell](wx.html.HtmlCell.html#wx-html-htmlcell)






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def GetFromCharacterPos(self) -> 'Coord':
        """ 

`GetFromCharacterPos`(*self*)[¶](#wx.html.HtmlSelection.GetFromCharacterPos "Permalink to this definition")

Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def GetFromPos(self) -> 'Point':
        """ 

`GetFromPos`(*self*)[¶](#wx.html.HtmlSelection.GetFromPos "Permalink to this definition")

Return type
*Point*






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def GetToCell(self) -> 'HtmlCell':
        """ 

`GetToCell`(*self*)[¶](#wx.html.HtmlSelection.GetToCell "Permalink to this definition")

Return type
 [wx.html.HtmlCell](wx.html.HtmlCell.html#wx-html-htmlcell)






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def GetToCharacterPos(self) -> 'Coord':
        """ 

`GetToCharacterPos`(*self*)[¶](#wx.html.HtmlSelection.GetToCharacterPos "Permalink to this definition")

Return type
*wx.Coord*






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def GetToPos(self) -> 'Point':
        """ 

`GetToPos`(*self*)[¶](#wx.html.HtmlSelection.GetToPos "Permalink to this definition")

Return type
*Point*






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def IsEmpty(self) -> bool:
        """ 

`IsEmpty`(*self*)[¶](#wx.html.HtmlSelection.IsEmpty "Permalink to this definition")

Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def Set(self, *args, **kw) -> None:
        """ 

`Set`(*self*, *\*args*, *\*\*kw*)[¶](#wx.html.HtmlSelection.Set "Permalink to this definition")
[![overload](_images/overload.png)](_images/overload.png) **Overloaded Implementations:**




---

  



**Set** *(self, fromPos, fromCell, toPos, toCell)*



Parameters
* **fromPos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **fromCell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) –
* **toPos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –
* **toCell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) –






---

  



**Set** *(self, fromCell, toCell)*



Parameters
* **fromCell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) –
* **toCell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) –






---

  





            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def SetFromCharacterPos(self, pos: int) -> None:
        """ 

`SetFromCharacterPos`(*self*, *pos*)[¶](#wx.html.HtmlSelection.SetFromCharacterPos "Permalink to this definition")

Parameters
**pos** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    def SetToCharacterPos(self, pos: int) -> None:
        """ 

`SetToCharacterPos`(*self*, *pos*)[¶](#wx.html.HtmlSelection.SetToCharacterPos "Permalink to this definition")

Parameters
**pos** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlSelection.html
        """

    FromCell: 'HtmlCell'  # `FromCell`[¶](#wx.html.HtmlSelection.FromCell "Permalink to this definition")See [`GetFromCell`](#wx.html.HtmlSelection.GetFromCell "wx.html.HtmlSelection.GetFromCell")
    FromCharacterPos: 'Coord'  # `FromCharacterPos`[¶](#wx.html.HtmlSelection.FromCharacterPos "Permalink to this definition")See [`GetFromCharacterPos`](#wx.html.HtmlSelection.GetFromCharacterPos "wx.html.HtmlSelection.GetFromCharacterPos") and [`SetFromCharacterPos`](#wx.html.HtmlSelection.SetFromCharacterPos "wx.html.HtmlSelection.SetFromCharacterPos")
    FromPos: 'Point'  # `FromPos`[¶](#wx.html.HtmlSelection.FromPos "Permalink to this definition")See [`GetFromPos`](#wx.html.HtmlSelection.GetFromPos "wx.html.HtmlSelection.GetFromPos")
    ToCell: 'HtmlCell'  # `ToCell`[¶](#wx.html.HtmlSelection.ToCell "Permalink to this definition")See [`GetToCell`](#wx.html.HtmlSelection.GetToCell "wx.html.HtmlSelection.GetToCell")
    ToCharacterPos: 'Coord'  # `ToCharacterPos`[¶](#wx.html.HtmlSelection.ToCharacterPos "Permalink to this definition")See [`GetToCharacterPos`](#wx.html.HtmlSelection.GetToCharacterPos "wx.html.HtmlSelection.GetToCharacterPos") and [`SetToCharacterPos`](#wx.html.HtmlSelection.SetToCharacterPos "wx.html.HtmlSelection.SetToCharacterPos")
    ToPos: 'Point'  # `ToPos`[¶](#wx.html.HtmlSelection.ToPos "Permalink to this definition")See [`GetToPos`](#wx.html.HtmlSelection.GetToPos "wx.html.HtmlSelection.GetToPos")



class HtmlRenderingInfo:
    """ **Possible constructors**:



```
HtmlRenderingInfo()

```


This class contains information given to cells when drawing them.


  


        Source: https://docs.wxpython.org/wx.html.HtmlRenderingInfo.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlRenderingInfo.__init__ "Permalink to this definition")
Default constructor.




            Source: https://docs.wxpython.org/wx.html.HtmlRenderingInfo.html
        """

    def GetSelection(self) -> 'HtmlSelection':
        """ 

`GetSelection`(*self*)[¶](#wx.html.HtmlRenderingInfo.GetSelection "Permalink to this definition")
Accessors.



Return type
 [wx.html.HtmlSelection](wx.html.HtmlSelection.html#wx-html-htmlselection)






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingInfo.html
        """

    def GetState(self) -> 'HtmlRenderingState':
        """ 

`GetState`(*self*)[¶](#wx.html.HtmlRenderingInfo.GetState "Permalink to this definition")
Accessors.



Return type
 [wx.html.HtmlRenderingState](wx.html.HtmlRenderingState.html#wx-html-htmlrenderingstate)






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingInfo.html
        """

    def GetStyle(self) -> 'HtmlRenderingStyle':
        """ 

`GetStyle`(*self*)[¶](#wx.html.HtmlRenderingInfo.GetStyle "Permalink to this definition")
Accessors.



Return type
 [wx.html.HtmlRenderingStyle](wx.html.HtmlRenderingStyle.html#wx-html-htmlrenderingstyle)






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingInfo.html
        """

    def SetSelection(self, s: 'html.HtmlSelection') -> None:
        """ 

`SetSelection`(*self*, *s*)[¶](#wx.html.HtmlRenderingInfo.SetSelection "Permalink to this definition")
Accessors.



Parameters
**s** ([*wx.html.HtmlSelection*](wx.html.HtmlSelection.html#wx.html.HtmlSelection "wx.html.HtmlSelection")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingInfo.html
        """

    def SetStyle(self, style: 'html.HtmlRenderingStyle') -> None:
        """ 

`SetStyle`(*self*, *style*)[¶](#wx.html.HtmlRenderingInfo.SetStyle "Permalink to this definition")
Accessors.



Parameters
**style** ([*wx.html.HtmlRenderingStyle*](wx.html.HtmlRenderingStyle.html#wx.html.HtmlRenderingStyle "wx.html.HtmlRenderingStyle")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingInfo.html
        """

    Selection: 'HtmlSelection'  # `Selection`[¶](#wx.html.HtmlRenderingInfo.Selection "Permalink to this definition")See [`GetSelection`](#wx.html.HtmlRenderingInfo.GetSelection "wx.html.HtmlRenderingInfo.GetSelection") and [`SetSelection`](#wx.html.HtmlRenderingInfo.SetSelection "wx.html.HtmlRenderingInfo.SetSelection")
    State: 'HtmlRenderingState'  # `State`[¶](#wx.html.HtmlRenderingInfo.State "Permalink to this definition")See [`GetState`](#wx.html.HtmlRenderingInfo.GetState "wx.html.HtmlRenderingInfo.GetState")
    Style: 'HtmlRenderingStyle'  # `Style`[¶](#wx.html.HtmlRenderingInfo.Style "Permalink to this definition")See [`GetStyle`](#wx.html.HtmlRenderingInfo.GetStyle "wx.html.HtmlRenderingInfo.GetStyle") and [`SetStyle`](#wx.html.HtmlRenderingInfo.SetStyle "wx.html.HtmlRenderingInfo.SetStyle")



class HtmlWindowInterface:
    """ **Possible constructors**:



```
HtmlWindowInterface()

```


Abstract interface to a HTML rendering window (such as HtmlWindow or
HtmlListBox) that is passed to HtmlWinParser.


  


        Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlWindowInterface.__init__ "Permalink to this definition")
Ctor.




            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def GetHTMLBackgroundColour(self) -> 'Colour':
        """ 

`GetHTMLBackgroundColour`(*self*)[¶](#wx.html.HtmlWindowInterface.GetHTMLBackgroundColour "Permalink to this definition")
Returns background colour to use by default.



Return type
*Colour*






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def GetHTMLCursor(self, type: HtmlWindowInterface.HTMLCursor) -> 'Cursor':
        """ 

`GetHTMLCursor`(*self*, *type*)[¶](#wx.html.HtmlWindowInterface.GetHTMLCursor "Permalink to this definition")
Returns mouse cursor of given *type*.



Parameters
**type** (*HtmlWindowInterface.HTMLCursor*) – 



Return type
*Cursor*






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def GetHTMLWindow(self) -> 'Window':
        """ 

`GetHTMLWindow`(*self*)[¶](#wx.html.HtmlWindowInterface.GetHTMLWindow "Permalink to this definition")
Returns the window used for rendering (may be `None`).



Return type
*Window*






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def HTMLCoordsToWindow(self, cell, pos) -> 'Point':
        """ 

`HTMLCoordsToWindow`(*self*, *cell*, *pos*)[¶](#wx.html.HtmlWindowInterface.HTMLCoordsToWindow "Permalink to this definition")
Converts coordinates *pos* relative to given *cell* to physical coordinates in the window.



Parameters
* **cell** ([*wx.html.HtmlCell*](wx.html.HtmlCell.html#wx.html.HtmlCell "wx.html.HtmlCell")) –
* **pos** ([*wx.Point*](wx.Point.html#wx.Point "wx.Point")) –



Return type
*Point*






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def OnHTMLLinkClicked(self, link: 'html.HtmlLinkInfo') -> None:
        """ 

`OnHTMLLinkClicked`(*self*, *link*)[¶](#wx.html.HtmlWindowInterface.OnHTMLLinkClicked "Permalink to this definition")
Called when a link is clicked.



Parameters
**link** ([*wx.html.HtmlLinkInfo*](wx.html.HtmlLinkInfo.html#wx.html.HtmlLinkInfo "wx.html.HtmlLinkInfo")) – information about the clicked link






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def OnHTMLOpeningURL(self, type, url) -> None:
        """ 

`OnHTMLOpeningURL`(*self*, *type*, *url*)[¶](#wx.html.HtmlWindowInterface.OnHTMLOpeningURL "Permalink to this definition")
Called when the parser needs to open another URL (e.g.


an image).



Parameters
* **type** ([*HtmlURLType*](wx.html.HtmlURLType.enumeration.html "HtmlURLType")) – Type of the URL request (e.g. image)
* **url** (*string*) – URL the parser wants to open




If the return value is `wx.html.HTML_REDIRECT`, then the URL to redirect to will be stored in this variable (the pointer must never be `None`)



Return type
*tuple*



Returns
(  [wx.html.HtmlOpeningStatus](wx.html.HtmlOpeningStatus.enumeration.html#wx-html-htmlopeningstatus), *redirectTo* )






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def SetHTMLBackgroundColour(self, clr: Union[int, str, 'Colour']) -> None:
        """ 

`SetHTMLBackgroundColour`(*self*, *clr*)[¶](#wx.html.HtmlWindowInterface.SetHTMLBackgroundColour "Permalink to this definition")
Sets window’s background to colour *clr*.



Parameters
**clr** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def SetHTMLBackgroundImage(self, bmpBg: 'BitmapBundle') -> None:
        """ 

`SetHTMLBackgroundImage`(*self*, *bmpBg*)[¶](#wx.html.HtmlWindowInterface.SetHTMLBackgroundImage "Permalink to this definition")
Sets window’s background to given bitmap.



Parameters
**bmpBg** ([*wx.BitmapBundle*](wx.BitmapBundle.html#wx.BitmapBundle "wx.BitmapBundle")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def SetHTMLStatusText(self, text: str) -> None:
        """ 

`SetHTMLStatusText`(*self*, *text*)[¶](#wx.html.HtmlWindowInterface.SetHTMLStatusText "Permalink to this definition")
Sets status bar text.



Parameters
**text** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    def SetHTMLWindowTitle(self, title: str) -> None:
        """ 

`SetHTMLWindowTitle`(*self*, *title*)[¶](#wx.html.HtmlWindowInterface.SetHTMLWindowTitle "Permalink to this definition")
Called by the parser to set window’s title to given text.



Parameters
**title** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlWindowInterface.html
        """

    HTMLBackgroundColour: 'Colour'  # `HTMLBackgroundColour`[¶](#wx.html.HtmlWindowInterface.HTMLBackgroundColour "Permalink to this definition")See [`GetHTMLBackgroundColour`](#wx.html.HtmlWindowInterface.GetHTMLBackgroundColour "wx.html.HtmlWindowInterface.GetHTMLBackgroundColour") and [`SetHTMLBackgroundColour`](#wx.html.HtmlWindowInterface.SetHTMLBackgroundColour "wx.html.HtmlWindowInterface.SetHTMLBackgroundColour")
    HTMLWindow: 'Window'  # `HTMLWindow`[¶](#wx.html.HtmlWindowInterface.HTMLWindow "Permalink to this definition")See [`GetHTMLWindow`](#wx.html.HtmlWindowInterface.GetHTMLWindow "wx.html.HtmlWindowInterface.GetHTMLWindow")



class HtmlTag:
    """ This class represents a single HTML tag.


  


        Source: https://docs.wxpython.org/wx.html.HtmlTag.html
    """
    def GetAllParams(self) -> str:
        """ 

`GetAllParams`(*self*)[¶](#wx.html.HtmlTag.GetAllParams "Permalink to this definition")
Returns a string containing all parameters.


Example: tag contains <FONT SIZE=+2 COLOR=”#000000”>. Call to tag.GetAllParams() would return `'SIZE=+2` COLOR=”#000000”’.



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    def GetName(self) -> str:
        """ 

`GetName`(*self*)[¶](#wx.html.HtmlTag.GetName "Permalink to this definition")
Returns tag’s name.


The name is always in uppercase and it doesn’t contain ” or ‘/’ characters. (So the name of <FONT SIZE=+2> tag is “FONT” and name of </table> is “`TABLE`”).



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    def GetParam(self, par, with_quotes=False) -> str:
        """ 

`GetParam`(*self*, *par*, *with\_quotes=False*)[¶](#wx.html.HtmlTag.GetParam "Permalink to this definition")
Returns the value of the parameter.


You should check whether the parameter exists or not (use [`wx.html.HtmlTag.HasParam`](#wx.html.HtmlTag.HasParam "wx.html.HtmlTag.HasParam") ) first or use [`GetParamAsString`](#wx.html.HtmlTag.GetParamAsString "wx.html.HtmlTag.GetParamAsString") if you need to distinguish between non-specified and empty parameter values.



Parameters
* **par** (*string*) – The parameter’s name.
* **with\_quotes** (*bool*) – `True` if you want to get quotes as well. See example.



Return type
`string`





```
# ... Some code here...

# you have wx.HtmlTag variable tag which is equal to the
# HTML tag <FONT SIZE=+2 COLOR="#0000FF">
dummy = tag.GetParam("SIZE")
# dummy == "+2"
dummy = tag.GetParam("COLOR")
# dummy == "#0000FF"
dummy = tag.GetParam("COLOR", true)
# dummy == "\"#0000FF\"" -- see the difference!!

```




            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    def GetParamAsColour(self, par: str) -> tuple:
        """ 

`GetParamAsColour`(*self*, *par*)[¶](#wx.html.HtmlTag.GetParamAsColour "Permalink to this definition")
Interprets tag parameter *par* as colour specification and saves its value into  [wx.Colour](wx.Colour.html#wx-colour) variable pointed by *clr*.


Returns `True` on success and `False` if *par* is not colour specification or if the tag has no such parameter.



Parameters
**par** (*string*) – 



Return type
*tuple*



Returns
( *bool*, *clr* )





See also


[`ParseAsColour`](#wx.html.HtmlTag.ParseAsColour "wx.html.HtmlTag.ParseAsColour")





            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    def GetParamAsInt(self, par: str) -> tuple:
        """ 

`GetParamAsInt`(*self*, *par*)[¶](#wx.html.HtmlTag.GetParamAsInt "Permalink to this definition")
Interprets tag parameter *par* as an integer and saves its value into int variable pointed by *value*.


Returns `True` on success and `False` if *par* is not an integer or if the tag has no such parameter.



Parameters
**par** (*string*) – 



Return type
*tuple*



Returns
( *bool*, *value* )






            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    def GetParamAsString(self, par, value) -> bool:
        """ 

`GetParamAsString`(*self*, *par*, *value*)[¶](#wx.html.HtmlTag.GetParamAsString "Permalink to this definition")
Get the value of the parameter.


If the tag doesn’t have such parameter at all, simply returns `False`. Otherwise, fills *value* with the parameter value and returns `True`.



Parameters
* **par** (*string*) – The parameter’s name.
* **value** (*string*) – Pointer to the string to be filled with the parameter value, must be not `None`.



Return type
*bool*





New in version 3.0.





            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    def HasEnding(self) -> bool:
        """ 

`HasEnding`(*self*)[¶](#wx.html.HtmlTag.HasEnding "Permalink to this definition")
Returns `True` if this tag is paired with ending tag, `False` otherwise.


See the example of HTML document:



```
<html><body>
Hello<p>
How are you?
<p align=center>This is centered...</p>
Oops<br>Oooops!
</body></html>

```


In this example tags HTML and `BODY` have ending tags, first P and `BR` doesn’t have ending tag while the second P has. The third P tag (which is ending itself) of course doesn’t have ending tag.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    def HasParam(self, par: str) -> bool:
        """ 

`HasParam`(*self*, *par*)[¶](#wx.html.HtmlTag.HasParam "Permalink to this definition")
Returns `True` if the tag has a parameter of the given name.


Example: <FONT SIZE=+2 COLOR=”\#FF00FF”> has two parameters named “SIZE” and “COLOR”.



Parameters
**par** (*string*) – the parameter you’re looking for.



Return type
*bool*






            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    @staticmethod
    def ParseAsColour(str: str) -> tuple:
        """ 

*static* `ParseAsColour`(*str*)[¶](#wx.html.HtmlTag.ParseAsColour "Permalink to this definition")
Parses the given string as an HTML colour.


This function recognizes the standard named HTML 4 colours as well as the usual `RGB` syntax.



Parameters
**str** (*string*) – 



Return type
*tuple*



Returns
( *bool*, *clr* )





New in version 2.9.1.




See also


[`wx.Colour.Set`](wx.Colour.html#wx.Colour.Set "wx.Colour.Set")





            Source: https://docs.wxpython.org/wx.html.HtmlTag.html
        """

    AllParams: str  # `AllParams`[¶](#wx.html.HtmlTag.AllParams "Permalink to this definition")See [`GetAllParams`](#wx.html.HtmlTag.GetAllParams "wx.html.HtmlTag.GetAllParams")
    Name: str  # `Name`[¶](#wx.html.HtmlTag.Name "Permalink to this definition")See [`GetName`](#wx.html.HtmlTag.GetName "wx.html.HtmlTag.GetName")



HtmlURLType: TypeAlias = int  # Enumeration

HtmlOpeningStatus: TypeAlias = int  # Enumeration

class HtmlBookRecord:
    """ **Possible constructors**:



```
HtmlBookRecord(bookfile, basepath, title, start)

```


Helper class for HtmlHelpData.


  


        Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
    """
    def __init__(self, bookfile, basepath, title, start) -> None:
        """ 

`__init__`(*self*, *bookfile*, *basepath*, *title*, *start*)[¶](#wx.html.HtmlBookRecord.__init__ "Permalink to this definition")

Parameters
* **bookfile** (*string*) –
* **basepath** (*string*) –
* **title** (*string*) –
* **start** (*string*) –






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def GetBasePath(self) -> str:
        """ 

`GetBasePath`(*self*)[¶](#wx.html.HtmlBookRecord.GetBasePath "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def GetBookFile(self) -> str:
        """ 

`GetBookFile`(*self*)[¶](#wx.html.HtmlBookRecord.GetBookFile "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def GetContentsEnd(self) -> int:
        """ 

`GetContentsEnd`(*self*)[¶](#wx.html.HtmlBookRecord.GetContentsEnd "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def GetContentsStart(self) -> int:
        """ 

`GetContentsStart`(*self*)[¶](#wx.html.HtmlBookRecord.GetContentsStart "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def GetFullPath(self, page: str) -> str:
        """ 

`GetFullPath`(*self*, *page*)[¶](#wx.html.HtmlBookRecord.GetFullPath "Permalink to this definition")

Parameters
**page** (*string*) – 



Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def GetStart(self) -> str:
        """ 

`GetStart`(*self*)[¶](#wx.html.HtmlBookRecord.GetStart "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def GetTitle(self) -> str:
        """ 

`GetTitle`(*self*)[¶](#wx.html.HtmlBookRecord.GetTitle "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def SetBasePath(self, path: str) -> None:
        """ 

`SetBasePath`(*self*, *path*)[¶](#wx.html.HtmlBookRecord.SetBasePath "Permalink to this definition")

Parameters
**path** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def SetContentsRange(self, start, end) -> None:
        """ 

`SetContentsRange`(*self*, *start*, *end*)[¶](#wx.html.HtmlBookRecord.SetContentsRange "Permalink to this definition")

Parameters
* **start** (*int*) –
* **end** (*int*) –






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def SetStart(self, start: str) -> None:
        """ 

`SetStart`(*self*, *start*)[¶](#wx.html.HtmlBookRecord.SetStart "Permalink to this definition")

Parameters
**start** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    def SetTitle(self, title: str) -> None:
        """ 

`SetTitle`(*self*, *title*)[¶](#wx.html.HtmlBookRecord.SetTitle "Permalink to this definition")

Parameters
**title** (*string*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlBookRecord.html
        """

    BasePath: str  # `BasePath`[¶](#wx.html.HtmlBookRecord.BasePath "Permalink to this definition")See [`GetBasePath`](#wx.html.HtmlBookRecord.GetBasePath "wx.html.HtmlBookRecord.GetBasePath") and [`SetBasePath`](#wx.html.HtmlBookRecord.SetBasePath "wx.html.HtmlBookRecord.SetBasePath")
    BookFile: str  # `BookFile`[¶](#wx.html.HtmlBookRecord.BookFile "Permalink to this definition")See [`GetBookFile`](#wx.html.HtmlBookRecord.GetBookFile "wx.html.HtmlBookRecord.GetBookFile")
    ContentsEnd: int  # `ContentsEnd`[¶](#wx.html.HtmlBookRecord.ContentsEnd "Permalink to this definition")See [`GetContentsEnd`](#wx.html.HtmlBookRecord.GetContentsEnd "wx.html.HtmlBookRecord.GetContentsEnd")
    ContentsStart: int  # `ContentsStart`[¶](#wx.html.HtmlBookRecord.ContentsStart "Permalink to this definition")See [`GetContentsStart`](#wx.html.HtmlBookRecord.GetContentsStart "wx.html.HtmlBookRecord.GetContentsStart")
    Start: str  # `Start`[¶](#wx.html.HtmlBookRecord.Start "Permalink to this definition")See [`GetStart`](#wx.html.HtmlBookRecord.GetStart "wx.html.HtmlBookRecord.GetStart") and [`SetStart`](#wx.html.HtmlBookRecord.SetStart "wx.html.HtmlBookRecord.SetStart")
    Title: str  # `Title`[¶](#wx.html.HtmlBookRecord.Title "Permalink to this definition")See [`GetTitle`](#wx.html.HtmlBookRecord.GetTitle "wx.html.HtmlBookRecord.GetTitle") and [`SetTitle`](#wx.html.HtmlBookRecord.SetTitle "wx.html.HtmlBookRecord.SetTitle")



class HtmlHelpDataItem:
    """ **Possible constructors**:



```
HtmlHelpDataItem()

```


Helper class for HtmlHelpData.


  


        Source: https://docs.wxpython.org/wx.html.HtmlHelpDataItem.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlHelpDataItem.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.html.HtmlHelpDataItem.html
        """

    def GetFullPath(self) -> str:
        """ 

`GetFullPath`(*self*)[¶](#wx.html.HtmlHelpDataItem.GetFullPath "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlHelpDataItem.html
        """

    def GetIndentedName(self) -> str:
        """ 

`GetIndentedName`(*self*)[¶](#wx.html.HtmlHelpDataItem.GetIndentedName "Permalink to this definition")

Return type
`string`






            Source: https://docs.wxpython.org/wx.html.HtmlHelpDataItem.html
        """

    FullPath: str  # `FullPath`[¶](#wx.html.HtmlHelpDataItem.FullPath "Permalink to this definition")See [`GetFullPath`](#wx.html.HtmlHelpDataItem.GetFullPath "wx.html.HtmlHelpDataItem.GetFullPath")
    IndentedName: str  # `IndentedName`[¶](#wx.html.HtmlHelpDataItem.IndentedName "Permalink to this definition")See [`GetIndentedName`](#wx.html.HtmlHelpDataItem.GetIndentedName "wx.html.HtmlHelpDataItem.GetIndentedName")
    book: Any  # `book`[¶](#wx.html.HtmlHelpDataItem.book "Permalink to this definition")A public C++ attribute of type [`HtmlBookRecord`](wx.html.HtmlBookRecord.html#wx.html.HtmlBookRecord "wx.html.HtmlBookRecord") .
    id: Any  # `id`[¶](#wx.html.HtmlHelpDataItem.id "Permalink to this definition")A public C++ attribute of type `int`.
    level: Any  # `level`[¶](#wx.html.HtmlHelpDataItem.level "Permalink to this definition")A public C++ attribute of type `int`.
    name: Any  # `name`[¶](#wx.html.HtmlHelpDataItem.name "Permalink to this definition")A public C++ attribute of type `string`.
    page: Any  # `page`[¶](#wx.html.HtmlHelpDataItem.page "Permalink to this definition")A public C++ attribute of type `string`.
    parent: Any  # `parent`[¶](#wx.html.HtmlHelpDataItem.parent "Permalink to this definition")A public C++ attribute of type [`HtmlHelpDataItem`](#wx.html.HtmlHelpDataItem "wx.html.HtmlHelpDataItem") .



class HtmlRenderingState:
    """ **Possible constructors**:



```
HtmlRenderingState()

```


Selection state is passed to *HtmlCell.Draw* so that it can render
itself differently e.g.


  


        Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
    """
    def __init__(self) -> None:
        """ 

`__init__`(*self*)[¶](#wx.html.HtmlRenderingState.__init__ "Permalink to this definition")


            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    def GetBgColour(self) -> 'Colour':
        """ 

`GetBgColour`(*self*)[¶](#wx.html.HtmlRenderingState.GetBgColour "Permalink to this definition")

Return type
*Colour*






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    def GetBgMode(self) -> int:
        """ 

`GetBgMode`(*self*)[¶](#wx.html.HtmlRenderingState.GetBgMode "Permalink to this definition")

Return type
*int*






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    def GetFgColour(self) -> 'Colour':
        """ 

`GetFgColour`(*self*)[¶](#wx.html.HtmlRenderingState.GetFgColour "Permalink to this definition")

Return type
*Colour*






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    def GetSelectionState(self) -> 'HtmlSelectionState':
        """ 

`GetSelectionState`(*self*)[¶](#wx.html.HtmlRenderingState.GetSelectionState "Permalink to this definition")

Return type
 [wx.html.HtmlSelectionState](wx.html.HtmlSelectionState.enumeration.html#wx-html-htmlselectionstate)






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    def SetBgColour(self, c: Union[int, str, 'Colour']) -> None:
        """ 

`SetBgColour`(*self*, *c*)[¶](#wx.html.HtmlRenderingState.SetBgColour "Permalink to this definition")

Parameters
**c** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    def SetBgMode(self, m: int) -> None:
        """ 

`SetBgMode`(*self*, *m*)[¶](#wx.html.HtmlRenderingState.SetBgMode "Permalink to this definition")

Parameters
**m** (*int*) – 






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    def SetFgColour(self, c: Union[int, str, 'Colour']) -> None:
        """ 

`SetFgColour`(*self*, *c*)[¶](#wx.html.HtmlRenderingState.SetFgColour "Permalink to this definition")

Parameters
**c** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    def SetSelectionState(self, s: HtmlSelectionState) -> None:
        """ 

`SetSelectionState`(*self*, *s*)[¶](#wx.html.HtmlRenderingState.SetSelectionState "Permalink to this definition")

Parameters
**s** ([*HtmlSelectionState*](wx.html.HtmlSelectionState.enumeration.html "HtmlSelectionState")) – 






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingState.html
        """

    BgColour: 'Colour'  # `BgColour`[¶](#wx.html.HtmlRenderingState.BgColour "Permalink to this definition")See [`GetBgColour`](#wx.html.HtmlRenderingState.GetBgColour "wx.html.HtmlRenderingState.GetBgColour") and [`SetBgColour`](#wx.html.HtmlRenderingState.SetBgColour "wx.html.HtmlRenderingState.SetBgColour")
    BgMode: int  # `BgMode`[¶](#wx.html.HtmlRenderingState.BgMode "Permalink to this definition")See [`GetBgMode`](#wx.html.HtmlRenderingState.GetBgMode "wx.html.HtmlRenderingState.GetBgMode") and [`SetBgMode`](#wx.html.HtmlRenderingState.SetBgMode "wx.html.HtmlRenderingState.SetBgMode")
    FgColour: 'Colour'  # `FgColour`[¶](#wx.html.HtmlRenderingState.FgColour "Permalink to this definition")See [`GetFgColour`](#wx.html.HtmlRenderingState.GetFgColour "wx.html.HtmlRenderingState.GetFgColour") and [`SetFgColour`](#wx.html.HtmlRenderingState.SetFgColour "wx.html.HtmlRenderingState.SetFgColour")
    SelectionState: 'HtmlSelectionState'  # `SelectionState`[¶](#wx.html.HtmlRenderingState.SelectionState "Permalink to this definition")See [`GetSelectionState`](#wx.html.HtmlRenderingState.GetSelectionState "wx.html.HtmlRenderingState.GetSelectionState") and [`SetSelectionState`](#wx.html.HtmlRenderingState.SetSelectionState "wx.html.HtmlRenderingState.SetSelectionState")



class HtmlRenderingStyle:
    """ HtmlSelection is data holder with information about text selection.


  


        Source: https://docs.wxpython.org/wx.html.HtmlRenderingStyle.html
    """
    def GetSelectedTextBgColour(self, clr: Union[int, str, 'Colour']) -> 'Colour':
        """ 

`GetSelectedTextBgColour`(*self*, *clr*)[¶](#wx.html.HtmlRenderingStyle.GetSelectedTextBgColour "Permalink to this definition")
Returns the colour to use for the selected text’s background.



Parameters
**clr** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
*Colour*






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingStyle.html
        """

    def GetSelectedTextColour(self, clr: Union[int, str, 'Colour']) -> 'Colour':
        """ 

`GetSelectedTextColour`(*self*, *clr*)[¶](#wx.html.HtmlRenderingStyle.GetSelectedTextColour "Permalink to this definition")
Returns the colour to use for the selected text.



Parameters
**clr** ([*wx.Colour*](wx.Colour.html#wx.Colour "wx.Colour")) – 



Return type
*Colour*






            Source: https://docs.wxpython.org/wx.html.HtmlRenderingStyle.html
        """



class HtmlWordWithTabsCell(HtmlWordCell):
    """ **Possible constructors**:



```
HtmlWordWithTabsCell(word, wordOrig, linepos, dc)

```


HtmlWordCell is a specialization for storing text fragments with
embedded tab characters.


  


        Source: https://docs.wxpython.org/wx.html.HtmlWordWithTabsCell.html
    """
    def __init__(self, word, wordOrig, linepos, dc) -> None:
        """ 

`__init__`(*self*, *word*, *wordOrig*, *linepos*, *dc*)[¶](#wx.html.HtmlWordWithTabsCell.__init__ "Permalink to this definition")

Parameters
* **word** (*string*) –
* **wordOrig** (*string*) –
* **linepos** (*int*) –
* **dc** ([*wx.DC*](wx.DC.html#wx.DC "wx.DC")) –






            Source: https://docs.wxpython.org/wx.html.HtmlWordWithTabsCell.html
        """



HtmlSelectionState: TypeAlias = int  # Enumeration

HTML_SEL_OUT: int

HTML_SEL_IN: int

HTML_SEL_CHANGING: int

HtmlBookRecArray: TypeAlias = list[Any]

HtmlHelpDataItems: TypeAlias = list[Any]

PromptMode: TypeAlias = int  # Enumeration

HTMLCursor: TypeAlias = int  # Enumeration

